
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d508  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d5c4  0800d5c4  0000e5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e034  0800e034  00010458  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e034  0800e034  0000f034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e03c  0800e03c  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e03c  0800e03c  0000f03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e040  0800e040  0000f040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000458  20000000  0800e044  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000458  0800e49c  00010458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce8  0800e49c  00010ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002106f  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000472f  00000000  00000000  000314ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00035c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001278  00000000  00000000  00037400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015a2a  00000000  00000000  00038678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000083a3  00000000  00000000  0004e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00056445  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000054e0  00000000  00000000  00056488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000458 	.word	0x20000458
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d5ac 	.word	0x0800d5ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000045c 	.word	0x2000045c
 8000100:	0800d5ac 	.word	0x0800d5ac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000474 	.word	0x20000474
 80004fc:	0800d5c4 	.word	0x0800d5c4
 8000500:	20000484 	.word	0x20000484
 8000504:	20000000 	.word	0x20000000
 8000508:	0800d5cc 	.word	0x0800d5cc
 800050c:	20000008 	.word	0x20000008
 8000510:	0800d5d4 	.word	0x0800d5d4
 8000514:	20000010 	.word	0x20000010
 8000518:	0800d5dc 	.word	0x0800d5dc
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8fd 	bl	80007aa <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f912 	bl	80007fc <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f90d 	bl	800081a <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f908 	bl	8000838 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f903 	bl	8000856 <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa7b 	bl	8000b5c <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa95 	bl	8000ba6 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 faa3 	bl	8000bd8 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 faab 	bl	8000bfe <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fab9 	bl	8000c30 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000438 	.word	0x20000438
 80006cc:	20000c74 	.word	0x20000c74
 80006d0:	20000c50 	.word	0x20000c50
 80006d4:	20000430 	.word	0x20000430
 80006d8:	20000434 	.word	0x20000434
 80006dc:	2000043c 	.word	0x2000043c
 80006e0:	20000440 	.word	0x20000440
 80006e4:	200004bc 	.word	0x200004bc
 80006e8:	20000494 	.word	0x20000494
 80006ec:	200004c4 	.word	0x200004c4
 80006f0:	200004c5 	.word	0x200004c5
 80006f4:	200004c6 	.word	0x200004c6
 80006f8:	200004c7 	.word	0x200004c7
 80006fc:	200004c8 	.word	0x200004c8

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	701a      	strb	r2, [r3, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	891b      	ldrh	r3, [r3, #8]
 800076a:	b29b      	uxth	r3, r3
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b29b      	uxth	r3, r3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	705a      	strb	r2, [r3, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7a9b      	ldrb	r3, [r3, #10]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	709a      	strb	r2, [r3, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	b29b      	uxth	r3, r3
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	70da      	strb	r2, [r3, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000794:	b29b      	uxth	r3, r3
 8000796:	089b      	lsrs	r3, r3, #2
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	711a      	strb	r2, [r3, #4]

	return 1;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}

080007aa <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 80007b4:	210f      	movs	r1, #15
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007c4:	d803      	bhi.n	80007ce <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	719a      	strb	r2, [r3, #6]
 80007cc:	e011      	b.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b55      	cmp	r3, #85	@ 0x55
 80007d6:	d803      	bhi.n	80007e0 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2201      	movs	r2, #1
 80007dc:	719a      	strb	r2, [r3, #6]
 80007de:	e008      	b.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db02      	blt.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2202      	movs	r2, #2
 80007f0:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b004      	add	sp, #16
 80007fa:	bd80      	pop	{r7, pc}

080007fc <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	885b      	ldrh	r3, [r3, #2]
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	811a      	strh	r2, [r3, #8]

	return 1;
 8000810:	2301      	movs	r3, #1
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	729a      	strb	r2, [r3, #10]

	return 1;
 800082e:	2301      	movs	r3, #1
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}

08000838 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	88db      	ldrh	r3, [r3, #6]
 8000846:	b29a      	uxth	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	819a      	strh	r2, [r3, #12]

	return 1;
 800084c:	2301      	movs	r3, #1
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}

08000856 <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	891b      	ldrh	r3, [r3, #8]
 8000864:	b29a      	uxth	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}

08000874 <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 8000886:	2317      	movs	r3, #23
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e020      	b.n	80008d2 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000890:	2117      	movs	r1, #23
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da06      	bge.n	80008b0 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	227f      	movs	r2, #127	@ 0x7f
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e00a      	b.n	80008c6 <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 80008b0:	2117      	movs	r1, #23
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	18d2      	adds	r2, r2, r3
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	68f9      	ldr	r1, [r7, #12]
 80008c0:	18cb      	adds	r3, r1, r3
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 80008c6:	2117      	movs	r1, #23
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	3201      	adds	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	2317      	movs	r3, #23
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d9d9      	bls.n	8000890 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 80008dc:	2301      	movs	r3, #1
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b006      	add	sp, #24
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b088      	sub	sp, #32
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008f8:	2316      	movs	r3, #22
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	231f      	movs	r3, #31
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e02c      	b.n	8000964 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 800090a:	211f      	movs	r1, #31
 800090c:	187b      	adds	r3, r7, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	2016      	movs	r0, #22
 8000918:	183b      	adds	r3, r7, r0
 800091a:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 800091c:	183b      	adds	r3, r7, r0
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b01      	cmp	r3, #1
 8000924:	d106      	bne.n	8000934 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e011      	b.n	8000958 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000934:	2216      	movs	r2, #22
 8000936:	18bb      	adds	r3, r7, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2bff      	cmp	r3, #255	@ 0xff
 800093e:	d004      	beq.n	800094a <Read_and_Interpret_Misc_From_Flash+0x64>
 8000940:	18bb      	adds	r3, r7, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d106      	bne.n	8000958 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 800094a:	231f      	movs	r3, #31
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000958:	211f      	movs	r1, #31
 800095a:	187b      	adds	r3, r7, r1
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	187b      	adds	r3, r7, r1
 8000960:	3201      	adds	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	231f      	movs	r3, #31
 8000966:	18fa      	adds	r2, r7, r3
 8000968:	2128      	movs	r1, #40	@ 0x28
 800096a:	187b      	adds	r3, r7, r1
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3ca      	bcc.n	800090a <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	18d3      	adds	r3, r2, r3
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	2116      	movs	r1, #22
 8000980:	187b      	adds	r3, r7, r1
 8000982:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000984:	187b      	adds	r3, r7, r1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0018      	movs	r0, r3
 8000994:	f005 fbc2 	bl	800611c <Clear_Status_Bit>
 8000998:	e00f      	b.n	80009ba <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 800099a:	2216      	movs	r2, #22
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d004      	beq.n	80009b0 <Read_and_Interpret_Misc_From_Flash+0xca>
 80009a6:	18bb      	adds	r3, r7, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2bff      	cmp	r3, #255	@ 0xff
 80009ae:	d104      	bne.n	80009ba <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f005 fb9f 	bl	80060f8 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 80009ba:	2328      	movs	r3, #40	@ 0x28
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	2116      	movs	r1, #22
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d107      	bne.n	80009e8 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	00da      	lsls	r2, r3, #3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f005 fb89 	bl	80060f8 <Set_Status_Bit>
 80009e6:	e011      	b.n	8000a0c <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 80009e8:	2216      	movs	r2, #22
 80009ea:	18bb      	adds	r3, r7, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <Read_and_Interpret_Misc_From_Flash+0x118>
 80009f4:	18bb      	adds	r3, r7, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2bff      	cmp	r3, #255	@ 0xff
 80009fc:	d106      	bne.n	8000a0c <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	00da      	lsls	r2, r3, #3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f005 fb88 	bl	800611c <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000a0c:	2328      	movs	r3, #40	@ 0x28
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3302      	adds	r3, #2
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	18d3      	adds	r3, r2, r3
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	2116      	movs	r1, #22
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d908      	bls.n	8000a3c <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000a2a:	2117      	movs	r1, #23
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e005      	b.n	8000a48 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000a3c:	2316      	movs	r3, #22
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b008      	add	sp, #32
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a60:	2317      	movs	r3, #23
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	e03c      	b.n	8000ae4 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a6a:	2117      	movs	r1, #23
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	18d3      	adds	r3, r2, r3
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d112      	bne.n	8000aa2 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	189b      	adds	r3, r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	001a      	movs	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	f7ff fe30 	bl	8000700 <Convert_All_Preset_Values>
 8000aa0:	e01a      	b.n	8000ad8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000aa2:	2117      	movs	r1, #23
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d111      	bne.n	8000ad8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	189b      	adds	r3, r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	001a      	movs	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	189b      	adds	r3, r3, r2
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	f7ff fe14 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000ad8:	2117      	movs	r1, #23
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	3201      	adds	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	2317      	movs	r3, #23
 8000ae6:	18fa      	adds	r2, r7, r3
 8000ae8:	2320      	movs	r3, #32
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d3ba      	bcc.n	8000a6a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b006      	add	sp, #24
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000b06:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f7ff feb2 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000b12:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000b14:	0019      	movs	r1, r3
 8000b16:	0010      	movs	r0, r2
 8000b18:	f7ff feac 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b50 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f7ff fea6 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	0010      	movs	r0, r2
 8000b30:	f7ff fea0 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	0800f800 	.word	0x0800f800
 8000b44:	20000008 	.word	0x20000008
 8000b48:	0800f808 	.word	0x0800f808
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	0800f810 	.word	0x0800f810
 8000b54:	20000018 	.word	0x20000018
 8000b58:	0800f818 	.word	0x0800f818

08000b5c <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b6e:	d803      	bhi.n	8000b78 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	719a      	strb	r2, [r3, #6]
 8000b76:	e011      	b.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b55      	cmp	r3, #85	@ 0x55
 8000b80:	d803      	bhi.n	8000b8a <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2201      	movs	r2, #1
 8000b86:	719a      	strb	r2, [r3, #6]
 8000b88:	e008      	b.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db02      	blt.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	210e      	movs	r1, #14
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	8812      	ldrh	r2, [r2, #0]
 8000bc2:	00d2      	lsls	r2, r2, #3
 8000bc4:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	187a      	adds	r2, r7, r1
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	811a      	strh	r2, [r3, #8]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	729a      	strb	r2, [r3, #10]

	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000c08:	210f      	movs	r1, #15
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	18db      	adds	r3, r3, r3
 8000c1a:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	819a      	strh	r2, [r3, #12]

	return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b004      	add	sp, #16
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	187a      	adds	r2, r7, r1
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c74:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c82:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c84:	2301      	movs	r3, #1
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000438 	.word	0x20000438
 8000c94:	200004c4 	.word	0x200004c4

08000c98 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000ca8:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000cb6:	705a      	strb	r2, [r3, #1]

	return 1;
 8000cb8:	2301      	movs	r3, #1
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	20000430 	.word	0x20000430
 8000cc8:	200004c4 	.word	0x200004c4

08000ccc <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000cdc:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000cea:	709a      	strb	r2, [r3, #2]

	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000434 	.word	0x20000434
 8000cfc:	200004c4 	.word	0x200004c4

08000d00 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d10:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000d1e:	70da      	strb	r2, [r3, #3]

	return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	2000043c 	.word	0x2000043c
 8000d30:	200004c4 	.word	0x200004c4

08000d34 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d44:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000d52:	711a      	strb	r2, [r3, #4]

	return 1;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000440 	.word	0x20000440
 8000d64:	200004c4 	.word	0x200004c4

08000d68 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d74:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d84:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d88:	2203      	movs	r2, #3
 8000d8a:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d94:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000da4:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000db4:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	701a      	strb	r2, [r3, #0]

	return 1;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000438 	.word	0x20000438
 8000dc8:	20000430 	.word	0x20000430
 8000dcc:	20000434 	.word	0x20000434
 8000dd0:	2000043c 	.word	0x2000043c
 8000dd4:	20000440 	.word	0x20000440

08000dd8 <Store_Params_as_User_Preset>:

uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr){
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	240f      	movs	r4, #15
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	1c02      	adds	r2, r0, #0
 8000dea:	701a      	strb	r2, [r3, #0]

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 8000dec:	2117      	movs	r1, #23
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	193a      	adds	r2, r7, r4
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]

	*(user_presets_used_array_ptr + preset_index) = YES;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	18d3      	adds	r3, r2, r3
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fc9c 	bl	8000752 <Convert_All_Params_Values_for_Preset>

	return 1;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b007      	add	sp, #28
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <set_LED_to_state>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t set_LED_to_state(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	1cfb      	adds	r3, r7, #3
 8000e30:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM){
 8000e32:	1cfb      	adds	r3, r7, #3
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	d114      	bne.n	8000e64 <set_LED_to_state+0x40>

		if(LED_fsm.current_state != LED_CONFIRM){
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <set_LED_to_state+0x8c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	d026      	beq.n	8000e92 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <set_LED_to_state+0x90>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <set_LED_to_state+0x94>)
 8000e4e:	2296      	movs	r2, #150	@ 0x96
 8000e50:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <set_LED_to_state+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <set_LED_to_state+0x90>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a16      	ldr	r2, [pc, #88]	@ (8000eb8 <set_LED_to_state+0x94>)
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e62:	e016      	b.n	8000e92 <set_LED_to_state+0x6e>
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	1cfa      	adds	r2, r7, #3
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d00f      	beq.n	8000e92 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <set_LED_to_state+0x90>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <set_LED_to_state+0x94>)
 8000e7c:	2296      	movs	r2, #150	@ 0x96
 8000e7e:	0052      	lsls	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <set_LED_to_state+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <set_LED_to_state+0x90>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <set_LED_to_state+0x94>)
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	1cfa      	adds	r2, r7, #3
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	701a      	strb	r2, [r3, #0]

	return 1;
 8000ea4:	2301      	movs	r3, #1
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	20000448 	.word	0x20000448
 8000eb4:	200005e0 	.word	0x200005e0
 8000eb8:	20000020 	.word	0x20000020
 8000ebc:	200004c9 	.word	0x200004c9

08000ec0 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000ec8:	210f      	movs	r1, #15
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	187a      	adds	r2, r7, r1
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	09d2      	lsrs	r2, r2, #7
 8000eda:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000ee8:	2300      	movs	r3, #0
	}
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000efa:	210f      	movs	r1, #15
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	187a      	adds	r2, r7, r1
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	09d2      	lsrs	r2, r2, #7
 8000f0c:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000f1a:	2301      	movs	r3, #1
	}
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b004      	add	sp, #16
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	220c      	movs	r2, #12
 8000f32:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	200e      	movs	r0, #14
 8000f3c:	183b      	adds	r3, r7, r0
 8000f3e:	0912      	lsrs	r2, r2, #4
 8000f40:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000f42:	183a      	adds	r2, r7, r0
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	7812      	ldrb	r2, [r2, #0]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d101      	bne.n	8000f52 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000f52:	2300      	movs	r3, #0
	}
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b004      	add	sp, #16
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000f64:	210f      	movs	r1, #15
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	220b      	movs	r2, #11
 8000f6a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	200e      	movs	r0, #14
 8000f74:	183b      	adds	r3, r7, r0
 8000f76:	0912      	lsrs	r2, r2, #4
 8000f78:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000f7a:	183a      	adds	r2, r7, r0
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d101      	bne.n	8000f8a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000f8a:	2300      	movs	r3, #0
	}
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b77      	cmp	r3, #119	@ 0x77
 8000fa4:	d91d      	bls.n	8000fe2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b79      	cmp	r3, #121	@ 0x79
 8000fae:	d101      	bne.n	8000fb4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e017      	b.n	8000fe4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fbc:	d101      	bne.n	8000fc2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e010      	b.n	8000fe4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fca:	d101      	bne.n	8000fd0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e009      	b.n	8000fe4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b7c      	cmp	r3, #124	@ 0x7c
 8000fd8:	d101      	bne.n	8000fde <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e002      	b.n	8000fe4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000fe2:	2300      	movs	r3, #0
	}
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}

08000fec <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b77      	cmp	r3, #119	@ 0x77
 8000ffc:	d901      	bls.n	8001002 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e023      	b.n	800104a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b14      	cmp	r3, #20
 800100a:	d101      	bne.n	8001010 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 800100c:	2301      	movs	r3, #1
 800100e:	e01c      	b.n	800104a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b15      	cmp	r3, #21
 8001018:	d101      	bne.n	800101e <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 800101a:	2301      	movs	r3, #1
 800101c:	e015      	b.n	800104a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b16      	cmp	r3, #22
 8001026:	d101      	bne.n	800102c <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8001028:	2301      	movs	r3, #1
 800102a:	e00e      	b.n	800104a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b17      	cmp	r3, #23
 8001034:	d101      	bne.n	800103a <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8001036:	2301      	movs	r3, #1
 8001038:	e007      	b.n	800104a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b18      	cmp	r3, #24
 8001042:	d101      	bne.n	8001048 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8001048:	2300      	movs	r3, #0
		}
	}
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}

08001052 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b79      	cmp	r3, #121	@ 0x79
 8001064:	d108      	bne.n	8001078 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8001070:	2301      	movs	r3, #1
 8001072:	e031      	b.n	80010d8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001074:	2300      	movs	r3, #0
 8001076:	e02f      	b.n	80010d8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001080:	d10d      	bne.n	800109e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b7f      	cmp	r3, #127	@ 0x7f
 8001094:	d101      	bne.n	800109a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8001096:	2301      	movs	r3, #1
 8001098:	e01e      	b.n	80010d8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800109a:	2300      	movs	r3, #0
 800109c:	e01c      	b.n	80010d8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b7c      	cmp	r3, #124	@ 0x7c
 80010a6:	d108      	bne.n	80010ba <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e010      	b.n	80010d8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e00e      	b.n	80010d8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b7d      	cmp	r3, #125	@ 0x7d
 80010c2:	d108      	bne.n	80010d6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e002      	b.n	80010d8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 80010d6:	2300      	movs	r3, #0
	}
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80010f0:	d101      	bne.n	80010f6 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 80010f6:	2300      	movs	r3, #0
	}
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}

08001100 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	000a      	movs	r2, r1
 800110a:	1cfb      	adds	r3, r7, #3
 800110c:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	200f      	movs	r0, #15
 8001116:	183b      	adds	r3, r7, r0
 8001118:	210f      	movs	r1, #15
 800111a:	400a      	ands	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 800111e:	210e      	movs	r1, #14
 8001120:	187b      	adds	r3, r7, r1
 8001122:	1cfa      	adds	r2, r7, #3
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8001128:	183a      	adds	r2, r7, r0
 800112a:	187b      	adds	r3, r7, r1
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d101      	bne.n	8001138 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8001138:	2300      	movs	r3, #0
	}
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b004      	add	sp, #16
 8001140:	bd80      	pop	{r7, pc}

08001142 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800114a:	230e      	movs	r3, #14
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2200      	movs	r2, #0
 8001150:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001152:	230d      	movs	r3, #13
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e011      	b.n	8001180 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800115c:	200d      	movs	r0, #13
 800115e:	183b      	adds	r3, r7, r0
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	0019      	movs	r1, r3
 800116a:	220e      	movs	r2, #14
 800116c:	18bb      	adds	r3, r7, r2
 800116e:	18ba      	adds	r2, r7, r2
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	188a      	adds	r2, r1, r2
 8001174:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001176:	183b      	adds	r3, r7, r0
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	183b      	adds	r3, r7, r0
 800117c:	3201      	adds	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	230d      	movs	r3, #13
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b09      	cmp	r3, #9
 8001188:	d9e8      	bls.n	800115c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800118a:	230e      	movs	r3, #14
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 8001198:	2300      	movs	r3, #0
	}
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80011aa:	230f      	movs	r3, #15
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e00a      	b.n	80011ca <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 80011b4:	200f      	movs	r0, #15
 80011b6:	183b      	adds	r3, r7, r0
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	2100      	movs	r1, #0
 80011be:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80011c0:	183b      	adds	r3, r7, r0
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	183b      	adds	r3, r7, r0
 80011c6:	3201      	adds	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	230f      	movs	r3, #15
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d9ef      	bls.n	80011b4 <Clear_Data_Buffer+0x12>
	}

	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}

080011de <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	000a      	movs	r2, r1
 80011e8:	1cfb      	adds	r3, r7, #3
 80011ea:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	1cfa      	adds	r2, r7, #3
 80011f4:	7812      	ldrb	r2, [r2, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d901      	bls.n	80011fe <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 80011fe:	2300      	movs	r3, #0
	}
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2bf8      	cmp	r3, #248	@ 0xf8
 8001218:	d101      	bne.n	800121e <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 800121a:	2301      	movs	r3, #1
 800121c:	e023      	b.n	8001266 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2bfa      	cmp	r3, #250	@ 0xfa
 8001226:	d101      	bne.n	800122c <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 8001228:	2301      	movs	r3, #1
 800122a:	e01c      	b.n	8001266 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2bfb      	cmp	r3, #251	@ 0xfb
 8001234:	d101      	bne.n	800123a <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8001236:	2301      	movs	r3, #1
 8001238:	e015      	b.n	8001266 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2bfc      	cmp	r3, #252	@ 0xfc
 8001242:	d101      	bne.n	8001248 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001244:	2301      	movs	r3, #1
 8001246:	e00e      	b.n	8001266 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001250:	d101      	bne.n	8001256 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001252:	2301      	movs	r3, #1
 8001254:	e007      	b.n	8001266 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2bff      	cmp	r3, #255	@ 0xff
 800125e:	d101      	bne.n	8001264 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001264:	2300      	movs	r3, #0
	}
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800126e:	b5b0      	push	{r4, r5, r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001276:	250f      	movs	r5, #15
 8001278:	197c      	adds	r4, r7, r5
 800127a:	2380      	movs	r3, #128	@ 0x80
 800127c:	00da      	lsls	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	0011      	movs	r1, r2
 8001282:	0018      	movs	r0, r3
 8001284:	f004 ff24 	bl	80060d0 <Get_Status_Bit>
 8001288:	0003      	movs	r3, r0
 800128a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800128c:	197b      	adds	r3, r7, r5
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 8001298:	2300      	movs	r3, #0
	}
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bdb0      	pop	{r4, r5, r7, pc}

080012a2 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	005a      	lsls	r2, r3, #1
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	0011      	movs	r1, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f004 ff31 	bl	800611c <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 80012ba:	2380      	movs	r3, #128	@ 0x80
 80012bc:	009a      	lsls	r2, r3, #2
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	0011      	movs	r1, r2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f004 ff2a 	bl	800611c <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]

	return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <Reset_All_Controllers+0x9c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <Reset_All_Controllers+0x9c>)
 80012ea:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <Reset_All_Controllers+0xa0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <Reset_All_Controllers+0xa0>)
 80012f4:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <Reset_All_Controllers+0xa4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <Reset_All_Controllers+0xa4>)
 80012fe:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <Reset_All_Controllers+0xa8>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <Reset_All_Controllers+0xa8>)
 8001308:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <Reset_All_Controllers+0xac>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <Reset_All_Controllers+0xac>)
 8001312:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <Reset_All_Controllers+0x9c>)
 8001316:	2202      	movs	r2, #2
 8001318:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 800131a:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <Reset_All_Controllers+0xa0>)
 800131c:	2202      	movs	r2, #2
 800131e:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 8001320:	4b16      	ldr	r3, [pc, #88]	@ (800137c <Reset_All_Controllers+0xa4>)
 8001322:	2202      	movs	r2, #2
 8001324:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <Reset_All_Controllers+0xa8>)
 8001328:	2202      	movs	r2, #2
 800132a:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <Reset_All_Controllers+0xac>)
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 8001332:	230e      	movs	r3, #14
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	223f      	movs	r2, #63	@ 0x3f
 8001338:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 800133a:	230f      	movs	r3, #15
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e00c      	b.n	800135e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001344:	200f      	movs	r0, #15
 8001346:	183b      	adds	r3, r7, r0
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <Reset_All_Controllers+0xb0>)
 800134c:	210e      	movs	r1, #14
 800134e:	1879      	adds	r1, r7, r1
 8001350:	7809      	ldrb	r1, [r1, #0]
 8001352:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001354:	183b      	adds	r3, r7, r0
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	183b      	adds	r3, r7, r0
 800135a:	3201      	adds	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	230f      	movs	r3, #15
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d9ed      	bls.n	8001344 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001368:	2301      	movs	r3, #1
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	20000438 	.word	0x20000438
 8001378:	20000430 	.word	0x20000430
 800137c:	20000434 	.word	0x20000434
 8001380:	2000043c 	.word	0x2000043c
 8001384:	20000440 	.word	0x20000440
 8001388:	200004c4 	.word	0x200004c4

0800138c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <Set_Local_Control+0x5c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <Set_Local_Control+0x5c>)
 8001398:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <Set_Local_Control+0x60>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <Set_Local_Control+0x60>)
 80013a2:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <Set_Local_Control+0x64>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <Set_Local_Control+0x64>)
 80013ac:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <Set_Local_Control+0x68>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <Set_Local_Control+0x68>)
 80013b6:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <Set_Local_Control+0x6c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <Set_Local_Control+0x6c>)
 80013c0:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <Set_Local_Control+0x5c>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <Set_Local_Control+0x60>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <Set_Local_Control+0x64>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <Set_Local_Control+0x68>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <Set_Local_Control+0x6c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]

	return 1;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000438 	.word	0x20000438
 80013ec:	20000430 	.word	0x20000430
 80013f0:	20000434 	.word	0x20000434
 80013f4:	2000043c 	.word	0x2000043c
 80013f8:	20000440 	.word	0x20000440

080013fc <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	00da      	lsls	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	0011      	movs	r1, r2
 800140c:	0018      	movs	r0, r3
 800140e:	f004 fe85 	bl	800611c <Clear_Status_Bit>

	return 1;
 8001412:	2301      	movs	r3, #1
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	00da      	lsls	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	0011      	movs	r1, r2
 800142c:	0018      	movs	r0, r3
 800142e:	f004 fe63 	bl	80060f8 <Set_Status_Bit>

	return 1;
 8001432:	2301      	movs	r3, #1
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}

0800143c <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001440:	4904      	ldr	r1, [pc, #16]	@ (8001454 <Start_UART_Receive+0x18>)
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <Start_UART_Receive+0x1c>)
 8001444:	2201      	movs	r2, #1
 8001446:	0018      	movs	r0, r3
 8001448:	f00a fd58 	bl	800befc <HAL_UART_Receive_DMA>

	return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200004dc 	.word	0x200004dc
 8001458:	20000a48 	.word	0x20000a48

0800145c <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	000a      	movs	r2, r1
 8001466:	1cfb      	adds	r3, r7, #3
 8001468:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 800147a:	2117      	movs	r1, #23
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 800148a:	1cfb      	adds	r3, r7, #3
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8001492:	4b6d      	ldr	r3, [pc, #436]	@ (8001648 <Pot_Check+0x1ec>)
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001496:	4b6d      	ldr	r3, [pc, #436]	@ (800164c <Pot_Check+0x1f0>)
 8001498:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 800149a:	4b6d      	ldr	r3, [pc, #436]	@ (8001650 <Pot_Check+0x1f4>)
 800149c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2246      	movs	r2, #70	@ 0x46
 80014a6:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 80014a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001654 <Pot_Check+0x1f8>)
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	e04e      	b.n	800154c <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 80014ae:	1cfb      	adds	r3, r7, #3
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d10f      	bne.n	80014d6 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 80014b6:	4b68      	ldr	r3, [pc, #416]	@ (8001658 <Pot_Check+0x1fc>)
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 80014ba:	4b68      	ldr	r3, [pc, #416]	@ (800165c <Pot_Check+0x200>)
 80014bc:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 80014be:	4b68      	ldr	r3, [pc, #416]	@ (8001660 <Pot_Check+0x204>)
 80014c0:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3302      	adds	r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 80014c8:	2317      	movs	r3, #23
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	2246      	movs	r2, #70	@ 0x46
 80014ce:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 80014d0:	4b64      	ldr	r3, [pc, #400]	@ (8001664 <Pot_Check+0x208>)
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e03a      	b.n	800154c <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 80014d6:	1cfb      	adds	r3, r7, #3
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d10f      	bne.n	80014fe <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 80014de:	4b62      	ldr	r3, [pc, #392]	@ (8001668 <Pot_Check+0x20c>)
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 80014e2:	4b62      	ldr	r3, [pc, #392]	@ (800166c <Pot_Check+0x210>)
 80014e4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 80014e6:	4b62      	ldr	r3, [pc, #392]	@ (8001670 <Pot_Check+0x214>)
 80014e8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3304      	adds	r3, #4
 80014ee:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 80014f0:	2317      	movs	r3, #23
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	2246      	movs	r2, #70	@ 0x46
 80014f6:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 80014f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001674 <Pot_Check+0x218>)
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	e026      	b.n	800154c <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 80014fe:	1cfb      	adds	r3, r7, #3
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d10f      	bne.n	8001526 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001506:	4b5c      	ldr	r3, [pc, #368]	@ (8001678 <Pot_Check+0x21c>)
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 800150a:	4b5c      	ldr	r3, [pc, #368]	@ (800167c <Pot_Check+0x220>)
 800150c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 800150e:	4b5c      	ldr	r3, [pc, #368]	@ (8001680 <Pot_Check+0x224>)
 8001510:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3306      	adds	r3, #6
 8001516:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001518:	2317      	movs	r3, #23
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	2246      	movs	r2, #70	@ 0x46
 800151e:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001520:	4b58      	ldr	r3, [pc, #352]	@ (8001684 <Pot_Check+0x228>)
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	e012      	b.n	800154c <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001526:	1cfb      	adds	r3, r7, #3
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b04      	cmp	r3, #4
 800152c:	d10e      	bne.n	800154c <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 800152e:	4b56      	ldr	r3, [pc, #344]	@ (8001688 <Pot_Check+0x22c>)
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8001532:	4b56      	ldr	r3, [pc, #344]	@ (800168c <Pot_Check+0x230>)
 8001534:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001536:	4b56      	ldr	r3, [pc, #344]	@ (8001690 <Pot_Check+0x234>)
 8001538:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3308      	adds	r3, #8
 800153e:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001540:	2317      	movs	r3, #23
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	2246      	movs	r2, #70	@ 0x46
 8001546:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001548:	4b52      	ldr	r3, [pc, #328]	@ (8001694 <Pot_Check+0x238>)
 800154a:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10b      	bne.n	800156e <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	881a      	ldrh	r2, [r3, #0]
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e066      	b.n	800163c <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10b      	bne.n	8001590 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	881a      	ldrh	r2, [r3, #0]
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e055      	b.n	800163c <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d150      	bne.n	800163c <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 80015a0:	200a      	movs	r0, #10
 80015a2:	183b      	adds	r3, r7, r0
 80015a4:	2200      	movs	r2, #0
 80015a6:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d907      	bls.n	80015c4 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	8819      	ldrh	r1, [r3, #0]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	183b      	adds	r3, r7, r0
 80015be:	1a8a      	subs	r2, r1, r2
 80015c0:	801a      	strh	r2, [r3, #0]
 80015c2:	e00d      	b.n	80015e0 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	881a      	ldrh	r2, [r3, #0]
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d907      	bls.n	80015e0 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	8819      	ldrh	r1, [r3, #0]
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	230a      	movs	r3, #10
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	1a8a      	subs	r2, r1, r2
 80015de:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 80015e0:	2317      	movs	r3, #23
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	220a      	movs	r2, #10
 80015ea:	18ba      	adds	r2, r7, r2
 80015ec:	8812      	ldrh	r2, [r2, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d924      	bls.n	800163c <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e018      	b.n	800163c <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d015      	beq.n	800163c <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800161e:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <Pot_Check+0x23c>)
 8001620:	2120      	movs	r1, #32
 8001622:	0018      	movs	r0, r3
 8001624:	f004 fd7a 	bl	800611c <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <Pot_Check+0x23c>)
 800162a:	2140      	movs	r1, #64	@ 0x40
 800162c:	0018      	movs	r0, r3
 800162e:	f004 fd75 	bl	800611c <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001632:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <Pot_Check+0x23c>)
 8001634:	2108      	movs	r1, #8
 8001636:	0018      	movs	r0, r3
 8001638:	f004 fd70 	bl	800611c <Clear_Status_Bit>
			}
		}
	}

	return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b00a      	add	sp, #40	@ 0x28
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	200004e4 	.word	0x200004e4
 800164c:	200004e6 	.word	0x200004e6
 8001650:	200004dd 	.word	0x200004dd
 8001654:	20000438 	.word	0x20000438
 8001658:	200004e8 	.word	0x200004e8
 800165c:	200004ea 	.word	0x200004ea
 8001660:	200004de 	.word	0x200004de
 8001664:	20000430 	.word	0x20000430
 8001668:	200004ec 	.word	0x200004ec
 800166c:	200004ee 	.word	0x200004ee
 8001670:	200004df 	.word	0x200004df
 8001674:	20000434 	.word	0x20000434
 8001678:	200004f0 	.word	0x200004f0
 800167c:	200004f2 	.word	0x200004f2
 8001680:	200004e0 	.word	0x200004e0
 8001684:	2000043c 	.word	0x2000043c
 8001688:	200004f4 	.word	0x200004f4
 800168c:	200004f6 	.word	0x200004f6
 8001690:	200004e1 	.word	0x200004e1
 8001694:	20000440 	.word	0x20000440
 8001698:	20000c38 	.word	0x20000c38

0800169c <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80016a4:	250f      	movs	r5, #15
 80016a6:	197c      	adds	r4, r7, r5
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	00da      	lsls	r2, r3, #3
 80016ac:	23a0      	movs	r3, #160	@ 0xa0
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	0011      	movs	r1, r2
 80016b2:	0018      	movs	r0, r3
 80016b4:	f006 fdb2 	bl	800821c <HAL_GPIO_ReadPin>
 80016b8:	0003      	movs	r3, r0
 80016ba:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 80016bc:	197b      	adds	r3, r7, r5
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10a      	bne.n	80016da <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <Check_Tap_Tempo_Switch_State+0x98>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01e      	beq.n	800170a <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <Check_Tap_Tempo_Switch_State+0x98>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <Check_Tap_Tempo_Switch_State+0x98>)
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e017      	b.n	800170a <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <Check_Tap_Tempo_Switch_State+0x98>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b0e      	cmp	r3, #14
 80016e0:	d013      	beq.n	800170a <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <Check_Tap_Tempo_Switch_State+0x9c>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d109      	bne.n	80016fe <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <Check_Tap_Tempo_Switch_State+0x98>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <Check_Tap_Tempo_Switch_State+0x98>)
 80016f4:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <Check_Tap_Tempo_Switch_State+0x9c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	e005      	b.n	800170a <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001708:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <Check_Tap_Tempo_Switch_State+0x98>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e006      	b.n	8001728 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <Check_Tap_Tempo_Switch_State+0x98>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b0e      	cmp	r3, #14
 8001720:	d102      	bne.n	8001728 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001728:	2301      	movs	r3, #1
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bdb0      	pop	{r4, r5, r7, pc}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	20000024 	.word	0x20000024
 8001738:	200004f8 	.word	0x200004f8

0800173c <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b093      	sub	sp, #76	@ 0x4c
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	2410      	movs	r4, #16
 8001744:	193b      	adds	r3, r7, r4
 8001746:	0018      	movs	r0, r3
 8001748:	2338      	movs	r3, #56	@ 0x38
 800174a:	001a      	movs	r2, r3
 800174c:	2100      	movs	r1, #0
 800174e:	f00b fef7 	bl	800d540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001752:	003b      	movs	r3, r7
 8001754:	0018      	movs	r0, r3
 8001756:	2310      	movs	r3, #16
 8001758:	001a      	movs	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	f00b fef0 	bl	800d540 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	0018      	movs	r0, r3
 8001766:	f007 f9cb 	bl	8008b00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2202      	movs	r2, #2
 800176e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	0052      	lsls	r2, r2, #1
 8001776:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001778:	0021      	movs	r1, r4
 800177a:	187b      	adds	r3, r7, r1
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001780:	187b      	adds	r3, r7, r1
 8001782:	2240      	movs	r2, #64	@ 0x40
 8001784:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2202      	movs	r2, #2
 800178a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800178c:	187b      	adds	r3, r7, r1
 800178e:	2202      	movs	r2, #2
 8001790:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001798:	187b      	adds	r3, r7, r1
 800179a:	2208      	movs	r2, #8
 800179c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2280      	movs	r2, #128	@ 0x80
 80017a2:	0292      	lsls	r2, r2, #10
 80017a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	22c0      	movs	r2, #192	@ 0xc0
 80017aa:	04d2      	lsls	r2, r2, #19
 80017ac:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	0592      	lsls	r2, r2, #22
 80017b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	0018      	movs	r0, r3
 80017ba:	f007 f9ed 	bl	8008b98 <HAL_RCC_OscConfig>
 80017be:	1e03      	subs	r3, r0, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017c2:	f000 fdb9 	bl	8002338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c6:	003b      	movs	r3, r7
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017cc:	003b      	movs	r3, r7
 80017ce:	2202      	movs	r2, #2
 80017d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d2:	003b      	movs	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017d8:	003b      	movs	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017de:	003b      	movs	r3, r7
 80017e0:	2102      	movs	r1, #2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f007 fcf2 	bl	80091cc <HAL_RCC_ClockConfig>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017ec:	f000 fda4 	bl	8002338 <Error_Handler>
  }
}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b013      	add	sp, #76	@ 0x4c
 80017f6:	bd90      	pop	{r4, r7, pc}

080017f8 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	0018      	movs	r0, r3
 8001802:	230c      	movs	r3, #12
 8001804:	001a      	movs	r2, r3
 8001806:	2100      	movs	r1, #0
 8001808:	f00b fe9a 	bl	800d540 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800180c:	4b54      	ldr	r3, [pc, #336]	@ (8001960 <MX_ADC1_Init+0x168>)
 800180e:	4a55      	ldr	r2, [pc, #340]	@ (8001964 <MX_ADC1_Init+0x16c>)
 8001810:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001812:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001814:	2280      	movs	r2, #128	@ 0x80
 8001816:	05d2      	lsls	r2, r2, #23
 8001818:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181a:	4b51      	ldr	r3, [pc, #324]	@ (8001960 <MX_ADC1_Init+0x168>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001820:	4b4f      	ldr	r3, [pc, #316]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001826:	4b4e      	ldr	r3, [pc, #312]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001828:	2280      	movs	r2, #128	@ 0x80
 800182a:	0392      	lsls	r2, r2, #14
 800182c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800182e:	4b4c      	ldr	r3, [pc, #304]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001830:	2208      	movs	r2, #8
 8001832:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001834:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001836:	2200      	movs	r2, #0
 8001838:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800183a:	4b49      	ldr	r3, [pc, #292]	@ (8001960 <MX_ADC1_Init+0x168>)
 800183c:	2200      	movs	r2, #0
 800183e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001840:	4b47      	ldr	r3, [pc, #284]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001842:	2200      	movs	r2, #0
 8001844:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001846:	4b46      	ldr	r3, [pc, #280]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001848:	2205      	movs	r2, #5
 800184a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800184c:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <MX_ADC1_Init+0x168>)
 800184e:	2220      	movs	r2, #32
 8001850:	2100      	movs	r1, #0
 8001852:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001854:	4b42      	ldr	r3, [pc, #264]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <MX_ADC1_Init+0x168>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001860:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001862:	222c      	movs	r2, #44	@ 0x2c
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <MX_ADC1_Init+0x168>)
 800186a:	2200      	movs	r2, #0
 800186c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800186e:	4b3c      	ldr	r3, [pc, #240]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001870:	2200      	movs	r2, #0
 8001872:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001874:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001876:	2200      	movs	r2, #0
 8001878:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800187a:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <MX_ADC1_Init+0x168>)
 800187c:	223c      	movs	r2, #60	@ 0x3c
 800187e:	2100      	movs	r1, #0
 8001880:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001882:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001884:	2200      	movs	r2, #0
 8001886:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001888:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <MX_ADC1_Init+0x168>)
 800188a:	0018      	movs	r0, r3
 800188c:	f004 fe74 	bl	8006578 <HAL_ADC_Init>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001894:	f000 fd50 	bl	8002338 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018aa:	1d3a      	adds	r2, r7, #4
 80018ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001960 <MX_ADC1_Init+0x168>)
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f005 f9e5 	bl	8006c80 <HAL_ADC_ConfigChannel>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80018ba:	f000 fd3d 	bl	8002338 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4a29      	ldr	r2, [pc, #164]	@ (8001968 <MX_ADC1_Init+0x170>)
 80018c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2204      	movs	r2, #4
 80018c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d0:	1d3a      	adds	r2, r7, #4
 80018d2:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <MX_ADC1_Init+0x168>)
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f005 f9d2 	bl	8006c80 <HAL_ADC_ConfigChannel>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80018e0:	f000 fd2a 	bl	8002338 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4a21      	ldr	r2, [pc, #132]	@ (800196c <MX_ADC1_Init+0x174>)
 80018e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2208      	movs	r2, #8
 80018ee:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f6:	1d3a      	adds	r2, r7, #4
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <MX_ADC1_Init+0x168>)
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f005 f9bf 	bl	8006c80 <HAL_ADC_ConfigChannel>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d001      	beq.n	800190a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001906:	f000 fd17 	bl	8002338 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <MX_ADC1_Init+0x178>)
 800190e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	220c      	movs	r2, #12
 8001914:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191c:	1d3a      	adds	r2, r7, #4
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001920:	0011      	movs	r1, r2
 8001922:	0018      	movs	r0, r3
 8001924:	f005 f9ac 	bl	8006c80 <HAL_ADC_ConfigChannel>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800192c:	f000 fd04 	bl	8002338 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4a10      	ldr	r2, [pc, #64]	@ (8001974 <MX_ADC1_Init+0x17c>)
 8001934:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2210      	movs	r2, #16
 800193a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001942:	1d3a      	adds	r2, r7, #4
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_ADC1_Init+0x168>)
 8001946:	0011      	movs	r1, r2
 8001948:	0018      	movs	r0, r3
 800194a:	f005 f999 	bl	8006c80 <HAL_ADC_ConfigChannel>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d001      	beq.n	8001956 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001952:	f000 fcf1 	bl	8002338 <Error_Handler>
  }
}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b004      	add	sp, #16
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	200004fc 	.word	0x200004fc
 8001964:	40012400 	.word	0x40012400
 8001968:	04000002 	.word	0x04000002
 800196c:	10000010 	.word	0x10000010
 8001970:	14000020 	.word	0x14000020
 8001974:	18000040 	.word	0x18000040

08001978 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	@ 0x50
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800197e:	2334      	movs	r3, #52	@ 0x34
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	0018      	movs	r0, r3
 8001984:	231c      	movs	r3, #28
 8001986:	001a      	movs	r2, r3
 8001988:	2100      	movs	r1, #0
 800198a:	f00b fdd9 	bl	800d540 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800198e:	003b      	movs	r3, r7
 8001990:	0018      	movs	r0, r3
 8001992:	2334      	movs	r3, #52	@ 0x34
 8001994:	001a      	movs	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	f00b fdd2 	bl	800d540 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800199c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a88 <MX_TIM16_Init+0x110>)
 800199e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a8c <MX_TIM16_Init+0x114>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80019a2:	4b39      	ldr	r3, [pc, #228]	@ (8001a88 <MX_TIM16_Init+0x110>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b37      	ldr	r3, [pc, #220]	@ (8001a88 <MX_TIM16_Init+0x110>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 80019ae:	4b36      	ldr	r3, [pc, #216]	@ (8001a88 <MX_TIM16_Init+0x110>)
 80019b0:	22ff      	movs	r2, #255	@ 0xff
 80019b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019b4:	4b34      	ldr	r3, [pc, #208]	@ (8001a88 <MX_TIM16_Init+0x110>)
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019bc:	4b32      	ldr	r3, [pc, #200]	@ (8001a88 <MX_TIM16_Init+0x110>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c2:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <MX_TIM16_Init+0x110>)
 80019c4:	2280      	movs	r2, #128	@ 0x80
 80019c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a88 <MX_TIM16_Init+0x110>)
 80019ca:	0018      	movs	r0, r3
 80019cc:	f007 ff22 	bl	8009814 <HAL_TIM_Base_Init>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80019d4:	f000 fcb0 	bl	8002338 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80019d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a88 <MX_TIM16_Init+0x110>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f008 f820 	bl	8009a20 <HAL_TIM_OC_Init>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80019e4:	f000 fca8 	bl	8002338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019e8:	2134      	movs	r1, #52	@ 0x34
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	22ff      	movs	r2, #255	@ 0xff
 80019f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a14:	1879      	adds	r1, r7, r1
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <MX_TIM16_Init+0x110>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f008 fe74 	bl	800a708 <HAL_TIM_OC_ConfigChannel>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001a24:	f000 fc88 	bl	8002338 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <MX_TIM16_Init+0x110>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <MX_TIM16_Init+0x110>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2108      	movs	r1, #8
 8001a34:	438a      	bics	r2, r1
 8001a36:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a38:	003b      	movs	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a3e:	003b      	movs	r3, r7
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a44:	003b      	movs	r3, r7
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a4a:	003b      	movs	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a50:	003b      	movs	r3, r7
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a56:	003b      	movs	r3, r7
 8001a58:	2280      	movs	r2, #128	@ 0x80
 8001a5a:	0192      	lsls	r2, r2, #6
 8001a5c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a5e:	003b      	movs	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a64:	003b      	movs	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001a6a:	003a      	movs	r2, r7
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <MX_TIM16_Init+0x110>)
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f00a f86f 	bl	800bb54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8001a7a:	f000 fc5d 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b014      	add	sp, #80	@ 0x50
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	20000758 	.word	0x20000758
 8001a8c:	40014400 	.word	0x40014400

08001a90 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	@ 0x30
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	2320      	movs	r3, #32
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f00b fd4d 	bl	800d540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa6:	2314      	movs	r3, #20
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	0018      	movs	r0, r3
 8001aac:	230c      	movs	r3, #12
 8001aae:	001a      	movs	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f00b fd45 	bl	800d540 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	0018      	movs	r0, r3
 8001aba:	2310      	movs	r3, #16
 8001abc:	001a      	movs	r2, r3
 8001abe:	2100      	movs	r1, #0
 8001ac0:	f00b fd3e 	bl	800d540 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001ac6:	2280      	movs	r2, #128	@ 0x80
 8001ac8:	05d2      	lsls	r2, r2, #23
 8001aca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8001acc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001ace:	223f      	movs	r2, #63	@ 0x3f
 8001ad0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001ad8:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001ada:	4a2a      	ldr	r2, [pc, #168]	@ (8001b84 <MX_TIM2_Init+0xf4>)
 8001adc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001ae0:	2280      	movs	r2, #128	@ 0x80
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae6:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001ae8:	2280      	movs	r2, #128	@ 0x80
 8001aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aec:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f007 fe90 	bl	8009814 <HAL_TIM_Base_Init>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001af8:	f000 fc1e 	bl	8002338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afc:	2120      	movs	r1, #32
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2280      	movs	r2, #128	@ 0x80
 8001b02:	0152      	lsls	r2, r2, #5
 8001b04:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b06:	187a      	adds	r2, r7, r1
 8001b08:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f008 ffff 	bl	800ab10 <HAL_TIM_ConfigClockSource>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b16:	f000 fc0f 	bl	8002338 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f008 fb2b 	bl	800a178 <HAL_TIM_IC_Init>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b26:	f000 fc07 	bl	8002338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2114      	movs	r1, #20
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b38:	187a      	adds	r2, r7, r1
 8001b3a:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001b3c:	0011      	movs	r1, r2
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f009 ffa0 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001b48:	f000 fbf6 	bl	8002338 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2202      	movs	r2, #2
 8001b50:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2201      	movs	r2, #1
 8001b56:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	220f      	movs	r2, #15
 8001b62:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b64:	1d39      	adds	r1, r7, #4
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <MX_TIM2_Init+0xf0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f008 fe2c 	bl	800a7c8 <HAL_TIM_IC_ConfigChannel>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001b74:	f000 fbe0 	bl	8002338 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b78:	46c0      	nop			@ (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b00c      	add	sp, #48	@ 0x30
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000814 	.word	0x20000814
 8001b84:	001fffff 	.word	0x001fffff

08001b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	@ 0x38
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	2328      	movs	r3, #40	@ 0x28
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	0018      	movs	r0, r3
 8001b94:	2310      	movs	r3, #16
 8001b96:	001a      	movs	r2, r3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f00b fcd1 	bl	800d540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9e:	231c      	movs	r3, #28
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f00b fcc9 	bl	800d540 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	003b      	movs	r3, r7
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	231c      	movs	r3, #28
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	f00b fcc2 	bl	800d540 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bbc:	4b32      	ldr	r3, [pc, #200]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001bbe:	4a33      	ldr	r2, [pc, #204]	@ (8001c8c <MX_TIM3_Init+0x104>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001bc2:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001bc4:	4a32      	ldr	r2, [pc, #200]	@ (8001c90 <MX_TIM3_Init+0x108>)
 8001bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001bce:	4b2e      	ldr	r3, [pc, #184]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001bd0:	4a30      	ldr	r2, [pc, #192]	@ (8001c94 <MX_TIM3_Init+0x10c>)
 8001bd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001bd6:	2280      	movs	r2, #128	@ 0x80
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be2:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001be4:	0018      	movs	r0, r3
 8001be6:	f007 fe15 	bl	8009814 <HAL_TIM_Base_Init>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bee:	f000 fba3 	bl	8002338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf2:	2128      	movs	r1, #40	@ 0x28
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2280      	movs	r2, #128	@ 0x80
 8001bf8:	0152      	lsls	r2, r2, #5
 8001bfa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bfc:	187a      	adds	r2, r7, r1
 8001bfe:	4b22      	ldr	r3, [pc, #136]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001c00:	0011      	movs	r1, r2
 8001c02:	0018      	movs	r0, r3
 8001c04:	f008 ff84 	bl	800ab10 <HAL_TIM_ConfigClockSource>
 8001c08:	1e03      	subs	r3, r0, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c0c:	f000 fb94 	bl	8002338 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f007 ff04 	bl	8009a20 <HAL_TIM_OC_Init>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c1c:	f000 fb8c 	bl	8002338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	211c      	movs	r1, #28
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2e:	187a      	adds	r2, r7, r1
 8001c30:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f009 ff25 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001c3e:	f000 fb7b 	bl	8002338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c42:	003b      	movs	r3, r7
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c48:	003b      	movs	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4e:	003b      	movs	r3, r7
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c54:	003b      	movs	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c5a:	0039      	movs	r1, r7
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	0018      	movs	r0, r3
 8001c62:	f008 fd51 	bl	800a708 <HAL_TIM_OC_ConfigChannel>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001c6a:	f000 fb65 	bl	8002338 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <MX_TIM3_Init+0x100>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2108      	movs	r1, #8
 8001c7a:	438a      	bics	r2, r1
 8001c7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b00e      	add	sp, #56	@ 0x38
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	200008d0 	.word	0x200008d0
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	00007fff 	.word	0x00007fff
 8001c94:	00000fff 	.word	0x00000fff

08001c98 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b09c      	sub	sp, #112	@ 0x70
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9e:	2360      	movs	r3, #96	@ 0x60
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	2310      	movs	r3, #16
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f00b fc49 	bl	800d540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cae:	2354      	movs	r3, #84	@ 0x54
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f00b fc41 	bl	800d540 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cbe:	2338      	movs	r3, #56	@ 0x38
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	231c      	movs	r3, #28
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	f00b fc39 	bl	800d540 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	2334      	movs	r3, #52	@ 0x34
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f00b fc32 	bl	800d540 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cdc:	4b5f      	ldr	r3, [pc, #380]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001cde:	4a60      	ldr	r2, [pc, #384]	@ (8001e60 <MX_TIM1_Init+0x1c8>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ce2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001cee:	4b5b      	ldr	r3, [pc, #364]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001cf0:	4a5c      	ldr	r2, [pc, #368]	@ (8001e64 <MX_TIM1_Init+0x1cc>)
 8001cf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001cf4:	4b59      	ldr	r3, [pc, #356]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	0052      	lsls	r2, r2, #1
 8001cfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cfc:	4b57      	ldr	r3, [pc, #348]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d02:	4b56      	ldr	r3, [pc, #344]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001d04:	2280      	movs	r2, #128	@ 0x80
 8001d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d08:	4b54      	ldr	r3, [pc, #336]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f007 fd82 	bl	8009814 <HAL_TIM_Base_Init>
 8001d10:	1e03      	subs	r3, r0, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001d14:	f000 fb10 	bl	8002338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d18:	2160      	movs	r1, #96	@ 0x60
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	0152      	lsls	r2, r2, #5
 8001d20:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d22:	187a      	adds	r2, r7, r1
 8001d24:	4b4d      	ldr	r3, [pc, #308]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001d26:	0011      	movs	r1, r2
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f008 fef1 	bl	800ab10 <HAL_TIM_ConfigClockSource>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d32:	f000 fb01 	bl	8002338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d36:	4b49      	ldr	r3, [pc, #292]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f008 f8d1 	bl	8009ee0 <HAL_TIM_PWM_Init>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001d42:	f000 faf9 	bl	8002338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2154      	movs	r1, #84	@ 0x54
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d5a:	187a      	adds	r2, r7, r1
 8001d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001d5e:	0011      	movs	r1, r2
 8001d60:	0018      	movs	r0, r3
 8001d62:	f009 fe8f 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	1e03      	subs	r3, r0, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d6a:	f000 fae5 	bl	8002338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6e:	2138      	movs	r1, #56	@ 0x38
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	2260      	movs	r2, #96	@ 0x60
 8001d74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d9a:	1879      	adds	r1, r7, r1
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001d9e:	2204      	movs	r2, #4
 8001da0:	0018      	movs	r0, r3
 8001da2:	f008 fdb5 	bl	800a910 <HAL_TIM_PWM_ConfigChannel>
 8001da6:	1e03      	subs	r3, r0, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001daa:	f000 fac5 	bl	8002338 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001dae:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	4b29      	ldr	r3, [pc, #164]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	492b      	ldr	r1, [pc, #172]	@ (8001e68 <MX_TIM1_Init+0x1d0>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dbe:	2338      	movs	r3, #56	@ 0x38
 8001dc0:	18f9      	adds	r1, r7, r3
 8001dc2:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f008 fda2 	bl	800a910 <HAL_TIM_PWM_ConfigChannel>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001dd0:	f000 fab2 	bl	8002338 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001dd4:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4922      	ldr	r1, [pc, #136]	@ (8001e68 <MX_TIM1_Init+0x1d0>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2280      	movs	r2, #128	@ 0x80
 8001e06:	0192      	lsls	r2, r2, #6
 8001e08:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2280      	movs	r2, #128	@ 0x80
 8001e20:	0492      	lsls	r2, r2, #18
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e36:	1d3a      	adds	r2, r7, #4
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f009 fe89 	bl	800bb54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e42:	1e03      	subs	r3, r0, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001e46:	f000 fa77 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e4a:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <MX_TIM1_Init+0x1c4>)
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f003 faeb 	bl	8005428 <HAL_TIM_MspPostInit>

}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b01c      	add	sp, #112	@ 0x70
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	2000098c 	.word	0x2000098c
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	000003ff 	.word	0x000003ff
 8001e68:	fffff7ff 	.word	0xfffff7ff

08001e6c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	@ 0x50
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e72:	2334      	movs	r3, #52	@ 0x34
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	0018      	movs	r0, r3
 8001e78:	231c      	movs	r3, #28
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	f00b fb5f 	bl	800d540 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e82:	003b      	movs	r3, r7
 8001e84:	0018      	movs	r0, r3
 8001e86:	2334      	movs	r3, #52	@ 0x34
 8001e88:	001a      	movs	r2, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	f00b fb58 	bl	800d540 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001e90:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001e92:	4a3b      	ldr	r2, [pc, #236]	@ (8001f80 <MX_TIM17_Init+0x114>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001e96:	4b39      	ldr	r3, [pc, #228]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001e98:	4a3a      	ldr	r2, [pc, #232]	@ (8001f84 <MX_TIM17_Init+0x118>)
 8001e9a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b37      	ldr	r3, [pc, #220]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 8001ea2:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001ea4:	4a38      	ldr	r2, [pc, #224]	@ (8001f88 <MX_TIM17_Init+0x11c>)
 8001ea6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001ea8:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001eaa:	2280      	movs	r2, #128	@ 0x80
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001eb0:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f007 fca8 	bl	8009814 <HAL_TIM_Base_Init>
 8001ec4:	1e03      	subs	r3, r0, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001ec8:	f000 fa36 	bl	8002338 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f007 fda6 	bl	8009a20 <HAL_TIM_OC_Init>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001ed8:	f000 fa2e 	bl	8002338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001edc:	2134      	movs	r1, #52	@ 0x34
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	4a29      	ldr	r2, [pc, #164]	@ (8001f8c <MX_TIM17_Init+0x120>)
 8001ee8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f08:	1879      	adds	r1, r7, r1
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f008 fbfa 	bl	800a708 <HAL_TIM_OC_ConfigChannel>
 8001f14:	1e03      	subs	r3, r0, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001f18:	f000 fa0e 	bl	8002338 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001f1c:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2108      	movs	r1, #8
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f2c:	003b      	movs	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f32:	003b      	movs	r3, r7
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f38:	003b      	movs	r3, r7
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f3e:	003b      	movs	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f44:	003b      	movs	r3, r7
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f4a:	003b      	movs	r3, r7
 8001f4c:	2280      	movs	r2, #128	@ 0x80
 8001f4e:	0192      	lsls	r2, r2, #6
 8001f50:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f52:	003b      	movs	r3, r7
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f58:	003b      	movs	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001f5e:	003a      	movs	r2, r7
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <MX_TIM17_Init+0x110>)
 8001f62:	0011      	movs	r1, r2
 8001f64:	0018      	movs	r0, r3
 8001f66:	f009 fdf5 	bl	800bb54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001f6e:	f000 f9e3 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b014      	add	sp, #80	@ 0x50
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	2000069c 	.word	0x2000069c
 8001f80:	40014800 	.word	0x40014800
 8001f84:	00007fff 	.word	0x00007fff
 8001f88:	000003ff 	.word	0x000003ff
 8001f8c:	000001ff 	.word	0x000001ff

08001f90 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001f94:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001f96:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <MX_LPTIM1_Init+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001fa2:	22e0      	movs	r2, #224	@ 0xe0
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001faa:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <MX_LPTIM1_Init+0x6c>)
 8001fac:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	03d2      	lsls	r2, r2, #15
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <MX_LPTIM1_Init+0x64>)
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f006 f987 	bl	80082e4 <HAL_LPTIM_Init>
 8001fd6:	1e03      	subs	r3, r0, #0
 8001fd8:	d001      	beq.n	8001fde <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001fda:	f000 f9ad 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001fde:	2202      	movs	r2, #2
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	2011      	movs	r0, #17
 8001fe4:	f005 fc56 	bl	8007894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001fe8:	2011      	movs	r0, #17
 8001fea:	f005 fc68 	bl	80078be <HAL_NVIC_EnableIRQ>
}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000bcc 	.word	0x20000bcc
 8001ff8:	40007c00 	.word	0x40007c00
 8001ffc:	0000ffff 	.word	0x0000ffff

08002000 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	0018      	movs	r0, r3
 800200a:	231c      	movs	r3, #28
 800200c:	001a      	movs	r2, r3
 800200e:	2100      	movs	r1, #0
 8002010:	f00b fa96 	bl	800d540 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002014:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <MX_TIM14_Init+0x94>)
 8002016:	4a20      	ldr	r2, [pc, #128]	@ (8002098 <MX_TIM14_Init+0x98>)
 8002018:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 800201a:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <MX_TIM14_Init+0x94>)
 800201c:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <MX_TIM14_Init+0x9c>)
 800201e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002020:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <MX_TIM14_Init+0x94>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 8002026:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <MX_TIM14_Init+0xa0>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <MX_TIM14_Init+0x94>)
 800202c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800202e:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <MX_TIM14_Init+0x94>)
 8002030:	2280      	movs	r2, #128	@ 0x80
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <MX_TIM14_Init+0x94>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <MX_TIM14_Init+0x94>)
 800203e:	0018      	movs	r0, r3
 8002040:	f007 fbe8 	bl	8009814 <HAL_TIM_Base_Init>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8002048:	f000 f976 	bl	8002338 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_TIM14_Init+0x94>)
 800204e:	0018      	movs	r0, r3
 8002050:	f007 fce6 	bl	8009a20 <HAL_TIM_OC_Init>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8002058:	f000 f96e 	bl	8002338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 8002062:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <MX_TIM14_Init+0xa0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	1e5a      	subs	r2, r3, #1
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002078:	1d39      	adds	r1, r7, #4
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_TIM14_Init+0x94>)
 800207c:	2200      	movs	r2, #0
 800207e:	0018      	movs	r0, r3
 8002080:	f008 fb42 	bl	800a708 <HAL_TIM_OC_ConfigChannel>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8002088:	f000 f956 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b008      	add	sp, #32
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200005e0 	.word	0x200005e0
 8002098:	40002000 	.word	0x40002000
 800209c:	00007fff 	.word	0x00007fff
 80020a0:	20000020 	.word	0x20000020

080020a4 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80020a8:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020aa:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <MX_USART2_UART_Init+0x60>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80020ae:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020b0:	4a15      	ldr	r2, [pc, #84]	@ (8002108 <MX_USART2_UART_Init+0x64>)
 80020b2:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020c8:	220c      	movs	r2, #12
 80020ca:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <MX_USART2_UART_Init+0x5c>)
 80020ec:	0018      	movs	r0, r3
 80020ee:	f009 fded 	bl	800bccc <HAL_UART_Init>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d001      	beq.n	80020fa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80020f6:	f000 f91f 	bl	8002338 <Error_Handler>
  }
}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000a48 	.word	0x20000a48
 8002104:	40004400 	.word	0x40004400
 8002108:	00007a12 	.word	0x00007a12

0800210c <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <MX_DMA_Init+0x48>)
 8002114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002116:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <MX_DMA_Init+0x48>)
 8002118:	2101      	movs	r1, #1
 800211a:	430a      	orrs	r2, r1
 800211c:	639a      	str	r2, [r3, #56]	@ 0x38
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <MX_DMA_Init+0x48>)
 8002120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2009      	movs	r0, #9
 8002130:	f005 fbb0 	bl	8007894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002134:	2009      	movs	r0, #9
 8002136:	f005 fbc2 	bl	80078be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 800213a:	2202      	movs	r2, #2
 800213c:	2102      	movs	r1, #2
 800213e:	200a      	movs	r0, #10
 8002140:	f005 fba8 	bl	8007894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002144:	200a      	movs	r0, #10
 8002146:	f005 fbba 	bl	80078be <HAL_NVIC_EnableIRQ>

}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b002      	add	sp, #8
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	40021000 	.word	0x40021000

08002158 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b08b      	sub	sp, #44	@ 0x2c
 800215c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	2414      	movs	r4, #20
 8002160:	193b      	adds	r3, r7, r4
 8002162:	0018      	movs	r0, r3
 8002164:	2314      	movs	r3, #20
 8002166:	001a      	movs	r2, r3
 8002168:	2100      	movs	r1, #0
 800216a:	f00b f9e9 	bl	800d540 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	4b6e      	ldr	r3, [pc, #440]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 8002170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002172:	4b6d      	ldr	r3, [pc, #436]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 8002174:	2104      	movs	r1, #4
 8002176:	430a      	orrs	r2, r1
 8002178:	635a      	str	r2, [r3, #52]	@ 0x34
 800217a:	4b6b      	ldr	r3, [pc, #428]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 800217c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217e:	2204      	movs	r2, #4
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002186:	4b68      	ldr	r3, [pc, #416]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 8002188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800218a:	4b67      	ldr	r3, [pc, #412]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 800218c:	2120      	movs	r1, #32
 800218e:	430a      	orrs	r2, r1
 8002190:	635a      	str	r2, [r3, #52]	@ 0x34
 8002192:	4b65      	ldr	r3, [pc, #404]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 8002194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002196:	2220      	movs	r2, #32
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b62      	ldr	r3, [pc, #392]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 80021a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a2:	4b61      	ldr	r3, [pc, #388]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 80021a4:	2101      	movs	r1, #1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 80021ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ae:	2201      	movs	r2, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 80021b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 80021bc:	2102      	movs	r1, #2
 80021be:	430a      	orrs	r2, r1
 80021c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021c2:	4b59      	ldr	r3, [pc, #356]	@ (8002328 <MX_GPIO_Init+0x1d0>)
 80021c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021ce:	4b57      	ldr	r3, [pc, #348]	@ (800232c <MX_GPIO_Init+0x1d4>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	2140      	movs	r1, #64	@ 0x40
 80021d4:	0018      	movs	r0, r3
 80021d6:	f006 f83e 	bl	8008256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	2204      	movs	r2, #4
 80021de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	2288      	movs	r2, #136	@ 0x88
 80021e4:	0352      	lsls	r2, r2, #13
 80021e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	193b      	adds	r3, r7, r4
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002330 <MX_GPIO_Init+0x1d8>)
 80021f2:	0019      	movs	r1, r3
 80021f4:	0010      	movs	r0, r2
 80021f6:	f005 fead 	bl	8007f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80021fa:	0021      	movs	r1, r4
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	2280      	movs	r2, #128	@ 0x80
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	000c      	movs	r4, r1
 8002206:	193b      	adds	r3, r7, r4
 8002208:	2201      	movs	r2, #1
 800220a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	193b      	adds	r3, r7, r4
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8002218:	193a      	adds	r2, r7, r4
 800221a:	23a0      	movs	r3, #160	@ 0xa0
 800221c:	05db      	lsls	r3, r3, #23
 800221e:	0011      	movs	r1, r2
 8002220:	0018      	movs	r0, r3
 8002222:	f005 fe97 	bl	8007f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002226:	193b      	adds	r3, r7, r4
 8002228:	2240      	movs	r2, #64	@ 0x40
 800222a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	193b      	adds	r3, r7, r4
 800222e:	2201      	movs	r2, #1
 8002230:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	193b      	adds	r3, r7, r4
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	193b      	adds	r3, r7, r4
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800223e:	193b      	adds	r3, r7, r4
 8002240:	4a3a      	ldr	r2, [pc, #232]	@ (800232c <MX_GPIO_Init+0x1d4>)
 8002242:	0019      	movs	r1, r3
 8002244:	0010      	movs	r0, r2
 8002246:	f005 fe85 	bl	8007f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 800224a:	193b      	adds	r3, r7, r4
 800224c:	2280      	movs	r2, #128	@ 0x80
 800224e:	00d2      	lsls	r2, r2, #3
 8002250:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002252:	193b      	adds	r3, r7, r4
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002258:	193b      	adds	r3, r7, r4
 800225a:	2201      	movs	r2, #1
 800225c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800225e:	193a      	adds	r2, r7, r4
 8002260:	23a0      	movs	r3, #160	@ 0xa0
 8002262:	05db      	lsls	r3, r3, #23
 8002264:	0011      	movs	r1, r2
 8002266:	0018      	movs	r0, r3
 8002268:	f005 fe74 	bl	8007f54 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 800226c:	193b      	adds	r3, r7, r4
 800226e:	2240      	movs	r2, #64	@ 0x40
 8002270:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	193b      	adds	r3, r7, r4
 8002274:	2201      	movs	r2, #1
 8002276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	193b      	adds	r3, r7, r4
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	193b      	adds	r3, r7, r4
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002284:	193b      	adds	r3, r7, r4
 8002286:	4a2b      	ldr	r2, [pc, #172]	@ (8002334 <MX_GPIO_Init+0x1dc>)
 8002288:	0019      	movs	r1, r3
 800228a:	0010      	movs	r0, r2
 800228c:	f005 fe62 	bl	8007f54 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002290:	0021      	movs	r1, r4
 8002292:	187b      	adds	r3, r7, r1
 8002294:	2280      	movs	r2, #128	@ 0x80
 8002296:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002298:	187b      	adds	r3, r7, r1
 800229a:	22c4      	movs	r2, #196	@ 0xc4
 800229c:	0392      	lsls	r2, r2, #14
 800229e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 80022a0:	000c      	movs	r4, r1
 80022a2:	193b      	adds	r3, r7, r4
 80022a4:	2202      	movs	r2, #2
 80022a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	193b      	adds	r3, r7, r4
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80022ae:	193b      	adds	r3, r7, r4
 80022b0:	4a20      	ldr	r2, [pc, #128]	@ (8002334 <MX_GPIO_Init+0x1dc>)
 80022b2:	0019      	movs	r1, r3
 80022b4:	0010      	movs	r0, r2
 80022b6:	f005 fe4d 	bl	8007f54 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 80022ba:	0021      	movs	r1, r4
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	0152      	lsls	r2, r2, #5
 80022c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	000c      	movs	r4, r1
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	2201      	movs	r2, #1
 80022ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	2200      	movs	r2, #0
 80022d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 80022d8:	193a      	adds	r2, r7, r4
 80022da:	23a0      	movs	r3, #160	@ 0xa0
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	0011      	movs	r1, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	f005 fe37 	bl	8007f54 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 80022e6:	0021      	movs	r1, r4
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2280      	movs	r2, #128	@ 0x80
 80022ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	2201      	movs	r2, #1
 80022f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8002300:	187a      	adds	r2, r7, r1
 8002302:	23a0      	movs	r3, #160	@ 0xa0
 8002304:	05db      	lsls	r3, r3, #23
 8002306:	0011      	movs	r1, r2
 8002308:	0018      	movs	r0, r3
 800230a:	f005 fe23 	bl	8007f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 800230e:	2202      	movs	r2, #2
 8002310:	2102      	movs	r1, #2
 8002312:	2007      	movs	r0, #7
 8002314:	f005 fabe 	bl	8007894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002318:	2007      	movs	r0, #7
 800231a:	f005 fad0 	bl	80078be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b00b      	add	sp, #44	@ 0x2c
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	40021000 	.word	0x40021000
 800232c:	50000800 	.word	0x50000800
 8002330:	50001400 	.word	0x50001400
 8002334:	50000400 	.word	0x50000400

08002338 <Error_Handler>:

void Error_Handler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002340:	46c0      	nop			@ (mov r8, r8)
 8002342:	e7fd      	b.n	8002340 <Error_Handler+0x8>

08002344 <System_Init>:
  {

  }
}

void System_Init(void){
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002348:	f003 ff26 	bl	8006198 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800234c:	f7ff f9f6 	bl	800173c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002350:	f7ff ff02 	bl	8002158 <MX_GPIO_Init>
	MX_DMA_Init();
 8002354:	f7ff feda 	bl	800210c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002358:	f7ff fea4 	bl	80020a4 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800235c:	f7ff fa4c 	bl	80017f8 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002360:	f7ff fb0a 	bl	8001978 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002364:	f7ff fb94 	bl	8001a90 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8002368:	f7ff fc0e 	bl	8001b88 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 800236c:	f7ff fc94 	bl	8001c98 <MX_TIM1_Init>
	MX_TIM17_Init();
 8002370:	f7ff fd7c 	bl	8001e6c <MX_TIM17_Init>
	MX_TIM14_Init();
 8002374:	f7ff fe44 	bl	8002000 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 8002378:	f7ff fe0a 	bl	8001f90 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 800237c:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <System_Init+0xc0>)
 800237e:	0018      	movs	r0, r3
 8002380:	f005 f8a6 	bl	80074d0 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8002384:	4a20      	ldr	r2, [pc, #128]	@ (8002408 <System_Init+0xc4>)
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <System_Init+0xc8>)
 8002388:	210e      	movs	r1, #14
 800238a:	0018      	movs	r0, r3
 800238c:	f008 fd1a 	bl	800adc4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8002390:	4a1f      	ldr	r2, [pc, #124]	@ (8002410 <System_Init+0xcc>)
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <System_Init+0xc0>)
 8002394:	2100      	movs	r1, #0
 8002396:	0018      	movs	r0, r3
 8002398:	f004 fac6 	bl	8006928 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 800239c:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <System_Init+0xd0>)
 800239e:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <System_Init+0xd4>)
 80023a0:	2112      	movs	r1, #18
 80023a2:	0018      	movs	r0, r3
 80023a4:	f008 fd0e 	bl	800adc4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 80023a8:	4a1c      	ldr	r2, [pc, #112]	@ (800241c <System_Init+0xd8>)
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <System_Init+0xd4>)
 80023ac:	210e      	movs	r1, #14
 80023ae:	0018      	movs	r0, r3
 80023b0:	f008 fd08 	bl	800adc4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 80023b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002420 <System_Init+0xdc>)
 80023b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <System_Init+0xe0>)
 80023b8:	2114      	movs	r1, #20
 80023ba:	0018      	movs	r0, r3
 80023bc:	f008 fd02 	bl	800adc4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 80023c0:	4a19      	ldr	r2, [pc, #100]	@ (8002428 <System_Init+0xe4>)
 80023c2:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <System_Init+0xe8>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	0018      	movs	r0, r3
 80023c8:	f009 fce8 	bl	800bd9c <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 80023cc:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <System_Init+0xec>)
 80023ce:	4b17      	ldr	r3, [pc, #92]	@ (800242c <System_Init+0xe8>)
 80023d0:	2103      	movs	r1, #3
 80023d2:	0018      	movs	r0, r3
 80023d4:	f009 fce2 	bl	800bd9c <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 80023d8:	4a16      	ldr	r2, [pc, #88]	@ (8002434 <System_Init+0xf0>)
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <System_Init+0xf4>)
 80023dc:	2102      	movs	r1, #2
 80023de:	0018      	movs	r0, r3
 80023e0:	f006 f9a6 	bl	8008730 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 80023e4:	4a15      	ldr	r2, [pc, #84]	@ (800243c <System_Init+0xf8>)
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <System_Init+0xfc>)
 80023e8:	2114      	movs	r1, #20
 80023ea:	0018      	movs	r0, r3
 80023ec:	f008 fcea 	bl	800adc4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80023f0:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <System_Init+0x100>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <System_Init+0x104>)
 80023f4:	2114      	movs	r1, #20
 80023f6:	0018      	movs	r0, r3
 80023f8:	f008 fce4 	bl	800adc4 <HAL_TIM_RegisterCallback>
}
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	200004fc 	.word	0x200004fc
 8002408:	0800244d 	.word	0x0800244d
 800240c:	20000758 	.word	0x20000758
 8002410:	080024a1 	.word	0x080024a1
 8002414:	08002535 	.word	0x08002535
 8002418:	20000814 	.word	0x20000814
 800241c:	08002651 	.word	0x08002651
 8002420:	0800275d 	.word	0x0800275d
 8002424:	200008d0 	.word	0x200008d0
 8002428:	08002899 	.word	0x08002899
 800242c:	20000a48 	.word	0x20000a48
 8002430:	080028a9 	.word	0x080028a9
 8002434:	08003c89 	.word	0x08003c89
 8002438:	20000bcc 	.word	0x20000bcc
 800243c:	0800417d 	.word	0x0800417d
 8002440:	2000069c 	.word	0x2000069c
 8002444:	0800418d 	.word	0x0800418d
 8002448:	200005e0 	.word	0x200005e0

0800244c <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002454:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <TIM16_callback+0x40>)
 8002456:	0018      	movs	r0, r3
 8002458:	f002 fa7e 	bl	8004958 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <TIM16_callback+0x40>)
 800245e:	2100      	movs	r1, #0
 8002460:	0018      	movs	r0, r3
 8002462:	f002 faa5 	bl	80049b0 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <TIM16_callback+0x44>)
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <TIM16_callback+0x40>)
 800246a:	0011      	movs	r1, r2
 800246c:	0018      	movs	r0, r3
 800246e:	f002 fb95 	bl	8004b9c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <TIM16_callback+0x48>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	001a      	movs	r2, r3
 8002478:	4907      	ldr	r1, [pc, #28]	@ (8002498 <TIM16_callback+0x4c>)
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <TIM16_callback+0x50>)
 800247c:	0018      	movs	r0, r3
 800247e:	f004 fadf 	bl	8006a40 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b002      	add	sp, #8
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	20000c50 	.word	0x20000c50
 8002490:	20000028 	.word	0x20000028
 8002494:	0800dde4 	.word	0x0800dde4
 8002498:	20000c44 	.word	0x20000c44
 800249c:	200004fc 	.word	0x200004fc

080024a0 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f004 fb56 	bl	8006b5c <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 80024b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002520 <ADC_DMA_conversion_complete_callback+0x80>)
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <ADC_DMA_conversion_complete_callback+0x84>)
 80024b4:	0011      	movs	r1, r2
 80024b6:	0018      	movs	r0, r3
 80024b8:	f002 fc06 	bl	8004cc8 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 80024bc:	f7fe f830 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 80024c0:	250f      	movs	r5, #15
 80024c2:	197c      	adds	r4, r7, r5
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <ADC_DMA_conversion_complete_callback+0x88>)
 80024c6:	2108      	movs	r1, #8
 80024c8:	0018      	movs	r0, r3
 80024ca:	f003 fe01 	bl	80060d0 <Get_Status_Bit>
 80024ce:	0003      	movs	r3, r0
 80024d0:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 80024d2:	197b      	adds	r3, r7, r5
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d10a      	bne.n	80024f0 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 80024da:	4b14      	ldr	r3, [pc, #80]	@ (800252c <ADC_DMA_conversion_complete_callback+0x8c>)
 80024dc:	8a5b      	ldrh	r3, [r3, #18]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <ADC_DMA_conversion_complete_callback+0x90>)
 80024e2:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <ADC_DMA_conversion_complete_callback+0x8c>)
 80024e6:	8b5b      	ldrh	r3, [r3, #26]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <ADC_DMA_conversion_complete_callback+0x90>)
 80024ec:	835a      	strh	r2, [r3, #26]
 80024ee:	e003      	b.n	80024f8 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 80024f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <ADC_DMA_conversion_complete_callback+0x90>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f002 f9fa 	bl	80048ec <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 80024f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <ADC_DMA_conversion_complete_callback+0x90>)
 80024fa:	0018      	movs	r0, r3
 80024fc:	f003 f95a 	bl	80057b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002500:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <ADC_DMA_conversion_complete_callback+0x88>)
 8002502:	2110      	movs	r1, #16
 8002504:	0018      	movs	r0, r3
 8002506:	f003 fde3 	bl	80060d0 <Get_Status_Bit>
 800250a:	1e03      	subs	r3, r0, #0
 800250c:	d104      	bne.n	8002518 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <ADC_DMA_conversion_complete_callback+0x88>)
 8002510:	2110      	movs	r1, #16
 8002512:	0018      	movs	r0, r3
 8002514:	f003 fdf0 	bl	80060f8 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b004      	add	sp, #16
 800251e:	bdb0      	pop	{r4, r5, r7, pc}
 8002520:	20000c44 	.word	0x20000c44
 8002524:	20000c74 	.word	0x20000c74
 8002528:	20000c38 	.word	0x20000c38
 800252c:	20000cbc 	.word	0x20000cbc
 8002530:	20000c50 	.word	0x20000c50

08002534 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2100      	movs	r1, #0
 8002540:	0018      	movs	r0, r3
 8002542:	f008 fbbb 	bl	800acbc <HAL_TIM_ReadCapturedValue>
 8002546:	0002      	movs	r2, r0
 8002548:	4b3a      	ldr	r3, [pc, #232]	@ (8002634 <TIM2_ch1_IP_capture_callback+0x100>)
 800254a:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 800254c:	4b39      	ldr	r3, [pc, #228]	@ (8002634 <TIM2_ch1_IP_capture_callback+0x100>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0a5b      	lsrs	r3, r3, #9
 8002552:	b29a      	uxth	r2, r3
 8002554:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <TIM2_ch1_IP_capture_callback+0x104>)
 8002556:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002558:	4b38      	ldr	r3, [pc, #224]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d108      	bne.n	8002574 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002562:	f002 f8d7 	bl	8004714 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002566:	4b35      	ldr	r3, [pc, #212]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 800256c:	4b33      	ldr	r3, [pc, #204]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 800256e:	2200      	movs	r2, #0
 8002570:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002572:	e05b      	b.n	800262c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002574:	4b31      	ldr	r3, [pc, #196]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d124      	bne.n	80025c8 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 800257e:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <TIM2_ch1_IP_capture_callback+0x104>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b80      	cmp	r3, #128	@ 0x80
 8002586:	d951      	bls.n	800262c <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002588:	f002 f8a6 	bl	80046d8 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800258c:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 800258e:	2202      	movs	r2, #2
 8002590:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002592:	4b2a      	ldr	r3, [pc, #168]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 8002594:	2201      	movs	r2, #1
 8002596:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002598:	4a29      	ldr	r2, [pc, #164]	@ (8002640 <TIM2_ch1_IP_capture_callback+0x10c>)
 800259a:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <TIM2_ch1_IP_capture_callback+0x110>)
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f002 f888 	bl	80046b4 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80025a4:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <TIM2_ch1_IP_capture_callback+0x114>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d004      	beq.n	80025b8 <TIM2_ch1_IP_capture_callback+0x84>
 80025ae:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <TIM2_ch1_IP_capture_callback+0x114>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b07      	cmp	r3, #7
 80025b6:	d101      	bne.n	80025bc <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 80025b8:	f002 fcd2 	bl	8004f60 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 80025bc:	4b23      	ldr	r3, [pc, #140]	@ (800264c <TIM2_ch1_IP_capture_callback+0x118>)
 80025be:	2104      	movs	r1, #4
 80025c0:	0018      	movs	r0, r3
 80025c2:	f003 fd99 	bl	80060f8 <Set_Status_Bit>
}
 80025c6:	e031      	b.n	800262c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 80025c8:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d108      	bne.n	80025e4 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 80025d2:	f002 f89f 	bl	8004714 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80025d6:	4b19      	ldr	r3, [pc, #100]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 80025d8:	2203      	movs	r2, #3
 80025da:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 80025dc:	4b17      	ldr	r3, [pc, #92]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 80025de:	2202      	movs	r2, #2
 80025e0:	705a      	strb	r2, [r3, #1]
}
 80025e2:	e023      	b.n	800262c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d11e      	bne.n	800262c <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 80025ee:	f002 f873 	bl	80046d8 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80025f2:	4b12      	ldr	r3, [pc, #72]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80025f8:	4b10      	ldr	r3, [pc, #64]	@ (800263c <TIM2_ch1_IP_capture_callback+0x108>)
 80025fa:	2203      	movs	r2, #3
 80025fc:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 80025fe:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002600:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <TIM2_ch1_IP_capture_callback+0x110>)
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f002 f855 	bl	80046b4 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <TIM2_ch1_IP_capture_callback+0x114>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b05      	cmp	r3, #5
 8002612:	d004      	beq.n	800261e <TIM2_ch1_IP_capture_callback+0xea>
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <TIM2_ch1_IP_capture_callback+0x114>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b07      	cmp	r3, #7
 800261c:	d101      	bne.n	8002622 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 800261e:	f002 fc9f 	bl	8004f60 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <TIM2_ch1_IP_capture_callback+0x118>)
 8002624:	2104      	movs	r1, #4
 8002626:	0018      	movs	r0, r3
 8002628:	f003 fd66 	bl	80060f8 <Set_Status_Bit>
}
 800262c:	46c0      	nop			@ (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000c30 	.word	0x20000c30
 8002638:	20000c34 	.word	0x20000c34
 800263c:	20000444 	.word	0x20000444
 8002640:	20000c98 	.word	0x20000c98
 8002644:	20000c50 	.word	0x20000c50
 8002648:	20000430 	.word	0x20000430
 800264c:	20000c38 	.word	0x20000c38

08002650 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002658:	240c      	movs	r4, #12
 800265a:	193b      	adds	r3, r7, r4
 800265c:	4a3a      	ldr	r2, [pc, #232]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 800265e:	7852      	ldrb	r2, [r2, #1]
 8002660:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002662:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <TIM2_ch1_overflow_callback+0xfc>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d131      	bne.n	80026d0 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 800266c:	4b37      	ldr	r3, [pc, #220]	@ (800274c <TIM2_ch1_overflow_callback+0xfc>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002672:	4b36      	ldr	r3, [pc, #216]	@ (800274c <TIM2_ch1_overflow_callback+0xfc>)
 8002674:	2201      	movs	r2, #1
 8002676:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002678:	4b35      	ldr	r3, [pc, #212]	@ (8002750 <TIM2_ch1_overflow_callback+0x100>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800267e:	4b35      	ldr	r3, [pc, #212]	@ (8002754 <TIM2_ch1_overflow_callback+0x104>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	0099      	lsls	r1, r3, #2
 8002688:	23a0      	movs	r3, #160	@ 0xa0
 800268a:	05db      	lsls	r3, r3, #23
 800268c:	2201      	movs	r2, #1
 800268e:	0018      	movs	r0, r3
 8002690:	f005 fde1 	bl	8008256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002694:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <TIM2_ch1_overflow_callback+0x108>)
 8002696:	2200      	movs	r2, #0
 8002698:	2140      	movs	r1, #64	@ 0x40
 800269a:	0018      	movs	r0, r3
 800269c:	f005 fddb 	bl	8008256 <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80026a0:	4b29      	ldr	r3, [pc, #164]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d049      	beq.n	800273e <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80026aa:	4b27      	ldr	r3, [pc, #156]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d044      	beq.n	800273e <TIM2_ch1_overflow_callback+0xee>
 80026b4:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d03f      	beq.n	800273e <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 80026c0:	4a21      	ldr	r2, [pc, #132]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 80026c6:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 80026c8:	193a      	adds	r2, r7, r4
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 80026ce:	e036      	b.n	800273e <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 80026d0:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <TIM2_ch1_overflow_callback+0xfc>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d131      	bne.n	800273e <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80026da:	4b1c      	ldr	r3, [pc, #112]	@ (800274c <TIM2_ch1_overflow_callback+0xfc>)
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <TIM2_ch1_overflow_callback+0xfc>)
 80026e2:	2203      	movs	r2, #3
 80026e4:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <TIM2_ch1_overflow_callback+0x100>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80026ec:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <TIM2_ch1_overflow_callback+0x104>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	0099      	lsls	r1, r3, #2
 80026f6:	23a0      	movs	r3, #160	@ 0xa0
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	2201      	movs	r2, #1
 80026fc:	0018      	movs	r0, r3
 80026fe:	f005 fdaa 	bl	8008256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <TIM2_ch1_overflow_callback+0x108>)
 8002704:	2200      	movs	r2, #0
 8002706:	2140      	movs	r1, #64	@ 0x40
 8002708:	0018      	movs	r0, r3
 800270a:	f005 fda4 	bl	8008256 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b04      	cmp	r3, #4
 8002716:	d012      	beq.n	800273e <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b06      	cmp	r3, #6
 8002720:	d00d      	beq.n	800273e <TIM2_ch1_overflow_callback+0xee>
 8002722:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002728:	2b08      	cmp	r3, #8
 800272a:	d008      	beq.n	800273e <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 800272c:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 800272e:	4a06      	ldr	r2, [pc, #24]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 8002730:	7812      	ldrb	r2, [r2, #0]
 8002732:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <TIM2_ch1_overflow_callback+0xf8>)
 8002736:	220c      	movs	r2, #12
 8002738:	18ba      	adds	r2, r7, r2
 800273a:	7812      	ldrb	r2, [r2, #0]
 800273c:	701a      	strb	r2, [r3, #0]
}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b005      	add	sp, #20
 8002744:	bd90      	pop	{r4, r7, pc}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	20000430 	.word	0x20000430
 800274c:	20000444 	.word	0x20000444
 8002750:	20000ce0 	.word	0x20000ce0
 8002754:	20000c36 	.word	0x20000c36
 8002758:	50000800 	.word	0x50000800

0800275c <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002764:	4b41      	ldr	r3, [pc, #260]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b0b      	cmp	r3, #11
 800276c:	d01c      	beq.n	80027a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800276e:	4b3f      	ldr	r3, [pc, #252]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d017      	beq.n	80027a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002778:	4b3c      	ldr	r3, [pc, #240]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b0d      	cmp	r3, #13
 8002780:	d012      	beq.n	80027a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002782:	4b3a      	ldr	r3, [pc, #232]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b10      	cmp	r3, #16
 800278a:	d00d      	beq.n	80027a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800278c:	4b37      	ldr	r3, [pc, #220]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b11      	cmp	r3, #17
 8002794:	d008      	beq.n	80027a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002796:	4b35      	ldr	r3, [pc, #212]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800279c:	2b12      	cmp	r3, #18
 800279e:	d003      	beq.n	80027a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 80027a0:	4b33      	ldr	r3, [pc, #204]	@ (8002870 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80027a2:	0018      	movs	r0, r3
 80027a4:	f002 f8d8 	bl	8004958 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 80027a8:	4b32      	ldr	r3, [pc, #200]	@ (8002874 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 80027aa:	2100      	movs	r1, #0
 80027ac:	0018      	movs	r0, r3
 80027ae:	f003 fc28 	bl	8006002 <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 80027b2:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d106      	bne.n	80027ca <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 80027bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002878 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 80027c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027c4:	2202      	movs	r2, #2
 80027c6:	705a      	strb	r2, [r3, #1]
 80027c8:	e00a      	b.n	80027e0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 80027ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d105      	bne.n	80027e0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 80027d4:	4b28      	ldr	r3, [pc, #160]	@ (8002878 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80027da:	4b27      	ldr	r3, [pc, #156]	@ (8002878 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027dc:	2203      	movs	r2, #3
 80027de:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80027e0:	4b22      	ldr	r3, [pc, #136]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b0b      	cmp	r3, #11
 80027e8:	d03c      	beq.n	8002864 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80027ea:	4b20      	ldr	r3, [pc, #128]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b0c      	cmp	r3, #12
 80027f2:	d037      	beq.n	8002864 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80027f4:	4b1d      	ldr	r3, [pc, #116]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b0d      	cmp	r3, #13
 80027fc:	d032      	beq.n	8002864 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80027fe:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b10      	cmp	r3, #16
 8002806:	d02d      	beq.n	8002864 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002808:	4b18      	ldr	r3, [pc, #96]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b11      	cmp	r3, #17
 8002810:	d028      	beq.n	8002864 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002812:	4b16      	ldr	r3, [pc, #88]	@ (800286c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002818:	2b12      	cmp	r3, #18
 800281a:	d023      	beq.n	8002864 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 800281c:	4a17      	ldr	r2, [pc, #92]	@ (800287c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 800281e:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002820:	0011      	movs	r1, r2
 8002822:	0018      	movs	r0, r3
 8002824:	f001 ff46 	bl	80046b4 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002828:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f001 ff40 	bl	80046b4 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002836:	2108      	movs	r1, #8
 8002838:	0018      	movs	r0, r3
 800283a:	f003 fc5d 	bl	80060f8 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800283e:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002840:	2100      	movs	r1, #0
 8002842:	0018      	movs	r0, r3
 8002844:	f002 f8b4 	bl	80049b0 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002848:	4a0f      	ldr	r2, [pc, #60]	@ (8002888 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800284c:	0011      	movs	r1, r2
 800284e:	0018      	movs	r0, r3
 8002850:	f002 f9a4 	bl	8004b9c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	001a      	movs	r2, r3
 800285a:	490d      	ldr	r1, [pc, #52]	@ (8002890 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 800285c:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 800285e:	0018      	movs	r0, r3
 8002860:	f004 f8ee 	bl	8006a40 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b002      	add	sp, #8
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000430 	.word	0x20000430
 8002870:	20000c98 	.word	0x20000c98
 8002874:	200008d0 	.word	0x200008d0
 8002878:	20000444 	.word	0x20000444
 800287c:	20000cbc 	.word	0x20000cbc
 8002880:	20000c50 	.word	0x20000c50
 8002884:	20000c38 	.word	0x20000c38
 8002888:	20000028 	.word	0x20000028
 800288c:	0800dde4 	.word	0x0800dde4
 8002890:	20000c44 	.word	0x20000c44
 8002894:	200004fc 	.word	0x200004fc

08002898 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 80028b0:	4bbe      	ldr	r3, [pc, #760]	@ (8002bac <UART2_RX_transfer_complete_callback+0x304>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7fe fca8 	bl	8001208 <Is_System_Real_Time_Status_Byte>
 80028b8:	0003      	movs	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <UART2_RX_transfer_complete_callback+0x1a>
 80028be:	f000 fc0c 	bl	80030da <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 80028c2:	4bbb      	ldr	r3, [pc, #748]	@ (8002bb0 <UART2_RX_transfer_complete_callback+0x308>)
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	0018      	movs	r0, r3
 80028c8:	f003 fc02 	bl	80060d0 <Get_Status_Bit>
 80028cc:	0003      	movs	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <UART2_RX_transfer_complete_callback+0x2e>
 80028d2:	f001 f895 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 80028d6:	4bb7      	ldr	r3, [pc, #732]	@ (8002bb4 <UART2_RX_transfer_complete_callback+0x30c>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d159      	bne.n	8002994 <UART2_RX_transfer_complete_callback+0xec>
 80028e0:	4bb5      	ldr	r3, [pc, #724]	@ (8002bb8 <UART2_RX_transfer_complete_callback+0x310>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d154      	bne.n	8002994 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80028ea:	4bb4      	ldr	r3, [pc, #720]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d013      	beq.n	800291c <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 80028f4:	4bb1      	ldr	r3, [pc, #708]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d00e      	beq.n	800291c <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 80028fe:	4baf      	ldr	r3, [pc, #700]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b06      	cmp	r3, #6
 8002906:	d009      	beq.n	800291c <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8002908:	4bac      	ldr	r3, [pc, #688]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b03      	cmp	r3, #3
 8002910:	d004      	beq.n	800291c <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002912:	4baa      	ldr	r3, [pc, #680]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d13b      	bne.n	8002994 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800291c:	4ba3      	ldr	r3, [pc, #652]	@ (8002bac <UART2_RX_transfer_complete_callback+0x304>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2bfa      	cmp	r3, #250	@ 0xfa
 8002924:	d10b      	bne.n	800293e <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002926:	4ba5      	ldr	r3, [pc, #660]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002928:	4aa4      	ldr	r2, [pc, #656]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 800292e:	4ba3      	ldr	r3, [pc, #652]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002930:	2209      	movs	r2, #9
 8002932:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002934:	4ba2      	ldr	r3, [pc, #648]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800293a:	f001 f85e 	bl	80039fa <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800293e:	4b9b      	ldr	r3, [pc, #620]	@ (8002bac <UART2_RX_transfer_complete_callback+0x304>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2bf8      	cmp	r3, #248	@ 0xf8
 8002946:	d001      	beq.n	800294c <UART2_RX_transfer_complete_callback+0xa4>
 8002948:	f001 f857 	bl	80039fa <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 800294c:	4b9b      	ldr	r3, [pc, #620]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 800294e:	4a9b      	ldr	r2, [pc, #620]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002954:	4b99      	ldr	r3, [pc, #612]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002956:	220b      	movs	r2, #11
 8002958:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 800295a:	4b99      	ldr	r3, [pc, #612]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	0099      	lsls	r1, r3, #2
 8002964:	23a0      	movs	r3, #160	@ 0xa0
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	2200      	movs	r2, #0
 800296a:	0018      	movs	r0, r3
 800296c:	f005 fc73 	bl	8008256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002970:	4b94      	ldr	r3, [pc, #592]	@ (8002bc4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002972:	2201      	movs	r2, #1
 8002974:	2140      	movs	r1, #64	@ 0x40
 8002976:	0018      	movs	r0, r3
 8002978:	f005 fc6d 	bl	8008256 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 800297c:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb4 <UART2_RX_transfer_complete_callback+0x30c>)
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002982:	4b8f      	ldr	r3, [pc, #572]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b8c      	ldr	r3, [pc, #560]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 800298e:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002990:	f001 f833 	bl	80039fa <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002994:	4b89      	ldr	r3, [pc, #548]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b09      	cmp	r3, #9
 800299c:	d123      	bne.n	80029e6 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800299e:	4b83      	ldr	r3, [pc, #524]	@ (8002bac <UART2_RX_transfer_complete_callback+0x304>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2bf8      	cmp	r3, #248	@ 0xf8
 80029a6:	d001      	beq.n	80029ac <UART2_RX_transfer_complete_callback+0x104>
 80029a8:	f001 f82a 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	23a0      	movs	r3, #160	@ 0xa0
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	2200      	movs	r2, #0
 80029b6:	0018      	movs	r0, r3
 80029b8:	f005 fc4d 	bl	8008256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029bc:	4b81      	ldr	r3, [pc, #516]	@ (8002bc4 <UART2_RX_transfer_complete_callback+0x31c>)
 80029be:	2201      	movs	r2, #1
 80029c0:	2140      	movs	r1, #64	@ 0x40
 80029c2:	0018      	movs	r0, r3
 80029c4:	f005 fc47 	bl	8008256 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80029c8:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb4 <UART2_RX_transfer_complete_callback+0x30c>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	4b79      	ldr	r3, [pc, #484]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 80029da:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 80029dc:	4b77      	ldr	r3, [pc, #476]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 80029de:	220a      	movs	r2, #10
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	f001 f80d 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 80029e6:	4b75      	ldr	r3, [pc, #468]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b0a      	cmp	r3, #10
 80029ee:	d145      	bne.n	8002a7c <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029f0:	4b6e      	ldr	r3, [pc, #440]	@ (8002bac <UART2_RX_transfer_complete_callback+0x304>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2bf8      	cmp	r3, #248	@ 0xf8
 80029f8:	d001      	beq.n	80029fe <UART2_RX_transfer_complete_callback+0x156>
 80029fa:	f001 f801 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80029fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb4 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a04:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a10:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a12:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b0b      	cmp	r3, #11
 8002a1a:	d80f      	bhi.n	8002a3c <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	0099      	lsls	r1, r3, #2
 8002a20:	23a0      	movs	r3, #160	@ 0xa0
 8002a22:	05db      	lsls	r3, r3, #23
 8002a24:	2200      	movs	r2, #0
 8002a26:	0018      	movs	r0, r3
 8002a28:	f005 fc15 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a2c:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2140      	movs	r1, #64	@ 0x40
 8002a32:	0018      	movs	r0, r3
 8002a34:	f005 fc0f 	bl	8008256 <HAL_GPIO_WritePin>
 8002a38:	f000 ffe2 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a3c:	4b60      	ldr	r3, [pc, #384]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b18      	cmp	r3, #24
 8002a44:	d80f      	bhi.n	8002a66 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	0099      	lsls	r1, r3, #2
 8002a4a:	23a0      	movs	r3, #160	@ 0xa0
 8002a4c:	05db      	lsls	r3, r3, #23
 8002a4e:	2201      	movs	r2, #1
 8002a50:	0018      	movs	r0, r3
 8002a52:	f005 fc00 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a56:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2140      	movs	r1, #64	@ 0x40
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f005 fbfa 	bl	8008256 <HAL_GPIO_WritePin>
 8002a62:	f000 ffcd 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002a66:	4b55      	ldr	r3, [pc, #340]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002a68:	220a      	movs	r2, #10
 8002a6a:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002a6c:	4b53      	ldr	r3, [pc, #332]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002a6e:	2208      	movs	r2, #8
 8002a70:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002a72:	4b53      	ldr	r3, [pc, #332]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	f000 ffc2 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b0b      	cmp	r3, #11
 8002a84:	d142      	bne.n	8002b0c <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a86:	4b49      	ldr	r3, [pc, #292]	@ (8002bac <UART2_RX_transfer_complete_callback+0x304>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a8e:	d001      	beq.n	8002a94 <UART2_RX_transfer_complete_callback+0x1ec>
 8002a90:	f000 ffb6 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a94:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a9a:	4b49      	ldr	r3, [pc, #292]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	4b46      	ldr	r3, [pc, #280]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002aa6:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002aa8:	4b45      	ldr	r3, [pc, #276]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b0b      	cmp	r3, #11
 8002ab0:	d80f      	bhi.n	8002ad2 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	0099      	lsls	r1, r3, #2
 8002ab6:	23a0      	movs	r3, #160	@ 0xa0
 8002ab8:	05db      	lsls	r3, r3, #23
 8002aba:	2200      	movs	r2, #0
 8002abc:	0018      	movs	r0, r3
 8002abe:	f005 fbca 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ac2:	4b40      	ldr	r3, [pc, #256]	@ (8002bc4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2140      	movs	r1, #64	@ 0x40
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f005 fbc4 	bl	8008256 <HAL_GPIO_WritePin>
 8002ace:	f000 ff97 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b18      	cmp	r3, #24
 8002ada:	d80f      	bhi.n	8002afc <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	23a0      	movs	r3, #160	@ 0xa0
 8002ae2:	05db      	lsls	r3, r3, #23
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f005 fbb5 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002aec:	4b35      	ldr	r3, [pc, #212]	@ (8002bc4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	2140      	movs	r1, #64	@ 0x40
 8002af2:	0018      	movs	r0, r3
 8002af4:	f005 fbaf 	bl	8008256 <HAL_GPIO_WritePin>
 8002af8:	f000 ff82 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002afc:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8002b02:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002b04:	220c      	movs	r2, #12
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	f000 ff7a 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d158      	bne.n	8002bc8 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b16:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <UART2_RX_transfer_complete_callback+0x304>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b1e:	d138      	bne.n	8002b92 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <UART2_RX_transfer_complete_callback+0x30c>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002b26:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002b32:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b0b      	cmp	r3, #11
 8002b3c:	d80f      	bhi.n	8002b5e <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	0099      	lsls	r1, r3, #2
 8002b42:	23a0      	movs	r3, #160	@ 0xa0
 8002b44:	05db      	lsls	r3, r3, #23
 8002b46:	2200      	movs	r2, #0
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f005 fb84 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	2140      	movs	r1, #64	@ 0x40
 8002b54:	0018      	movs	r0, r3
 8002b56:	f005 fb7e 	bl	8008256 <HAL_GPIO_WritePin>
 8002b5a:	f000 ff51 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002b5e:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b18      	cmp	r3, #24
 8002b66:	d80f      	bhi.n	8002b88 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b68:	2380      	movs	r3, #128	@ 0x80
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	23a0      	movs	r3, #160	@ 0xa0
 8002b6e:	05db      	lsls	r3, r3, #23
 8002b70:	2201      	movs	r2, #1
 8002b72:	0018      	movs	r0, r3
 8002b74:	f005 fb6f 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2140      	movs	r1, #64	@ 0x40
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f005 fb69 	bl	8008256 <HAL_GPIO_WritePin>
 8002b84:	f000 ff3c 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002b88:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <UART2_RX_transfer_complete_callback+0x318>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	f000 ff37 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <UART2_RX_transfer_complete_callback+0x304>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2bfa      	cmp	r3, #250	@ 0xfa
 8002b9a:	d001      	beq.n	8002ba0 <UART2_RX_transfer_complete_callback+0x2f8>
 8002b9c:	f000 ff30 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <UART2_RX_transfer_complete_callback+0x314>)
 8002ba2:	220d      	movs	r2, #13
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	f000 ff2b 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	200004dc 	.word	0x200004dc
 8002bb0:	20000c38 	.word	0x20000c38
 8002bb4:	20000ce0 	.word	0x20000ce0
 8002bb8:	20000444 	.word	0x20000444
 8002bbc:	20000430 	.word	0x20000430
 8002bc0:	20000c36 	.word	0x20000c36
 8002bc4:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002bc8:	4bdc      	ldr	r3, [pc, #880]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b0d      	cmp	r3, #13
 8002bd0:	d160      	bne.n	8002c94 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bd2:	4bdb      	ldr	r3, [pc, #876]	@ (8002f40 <UART2_RX_transfer_complete_callback+0x698>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2bf8      	cmp	r3, #248	@ 0xf8
 8002bda:	d001      	beq.n	8002be0 <UART2_RX_transfer_complete_callback+0x338>
 8002bdc:	f000 ff10 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002be0:	4bd8      	ldr	r3, [pc, #864]	@ (8002f44 <UART2_RX_transfer_complete_callback+0x69c>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f001 feb8 	bl	8004958 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	0099      	lsls	r1, r3, #2
 8002bec:	23a0      	movs	r3, #160	@ 0xa0
 8002bee:	05db      	lsls	r3, r3, #23
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f005 fb2f 	bl	8008256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002bf8:	4bd3      	ldr	r3, [pc, #844]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2140      	movs	r1, #64	@ 0x40
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f005 fb29 	bl	8008256 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c04:	2380      	movs	r3, #128	@ 0x80
 8002c06:	0099      	lsls	r1, r3, #2
 8002c08:	23a0      	movs	r3, #160	@ 0xa0
 8002c0a:	05db      	lsls	r3, r3, #23
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f005 fb21 	bl	8008256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002c14:	4bcc      	ldr	r3, [pc, #816]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	2140      	movs	r1, #64	@ 0x40
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f005 fb1b 	bl	8008256 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002c20:	4bca      	ldr	r3, [pc, #808]	@ (8002f4c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002c26:	4bca      	ldr	r3, [pc, #808]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002c2c:	4bc3      	ldr	r3, [pc, #780]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002c2e:	220d      	movs	r2, #13
 8002c30:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c32:	4bc2      	ldr	r3, [pc, #776]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002c34:	2208      	movs	r2, #8
 8002c36:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002c38:	4bc6      	ldr	r3, [pc, #792]	@ (8002f54 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f003 f9e0 	bl	8006002 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002c42:	4bc5      	ldr	r3, [pc, #788]	@ (8002f58 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002c48:	4ac4      	ldr	r2, [pc, #784]	@ (8002f5c <UART2_RX_transfer_complete_callback+0x6b4>)
 8002c4a:	4bbe      	ldr	r3, [pc, #760]	@ (8002f44 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c4c:	0011      	movs	r1, r2
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f001 fd30 	bl	80046b4 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002c54:	4ac2      	ldr	r2, [pc, #776]	@ (8002f60 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002c56:	4bbb      	ldr	r3, [pc, #748]	@ (8002f44 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c58:	0011      	movs	r1, r2
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f001 fd2a 	bl	80046b4 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002c60:	4bc0      	ldr	r3, [pc, #768]	@ (8002f64 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c62:	2108      	movs	r1, #8
 8002c64:	0018      	movs	r0, r3
 8002c66:	f003 fa47 	bl	80060f8 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002c6a:	4bbd      	ldr	r3, [pc, #756]	@ (8002f60 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f001 fe9e 	bl	80049b0 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002c74:	4abc      	ldr	r2, [pc, #752]	@ (8002f68 <UART2_RX_transfer_complete_callback+0x6c0>)
 8002c76:	4bba      	ldr	r3, [pc, #744]	@ (8002f60 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002c78:	0011      	movs	r1, r2
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f001 ff8e 	bl	8004b9c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002c80:	4bba      	ldr	r3, [pc, #744]	@ (8002f6c <UART2_RX_transfer_complete_callback+0x6c4>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	001a      	movs	r2, r3
 8002c86:	49ba      	ldr	r1, [pc, #744]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002c88:	4bba      	ldr	r3, [pc, #744]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f003 fed8 	bl	8006a40 <HAL_ADC_Start_DMA>
 8002c90:	f000 feb6 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002c94:	4ba9      	ldr	r3, [pc, #676]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d146      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x484>
 8002c9e:	4bb1      	ldr	r3, [pc, #708]	@ (8002f64 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f003 fa14 	bl	80060d0 <Get_Status_Bit>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d13f      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cac:	4ba4      	ldr	r3, [pc, #656]	@ (8002f40 <UART2_RX_transfer_complete_callback+0x698>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2bf8      	cmp	r3, #248	@ 0xf8
 8002cb4:	d001      	beq.n	8002cba <UART2_RX_transfer_complete_callback+0x412>
 8002cb6:	f000 fea3 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002cba:	4ba4      	ldr	r3, [pc, #656]	@ (8002f4c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cc0:	4ba3      	ldr	r3, [pc, #652]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4ba1      	ldr	r3, [pc, #644]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ccc:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002cce:	4ba0      	ldr	r3, [pc, #640]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b0b      	cmp	r3, #11
 8002cd6:	d80f      	bhi.n	8002cf8 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	0099      	lsls	r1, r3, #2
 8002cdc:	23a0      	movs	r3, #160	@ 0xa0
 8002cde:	05db      	lsls	r3, r3, #23
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f005 fab7 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ce8:	4b97      	ldr	r3, [pc, #604]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	2140      	movs	r1, #64	@ 0x40
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f005 fab1 	bl	8008256 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cf4:	f000 fe84 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002cf8:	4b95      	ldr	r3, [pc, #596]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b18      	cmp	r3, #24
 8002d00:	d80f      	bhi.n	8002d22 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	0099      	lsls	r1, r3, #2
 8002d06:	23a0      	movs	r3, #160	@ 0xa0
 8002d08:	05db      	lsls	r3, r3, #23
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f005 faa2 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d12:	4b8d      	ldr	r3, [pc, #564]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	2140      	movs	r1, #64	@ 0x40
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f005 fa9c 	bl	8008256 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d1e:	f000 fe6f 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002d22:	4b8b      	ldr	r3, [pc, #556]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d28:	f000 fe6a 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002d2c:	4b83      	ldr	r3, [pc, #524]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d14c      	bne.n	8002dd0 <UART2_RX_transfer_complete_callback+0x528>
 8002d36:	4b88      	ldr	r3, [pc, #544]	@ (8002f58 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d147      	bne.n	8002dd0 <UART2_RX_transfer_complete_callback+0x528>
 8002d40:	4b88      	ldr	r3, [pc, #544]	@ (8002f64 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d42:	2120      	movs	r1, #32
 8002d44:	0018      	movs	r0, r3
 8002d46:	f003 f9c3 	bl	80060d0 <Get_Status_Bit>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d13f      	bne.n	8002dd0 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d50:	4b7b      	ldr	r3, [pc, #492]	@ (8002f40 <UART2_RX_transfer_complete_callback+0x698>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d58:	d11e      	bne.n	8002d98 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002d60:	4b7b      	ldr	r3, [pc, #492]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b79      	ldr	r3, [pc, #484]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d6c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002d6e:	4b77      	ldr	r3, [pc, #476]	@ (8002f4c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002d74:	4b71      	ldr	r3, [pc, #452]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002d76:	2210      	movs	r2, #16
 8002d78:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d7a:	4b70      	ldr	r3, [pc, #448]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002d80:	4b78      	ldr	r3, [pc, #480]	@ (8002f64 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d82:	2120      	movs	r1, #32
 8002d84:	0018      	movs	r0, r3
 8002d86:	f003 f9c9 	bl	800611c <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002d8a:	4b76      	ldr	r3, [pc, #472]	@ (8002f64 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d8c:	2140      	movs	r1, #64	@ 0x40
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f003 f9c4 	bl	800611c <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d94:	f000 fe33 	bl	80039fe <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002d98:	4b69      	ldr	r3, [pc, #420]	@ (8002f40 <UART2_RX_transfer_complete_callback+0x698>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002da0:	d001      	beq.n	8002da6 <UART2_RX_transfer_complete_callback+0x4fe>
 8002da2:	f000 fe2c 	bl	80039fe <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002da6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002dac:	4b63      	ldr	r3, [pc, #396]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002dae:	220e      	movs	r2, #14
 8002db0:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002db2:	4b62      	ldr	r3, [pc, #392]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002db4:	2208      	movs	r2, #8
 8002db6:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002db8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f64 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002dba:	2120      	movs	r1, #32
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f003 f9ad 	bl	800611c <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002dc2:	4b68      	ldr	r3, [pc, #416]	@ (8002f64 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002dc4:	2140      	movs	r1, #64	@ 0x40
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f003 f9a8 	bl	800611c <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002dcc:	f000 fe17 	bl	80039fe <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b0e      	cmp	r3, #14
 8002dd8:	d123      	bne.n	8002e22 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002dda:	4b59      	ldr	r3, [pc, #356]	@ (8002f40 <UART2_RX_transfer_complete_callback+0x698>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2bf8      	cmp	r3, #248	@ 0xf8
 8002de2:	d001      	beq.n	8002de8 <UART2_RX_transfer_complete_callback+0x540>
 8002de4:	f000 fe0c 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	0099      	lsls	r1, r3, #2
 8002dec:	23a0      	movs	r3, #160	@ 0xa0
 8002dee:	05db      	lsls	r3, r3, #23
 8002df0:	2200      	movs	r2, #0
 8002df2:	0018      	movs	r0, r3
 8002df4:	f005 fa2f 	bl	8008256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002df8:	4b53      	ldr	r3, [pc, #332]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	2140      	movs	r1, #64	@ 0x40
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f005 fa29 	bl	8008256 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002e04:	4b51      	ldr	r3, [pc, #324]	@ (8002f4c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002e0a:	4b51      	ldr	r3, [pc, #324]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b4e      	ldr	r3, [pc, #312]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e16:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002e18:	4b48      	ldr	r3, [pc, #288]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	f000 fdef 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002e22:	4b46      	ldr	r3, [pc, #280]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d142      	bne.n	8002eb2 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e2c:	4b44      	ldr	r3, [pc, #272]	@ (8002f40 <UART2_RX_transfer_complete_callback+0x698>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e34:	d001      	beq.n	8002e3a <UART2_RX_transfer_complete_callback+0x592>
 8002e36:	f000 fde3 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002e3a:	4b45      	ldr	r3, [pc, #276]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b42      	ldr	r3, [pc, #264]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e46:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e48:	4b41      	ldr	r3, [pc, #260]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b0b      	cmp	r3, #11
 8002e50:	d80f      	bhi.n	8002e72 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	0099      	lsls	r1, r3, #2
 8002e56:	23a0      	movs	r3, #160	@ 0xa0
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f005 f9fa 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e62:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	2140      	movs	r1, #64	@ 0x40
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f005 f9f4 	bl	8008256 <HAL_GPIO_WritePin>
 8002e6e:	f000 fdc7 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002e72:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b18      	cmp	r3, #24
 8002e7a:	d80f      	bhi.n	8002e9c <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	0099      	lsls	r1, r3, #2
 8002e80:	23a0      	movs	r3, #160	@ 0xa0
 8002e82:	05db      	lsls	r3, r3, #23
 8002e84:	2201      	movs	r2, #1
 8002e86:	0018      	movs	r0, r3
 8002e88:	f005 f9e5 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2140      	movs	r1, #64	@ 0x40
 8002e92:	0018      	movs	r0, r3
 8002e94:	f005 f9df 	bl	8008256 <HAL_GPIO_WritePin>
 8002e98:	f000 fdb2 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002e9c:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002ea2:	4b26      	ldr	r3, [pc, #152]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002ea8:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	f000 fda7 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002eb2:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d15d      	bne.n	8002f78 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ebc:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <UART2_RX_transfer_complete_callback+0x698>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ec4:	d001      	beq.n	8002eca <UART2_RX_transfer_complete_callback+0x622>
 8002ec6:	f000 fd9b 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002eca:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ed6:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b0b      	cmp	r3, #11
 8002ee0:	d80f      	bhi.n	8002f02 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ee2:	2380      	movs	r3, #128	@ 0x80
 8002ee4:	0099      	lsls	r1, r3, #2
 8002ee6:	23a0      	movs	r3, #160	@ 0xa0
 8002ee8:	05db      	lsls	r3, r3, #23
 8002eea:	2200      	movs	r2, #0
 8002eec:	0018      	movs	r0, r3
 8002eee:	f005 f9b2 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2140      	movs	r1, #64	@ 0x40
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f005 f9ac 	bl	8008256 <HAL_GPIO_WritePin>
 8002efe:	f000 fd7f 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002f02:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b18      	cmp	r3, #24
 8002f0a:	d80f      	bhi.n	8002f2c <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	0099      	lsls	r1, r3, #2
 8002f10:	23a0      	movs	r3, #160	@ 0xa0
 8002f12:	05db      	lsls	r3, r3, #23
 8002f14:	2201      	movs	r2, #1
 8002f16:	0018      	movs	r0, r3
 8002f18:	f005 f99d 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2140      	movs	r1, #64	@ 0x40
 8002f22:	0018      	movs	r0, r3
 8002f24:	f005 f997 	bl	8008256 <HAL_GPIO_WritePin>
 8002f28:	f000 fd6a 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <UART2_RX_transfer_complete_callback+0x694>)
 8002f2e:	2211      	movs	r2, #17
 8002f30:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002f32:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	f000 fd62 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
 8002f3c:	20000430 	.word	0x20000430
 8002f40:	200004dc 	.word	0x200004dc
 8002f44:	20000c98 	.word	0x20000c98
 8002f48:	50000800 	.word	0x50000800
 8002f4c:	20000ce0 	.word	0x20000ce0
 8002f50:	20000c36 	.word	0x20000c36
 8002f54:	200008d0 	.word	0x200008d0
 8002f58:	20000444 	.word	0x20000444
 8002f5c:	20000cbc 	.word	0x20000cbc
 8002f60:	20000c50 	.word	0x20000c50
 8002f64:	20000c38 	.word	0x20000c38
 8002f68:	20000028 	.word	0x20000028
 8002f6c:	0800dde4 	.word	0x0800dde4
 8002f70:	20000c44 	.word	0x20000c44
 8002f74:	200004fc 	.word	0x200004fc
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002f78:	4bed      	ldr	r3, [pc, #948]	@ (8003330 <UART2_RX_transfer_complete_callback+0xa88>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b11      	cmp	r3, #17
 8002f80:	d146      	bne.n	8003010 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f82:	4bec      	ldr	r3, [pc, #944]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f8a:	d135      	bne.n	8002ff8 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002f8c:	4bea      	ldr	r3, [pc, #936]	@ (8003338 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4be8      	ldr	r3, [pc, #928]	@ (8003338 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f98:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002f9a:	4be7      	ldr	r3, [pc, #924]	@ (8003338 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b0b      	cmp	r3, #11
 8002fa2:	d80f      	bhi.n	8002fc4 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	23a0      	movs	r3, #160	@ 0xa0
 8002faa:	05db      	lsls	r3, r3, #23
 8002fac:	2200      	movs	r2, #0
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f005 f951 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fb4:	4be1      	ldr	r3, [pc, #900]	@ (800333c <UART2_RX_transfer_complete_callback+0xa94>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2140      	movs	r1, #64	@ 0x40
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f005 f94b 	bl	8008256 <HAL_GPIO_WritePin>
 8002fc0:	f000 fd1e 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002fc4:	4bdc      	ldr	r3, [pc, #880]	@ (8003338 <UART2_RX_transfer_complete_callback+0xa90>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b18      	cmp	r3, #24
 8002fcc:	d80f      	bhi.n	8002fee <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	0099      	lsls	r1, r3, #2
 8002fd2:	23a0      	movs	r3, #160	@ 0xa0
 8002fd4:	05db      	lsls	r3, r3, #23
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f005 f93c 	bl	8008256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002fde:	4bd7      	ldr	r3, [pc, #860]	@ (800333c <UART2_RX_transfer_complete_callback+0xa94>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2140      	movs	r1, #64	@ 0x40
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f005 f936 	bl	8008256 <HAL_GPIO_WritePin>
 8002fea:	f000 fd09 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002fee:	4bd2      	ldr	r3, [pc, #840]	@ (8003338 <UART2_RX_transfer_complete_callback+0xa90>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	f000 fd04 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002ff8:	4bce      	ldr	r3, [pc, #824]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2bfa      	cmp	r3, #250	@ 0xfa
 8003000:	d001      	beq.n	8003006 <UART2_RX_transfer_complete_callback+0x75e>
 8003002:	f000 fcfd 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8003006:	4bca      	ldr	r3, [pc, #808]	@ (8003330 <UART2_RX_transfer_complete_callback+0xa88>)
 8003008:	2212      	movs	r2, #18
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	f000 fcf8 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8003010:	4bc7      	ldr	r3, [pc, #796]	@ (8003330 <UART2_RX_transfer_complete_callback+0xa88>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b12      	cmp	r3, #18
 8003018:	d001      	beq.n	800301e <UART2_RX_transfer_complete_callback+0x776>
 800301a:	f000 fcf1 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800301e:	4bc5      	ldr	r3, [pc, #788]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2bf8      	cmp	r3, #248	@ 0xf8
 8003026:	d001      	beq.n	800302c <UART2_RX_transfer_complete_callback+0x784>
 8003028:	f000 fcea 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 800302c:	4bc4      	ldr	r3, [pc, #784]	@ (8003340 <UART2_RX_transfer_complete_callback+0xa98>)
 800302e:	0018      	movs	r0, r3
 8003030:	f001 fc92 	bl	8004958 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003034:	2380      	movs	r3, #128	@ 0x80
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	23a0      	movs	r3, #160	@ 0xa0
 800303a:	05db      	lsls	r3, r3, #23
 800303c:	2201      	movs	r2, #1
 800303e:	0018      	movs	r0, r3
 8003040:	f005 f909 	bl	8008256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003044:	4bbd      	ldr	r3, [pc, #756]	@ (800333c <UART2_RX_transfer_complete_callback+0xa94>)
 8003046:	2200      	movs	r2, #0
 8003048:	2140      	movs	r1, #64	@ 0x40
 800304a:	0018      	movs	r0, r3
 800304c:	f005 f903 	bl	8008256 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003050:	2380      	movs	r3, #128	@ 0x80
 8003052:	0099      	lsls	r1, r3, #2
 8003054:	23a0      	movs	r3, #160	@ 0xa0
 8003056:	05db      	lsls	r3, r3, #23
 8003058:	2200      	movs	r2, #0
 800305a:	0018      	movs	r0, r3
 800305c:	f005 f8fb 	bl	8008256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003060:	4bb6      	ldr	r3, [pc, #728]	@ (800333c <UART2_RX_transfer_complete_callback+0xa94>)
 8003062:	2201      	movs	r2, #1
 8003064:	2140      	movs	r1, #64	@ 0x40
 8003066:	0018      	movs	r0, r3
 8003068:	f005 f8f5 	bl	8008256 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 800306c:	4bb0      	ldr	r3, [pc, #704]	@ (8003330 <UART2_RX_transfer_complete_callback+0xa88>)
 800306e:	2212      	movs	r2, #18
 8003070:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003072:	4baf      	ldr	r3, [pc, #700]	@ (8003330 <UART2_RX_transfer_complete_callback+0xa88>)
 8003074:	2208      	movs	r2, #8
 8003076:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8003078:	4baf      	ldr	r3, [pc, #700]	@ (8003338 <UART2_RX_transfer_complete_callback+0xa90>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 800307e:	4bb1      	ldr	r3, [pc, #708]	@ (8003344 <UART2_RX_transfer_complete_callback+0xa9c>)
 8003080:	2100      	movs	r1, #0
 8003082:	0018      	movs	r0, r3
 8003084:	f002 ffbd 	bl	8006002 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8003088:	4baf      	ldr	r3, [pc, #700]	@ (8003348 <UART2_RX_transfer_complete_callback+0xaa0>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 800308e:	4aaf      	ldr	r2, [pc, #700]	@ (800334c <UART2_RX_transfer_complete_callback+0xaa4>)
 8003090:	4bab      	ldr	r3, [pc, #684]	@ (8003340 <UART2_RX_transfer_complete_callback+0xa98>)
 8003092:	0011      	movs	r1, r2
 8003094:	0018      	movs	r0, r3
 8003096:	f001 fb0d 	bl	80046b4 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 800309a:	4aad      	ldr	r2, [pc, #692]	@ (8003350 <UART2_RX_transfer_complete_callback+0xaa8>)
 800309c:	4ba8      	ldr	r3, [pc, #672]	@ (8003340 <UART2_RX_transfer_complete_callback+0xa98>)
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f001 fb07 	bl	80046b4 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 80030a6:	4bab      	ldr	r3, [pc, #684]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 80030a8:	2108      	movs	r1, #8
 80030aa:	0018      	movs	r0, r3
 80030ac:	f003 f824 	bl	80060f8 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80030b0:	4ba7      	ldr	r3, [pc, #668]	@ (8003350 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030b2:	2100      	movs	r1, #0
 80030b4:	0018      	movs	r0, r3
 80030b6:	f001 fc7b 	bl	80049b0 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80030ba:	4aa7      	ldr	r2, [pc, #668]	@ (8003358 <UART2_RX_transfer_complete_callback+0xab0>)
 80030bc:	4ba4      	ldr	r3, [pc, #656]	@ (8003350 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030be:	0011      	movs	r1, r2
 80030c0:	0018      	movs	r0, r3
 80030c2:	f001 fd6b 	bl	8004b9c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80030c6:	4ba5      	ldr	r3, [pc, #660]	@ (800335c <UART2_RX_transfer_complete_callback+0xab4>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	001a      	movs	r2, r3
 80030cc:	49a4      	ldr	r1, [pc, #656]	@ (8003360 <UART2_RX_transfer_complete_callback+0xab8>)
 80030ce:	4ba5      	ldr	r3, [pc, #660]	@ (8003364 <UART2_RX_transfer_complete_callback+0xabc>)
 80030d0:	0018      	movs	r0, r3
 80030d2:	f003 fcb5 	bl	8006a40 <HAL_ADC_Start_DMA>
 80030d6:	f000 fc93 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 80030da:	4ba3      	ldr	r3, [pc, #652]	@ (8003368 <UART2_RX_transfer_complete_callback+0xac0>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d000      	beq.n	80030e6 <UART2_RX_transfer_complete_callback+0x83e>
 80030e4:	e29e      	b.n	8003624 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 80030e6:	4ba1      	ldr	r3, [pc, #644]	@ (800336c <UART2_RX_transfer_complete_callback+0xac4>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d000      	beq.n	80030f2 <UART2_RX_transfer_complete_callback+0x84a>
 80030f0:	e0a3      	b.n	800323a <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80030f2:	4b9f      	ldr	r3, [pc, #636]	@ (8003370 <UART2_RX_transfer_complete_callback+0xac8>)
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fe f824 	bl	8001142 <Is_Data_Buffer_Empty>
 80030fa:	0003      	movs	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d001      	beq.n	8003104 <UART2_RX_transfer_complete_callback+0x85c>
 8003100:	f000 fc7e 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003104:	4b8b      	ldr	r3, [pc, #556]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003106:	0018      	movs	r0, r3
 8003108:	f7fd feda 	bl	8000ec0 <Is_Status_Byte>
 800310c:	0003      	movs	r3, r0
 800310e:	2b01      	cmp	r3, #1
 8003110:	d001      	beq.n	8003116 <UART2_RX_transfer_complete_callback+0x86e>
 8003112:	f000 fc75 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003116:	4b87      	ldr	r3, [pc, #540]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003118:	0018      	movs	r0, r3
 800311a:	f7fd ff03 	bl	8000f24 <Is_PC_Status_Byte>
 800311e:	0003      	movs	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d134      	bne.n	800318e <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003124:	4b83      	ldr	r3, [pc, #524]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4b90      	ldr	r3, [pc, #576]	@ (800336c <UART2_RX_transfer_complete_callback+0xac4>)
 800312c:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800312e:	4b91      	ldr	r3, [pc, #580]	@ (8003374 <UART2_RX_transfer_complete_callback+0xacc>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	4b7f      	ldr	r3, [pc, #508]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003136:	0011      	movs	r1, r2
 8003138:	0018      	movs	r0, r3
 800313a:	f7fd ffe1 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800313e:	0003      	movs	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10d      	bne.n	8003160 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 8003144:	4b7b      	ldr	r3, [pc, #492]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b87      	ldr	r3, [pc, #540]	@ (8003368 <UART2_RX_transfer_complete_callback+0xac0>)
 800314c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	005a      	lsls	r2, r3, #1
 8003152:	4b80      	ldr	r3, [pc, #512]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f002 ffce 	bl	80060f8 <Set_Status_Bit>
 800315c:	f000 fc50 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003160:	4b7c      	ldr	r3, [pc, #496]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 8003162:	0018      	movs	r0, r3
 8003164:	f7fe f883 	bl	800126e <Is_OMNI_On>
 8003168:	0003      	movs	r3, r0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <UART2_RX_transfer_complete_callback+0x8ca>
 800316e:	f000 fc47 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8003172:	4b70      	ldr	r3, [pc, #448]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	4b7b      	ldr	r3, [pc, #492]	@ (8003368 <UART2_RX_transfer_complete_callback+0xac0>)
 800317a:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	005a      	lsls	r2, r3, #1
 8003180:	4b74      	ldr	r3, [pc, #464]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 8003182:	0011      	movs	r1, r2
 8003184:	0018      	movs	r0, r3
 8003186:	f002 ffb7 	bl	80060f8 <Set_Status_Bit>
 800318a:	f000 fc39 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 800318e:	4b69      	ldr	r3, [pc, #420]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003190:	0018      	movs	r0, r3
 8003192:	f7fd fee3 	bl	8000f5c <Is_CC_Status_Byte>
 8003196:	0003      	movs	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d134      	bne.n	8003206 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 800319c:	4b65      	ldr	r3, [pc, #404]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b72      	ldr	r3, [pc, #456]	@ (800336c <UART2_RX_transfer_complete_callback+0xac4>)
 80031a4:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80031a6:	4b73      	ldr	r3, [pc, #460]	@ (8003374 <UART2_RX_transfer_complete_callback+0xacc>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b61      	ldr	r3, [pc, #388]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031ae:	0011      	movs	r1, r2
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fd ffa5 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80031b6:	0003      	movs	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d10d      	bne.n	80031d8 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 80031bc:	4b5d      	ldr	r3, [pc, #372]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b69      	ldr	r3, [pc, #420]	@ (8003368 <UART2_RX_transfer_complete_callback+0xac0>)
 80031c4:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031c6:	2380      	movs	r3, #128	@ 0x80
 80031c8:	005a      	lsls	r2, r3, #1
 80031ca:	4b62      	ldr	r3, [pc, #392]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f002 ff92 	bl	80060f8 <Set_Status_Bit>
 80031d4:	f000 fc14 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80031d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fe f847 	bl	800126e <Is_OMNI_On>
 80031e0:	0003      	movs	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <UART2_RX_transfer_complete_callback+0x942>
 80031e6:	f000 fc0b 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80031ea:	4b52      	ldr	r3, [pc, #328]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <UART2_RX_transfer_complete_callback+0xac0>)
 80031f2:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	005a      	lsls	r2, r3, #1
 80031f8:	4b56      	ldr	r3, [pc, #344]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f002 ff7b 	bl	80060f8 <Set_Status_Bit>
 8003202:	f000 fbfd 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003206:	4b4b      	ldr	r3, [pc, #300]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003208:	0018      	movs	r0, r3
 800320a:	f7fd ff69 	bl	80010e0 <Is_Sysex_Start_Status_Byte>
 800320e:	0003      	movs	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d001      	beq.n	8003218 <UART2_RX_transfer_complete_callback+0x970>
 8003214:	f000 fbf4 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 8003218:	4b46      	ldr	r3, [pc, #280]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b52      	ldr	r3, [pc, #328]	@ (8003368 <UART2_RX_transfer_complete_callback+0xac0>)
 8003220:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 8003222:	4b52      	ldr	r3, [pc, #328]	@ (800336c <UART2_RX_transfer_complete_callback+0xac4>)
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	005a      	lsls	r2, r3, #1
 800322c:	4b49      	ldr	r3, [pc, #292]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f002 ff61 	bl	80060f8 <Set_Status_Bit>
 8003236:	f000 fbe3 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 800323a:	4b4c      	ldr	r3, [pc, #304]	@ (800336c <UART2_RX_transfer_complete_callback+0xac4>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <UART2_RX_transfer_complete_callback+0x9a0>
 8003244:	f000 fbdc 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 8003248:	4b3a      	ldr	r3, [pc, #232]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 800324a:	0018      	movs	r0, r3
 800324c:	f7fd fe51 	bl	8000ef2 <Is_Data_Byte>
 8003250:	0003      	movs	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d000      	beq.n	8003258 <UART2_RX_transfer_complete_callback+0x9b0>
 8003256:	e151      	b.n	80034fc <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	005a      	lsls	r2, r3, #1
 800325c:	4b3d      	ldr	r3, [pc, #244]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 800325e:	0011      	movs	r1, r2
 8003260:	0018      	movs	r0, r3
 8003262:	f002 ff49 	bl	80060f8 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 8003266:	4b41      	ldr	r3, [pc, #260]	@ (800336c <UART2_RX_transfer_complete_callback+0xac4>)
 8003268:	0018      	movs	r0, r3
 800326a:	f7fd fe5b 	bl	8000f24 <Is_PC_Status_Byte>
 800326e:	0003      	movs	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d143      	bne.n	80032fc <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003274:	4b3f      	ldr	r3, [pc, #252]	@ (8003374 <UART2_RX_transfer_complete_callback+0xacc>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4b3c      	ldr	r3, [pc, #240]	@ (800336c <UART2_RX_transfer_complete_callback+0xac4>)
 800327c:	0011      	movs	r1, r2
 800327e:	0018      	movs	r0, r3
 8003280:	f7fd ff3e 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003284:	0003      	movs	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d008      	beq.n	800329c <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 800328a:	4b32      	ldr	r3, [pc, #200]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 800328c:	0018      	movs	r0, r3
 800328e:	f7fd ffee 	bl	800126e <Is_OMNI_On>
 8003292:	0003      	movs	r3, r0
 8003294:	2b01      	cmp	r3, #1
 8003296:	d001      	beq.n	800329c <UART2_RX_transfer_complete_callback+0x9f4>
 8003298:	f000 fbb2 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800329c:	4b34      	ldr	r3, [pc, #208]	@ (8003370 <UART2_RX_transfer_complete_callback+0xac8>)
 800329e:	0018      	movs	r0, r3
 80032a0:	f7fd ff4f 	bl	8001142 <Is_Data_Buffer_Empty>
 80032a4:	0003      	movs	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d001      	beq.n	80032ae <UART2_RX_transfer_complete_callback+0xa06>
 80032aa:	f000 fba9 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80032ae:	4b21      	ldr	r3, [pc, #132]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 80032b0:	2104      	movs	r1, #4
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fd ff93 	bl	80011de <Is_Program_Change_Data_Byte_In_Range>
 80032b8:	0003      	movs	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10f      	bne.n	80032de <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 80032be:	f7fd fd53 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80032c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003378 <UART2_RX_transfer_complete_callback+0xad0>)
 80032ce:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80032d0:	f7fd f926 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80032d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 80032d6:	2108      	movs	r1, #8
 80032d8:	0018      	movs	r0, r3
 80032da:	f002 ff1f 	bl	800611c <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 80032de:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <UART2_RX_transfer_complete_callback+0xac8>)
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7fd ff5e 	bl	80011a2 <Clear_Data_Buffer>
								active_status_byte = 0;
 80032e6:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <UART2_RX_transfer_complete_callback+0xac0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80032ec:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <UART2_RX_transfer_complete_callback+0xaac>)
 80032ee:	4b23      	ldr	r3, [pc, #140]	@ (800337c <UART2_RX_transfer_complete_callback+0xad4>)
 80032f0:	0011      	movs	r1, r2
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fd ffd5 	bl	80012a2 <Reset_and_Stop_MIDI_Software_Timer>
 80032f8:	f000 fb82 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 80032fc:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <UART2_RX_transfer_complete_callback+0xac4>)
 80032fe:	0018      	movs	r0, r3
 8003300:	f7fd fe2c 	bl	8000f5c <Is_CC_Status_Byte>
 8003304:	0003      	movs	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <UART2_RX_transfer_complete_callback+0xa66>
 800330a:	f000 fb79 	bl	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800330e:	4b18      	ldr	r3, [pc, #96]	@ (8003370 <UART2_RX_transfer_complete_callback+0xac8>)
 8003310:	0018      	movs	r0, r3
 8003312:	f7fd ff16 	bl	8001142 <Is_Data_Buffer_Empty>
 8003316:	0003      	movs	r3, r0
 8003318:	2b01      	cmp	r3, #1
 800331a:	d131      	bne.n	8003380 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <UART2_RX_transfer_complete_callback+0xa8c>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <UART2_RX_transfer_complete_callback+0xac8>)
 8003324:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <UART2_RX_transfer_complete_callback+0xad4>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e368      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	20000430 	.word	0x20000430
 8003334:	200004dc 	.word	0x200004dc
 8003338:	20000c36 	.word	0x20000c36
 800333c:	50000800 	.word	0x50000800
 8003340:	20000c98 	.word	0x20000c98
 8003344:	200008d0 	.word	0x200008d0
 8003348:	20000444 	.word	0x20000444
 800334c:	20000cbc 	.word	0x20000cbc
 8003350:	20000c50 	.word	0x20000c50
 8003354:	20000c38 	.word	0x20000c38
 8003358:	20000028 	.word	0x20000028
 800335c:	0800dde4 	.word	0x0800dde4
 8003360:	20000c44 	.word	0x20000c44
 8003364:	200004fc 	.word	0x200004fc
 8003368:	200004cb 	.word	0x200004cb
 800336c:	200004cc 	.word	0x200004cc
 8003370:	200004d0 	.word	0x200004d0
 8003374:	200004ca 	.word	0x200004ca
 8003378:	200004bc 	.word	0x200004bc
 800337c:	20000c40 	.word	0x20000c40

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003380:	4bd6      	ldr	r3, [pc, #856]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4bd6      	ldr	r3, [pc, #856]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 8003388:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800338a:	4ad6      	ldr	r2, [pc, #856]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 800338c:	4bd6      	ldr	r3, [pc, #856]	@ (80036e8 <UART2_RX_transfer_complete_callback+0xe40>)
 800338e:	0011      	movs	r1, r2
 8003390:	0018      	movs	r0, r3
 8003392:	f7fd ff86 	bl	80012a2 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003396:	4bd2      	ldr	r3, [pc, #840]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 8003398:	0018      	movs	r0, r3
 800339a:	f7fd fdfb 	bl	8000f94 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 800339e:	0003      	movs	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d14c      	bne.n	800343e <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 80033a4:	4bd1      	ldr	r3, [pc, #836]	@ (80036ec <UART2_RX_transfer_complete_callback+0xe44>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4bd1      	ldr	r3, [pc, #836]	@ (80036f0 <UART2_RX_transfer_complete_callback+0xe48>)
 80033ac:	0011      	movs	r1, r2
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7fd fea6 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033b4:	0003      	movs	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d139      	bne.n	800342e <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80033ba:	4ace      	ldr	r2, [pc, #824]	@ (80036f4 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033bc:	4bc8      	ldr	r3, [pc, #800]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fd fe46 	bl	8001052 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80033c6:	0003      	movs	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d130      	bne.n	800342e <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80033cc:	4bc4      	ldr	r3, [pc, #784]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b79      	cmp	r3, #121	@ 0x79
 80033d4:	d10b      	bne.n	80033ee <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 80033d6:	4ac8      	ldr	r2, [pc, #800]	@ (80036f8 <UART2_RX_transfer_complete_callback+0xe50>)
 80033d8:	4bc8      	ldr	r3, [pc, #800]	@ (80036fc <UART2_RX_transfer_complete_callback+0xe54>)
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f7fd ff7b 	bl	80012d8 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80033e2:	4bc0      	ldr	r3, [pc, #768]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033e4:	2108      	movs	r1, #8
 80033e6:	0018      	movs	r0, r3
 80033e8:	f002 fe98 	bl	800611c <Clear_Status_Bit>
 80033ec:	e01f      	b.n	800342e <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80033ee:	4bbc      	ldr	r3, [pc, #752]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80033f0:	785b      	ldrb	r3, [r3, #1]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b7a      	cmp	r3, #122	@ 0x7a
 80033f6:	d107      	bne.n	8003408 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 80033f8:	f7fd ffc8 	bl	800138c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80033fc:	4bb9      	ldr	r3, [pc, #740]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033fe:	2108      	movs	r1, #8
 8003400:	0018      	movs	r0, r3
 8003402:	f002 fe8b 	bl	800611c <Clear_Status_Bit>
 8003406:	e012      	b.n	800342e <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003408:	4bb5      	ldr	r3, [pc, #724]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b7c      	cmp	r3, #124	@ 0x7c
 8003410:	d104      	bne.n	800341c <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 8003412:	4bb4      	ldr	r3, [pc, #720]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003414:	0018      	movs	r0, r3
 8003416:	f7fd fff1 	bl	80013fc <Set_OMNI_Off>
 800341a:	e008      	b.n	800342e <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 800341c:	4bb0      	ldr	r3, [pc, #704]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b7d      	cmp	r3, #125	@ 0x7d
 8003424:	d103      	bne.n	800342e <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 8003426:	4baf      	ldr	r3, [pc, #700]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003428:	0018      	movs	r0, r3
 800342a:	f7fd fff7 	bl	800141c <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 800342e:	4bb4      	ldr	r3, [pc, #720]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003434:	4baa      	ldr	r3, [pc, #680]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 8003436:	0018      	movs	r0, r3
 8003438:	f7fd feb3 	bl	80011a2 <Clear_Data_Buffer>
 800343c:	e2e0      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800343e:	4ba8      	ldr	r3, [pc, #672]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd fdd3 	bl	8000fec <Is_Utilised_CC_First_Data_Byte>
 8003446:	0003      	movs	r3, r0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d14f      	bne.n	80034ec <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 800344c:	4ba7      	ldr	r3, [pc, #668]	@ (80036ec <UART2_RX_transfer_complete_callback+0xe44>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4ba7      	ldr	r3, [pc, #668]	@ (80036f0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003454:	0011      	movs	r1, r2
 8003456:	0018      	movs	r0, r3
 8003458:	f7fd fe52 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800345c:	0003      	movs	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d006      	beq.n	8003470 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003462:	4ba0      	ldr	r3, [pc, #640]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003464:	0018      	movs	r0, r3
 8003466:	f7fd ff02 	bl	800126e <Is_OMNI_On>
 800346a:	0003      	movs	r3, r0
 800346c:	2b01      	cmp	r3, #1
 800346e:	d135      	bne.n	80034dc <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003470:	4b9b      	ldr	r3, [pc, #620]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b14      	cmp	r3, #20
 8003478:	d104      	bne.n	8003484 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800347a:	4b9e      	ldr	r3, [pc, #632]	@ (80036f4 <UART2_RX_transfer_complete_callback+0xe4c>)
 800347c:	0018      	movs	r0, r3
 800347e:	f7fd fbf1 	bl	8000c64 <Set_Waveshape_to_CC_Mode_and_Value>
 8003482:	e02b      	b.n	80034dc <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003484:	4b96      	ldr	r3, [pc, #600]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b15      	cmp	r3, #21
 800348c:	d109      	bne.n	80034a2 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800348e:	4b99      	ldr	r3, [pc, #612]	@ (80036f4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003490:	0018      	movs	r0, r3
 8003492:	f7fd fc01 	bl	8000c98 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003496:	4b93      	ldr	r3, [pc, #588]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003498:	2108      	movs	r1, #8
 800349a:	0018      	movs	r0, r3
 800349c:	f002 fe3e 	bl	800611c <Clear_Status_Bit>
 80034a0:	e01c      	b.n	80034dc <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80034a2:	4b8f      	ldr	r3, [pc, #572]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b16      	cmp	r3, #22
 80034aa:	d104      	bne.n	80034b6 <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034ac:	4b91      	ldr	r3, [pc, #580]	@ (80036f4 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fd fc0c 	bl	8000ccc <Set_Depth_to_CC_Mode_and_Value>
 80034b4:	e012      	b.n	80034dc <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80034b6:	4b8a      	ldr	r3, [pc, #552]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b17      	cmp	r3, #23
 80034be:	d104      	bne.n	80034ca <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034c0:	4b8c      	ldr	r3, [pc, #560]	@ (80036f4 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fd fc1c 	bl	8000d00 <Set_Symmetry_to_CC_Mode_and_Value>
 80034c8:	e008      	b.n	80034dc <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80034ca:	4b85      	ldr	r3, [pc, #532]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b18      	cmp	r3, #24
 80034d2:	d103      	bne.n	80034dc <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034d4:	4b87      	ldr	r3, [pc, #540]	@ (80036f4 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fd fc2c 	bl	8000d34 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80034dc:	4b88      	ldr	r3, [pc, #544]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80034e2:	4b7f      	ldr	r3, [pc, #508]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7fd fe5c 	bl	80011a2 <Clear_Data_Buffer>
 80034ea:	e289      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 80034ec:	4b84      	ldr	r3, [pc, #528]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80034f2:	4b7b      	ldr	r3, [pc, #492]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7fd fe54 	bl	80011a2 <Clear_Data_Buffer>
 80034fa:	e281      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 80034fc:	4b78      	ldr	r3, [pc, #480]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80034fe:	0018      	movs	r0, r3
 8003500:	f7fd fe4f 	bl	80011a2 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003504:	4a77      	ldr	r2, [pc, #476]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003506:	4b78      	ldr	r3, [pc, #480]	@ (80036e8 <UART2_RX_transfer_complete_callback+0xe40>)
 8003508:	0011      	movs	r1, r2
 800350a:	0018      	movs	r0, r3
 800350c:	f7fd fec9 	bl	80012a2 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003510:	4b72      	ldr	r3, [pc, #456]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003512:	0018      	movs	r0, r3
 8003514:	f7fd fd06 	bl	8000f24 <Is_PC_Status_Byte>
 8003518:	0003      	movs	r3, r0
 800351a:	2b01      	cmp	r3, #1
 800351c:	d131      	bne.n	8003582 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 800351e:	4b6f      	ldr	r3, [pc, #444]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b72      	ldr	r3, [pc, #456]	@ (80036f0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003526:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003528:	4b70      	ldr	r3, [pc, #448]	@ (80036ec <UART2_RX_transfer_complete_callback+0xe44>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4b6b      	ldr	r3, [pc, #428]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003530:	0011      	movs	r1, r2
 8003532:	0018      	movs	r0, r3
 8003534:	f7fd fde4 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003538:	0003      	movs	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10c      	bne.n	8003558 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 800353e:	4b67      	ldr	r3, [pc, #412]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	4b6e      	ldr	r3, [pc, #440]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 8003546:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003548:	2380      	movs	r3, #128	@ 0x80
 800354a:	005a      	lsls	r2, r3, #1
 800354c:	4b65      	ldr	r3, [pc, #404]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 800354e:	0011      	movs	r1, r2
 8003550:	0018      	movs	r0, r3
 8003552:	f002 fdd1 	bl	80060f8 <Set_Status_Bit>
 8003556:	e253      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003558:	4b62      	ldr	r3, [pc, #392]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 800355a:	0018      	movs	r0, r3
 800355c:	f7fd fe87 	bl	800126e <Is_OMNI_On>
 8003560:	0003      	movs	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d000      	beq.n	8003568 <UART2_RX_transfer_complete_callback+0xcc0>
 8003566:	e24b      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003568:	4b5c      	ldr	r3, [pc, #368]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b64      	ldr	r3, [pc, #400]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 8003570:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003572:	2380      	movs	r3, #128	@ 0x80
 8003574:	005a      	lsls	r2, r3, #1
 8003576:	4b5b      	ldr	r3, [pc, #364]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003578:	0011      	movs	r1, r2
 800357a:	0018      	movs	r0, r3
 800357c:	f002 fdbc 	bl	80060f8 <Set_Status_Bit>
 8003580:	e23e      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003582:	4b56      	ldr	r3, [pc, #344]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003584:	0018      	movs	r0, r3
 8003586:	f7fd fce9 	bl	8000f5c <Is_CC_Status_Byte>
 800358a:	0003      	movs	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d131      	bne.n	80035f4 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 8003590:	4b52      	ldr	r3, [pc, #328]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b56      	ldr	r3, [pc, #344]	@ (80036f0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003598:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800359a:	4b54      	ldr	r3, [pc, #336]	@ (80036ec <UART2_RX_transfer_complete_callback+0xe44>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	4b4e      	ldr	r3, [pc, #312]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 80035a2:	0011      	movs	r1, r2
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7fd fdab 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80035aa:	0003      	movs	r3, r0
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d10c      	bne.n	80035ca <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 80035b0:	4b4a      	ldr	r3, [pc, #296]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4b52      	ldr	r3, [pc, #328]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 80035b8:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80035ba:	2380      	movs	r3, #128	@ 0x80
 80035bc:	005a      	lsls	r2, r3, #1
 80035be:	4b49      	ldr	r3, [pc, #292]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035c0:	0011      	movs	r1, r2
 80035c2:	0018      	movs	r0, r3
 80035c4:	f002 fd98 	bl	80060f8 <Set_Status_Bit>
 80035c8:	e21a      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80035ca:	4b46      	ldr	r3, [pc, #280]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7fd fe4e 	bl	800126e <Is_OMNI_On>
 80035d2:	0003      	movs	r3, r0
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d000      	beq.n	80035da <UART2_RX_transfer_complete_callback+0xd32>
 80035d8:	e212      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80035da:	4b40      	ldr	r3, [pc, #256]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 80035e2:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	005a      	lsls	r2, r3, #1
 80035e8:	4b3e      	ldr	r3, [pc, #248]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035ea:	0011      	movs	r1, r2
 80035ec:	0018      	movs	r0, r3
 80035ee:	f002 fd83 	bl	80060f8 <Set_Status_Bit>
 80035f2:	e205      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80035f4:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7fd fd72 	bl	80010e0 <Is_Sysex_Start_Status_Byte>
 80035fc:	0003      	movs	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d000      	beq.n	8003604 <UART2_RX_transfer_complete_callback+0xd5c>
 8003602:	e1fd      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003604:	4b35      	ldr	r3, [pc, #212]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b3d      	ldr	r3, [pc, #244]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 800360c:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 800360e:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003614:	2380      	movs	r3, #128	@ 0x80
 8003616:	005a      	lsls	r2, r3, #1
 8003618:	4b32      	ldr	r3, [pc, #200]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 800361a:	0011      	movs	r1, r2
 800361c:	0018      	movs	r0, r3
 800361e:	f002 fd6b 	bl	80060f8 <Set_Status_Bit>
 8003622:	e1ed      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003624:	4b36      	ldr	r3, [pc, #216]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d100      	bne.n	8003630 <UART2_RX_transfer_complete_callback+0xd88>
 800362e:	e1e7      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	4b2b      	ldr	r3, [pc, #172]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003636:	0011      	movs	r1, r2
 8003638:	0018      	movs	r0, r3
 800363a:	f002 fd49 	bl	80060d0 <Get_Status_Bit>
 800363e:	0003      	movs	r3, r0
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10d      	bne.n	8003660 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8003644:	4b2e      	ldr	r3, [pc, #184]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 800364a:	4b25      	ldr	r3, [pc, #148]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 800364c:	0018      	movs	r0, r3
 800364e:	f7fd fda8 	bl	80011a2 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003652:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003654:	4b24      	ldr	r3, [pc, #144]	@ (80036e8 <UART2_RX_transfer_complete_callback+0xe40>)
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f7fd fe22 	bl	80012a2 <Reset_and_Stop_MIDI_Software_Timer>
 800365e:	e1cf      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003660:	4b1e      	ldr	r3, [pc, #120]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003662:	0018      	movs	r0, r3
 8003664:	f7fd fc45 	bl	8000ef2 <Is_Data_Byte>
 8003668:	0003      	movs	r3, r0
 800366a:	2b01      	cmp	r3, #1
 800366c:	d000      	beq.n	8003670 <UART2_RX_transfer_complete_callback+0xdc8>
 800366e:	e133      	b.n	80038d8 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 8003670:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 8003672:	0018      	movs	r0, r3
 8003674:	f7fd fc56 	bl	8000f24 <Is_PC_Status_Byte>
 8003678:	0003      	movs	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d144      	bne.n	8003708 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800367e:	4b18      	ldr	r3, [pc, #96]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 8003680:	0018      	movs	r0, r3
 8003682:	f7fd fd5e 	bl	8001142 <Is_Data_Buffer_Empty>
 8003686:	0003      	movs	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d000      	beq.n	800368e <UART2_RX_transfer_complete_callback+0xde6>
 800368c:	e1b8      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800368e:	4b13      	ldr	r3, [pc, #76]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 8003690:	2104      	movs	r1, #4
 8003692:	0018      	movs	r0, r3
 8003694:	f7fd fda3 	bl	80011de <Is_Program_Change_Data_Byte_In_Range>
 8003698:	0003      	movs	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10f      	bne.n	80036be <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 800369e:	f7fd fb63 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80036a2:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <UART2_RX_transfer_complete_callback+0xe34>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <UART2_RX_transfer_complete_callback+0xe5c>)
 80036ae:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80036b0:	f7fc ff36 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 80036b6:	2108      	movs	r1, #8
 80036b8:	0018      	movs	r0, r3
 80036ba:	f002 fd2f 	bl	800611c <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 80036be:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <UART2_RX_transfer_complete_callback+0xe38>)
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7fd fd6e 	bl	80011a2 <Clear_Data_Buffer>
							active_status_byte = 0;
 80036c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <UART2_RX_transfer_complete_callback+0xe58>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80036cc:	4a05      	ldr	r2, [pc, #20]	@ (80036e4 <UART2_RX_transfer_complete_callback+0xe3c>)
 80036ce:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <UART2_RX_transfer_complete_callback+0xe40>)
 80036d0:	0011      	movs	r1, r2
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7fd fde5 	bl	80012a2 <Reset_and_Stop_MIDI_Software_Timer>
 80036d8:	e192      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	200004dc 	.word	0x200004dc
 80036e0:	200004d0 	.word	0x200004d0
 80036e4:	20000c38 	.word	0x20000c38
 80036e8:	20000c40 	.word	0x20000c40
 80036ec:	200004ca 	.word	0x200004ca
 80036f0:	200004cc 	.word	0x200004cc
 80036f4:	200004d1 	.word	0x200004d1
 80036f8:	20000028 	.word	0x20000028
 80036fc:	20000c50 	.word	0x20000c50
 8003700:	200004cb 	.word	0x200004cb
 8003704:	200004bc 	.word	0x200004bc

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003708:	4bc4      	ldr	r3, [pc, #784]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7fd fc26 	bl	8000f5c <Is_CC_Status_Byte>
 8003710:	0003      	movs	r3, r0
 8003712:	2b01      	cmp	r3, #1
 8003714:	d000      	beq.n	8003718 <UART2_RX_transfer_complete_callback+0xe70>
 8003716:	e0d2      	b.n	80038be <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003718:	4bc1      	ldr	r3, [pc, #772]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 800371a:	0018      	movs	r0, r3
 800371c:	f7fd fd11 	bl	8001142 <Is_Data_Buffer_Empty>
 8003720:	0003      	movs	r3, r0
 8003722:	2b01      	cmp	r3, #1
 8003724:	d108      	bne.n	8003738 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003726:	4bbf      	ldr	r3, [pc, #764]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	4bbc      	ldr	r3, [pc, #752]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 800372e:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003730:	4bbd      	ldr	r3, [pc, #756]	@ (8003a28 <UART2_RX_transfer_complete_callback+0x1180>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e163      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003738:	4bba      	ldr	r3, [pc, #744]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4bb8      	ldr	r3, [pc, #736]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 8003740:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003742:	4aba      	ldr	r2, [pc, #744]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 8003744:	4bb8      	ldr	r3, [pc, #736]	@ (8003a28 <UART2_RX_transfer_complete_callback+0x1180>)
 8003746:	0011      	movs	r1, r2
 8003748:	0018      	movs	r0, r3
 800374a:	f7fd fdaa 	bl	80012a2 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800374e:	4bb7      	ldr	r3, [pc, #732]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 8003750:	2108      	movs	r1, #8
 8003752:	0018      	movs	r0, r3
 8003754:	f002 fce2 	bl	800611c <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003758:	4bb1      	ldr	r3, [pc, #708]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 800375a:	0018      	movs	r0, r3
 800375c:	f7fd fc1a 	bl	8000f94 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003760:	0003      	movs	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d14c      	bne.n	8003800 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003766:	4bb2      	ldr	r3, [pc, #712]	@ (8003a30 <UART2_RX_transfer_complete_callback+0x1188>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	4bab      	ldr	r3, [pc, #684]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 800376e:	0011      	movs	r1, r2
 8003770:	0018      	movs	r0, r3
 8003772:	f7fd fcc5 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003776:	0003      	movs	r3, r0
 8003778:	2b01      	cmp	r3, #1
 800377a:	d139      	bne.n	80037f0 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800377c:	4aad      	ldr	r2, [pc, #692]	@ (8003a34 <UART2_RX_transfer_complete_callback+0x118c>)
 800377e:	4ba8      	ldr	r3, [pc, #672]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f7fd fc65 	bl	8001052 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003788:	0003      	movs	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d130      	bne.n	80037f0 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 800378e:	4ba4      	ldr	r3, [pc, #656]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b79      	cmp	r3, #121	@ 0x79
 8003796:	d10b      	bne.n	80037b0 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 8003798:	4aa7      	ldr	r2, [pc, #668]	@ (8003a38 <UART2_RX_transfer_complete_callback+0x1190>)
 800379a:	4ba8      	ldr	r3, [pc, #672]	@ (8003a3c <UART2_RX_transfer_complete_callback+0x1194>)
 800379c:	0011      	movs	r1, r2
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fd fd9a 	bl	80012d8 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037a4:	4ba1      	ldr	r3, [pc, #644]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 80037a6:	2108      	movs	r1, #8
 80037a8:	0018      	movs	r0, r3
 80037aa:	f002 fcb7 	bl	800611c <Clear_Status_Bit>
 80037ae:	e01f      	b.n	80037f0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80037b0:	4b9b      	ldr	r3, [pc, #620]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b7a      	cmp	r3, #122	@ 0x7a
 80037b8:	d107      	bne.n	80037ca <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 80037ba:	f7fd fde7 	bl	800138c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037be:	4b9b      	ldr	r3, [pc, #620]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 80037c0:	2108      	movs	r1, #8
 80037c2:	0018      	movs	r0, r3
 80037c4:	f002 fcaa 	bl	800611c <Clear_Status_Bit>
 80037c8:	e012      	b.n	80037f0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80037ca:	4b95      	ldr	r3, [pc, #596]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 80037cc:	785b      	ldrb	r3, [r3, #1]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b7c      	cmp	r3, #124	@ 0x7c
 80037d2:	d104      	bne.n	80037de <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 80037d4:	4b95      	ldr	r3, [pc, #596]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7fd fe10 	bl	80013fc <Set_OMNI_Off>
 80037dc:	e008      	b.n	80037f0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 80037de:	4b90      	ldr	r3, [pc, #576]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b7d      	cmp	r3, #125	@ 0x7d
 80037e6:	d103      	bne.n	80037f0 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 80037e8:	4b90      	ldr	r3, [pc, #576]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7fd fe16 	bl	800141c <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 80037f0:	4b8a      	ldr	r3, [pc, #552]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80037f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7fd fcd2 	bl	80011a2 <Clear_Data_Buffer>
 80037fe:	e0ff      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003800:	4b87      	ldr	r3, [pc, #540]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 8003802:	0018      	movs	r0, r3
 8003804:	f7fd fbf2 	bl	8000fec <Is_Utilised_CC_First_Data_Byte>
 8003808:	0003      	movs	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d14f      	bne.n	80038ae <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 800380e:	4b88      	ldr	r3, [pc, #544]	@ (8003a30 <UART2_RX_transfer_complete_callback+0x1188>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	4b81      	ldr	r3, [pc, #516]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f7fd fc71 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800381e:	0003      	movs	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d006      	beq.n	8003832 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003824:	4b81      	ldr	r3, [pc, #516]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 8003826:	0018      	movs	r0, r3
 8003828:	f7fd fd21 	bl	800126e <Is_OMNI_On>
 800382c:	0003      	movs	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d135      	bne.n	800389e <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003832:	4b7b      	ldr	r3, [pc, #492]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b14      	cmp	r3, #20
 800383a:	d104      	bne.n	8003846 <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800383c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a34 <UART2_RX_transfer_complete_callback+0x118c>)
 800383e:	0018      	movs	r0, r3
 8003840:	f7fd fa10 	bl	8000c64 <Set_Waveshape_to_CC_Mode_and_Value>
 8003844:	e02b      	b.n	800389e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003846:	4b76      	ldr	r3, [pc, #472]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b15      	cmp	r3, #21
 800384e:	d109      	bne.n	8003864 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003850:	4b78      	ldr	r3, [pc, #480]	@ (8003a34 <UART2_RX_transfer_complete_callback+0x118c>)
 8003852:	0018      	movs	r0, r3
 8003854:	f7fd fa20 	bl	8000c98 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003858:	4b74      	ldr	r3, [pc, #464]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 800385a:	2108      	movs	r1, #8
 800385c:	0018      	movs	r0, r3
 800385e:	f002 fc5d 	bl	800611c <Clear_Status_Bit>
 8003862:	e01c      	b.n	800389e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003864:	4b6e      	ldr	r3, [pc, #440]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b16      	cmp	r3, #22
 800386c:	d104      	bne.n	8003878 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800386e:	4b71      	ldr	r3, [pc, #452]	@ (8003a34 <UART2_RX_transfer_complete_callback+0x118c>)
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd fa2b 	bl	8000ccc <Set_Depth_to_CC_Mode_and_Value>
 8003876:	e012      	b.n	800389e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003878:	4b69      	ldr	r3, [pc, #420]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b17      	cmp	r3, #23
 8003880:	d104      	bne.n	800388c <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003882:	4b6c      	ldr	r3, [pc, #432]	@ (8003a34 <UART2_RX_transfer_complete_callback+0x118c>)
 8003884:	0018      	movs	r0, r3
 8003886:	f7fd fa3b 	bl	8000d00 <Set_Symmetry_to_CC_Mode_and_Value>
 800388a:	e008      	b.n	800389e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 800388c:	4b64      	ldr	r3, [pc, #400]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b18      	cmp	r3, #24
 8003894:	d103      	bne.n	800389e <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003896:	4b67      	ldr	r3, [pc, #412]	@ (8003a34 <UART2_RX_transfer_complete_callback+0x118c>)
 8003898:	0018      	movs	r0, r3
 800389a:	f7fd fa4b 	bl	8000d34 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 800389e:	4b5f      	ldr	r3, [pc, #380]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80038a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 80038a6:	0018      	movs	r0, r3
 80038a8:	f7fd fc7b 	bl	80011a2 <Clear_Data_Buffer>
 80038ac:	e0a8      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 80038ae:	4b5b      	ldr	r3, [pc, #364]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80038b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7fd fc73 	bl	80011a2 <Clear_Data_Buffer>
 80038bc:	e0a0      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 80038be:	4b57      	ldr	r3, [pc, #348]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fd fc0d 	bl	80010e0 <Is_Sysex_Start_Status_Byte>
 80038c6:	0003      	movs	r3, r0
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d000      	beq.n	80038ce <UART2_RX_transfer_complete_callback+0x1026>
 80038cc:	e098      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80038ce:	4b54      	ldr	r3, [pc, #336]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7fd fc36 	bl	8001142 <Is_Data_Buffer_Empty>
 80038d6:	e093      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 80038d8:	4b51      	ldr	r3, [pc, #324]	@ (8003a20 <UART2_RX_transfer_complete_callback+0x1178>)
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd fc61 	bl	80011a2 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80038e0:	4a52      	ldr	r2, [pc, #328]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 80038e2:	4b51      	ldr	r3, [pc, #324]	@ (8003a28 <UART2_RX_transfer_complete_callback+0x1180>)
 80038e4:	0011      	movs	r1, r2
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7fd fcdb 	bl	80012a2 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 80038ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fd fb18 	bl	8000f24 <Is_PC_Status_Byte>
 80038f4:	0003      	movs	r3, r0
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d130      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 80038fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	4b4f      	ldr	r3, [pc, #316]	@ (8003a40 <UART2_RX_transfer_complete_callback+0x1198>)
 8003902:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003904:	4b4a      	ldr	r3, [pc, #296]	@ (8003a30 <UART2_RX_transfer_complete_callback+0x1188>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b46      	ldr	r3, [pc, #280]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 800390c:	0011      	movs	r1, r2
 800390e:	0018      	movs	r0, r3
 8003910:	f7fd fbf6 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003914:	0003      	movs	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10c      	bne.n	8003934 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 800391a:	4b42      	ldr	r3, [pc, #264]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b3e      	ldr	r3, [pc, #248]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 8003922:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	005a      	lsls	r2, r3, #1
 8003928:	4b40      	ldr	r3, [pc, #256]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 800392a:	0011      	movs	r1, r2
 800392c:	0018      	movs	r0, r3
 800392e:	f002 fbe3 	bl	80060f8 <Set_Status_Bit>
 8003932:	e065      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003934:	4b3d      	ldr	r3, [pc, #244]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 8003936:	0018      	movs	r0, r3
 8003938:	f7fd fc99 	bl	800126e <Is_OMNI_On>
 800393c:	0003      	movs	r3, r0
 800393e:	2b01      	cmp	r3, #1
 8003940:	d15e      	bne.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003942:	4b38      	ldr	r3, [pc, #224]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	4b34      	ldr	r3, [pc, #208]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 800394a:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800394c:	2380      	movs	r3, #128	@ 0x80
 800394e:	005a      	lsls	r2, r3, #1
 8003950:	4b36      	ldr	r3, [pc, #216]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 8003952:	0011      	movs	r1, r2
 8003954:	0018      	movs	r0, r3
 8003956:	f002 fbcf 	bl	80060f8 <Set_Status_Bit>
 800395a:	e051      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 800395c:	4b31      	ldr	r3, [pc, #196]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 800395e:	0018      	movs	r0, r3
 8003960:	f7fd fafc 	bl	8000f5c <Is_CC_Status_Byte>
 8003964:	0003      	movs	r3, r0
 8003966:	2b01      	cmp	r3, #1
 8003968:	d130      	bne.n	80039cc <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 800396a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	4b33      	ldr	r3, [pc, #204]	@ (8003a40 <UART2_RX_transfer_complete_callback+0x1198>)
 8003972:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003974:	4b2e      	ldr	r3, [pc, #184]	@ (8003a30 <UART2_RX_transfer_complete_callback+0x1188>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 800397c:	0011      	movs	r1, r2
 800397e:	0018      	movs	r0, r3
 8003980:	f7fd fbbe 	bl	8001100 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003984:	0003      	movs	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10c      	bne.n	80039a4 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 800398a:	4b26      	ldr	r3, [pc, #152]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b2da      	uxtb	r2, r3
 8003990:	4b22      	ldr	r3, [pc, #136]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 8003992:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	005a      	lsls	r2, r3, #1
 8003998:	4b24      	ldr	r3, [pc, #144]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 800399a:	0011      	movs	r1, r2
 800399c:	0018      	movs	r0, r3
 800399e:	f002 fbab 	bl	80060f8 <Set_Status_Bit>
 80039a2:	e02d      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80039a4:	4b21      	ldr	r3, [pc, #132]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 80039a6:	0018      	movs	r0, r3
 80039a8:	f7fd fc61 	bl	800126e <Is_OMNI_On>
 80039ac:	0003      	movs	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d126      	bne.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80039b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	4b18      	ldr	r3, [pc, #96]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 80039ba:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	005a      	lsls	r2, r3, #1
 80039c0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 80039c2:	0011      	movs	r1, r2
 80039c4:	0018      	movs	r0, r3
 80039c6:	f002 fb97 	bl	80060f8 <Set_Status_Bit>
 80039ca:	e019      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80039cc:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7fd fb86 	bl	80010e0 <Is_Sysex_Start_Status_Byte>
 80039d4:	0003      	movs	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d112      	bne.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a1c <UART2_RX_transfer_complete_callback+0x1174>)
 80039e2:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 80039e4:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <UART2_RX_transfer_complete_callback+0x1198>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	005a      	lsls	r2, r3, #1
 80039ee:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <UART2_RX_transfer_complete_callback+0x1184>)
 80039f0:	0011      	movs	r1, r2
 80039f2:	0018      	movs	r0, r3
 80039f4:	f002 fb80 	bl	80060f8 <Set_Status_Bit>
 80039f8:	e002      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	e000      	b.n	8003a00 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80039fe:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003a00:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003a06:	4907      	ldr	r1, [pc, #28]	@ (8003a24 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a08:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <UART2_RX_transfer_complete_callback+0x119c>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f008 fa75 	bl	800befc <HAL_UART_Receive_DMA>
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	200004cb 	.word	0x200004cb
 8003a20:	200004d0 	.word	0x200004d0
 8003a24:	200004dc 	.word	0x200004dc
 8003a28:	20000c40 	.word	0x20000c40
 8003a2c:	20000c38 	.word	0x20000c38
 8003a30:	200004ca 	.word	0x200004ca
 8003a34:	200004d1 	.word	0x200004d1
 8003a38:	20000028 	.word	0x20000028
 8003a3c:	20000c50 	.word	0x20000c50
 8003a40:	200004cc 	.word	0x200004cc
 8003a44:	20000a48 	.word	0x20000a48

08003a48 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	0002      	movs	r2, r0
 8003a50:	1dbb      	adds	r3, r7, #6
 8003a52:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8003a54:	1dbb      	adds	r3, r7, #6
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d117      	bne.n	8003a8c <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d004      	beq.n	8003a70 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 8003a66:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b07      	cmp	r3, #7
 8003a6e:	d10d      	bne.n	8003a8c <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	0099      	lsls	r1, r3, #2
 8003a74:	23a0      	movs	r3, #160	@ 0xa0
 8003a76:	05db      	lsls	r3, r3, #23
 8003a78:	2201      	movs	r2, #1
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f004 fbeb 	bl	8008256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	2140      	movs	r1, #64	@ 0x40
 8003a86:	0018      	movs	r0, r3
 8003a88:	f004 fbe5 	bl	8008256 <HAL_GPIO_WritePin>
		}
	}
}
 8003a8c:	46c0      	nop			@ (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000430 	.word	0x20000430
 8003a98:	50000800 	.word	0x50000800

08003a9c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	1dbb      	adds	r3, r7, #6
 8003aa6:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003aa8:	1dbb      	adds	r3, r7, #6
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	2b80      	cmp	r3, #128	@ 0x80
 8003aae:	d000      	beq.n	8003ab2 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003ab0:	e0dd      	b.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003ab2:	4b71      	ldr	r3, [pc, #452]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d114      	bne.n	8003ae6 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	0099      	lsls	r1, r3, #2
 8003ac0:	23a0      	movs	r3, #160	@ 0xa0
 8003ac2:	05db      	lsls	r3, r3, #23
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f004 fbc5 	bl	8008256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003acc:	4b6b      	ldr	r3, [pc, #428]	@ (8003c7c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2140      	movs	r1, #64	@ 0x40
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f004 fbbf 	bl	8008256 <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003ad8:	4b67      	ldr	r3, [pc, #412]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003ade:	4b66      	ldr	r3, [pc, #408]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003ae4:	e0c3      	b.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003ae6:	4b64      	ldr	r3, [pc, #400]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d114      	bne.n	8003b1a <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	23a0      	movs	r3, #160	@ 0xa0
 8003af6:	05db      	lsls	r3, r3, #23
 8003af8:	2200      	movs	r2, #0
 8003afa:	0018      	movs	r0, r3
 8003afc:	f004 fbab 	bl	8008256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b00:	4b5e      	ldr	r3, [pc, #376]	@ (8003c7c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f004 fba5 	bl	8008256 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b0e:	2203      	movs	r2, #3
 8003b10:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b12:	4b59      	ldr	r3, [pc, #356]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	701a      	strb	r2, [r3, #0]
}
 8003b18:	e0a9      	b.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003b1a:	4b57      	ldr	r3, [pc, #348]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d114      	bne.n	8003b4e <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	23a0      	movs	r3, #160	@ 0xa0
 8003b2a:	05db      	lsls	r3, r3, #23
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f004 fb91 	bl	8008256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b34:	4b51      	ldr	r3, [pc, #324]	@ (8003c7c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	2140      	movs	r1, #64	@ 0x40
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f004 fb8b 	bl	8008256 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003b40:	4b4d      	ldr	r3, [pc, #308]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b42:	2202      	movs	r2, #2
 8003b44:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b46:	4b4c      	ldr	r3, [pc, #304]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b48:	2207      	movs	r2, #7
 8003b4a:	701a      	strb	r2, [r3, #0]
}
 8003b4c:	e08f      	b.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d12b      	bne.n	8003bb0 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003b58:	4b49      	ldr	r3, [pc, #292]	@ (8003c80 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d126      	bne.n	8003bb0 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003b62:	4b48      	ldr	r3, [pc, #288]	@ (8003c84 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b64:	2120      	movs	r1, #32
 8003b66:	0018      	movs	r0, r3
 8003b68:	f002 fab2 	bl	80060d0 <Get_Status_Bit>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d11e      	bne.n	8003bb0 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b72:	2380      	movs	r3, #128	@ 0x80
 8003b74:	0099      	lsls	r1, r3, #2
 8003b76:	23a0      	movs	r3, #160	@ 0xa0
 8003b78:	05db      	lsls	r3, r3, #23
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f004 fb6a 	bl	8008256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b82:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	2140      	movs	r1, #64	@ 0x40
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f004 fb64 	bl	8008256 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b90:	2204      	movs	r2, #4
 8003b92:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b94:	4b38      	ldr	r3, [pc, #224]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b96:	2207      	movs	r2, #7
 8003b98:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c84 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f002 fabc 	bl	800611c <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ba4:	4b37      	ldr	r3, [pc, #220]	@ (8003c84 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003ba6:	2140      	movs	r1, #64	@ 0x40
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f002 fab7 	bl	800611c <Clear_Status_Bit>
 8003bae:	e05e      	b.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003bb0:	4b31      	ldr	r3, [pc, #196]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d12b      	bne.n	8003c12 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003bba:	4b31      	ldr	r3, [pc, #196]	@ (8003c80 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d126      	bne.n	8003c12 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8003c84 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f002 fa81 	bl	80060d0 <Get_Status_Bit>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d11e      	bne.n	8003c12 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	0099      	lsls	r1, r3, #2
 8003bd8:	23a0      	movs	r3, #160	@ 0xa0
 8003bda:	05db      	lsls	r3, r3, #23
 8003bdc:	2200      	movs	r2, #0
 8003bde:	0018      	movs	r0, r3
 8003be0:	f004 fb39 	bl	8008256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003be4:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	2140      	movs	r1, #64	@ 0x40
 8003bea:	0018      	movs	r0, r3
 8003bec:	f004 fb33 	bl	8008256 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003bf0:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003bf6:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003bfc:	4b21      	ldr	r3, [pc, #132]	@ (8003c84 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bfe:	2120      	movs	r1, #32
 8003c00:	0018      	movs	r0, r3
 8003c02:	f002 fa8b 	bl	800611c <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003c06:	4b1f      	ldr	r3, [pc, #124]	@ (8003c84 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003c08:	2140      	movs	r1, #64	@ 0x40
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f002 fa86 	bl	800611c <Clear_Status_Bit>
 8003c10:	e02d      	b.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003c12:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b07      	cmp	r3, #7
 8003c1a:	d114      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	23a0      	movs	r3, #160	@ 0xa0
 8003c22:	05db      	lsls	r3, r3, #23
 8003c24:	2200      	movs	r2, #0
 8003c26:	0018      	movs	r0, r3
 8003c28:	f004 fb15 	bl	8008256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c2c:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	2140      	movs	r1, #64	@ 0x40
 8003c32:	0018      	movs	r0, r3
 8003c34:	f004 fb0f 	bl	8008256 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c3a:	2207      	movs	r2, #7
 8003c3c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c40:	2206      	movs	r2, #6
 8003c42:	701a      	strb	r2, [r3, #0]
}
 8003c44:	e013      	b.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003c46:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d10e      	bne.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	0099      	lsls	r1, r3, #2
 8003c54:	23a0      	movs	r3, #160	@ 0xa0
 8003c56:	05db      	lsls	r3, r3, #23
 8003c58:	2200      	movs	r2, #0
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f004 fafb 	bl	8008256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	2140      	movs	r1, #64	@ 0x40
 8003c66:	0018      	movs	r0, r3
 8003c68:	f004 faf5 	bl	8008256 <HAL_GPIO_WritePin>
}
 8003c6c:	e7ff      	b.n	8003c6e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b002      	add	sp, #8
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	20000430 	.word	0x20000430
 8003c7c:	50000800 	.word	0x50000800
 8003c80:	20000444 	.word	0x20000444
 8003c84:	20000c38 	.word	0x20000c38

08003c88 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003c88:	b5b0      	push	{r4, r5, r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};
	static volatile enum Validate preset_save_mode_is_inactive = YES;

	//CHECK IF NEED TAP_PENDING TRANSITION

	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003c90:	4bca      	ldr	r3, [pc, #808]	@ (8003fbc <LPTIM1_callback+0x334>)
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7fd fd02 	bl	800169c <Check_Tap_Tempo_Switch_State>

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003c98:	250f      	movs	r5, #15
 8003c9a:	197c      	adds	r4, r7, r5
 8003c9c:	2380      	movs	r3, #128	@ 0x80
 8003c9e:	00da      	lsls	r2, r3, #3
 8003ca0:	23a0      	movs	r3, #160	@ 0xa0
 8003ca2:	05db      	lsls	r3, r3, #23
 8003ca4:	0011      	movs	r1, r2
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f004 fab8 	bl	800821c <HAL_GPIO_ReadPin>
 8003cac:	0003      	movs	r3, r0
 8003cae:	7023      	strb	r3, [r4, #0]

	if(preset_save_mode_is_inactive == YES){
 8003cb0:	4bc3      	ldr	r3, [pc, #780]	@ (8003fc0 <LPTIM1_callback+0x338>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d000      	beq.n	8003cbc <LPTIM1_callback+0x34>
 8003cba:	e1a2      	b.n	8004002 <LPTIM1_callback+0x37a>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003cbc:	4bc1      	ldr	r3, [pc, #772]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10a      	bne.n	8003cdc <LPTIM1_callback+0x54>
 8003cc6:	197b      	adds	r3, r7, r5
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <LPTIM1_callback+0x54>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003cce:	4bbd      	ldr	r3, [pc, #756]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003cd4:	4bbb      	ldr	r3, [pc, #748]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	705a      	strb	r2, [r3, #1]
 8003cda:	e070      	b.n	8003dbe <LPTIM1_callback+0x136>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003cdc:	4bb9      	ldr	r3, [pc, #740]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d10b      	bne.n	8003cfe <LPTIM1_callback+0x76>
 8003ce6:	230f      	movs	r3, #15
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <LPTIM1_callback+0x76>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003cf0:	4bb4      	ldr	r3, [pc, #720]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003cf2:	2205      	movs	r2, #5
 8003cf4:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003cf6:	4bb3      	ldr	r3, [pc, #716]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	705a      	strb	r2, [r3, #1]
 8003cfc:	e05f      	b.n	8003dbe <LPTIM1_callback+0x136>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003cfe:	4bb1      	ldr	r3, [pc, #708]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d10b      	bne.n	8003d20 <LPTIM1_callback+0x98>
 8003d08:	230f      	movs	r3, #15
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <LPTIM1_callback+0x98>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d12:	4bac      	ldr	r3, [pc, #688]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003d14:	2205      	movs	r2, #5
 8003d16:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003d18:	4baa      	ldr	r3, [pc, #680]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	705a      	strb	r2, [r3, #1]
 8003d1e:	e04e      	b.n	8003dbe <LPTIM1_callback+0x136>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003d20:	4ba8      	ldr	r3, [pc, #672]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d122      	bne.n	8003d70 <LPTIM1_callback+0xe8>
 8003d2a:	230f      	movs	r3, #15
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11d      	bne.n	8003d70 <LPTIM1_callback+0xe8>
 8003d34:	4ba4      	ldr	r3, [pc, #656]	@ (8003fc8 <LPTIM1_callback+0x340>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d118      	bne.n	8003d70 <LPTIM1_callback+0xe8>
 8003d3e:	4ba3      	ldr	r3, [pc, #652]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003d40:	2120      	movs	r1, #32
 8003d42:	0018      	movs	r0, r3
 8003d44:	f002 f9c4 	bl	80060d0 <Get_Status_Bit>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d110      	bne.n	8003d70 <LPTIM1_callback+0xe8>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d4e:	4b9d      	ldr	r3, [pc, #628]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003d50:	2205      	movs	r2, #5
 8003d52:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003d54:	4b9b      	ldr	r3, [pc, #620]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003d56:	2206      	movs	r2, #6
 8003d58:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003d5c:	2120      	movs	r1, #32
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f002 f9dc 	bl	800611c <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003d64:	4b99      	ldr	r3, [pc, #612]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003d66:	2140      	movs	r1, #64	@ 0x40
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f002 f9d7 	bl	800611c <Clear_Status_Bit>
 8003d6e:	e026      	b.n	8003dbe <LPTIM1_callback+0x136>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003d70:	4b94      	ldr	r3, [pc, #592]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d121      	bne.n	8003dbe <LPTIM1_callback+0x136>
 8003d7a:	230f      	movs	r3, #15
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11c      	bne.n	8003dbe <LPTIM1_callback+0x136>
 8003d84:	4b90      	ldr	r3, [pc, #576]	@ (8003fc8 <LPTIM1_callback+0x340>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d117      	bne.n	8003dbe <LPTIM1_callback+0x136>
 8003d8e:	4b8f      	ldr	r3, [pc, #572]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003d90:	2120      	movs	r1, #32
 8003d92:	0018      	movs	r0, r3
 8003d94:	f002 f99c 	bl	80060d0 <Get_Status_Bit>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10f      	bne.n	8003dbe <LPTIM1_callback+0x136>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d9e:	4b89      	ldr	r3, [pc, #548]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003da0:	2205      	movs	r2, #5
 8003da2:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003da4:	4b87      	ldr	r3, [pc, #540]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003da6:	2208      	movs	r2, #8
 8003da8:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003daa:	4b88      	ldr	r3, [pc, #544]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003dac:	2120      	movs	r1, #32
 8003dae:	0018      	movs	r0, r3
 8003db0:	f002 f9b4 	bl	800611c <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003db4:	4b85      	ldr	r3, [pc, #532]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003db6:	2140      	movs	r1, #64	@ 0x40
 8003db8:	0018      	movs	r0, r3
 8003dba:	f002 f9af 	bl	800611c <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003dbe:	4b81      	ldr	r3, [pc, #516]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b05      	cmp	r3, #5
 8003dc6:	d004      	beq.n	8003dd2 <LPTIM1_callback+0x14a>
 8003dc8:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d11a      	bne.n	8003e08 <LPTIM1_callback+0x180>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8003fbc <LPTIM1_callback+0x334>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d108      	bne.n	8003dee <LPTIM1_callback+0x166>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	0099      	lsls	r1, r3, #2
 8003de0:	23a0      	movs	r3, #160	@ 0xa0
 8003de2:	05db      	lsls	r3, r3, #23
 8003de4:	2200      	movs	r2, #0
 8003de6:	0018      	movs	r0, r3
 8003de8:	f004 fa35 	bl	8008256 <HAL_GPIO_WritePin>
 8003dec:	e00c      	b.n	8003e08 <LPTIM1_callback+0x180>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003dee:	4b73      	ldr	r3, [pc, #460]	@ (8003fbc <LPTIM1_callback+0x334>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <LPTIM1_callback+0x180>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003df8:	2380      	movs	r3, #128	@ 0x80
 8003dfa:	0099      	lsls	r1, r3, #2
 8003dfc:	23a0      	movs	r3, #160	@ 0xa0
 8003dfe:	05db      	lsls	r3, r3, #23
 8003e00:	2201      	movs	r2, #1
 8003e02:	0018      	movs	r0, r3
 8003e04:	f004 fa27 	bl	8008256 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	011a      	lsls	r2, r3, #4
 8003e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003e0e:	0011      	movs	r1, r2
 8003e10:	0018      	movs	r0, r3
 8003e12:	f002 f95d 	bl	80060d0 <Get_Status_Bit>
 8003e16:	0003      	movs	r3, r0
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d000      	beq.n	8003e1e <LPTIM1_callback+0x196>
 8003e1c:	e0c0      	b.n	8003fa0 <LPTIM1_callback+0x318>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	011a      	lsls	r2, r3, #4
 8003e22:	4b6a      	ldr	r3, [pc, #424]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003e24:	0011      	movs	r1, r2
 8003e26:	0018      	movs	r0, r3
 8003e28:	f002 f978 	bl	800611c <Clear_Status_Bit>

			pots_counter = 0;
 8003e2c:	4b68      	ldr	r3, [pc, #416]	@ (8003fd0 <LPTIM1_callback+0x348>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003e32:	4b64      	ldr	r3, [pc, #400]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d004      	beq.n	8003e46 <LPTIM1_callback+0x1be>
 8003e3c:	4b61      	ldr	r3, [pc, #388]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d105      	bne.n	8003e52 <LPTIM1_callback+0x1ca>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e46:	4b63      	ldr	r3, [pc, #396]	@ (8003fd4 <LPTIM1_callback+0x34c>)
 8003e48:	2101      	movs	r1, #1
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f7fd fb06 	bl	800145c <Pot_Check>
 8003e50:	e069      	b.n	8003f26 <LPTIM1_callback+0x29e>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e52:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d117      	bne.n	8003e8c <LPTIM1_callback+0x204>
 8003e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fc8 <LPTIM1_callback+0x340>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d112      	bne.n	8003e8c <LPTIM1_callback+0x204>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e66:	4b59      	ldr	r3, [pc, #356]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003e68:	2140      	movs	r1, #64	@ 0x40
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f002 f944 	bl	80060f8 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e70:	4b56      	ldr	r3, [pc, #344]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003e72:	2120      	movs	r1, #32
 8003e74:	0018      	movs	r0, r3
 8003e76:	f002 f92b 	bl	80060d0 <Get_Status_Bit>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d152      	bne.n	8003f26 <LPTIM1_callback+0x29e>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e80:	4b54      	ldr	r3, [pc, #336]	@ (8003fd4 <LPTIM1_callback+0x34c>)
 8003e82:	2101      	movs	r1, #1
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7fd fae9 	bl	800145c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e8a:	e04c      	b.n	8003f26 <LPTIM1_callback+0x29e>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d12b      	bne.n	8003eee <LPTIM1_callback+0x266>
 8003e96:	4b4c      	ldr	r3, [pc, #304]	@ (8003fc8 <LPTIM1_callback+0x340>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d126      	bne.n	8003eee <LPTIM1_callback+0x266>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ea0:	4b4a      	ldr	r3, [pc, #296]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003ea2:	2140      	movs	r1, #64	@ 0x40
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f002 f927 	bl	80060f8 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003eaa:	4b48      	ldr	r3, [pc, #288]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003eac:	2120      	movs	r1, #32
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f002 f90e 	bl	80060d0 <Get_Status_Bit>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d135      	bne.n	8003f26 <LPTIM1_callback+0x29e>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	0099      	lsls	r1, r3, #2
 8003ebe:	23a0      	movs	r3, #160	@ 0xa0
 8003ec0:	05db      	lsls	r3, r3, #23
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f004 f9c6 	bl	8008256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003eca:	4b43      	ldr	r3, [pc, #268]	@ (8003fd8 <LPTIM1_callback+0x350>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2140      	movs	r1, #64	@ 0x40
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f004 f9c0 	bl	8008256 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 8003ed6:	4b41      	ldr	r3, [pc, #260]	@ (8003fdc <LPTIM1_callback+0x354>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 8003edc:	4b40      	ldr	r3, [pc, #256]	@ (8003fe0 <LPTIM1_callback+0x358>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd4 <LPTIM1_callback+0x34c>)
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fd fab8 	bl	800145c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003eec:	e01b      	b.n	8003f26 <LPTIM1_callback+0x29e>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003eee:	4b35      	ldr	r3, [pc, #212]	@ (8003fc4 <LPTIM1_callback+0x33c>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d116      	bne.n	8003f26 <LPTIM1_callback+0x29e>
 8003ef8:	4b33      	ldr	r3, [pc, #204]	@ (8003fc8 <LPTIM1_callback+0x340>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d111      	bne.n	8003f26 <LPTIM1_callback+0x29e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003f02:	4b32      	ldr	r3, [pc, #200]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003f04:	2140      	movs	r1, #64	@ 0x40
 8003f06:	0018      	movs	r0, r3
 8003f08:	f002 f8f6 	bl	80060f8 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003f0e:	2120      	movs	r1, #32
 8003f10:	0018      	movs	r0, r3
 8003f12:	f002 f8dd 	bl	80060d0 <Get_Status_Bit>
 8003f16:	0003      	movs	r3, r0
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d104      	bne.n	8003f26 <LPTIM1_callback+0x29e>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd4 <LPTIM1_callback+0x34c>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7fd fa9b 	bl	800145c <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003f26:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe4 <LPTIM1_callback+0x35c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d004      	beq.n	8003f3a <LPTIM1_callback+0x2b2>
 8003f30:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <LPTIM1_callback+0x35c>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d104      	bne.n	8003f44 <LPTIM1_callback+0x2bc>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003f3a:	4b26      	ldr	r3, [pc, #152]	@ (8003fd4 <LPTIM1_callback+0x34c>)
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f7fd fa8c 	bl	800145c <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003f44:	4b28      	ldr	r3, [pc, #160]	@ (8003fe8 <LPTIM1_callback+0x360>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d004      	beq.n	8003f58 <LPTIM1_callback+0x2d0>
 8003f4e:	4b26      	ldr	r3, [pc, #152]	@ (8003fe8 <LPTIM1_callback+0x360>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d104      	bne.n	8003f62 <LPTIM1_callback+0x2da>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003f58:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <LPTIM1_callback+0x34c>)
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fd fa7d 	bl	800145c <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003f62:	4b22      	ldr	r3, [pc, #136]	@ (8003fec <LPTIM1_callback+0x364>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d004      	beq.n	8003f76 <LPTIM1_callback+0x2ee>
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fec <LPTIM1_callback+0x364>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d104      	bne.n	8003f80 <LPTIM1_callback+0x2f8>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003f76:	4b17      	ldr	r3, [pc, #92]	@ (8003fd4 <LPTIM1_callback+0x34c>)
 8003f78:	2103      	movs	r1, #3
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7fd fa6e 	bl	800145c <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003f80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <LPTIM1_callback+0x368>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d004      	beq.n	8003f94 <LPTIM1_callback+0x30c>
 8003f8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <LPTIM1_callback+0x368>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d136      	bne.n	8004002 <LPTIM1_callback+0x37a>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 8003f94:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <LPTIM1_callback+0x34c>)
 8003f96:	2104      	movs	r1, #4
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fd fa5f 	bl	800145c <Pot_Check>
 8003f9e:	e030      	b.n	8004002 <LPTIM1_callback+0x37a>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <LPTIM1_callback+0x348>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d124      	bne.n	8003ff4 <LPTIM1_callback+0x36c>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003faa:	2380      	movs	r3, #128	@ 0x80
 8003fac:	011a      	lsls	r2, r3, #4
 8003fae:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <LPTIM1_callback+0x344>)
 8003fb0:	0011      	movs	r1, r2
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f002 f8a0 	bl	80060f8 <Set_Status_Bit>
 8003fb8:	e023      	b.n	8004002 <LPTIM1_callback+0x37a>
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	20000c28 	.word	0x20000c28
 8003fc0:	20000025 	.word	0x20000025
 8003fc4:	20000430 	.word	0x20000430
 8003fc8:	20000444 	.word	0x20000444
 8003fcc:	20000c38 	.word	0x20000c38
 8003fd0:	200004e2 	.word	0x200004e2
 8003fd4:	20000c44 	.word	0x20000c44
 8003fd8:	50000800 	.word	0x50000800
 8003fdc:	20000ce0 	.word	0x20000ce0
 8003fe0:	20000c36 	.word	0x20000c36
 8003fe4:	20000438 	.word	0x20000438
 8003fe8:	20000434 	.word	0x20000434
 8003fec:	2000043c 	.word	0x2000043c
 8003ff0:	20000440 	.word	0x20000440
			}
			else{

				pots_counter++;
 8003ff4:	4b55      	ldr	r3, [pc, #340]	@ (800414c <LPTIM1_callback+0x4c4>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4b53      	ldr	r3, [pc, #332]	@ (800414c <LPTIM1_callback+0x4c4>)
 8004000:	701a      	strb	r2, [r3, #0]
	//CHECK IF TAP TEMPO HELD DOWN - PRESET SAVE MODE

	static uint32_t depressed_num = 0;
	static enum Preset_Selected preset = PRESET_ONE;

	if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <LPTIM1_callback+0x4c8>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d161      	bne.n	80040d0 <LPTIM1_callback+0x448>

		if(depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT){
 800400c:	4b51      	ldr	r3, [pc, #324]	@ (8004154 <LPTIM1_callback+0x4cc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b31      	cmp	r3, #49	@ 0x31
 8004012:	d805      	bhi.n	8004020 <LPTIM1_callback+0x398>

			depressed_num++;
 8004014:	4b4f      	ldr	r3, [pc, #316]	@ (8004154 <LPTIM1_callback+0x4cc>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	4b4e      	ldr	r3, [pc, #312]	@ (8004154 <LPTIM1_callback+0x4cc>)
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e08a      	b.n	8004136 <LPTIM1_callback+0x4ae>
		}
		else if(depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT){
 8004020:	4b4c      	ldr	r3, [pc, #304]	@ (8004154 <LPTIM1_callback+0x4cc>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	23fa      	movs	r3, #250	@ 0xfa
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	429a      	cmp	r2, r3
 800402a:	d205      	bcs.n	8004038 <LPTIM1_callback+0x3b0>

			depressed_num++;
 800402c:	4b49      	ldr	r3, [pc, #292]	@ (8004154 <LPTIM1_callback+0x4cc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	4b48      	ldr	r3, [pc, #288]	@ (8004154 <LPTIM1_callback+0x4cc>)
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e07e      	b.n	8004136 <LPTIM1_callback+0x4ae>
		}
		else{

			preset_save_mode_is_inactive = NO;
 8004038:	4b47      	ldr	r3, [pc, #284]	@ (8004158 <LPTIM1_callback+0x4d0>)
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]

			depressed_num = 0;
 800403e:	4b45      	ldr	r3, [pc, #276]	@ (8004154 <LPTIM1_callback+0x4cc>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

			if(preset == PRESET_ONE){
 8004044:	4b45      	ldr	r3, [pc, #276]	@ (800415c <LPTIM1_callback+0x4d4>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d108      	bne.n	800405e <LPTIM1_callback+0x3d6>

				set_LED_to_state(&LED_fsm, LED_ONE_BLINK);
 800404c:	4b44      	ldr	r3, [pc, #272]	@ (8004160 <LPTIM1_callback+0x4d8>)
 800404e:	2103      	movs	r1, #3
 8004050:	0018      	movs	r0, r3
 8004052:	f7fc fee7 	bl	8000e24 <set_LED_to_state>
				preset = PRESET_TWO;
 8004056:	4b41      	ldr	r3, [pc, #260]	@ (800415c <LPTIM1_callback+0x4d4>)
 8004058:	2202      	movs	r2, #2
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e025      	b.n	80040aa <LPTIM1_callback+0x422>
			}
			else if(preset == PRESET_TWO){
 800405e:	4b3f      	ldr	r3, [pc, #252]	@ (800415c <LPTIM1_callback+0x4d4>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d108      	bne.n	8004078 <LPTIM1_callback+0x3f0>

				set_LED_to_state(&LED_fsm, LED_TWO_BLINK);
 8004066:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <LPTIM1_callback+0x4d8>)
 8004068:	2104      	movs	r1, #4
 800406a:	0018      	movs	r0, r3
 800406c:	f7fc feda 	bl	8000e24 <set_LED_to_state>
				preset = PRESET_THREE;
 8004070:	4b3a      	ldr	r3, [pc, #232]	@ (800415c <LPTIM1_callback+0x4d4>)
 8004072:	2203      	movs	r2, #3
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e018      	b.n	80040aa <LPTIM1_callback+0x422>
			}
			else if(preset == PRESET_THREE){
 8004078:	4b38      	ldr	r3, [pc, #224]	@ (800415c <LPTIM1_callback+0x4d4>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b03      	cmp	r3, #3
 800407e:	d108      	bne.n	8004092 <LPTIM1_callback+0x40a>

				set_LED_to_state(&LED_fsm, LED_THREE_BLINK);
 8004080:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <LPTIM1_callback+0x4d8>)
 8004082:	2105      	movs	r1, #5
 8004084:	0018      	movs	r0, r3
 8004086:	f7fc fecd 	bl	8000e24 <set_LED_to_state>
				preset = PRESET_FOUR;
 800408a:	4b34      	ldr	r3, [pc, #208]	@ (800415c <LPTIM1_callback+0x4d4>)
 800408c:	2204      	movs	r2, #4
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e00b      	b.n	80040aa <LPTIM1_callback+0x422>
			}
			else if(preset == PRESET_FOUR){
 8004092:	4b32      	ldr	r3, [pc, #200]	@ (800415c <LPTIM1_callback+0x4d4>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b04      	cmp	r3, #4
 8004098:	d107      	bne.n	80040aa <LPTIM1_callback+0x422>

				set_LED_to_state(&LED_fsm, LED_FOUR_BLINK);
 800409a:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <LPTIM1_callback+0x4d8>)
 800409c:	2106      	movs	r1, #6
 800409e:	0018      	movs	r0, r3
 80040a0:	f7fc fec0 	bl	8000e24 <set_LED_to_state>
				preset = PRESET_ONE;
 80040a4:	4b2d      	ldr	r3, [pc, #180]	@ (800415c <LPTIM1_callback+0x4d4>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
			}

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 80040aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004164 <LPTIM1_callback+0x4dc>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d140      	bne.n	8004136 <LPTIM1_callback+0x4ae>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 80040b4:	210c      	movs	r1, #12
 80040b6:	187b      	adds	r3, r7, r1
 80040b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004164 <LPTIM1_callback+0x4dc>)
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 80040be:	4b29      	ldr	r3, [pc, #164]	@ (8004164 <LPTIM1_callback+0x4dc>)
 80040c0:	4a28      	ldr	r2, [pc, #160]	@ (8004164 <LPTIM1_callback+0x4dc>)
 80040c2:	7852      	ldrb	r2, [r2, #1]
 80040c4:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 80040c6:	4b27      	ldr	r3, [pc, #156]	@ (8004164 <LPTIM1_callback+0x4dc>)
 80040c8:	187a      	adds	r2, r7, r1
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	705a      	strb	r2, [r3, #1]
 80040ce:	e032      	b.n	8004136 <LPTIM1_callback+0x4ae>
			}
		}
	}
	else{

		if(!(depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 80040d0:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <LPTIM1_callback+0x4cc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b31      	cmp	r3, #49	@ 0x31
 80040d6:	d92b      	bls.n	8004130 <LPTIM1_callback+0x4a8>

			//get correct preset, as it will be 'off by one'
			if(preset == PRESET_ONE){
 80040d8:	4b20      	ldr	r3, [pc, #128]	@ (800415c <LPTIM1_callback+0x4d4>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d103      	bne.n	80040e8 <LPTIM1_callback+0x460>

				preset = PRESET_FOUR;
 80040e0:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <LPTIM1_callback+0x4d4>)
 80040e2:	2204      	movs	r2, #4
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e016      	b.n	8004116 <LPTIM1_callback+0x48e>
			}
			else if(preset == PRESET_TWO){
 80040e8:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <LPTIM1_callback+0x4d4>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d103      	bne.n	80040f8 <LPTIM1_callback+0x470>

				preset = PRESET_ONE;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <LPTIM1_callback+0x4d4>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e00e      	b.n	8004116 <LPTIM1_callback+0x48e>
			}
			else if(preset == PRESET_THREE){
 80040f8:	4b18      	ldr	r3, [pc, #96]	@ (800415c <LPTIM1_callback+0x4d4>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d103      	bne.n	8004108 <LPTIM1_callback+0x480>

				preset = PRESET_TWO;
 8004100:	4b16      	ldr	r3, [pc, #88]	@ (800415c <LPTIM1_callback+0x4d4>)
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e006      	b.n	8004116 <LPTIM1_callback+0x48e>
			}
			else if(preset == PRESET_FOUR){
 8004108:	4b14      	ldr	r3, [pc, #80]	@ (800415c <LPTIM1_callback+0x4d4>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d102      	bne.n	8004116 <LPTIM1_callback+0x48e>

				preset = PRESET_THREE;
 8004110:	4b12      	ldr	r3, [pc, #72]	@ (800415c <LPTIM1_callback+0x4d4>)
 8004112:	2203      	movs	r2, #3
 8004114:	701a      	strb	r2, [r3, #0]
			}

			//convert running params to preset, and update user preset and user preset used
			Store_Params_as_User_Preset(preset,
 8004116:	4b11      	ldr	r3, [pc, #68]	@ (800415c <LPTIM1_callback+0x4d4>)
 8004118:	7818      	ldrb	r0, [r3, #0]
 800411a:	4b13      	ldr	r3, [pc, #76]	@ (8004168 <LPTIM1_callback+0x4e0>)
 800411c:	4a13      	ldr	r2, [pc, #76]	@ (800416c <LPTIM1_callback+0x4e4>)
 800411e:	4914      	ldr	r1, [pc, #80]	@ (8004170 <LPTIM1_callback+0x4e8>)
 8004120:	f7fc fe5a 	bl	8000dd8 <Store_Params_as_User_Preset>
										&params,
										user_presets_used_array,
										user_presets_array);

			//set the current pot mode to PC_MODE and update current preset active
			Set_All_Pots_to_PC_Mode();
 8004124:	f7fc fe20 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
			preset_selected = preset;
 8004128:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <LPTIM1_callback+0x4d4>)
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <LPTIM1_callback+0x4ec>)
 800412e:	701a      	strb	r2, [r3, #0]

		}

		depressed_num = 0;
 8004130:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <LPTIM1_callback+0x4cc>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <LPTIM1_callback+0x4f0>)
 8004138:	22fa      	movs	r2, #250	@ 0xfa
 800413a:	21fa      	movs	r1, #250	@ 0xfa
 800413c:	0018      	movs	r0, r3
 800413e:	f004 f981 	bl	8008444 <HAL_LPTIM_SetOnce_Start_IT>

}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b004      	add	sp, #16
 8004148:	bdb0      	pop	{r4, r5, r7, pc}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	200004e2 	.word	0x200004e2
 8004150:	20000c28 	.word	0x20000c28
 8004154:	20000c2c 	.word	0x20000c2c
 8004158:	20000025 	.word	0x20000025
 800415c:	20000026 	.word	0x20000026
 8004160:	20000448 	.word	0x20000448
 8004164:	20000430 	.word	0x20000430
 8004168:	20000484 	.word	0x20000484
 800416c:	200004c0 	.word	0x200004c0
 8004170:	20000c50 	.word	0x20000c50
 8004174:	200004bc 	.word	0x200004bc
 8004178:	20000bcc 	.word	0x20000bcc

0800417c <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]


}
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 8004194:	4bd1      	ldr	r3, [pc, #836]	@ (80044dc <TIM14_callback+0x350>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d106      	bne.n	80041ac <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800419e:	4bd0      	ldr	r3, [pc, #832]	@ (80044e0 <TIM14_callback+0x354>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	2140      	movs	r1, #64	@ 0x40
 80041a4:	0018      	movs	r0, r3
 80041a6:	f004 f856 	bl	8008256 <HAL_GPIO_WritePin>

				set_LED_to_state(&LED_fsm, prev);
			}
		}
	}
}
 80041aa:	e1c3      	b.n	8004534 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 80041ac:	4bcb      	ldr	r3, [pc, #812]	@ (80044dc <TIM14_callback+0x350>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d106      	bne.n	80041c4 <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80041b6:	4bca      	ldr	r3, [pc, #808]	@ (80044e0 <TIM14_callback+0x354>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	2140      	movs	r1, #64	@ 0x40
 80041bc:	0018      	movs	r0, r3
 80041be:	f004 f84a 	bl	8008256 <HAL_GPIO_WritePin>
}
 80041c2:	e1b7      	b.n	8004534 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 80041c4:	4bc5      	ldr	r3, [pc, #788]	@ (80044dc <TIM14_callback+0x350>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d133      	bne.n	8004236 <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80041ce:	4bc5      	ldr	r3, [pc, #788]	@ (80044e4 <TIM14_callback+0x358>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2200      	movs	r2, #0
 80041d4:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 80041d6:	4bc4      	ldr	r3, [pc, #784]	@ (80044e8 <TIM14_callback+0x35c>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80041e0:	4bbf      	ldr	r3, [pc, #764]	@ (80044e0 <TIM14_callback+0x354>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	2140      	movs	r1, #64	@ 0x40
 80041e6:	0018      	movs	r0, r3
 80041e8:	f004 f835 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 80041ec:	4bbe      	ldr	r3, [pc, #760]	@ (80044e8 <TIM14_callback+0x35c>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4bbc      	ldr	r3, [pc, #752]	@ (80044e8 <TIM14_callback+0x35c>)
 80041f8:	701a      	strb	r2, [r3, #0]
}
 80041fa:	e19b      	b.n	8004534 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 80041fc:	4bba      	ldr	r3, [pc, #744]	@ (80044e8 <TIM14_callback+0x35c>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b04      	cmp	r3, #4
 8004204:	d900      	bls.n	8004208 <TIM14_callback+0x7c>
 8004206:	e195      	b.n	8004534 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004208:	4bb5      	ldr	r3, [pc, #724]	@ (80044e0 <TIM14_callback+0x354>)
 800420a:	2200      	movs	r2, #0
 800420c:	2140      	movs	r1, #64	@ 0x40
 800420e:	0018      	movs	r0, r3
 8004210:	f004 f821 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 8004214:	4bb4      	ldr	r3, [pc, #720]	@ (80044e8 <TIM14_callback+0x35c>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	3301      	adds	r3, #1
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4bb2      	ldr	r3, [pc, #712]	@ (80044e8 <TIM14_callback+0x35c>)
 8004220:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 8004222:	4bb1      	ldr	r3, [pc, #708]	@ (80044e8 <TIM14_callback+0x35c>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b05      	cmp	r3, #5
 800422a:	d000      	beq.n	800422e <TIM14_callback+0xa2>
 800422c:	e182      	b.n	8004534 <TIM14_callback+0x3a8>
				LED_counter = 0;
 800422e:	4bae      	ldr	r3, [pc, #696]	@ (80044e8 <TIM14_callback+0x35c>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
}
 8004234:	e17e      	b.n	8004534 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 8004236:	4ba9      	ldr	r3, [pc, #676]	@ (80044dc <TIM14_callback+0x350>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b04      	cmp	r3, #4
 800423e:	d156      	bne.n	80042ee <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004240:	4ba8      	ldr	r3, [pc, #672]	@ (80044e4 <TIM14_callback+0x358>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2200      	movs	r2, #0
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 8004248:	4ba7      	ldr	r3, [pc, #668]	@ (80044e8 <TIM14_callback+0x35c>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d815      	bhi.n	800427e <TIM14_callback+0xf2>
 8004252:	4ba5      	ldr	r3, [pc, #660]	@ (80044e8 <TIM14_callback+0x35c>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2201      	movs	r2, #1
 800425a:	4013      	ands	r3, r2
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10d      	bne.n	800427e <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004262:	4b9f      	ldr	r3, [pc, #636]	@ (80044e0 <TIM14_callback+0x354>)
 8004264:	2201      	movs	r2, #1
 8004266:	2140      	movs	r1, #64	@ 0x40
 8004268:	0018      	movs	r0, r3
 800426a:	f003 fff4 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 800426e:	4b9e      	ldr	r3, [pc, #632]	@ (80044e8 <TIM14_callback+0x35c>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3301      	adds	r3, #1
 8004276:	b2da      	uxtb	r2, r3
 8004278:	4b9b      	ldr	r3, [pc, #620]	@ (80044e8 <TIM14_callback+0x35c>)
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	e15a      	b.n	8004534 <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 800427e:	4b9a      	ldr	r3, [pc, #616]	@ (80044e8 <TIM14_callback+0x35c>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d815      	bhi.n	80042b4 <TIM14_callback+0x128>
 8004288:	4b97      	ldr	r3, [pc, #604]	@ (80044e8 <TIM14_callback+0x35c>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2201      	movs	r2, #1
 8004290:	4013      	ands	r3, r2
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10d      	bne.n	80042b4 <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004298:	4b91      	ldr	r3, [pc, #580]	@ (80044e0 <TIM14_callback+0x354>)
 800429a:	2200      	movs	r2, #0
 800429c:	2140      	movs	r1, #64	@ 0x40
 800429e:	0018      	movs	r0, r3
 80042a0:	f003 ffd9 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 80042a4:	4b90      	ldr	r3, [pc, #576]	@ (80044e8 <TIM14_callback+0x35c>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	3301      	adds	r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b8e      	ldr	r3, [pc, #568]	@ (80044e8 <TIM14_callback+0x35c>)
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e13f      	b.n	8004534 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 80042b4:	4b8c      	ldr	r3, [pc, #560]	@ (80044e8 <TIM14_callback+0x35c>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d900      	bls.n	80042c0 <TIM14_callback+0x134>
 80042be:	e139      	b.n	8004534 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80042c0:	4b87      	ldr	r3, [pc, #540]	@ (80044e0 <TIM14_callback+0x354>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	2140      	movs	r1, #64	@ 0x40
 80042c6:	0018      	movs	r0, r3
 80042c8:	f003 ffc5 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 80042cc:	4b86      	ldr	r3, [pc, #536]	@ (80044e8 <TIM14_callback+0x35c>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4b84      	ldr	r3, [pc, #528]	@ (80044e8 <TIM14_callback+0x35c>)
 80042d8:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 80042da:	4b83      	ldr	r3, [pc, #524]	@ (80044e8 <TIM14_callback+0x35c>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d000      	beq.n	80042e6 <TIM14_callback+0x15a>
 80042e4:	e126      	b.n	8004534 <TIM14_callback+0x3a8>
				LED_counter = 0;
 80042e6:	4b80      	ldr	r3, [pc, #512]	@ (80044e8 <TIM14_callback+0x35c>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
}
 80042ec:	e122      	b.n	8004534 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 80042ee:	4b7b      	ldr	r3, [pc, #492]	@ (80044dc <TIM14_callback+0x350>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d156      	bne.n	80043a6 <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80042f8:	4b7a      	ldr	r3, [pc, #488]	@ (80044e4 <TIM14_callback+0x358>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8004300:	4b79      	ldr	r3, [pc, #484]	@ (80044e8 <TIM14_callback+0x35c>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b04      	cmp	r3, #4
 8004308:	d815      	bhi.n	8004336 <TIM14_callback+0x1aa>
 800430a:	4b77      	ldr	r3, [pc, #476]	@ (80044e8 <TIM14_callback+0x35c>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2201      	movs	r2, #1
 8004312:	4013      	ands	r3, r2
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800431a:	4b71      	ldr	r3, [pc, #452]	@ (80044e0 <TIM14_callback+0x354>)
 800431c:	2201      	movs	r2, #1
 800431e:	2140      	movs	r1, #64	@ 0x40
 8004320:	0018      	movs	r0, r3
 8004322:	f003 ff98 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 8004326:	4b70      	ldr	r3, [pc, #448]	@ (80044e8 <TIM14_callback+0x35c>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	3301      	adds	r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4b6d      	ldr	r3, [pc, #436]	@ (80044e8 <TIM14_callback+0x35c>)
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e0fe      	b.n	8004534 <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 8004336:	4b6c      	ldr	r3, [pc, #432]	@ (80044e8 <TIM14_callback+0x35c>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b04      	cmp	r3, #4
 800433e:	d815      	bhi.n	800436c <TIM14_callback+0x1e0>
 8004340:	4b69      	ldr	r3, [pc, #420]	@ (80044e8 <TIM14_callback+0x35c>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2201      	movs	r2, #1
 8004348:	4013      	ands	r3, r2
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10d      	bne.n	800436c <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004350:	4b63      	ldr	r3, [pc, #396]	@ (80044e0 <TIM14_callback+0x354>)
 8004352:	2200      	movs	r2, #0
 8004354:	2140      	movs	r1, #64	@ 0x40
 8004356:	0018      	movs	r0, r3
 8004358:	f003 ff7d 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 800435c:	4b62      	ldr	r3, [pc, #392]	@ (80044e8 <TIM14_callback+0x35c>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	3301      	adds	r3, #1
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4b60      	ldr	r3, [pc, #384]	@ (80044e8 <TIM14_callback+0x35c>)
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e0e3      	b.n	8004534 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 800436c:	4b5e      	ldr	r3, [pc, #376]	@ (80044e8 <TIM14_callback+0x35c>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b08      	cmp	r3, #8
 8004374:	d900      	bls.n	8004378 <TIM14_callback+0x1ec>
 8004376:	e0dd      	b.n	8004534 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004378:	4b59      	ldr	r3, [pc, #356]	@ (80044e0 <TIM14_callback+0x354>)
 800437a:	2200      	movs	r2, #0
 800437c:	2140      	movs	r1, #64	@ 0x40
 800437e:	0018      	movs	r0, r3
 8004380:	f003 ff69 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 8004384:	4b58      	ldr	r3, [pc, #352]	@ (80044e8 <TIM14_callback+0x35c>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	3301      	adds	r3, #1
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4b56      	ldr	r3, [pc, #344]	@ (80044e8 <TIM14_callback+0x35c>)
 8004390:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8004392:	4b55      	ldr	r3, [pc, #340]	@ (80044e8 <TIM14_callback+0x35c>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b09      	cmp	r3, #9
 800439a:	d000      	beq.n	800439e <TIM14_callback+0x212>
 800439c:	e0ca      	b.n	8004534 <TIM14_callback+0x3a8>
				LED_counter = 0;
 800439e:	4b52      	ldr	r3, [pc, #328]	@ (80044e8 <TIM14_callback+0x35c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
}
 80043a4:	e0c6      	b.n	8004534 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 80043a6:	4b4d      	ldr	r3, [pc, #308]	@ (80044dc <TIM14_callback+0x350>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d156      	bne.n	800445e <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80043b0:	4b4c      	ldr	r3, [pc, #304]	@ (80044e4 <TIM14_callback+0x358>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2200      	movs	r2, #0
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 80043b8:	4b4b      	ldr	r3, [pc, #300]	@ (80044e8 <TIM14_callback+0x35c>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d815      	bhi.n	80043ee <TIM14_callback+0x262>
 80043c2:	4b49      	ldr	r3, [pc, #292]	@ (80044e8 <TIM14_callback+0x35c>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2201      	movs	r2, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80043d2:	4b43      	ldr	r3, [pc, #268]	@ (80044e0 <TIM14_callback+0x354>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	2140      	movs	r1, #64	@ 0x40
 80043d8:	0018      	movs	r0, r3
 80043da:	f003 ff3c 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 80043de:	4b42      	ldr	r3, [pc, #264]	@ (80044e8 <TIM14_callback+0x35c>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	4b3f      	ldr	r3, [pc, #252]	@ (80044e8 <TIM14_callback+0x35c>)
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e0a2      	b.n	8004534 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 80043ee:	4b3e      	ldr	r3, [pc, #248]	@ (80044e8 <TIM14_callback+0x35c>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d815      	bhi.n	8004424 <TIM14_callback+0x298>
 80043f8:	4b3b      	ldr	r3, [pc, #236]	@ (80044e8 <TIM14_callback+0x35c>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2201      	movs	r2, #1
 8004400:	4013      	ands	r3, r2
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10d      	bne.n	8004424 <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004408:	4b35      	ldr	r3, [pc, #212]	@ (80044e0 <TIM14_callback+0x354>)
 800440a:	2200      	movs	r2, #0
 800440c:	2140      	movs	r1, #64	@ 0x40
 800440e:	0018      	movs	r0, r3
 8004410:	f003 ff21 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 8004414:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <TIM14_callback+0x35c>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	3301      	adds	r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4b32      	ldr	r3, [pc, #200]	@ (80044e8 <TIM14_callback+0x35c>)
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e087      	b.n	8004534 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004424:	4b30      	ldr	r3, [pc, #192]	@ (80044e8 <TIM14_callback+0x35c>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b0a      	cmp	r3, #10
 800442c:	d900      	bls.n	8004430 <TIM14_callback+0x2a4>
 800442e:	e081      	b.n	8004534 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004430:	4b2b      	ldr	r3, [pc, #172]	@ (80044e0 <TIM14_callback+0x354>)
 8004432:	2200      	movs	r2, #0
 8004434:	2140      	movs	r1, #64	@ 0x40
 8004436:	0018      	movs	r0, r3
 8004438:	f003 ff0d 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 800443c:	4b2a      	ldr	r3, [pc, #168]	@ (80044e8 <TIM14_callback+0x35c>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	3301      	adds	r3, #1
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4b28      	ldr	r3, [pc, #160]	@ (80044e8 <TIM14_callback+0x35c>)
 8004448:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 800444a:	4b27      	ldr	r3, [pc, #156]	@ (80044e8 <TIM14_callback+0x35c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b0b      	cmp	r3, #11
 8004452:	d000      	beq.n	8004456 <TIM14_callback+0x2ca>
 8004454:	e06e      	b.n	8004534 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004456:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <TIM14_callback+0x35c>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
}
 800445c:	e06a      	b.n	8004534 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 800445e:	4b1f      	ldr	r3, [pc, #124]	@ (80044dc <TIM14_callback+0x350>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b07      	cmp	r3, #7
 8004466:	d165      	bne.n	8004534 <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004468:	4b1e      	ldr	r3, [pc, #120]	@ (80044e4 <TIM14_callback+0x358>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2200      	movs	r2, #0
 800446e:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004470:	4b1d      	ldr	r3, [pc, #116]	@ (80044e8 <TIM14_callback+0x35c>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b06      	cmp	r3, #6
 8004478:	d815      	bhi.n	80044a6 <TIM14_callback+0x31a>
 800447a:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <TIM14_callback+0x35c>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2201      	movs	r2, #1
 8004482:	4013      	ands	r3, r2
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800448a:	4b15      	ldr	r3, [pc, #84]	@ (80044e0 <TIM14_callback+0x354>)
 800448c:	2201      	movs	r2, #1
 800448e:	2140      	movs	r1, #64	@ 0x40
 8004490:	0018      	movs	r0, r3
 8004492:	f003 fee0 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 8004496:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <TIM14_callback+0x35c>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	3301      	adds	r3, #1
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <TIM14_callback+0x35c>)
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e046      	b.n	8004534 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <TIM14_callback+0x35c>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d81d      	bhi.n	80044ec <TIM14_callback+0x360>
 80044b0:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <TIM14_callback+0x35c>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2201      	movs	r2, #1
 80044b8:	4013      	ands	r3, r2
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d115      	bne.n	80044ec <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044c0:	4b07      	ldr	r3, [pc, #28]	@ (80044e0 <TIM14_callback+0x354>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	2140      	movs	r1, #64	@ 0x40
 80044c6:	0018      	movs	r0, r3
 80044c8:	f003 fec5 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <TIM14_callback+0x35c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	3301      	adds	r3, #1
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4b04      	ldr	r3, [pc, #16]	@ (80044e8 <TIM14_callback+0x35c>)
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e02b      	b.n	8004534 <TIM14_callback+0x3a8>
 80044dc:	20000448 	.word	0x20000448
 80044e0:	50000800 	.word	0x50000800
 80044e4:	200005e0 	.word	0x200005e0
 80044e8:	200004c9 	.word	0x200004c9
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 80044ec:	4b13      	ldr	r3, [pc, #76]	@ (800453c <TIM14_callback+0x3b0>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b0a      	cmp	r3, #10
 80044f4:	d81e      	bhi.n	8004534 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044f6:	4b12      	ldr	r3, [pc, #72]	@ (8004540 <TIM14_callback+0x3b4>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	2140      	movs	r1, #64	@ 0x40
 80044fc:	0018      	movs	r0, r3
 80044fe:	f003 feaa 	bl	8008256 <HAL_GPIO_WritePin>
			LED_counter++;
 8004502:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <TIM14_callback+0x3b0>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	3301      	adds	r3, #1
 800450a:	b2da      	uxtb	r2, r3
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <TIM14_callback+0x3b0>)
 800450e:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <TIM14_callback+0x3b0>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b0b      	cmp	r3, #11
 8004518:	d10c      	bne.n	8004534 <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 800451a:	210f      	movs	r1, #15
 800451c:	187b      	adds	r3, r7, r1
 800451e:	4a09      	ldr	r2, [pc, #36]	@ (8004544 <TIM14_callback+0x3b8>)
 8004520:	7852      	ldrb	r2, [r2, #1]
 8004522:	701a      	strb	r2, [r3, #0]
				set_LED_to_state(&LED_fsm, prev);
 8004524:	187b      	adds	r3, r7, r1
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <TIM14_callback+0x3b8>)
 800452a:	0011      	movs	r1, r2
 800452c:	0018      	movs	r0, r3
 800452e:	f7fc fc79 	bl	8000e24 <set_LED_to_state>
}
 8004532:	e7ff      	b.n	8004534 <TIM14_callback+0x3a8>
 8004534:	46c0      	nop			@ (mov r8, r8)
 8004536:	46bd      	mov	sp, r7
 8004538:	b004      	add	sp, #16
 800453a:	bd80      	pop	{r7, pc}
 800453c:	200004c9 	.word	0x200004c9
 8004540:	50000800 	.word	0x50000800
 8004544:	20000448 	.word	0x20000448

08004548 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	0002      	movs	r2, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	1dbb      	adds	r3, r7, #6
 8004554:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8004556:	4b34      	ldr	r3, [pc, #208]	@ (8004628 <Input_Capture_Processing+0xe0>)
 8004558:	2104      	movs	r1, #4
 800455a:	0018      	movs	r0, r3
 800455c:	f001 fdde 	bl	800611c <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8004560:	1dbb      	adds	r3, r7, #6
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	0018      	movs	r0, r3
 8004568:	f001 fd67 	bl	800603a <isPrime>
 800456c:	0003      	movs	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d106      	bne.n	8004580 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8004572:	1dbb      	adds	r3, r7, #6
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	3301      	adds	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	1dbb      	adds	r3, r7, #6
 800457e:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8004580:	1dbb      	adds	r3, r7, #6
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	019b      	lsls	r3, r3, #6
 8004588:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 800458a:	2317      	movs	r3, #23
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e02d      	b.n	80045f0 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8004594:	2317      	movs	r3, #23
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	2280      	movs	r2, #128	@ 0x80
 800459e:	0052      	lsls	r2, r2, #1
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	1dbb      	adds	r3, r7, #6
 80045a6:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 80045a8:	1dbb      	adds	r3, r7, #6
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	001a      	movs	r2, r3
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	0011      	movs	r1, r2
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7fb fe2b 	bl	8000210 <__aeabi_uidivmod>
 80045ba:	000b      	movs	r3, r1
 80045bc:	001a      	movs	r2, r3
 80045be:	210e      	movs	r1, #14
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 80045c4:	187b      	adds	r3, r7, r1
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 80045cc:	1dbb      	adds	r3, r7, #6
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	0019      	movs	r1, r3
 80045d4:	6938      	ldr	r0, [r7, #16]
 80045d6:	f7fb fd95 	bl	8000104 <__udivsi3>
 80045da:	0003      	movs	r3, r0
 80045dc:	b29a      	uxth	r2, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	835a      	strh	r2, [r3, #26]
			break;
 80045e2:	e00a      	b.n	80045fa <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 80045e4:	2117      	movs	r1, #23
 80045e6:	187b      	adds	r3, r7, r1
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	3201      	adds	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	2317      	movs	r3, #23
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b80      	cmp	r3, #128	@ 0x80
 80045f8:	d9cc      	bls.n	8004594 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 80045fa:	1dbb      	adds	r3, r7, #6
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2280      	movs	r2, #128	@ 0x80
 8004602:	0052      	lsls	r2, r2, #1
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	b29a      	uxth	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	0018      	movs	r0, r3
 8004612:	f000 f9cd 	bl	80049b0 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	0018      	movs	r0, r3
 800461a:	f001 f8cb 	bl	80057b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 800461e:	2301      	movs	r3, #1
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b006      	add	sp, #24
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000c38 	.word	0x20000c38

0800462c <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8004632:	1dfc      	adds	r4, r7, #7
 8004634:	4b09      	ldr	r3, [pc, #36]	@ (800465c <Start_Input_Capture_Timer+0x30>)
 8004636:	2100      	movs	r1, #0
 8004638:	0018      	movs	r0, r3
 800463a:	f000 f811 	bl	8004660 <Start_IC_TIM>
 800463e:	0003      	movs	r3, r0
 8004640:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004642:	1dfb      	adds	r3, r7, #7
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 800464a:	f7fd fe75 	bl	8002338 <Error_Handler>
	}

	return ok;
 800464e:	1dfb      	adds	r3, r7, #7
 8004650:	781b      	ldrb	r3, [r3, #0]
}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b003      	add	sp, #12
 8004658:	bd90      	pop	{r4, r7, pc}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	20000814 	.word	0x20000814

08004660 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8004660:	b5b0      	push	{r4, r5, r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 800466a:	250f      	movs	r5, #15
 800466c:	197c      	adds	r4, r7, r5
 800466e:	4b10      	ldr	r3, [pc, #64]	@ (80046b0 <Start_IC_TIM+0x50>)
 8004670:	0018      	movs	r0, r3
 8004672:	f005 f981 	bl	8009978 <HAL_TIM_Base_Start_IT>
 8004676:	0003      	movs	r3, r0
 8004678:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <Start_IC_TIM+0x50>)
 800467e:	0011      	movs	r1, r2
 8004680:	0018      	movs	r0, r3
 8004682:	f005 fde7 	bl	800a254 <HAL_TIM_IC_Start_IT>
 8004686:	0003      	movs	r3, r0
 8004688:	0019      	movs	r1, r3
 800468a:	197b      	adds	r3, r7, r5
 800468c:	197a      	adds	r2, r7, r5
 800468e:	7812      	ldrb	r2, [r2, #0]
 8004690:	400a      	ands	r2, r1
 8004692:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8004694:	197b      	adds	r3, r7, r5
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <Start_IC_TIM+0x40>

		Error_Handler();
 800469c:	f7fd fe4c 	bl	8002338 <Error_Handler>
	}

	return ok_AND;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	781b      	ldrb	r3, [r3, #0]
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b004      	add	sp, #16
 80046ac:	bdb0      	pop	{r4, r5, r7, pc}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	20000814 	.word	0x20000814

080046b4 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0010      	movs	r0, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	2324      	movs	r3, #36	@ 0x24
 80046c8:	001a      	movs	r2, r3
 80046ca:	f008 ff65 	bl	800d598 <memcpy>

	return 1;
 80046ce:	2301      	movs	r3, #1
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <Start_Measurement_Reelapse_Timer+0x34>)
 80046de:	2100      	movs	r1, #0
 80046e0:	0018      	movs	r0, r3
 80046e2:	f001 fc8e 	bl	8006002 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80046e6:	4b09      	ldr	r3, [pc, #36]	@ (800470c <Start_Measurement_Reelapse_Timer+0x34>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 80046ee:	4b08      	ldr	r3, [pc, #32]	@ (8004710 <Start_Measurement_Reelapse_Timer+0x38>)
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	4b05      	ldr	r3, [pc, #20]	@ (800470c <Start_Measurement_Reelapse_Timer+0x34>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 80046fa:	4b04      	ldr	r3, [pc, #16]	@ (800470c <Start_Measurement_Reelapse_Timer+0x34>)
 80046fc:	2100      	movs	r1, #0
 80046fe:	0018      	movs	r0, r3
 8004700:	f001 fc63 	bl	8005fca <Start_OC_TIM>

	return 1;
 8004704:	2301      	movs	r3, #1
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	200008d0 	.word	0x200008d0
 8004710:	20000c34 	.word	0x20000c34

08004714 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004718:	4b03      	ldr	r3, [pc, #12]	@ (8004728 <Begin_Input_Capture_Measurement+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004720:	2301      	movs	r3, #1
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000814 	.word	0x20000814

0800472c <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004730:	f7fd fe08 	bl	8002344 <System_Init>

	//STARTUP
	Startup();
 8004734:	f000 fb32 	bl	8004d9c <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004738:	4b39      	ldr	r3, [pc, #228]	@ (8004820 <main+0xf4>)
 800473a:	2104      	movs	r1, #4
 800473c:	0018      	movs	r0, r3
 800473e:	f001 fcc7 	bl	80060d0 <Get_Status_Bit>
 8004742:	0003      	movs	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d107      	bne.n	8004758 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004748:	4b36      	ldr	r3, [pc, #216]	@ (8004824 <main+0xf8>)
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	4a36      	ldr	r2, [pc, #216]	@ (8004828 <main+0xfc>)
 8004750:	0011      	movs	r1, r2
 8004752:	0018      	movs	r0, r3
 8004754:	f7ff fef8 	bl	8004548 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004758:	4b31      	ldr	r3, [pc, #196]	@ (8004820 <main+0xf4>)
 800475a:	2140      	movs	r1, #64	@ 0x40
 800475c:	0018      	movs	r0, r3
 800475e:	f001 fcb7 	bl	80060d0 <Get_Status_Bit>
 8004762:	0003      	movs	r3, r0
 8004764:	2b01      	cmp	r3, #1
 8004766:	d12b      	bne.n	80047c0 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8004768:	4b30      	ldr	r3, [pc, #192]	@ (800482c <main+0x100>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	23fa      	movs	r3, #250	@ 0xfa
 800476e:	01db      	lsls	r3, r3, #7
 8004770:	429a      	cmp	r2, r3
 8004772:	d218      	bcs.n	80047a6 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8004774:	4b2e      	ldr	r3, [pc, #184]	@ (8004830 <main+0x104>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800477e:	4b28      	ldr	r3, [pc, #160]	@ (8004820 <main+0xf4>)
 8004780:	2140      	movs	r1, #64	@ 0x40
 8004782:	0018      	movs	r0, r3
 8004784:	f001 fcca 	bl	800611c <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004788:	4b25      	ldr	r3, [pc, #148]	@ (8004820 <main+0xf4>)
 800478a:	2120      	movs	r1, #32
 800478c:	0018      	movs	r0, r3
 800478e:	f001 fcc5 	bl	800611c <Clear_Status_Bit>
					idle_counter = 0;
 8004792:	4b26      	ldr	r3, [pc, #152]	@ (800482c <main+0x100>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e012      	b.n	80047c0 <main+0x94>
				}
				else{

					idle_counter++;
 800479a:	4b24      	ldr	r3, [pc, #144]	@ (800482c <main+0x100>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	4b22      	ldr	r3, [pc, #136]	@ (800482c <main+0x100>)
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e00c      	b.n	80047c0 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80047a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004820 <main+0xf4>)
 80047a8:	2140      	movs	r1, #64	@ 0x40
 80047aa:	0018      	movs	r0, r3
 80047ac:	f001 fcb6 	bl	800611c <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80047b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <main+0xf4>)
 80047b2:	2120      	movs	r1, #32
 80047b4:	0018      	movs	r0, r3
 80047b6:	f001 fc9f 	bl	80060f8 <Set_Status_Bit>
				idle_counter = 0;
 80047ba:	4b1c      	ldr	r3, [pc, #112]	@ (800482c <main+0x100>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 80047c0:	2380      	movs	r3, #128	@ 0x80
 80047c2:	005a      	lsls	r2, r3, #1
 80047c4:	4b16      	ldr	r3, [pc, #88]	@ (8004820 <main+0xf4>)
 80047c6:	0011      	movs	r1, r2
 80047c8:	0018      	movs	r0, r3
 80047ca:	f001 fc81 	bl	80060d0 <Get_Status_Bit>
 80047ce:	0003      	movs	r3, r0
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d1b1      	bne.n	8004738 <main+0xc>

			if(midi_counter < MIDI_COUNT){
 80047d4:	4b17      	ldr	r3, [pc, #92]	@ (8004834 <main+0x108>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	23fa      	movs	r3, #250	@ 0xfa
 80047da:	01db      	lsls	r3, r3, #7
 80047dc:	429a      	cmp	r2, r3
 80047de:	d205      	bcs.n	80047ec <main+0xc0>

				midi_counter++;
 80047e0:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <main+0x108>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <main+0x108>)
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e7a5      	b.n	8004738 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	005a      	lsls	r2, r3, #1
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <main+0xf4>)
 80047f2:	0011      	movs	r1, r2
 80047f4:	0018      	movs	r0, r3
 80047f6:	f001 fc91 	bl	800611c <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 80047fa:	2380      	movs	r3, #128	@ 0x80
 80047fc:	009a      	lsls	r2, r3, #2
 80047fe:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <main+0xf4>)
 8004800:	0011      	movs	r1, r2
 8004802:	0018      	movs	r0, r3
 8004804:	f001 fc78 	bl	80060f8 <Set_Status_Bit>
				active_status_byte = 0;
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <main+0x10c>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 800480e:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <main+0x110>)
 8004810:	0018      	movs	r0, r3
 8004812:	f7fc fcc6 	bl	80011a2 <Clear_Data_Buffer>
				midi_counter = 0;
 8004816:	4b07      	ldr	r3, [pc, #28]	@ (8004834 <main+0x108>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 800481c:	e78c      	b.n	8004738 <main+0xc>
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	20000c38 	.word	0x20000c38
 8004824:	20000c34 	.word	0x20000c34
 8004828:	20000c98 	.word	0x20000c98
 800482c:	20000c3c 	.word	0x20000c3c
 8004830:	20000444 	.word	0x20000444
 8004834:	20000c40 	.word	0x20000c40
 8004838:	200004cb 	.word	0x200004cb
 800483c:	200004d0 	.word	0x200004d0

08004840 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 800484c:	2417      	movs	r4, #23
 800484e:	193b      	adds	r3, r7, r4
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	0018      	movs	r0, r3
 8004858:	f005 f842 	bl	80098e0 <HAL_TIM_Base_Start>
 800485c:	0003      	movs	r3, r0
 800485e:	0019      	movs	r1, r3
 8004860:	193b      	adds	r3, r7, r4
 8004862:	193a      	adds	r2, r7, r4
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	0011      	movs	r1, r2
 8004870:	0018      	movs	r0, r3
 8004872:	f005 fba3 	bl	8009fbc <HAL_TIM_PWM_Start>
 8004876:	0003      	movs	r3, r0
 8004878:	0019      	movs	r1, r3
 800487a:	193b      	adds	r3, r7, r4
 800487c:	193a      	adds	r2, r7, r4
 800487e:	7812      	ldrb	r2, [r2, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	0011      	movs	r1, r2
 800488a:	0018      	movs	r0, r3
 800488c:	f005 fb96 	bl	8009fbc <HAL_TIM_PWM_Start>
 8004890:	0003      	movs	r3, r0
 8004892:	0019      	movs	r1, r3
 8004894:	193b      	adds	r3, r7, r4
 8004896:	193a      	adds	r2, r7, r4
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 80048a6:	f7fd fd47 	bl	8002338 <Error_Handler>
	}

	return ok_OR;
 80048aa:	2317      	movs	r3, #23
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	781b      	ldrb	r3, [r3, #0]
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b007      	add	sp, #28
 80048b6:	bd90      	pop	{r4, r7, pc}

080048b8 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 80048b8:	b590      	push	{r4, r7, lr}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80048be:	1dfc      	adds	r4, r7, #7
 80048c0:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <Start_Freq_Gen_Timer+0x30>)
 80048c2:	2100      	movs	r1, #0
 80048c4:	0018      	movs	r0, r3
 80048c6:	f001 fb80 	bl	8005fca <Start_OC_TIM>
 80048ca:	0003      	movs	r3, r0
 80048cc:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80048ce:	1dfb      	adds	r3, r7, #7
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 80048d6:	f7fd fd2f 	bl	8002338 <Error_Handler>
	}

	return ok;
 80048da:	1dfb      	adds	r3, r7, #7
 80048dc:	781b      	ldrb	r3, [r3, #0]
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b003      	add	sp, #12
 80048e4:	bd90      	pop	{r4, r7, pc}
 80048e6:	46c0      	nop			@ (mov r8, r8)
 80048e8:	20000758 	.word	0x20000758

080048ec <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 80048f8:	210b      	movs	r1, #11
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	891b      	ldrh	r3, [r3, #8]
 8004904:	b29b      	uxth	r3, r3
 8004906:	001a      	movs	r2, r3
 8004908:	0013      	movs	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	189b      	adds	r3, r3, r2
 800490e:	019b      	lsls	r3, r3, #6
 8004910:	189b      	adds	r3, r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	189b      	adds	r3, r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	0a9b      	lsrs	r3, r3, #10
 800491c:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	09da      	lsrs	r2, r3, #7
 8004922:	187b      	adds	r3, r7, r1
 8004924:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	b29a      	uxth	r2, r3
 800492a:	187b      	adds	r3, r7, r1
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	01db      	lsls	r3, r3, #7
 8004932:	b29b      	uxth	r3, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 800493c:	187b      	adds	r3, r7, r1
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2280      	movs	r2, #128	@ 0x80
 8004942:	00d2      	lsls	r2, r2, #3
 8004944:	411a      	asrs	r2, r3
 8004946:	0013      	movs	r3, r2
 8004948:	b29a      	uxth	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	835a      	strh	r2, [r3, #26]

    return 1;
 800494e:	2301      	movs	r3, #1
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b004      	add	sp, #16
 8004956:	bd80      	pop	{r7, pc}

08004958 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8b1b      	ldrh	r3, [r3, #24]
 8004964:	b29a      	uxth	r2, r3
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <Set_Oscillator_Values+0x50>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8b1b      	ldrh	r3, [r3, #24]
 8004970:	b29b      	uxth	r3, r3
 8004972:	001a      	movs	r2, r3
 8004974:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <Set_Oscillator_Values+0x50>)
 8004976:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8bdb      	ldrh	r3, [r3, #30]
 800497c:	b29a      	uxth	r2, r3
 800497e:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <Set_Oscillator_Values+0x50>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	885b      	ldrh	r3, [r3, #2]
 8004988:	b29a      	uxth	r2, r3
 800498a:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <Set_Oscillator_Values+0x54>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	889b      	ldrh	r3, [r3, #4]
 8004994:	b29a      	uxth	r2, r3
 8004996:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <Set_Oscillator_Values+0x54>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 800499c:	2301      	movs	r3, #1
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	20000758 	.word	0x20000758
 80049ac:	2000098c 	.word	0x2000098c

080049b0 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	000a      	movs	r2, r1
 80049ba:	1cfb      	adds	r3, r7, #3
 80049bc:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 80049be:	1cfb      	adds	r3, r7, #3
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d144      	bne.n	8004a50 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	89db      	ldrh	r3, [r3, #14]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3301      	adds	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	89db      	ldrh	r3, [r3, #14]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	2380      	movs	r3, #128	@ 0x80
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	429a      	cmp	r2, r3
 80049e0:	d102      	bne.n	80049e8 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	89db      	ldrh	r3, [r3, #14]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	741a      	strb	r2, [r3, #16]
 80049fe:	e05a      	b.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	89db      	ldrh	r3, [r3, #14]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b80      	cmp	r3, #128	@ 0x80
 8004a08:	d106      	bne.n	8004a18 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	741a      	strb	r2, [r3, #16]
 8004a16:	e04e      	b.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	89db      	ldrh	r3, [r3, #14]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	2380      	movs	r3, #128	@ 0x80
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d106      	bne.n	8004a34 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	741a      	strb	r2, [r3, #16]
 8004a32:	e040      	b.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	89db      	ldrh	r3, [r3, #14]
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	23c0      	movs	r3, #192	@ 0xc0
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d139      	bne.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	741a      	strb	r2, [r3, #16]
 8004a4e:	e032      	b.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004a50:	1cfb      	adds	r3, r7, #3
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d11f      	bne.n	8004a98 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	799b      	ldrb	r3, [r3, #6]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d004      	beq.n	8004a6c <Calculate_Next_Main_Oscillator_Values+0xbc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	799b      	ldrb	r3, [r3, #6]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	22a7      	movs	r2, #167	@ 0xa7
 8004a70:	0052      	lsls	r2, r2, #1
 8004a72:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	741a      	strb	r2, [r3, #16]
 8004a80:	e019      	b.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2280      	movs	r2, #128	@ 0x80
 8004a86:	0052      	lsls	r2, r2, #1
 8004a88:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	741a      	strb	r2, [r3, #16]
 8004a96:	e00e      	b.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 8004a98:	1cfb      	adds	r3, r7, #3
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d10a      	bne.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	89db      	ldrh	r3, [r3, #14]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	799b      	ldrb	r3, [r3, #6]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	89db      	ldrh	r3, [r3, #14]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	001a      	movs	r2, r3
 8004ac8:	4b31      	ldr	r3, [pc, #196]	@ (8004b90 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8004aca:	0052      	lsls	r2, r2, #1
 8004acc:	5ad2      	ldrh	r2, [r2, r3]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	801a      	strh	r2, [r3, #0]
 8004ad2:	e029      	b.n	8004b28 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	799b      	ldrb	r3, [r3, #6]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d109      	bne.n	8004af2 <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	89db      	ldrh	r3, [r3, #14]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b94 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004ae8:	0052      	lsls	r2, r2, #1
 8004aea:	5ad2      	ldrh	r2, [r2, r3]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	e01a      	b.n	8004b28 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	799b      	ldrb	r3, [r3, #6]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d108      	bne.n	8004b0e <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	89db      	ldrh	r3, [r3, #14]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2bff      	cmp	r3, #255	@ 0xff
 8004b04:	d803      	bhi.n	8004b0e <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a23      	ldr	r2, [pc, #140]	@ (8004b98 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	e00c      	b.n	8004b28 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	799b      	ldrb	r3, [r3, #6]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d107      	bne.n	8004b28 <Calculate_Next_Main_Oscillator_Values+0x178>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	89db      	ldrh	r3, [r3, #14]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2bff      	cmp	r3, #255	@ 0xff
 8004b20:	d902      	bls.n	8004b28 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	7a9b      	ldrb	r3, [r3, #10]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b30:	d108      	bne.n	8004b44 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	e01b      	b.n	8004b7c <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	7a9b      	ldrb	r3, [r3, #10]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d013      	beq.n	8004b76 <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	001a      	movs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7a9b      	ldrb	r3, [r3, #10]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4353      	muls	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	09db      	lsrs	r3, r3, #7
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8004b98 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	801a      	strh	r2, [r3, #0]
 8004b74:	e002      	b.n	8004b7c <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a07      	ldr	r2, [pc, #28]	@ (8004b98 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004b7a:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	805a      	strh	r2, [r3, #2]

	return 1;
 8004b86:	2301      	movs	r3, #1
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b004      	add	sp, #16
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	0800d9e4 	.word	0x0800d9e4
 8004b94:	0800d5e4 	.word	0x0800d5e4
 8004b98:	000003ff 	.word	0x000003ff

08004b9c <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	4a44      	ldr	r2, [pc, #272]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004baa:	5a9b      	ldrh	r3, [r3, r2]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	4a41      	ldr	r2, [pc, #260]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004bb6:	5a9b      	ldrh	r3, [r3, r2]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	1e5a      	subs	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b299      	uxth	r1, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	0052      	lsls	r2, r2, #1
 8004bc6:	52d1      	strh	r1, [r2, r3]
 8004bc8:	e006      	b.n	8004bd8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b299      	uxth	r1, r3
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	4a38      	ldr	r2, [pc, #224]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004bdc:	5a9b      	ldrh	r3, [r3, r2]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10e      	bne.n	8004c02 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4a35      	ldr	r2, [pc, #212]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004be8:	2180      	movs	r1, #128	@ 0x80
 8004bea:	0089      	lsls	r1, r1, #2
 8004bec:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	4a33      	ldr	r2, [pc, #204]	@ (8004cc0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004bf2:	5a9b      	ldrh	r3, [r3, r2]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b299      	uxth	r1, r3
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	4a30      	ldr	r2, [pc, #192]	@ (8004cc0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004bfe:	5299      	strh	r1, [r3, r2]
 8004c00:	e026      	b.n	8004c50 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	4a2e      	ldr	r2, [pc, #184]	@ (8004cc0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c06:	5a9b      	ldrh	r3, [r3, r2]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10e      	bne.n	8004c2c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c12:	2180      	movs	r1, #128	@ 0x80
 8004c14:	0089      	lsls	r1, r1, #2
 8004c16:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4a28      	ldr	r2, [pc, #160]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c1c:	5a9b      	ldrh	r3, [r3, r2]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b299      	uxth	r1, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	4a25      	ldr	r2, [pc, #148]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c28:	5299      	strh	r1, [r3, r2]
 8004c2a:	e011      	b.n	8004c50 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4a23      	ldr	r2, [pc, #140]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c30:	5a9b      	ldrh	r3, [r3, r2]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b299      	uxth	r1, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c3c:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c42:	5a9b      	ldrh	r3, [r3, r2]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b299      	uxth	r1, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c4e:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c54:	5a9b      	ldrh	r3, [r3, r2]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	001a      	movs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	18d2      	adds	r2, r2, r3
 8004c62:	2380      	movs	r3, #128	@ 0x80
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	429a      	cmp	r2, r3
 8004c68:	dd13      	ble.n	8004c92 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4913      	ldr	r1, [pc, #76]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c70:	5a5b      	ldrh	r3, [r3, r1]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	0019      	movs	r1, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	18cb      	adds	r3, r1, r3
 8004c7e:	4911      	ldr	r1, [pc, #68]	@ (8004cc4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8004c80:	468c      	mov	ip, r1
 8004c82:	4463      	add	r3, ip
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	18d3      	adds	r3, r2, r3
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	809a      	strh	r2, [r3, #4]
 8004c90:	e00f      	b.n	8004cb2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4909      	ldr	r1, [pc, #36]	@ (8004cbc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c98:	5a5b      	ldrh	r3, [r3, r1]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	18cb      	adds	r3, r1, r3
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	18d3      	adds	r3, r2, r3
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8004cb2:	2301      	movs	r3, #1
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b002      	add	sp, #8
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	00000402 	.word	0x00000402
 8004cc0:	00000404 	.word	0x00000404
 8004cc4:	7ffffe00 	.word	0x7ffffe00

08004cc8 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	2116      	movs	r1, #22
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	0952      	lsrs	r2, r2, #5
 8004cde:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce6:	d803      	bhi.n	8004cf0 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	719a      	strb	r2, [r3, #6]
 8004cee:	e010      	b.n	8004d12 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004cf0:	2316      	movs	r3, #22
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	2b55      	cmp	r3, #85	@ 0x55
 8004cf8:	d803      	bhi.n	8004d02 <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	719a      	strb	r2, [r3, #6]
 8004d00:	e007      	b.n	8004d12 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004d02:	2316      	movs	r3, #22
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d0a:	d802      	bhi.n	8004d12 <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	3302      	adds	r3, #2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	2114      	movs	r1, #20
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	0952      	lsrs	r2, r2, #5
 8004d20:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	187a      	adds	r2, r7, r1
 8004d26:	8812      	ldrh	r2, [r2, #0]
 8004d28:	00d2      	lsls	r2, r2, #3
 8004d2a:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	187a      	adds	r2, r7, r1
 8004d30:	8812      	ldrh	r2, [r2, #0]
 8004d32:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	3304      	adds	r3, #4
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	2113      	movs	r1, #19
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	187a      	adds	r2, r7, r1
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3306      	adds	r3, #6
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	2110      	movs	r1, #16
 8004d58:	187b      	adds	r3, r7, r1
 8004d5a:	0952      	lsrs	r2, r2, #5
 8004d5c:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8004d5e:	187a      	adds	r2, r7, r1
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	18db      	adds	r3, r3, r3
 8004d66:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	187a      	adds	r2, r7, r1
 8004d6c:	8812      	ldrh	r2, [r2, #0]
 8004d6e:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	210e      	movs	r1, #14
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	0952      	lsrs	r2, r2, #5
 8004d7e:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8004d80:	187b      	adds	r3, r7, r1
 8004d82:	187a      	adds	r2, r7, r1
 8004d84:	8812      	ldrh	r2, [r2, #0]
 8004d86:	0092      	lsls	r2, r2, #2
 8004d88:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	187a      	adds	r2, r7, r1
 8004d8e:	8812      	ldrh	r2, [r2, #0]
 8004d90:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8004d92:	2301      	movs	r3, #1
}
 8004d94:	0018      	movs	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b006      	add	sp, #24
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8004d9c:	b590      	push	{r4, r7, lr}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8004da2:	2007      	movs	r0, #7
 8004da4:	f002 fd9b 	bl	80078de <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8004da8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f14 <Startup+0x178>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	4b59      	ldr	r3, [pc, #356]	@ (8004f14 <Startup+0x178>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2101      	movs	r1, #1
 8004db4:	430a      	orrs	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8004db8:	4b57      	ldr	r3, [pc, #348]	@ (8004f18 <Startup+0x17c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	4b56      	ldr	r3, [pc, #344]	@ (8004f18 <Startup+0x17c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004dc8:	2380      	movs	r3, #128	@ 0x80
 8004dca:	0099      	lsls	r1, r3, #2
 8004dcc:	23a0      	movs	r3, #160	@ 0xa0
 8004dce:	05db      	lsls	r3, r3, #23
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f003 fa3f 	bl	8008256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	0159      	lsls	r1, r3, #5
 8004ddc:	23a0      	movs	r3, #160	@ 0xa0
 8004dde:	05db      	lsls	r3, r3, #23
 8004de0:	2201      	movs	r2, #1
 8004de2:	0018      	movs	r0, r3
 8004de4:	f003 fa37 	bl	8008256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004de8:	23a0      	movs	r3, #160	@ 0xa0
 8004dea:	05db      	lsls	r3, r3, #23
 8004dec:	2200      	movs	r2, #0
 8004dee:	2180      	movs	r1, #128	@ 0x80
 8004df0:	0018      	movs	r0, r3
 8004df2:	f003 fa30 	bl	8008256 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004df6:	f7fb fb27 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8004dfa:	f7fb fe81 	bl	8000b00 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8004dfe:	4b47      	ldr	r3, [pc, #284]	@ (8004f1c <Startup+0x180>)
 8004e00:	4a47      	ldr	r2, [pc, #284]	@ (8004f20 <Startup+0x184>)
 8004e02:	4948      	ldr	r1, [pc, #288]	@ (8004f24 <Startup+0x188>)
 8004e04:	4c48      	ldr	r4, [pc, #288]	@ (8004f28 <Startup+0x18c>)
 8004e06:	2004      	movs	r0, #4
 8004e08:	9000      	str	r0, [sp, #0]
 8004e0a:	0020      	movs	r0, r4
 8004e0c:	f7fb fd6b 	bl	80008e6 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004e10:	4b46      	ldr	r3, [pc, #280]	@ (8004f2c <Startup+0x190>)
 8004e12:	4a47      	ldr	r2, [pc, #284]	@ (8004f30 <Startup+0x194>)
 8004e14:	4943      	ldr	r1, [pc, #268]	@ (8004f24 <Startup+0x188>)
 8004e16:	4847      	ldr	r0, [pc, #284]	@ (8004f34 <Startup+0x198>)
 8004e18:	2404      	movs	r4, #4
 8004e1a:	9400      	str	r4, [sp, #0]
 8004e1c:	f7fb fe19 	bl	8000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8004e20:	4b45      	ldr	r3, [pc, #276]	@ (8004f38 <Startup+0x19c>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	001a      	movs	r2, r3
 8004e26:	4945      	ldr	r1, [pc, #276]	@ (8004f3c <Startup+0x1a0>)
 8004e28:	4b45      	ldr	r3, [pc, #276]	@ (8004f40 <Startup+0x1a4>)
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f001 fe08 	bl	8006a40 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8004e30:	46c0      	nop			@ (mov r8, r8)
 8004e32:	4b3b      	ldr	r3, [pc, #236]	@ (8004f20 <Startup+0x184>)
 8004e34:	2110      	movs	r1, #16
 8004e36:	0018      	movs	r0, r3
 8004e38:	f001 f94a 	bl	80060d0 <Get_Status_Bit>
 8004e3c:	1e03      	subs	r3, r0, #0
 8004e3e:	d0f8      	beq.n	8004e32 <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004e40:	1dbb      	adds	r3, r7, #6
 8004e42:	2200      	movs	r2, #0
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e02c      	b.n	8004ea2 <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8004e48:	4b3e      	ldr	r3, [pc, #248]	@ (8004f44 <Startup+0x1a8>)
 8004e4a:	799b      	ldrb	r3, [r3, #6]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d111      	bne.n	8004e76 <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8004e52:	4b3c      	ldr	r3, [pc, #240]	@ (8004f44 <Startup+0x1a8>)
 8004e54:	7a9b      	ldrb	r3, [r3, #10]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	001a      	movs	r2, r3
 8004e5a:	0013      	movs	r3, r2
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	11db      	asrs	r3, r3, #7
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	1dba      	adds	r2, r7, #6
 8004e66:	8812      	ldrh	r2, [r2, #0]
 8004e68:	4937      	ldr	r1, [pc, #220]	@ (8004f48 <Startup+0x1ac>)
 8004e6a:	1acb      	subs	r3, r1, r3
 8004e6c:	b299      	uxth	r1, r3
 8004e6e:	4b37      	ldr	r3, [pc, #220]	@ (8004f4c <Startup+0x1b0>)
 8004e70:	0052      	lsls	r2, r2, #1
 8004e72:	52d1      	strh	r1, [r2, r3]
 8004e74:	e010      	b.n	8004e98 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8004e76:	4b33      	ldr	r3, [pc, #204]	@ (8004f44 <Startup+0x1a8>)
 8004e78:	7a9b      	ldrb	r3, [r3, #10]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	0013      	movs	r3, r2
 8004e80:	029b      	lsls	r3, r3, #10
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	121b      	asrs	r3, r3, #8
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	1dba      	adds	r2, r7, #6
 8004e8a:	8812      	ldrh	r2, [r2, #0]
 8004e8c:	492e      	ldr	r1, [pc, #184]	@ (8004f48 <Startup+0x1ac>)
 8004e8e:	1acb      	subs	r3, r1, r3
 8004e90:	b299      	uxth	r1, r3
 8004e92:	4b2e      	ldr	r3, [pc, #184]	@ (8004f4c <Startup+0x1b0>)
 8004e94:	0052      	lsls	r2, r2, #1
 8004e96:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004e98:	1dbb      	adds	r3, r7, #6
 8004e9a:	881a      	ldrh	r2, [r3, #0]
 8004e9c:	1dbb      	adds	r3, r7, #6
 8004e9e:	3201      	adds	r2, #1
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	1dbb      	adds	r3, r7, #6
 8004ea4:	881a      	ldrh	r2, [r3, #0]
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d9cc      	bls.n	8004e48 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8004eae:	4b25      	ldr	r3, [pc, #148]	@ (8004f44 <Startup+0x1a8>)
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f7ff fd7c 	bl	80049b0 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8004eb8:	4a24      	ldr	r2, [pc, #144]	@ (8004f4c <Startup+0x1b0>)
 8004eba:	4b22      	ldr	r3, [pc, #136]	@ (8004f44 <Startup+0x1a8>)
 8004ebc:	0011      	movs	r1, r2
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7ff fe6c 	bl	8004b9c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8004ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f44 <Startup+0x1a8>)
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f7ff fd46 	bl	8004958 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8004ecc:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <Startup+0x1b4>)
 8004ece:	220c      	movs	r2, #12
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f7ff fcb4 	bl	8004840 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8004ed8:	f7ff fcee 	bl	80048b8 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 8004edc:	f7fc faae 	bl	800143c <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8004ee0:	f7ff fba4 	bl	800462c <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8004ee4:	f001 f8ec 	bl	80060c0 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f54 <Startup+0x1b8>)
 8004eea:	22fa      	movs	r2, #250	@ 0xfa
 8004eec:	21fa      	movs	r1, #250	@ 0xfa
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f003 faa8 	bl	8008444 <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 8004ef4:	4b18      	ldr	r3, [pc, #96]	@ (8004f58 <Startup+0x1bc>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8004efa:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <Startup+0x1c0>)
 8004efc:	2100      	movs	r1, #0
 8004efe:	0018      	movs	r0, r3
 8004f00:	f001 f863 	bl	8005fca <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004f04:	2007      	movs	r0, #7
 8004f06:	f002 fcda 	bl	80078be <HAL_NVIC_EnableIRQ>

	return 1;
 8004f0a:	2301      	movs	r3, #1
}
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b003      	add	sp, #12
 8004f12:	bd90      	pop	{r4, r7, pc}
 8004f14:	20000814 	.word	0x20000814
 8004f18:	20000758 	.word	0x20000758
 8004f1c:	200004ca 	.word	0x200004ca
 8004f20:	20000c38 	.word	0x20000c38
 8004f24:	200004c0 	.word	0x200004c0
 8004f28:	0800f820 	.word	0x0800f820
 8004f2c:	20000484 	.word	0x20000484
 8004f30:	20000474 	.word	0x20000474
 8004f34:	20000494 	.word	0x20000494
 8004f38:	0800dde4 	.word	0x0800dde4
 8004f3c:	20000c44 	.word	0x20000c44
 8004f40:	200004fc 	.word	0x200004fc
 8004f44:	20000c50 	.word	0x20000c50
 8004f48:	000003ff 	.word	0x000003ff
 8004f4c:	20000028 	.word	0x20000028
 8004f50:	2000098c 	.word	0x2000098c
 8004f54:	20000bcc 	.word	0x20000bcc
 8004f58:	20000448 	.word	0x20000448
 8004f5c:	200005e0 	.word	0x200005e0

08004f60 <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	4a12      	ldr	r2, [pc, #72]	@ (8004fb4 <Advance_Pending_States+0x54>)
 8004f6a:	7812      	ldrb	r2, [r2, #0]
 8004f6c:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004f6e:	4b11      	ldr	r3, [pc, #68]	@ (8004fb4 <Advance_Pending_States+0x54>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b05      	cmp	r3, #5
 8004f76:	d103      	bne.n	8004f80 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004f78:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb4 <Advance_Pending_States+0x54>)
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e007      	b.n	8004f90 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004f80:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <Advance_Pending_States+0x54>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b07      	cmp	r3, #7
 8004f88:	d102      	bne.n	8004f90 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <Advance_Pending_States+0x54>)
 8004f8c:	2206      	movs	r2, #6
 8004f8e:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b06      	cmp	r3, #6
 8004f96:	d007      	beq.n	8004fa8 <Advance_Pending_States+0x48>
 8004f98:	1d3b      	adds	r3, r7, #4
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d003      	beq.n	8004fa8 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	@ (8004fb4 <Advance_Pending_States+0x54>)
 8004fa2:	1d3a      	adds	r2, r7, #4
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8004fa8:	2301      	movs	r3, #1
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b002      	add	sp, #8
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	20000430 	.word	0x20000430

08004fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <HAL_MspInit+0x44>)
 8004fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <HAL_MspInit+0x44>)
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fca:	4b0c      	ldr	r3, [pc, #48]	@ (8004ffc <HAL_MspInit+0x44>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <HAL_MspInit+0x44>)
 8004fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fda:	4b08      	ldr	r3, [pc, #32]	@ (8004ffc <HAL_MspInit+0x44>)
 8004fdc:	2180      	movs	r1, #128	@ 0x80
 8004fde:	0549      	lsls	r1, r1, #21
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <HAL_MspInit+0x44>)
 8004fe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fe8:	2380      	movs	r3, #128	@ 0x80
 8004fea:	055b      	lsls	r3, r3, #21
 8004fec:	4013      	ands	r3, r2
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b002      	add	sp, #8
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	40021000 	.word	0x40021000

08005000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b08b      	sub	sp, #44	@ 0x2c
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	2414      	movs	r4, #20
 800500a:	193b      	adds	r3, r7, r4
 800500c:	0018      	movs	r0, r3
 800500e:	2314      	movs	r3, #20
 8005010:	001a      	movs	r2, r3
 8005012:	2100      	movs	r1, #0
 8005014:	f008 fa94 	bl	800d540 <memset>
  if(hadc->Instance==ADC1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2e      	ldr	r2, [pc, #184]	@ (80050d8 <HAL_ADC_MspInit+0xd8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d155      	bne.n	80050ce <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005022:	4b2e      	ldr	r3, [pc, #184]	@ (80050dc <HAL_ADC_MspInit+0xdc>)
 8005024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005026:	4b2d      	ldr	r3, [pc, #180]	@ (80050dc <HAL_ADC_MspInit+0xdc>)
 8005028:	2180      	movs	r1, #128	@ 0x80
 800502a:	0349      	lsls	r1, r1, #13
 800502c:	430a      	orrs	r2, r1
 800502e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005030:	4b2a      	ldr	r3, [pc, #168]	@ (80050dc <HAL_ADC_MspInit+0xdc>)
 8005032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005034:	2380      	movs	r3, #128	@ 0x80
 8005036:	035b      	lsls	r3, r3, #13
 8005038:	4013      	ands	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800503e:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <HAL_ADC_MspInit+0xdc>)
 8005040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005042:	4b26      	ldr	r3, [pc, #152]	@ (80050dc <HAL_ADC_MspInit+0xdc>)
 8005044:	2101      	movs	r1, #1
 8005046:	430a      	orrs	r2, r1
 8005048:	635a      	str	r2, [r3, #52]	@ 0x34
 800504a:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <HAL_ADC_MspInit+0xdc>)
 800504c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005056:	193b      	adds	r3, r7, r4
 8005058:	2273      	movs	r2, #115	@ 0x73
 800505a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800505c:	193b      	adds	r3, r7, r4
 800505e:	2203      	movs	r2, #3
 8005060:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005062:	193b      	adds	r3, r7, r4
 8005064:	2200      	movs	r2, #0
 8005066:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005068:	193a      	adds	r2, r7, r4
 800506a:	23a0      	movs	r3, #160	@ 0xa0
 800506c:	05db      	lsls	r3, r3, #23
 800506e:	0011      	movs	r1, r2
 8005070:	0018      	movs	r0, r3
 8005072:	f002 ff6f 	bl	8007f54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 8005078:	4a1a      	ldr	r2, [pc, #104]	@ (80050e4 <HAL_ADC_MspInit+0xe4>)
 800507a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800507c:	4b18      	ldr	r3, [pc, #96]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 800507e:	2205      	movs	r2, #5
 8005080:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005082:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 8005084:	2200      	movs	r2, #0
 8005086:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005088:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 800508a:	2200      	movs	r2, #0
 800508c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 8005090:	2280      	movs	r2, #128	@ 0x80
 8005092:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005094:	4b12      	ldr	r3, [pc, #72]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 8005096:	2280      	movs	r2, #128	@ 0x80
 8005098:	0052      	lsls	r2, r2, #1
 800509a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800509c:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 800509e:	2280      	movs	r2, #128	@ 0x80
 80050a0:	00d2      	lsls	r2, r2, #3
 80050a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80050a4:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80050aa:	4b0d      	ldr	r3, [pc, #52]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 80050ac:	2280      	movs	r2, #128	@ 0x80
 80050ae:	0192      	lsls	r2, r2, #6
 80050b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80050b2:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 80050b4:	0018      	movs	r0, r3
 80050b6:	f002 fc2f 	bl	8007918 <HAL_DMA_Init>
 80050ba:	1e03      	subs	r3, r0, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80050be:	f7fd f93b 	bl	8002338 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a06      	ldr	r2, [pc, #24]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 80050c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_ADC_MspInit+0xe0>)
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b00b      	add	sp, #44	@ 0x2c
 80050d4:	bd90      	pop	{r4, r7, pc}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	40012400 	.word	0x40012400
 80050dc:	40021000 	.word	0x40021000
 80050e0:	20000584 	.word	0x20000584
 80050e4:	40020008 	.word	0x40020008

080050e8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b097      	sub	sp, #92	@ 0x5c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f0:	2344      	movs	r3, #68	@ 0x44
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	0018      	movs	r0, r3
 80050f6:	2314      	movs	r3, #20
 80050f8:	001a      	movs	r2, r3
 80050fa:	2100      	movs	r1, #0
 80050fc:	f008 fa20 	bl	800d540 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005100:	241c      	movs	r4, #28
 8005102:	193b      	adds	r3, r7, r4
 8005104:	0018      	movs	r0, r3
 8005106:	2328      	movs	r3, #40	@ 0x28
 8005108:	001a      	movs	r2, r3
 800510a:	2100      	movs	r1, #0
 800510c:	f008 fa18 	bl	800d540 <memset>
  if(hlptim->Instance==LPTIM1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a46      	ldr	r2, [pc, #280]	@ (8005230 <HAL_LPTIM_MspInit+0x148>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d13e      	bne.n	8005198 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800511a:	193b      	adds	r3, r7, r4
 800511c:	2280      	movs	r2, #128	@ 0x80
 800511e:	0092      	lsls	r2, r2, #2
 8005120:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8005122:	193b      	adds	r3, r7, r4
 8005124:	2200      	movs	r2, #0
 8005126:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005128:	193b      	adds	r3, r7, r4
 800512a:	0018      	movs	r0, r3
 800512c:	f004 f9f8 	bl	8009520 <HAL_RCCEx_PeriphCLKConfig>
 8005130:	1e03      	subs	r3, r0, #0
 8005132:	d001      	beq.n	8005138 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8005134:	f7fd f900 	bl	8002338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005138:	4b3e      	ldr	r3, [pc, #248]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 800513a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800513c:	4b3d      	ldr	r3, [pc, #244]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 800513e:	2180      	movs	r1, #128	@ 0x80
 8005140:	0609      	lsls	r1, r1, #24
 8005142:	430a      	orrs	r2, r1
 8005144:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005146:	4b3b      	ldr	r3, [pc, #236]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	0fdb      	lsrs	r3, r3, #31
 800514c:	07db      	lsls	r3, r3, #31
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005152:	4b38      	ldr	r3, [pc, #224]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 8005154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005156:	4b37      	ldr	r3, [pc, #220]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 8005158:	2102      	movs	r1, #2
 800515a:	430a      	orrs	r2, r1
 800515c:	635a      	str	r2, [r3, #52]	@ 0x34
 800515e:	4b35      	ldr	r3, [pc, #212]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 8005160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005162:	2202      	movs	r2, #2
 8005164:	4013      	ands	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800516a:	2144      	movs	r1, #68	@ 0x44
 800516c:	187b      	adds	r3, r7, r1
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005172:	187b      	adds	r3, r7, r1
 8005174:	2202      	movs	r2, #2
 8005176:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005178:	187b      	adds	r3, r7, r1
 800517a:	2200      	movs	r2, #0
 800517c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800517e:	187b      	adds	r3, r7, r1
 8005180:	2200      	movs	r2, #0
 8005182:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8005184:	187b      	adds	r3, r7, r1
 8005186:	2205      	movs	r2, #5
 8005188:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800518a:	187b      	adds	r3, r7, r1
 800518c:	4a2a      	ldr	r2, [pc, #168]	@ (8005238 <HAL_LPTIM_MspInit+0x150>)
 800518e:	0019      	movs	r1, r3
 8005190:	0010      	movs	r0, r2
 8005192:	f002 fedf 	bl	8007f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8005196:	e046      	b.n	8005226 <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a27      	ldr	r2, [pc, #156]	@ (800523c <HAL_LPTIM_MspInit+0x154>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d141      	bne.n	8005226 <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80051a2:	211c      	movs	r1, #28
 80051a4:	187b      	adds	r3, r7, r1
 80051a6:	2280      	movs	r2, #128	@ 0x80
 80051a8:	00d2      	lsls	r2, r2, #3
 80051aa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 80051ac:	187b      	adds	r3, r7, r1
 80051ae:	2200      	movs	r2, #0
 80051b0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	0018      	movs	r0, r3
 80051b6:	f004 f9b3 	bl	8009520 <HAL_RCCEx_PeriphCLKConfig>
 80051ba:	1e03      	subs	r3, r0, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 80051be:	f7fd f8bb 	bl	8002338 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80051c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 80051c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 80051c8:	2180      	movs	r1, #128	@ 0x80
 80051ca:	05c9      	lsls	r1, r1, #23
 80051cc:	430a      	orrs	r2, r1
 80051ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051d0:	4b18      	ldr	r3, [pc, #96]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 80051d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	05db      	lsls	r3, r3, #23
 80051d8:	4013      	ands	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051de:	4b15      	ldr	r3, [pc, #84]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 80051e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051e2:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 80051e4:	2101      	movs	r1, #1
 80051e6:	430a      	orrs	r2, r1
 80051e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80051ea:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <HAL_LPTIM_MspInit+0x14c>)
 80051ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ee:	2201      	movs	r2, #1
 80051f0:	4013      	ands	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80051f6:	2144      	movs	r1, #68	@ 0x44
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	2280      	movs	r2, #128	@ 0x80
 80051fc:	0052      	lsls	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005200:	187b      	adds	r3, r7, r1
 8005202:	2202      	movs	r2, #2
 8005204:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	187b      	adds	r3, r7, r1
 8005208:	2200      	movs	r2, #0
 800520a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520c:	187b      	adds	r3, r7, r1
 800520e:	2200      	movs	r2, #0
 8005210:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8005212:	187b      	adds	r3, r7, r1
 8005214:	2205      	movs	r2, #5
 8005216:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005218:	187a      	adds	r2, r7, r1
 800521a:	23a0      	movs	r3, #160	@ 0xa0
 800521c:	05db      	lsls	r3, r3, #23
 800521e:	0011      	movs	r1, r2
 8005220:	0018      	movs	r0, r3
 8005222:	f002 fe97 	bl	8007f54 <HAL_GPIO_Init>
}
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	b017      	add	sp, #92	@ 0x5c
 800522c:	bd90      	pop	{r4, r7, pc}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	40007c00 	.word	0x40007c00
 8005234:	40021000 	.word	0x40021000
 8005238:	50000400 	.word	0x50000400
 800523c:	40009400 	.word	0x40009400

08005240 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b099      	sub	sp, #100	@ 0x64
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005248:	234c      	movs	r3, #76	@ 0x4c
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	0018      	movs	r0, r3
 800524e:	2314      	movs	r3, #20
 8005250:	001a      	movs	r2, r3
 8005252:	2100      	movs	r1, #0
 8005254:	f008 f974 	bl	800d540 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005258:	2424      	movs	r4, #36	@ 0x24
 800525a:	193b      	adds	r3, r7, r4
 800525c:	0018      	movs	r0, r3
 800525e:	2328      	movs	r3, #40	@ 0x28
 8005260:	001a      	movs	r2, r3
 8005262:	2100      	movs	r1, #0
 8005264:	f008 f96c 	bl	800d540 <memset>
  if(htim_base->Instance==TIM1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a68      	ldr	r2, [pc, #416]	@ (8005410 <HAL_TIM_Base_MspInit+0x1d0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d11d      	bne.n	80052ae <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8005272:	193b      	adds	r3, r7, r4
 8005274:	2280      	movs	r2, #128	@ 0x80
 8005276:	0392      	lsls	r2, r2, #14
 8005278:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800527a:	193b      	adds	r3, r7, r4
 800527c:	2200      	movs	r2, #0
 800527e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005280:	193b      	adds	r3, r7, r4
 8005282:	0018      	movs	r0, r3
 8005284:	f004 f94c 	bl	8009520 <HAL_RCCEx_PeriphCLKConfig>
 8005288:	1e03      	subs	r3, r0, #0
 800528a:	d001      	beq.n	8005290 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 800528c:	f7fd f854 	bl	8002338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005290:	4b60      	ldr	r3, [pc, #384]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 8005292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005294:	4b5f      	ldr	r3, [pc, #380]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 8005296:	2180      	movs	r1, #128	@ 0x80
 8005298:	0109      	lsls	r1, r1, #4
 800529a:	430a      	orrs	r2, r1
 800529c:	641a      	str	r2, [r3, #64]	@ 0x40
 800529e:	4b5d      	ldr	r3, [pc, #372]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80052a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4013      	ands	r3, r2
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 80052ac:	e0ab      	b.n	8005406 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	2380      	movs	r3, #128	@ 0x80
 80052b4:	05db      	lsls	r3, r3, #23
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d138      	bne.n	800532c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052ba:	4b56      	ldr	r3, [pc, #344]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80052bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052be:	4b55      	ldr	r3, [pc, #340]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80052c0:	2101      	movs	r1, #1
 80052c2:	430a      	orrs	r2, r1
 80052c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052c6:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80052c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ca:	2201      	movs	r2, #1
 80052cc:	4013      	ands	r3, r2
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d2:	4b50      	ldr	r3, [pc, #320]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80052d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80052d8:	2101      	movs	r1, #1
 80052da:	430a      	orrs	r2, r1
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80052de:	4b4d      	ldr	r3, [pc, #308]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	2201      	movs	r2, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80052ea:	214c      	movs	r1, #76	@ 0x4c
 80052ec:	187b      	adds	r3, r7, r1
 80052ee:	2280      	movs	r2, #128	@ 0x80
 80052f0:	0212      	lsls	r2, r2, #8
 80052f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	2202      	movs	r2, #2
 80052f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	2201      	movs	r2, #1
 80052fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005300:	187b      	adds	r3, r7, r1
 8005302:	2200      	movs	r2, #0
 8005304:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005306:	187b      	adds	r3, r7, r1
 8005308:	2202      	movs	r2, #2
 800530a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 800530c:	187a      	adds	r2, r7, r1
 800530e:	23a0      	movs	r3, #160	@ 0xa0
 8005310:	05db      	lsls	r3, r3, #23
 8005312:	0011      	movs	r1, r2
 8005314:	0018      	movs	r0, r3
 8005316:	f002 fe1d 	bl	8007f54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 800531a:	2202      	movs	r2, #2
 800531c:	2102      	movs	r1, #2
 800531e:	200f      	movs	r0, #15
 8005320:	f002 fab8 	bl	8007894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005324:	200f      	movs	r0, #15
 8005326:	f002 faca 	bl	80078be <HAL_NVIC_EnableIRQ>
}
 800532a:	e06c      	b.n	8005406 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a39      	ldr	r2, [pc, #228]	@ (8005418 <HAL_TIM_Base_MspInit+0x1d8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d114      	bne.n	8005360 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005336:	4b37      	ldr	r3, [pc, #220]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 8005338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800533a:	4b36      	ldr	r3, [pc, #216]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 800533c:	2102      	movs	r1, #2
 800533e:	430a      	orrs	r2, r1
 8005340:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005342:	4b34      	ldr	r3, [pc, #208]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 8005344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800534e:	2200      	movs	r2, #0
 8005350:	2100      	movs	r1, #0
 8005352:	2010      	movs	r0, #16
 8005354:	f002 fa9e 	bl	8007894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005358:	2010      	movs	r0, #16
 800535a:	f002 fab0 	bl	80078be <HAL_NVIC_EnableIRQ>
}
 800535e:	e052      	b.n	8005406 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2d      	ldr	r2, [pc, #180]	@ (800541c <HAL_TIM_Base_MspInit+0x1dc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d116      	bne.n	8005398 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800536a:	4b2a      	ldr	r3, [pc, #168]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 800536c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800536e:	4b29      	ldr	r3, [pc, #164]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 8005370:	2180      	movs	r1, #128	@ 0x80
 8005372:	0289      	lsls	r1, r1, #10
 8005374:	430a      	orrs	r2, r1
 8005376:	641a      	str	r2, [r3, #64]	@ 0x40
 8005378:	4b26      	ldr	r3, [pc, #152]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 800537a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	4013      	ands	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	2015      	movs	r0, #21
 800538c:	f002 fa82 	bl	8007894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005390:	2015      	movs	r0, #21
 8005392:	f002 fa94 	bl	80078be <HAL_NVIC_EnableIRQ>
}
 8005396:	e036      	b.n	8005406 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a20      	ldr	r2, [pc, #128]	@ (8005420 <HAL_TIM_Base_MspInit+0x1e0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d116      	bne.n	80053d0 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80053a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80053a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80053a8:	2180      	movs	r1, #128	@ 0x80
 80053aa:	02c9      	lsls	r1, r1, #11
 80053ac:	430a      	orrs	r2, r1
 80053ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80053b0:	4b18      	ldr	r3, [pc, #96]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80053b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	02db      	lsls	r3, r3, #11
 80053b8:	4013      	ands	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 80053be:	2203      	movs	r2, #3
 80053c0:	2103      	movs	r1, #3
 80053c2:	2016      	movs	r0, #22
 80053c4:	f002 fa66 	bl	8007894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80053c8:	2016      	movs	r0, #22
 80053ca:	f002 fa78 	bl	80078be <HAL_NVIC_EnableIRQ>
}
 80053ce:	e01a      	b.n	8005406 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a13      	ldr	r2, [pc, #76]	@ (8005424 <HAL_TIM_Base_MspInit+0x1e4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d115      	bne.n	8005406 <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 80053da:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80053dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053de:	4b0d      	ldr	r3, [pc, #52]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80053e0:	2180      	movs	r1, #128	@ 0x80
 80053e2:	0209      	lsls	r1, r1, #8
 80053e4:	430a      	orrs	r2, r1
 80053e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80053e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <HAL_TIM_Base_MspInit+0x1d4>)
 80053ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	4013      	ands	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 80053f6:	2203      	movs	r2, #3
 80053f8:	2103      	movs	r1, #3
 80053fa:	2013      	movs	r0, #19
 80053fc:	f002 fa4a 	bl	8007894 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8005400:	2013      	movs	r0, #19
 8005402:	f002 fa5c 	bl	80078be <HAL_NVIC_EnableIRQ>
}
 8005406:	46c0      	nop			@ (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b019      	add	sp, #100	@ 0x64
 800540c:	bd90      	pop	{r4, r7, pc}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40021000 	.word	0x40021000
 8005418:	40000400 	.word	0x40000400
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800
 8005424:	40002000 	.word	0x40002000

08005428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b08b      	sub	sp, #44	@ 0x2c
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005430:	2414      	movs	r4, #20
 8005432:	193b      	adds	r3, r7, r4
 8005434:	0018      	movs	r0, r3
 8005436:	2314      	movs	r3, #20
 8005438:	001a      	movs	r2, r3
 800543a:	2100      	movs	r1, #0
 800543c:	f008 f880 	bl	800d540 <memset>
  if(htim->Instance==TIM1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a25      	ldr	r2, [pc, #148]	@ (80054dc <HAL_TIM_MspPostInit+0xb4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d144      	bne.n	80054d4 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800544a:	4b25      	ldr	r3, [pc, #148]	@ (80054e0 <HAL_TIM_MspPostInit+0xb8>)
 800544c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800544e:	4b24      	ldr	r3, [pc, #144]	@ (80054e0 <HAL_TIM_MspPostInit+0xb8>)
 8005450:	2101      	movs	r1, #1
 8005452:	430a      	orrs	r2, r1
 8005454:	635a      	str	r2, [r3, #52]	@ 0x34
 8005456:	4b22      	ldr	r3, [pc, #136]	@ (80054e0 <HAL_TIM_MspPostInit+0xb8>)
 8005458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545a:	2201      	movs	r2, #1
 800545c:	4013      	ands	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005462:	4b1f      	ldr	r3, [pc, #124]	@ (80054e0 <HAL_TIM_MspPostInit+0xb8>)
 8005464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005466:	4b1e      	ldr	r3, [pc, #120]	@ (80054e0 <HAL_TIM_MspPostInit+0xb8>)
 8005468:	2102      	movs	r1, #2
 800546a:	430a      	orrs	r2, r1
 800546c:	635a      	str	r2, [r3, #52]	@ 0x34
 800546e:	4b1c      	ldr	r3, [pc, #112]	@ (80054e0 <HAL_TIM_MspPostInit+0xb8>)
 8005470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005472:	2202      	movs	r2, #2
 8005474:	4013      	ands	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 800547a:	193b      	adds	r3, r7, r4
 800547c:	2280      	movs	r2, #128	@ 0x80
 800547e:	0112      	lsls	r2, r2, #4
 8005480:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005482:	193b      	adds	r3, r7, r4
 8005484:	2202      	movs	r2, #2
 8005486:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005488:	193b      	adds	r3, r7, r4
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800548e:	193b      	adds	r3, r7, r4
 8005490:	2200      	movs	r2, #0
 8005492:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005494:	193b      	adds	r3, r7, r4
 8005496:	2202      	movs	r2, #2
 8005498:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 800549a:	193a      	adds	r2, r7, r4
 800549c:	23a0      	movs	r3, #160	@ 0xa0
 800549e:	05db      	lsls	r3, r3, #23
 80054a0:	0011      	movs	r1, r2
 80054a2:	0018      	movs	r0, r3
 80054a4:	f002 fd56 	bl	8007f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 80054a8:	0021      	movs	r1, r4
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	2208      	movs	r2, #8
 80054ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	2202      	movs	r2, #2
 80054b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	2200      	movs	r2, #0
 80054ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	2200      	movs	r2, #0
 80054c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054c2:	187b      	adds	r3, r7, r1
 80054c4:	2201      	movs	r2, #1
 80054c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	4a06      	ldr	r2, [pc, #24]	@ (80054e4 <HAL_TIM_MspPostInit+0xbc>)
 80054cc:	0019      	movs	r1, r3
 80054ce:	0010      	movs	r0, r2
 80054d0:	f002 fd40 	bl	8007f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80054d4:	46c0      	nop			@ (mov r8, r8)
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b00b      	add	sp, #44	@ 0x2c
 80054da:	bd90      	pop	{r4, r7, pc}
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40021000 	.word	0x40021000
 80054e4:	50000400 	.word	0x50000400

080054e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b08b      	sub	sp, #44	@ 0x2c
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f0:	2414      	movs	r4, #20
 80054f2:	193b      	adds	r3, r7, r4
 80054f4:	0018      	movs	r0, r3
 80054f6:	2314      	movs	r3, #20
 80054f8:	001a      	movs	r2, r3
 80054fa:	2100      	movs	r1, #0
 80054fc:	f008 f820 	bl	800d540 <memset>
  if(huart->Instance==USART2)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a4a      	ldr	r2, [pc, #296]	@ (8005630 <HAL_UART_MspInit+0x148>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d000      	beq.n	800550c <HAL_UART_MspInit+0x24>
 800550a:	e08d      	b.n	8005628 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800550c:	4b49      	ldr	r3, [pc, #292]	@ (8005634 <HAL_UART_MspInit+0x14c>)
 800550e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005510:	4b48      	ldr	r3, [pc, #288]	@ (8005634 <HAL_UART_MspInit+0x14c>)
 8005512:	2180      	movs	r1, #128	@ 0x80
 8005514:	0289      	lsls	r1, r1, #10
 8005516:	430a      	orrs	r2, r1
 8005518:	63da      	str	r2, [r3, #60]	@ 0x3c
 800551a:	4b46      	ldr	r3, [pc, #280]	@ (8005634 <HAL_UART_MspInit+0x14c>)
 800551c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800551e:	2380      	movs	r3, #128	@ 0x80
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	4013      	ands	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005528:	4b42      	ldr	r3, [pc, #264]	@ (8005634 <HAL_UART_MspInit+0x14c>)
 800552a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800552c:	4b41      	ldr	r3, [pc, #260]	@ (8005634 <HAL_UART_MspInit+0x14c>)
 800552e:	2101      	movs	r1, #1
 8005530:	430a      	orrs	r2, r1
 8005532:	635a      	str	r2, [r3, #52]	@ 0x34
 8005534:	4b3f      	ldr	r3, [pc, #252]	@ (8005634 <HAL_UART_MspInit+0x14c>)
 8005536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005538:	2201      	movs	r2, #1
 800553a:	4013      	ands	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8005540:	0021      	movs	r1, r4
 8005542:	187b      	adds	r3, r7, r1
 8005544:	220c      	movs	r2, #12
 8005546:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005548:	187b      	adds	r3, r7, r1
 800554a:	2202      	movs	r2, #2
 800554c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800554e:	187b      	adds	r3, r7, r1
 8005550:	2201      	movs	r2, #1
 8005552:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005554:	187b      	adds	r3, r7, r1
 8005556:	2200      	movs	r2, #0
 8005558:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800555a:	187b      	adds	r3, r7, r1
 800555c:	2201      	movs	r2, #1
 800555e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005560:	187a      	adds	r2, r7, r1
 8005562:	23a0      	movs	r3, #160	@ 0xa0
 8005564:	05db      	lsls	r3, r3, #23
 8005566:	0011      	movs	r1, r2
 8005568:	0018      	movs	r0, r3
 800556a:	f002 fcf3 	bl	8007f54 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800556e:	4b32      	ldr	r3, [pc, #200]	@ (8005638 <HAL_UART_MspInit+0x150>)
 8005570:	4a32      	ldr	r2, [pc, #200]	@ (800563c <HAL_UART_MspInit+0x154>)
 8005572:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005574:	4b30      	ldr	r3, [pc, #192]	@ (8005638 <HAL_UART_MspInit+0x150>)
 8005576:	2234      	movs	r2, #52	@ 0x34
 8005578:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800557a:	4b2f      	ldr	r3, [pc, #188]	@ (8005638 <HAL_UART_MspInit+0x150>)
 800557c:	2200      	movs	r2, #0
 800557e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005580:	4b2d      	ldr	r3, [pc, #180]	@ (8005638 <HAL_UART_MspInit+0x150>)
 8005582:	2200      	movs	r2, #0
 8005584:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005586:	4b2c      	ldr	r3, [pc, #176]	@ (8005638 <HAL_UART_MspInit+0x150>)
 8005588:	2280      	movs	r2, #128	@ 0x80
 800558a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800558c:	4b2a      	ldr	r3, [pc, #168]	@ (8005638 <HAL_UART_MspInit+0x150>)
 800558e:	2200      	movs	r2, #0
 8005590:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005592:	4b29      	ldr	r3, [pc, #164]	@ (8005638 <HAL_UART_MspInit+0x150>)
 8005594:	2200      	movs	r2, #0
 8005596:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005598:	4b27      	ldr	r3, [pc, #156]	@ (8005638 <HAL_UART_MspInit+0x150>)
 800559a:	2200      	movs	r2, #0
 800559c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800559e:	4b26      	ldr	r3, [pc, #152]	@ (8005638 <HAL_UART_MspInit+0x150>)
 80055a0:	2280      	movs	r2, #128	@ 0x80
 80055a2:	0152      	lsls	r2, r2, #5
 80055a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80055a6:	4b24      	ldr	r3, [pc, #144]	@ (8005638 <HAL_UART_MspInit+0x150>)
 80055a8:	0018      	movs	r0, r3
 80055aa:	f002 f9b5 	bl	8007918 <HAL_DMA_Init>
 80055ae:	1e03      	subs	r3, r0, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80055b2:	f7fc fec1 	bl	8002338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2180      	movs	r1, #128	@ 0x80
 80055ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005638 <HAL_UART_MspInit+0x150>)
 80055bc:	505a      	str	r2, [r3, r1]
 80055be:	4b1e      	ldr	r3, [pc, #120]	@ (8005638 <HAL_UART_MspInit+0x150>)
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80055c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005644 <HAL_UART_MspInit+0x15c>)
 80055c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80055ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055cc:	2235      	movs	r2, #53	@ 0x35
 80055ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055d2:	2210      	movs	r2, #16
 80055d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055d8:	2200      	movs	r2, #0
 80055da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055dc:	4b18      	ldr	r3, [pc, #96]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055de:	2280      	movs	r2, #128	@ 0x80
 80055e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055e2:	4b17      	ldr	r3, [pc, #92]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055e8:	4b15      	ldr	r3, [pc, #84]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80055ee:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80055f4:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055f6:	2280      	movs	r2, #128	@ 0x80
 80055f8:	0152      	lsls	r2, r2, #5
 80055fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80055fc:	4b10      	ldr	r3, [pc, #64]	@ (8005640 <HAL_UART_MspInit+0x158>)
 80055fe:	0018      	movs	r0, r3
 8005600:	f002 f98a 	bl	8007918 <HAL_DMA_Init>
 8005604:	1e03      	subs	r3, r0, #0
 8005606:	d001      	beq.n	800560c <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8005608:	f7fc fe96 	bl	8002338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a0c      	ldr	r2, [pc, #48]	@ (8005640 <HAL_UART_MspInit+0x158>)
 8005610:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005612:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_UART_MspInit+0x158>)
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8005618:	2201      	movs	r2, #1
 800561a:	2101      	movs	r1, #1
 800561c:	201c      	movs	r0, #28
 800561e:	f002 f939 	bl	8007894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005622:	201c      	movs	r0, #28
 8005624:	f002 f94b 	bl	80078be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005628:	46c0      	nop			@ (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b00b      	add	sp, #44	@ 0x2c
 800562e:	bd90      	pop	{r4, r7, pc}
 8005630:	40004400 	.word	0x40004400
 8005634:	40021000 	.word	0x40021000
 8005638:	20000b14 	.word	0x20000b14
 800563c:	4002001c 	.word	0x4002001c
 8005640:	20000b70 	.word	0x20000b70
 8005644:	40020030 	.word	0x40020030

08005648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800564c:	46c0      	nop			@ (mov r8, r8)
 800564e:	e7fd      	b.n	800564c <NMI_Handler+0x4>

08005650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005654:	46c0      	nop			@ (mov r8, r8)
 8005656:	e7fd      	b.n	8005654 <HardFault_Handler+0x4>

08005658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800565c:	46c0      	nop			@ (mov r8, r8)
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005670:	f000 fdfc 	bl	800626c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005674:	46c0      	nop			@ (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 800567e:	2080      	movs	r0, #128	@ 0x80
 8005680:	f002 fe06 	bl	8008290 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005684:	46c0      	nop			@ (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005690:	4b03      	ldr	r3, [pc, #12]	@ (80056a0 <DMA1_Channel1_IRQHandler+0x14>)
 8005692:	0018      	movs	r0, r3
 8005694:	f002 fb1c 	bl	8007cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	20000584 	.word	0x20000584

080056a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80056a8:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80056aa:	0018      	movs	r0, r3
 80056ac:	f002 fb10 	bl	8007cd0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80056b0:	4b04      	ldr	r3, [pc, #16]	@ (80056c4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80056b2:	0018      	movs	r0, r3
 80056b4:	f002 fb0c 	bl	8007cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80056b8:	46c0      	nop			@ (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	20000b14 	.word	0x20000b14
 80056c4:	20000b70 	.word	0x20000b70

080056c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056cc:	4b03      	ldr	r3, [pc, #12]	@ (80056dc <TIM2_IRQHandler+0x14>)
 80056ce:	0018      	movs	r0, r3
 80056d0:	f004 fef0 	bl	800a4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80056d4:	46c0      	nop			@ (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	20000814 	.word	0x20000814

080056e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80056e4:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <TIM3_IRQHandler+0x14>)
 80056e6:	0018      	movs	r0, r3
 80056e8:	f004 fee4 	bl	800a4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80056ec:	46c0      	nop			@ (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	200008d0 	.word	0x200008d0

080056f8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80056fc:	4b03      	ldr	r3, [pc, #12]	@ (800570c <TIM16_IRQHandler+0x14>)
 80056fe:	0018      	movs	r0, r3
 8005700:	f004 fed8 	bl	800a4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005704:	46c0      	nop			@ (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	20000758 	.word	0x20000758

08005710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005714:	4b03      	ldr	r3, [pc, #12]	@ (8005724 <USART2_IRQHandler+0x14>)
 8005716:	0018      	movs	r0, r3
 8005718:	f006 fc4e 	bl	800bfb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800571c:	46c0      	nop			@ (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	20000a48 	.word	0x20000a48

08005728 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 800572c:	4b03      	ldr	r3, [pc, #12]	@ (800573c <LPTIM1_IRQHandler+0x14>)
 800572e:	0018      	movs	r0, r3
 8005730:	f002 ff1c 	bl	800856c <HAL_LPTIM_IRQHandler>
}
 8005734:	46c0      	nop			@ (mov r8, r8)
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	20000bcc 	.word	0x20000bcc

08005740 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005744:	4b03      	ldr	r3, [pc, #12]	@ (8005754 <TIM17_IRQHandler+0x14>)
 8005746:	0018      	movs	r0, r3
 8005748:	f004 feb4 	bl	800a4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800574c:	46c0      	nop			@ (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	46c0      	nop			@ (mov r8, r8)
 8005754:	2000069c 	.word	0x2000069c

08005758 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800575c:	4b03      	ldr	r3, [pc, #12]	@ (800576c <TIM14_IRQHandler+0x14>)
 800575e:	0018      	movs	r0, r3
 8005760:	f004 fea8 	bl	800a4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005764:	46c0      	nop			@ (mov r8, r8)
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	200005e0 	.word	0x200005e0

08005770 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	5c9b      	ldrb	r3, [r3, r2]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d107      	bne.n	8005794 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8b5b      	ldrh	r3, [r3, #26]
 8005788:	b29b      	uxth	r3, r3
 800578a:	18db      	adds	r3, r3, r3
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	839a      	strh	r2, [r3, #28]
 8005792:	e00a      	b.n	80057aa <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	5c9b      	ldrb	r3, [r3, r2]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8b5b      	ldrh	r3, [r3, #26]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 80057aa:	2301      	movs	r3, #1
}
 80057ac:	0018      	movs	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b002      	add	sp, #8
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 80057b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80057bc:	2317      	movs	r3, #23
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80057c4:	2316      	movs	r3, #22
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 80057cc:	2315      	movs	r3, #21
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 80057d4:	2114      	movs	r1, #20
 80057d6:	187b      	adds	r3, r7, r1
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	899b      	ldrh	r3, [r3, #12]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80057e4:	d803      	bhi.n	80057ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 80057e6:	187b      	adds	r3, r7, r1
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	e003      	b.n	80057f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 80057ee:	2314      	movs	r3, #20
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	799b      	ldrb	r3, [r3, #6]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d004      	beq.n	800580a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	799b      	ldrb	r3, [r3, #6]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d146      	bne.n	8005898 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	7c1b      	ldrb	r3, [r3, #16]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d104      	bne.n	800581e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7c5b      	ldrb	r3, [r3, #17]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7c1b      	ldrb	r3, [r3, #16]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d113      	bne.n	8005850 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7c5b      	ldrb	r3, [r3, #17]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	d10e      	bne.n	8005850 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8005832:	2314      	movs	r3, #20
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 800583c:	2316      	movs	r3, #22
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005844:	e027      	b.n	8005896 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005846:	2316      	movs	r3, #22
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 800584e:	e022      	b.n	8005896 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7c1b      	ldrb	r3, [r3, #16]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d104      	bne.n	8005864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	7c5b      	ldrb	r3, [r3, #17]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d009      	beq.n	8005878 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7c1b      	ldrb	r3, [r3, #16]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b01      	cmp	r3, #1
 800586c:	d13c      	bne.n	80058e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	7c5b      	ldrb	r3, [r3, #17]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d137      	bne.n	80058e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8005878:	2314      	movs	r3, #20
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 8005882:	2316      	movs	r3, #22
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 800588a:	e02d      	b.n	80058e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 800588c:	2316      	movs	r3, #22
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005894:	e028      	b.n	80058e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005896:	e027      	b.n	80058e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	799b      	ldrb	r3, [r3, #6]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d123      	bne.n	80058ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7c1b      	ldrb	r3, [r3, #16]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10e      	bne.n	80058ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 80058ac:	2314      	movs	r3, #20
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 80058b6:	2316      	movs	r3, #22
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e014      	b.n	80058ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80058c0:	2316      	movs	r3, #22
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	e00f      	b.n	80058ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 80058ca:	2314      	movs	r3, #20
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 80058d4:	2316      	movs	r3, #22
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	e005      	b.n	80058ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 80058de:	2316      	movs	r3, #22
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e000      	b.n	80058ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80058e8:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 80058ea:	2314      	movs	r3, #20
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	899b      	ldrh	r3, [r3, #12]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	2315      	movs	r3, #21
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	217f      	movs	r1, #127	@ 0x7f
 8005902:	1a8a      	subs	r2, r1, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e007      	b.n	8005918 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	899b      	ldrh	r3, [r3, #12]
 800590c:	b29b      	uxth	r3, r3
 800590e:	b2da      	uxtb	r2, r3
 8005910:	2315      	movs	r3, #21
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	3a80      	subs	r2, #128	@ 0x80
 8005916:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8a5b      	ldrh	r3, [r3, #18]
 800591c:	b29a      	uxth	r2, r3
 800591e:	200e      	movs	r0, #14
 8005920:	183b      	adds	r3, r7, r0
 8005922:	2180      	movs	r1, #128	@ 0x80
 8005924:	0049      	lsls	r1, r1, #1
 8005926:	1a8a      	subs	r2, r1, r2
 8005928:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 800592a:	0001      	movs	r1, r0
 800592c:	187b      	adds	r3, r7, r1
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	2215      	movs	r2, #21
 8005932:	18ba      	adds	r2, r7, r2
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	435a      	muls	r2, r3
 8005938:	0013      	movs	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	189b      	adds	r3, r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	10da      	asrs	r2, r3, #3
 8005942:	240c      	movs	r4, #12
 8005944:	193b      	adds	r3, r7, r4
 8005946:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005948:	250a      	movs	r5, #10
 800594a:	197b      	adds	r3, r7, r5
 800594c:	193a      	adds	r2, r7, r4
 800594e:	8812      	ldrh	r2, [r2, #0]
 8005950:	0a12      	lsrs	r2, r2, #8
 8005952:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8005954:	2312      	movs	r3, #18
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	0008      	movs	r0, r1
 800595a:	1879      	adds	r1, r7, r1
 800595c:	197a      	adds	r2, r7, r5
 800595e:	8809      	ldrh	r1, [r1, #0]
 8005960:	8812      	ldrh	r2, [r2, #0]
 8005962:	1a8a      	subs	r2, r1, r2
 8005964:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8005966:	2610      	movs	r6, #16
 8005968:	19bb      	adds	r3, r7, r6
 800596a:	1839      	adds	r1, r7, r0
 800596c:	197a      	adds	r2, r7, r5
 800596e:	8809      	ldrh	r1, [r1, #0]
 8005970:	8812      	ldrh	r2, [r2, #0]
 8005972:	188a      	adds	r2, r1, r2
 8005974:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8005976:	19bb      	adds	r3, r7, r6
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	2bff      	cmp	r3, #255	@ 0xff
 800597c:	d90f      	bls.n	800599e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 800597e:	19bb      	adds	r3, r7, r6
 8005980:	881a      	ldrh	r2, [r3, #0]
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	429a      	cmp	r2, r3
 8005988:	d000      	beq.n	800598c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 800598a:	e0b0      	b.n	8005aee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 800598c:	193b      	adds	r3, r7, r4
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	2108      	movs	r1, #8
 8005992:	0018      	movs	r0, r3
 8005994:	f000 fb80 	bl	8006098 <unsigned_bitwise_modulo>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d000      	beq.n	800599e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 800599c:	e0a7      	b.n	8005aee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800599e:	230c      	movs	r3, #12
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	2108      	movs	r1, #8
 80059a6:	0018      	movs	r0, r3
 80059a8:	f000 fb76 	bl	8006098 <unsigned_bitwise_modulo>
 80059ac:	0003      	movs	r3, r0
 80059ae:	2b80      	cmp	r3, #128	@ 0x80
 80059b0:	d117      	bne.n	80059e2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80059b2:	2316      	movs	r3, #22
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80059bc:	2317      	movs	r3, #23
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	2202      	movs	r2, #2
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e008      	b.n	80059d8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80059c6:	2316      	movs	r3, #22
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d103      	bne.n	80059d8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80059d0:	2317      	movs	r3, #23
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	2100      	movs	r1, #0
 80059de:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80059e0:	e21f      	b.n	8005e22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80059e2:	230c      	movs	r3, #12
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	2108      	movs	r1, #8
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 fb54 	bl	8006098 <unsigned_bitwise_modulo>
 80059f0:	1e03      	subs	r3, r0, #0
 80059f2:	d121      	bne.n	8005a38 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80059f4:	2212      	movs	r2, #18
 80059f6:	18bb      	adds	r3, r7, r2
 80059f8:	18ba      	adds	r2, r7, r2
 80059fa:	8812      	ldrh	r2, [r2, #0]
 80059fc:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80059fe:	2210      	movs	r2, #16
 8005a00:	18bb      	adds	r3, r7, r2
 8005a02:	18ba      	adds	r2, r7, r2
 8005a04:	8812      	ldrh	r2, [r2, #0]
 8005a06:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005a08:	2316      	movs	r3, #22
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a12:	2317      	movs	r3, #23
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	2200      	movs	r2, #0
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e008      	b.n	8005a2e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005a1c:	2316      	movs	r3, #22
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d103      	bne.n	8005a2e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a26:	2317      	movs	r3, #23
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	2100      	movs	r1, #0
 8005a34:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005a36:	e1f4      	b.n	8005e22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005a38:	230c      	movs	r3, #12
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	2108      	movs	r1, #8
 8005a40:	0018      	movs	r0, r3
 8005a42:	f000 fb29 	bl	8006098 <unsigned_bitwise_modulo>
 8005a46:	0003      	movs	r3, r0
 8005a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a4a:	d821      	bhi.n	8005a90 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005a4c:	2212      	movs	r2, #18
 8005a4e:	18bb      	adds	r3, r7, r2
 8005a50:	18ba      	adds	r2, r7, r2
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005a56:	2210      	movs	r2, #16
 8005a58:	18bb      	adds	r3, r7, r2
 8005a5a:	18ba      	adds	r2, r7, r2
 8005a5c:	8812      	ldrh	r2, [r2, #0]
 8005a5e:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005a60:	2316      	movs	r3, #22
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a6a:	2317      	movs	r3, #23
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e008      	b.n	8005a86 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005a74:	2316      	movs	r3, #22
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d103      	bne.n	8005a86 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a7e:	2317      	movs	r3, #23
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005a8e:	e1c8      	b.n	8005e22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005a90:	230c      	movs	r3, #12
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	2108      	movs	r1, #8
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f000 fafd 	bl	8006098 <unsigned_bitwise_modulo>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	2b80      	cmp	r3, #128	@ 0x80
 8005aa2:	d800      	bhi.n	8005aa6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8005aa4:	e1bd      	b.n	8005e22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005aa6:	2212      	movs	r2, #18
 8005aa8:	18bb      	adds	r3, r7, r2
 8005aaa:	18ba      	adds	r2, r7, r2
 8005aac:	8812      	ldrh	r2, [r2, #0]
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005ab2:	2210      	movs	r2, #16
 8005ab4:	18bb      	adds	r3, r7, r2
 8005ab6:	18ba      	adds	r2, r7, r2
 8005ab8:	8812      	ldrh	r2, [r2, #0]
 8005aba:	3201      	adds	r2, #1
 8005abc:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005abe:	2316      	movs	r3, #22
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ac8:	2317      	movs	r3, #23
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e008      	b.n	8005ae4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005ad2:	2316      	movs	r3, #22
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d103      	bne.n	8005ae4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005adc:	2317      	movs	r3, #23
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	2100      	movs	r1, #0
 8005aea:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005aec:	e199      	b.n	8005e22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8005aee:	2110      	movs	r1, #16
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	881a      	ldrh	r2, [r3, #0]
 8005af4:	2380      	movs	r3, #128	@ 0x80
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d810      	bhi.n	8005b1e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005afc:	187b      	adds	r3, r7, r1
 8005afe:	881a      	ldrh	r2, [r3, #0]
 8005b00:	2380      	movs	r3, #128	@ 0x80
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d000      	beq.n	8005b0a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8005b08:	e18c      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005b0a:	230c      	movs	r3, #12
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	2108      	movs	r1, #8
 8005b12:	0018      	movs	r0, r3
 8005b14:	f000 fac0 	bl	8006098 <unsigned_bitwise_modulo>
 8005b18:	1e03      	subs	r3, r0, #0
 8005b1a:	d100      	bne.n	8005b1e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005b1c:	e182      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005b1e:	230c      	movs	r3, #12
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	2108      	movs	r1, #8
 8005b26:	0018      	movs	r0, r3
 8005b28:	f000 fab6 	bl	8006098 <unsigned_bitwise_modulo>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	2b80      	cmp	r3, #128	@ 0x80
 8005b30:	d159      	bne.n	8005be6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005b32:	2212      	movs	r2, #18
 8005b34:	18bb      	adds	r3, r7, r2
 8005b36:	18ba      	adds	r2, r7, r2
 8005b38:	8812      	ldrh	r2, [r2, #0]
 8005b3a:	3a01      	subs	r2, #1
 8005b3c:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005b3e:	2110      	movs	r1, #16
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	187a      	adds	r2, r7, r1
 8005b44:	8812      	ldrh	r2, [r2, #0]
 8005b46:	3201      	adds	r2, #1
 8005b48:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005b4a:	000c      	movs	r4, r1
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	2101      	movs	r1, #1
 8005b52:	0018      	movs	r0, r3
 8005b54:	f000 faa0 	bl	8006098 <unsigned_bitwise_modulo>
 8005b58:	1e03      	subs	r3, r0, #0
 8005b5a:	d121      	bne.n	8005ba0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005b5c:	193b      	adds	r3, r7, r4
 8005b5e:	193a      	adds	r2, r7, r4
 8005b60:	8812      	ldrh	r2, [r2, #0]
 8005b62:	0852      	lsrs	r2, r2, #1
 8005b64:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005b66:	2316      	movs	r3, #22
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d108      	bne.n	8005b82 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005b70:	2317      	movs	r3, #23
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	5499      	strb	r1, [r3, r2]
 8005b80:	e150      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005b82:	2316      	movs	r3, #22
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d000      	beq.n	8005b8e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8005b8c:	e14a      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005b8e:	2317      	movs	r3, #23
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	5499      	strb	r1, [r3, r2]
 8005b9e:	e141      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005ba0:	2210      	movs	r2, #16
 8005ba2:	18bb      	adds	r3, r7, r2
 8005ba4:	18ba      	adds	r2, r7, r2
 8005ba6:	8812      	ldrh	r2, [r2, #0]
 8005ba8:	0852      	lsrs	r2, r2, #1
 8005baa:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005bac:	2316      	movs	r3, #22
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d108      	bne.n	8005bc8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005bb6:	2317      	movs	r3, #23
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	5499      	strb	r1, [r3, r2]
 8005bc6:	e12d      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005bc8:	2316      	movs	r3, #22
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d000      	beq.n	8005bd4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 8005bd2:	e127      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005bd4:	2317      	movs	r3, #23
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	2101      	movs	r1, #1
 8005be2:	5499      	strb	r1, [r3, r2]
 8005be4:	e11e      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005be6:	230c      	movs	r3, #12
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	2108      	movs	r1, #8
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f000 fa52 	bl	8006098 <unsigned_bitwise_modulo>
 8005bf4:	1e03      	subs	r3, r0, #0
 8005bf6:	d152      	bne.n	8005c9e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005bf8:	2212      	movs	r2, #18
 8005bfa:	18bb      	adds	r3, r7, r2
 8005bfc:	18ba      	adds	r2, r7, r2
 8005bfe:	8812      	ldrh	r2, [r2, #0]
 8005c00:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005c02:	2410      	movs	r4, #16
 8005c04:	193b      	adds	r3, r7, r4
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	2101      	movs	r1, #1
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 fa44 	bl	8006098 <unsigned_bitwise_modulo>
 8005c10:	1e03      	subs	r3, r0, #0
 8005c12:	d121      	bne.n	8005c58 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005c14:	193b      	adds	r3, r7, r4
 8005c16:	193a      	adds	r2, r7, r4
 8005c18:	8812      	ldrh	r2, [r2, #0]
 8005c1a:	0852      	lsrs	r2, r2, #1
 8005c1c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005c1e:	2316      	movs	r3, #22
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d108      	bne.n	8005c3a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c28:	2317      	movs	r3, #23
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	2100      	movs	r1, #0
 8005c36:	5499      	strb	r1, [r3, r2]
 8005c38:	e0f4      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005c3a:	2316      	movs	r3, #22
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d000      	beq.n	8005c46 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8005c44:	e0ee      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c46:	2317      	movs	r3, #23
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	2101      	movs	r1, #1
 8005c54:	5499      	strb	r1, [r3, r2]
 8005c56:	e0e5      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005c58:	2210      	movs	r2, #16
 8005c5a:	18bb      	adds	r3, r7, r2
 8005c5c:	18ba      	adds	r2, r7, r2
 8005c5e:	8812      	ldrh	r2, [r2, #0]
 8005c60:	0852      	lsrs	r2, r2, #1
 8005c62:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005c64:	2316      	movs	r3, #22
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d108      	bne.n	8005c80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c6e:	2317      	movs	r3, #23
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]
 8005c7e:	e0d1      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005c80:	2316      	movs	r3, #22
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d000      	beq.n	8005c8c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8005c8a:	e0cb      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005c8c:	2317      	movs	r3, #23
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	2201      	movs	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	2101      	movs	r1, #1
 8005c9a:	5499      	strb	r1, [r3, r2]
 8005c9c:	e0c2      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	2108      	movs	r1, #8
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 f9f6 	bl	8006098 <unsigned_bitwise_modulo>
 8005cac:	0003      	movs	r3, r0
 8005cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cb0:	d856      	bhi.n	8005d60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005cb2:	2212      	movs	r2, #18
 8005cb4:	18bb      	adds	r3, r7, r2
 8005cb6:	18ba      	adds	r2, r7, r2
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005cbc:	2410      	movs	r4, #16
 8005cbe:	193b      	adds	r3, r7, r4
 8005cc0:	193a      	adds	r2, r7, r4
 8005cc2:	8812      	ldrh	r2, [r2, #0]
 8005cc4:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005cc6:	193b      	adds	r3, r7, r4
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	2101      	movs	r1, #1
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 f9e3 	bl	8006098 <unsigned_bitwise_modulo>
 8005cd2:	1e03      	subs	r3, r0, #0
 8005cd4:	d121      	bne.n	8005d1a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005cd6:	193b      	adds	r3, r7, r4
 8005cd8:	193a      	adds	r2, r7, r4
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	0852      	lsrs	r2, r2, #1
 8005cde:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005ce0:	2316      	movs	r3, #22
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d108      	bne.n	8005cfc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005cea:	2317      	movs	r3, #23
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	5499      	strb	r1, [r3, r2]
 8005cfa:	e093      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005cfc:	2316      	movs	r3, #22
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d000      	beq.n	8005d08 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 8005d06:	e08d      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d08:	2317      	movs	r3, #23
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	2101      	movs	r1, #1
 8005d16:	5499      	strb	r1, [r3, r2]
 8005d18:	e084      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005d1a:	2210      	movs	r2, #16
 8005d1c:	18bb      	adds	r3, r7, r2
 8005d1e:	18ba      	adds	r2, r7, r2
 8005d20:	8812      	ldrh	r2, [r2, #0]
 8005d22:	0852      	lsrs	r2, r2, #1
 8005d24:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005d26:	2316      	movs	r3, #22
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d108      	bne.n	8005d42 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d30:	2317      	movs	r3, #23
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	5499      	strb	r1, [r3, r2]
 8005d40:	e070      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d42:	2316      	movs	r3, #22
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d000      	beq.n	8005d4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8005d4c:	e06a      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005d4e:	2317      	movs	r3, #23
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	5499      	strb	r1, [r3, r2]
 8005d5e:	e061      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005d60:	230c      	movs	r3, #12
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	2108      	movs	r1, #8
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 f995 	bl	8006098 <unsigned_bitwise_modulo>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	2b80      	cmp	r3, #128	@ 0x80
 8005d72:	d957      	bls.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005d74:	2212      	movs	r2, #18
 8005d76:	18bb      	adds	r3, r7, r2
 8005d78:	18ba      	adds	r2, r7, r2
 8005d7a:	8812      	ldrh	r2, [r2, #0]
 8005d7c:	3a01      	subs	r2, #1
 8005d7e:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005d80:	2410      	movs	r4, #16
 8005d82:	193b      	adds	r3, r7, r4
 8005d84:	193a      	adds	r2, r7, r4
 8005d86:	8812      	ldrh	r2, [r2, #0]
 8005d88:	3201      	adds	r2, #1
 8005d8a:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005d8c:	193b      	adds	r3, r7, r4
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	2101      	movs	r1, #1
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 f980 	bl	8006098 <unsigned_bitwise_modulo>
 8005d98:	1e03      	subs	r3, r0, #0
 8005d9a:	d120      	bne.n	8005dde <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005d9c:	193b      	adds	r3, r7, r4
 8005d9e:	193a      	adds	r2, r7, r4
 8005da0:	8812      	ldrh	r2, [r2, #0]
 8005da2:	0852      	lsrs	r2, r2, #1
 8005da4:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005da6:	2316      	movs	r3, #22
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005db0:	2317      	movs	r3, #23
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	5499      	strb	r1, [r3, r2]
 8005dc0:	e030      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005dc2:	2316      	movs	r3, #22
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d12b      	bne.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005dcc:	2317      	movs	r3, #23
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	2101      	movs	r1, #1
 8005dda:	5499      	strb	r1, [r3, r2]
 8005ddc:	e022      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005dde:	2210      	movs	r2, #16
 8005de0:	18bb      	adds	r3, r7, r2
 8005de2:	18ba      	adds	r2, r7, r2
 8005de4:	8812      	ldrh	r2, [r2, #0]
 8005de6:	0852      	lsrs	r2, r2, #1
 8005de8:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005dea:	2316      	movs	r3, #22
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005df4:	2317      	movs	r3, #23
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	2100      	movs	r1, #0
 8005e02:	5499      	strb	r1, [r3, r2]
 8005e04:	e00e      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005e06:	2316      	movs	r3, #22
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d109      	bne.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005e10:	2317      	movs	r3, #23
 8005e12:	18fb      	adds	r3, r7, r3
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	5499      	strb	r1, [r3, r2]
 8005e20:	e000      	b.n	8005e24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005e22:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8005e24:	2316      	movs	r3, #22
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d152      	bne.n	8005ed4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005e2e:	2317      	movs	r3, #23
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005e38:	2312      	movs	r3, #18
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	2280      	movs	r2, #128	@ 0x80
 8005e40:	0052      	lsls	r2, r2, #1
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	829a      	strh	r2, [r3, #20]
 8005e4a:	e099      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005e4c:	2317      	movs	r3, #23
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d11b      	bne.n	8005e8e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	89db      	ldrh	r3, [r3, #14]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f000 f91a 	bl	8006098 <unsigned_bitwise_modulo>
 8005e64:	1e03      	subs	r3, r0, #0
 8005e66:	d109      	bne.n	8005e7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005e68:	2312      	movs	r3, #18
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	2280      	movs	r2, #128	@ 0x80
 8005e70:	0052      	lsls	r2, r2, #1
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	829a      	strh	r2, [r3, #20]
 8005e7a:	e081      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8005e7c:	2312      	movs	r3, #18
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	22ff      	movs	r2, #255	@ 0xff
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	829a      	strh	r2, [r3, #20]
 8005e8c:	e078      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005e8e:	2317      	movs	r3, #23
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d000      	beq.n	8005e9a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8005e98:	e072      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	89db      	ldrh	r3, [r3, #14]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 f8f8 	bl	8006098 <unsigned_bitwise_modulo>
 8005ea8:	1e03      	subs	r3, r0, #0
 8005eaa:	d109      	bne.n	8005ec0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005eac:	2312      	movs	r3, #18
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	2280      	movs	r2, #128	@ 0x80
 8005eb4:	0052      	lsls	r2, r2, #1
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	829a      	strh	r2, [r3, #20]
 8005ebe:	e05f      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8005ec0:	2312      	movs	r3, #18
 8005ec2:	18fb      	adds	r3, r7, r3
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	32ff      	adds	r2, #255	@ 0xff
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	829a      	strh	r2, [r3, #20]
 8005ed2:	e055      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005ed4:	2316      	movs	r3, #22
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d150      	bne.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005ede:	2317      	movs	r3, #23
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005ee8:	2310      	movs	r3, #16
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	2280      	movs	r2, #128	@ 0x80
 8005ef0:	0052      	lsls	r2, r2, #1
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	829a      	strh	r2, [r3, #20]
 8005efa:	e041      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005efc:	2317      	movs	r3, #23
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d11b      	bne.n	8005f3e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	89db      	ldrh	r3, [r3, #14]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f000 f8c2 	bl	8006098 <unsigned_bitwise_modulo>
 8005f14:	1e03      	subs	r3, r0, #0
 8005f16:	d109      	bne.n	8005f2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005f18:	2310      	movs	r3, #16
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	2280      	movs	r2, #128	@ 0x80
 8005f20:	0052      	lsls	r2, r2, #1
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	829a      	strh	r2, [r3, #20]
 8005f2a:	e029      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	22ff      	movs	r2, #255	@ 0xff
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	829a      	strh	r2, [r3, #20]
 8005f3c:	e020      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005f3e:	2317      	movs	r3, #23
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d11b      	bne.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	89db      	ldrh	r3, [r3, #14]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2101      	movs	r1, #1
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 f8a1 	bl	8006098 <unsigned_bitwise_modulo>
 8005f56:	1e03      	subs	r3, r0, #0
 8005f58:	d109      	bne.n	8005f6e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	2280      	movs	r2, #128	@ 0x80
 8005f62:	0052      	lsls	r2, r2, #1
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	829a      	strh	r2, [r3, #20]
 8005f6c:	e008      	b.n	8005f80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8005f6e:	2310      	movs	r3, #16
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	2202      	movs	r2, #2
 8005f76:	32ff      	adds	r2, #255	@ 0xff
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7ff fbf4 	bl	8005770 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8a9b      	ldrh	r3, [r3, #20]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2280      	movs	r2, #128	@ 0x80
 8005f90:	0052      	lsls	r2, r2, #1
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8adb      	ldrh	r3, [r3, #22]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8b9b      	ldrh	r3, [r3, #28]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	83da      	strh	r2, [r3, #30]

    return 1;
 8005fb6:	2301      	movs	r3, #1
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b007      	add	sp, #28
 8005fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005fc4:	46c0      	nop			@ (mov r8, r8)
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005fca:	b5b0      	push	{r4, r5, r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8005fd4:	250f      	movs	r5, #15
 8005fd6:	197c      	adds	r4, r7, r5
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0011      	movs	r1, r2
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f003 fd8c 	bl	8009afc <HAL_TIM_OC_Start_IT>
 8005fe4:	0003      	movs	r3, r0
 8005fe6:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8005fe8:	197b      	adds	r3, r7, r5
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <Start_OC_TIM+0x2a>

		Error_Handler();
 8005ff0:	f7fc f9a2 	bl	8002338 <Error_Handler>
	}

	return ok;
 8005ff4:	230f      	movs	r3, #15
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	781b      	ldrb	r3, [r3, #0]
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b004      	add	sp, #16
 8006000:	bdb0      	pop	{r4, r5, r7, pc}

08006002 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8006002:	b5b0      	push	{r4, r5, r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 800600c:	250f      	movs	r5, #15
 800600e:	197c      	adds	r4, r7, r5
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	0011      	movs	r1, r2
 8006016:	0018      	movs	r0, r3
 8006018:	f003 fe94 	bl	8009d44 <HAL_TIM_OC_Stop_IT>
 800601c:	0003      	movs	r3, r0
 800601e:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8006020:	197b      	adds	r3, r7, r5
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <Stop_OC_TIM+0x2a>

		Error_Handler();
 8006028:	f7fc f986 	bl	8002338 <Error_Handler>
	}

	return ok;
 800602c:	230f      	movs	r3, #15
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	781b      	ldrb	r3, [r3, #0]
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b004      	add	sp, #16
 8006038:	bdb0      	pop	{r4, r5, r7, pc}

0800603a <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	0002      	movs	r2, r0
 8006042:	1dbb      	adds	r3, r7, #6
 8006044:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 8006046:	230e      	movs	r3, #14
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	2202      	movs	r2, #2
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e014      	b.n	800607a <isPrime+0x40>
        if (x % d == 0)
 8006050:	1dba      	adds	r2, r7, #6
 8006052:	230e      	movs	r3, #14
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	8812      	ldrh	r2, [r2, #0]
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	0019      	movs	r1, r3
 800605c:	0010      	movs	r0, r2
 800605e:	f7fa f8d7 	bl	8000210 <__aeabi_uidivmod>
 8006062:	000b      	movs	r3, r1
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <isPrime+0x34>
            return NO;
 800606a:	2300      	movs	r3, #0
 800606c:	e010      	b.n	8006090 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 800606e:	210e      	movs	r1, #14
 8006070:	187b      	adds	r3, r7, r1
 8006072:	881a      	ldrh	r2, [r3, #0]
 8006074:	187b      	adds	r3, r7, r1
 8006076:	3201      	adds	r2, #1
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	220e      	movs	r2, #14
 800607c:	18bb      	adds	r3, r7, r2
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	18ba      	adds	r2, r7, r2
 8006082:	8812      	ldrh	r2, [r2, #0]
 8006084:	435a      	muls	r2, r3
 8006086:	1dbb      	adds	r3, r7, #6
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	dde0      	ble.n	8006050 <isPrime+0x16>
    }
    return YES;
 800608e:	2301      	movs	r3, #1
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	b004      	add	sp, #16
 8006096:	bd80      	pop	{r7, pc}

08006098 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	000a      	movs	r2, r1
 80060a2:	1cfb      	adds	r3, r7, #3
 80060a4:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 80060a6:	1cfb      	adds	r3, r7, #3
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2201      	movs	r2, #1
 80060ac:	409a      	lsls	r2, r3
 80060ae:	0013      	movs	r3, r2
 80060b0:	3b01      	subs	r3, #1
 80060b2:	001a      	movs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4013      	ands	r3, r2
}
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b002      	add	sp, #8
 80060be:	bd80      	pop	{r7, pc}

080060c0 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80060c4:	b662      	cpsie	i
}
 80060c6:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80060c8:	2301      	movs	r3, #1
}
 80060ca:	0018      	movs	r0, r3
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	000a      	movs	r2, r1
 80060da:	1cbb      	adds	r3, r7, #2
 80060dc:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	1cba      	adds	r2, r7, #2
 80060e4:	8812      	ldrh	r2, [r2, #0]
 80060e6:	4013      	ands	r3, r2
 80060e8:	d001      	beq.n	80060ee <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 80060ee:	2300      	movs	r3, #0
    }
}
 80060f0:	0018      	movs	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b002      	add	sp, #8
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	000a      	movs	r2, r1
 8006102:	1cbb      	adds	r3, r7, #2
 8006104:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	1cbb      	adds	r3, r7, #2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	46c0      	nop			@ (mov r8, r8)
 8006116:	46bd      	mov	sp, r7
 8006118:	b002      	add	sp, #8
 800611a:	bd80      	pop	{r7, pc}

0800611c <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	000a      	movs	r2, r1
 8006126:	1cbb      	adds	r3, r7, #2
 8006128:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	1cba      	adds	r2, r7, #2
 8006130:	8812      	ldrh	r2, [r2, #0]
 8006132:	43d2      	mvns	r2, r2
 8006134:	401a      	ands	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b002      	add	sp, #8
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006144:	480d      	ldr	r0, [pc, #52]	@ (800617c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006146:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006148:	f7ff ff3a 	bl	8005fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800614c:	480c      	ldr	r0, [pc, #48]	@ (8006180 <LoopForever+0x6>)
  ldr r1, =_edata
 800614e:	490d      	ldr	r1, [pc, #52]	@ (8006184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006150:	4a0d      	ldr	r2, [pc, #52]	@ (8006188 <LoopForever+0xe>)
  movs r3, #0
 8006152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006154:	e002      	b.n	800615c <LoopCopyDataInit>

08006156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800615a:	3304      	adds	r3, #4

0800615c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800615c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800615e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006160:	d3f9      	bcc.n	8006156 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006162:	4a0a      	ldr	r2, [pc, #40]	@ (800618c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006164:	4c0a      	ldr	r4, [pc, #40]	@ (8006190 <LoopForever+0x16>)
  movs r3, #0
 8006166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006168:	e001      	b.n	800616e <LoopFillZerobss>

0800616a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800616a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800616c:	3204      	adds	r2, #4

0800616e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800616e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006170:	d3fb      	bcc.n	800616a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006172:	f007 f9ed 	bl	800d550 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006176:	f7fe fad9 	bl	800472c <main>

0800617a <LoopForever>:

LoopForever:
  b LoopForever
 800617a:	e7fe      	b.n	800617a <LoopForever>
  ldr   r0, =_estack
 800617c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006184:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 8006188:	0800e044 	.word	0x0800e044
  ldr r2, =_sbss
 800618c:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 8006190:	20000ce8 	.word	0x20000ce8

08006194 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006194:	e7fe      	b.n	8006194 <ADC1_IRQHandler>
	...

08006198 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800619e:	1dfb      	adds	r3, r7, #7
 80061a0:	2200      	movs	r2, #0
 80061a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061a4:	4b0b      	ldr	r3, [pc, #44]	@ (80061d4 <HAL_Init+0x3c>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b0a      	ldr	r3, [pc, #40]	@ (80061d4 <HAL_Init+0x3c>)
 80061aa:	2180      	movs	r1, #128	@ 0x80
 80061ac:	0049      	lsls	r1, r1, #1
 80061ae:	430a      	orrs	r2, r1
 80061b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061b2:	2000      	movs	r0, #0
 80061b4:	f000 f810 	bl	80061d8 <HAL_InitTick>
 80061b8:	1e03      	subs	r3, r0, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80061bc:	1dfb      	adds	r3, r7, #7
 80061be:	2201      	movs	r2, #1
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	e001      	b.n	80061c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80061c4:	f7fe fef8 	bl	8004fb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	781b      	ldrb	r3, [r3, #0]
}
 80061cc:	0018      	movs	r0, r3
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b002      	add	sp, #8
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40022000 	.word	0x40022000

080061d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061d8:	b590      	push	{r4, r7, lr}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061e0:	230f      	movs	r3, #15
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80061e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006260 <HAL_InitTick+0x88>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d02b      	beq.n	8006248 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80061f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006264 <HAL_InitTick+0x8c>)
 80061f2:	681c      	ldr	r4, [r3, #0]
 80061f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006260 <HAL_InitTick+0x88>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	0019      	movs	r1, r3
 80061fa:	23fa      	movs	r3, #250	@ 0xfa
 80061fc:	0098      	lsls	r0, r3, #2
 80061fe:	f7f9 ff81 	bl	8000104 <__udivsi3>
 8006202:	0003      	movs	r3, r0
 8006204:	0019      	movs	r1, r3
 8006206:	0020      	movs	r0, r4
 8006208:	f7f9 ff7c 	bl	8000104 <__udivsi3>
 800620c:	0003      	movs	r3, r0
 800620e:	0018      	movs	r0, r3
 8006210:	f001 fb75 	bl	80078fe <HAL_SYSTICK_Config>
 8006214:	1e03      	subs	r3, r0, #0
 8006216:	d112      	bne.n	800623e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b03      	cmp	r3, #3
 800621c:	d80a      	bhi.n	8006234 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	2301      	movs	r3, #1
 8006222:	425b      	negs	r3, r3
 8006224:	2200      	movs	r2, #0
 8006226:	0018      	movs	r0, r3
 8006228:	f001 fb34 	bl	8007894 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800622c:	4b0e      	ldr	r3, [pc, #56]	@ (8006268 <HAL_InitTick+0x90>)
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e00d      	b.n	8006250 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006234:	230f      	movs	r3, #15
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	e008      	b.n	8006250 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800623e:	230f      	movs	r3, #15
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	2201      	movs	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e003      	b.n	8006250 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006248:	230f      	movs	r3, #15
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2201      	movs	r2, #1
 800624e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006250:	230f      	movs	r3, #15
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	781b      	ldrb	r3, [r3, #0]
}
 8006256:	0018      	movs	r0, r3
 8006258:	46bd      	mov	sp, r7
 800625a:	b005      	add	sp, #20
 800625c:	bd90      	pop	{r4, r7, pc}
 800625e:	46c0      	nop			@ (mov r8, r8)
 8006260:	20000454 	.word	0x20000454
 8006264:	2000044c 	.word	0x2000044c
 8006268:	20000450 	.word	0x20000450

0800626c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_IncTick+0x1c>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	001a      	movs	r2, r3
 8006276:	4b05      	ldr	r3, [pc, #20]	@ (800628c <HAL_IncTick+0x20>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	18d2      	adds	r2, r2, r3
 800627c:	4b03      	ldr	r3, [pc, #12]	@ (800628c <HAL_IncTick+0x20>)
 800627e:	601a      	str	r2, [r3, #0]
}
 8006280:	46c0      	nop			@ (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	20000454 	.word	0x20000454
 800628c:	20000ce4 	.word	0x20000ce4

08006290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  return uwTick;
 8006294:	4b02      	ldr	r3, [pc, #8]	@ (80062a0 <HAL_GetTick+0x10>)
 8006296:	681b      	ldr	r3, [r3, #0]
}
 8006298:	0018      	movs	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	20000ce4 	.word	0x20000ce4

080062a4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a05      	ldr	r2, [pc, #20]	@ (80062c8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80062b4:	401a      	ands	r2, r3
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b002      	add	sp, #8
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	fe3fffff 	.word	0xfe3fffff

080062cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	23e0      	movs	r3, #224	@ 0xe0
 80062da:	045b      	lsls	r3, r3, #17
 80062dc:	4013      	ands	r3, r2
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b002      	add	sp, #8
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	2104      	movs	r1, #4
 80062fa:	400a      	ands	r2, r1
 80062fc:	2107      	movs	r1, #7
 80062fe:	4091      	lsls	r1, r2
 8006300:	000a      	movs	r2, r1
 8006302:	43d2      	mvns	r2, r2
 8006304:	401a      	ands	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2104      	movs	r1, #4
 800630a:	400b      	ands	r3, r1
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	4099      	lsls	r1, r3
 8006310:	000b      	movs	r3, r1
 8006312:	431a      	orrs	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006318:	46c0      	nop			@ (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b004      	add	sp, #16
 800631e:	bd80      	pop	{r7, pc}

08006320 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	2104      	movs	r1, #4
 8006332:	400a      	ands	r2, r1
 8006334:	2107      	movs	r1, #7
 8006336:	4091      	lsls	r1, r2
 8006338:	000a      	movs	r2, r1
 800633a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2104      	movs	r1, #4
 8006340:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006342:	40da      	lsrs	r2, r3
 8006344:	0013      	movs	r3, r2
}
 8006346:	0018      	movs	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	b002      	add	sp, #8
 800634c:	bd80      	pop	{r7, pc}

0800634e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	23c0      	movs	r3, #192	@ 0xc0
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	4013      	ands	r3, r2
 8006360:	d101      	bne.n	8006366 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006366:	2300      	movs	r3, #0
}
 8006368:	0018      	movs	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	b002      	add	sp, #8
 800636e:	bd80      	pop	{r7, pc}

08006370 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	211f      	movs	r1, #31
 8006384:	400a      	ands	r2, r1
 8006386:	210f      	movs	r1, #15
 8006388:	4091      	lsls	r1, r2
 800638a:	000a      	movs	r2, r1
 800638c:	43d2      	mvns	r2, r2
 800638e:	401a      	ands	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0e9b      	lsrs	r3, r3, #26
 8006394:	210f      	movs	r1, #15
 8006396:	4019      	ands	r1, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	201f      	movs	r0, #31
 800639c:	4003      	ands	r3, r0
 800639e:	4099      	lsls	r1, r3
 80063a0:	000b      	movs	r3, r1
 80063a2:	431a      	orrs	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80063a8:	46c0      	nop			@ (mov r8, r8)
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b004      	add	sp, #16
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	035b      	lsls	r3, r3, #13
 80063c2:	0b5b      	lsrs	r3, r3, #13
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b002      	add	sp, #8
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	0352      	lsls	r2, r2, #13
 80063e4:	0b52      	lsrs	r2, r2, #13
 80063e6:	43d2      	mvns	r2, r2
 80063e8:	401a      	ands	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b002      	add	sp, #8
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	0212      	lsls	r2, r2, #8
 800640c:	43d2      	mvns	r2, r2
 800640e:	401a      	ands	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	400b      	ands	r3, r1
 8006418:	4904      	ldr	r1, [pc, #16]	@ (800642c <LL_ADC_SetChannelSamplingTime+0x34>)
 800641a:	400b      	ands	r3, r1
 800641c:	431a      	orrs	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	46bd      	mov	sp, r7
 8006426:	b004      	add	sp, #16
 8006428:	bd80      	pop	{r7, pc}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	07ffff00 	.word	0x07ffff00

08006430 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4a05      	ldr	r2, [pc, #20]	@ (8006454 <LL_ADC_EnableInternalRegulator+0x24>)
 800643e:	4013      	ands	r3, r2
 8006440:	2280      	movs	r2, #128	@ 0x80
 8006442:	0552      	lsls	r2, r2, #21
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800644a:	46c0      	nop			@ (mov r8, r8)
 800644c:	46bd      	mov	sp, r7
 800644e:	b002      	add	sp, #8
 8006450:	bd80      	pop	{r7, pc}
 8006452:	46c0      	nop			@ (mov r8, r8)
 8006454:	6fffffe8 	.word	0x6fffffe8

08006458 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	2380      	movs	r3, #128	@ 0x80
 8006466:	055b      	lsls	r3, r3, #21
 8006468:	401a      	ands	r2, r3
 800646a:	2380      	movs	r3, #128	@ 0x80
 800646c:	055b      	lsls	r3, r3, #21
 800646e:	429a      	cmp	r2, r3
 8006470:	d101      	bne.n	8006476 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006476:	2300      	movs	r3, #0
}
 8006478:	0018      	movs	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	b002      	add	sp, #8
 800647e:	bd80      	pop	{r7, pc}

08006480 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	4a04      	ldr	r2, [pc, #16]	@ (80064a0 <LL_ADC_Enable+0x20>)
 800648e:	4013      	ands	r3, r2
 8006490:	2201      	movs	r2, #1
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006498:	46c0      	nop			@ (mov r8, r8)
 800649a:	46bd      	mov	sp, r7
 800649c:	b002      	add	sp, #8
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	7fffffe8 	.word	0x7fffffe8

080064a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a04      	ldr	r2, [pc, #16]	@ (80064c4 <LL_ADC_Disable+0x20>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	2202      	movs	r2, #2
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80064bc:	46c0      	nop			@ (mov r8, r8)
 80064be:	46bd      	mov	sp, r7
 80064c0:	b002      	add	sp, #8
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	7fffffe8 	.word	0x7fffffe8

080064c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2201      	movs	r2, #1
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <LL_ADC_IsEnabled+0x18>
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <LL_ADC_IsEnabled+0x1a>
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	0018      	movs	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b002      	add	sp, #8
 80064e8:	bd80      	pop	{r7, pc}

080064ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2202      	movs	r2, #2
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d101      	bne.n	8006502 <LL_ADC_IsDisableOngoing+0x18>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <LL_ADC_IsDisableOngoing+0x1a>
 8006502:	2300      	movs	r3, #0
}
 8006504:	0018      	movs	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	b002      	add	sp, #8
 800650a:	bd80      	pop	{r7, pc}

0800650c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4a04      	ldr	r2, [pc, #16]	@ (800652c <LL_ADC_REG_StartConversion+0x20>)
 800651a:	4013      	ands	r3, r2
 800651c:	2204      	movs	r2, #4
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006524:	46c0      	nop			@ (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b002      	add	sp, #8
 800652a:	bd80      	pop	{r7, pc}
 800652c:	7fffffe8 	.word	0x7fffffe8

08006530 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	4a04      	ldr	r2, [pc, #16]	@ (8006550 <LL_ADC_REG_StopConversion+0x20>)
 800653e:	4013      	ands	r3, r2
 8006540:	2210      	movs	r2, #16
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006548:	46c0      	nop			@ (mov r8, r8)
 800654a:	46bd      	mov	sp, r7
 800654c:	b002      	add	sp, #8
 800654e:	bd80      	pop	{r7, pc}
 8006550:	7fffffe8 	.word	0x7fffffe8

08006554 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2204      	movs	r2, #4
 8006562:	4013      	ands	r3, r2
 8006564:	2b04      	cmp	r3, #4
 8006566:	d101      	bne.n	800656c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800656c:	2300      	movs	r3, #0
}
 800656e:	0018      	movs	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	b002      	add	sp, #8
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006580:	231f      	movs	r3, #31
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e19f      	b.n	80068de <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d12a      	bne.n	80065fc <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4acf      	ldr	r2, [pc, #828]	@ (80068e8 <HAL_ADC_Init+0x370>)
 80065aa:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4acf      	ldr	r2, [pc, #828]	@ (80068ec <HAL_ADC_Init+0x374>)
 80065b0:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4ace      	ldr	r2, [pc, #824]	@ (80068f0 <HAL_ADC_Init+0x378>)
 80065b6:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4ace      	ldr	r2, [pc, #824]	@ (80068f4 <HAL_ADC_Init+0x37c>)
 80065bc:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4acd      	ldr	r2, [pc, #820]	@ (80068f8 <HAL_ADC_Init+0x380>)
 80065c2:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4acd      	ldr	r2, [pc, #820]	@ (80068fc <HAL_ADC_Init+0x384>)
 80065c8:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4acc      	ldr	r2, [pc, #816]	@ (8006900 <HAL_ADC_Init+0x388>)
 80065ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2280      	movs	r2, #128	@ 0x80
 80065d4:	589b      	ldr	r3, [r3, r2]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2180      	movs	r1, #128	@ 0x80
 80065de:	4ac9      	ldr	r2, [pc, #804]	@ (8006904 <HAL_ADC_Init+0x38c>)
 80065e0:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2280      	movs	r2, #128	@ 0x80
 80065e6:	589b      	ldr	r3, [r3, r2]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	0010      	movs	r0, r2
 80065ec:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2254      	movs	r2, #84	@ 0x54
 80065f8:	2100      	movs	r1, #0
 80065fa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	0018      	movs	r0, r3
 8006602:	f7ff ff29 	bl	8006458 <LL_ADC_IsInternalRegulatorEnabled>
 8006606:	1e03      	subs	r3, r0, #0
 8006608:	d115      	bne.n	8006636 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	0018      	movs	r0, r3
 8006610:	f7ff ff0e 	bl	8006430 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006614:	4bbc      	ldr	r3, [pc, #752]	@ (8006908 <HAL_ADC_Init+0x390>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	49bc      	ldr	r1, [pc, #752]	@ (800690c <HAL_ADC_Init+0x394>)
 800661a:	0018      	movs	r0, r3
 800661c:	f7f9 fd72 	bl	8000104 <__udivsi3>
 8006620:	0003      	movs	r3, r0
 8006622:	3301      	adds	r3, #1
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006628:	e002      	b.n	8006630 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b01      	subs	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f9      	bne.n	800662a <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	0018      	movs	r0, r3
 800663c:	f7ff ff0c 	bl	8006458 <LL_ADC_IsInternalRegulatorEnabled>
 8006640:	1e03      	subs	r3, r0, #0
 8006642:	d10f      	bne.n	8006664 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006648:	2210      	movs	r2, #16
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006654:	2201      	movs	r2, #1
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800665c:	231f      	movs	r3, #31
 800665e:	18fb      	adds	r3, r7, r3
 8006660:	2201      	movs	r2, #1
 8006662:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	0018      	movs	r0, r3
 800666a:	f7ff ff73 	bl	8006554 <LL_ADC_REG_IsConversionOngoing>
 800666e:	0003      	movs	r3, r0
 8006670:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006676:	2210      	movs	r2, #16
 8006678:	4013      	ands	r3, r2
 800667a:	d000      	beq.n	800667e <HAL_ADC_Init+0x106>
 800667c:	e122      	b.n	80068c4 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d000      	beq.n	8006686 <HAL_ADC_Init+0x10e>
 8006684:	e11e      	b.n	80068c4 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668a:	4aa1      	ldr	r2, [pc, #644]	@ (8006910 <HAL_ADC_Init+0x398>)
 800668c:	4013      	ands	r3, r2
 800668e:	2202      	movs	r2, #2
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	0018      	movs	r0, r3
 800669c:	f7ff ff14 	bl	80064c8 <LL_ADC_IsEnabled>
 80066a0:	1e03      	subs	r3, r0, #0
 80066a2:	d000      	beq.n	80066a6 <HAL_ADC_Init+0x12e>
 80066a4:	e0ad      	b.n	8006802 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	7e1b      	ldrb	r3, [r3, #24]
 80066ae:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80066b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7e5b      	ldrb	r3, [r3, #25]
 80066b6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80066b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	7e9b      	ldrb	r3, [r3, #26]
 80066be:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80066c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <HAL_ADC_Init+0x158>
 80066ca:	2380      	movs	r3, #128	@ 0x80
 80066cc:	015b      	lsls	r3, r3, #5
 80066ce:	e000      	b.n	80066d2 <HAL_ADC_Init+0x15a>
 80066d0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80066d2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80066d8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da04      	bge.n	80066ec <HAL_ADC_Init+0x174>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	e001      	b.n	80066f0 <HAL_ADC_Init+0x178>
 80066ec:	2380      	movs	r3, #128	@ 0x80
 80066ee:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80066f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	212c      	movs	r1, #44	@ 0x2c
 80066f6:	5c5b      	ldrb	r3, [r3, r1]
 80066f8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80066fa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4313      	orrs	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	5c9b      	ldrb	r3, [r3, r2]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d115      	bne.n	8006738 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7e9b      	ldrb	r3, [r3, #26]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2280      	movs	r2, #128	@ 0x80
 8006718:	0252      	lsls	r2, r2, #9
 800671a:	4313      	orrs	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	e00b      	b.n	8006738 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006724:	2220      	movs	r2, #32
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006730:	2201      	movs	r2, #1
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006744:	23e0      	movs	r3, #224	@ 0xe0
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800674e:	4313      	orrs	r3, r2
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4313      	orrs	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a6d      	ldr	r2, [pc, #436]	@ (8006914 <HAL_ADC_Init+0x39c>)
 800675e:	4013      	ands	r3, r2
 8006760:	0019      	movs	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	430a      	orrs	r2, r1
 800676a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	0f9b      	lsrs	r3, r3, #30
 8006772:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006778:	4313      	orrs	r3, r2
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	223c      	movs	r2, #60	@ 0x3c
 8006784:	5c9b      	ldrb	r3, [r3, r2]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d111      	bne.n	80067ae <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	0f9b      	lsrs	r3, r3, #30
 8006790:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006796:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800679c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80067a2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	2201      	movs	r2, #1
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	4a58      	ldr	r2, [pc, #352]	@ (8006918 <HAL_ADC_Init+0x3a0>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	0019      	movs	r1, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	23c0      	movs	r3, #192	@ 0xc0
 80067ca:	061b      	lsls	r3, r3, #24
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d018      	beq.n	8006802 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80067d4:	2380      	movs	r3, #128	@ 0x80
 80067d6:	05db      	lsls	r3, r3, #23
 80067d8:	429a      	cmp	r2, r3
 80067da:	d012      	beq.n	8006802 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80067e0:	2380      	movs	r3, #128	@ 0x80
 80067e2:	061b      	lsls	r3, r3, #24
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d00c      	beq.n	8006802 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80067e8:	4b4c      	ldr	r3, [pc, #304]	@ (800691c <HAL_ADC_Init+0x3a4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a4c      	ldr	r2, [pc, #304]	@ (8006920 <HAL_ADC_Init+0x3a8>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	0019      	movs	r1, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	23f0      	movs	r3, #240	@ 0xf0
 80067f8:	039b      	lsls	r3, r3, #14
 80067fa:	401a      	ands	r2, r3
 80067fc:	4b47      	ldr	r3, [pc, #284]	@ (800691c <HAL_ADC_Init+0x3a4>)
 80067fe:	430a      	orrs	r2, r1
 8006800:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680a:	001a      	movs	r2, r3
 800680c:	2100      	movs	r1, #0
 800680e:	f7ff fd6a 	bl	80062e6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	4942      	ldr	r1, [pc, #264]	@ (8006924 <HAL_ADC_Init+0x3ac>)
 800681c:	001a      	movs	r2, r3
 800681e:	f7ff fd62 	bl	80062e6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2110      	movs	r1, #16
 8006836:	4249      	negs	r1, r1
 8006838:	430a      	orrs	r2, r1
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28
 800683c:	e018      	b.n	8006870 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	2380      	movs	r3, #128	@ 0x80
 8006844:	039b      	lsls	r3, r3, #14
 8006846:	429a      	cmp	r2, r3
 8006848:	d112      	bne.n	8006870 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	3b01      	subs	r3, #1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	221c      	movs	r2, #28
 800685a:	4013      	ands	r3, r2
 800685c:	2210      	movs	r2, #16
 800685e:	4252      	negs	r2, r2
 8006860:	409a      	lsls	r2, r3
 8006862:	0011      	movs	r1, r2
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2100      	movs	r1, #0
 8006876:	0018      	movs	r0, r3
 8006878:	f7ff fd52 	bl	8006320 <LL_ADC_GetSamplingTimeCommonChannels>
 800687c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006882:	429a      	cmp	r2, r3
 8006884:	d10b      	bne.n	800689e <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006890:	2203      	movs	r2, #3
 8006892:	4393      	bics	r3, r2
 8006894:	2201      	movs	r2, #1
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800689c:	e01c      	b.n	80068d8 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a2:	2212      	movs	r2, #18
 80068a4:	4393      	bics	r3, r2
 80068a6:	2210      	movs	r2, #16
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b2:	2201      	movs	r2, #1
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80068ba:	231f      	movs	r3, #31
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	2201      	movs	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80068c2:	e009      	b.n	80068d8 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c8:	2210      	movs	r2, #16
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80068d0:	231f      	movs	r3, #31
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	2201      	movs	r2, #1
 80068d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80068d8:	231f      	movs	r3, #31
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	781b      	ldrb	r3, [r3, #0]
}
 80068de:	0018      	movs	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b008      	add	sp, #32
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	46c0      	nop			@ (mov r8, r8)
 80068e8:	08006c41 	.word	0x08006c41
 80068ec:	08006c51 	.word	0x08006c51
 80068f0:	08006c61 	.word	0x08006c61
 80068f4:	08006c71 	.word	0x08006c71
 80068f8:	080076c9 	.word	0x080076c9
 80068fc:	080076d9 	.word	0x080076d9
 8006900:	080076e9 	.word	0x080076e9
 8006904:	08005001 	.word	0x08005001
 8006908:	2000044c 	.word	0x2000044c
 800690c:	00030d40 	.word	0x00030d40
 8006910:	fffffefd 	.word	0xfffffefd
 8006914:	ffde0201 	.word	0xffde0201
 8006918:	1ffffc02 	.word	0x1ffffc02
 800691c:	40012708 	.word	0x40012708
 8006920:	ffc3ffff 	.word	0xffc3ffff
 8006924:	07ffff04 	.word	0x07ffff04

08006928 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	230b      	movs	r3, #11
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	1c0a      	adds	r2, r1, #0
 8006938:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800693a:	2317      	movs	r3, #23
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	2200      	movs	r2, #0
 8006940:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d107      	bne.n	8006958 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694c:	2210      	movs	r2, #16
 800694e:	431a      	orrs	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e06d      	b.n	8006a34 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695c:	2201      	movs	r2, #1
 800695e:	4013      	ands	r3, r2
 8006960:	d03a      	beq.n	80069d8 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8006962:	230b      	movs	r3, #11
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b0a      	cmp	r3, #10
 800696a:	d82a      	bhi.n	80069c2 <HAL_ADC_RegisterCallback+0x9a>
 800696c:	009a      	lsls	r2, r3, #2
 800696e:	4b33      	ldr	r3, [pc, #204]	@ (8006a3c <HAL_ADC_RegisterCallback+0x114>)
 8006970:	18d3      	adds	r3, r2, r3
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800697c:	e057      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006984:	e053      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800698c:	e04f      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006994:	e04b      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800699c:	e047      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80069a4:	e043      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80069ac:	e03f      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2180      	movs	r1, #128	@ 0x80
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	505a      	str	r2, [r3, r1]
        break;
 80069b6:	e03a      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2184      	movs	r1, #132	@ 0x84
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	505a      	str	r2, [r3, r1]
        break;
 80069c0:	e035      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c6:	2210      	movs	r2, #16
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80069ce:	2317      	movs	r3, #23
 80069d0:	18fb      	adds	r3, r7, r3
 80069d2:	2201      	movs	r2, #1
 80069d4:	701a      	strb	r2, [r3, #0]
        break;
 80069d6:	e02a      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d11c      	bne.n	8006a1a <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 80069e0:	230b      	movs	r3, #11
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d002      	beq.n	80069f0 <HAL_ADC_RegisterCallback+0xc8>
 80069ea:	2b0a      	cmp	r3, #10
 80069ec:	d005      	beq.n	80069fa <HAL_ADC_RegisterCallback+0xd2>
 80069ee:	e009      	b.n	8006a04 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2180      	movs	r1, #128	@ 0x80
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	505a      	str	r2, [r3, r1]
        break;
 80069f8:	e019      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2184      	movs	r1, #132	@ 0x84
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	505a      	str	r2, [r3, r1]
        break;
 8006a02:	e014      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a08:	2210      	movs	r2, #16
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006a10:	2317      	movs	r3, #23
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	2201      	movs	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
        break;
 8006a18:	e009      	b.n	8006a2e <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a1e:	2210      	movs	r2, #16
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8006a26:	2317      	movs	r3, #23
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006a2e:	2317      	movs	r3, #23
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	781b      	ldrb	r3, [r3, #0]
}
 8006a34:	0018      	movs	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b006      	add	sp, #24
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	0800de48 	.word	0x0800de48

08006a40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006a40:	b5b0      	push	{r4, r5, r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7ff fd7f 	bl	8006554 <LL_ADC_REG_IsConversionOngoing>
 8006a56:	1e03      	subs	r3, r0, #0
 8006a58:	d16c      	bne.n	8006b34 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2254      	movs	r2, #84	@ 0x54
 8006a5e:	5c9b      	ldrb	r3, [r3, r2]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_ADC_Start_DMA+0x28>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e06c      	b.n	8006b42 <HAL_ADC_Start_DMA+0x102>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2254      	movs	r2, #84	@ 0x54
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d113      	bne.n	8006aa4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7ff fd21 	bl	80064c8 <LL_ADC_IsEnabled>
 8006a86:	1e03      	subs	r3, r0, #0
 8006a88:	d004      	beq.n	8006a94 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7ff fd08 	bl	80064a4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006aa4:	2517      	movs	r5, #23
 8006aa6:	197c      	adds	r4, r7, r5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 fb02 	bl	80070b4 <ADC_Enable>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006ab4:	002c      	movs	r4, r5
 8006ab6:	193b      	adds	r3, r7, r4
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d13e      	bne.n	8006b3c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac2:	4a22      	ldr	r2, [pc, #136]	@ (8006b4c <HAL_ADC_Start_DMA+0x10c>)
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2280      	movs	r2, #128	@ 0x80
 8006ac8:	0052      	lsls	r2, r2, #1
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ada:	4a1d      	ldr	r2, [pc, #116]	@ (8006b50 <HAL_ADC_Start_DMA+0x110>)
 8006adc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b54 <HAL_ADC_Start_DMA+0x114>)
 8006ae4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aea:	4a1b      	ldr	r2, [pc, #108]	@ (8006b58 <HAL_ADC_Start_DMA+0x118>)
 8006aec:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	221c      	movs	r2, #28
 8006af4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2254      	movs	r2, #84	@ 0x54
 8006afa:	2100      	movs	r1, #0
 8006afc:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2110      	movs	r1, #16
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3340      	adds	r3, #64	@ 0x40
 8006b18:	0019      	movs	r1, r3
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	193c      	adds	r4, r7, r4
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f000 ff84 	bl	8007a2c <HAL_DMA_Start_IT>
 8006b24:	0003      	movs	r3, r0
 8006b26:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f7ff fced 	bl	800650c <LL_ADC_REG_StartConversion>
 8006b32:	e003      	b.n	8006b3c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006b34:	2317      	movs	r3, #23
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	2202      	movs	r2, #2
 8006b3a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006b3c:	2317      	movs	r3, #23
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	781b      	ldrb	r3, [r3, #0]
}
 8006b42:	0018      	movs	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b006      	add	sp, #24
 8006b48:	bdb0      	pop	{r4, r5, r7, pc}
 8006b4a:	46c0      	nop			@ (mov r8, r8)
 8006b4c:	fffff0fe 	.word	0xfffff0fe
 8006b50:	0800727d 	.word	0x0800727d
 8006b54:	08007349 	.word	0x08007349
 8006b58:	08007369 	.word	0x08007369

08006b5c <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006b5c:	b5b0      	push	{r4, r5, r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2254      	movs	r2, #84	@ 0x54
 8006b68:	5c9b      	ldrb	r3, [r3, r2]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_ADC_Stop_DMA+0x16>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e05f      	b.n	8006c32 <HAL_ADC_Stop_DMA+0xd6>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2254      	movs	r2, #84	@ 0x54
 8006b76:	2101      	movs	r1, #1
 8006b78:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006b7a:	250f      	movs	r5, #15
 8006b7c:	197c      	adds	r4, r7, r5
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fa55 	bl	8007030 <ADC_ConversionStop>
 8006b86:	0003      	movs	r3, r0
 8006b88:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006b8a:	0029      	movs	r1, r5
 8006b8c:	187b      	adds	r3, r7, r1
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d147      	bne.n	8006c24 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b98:	2225      	movs	r2, #37	@ 0x25
 8006b9a:	5c9b      	ldrb	r3, [r3, r2]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d112      	bne.n	8006bc8 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba6:	000d      	movs	r5, r1
 8006ba8:	187c      	adds	r4, r7, r1
 8006baa:	0018      	movs	r0, r3
 8006bac:	f000 ffc4 	bl	8007b38 <HAL_DMA_Abort>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006bb4:	197b      	adds	r3, r7, r5
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc0:	2240      	movs	r2, #64	@ 0x40
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2110      	movs	r1, #16
 8006bd4:	438a      	bics	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006bd8:	220f      	movs	r2, #15
 8006bda:	18bb      	adds	r3, r7, r2
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d107      	bne.n	8006bf2 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006be2:	18bc      	adds	r4, r7, r2
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f000 faea 	bl	80071c0 <ADC_Disable>
 8006bec:	0003      	movs	r3, r0
 8006bee:	7023      	strb	r3, [r4, #0]
 8006bf0:	e003      	b.n	8006bfa <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f000 fae3 	bl	80071c0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006bfa:	230f      	movs	r3, #15
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d107      	bne.n	8006c14 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c08:	4a0c      	ldr	r2, [pc, #48]	@ (8006c3c <HAL_ADC_Stop_DMA+0xe0>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2101      	movs	r1, #1
 8006c20:	438a      	bics	r2, r1
 8006c22:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2254      	movs	r2, #84	@ 0x54
 8006c28:	2100      	movs	r1, #0
 8006c2a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006c2c:	230f      	movs	r3, #15
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	781b      	ldrb	r3, [r3, #0]
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b004      	add	sp, #16
 8006c38:	bdb0      	pop	{r4, r5, r7, pc}
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	fffffefe 	.word	0xfffffefe

08006c40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006c48:	46c0      	nop			@ (mov r8, r8)
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b002      	add	sp, #8
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006c58:	46c0      	nop			@ (mov r8, r8)
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	b002      	add	sp, #8
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006c68:	46c0      	nop			@ (mov r8, r8)
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006c78:	46c0      	nop			@ (mov r8, r8)
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b002      	add	sp, #8
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c8a:	2317      	movs	r3, #23
 8006c8c:	18fb      	adds	r3, r7, r3
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2254      	movs	r2, #84	@ 0x54
 8006c9a:	5c9b      	ldrb	r3, [r3, r2]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_ADC_ConfigChannel+0x24>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e1c0      	b.n	8007026 <HAL_ADC_ConfigChannel+0x3a6>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2254      	movs	r2, #84	@ 0x54
 8006ca8:	2101      	movs	r1, #1
 8006caa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f7ff fc4f 	bl	8006554 <LL_ADC_REG_IsConversionOngoing>
 8006cb6:	1e03      	subs	r3, r0, #0
 8006cb8:	d000      	beq.n	8006cbc <HAL_ADC_ConfigChannel+0x3c>
 8006cba:	e1a3      	b.n	8007004 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d100      	bne.n	8006cc6 <HAL_ADC_ConfigChannel+0x46>
 8006cc4:	e143      	b.n	8006f4e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	2380      	movs	r3, #128	@ 0x80
 8006ccc:	061b      	lsls	r3, r3, #24
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d004      	beq.n	8006cdc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006cd6:	4ac1      	ldr	r2, [pc, #772]	@ (8006fdc <HAL_ADC_ConfigChannel+0x35c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d108      	bne.n	8006cee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	0019      	movs	r1, r3
 8006ce6:	0010      	movs	r0, r2
 8006ce8:	f7ff fb62 	bl	80063b0 <LL_ADC_REG_SetSequencerChAdd>
 8006cec:	e0c9      	b.n	8006e82 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	211f      	movs	r1, #31
 8006cf8:	400b      	ands	r3, r1
 8006cfa:	210f      	movs	r1, #15
 8006cfc:	4099      	lsls	r1, r3
 8006cfe:	000b      	movs	r3, r1
 8006d00:	43db      	mvns	r3, r3
 8006d02:	4013      	ands	r3, r2
 8006d04:	0019      	movs	r1, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	035b      	lsls	r3, r3, #13
 8006d0c:	0b5b      	lsrs	r3, r3, #13
 8006d0e:	d105      	bne.n	8006d1c <HAL_ADC_ConfigChannel+0x9c>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	0e9b      	lsrs	r3, r3, #26
 8006d16:	221f      	movs	r2, #31
 8006d18:	4013      	ands	r3, r2
 8006d1a:	e098      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2201      	movs	r2, #1
 8006d22:	4013      	ands	r3, r2
 8006d24:	d000      	beq.n	8006d28 <HAL_ADC_ConfigChannel+0xa8>
 8006d26:	e091      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x1cc>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d000      	beq.n	8006d34 <HAL_ADC_ConfigChannel+0xb4>
 8006d32:	e089      	b.n	8006e48 <HAL_ADC_ConfigChannel+0x1c8>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2204      	movs	r2, #4
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d000      	beq.n	8006d40 <HAL_ADC_ConfigChannel+0xc0>
 8006d3e:	e081      	b.n	8006e44 <HAL_ADC_ConfigChannel+0x1c4>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2208      	movs	r2, #8
 8006d46:	4013      	ands	r3, r2
 8006d48:	d000      	beq.n	8006d4c <HAL_ADC_ConfigChannel+0xcc>
 8006d4a:	e079      	b.n	8006e40 <HAL_ADC_ConfigChannel+0x1c0>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2210      	movs	r2, #16
 8006d52:	4013      	ands	r3, r2
 8006d54:	d000      	beq.n	8006d58 <HAL_ADC_ConfigChannel+0xd8>
 8006d56:	e071      	b.n	8006e3c <HAL_ADC_ConfigChannel+0x1bc>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d000      	beq.n	8006d64 <HAL_ADC_ConfigChannel+0xe4>
 8006d62:	e069      	b.n	8006e38 <HAL_ADC_ConfigChannel+0x1b8>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2240      	movs	r2, #64	@ 0x40
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d000      	beq.n	8006d70 <HAL_ADC_ConfigChannel+0xf0>
 8006d6e:	e061      	b.n	8006e34 <HAL_ADC_ConfigChannel+0x1b4>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2280      	movs	r2, #128	@ 0x80
 8006d76:	4013      	ands	r3, r2
 8006d78:	d000      	beq.n	8006d7c <HAL_ADC_ConfigChannel+0xfc>
 8006d7a:	e059      	b.n	8006e30 <HAL_ADC_ConfigChannel+0x1b0>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	2380      	movs	r3, #128	@ 0x80
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4013      	ands	r3, r2
 8006d86:	d151      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x1ac>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	2380      	movs	r3, #128	@ 0x80
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4013      	ands	r3, r2
 8006d92:	d149      	bne.n	8006e28 <HAL_ADC_ConfigChannel+0x1a8>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	2380      	movs	r3, #128	@ 0x80
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d141      	bne.n	8006e24 <HAL_ADC_ConfigChannel+0x1a4>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	2380      	movs	r3, #128	@ 0x80
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	4013      	ands	r3, r2
 8006daa:	d139      	bne.n	8006e20 <HAL_ADC_ConfigChannel+0x1a0>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	2380      	movs	r3, #128	@ 0x80
 8006db2:	015b      	lsls	r3, r3, #5
 8006db4:	4013      	ands	r3, r2
 8006db6:	d131      	bne.n	8006e1c <HAL_ADC_ConfigChannel+0x19c>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	019b      	lsls	r3, r3, #6
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d129      	bne.n	8006e18 <HAL_ADC_ConfigChannel+0x198>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	2380      	movs	r3, #128	@ 0x80
 8006dca:	01db      	lsls	r3, r3, #7
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d121      	bne.n	8006e14 <HAL_ADC_ConfigChannel+0x194>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	2380      	movs	r3, #128	@ 0x80
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d119      	bne.n	8006e10 <HAL_ADC_ConfigChannel+0x190>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	2380      	movs	r3, #128	@ 0x80
 8006de2:	025b      	lsls	r3, r3, #9
 8006de4:	4013      	ands	r3, r2
 8006de6:	d111      	bne.n	8006e0c <HAL_ADC_ConfigChannel+0x18c>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	2380      	movs	r3, #128	@ 0x80
 8006dee:	029b      	lsls	r3, r3, #10
 8006df0:	4013      	ands	r3, r2
 8006df2:	d109      	bne.n	8006e08 <HAL_ADC_ConfigChannel+0x188>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	2380      	movs	r3, #128	@ 0x80
 8006dfa:	02db      	lsls	r3, r3, #11
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d001      	beq.n	8006e04 <HAL_ADC_ConfigChannel+0x184>
 8006e00:	2312      	movs	r3, #18
 8006e02:	e024      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e04:	2300      	movs	r3, #0
 8006e06:	e022      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e08:	2311      	movs	r3, #17
 8006e0a:	e020      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	e01e      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e10:	230f      	movs	r3, #15
 8006e12:	e01c      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e14:	230e      	movs	r3, #14
 8006e16:	e01a      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e18:	230d      	movs	r3, #13
 8006e1a:	e018      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e1c:	230c      	movs	r3, #12
 8006e1e:	e016      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e20:	230b      	movs	r3, #11
 8006e22:	e014      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e24:	230a      	movs	r3, #10
 8006e26:	e012      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e28:	2309      	movs	r3, #9
 8006e2a:	e010      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	e00e      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e30:	2307      	movs	r3, #7
 8006e32:	e00c      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e34:	2306      	movs	r3, #6
 8006e36:	e00a      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e38:	2305      	movs	r3, #5
 8006e3a:	e008      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	e006      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e40:	2303      	movs	r3, #3
 8006e42:	e004      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e002      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x1ce>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	6852      	ldr	r2, [r2, #4]
 8006e52:	201f      	movs	r0, #31
 8006e54:	4002      	ands	r2, r0
 8006e56:	4093      	lsls	r3, r2
 8006e58:	000a      	movs	r2, r1
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	089b      	lsrs	r3, r3, #2
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d808      	bhi.n	8006e82 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	6859      	ldr	r1, [r3, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	001a      	movs	r2, r3
 8006e7e:	f7ff fa77 	bl	8006370 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	001a      	movs	r2, r3
 8006e90:	f7ff fab2 	bl	80063f8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db00      	blt.n	8006e9e <HAL_ADC_ConfigChannel+0x21e>
 8006e9c:	e0bc      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e9e:	4b50      	ldr	r3, [pc, #320]	@ (8006fe0 <HAL_ADC_ConfigChannel+0x360>)
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f7ff fa13 	bl	80062cc <LL_ADC_GetCommonPathInternalCh>
 8006ea6:	0003      	movs	r3, r0
 8006ea8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a4d      	ldr	r2, [pc, #308]	@ (8006fe4 <HAL_ADC_ConfigChannel+0x364>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d122      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	2380      	movs	r3, #128	@ 0x80
 8006eb8:	041b      	lsls	r3, r3, #16
 8006eba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006ebc:	d11d      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2280      	movs	r2, #128	@ 0x80
 8006ec2:	0412      	lsls	r2, r2, #16
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	4a46      	ldr	r2, [pc, #280]	@ (8006fe0 <HAL_ADC_ConfigChannel+0x360>)
 8006ec8:	0019      	movs	r1, r3
 8006eca:	0010      	movs	r0, r2
 8006ecc:	f7ff f9ea 	bl	80062a4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ed0:	4b45      	ldr	r3, [pc, #276]	@ (8006fe8 <HAL_ADC_ConfigChannel+0x368>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4945      	ldr	r1, [pc, #276]	@ (8006fec <HAL_ADC_ConfigChannel+0x36c>)
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f7f9 f914 	bl	8000104 <__udivsi3>
 8006edc:	0003      	movs	r3, r0
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	0013      	movs	r3, r2
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	189b      	adds	r3, r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006eea:	e002      	b.n	8006ef2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1f9      	bne.n	8006eec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006ef8:	e08e      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a3c      	ldr	r2, [pc, #240]	@ (8006ff0 <HAL_ADC_ConfigChannel+0x370>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10e      	bne.n	8006f22 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	2380      	movs	r3, #128	@ 0x80
 8006f08:	045b      	lsls	r3, r3, #17
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d109      	bne.n	8006f22 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2280      	movs	r2, #128	@ 0x80
 8006f12:	0452      	lsls	r2, r2, #17
 8006f14:	4313      	orrs	r3, r2
 8006f16:	4a32      	ldr	r2, [pc, #200]	@ (8006fe0 <HAL_ADC_ConfigChannel+0x360>)
 8006f18:	0019      	movs	r1, r3
 8006f1a:	0010      	movs	r0, r2
 8006f1c:	f7ff f9c2 	bl	80062a4 <LL_ADC_SetCommonPathInternalCh>
 8006f20:	e07a      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a33      	ldr	r2, [pc, #204]	@ (8006ff4 <HAL_ADC_ConfigChannel+0x374>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d000      	beq.n	8006f2e <HAL_ADC_ConfigChannel+0x2ae>
 8006f2c:	e074      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	2380      	movs	r3, #128	@ 0x80
 8006f32:	03db      	lsls	r3, r3, #15
 8006f34:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006f36:	d000      	beq.n	8006f3a <HAL_ADC_ConfigChannel+0x2ba>
 8006f38:	e06e      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2280      	movs	r2, #128	@ 0x80
 8006f3e:	03d2      	lsls	r2, r2, #15
 8006f40:	4313      	orrs	r3, r2
 8006f42:	4a27      	ldr	r2, [pc, #156]	@ (8006fe0 <HAL_ADC_ConfigChannel+0x360>)
 8006f44:	0019      	movs	r1, r3
 8006f46:	0010      	movs	r0, r2
 8006f48:	f7ff f9ac 	bl	80062a4 <LL_ADC_SetCommonPathInternalCh>
 8006f4c:	e064      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	2380      	movs	r3, #128	@ 0x80
 8006f54:	061b      	lsls	r3, r3, #24
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d004      	beq.n	8006f64 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006fdc <HAL_ADC_ConfigChannel+0x35c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d107      	bne.n	8006f74 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	0019      	movs	r1, r3
 8006f6e:	0010      	movs	r0, r2
 8006f70:	f7ff fa2f 	bl	80063d2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	da4d      	bge.n	8007018 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f7c:	4b18      	ldr	r3, [pc, #96]	@ (8006fe0 <HAL_ADC_ConfigChannel+0x360>)
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f7ff f9a4 	bl	80062cc <LL_ADC_GetCommonPathInternalCh>
 8006f84:	0003      	movs	r3, r0
 8006f86:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a15      	ldr	r2, [pc, #84]	@ (8006fe4 <HAL_ADC_ConfigChannel+0x364>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d108      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	4a18      	ldr	r2, [pc, #96]	@ (8006ff8 <HAL_ADC_ConfigChannel+0x378>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	4a11      	ldr	r2, [pc, #68]	@ (8006fe0 <HAL_ADC_ConfigChannel+0x360>)
 8006f9a:	0019      	movs	r1, r3
 8006f9c:	0010      	movs	r0, r2
 8006f9e:	f7ff f981 	bl	80062a4 <LL_ADC_SetCommonPathInternalCh>
 8006fa2:	e039      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a11      	ldr	r2, [pc, #68]	@ (8006ff0 <HAL_ADC_ConfigChannel+0x370>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d108      	bne.n	8006fc0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	4a12      	ldr	r2, [pc, #72]	@ (8006ffc <HAL_ADC_ConfigChannel+0x37c>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe0 <HAL_ADC_ConfigChannel+0x360>)
 8006fb6:	0019      	movs	r1, r3
 8006fb8:	0010      	movs	r0, r2
 8006fba:	f7ff f973 	bl	80062a4 <LL_ADC_SetCommonPathInternalCh>
 8006fbe:	e02b      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8006ff4 <HAL_ADC_ConfigChannel+0x374>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d126      	bne.n	8007018 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8007000 <HAL_ADC_ConfigChannel+0x380>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	4a03      	ldr	r2, [pc, #12]	@ (8006fe0 <HAL_ADC_ConfigChannel+0x360>)
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	0010      	movs	r0, r2
 8006fd6:	f7ff f965 	bl	80062a4 <LL_ADC_SetCommonPathInternalCh>
 8006fda:	e01d      	b.n	8007018 <HAL_ADC_ConfigChannel+0x398>
 8006fdc:	80000004 	.word	0x80000004
 8006fe0:	40012708 	.word	0x40012708
 8006fe4:	b0001000 	.word	0xb0001000
 8006fe8:	2000044c 	.word	0x2000044c
 8006fec:	00030d40 	.word	0x00030d40
 8006ff0:	b8004000 	.word	0xb8004000
 8006ff4:	b4002000 	.word	0xb4002000
 8006ff8:	ff7fffff 	.word	0xff7fffff
 8006ffc:	feffffff 	.word	0xfeffffff
 8007000:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007008:	2220      	movs	r2, #32
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007010:	2317      	movs	r3, #23
 8007012:	18fb      	adds	r3, r7, r3
 8007014:	2201      	movs	r2, #1
 8007016:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2254      	movs	r2, #84	@ 0x54
 800701c:	2100      	movs	r1, #0
 800701e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007020:	2317      	movs	r3, #23
 8007022:	18fb      	adds	r3, r7, r3
 8007024:	781b      	ldrb	r3, [r3, #0]
}
 8007026:	0018      	movs	r0, r3
 8007028:	46bd      	mov	sp, r7
 800702a:	b006      	add	sp, #24
 800702c:	bd80      	pop	{r7, pc}
 800702e:	46c0      	nop			@ (mov r8, r8)

08007030 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	0018      	movs	r0, r3
 800703e:	f7ff fa89 	bl	8006554 <LL_ADC_REG_IsConversionOngoing>
 8007042:	1e03      	subs	r3, r0, #0
 8007044:	d031      	beq.n	80070aa <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	0018      	movs	r0, r3
 800704c:	f7ff fa4d 	bl	80064ea <LL_ADC_IsDisableOngoing>
 8007050:	1e03      	subs	r3, r0, #0
 8007052:	d104      	bne.n	800705e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0018      	movs	r0, r3
 800705a:	f7ff fa69 	bl	8006530 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800705e:	f7ff f917 	bl	8006290 <HAL_GetTick>
 8007062:	0003      	movs	r3, r0
 8007064:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8007066:	e01a      	b.n	800709e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007068:	f7ff f912 	bl	8006290 <HAL_GetTick>
 800706c:	0002      	movs	r2, r0
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d913      	bls.n	800709e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	2204      	movs	r2, #4
 800707e:	4013      	ands	r3, r2
 8007080:	d00d      	beq.n	800709e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	2210      	movs	r2, #16
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007092:	2201      	movs	r2, #1
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e006      	b.n	80070ac <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2204      	movs	r2, #4
 80070a6:	4013      	ands	r3, r2
 80070a8:	d1de      	bne.n	8007068 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	0018      	movs	r0, r3
 80070ae:	46bd      	mov	sp, r7
 80070b0:	b004      	add	sp, #16
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80070bc:	2300      	movs	r3, #0
 80070be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7ff f9ff 	bl	80064c8 <LL_ADC_IsEnabled>
 80070ca:	1e03      	subs	r3, r0, #0
 80070cc:	d000      	beq.n	80070d0 <ADC_Enable+0x1c>
 80070ce:	e069      	b.n	80071a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	4a36      	ldr	r2, [pc, #216]	@ (80071b0 <ADC_Enable+0xfc>)
 80070d8:	4013      	ands	r3, r2
 80070da:	d00d      	beq.n	80070f8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e0:	2210      	movs	r2, #16
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ec:	2201      	movs	r2, #1
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e056      	b.n	80071a6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	0018      	movs	r0, r3
 80070fe:	f7ff f9bf 	bl	8006480 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8007102:	4b2c      	ldr	r3, [pc, #176]	@ (80071b4 <ADC_Enable+0x100>)
 8007104:	0018      	movs	r0, r3
 8007106:	f7ff f8e1 	bl	80062cc <LL_ADC_GetCommonPathInternalCh>
 800710a:	0002      	movs	r2, r0
 800710c:	2380      	movs	r3, #128	@ 0x80
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	4013      	ands	r3, r2
 8007112:	d00f      	beq.n	8007134 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007114:	4b28      	ldr	r3, [pc, #160]	@ (80071b8 <ADC_Enable+0x104>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4928      	ldr	r1, [pc, #160]	@ (80071bc <ADC_Enable+0x108>)
 800711a:	0018      	movs	r0, r3
 800711c:	f7f8 fff2 	bl	8000104 <__udivsi3>
 8007120:	0003      	movs	r3, r0
 8007122:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8007124:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007126:	e002      	b.n	800712e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	3b01      	subs	r3, #1
 800712c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f9      	bne.n	8007128 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	7e5b      	ldrb	r3, [r3, #25]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d033      	beq.n	80071a4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800713c:	f7ff f8a8 	bl	8006290 <HAL_GetTick>
 8007140:	0003      	movs	r3, r0
 8007142:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007144:	e027      	b.n	8007196 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	0018      	movs	r0, r3
 800714c:	f7ff f9bc 	bl	80064c8 <LL_ADC_IsEnabled>
 8007150:	1e03      	subs	r3, r0, #0
 8007152:	d104      	bne.n	800715e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	0018      	movs	r0, r3
 800715a:	f7ff f991 	bl	8006480 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800715e:	f7ff f897 	bl	8006290 <HAL_GetTick>
 8007162:	0002      	movs	r2, r0
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d914      	bls.n	8007196 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2201      	movs	r2, #1
 8007174:	4013      	ands	r3, r2
 8007176:	2b01      	cmp	r3, #1
 8007178:	d00d      	beq.n	8007196 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	2210      	movs	r2, #16
 8007180:	431a      	orrs	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800718a:	2201      	movs	r2, #1
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e007      	b.n	80071a6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2201      	movs	r2, #1
 800719e:	4013      	ands	r3, r2
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d1d0      	bne.n	8007146 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	0018      	movs	r0, r3
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b004      	add	sp, #16
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	46c0      	nop			@ (mov r8, r8)
 80071b0:	80000017 	.word	0x80000017
 80071b4:	40012708 	.word	0x40012708
 80071b8:	2000044c 	.word	0x2000044c
 80071bc:	00030d40 	.word	0x00030d40

080071c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	0018      	movs	r0, r3
 80071ce:	f7ff f98c 	bl	80064ea <LL_ADC_IsDisableOngoing>
 80071d2:	0003      	movs	r3, r0
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	0018      	movs	r0, r3
 80071dc:	f7ff f974 	bl	80064c8 <LL_ADC_IsEnabled>
 80071e0:	1e03      	subs	r3, r0, #0
 80071e2:	d046      	beq.n	8007272 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d143      	bne.n	8007272 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	2205      	movs	r2, #5
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d10d      	bne.n	8007214 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f7ff f951 	bl	80064a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2203      	movs	r2, #3
 8007208:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800720a:	f7ff f841 	bl	8006290 <HAL_GetTick>
 800720e:	0003      	movs	r3, r0
 8007210:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007212:	e028      	b.n	8007266 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007218:	2210      	movs	r2, #16
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007224:	2201      	movs	r2, #1
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e021      	b.n	8007274 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007230:	f7ff f82e 	bl	8006290 <HAL_GetTick>
 8007234:	0002      	movs	r2, r0
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d913      	bls.n	8007266 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2201      	movs	r2, #1
 8007246:	4013      	ands	r3, r2
 8007248:	d00d      	beq.n	8007266 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800724e:	2210      	movs	r2, #16
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725a:	2201      	movs	r2, #1
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e006      	b.n	8007274 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2201      	movs	r2, #1
 800726e:	4013      	ands	r3, r2
 8007270:	d1de      	bne.n	8007230 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	0018      	movs	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	b004      	add	sp, #16
 800727a:	bd80      	pop	{r7, pc}

0800727c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800728e:	2250      	movs	r2, #80	@ 0x50
 8007290:	4013      	ands	r3, r2
 8007292:	d142      	bne.n	800731a <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007298:	2280      	movs	r2, #128	@ 0x80
 800729a:	0092      	lsls	r2, r2, #2
 800729c:	431a      	orrs	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f7ff f851 	bl	800634e <LL_ADC_REG_IsTriggerSourceSWStart>
 80072ac:	1e03      	subs	r3, r0, #0
 80072ae:	d02e      	beq.n	800730e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	7e9b      	ldrb	r3, [r3, #26]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d12a      	bne.n	800730e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2208      	movs	r2, #8
 80072c0:	4013      	ands	r3, r2
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d123      	bne.n	800730e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	0018      	movs	r0, r3
 80072cc:	f7ff f942 	bl	8006554 <LL_ADC_REG_IsConversionOngoing>
 80072d0:	1e03      	subs	r3, r0, #0
 80072d2:	d110      	bne.n	80072f6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	210c      	movs	r1, #12
 80072e0:	438a      	bics	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e8:	4a16      	ldr	r2, [pc, #88]	@ (8007344 <ADC_DMAConvCplt+0xc8>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	2201      	movs	r2, #1
 80072ee:	431a      	orrs	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80072f4:	e00b      	b.n	800730e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fa:	2220      	movs	r2, #32
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007306:	2201      	movs	r2, #1
 8007308:	431a      	orrs	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	0010      	movs	r0, r2
 8007316:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007318:	e010      	b.n	800733c <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731e:	2210      	movs	r2, #16
 8007320:	4013      	ands	r3, r2
 8007322:	d005      	beq.n	8007330 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	0010      	movs	r0, r2
 800732c:	4798      	blx	r3
}
 800732e:	e005      	b.n	800733c <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	0010      	movs	r0, r2
 800733a:	4798      	blx	r3
}
 800733c:	46c0      	nop			@ (mov r8, r8)
 800733e:	46bd      	mov	sp, r7
 8007340:	b004      	add	sp, #16
 8007342:	bd80      	pop	{r7, pc}
 8007344:	fffffefe 	.word	0xfffffefe

08007348 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007354:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	0010      	movs	r0, r2
 800735e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007360:	46c0      	nop			@ (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	b004      	add	sp, #16
 8007366:	bd80      	pop	{r7, pc}

08007368 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007374:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800737a:	2240      	movs	r2, #64	@ 0x40
 800737c:	431a      	orrs	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007386:	2204      	movs	r2, #4
 8007388:	431a      	orrs	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	0010      	movs	r0, r2
 8007396:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007398:	46c0      	nop			@ (mov r8, r8)
 800739a:	46bd      	mov	sp, r7
 800739c:	b004      	add	sp, #16
 800739e:	bd80      	pop	{r7, pc}

080073a0 <LL_ADC_GetCommonClock>:
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	23f0      	movs	r3, #240	@ 0xf0
 80073ae:	039b      	lsls	r3, r3, #14
 80073b0:	4013      	ands	r3, r2
}
 80073b2:	0018      	movs	r0, r3
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b002      	add	sp, #8
 80073b8:	bd80      	pop	{r7, pc}

080073ba <LL_ADC_GetClock>:
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	0f9b      	lsrs	r3, r3, #30
 80073c8:	079b      	lsls	r3, r3, #30
}
 80073ca:	0018      	movs	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b002      	add	sp, #8
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <LL_ADC_SetCalibrationFactor>:
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	22b4      	movs	r2, #180	@ 0xb4
 80073e0:	589b      	ldr	r3, [r3, r2]
 80073e2:	227f      	movs	r2, #127	@ 0x7f
 80073e4:	4393      	bics	r3, r2
 80073e6:	001a      	movs	r2, r3
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	21b4      	movs	r1, #180	@ 0xb4
 80073f0:	505a      	str	r2, [r3, r1]
}
 80073f2:	46c0      	nop			@ (mov r8, r8)
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b002      	add	sp, #8
 80073f8:	bd80      	pop	{r7, pc}

080073fa <LL_ADC_GetCalibrationFactor>:
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	22b4      	movs	r2, #180	@ 0xb4
 8007406:	589b      	ldr	r3, [r3, r2]
 8007408:	227f      	movs	r2, #127	@ 0x7f
 800740a:	4013      	ands	r3, r2
}
 800740c:	0018      	movs	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	b002      	add	sp, #8
 8007412:	bd80      	pop	{r7, pc}

08007414 <LL_ADC_Enable>:
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	4a04      	ldr	r2, [pc, #16]	@ (8007434 <LL_ADC_Enable+0x20>)
 8007422:	4013      	ands	r3, r2
 8007424:	2201      	movs	r2, #1
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	609a      	str	r2, [r3, #8]
}
 800742c:	46c0      	nop			@ (mov r8, r8)
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}
 8007434:	7fffffe8 	.word	0x7fffffe8

08007438 <LL_ADC_Disable>:
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	4a04      	ldr	r2, [pc, #16]	@ (8007458 <LL_ADC_Disable+0x20>)
 8007446:	4013      	ands	r3, r2
 8007448:	2202      	movs	r2, #2
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	609a      	str	r2, [r3, #8]
}
 8007450:	46c0      	nop			@ (mov r8, r8)
 8007452:	46bd      	mov	sp, r7
 8007454:	b002      	add	sp, #8
 8007456:	bd80      	pop	{r7, pc}
 8007458:	7fffffe8 	.word	0x7fffffe8

0800745c <LL_ADC_IsEnabled>:
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2201      	movs	r2, #1
 800746a:	4013      	ands	r3, r2
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <LL_ADC_IsEnabled+0x18>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <LL_ADC_IsEnabled+0x1a>
 8007474:	2300      	movs	r3, #0
}
 8007476:	0018      	movs	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	b002      	add	sp, #8
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <LL_ADC_StartCalibration>:
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4a05      	ldr	r2, [pc, #20]	@ (80074a4 <LL_ADC_StartCalibration+0x24>)
 800748e:	4013      	ands	r3, r2
 8007490:	2280      	movs	r2, #128	@ 0x80
 8007492:	0612      	lsls	r2, r2, #24
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	609a      	str	r2, [r3, #8]
}
 800749a:	46c0      	nop			@ (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	b002      	add	sp, #8
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	46c0      	nop			@ (mov r8, r8)
 80074a4:	7fffffe8 	.word	0x7fffffe8

080074a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	0fdb      	lsrs	r3, r3, #31
 80074b6:	07da      	lsls	r2, r3, #31
 80074b8:	2380      	movs	r3, #128	@ 0x80
 80074ba:	061b      	lsls	r3, r3, #24
 80074bc:	429a      	cmp	r2, r3
 80074be:	d101      	bne.n	80074c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	0018      	movs	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	b002      	add	sp, #8
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80074d0:	b590      	push	{r4, r7, lr}
 80074d2:	b08b      	sub	sp, #44	@ 0x2c
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2254      	movs	r2, #84	@ 0x54
 80074e4:	5c9b      	ldrb	r3, [r3, r2]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_ADCEx_Calibration_Start+0x1e>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e0dd      	b.n	80076aa <HAL_ADCEx_Calibration_Start+0x1da>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2254      	movs	r2, #84	@ 0x54
 80074f2:	2101      	movs	r1, #1
 80074f4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80074f6:	231f      	movs	r3, #31
 80074f8:	18fc      	adds	r4, r7, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	0018      	movs	r0, r3
 80074fe:	f7ff fe5f 	bl	80071c0 <ADC_Disable>
 8007502:	0003      	movs	r3, r0
 8007504:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	0018      	movs	r0, r3
 800750c:	f7ff ffa6 	bl	800745c <LL_ADC_IsEnabled>
 8007510:	1e03      	subs	r3, r0, #0
 8007512:	d000      	beq.n	8007516 <HAL_ADCEx_Calibration_Start+0x46>
 8007514:	e0bc      	b.n	8007690 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800751a:	4a66      	ldr	r2, [pc, #408]	@ (80076b4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800751c:	4013      	ands	r3, r2
 800751e:	2202      	movs	r2, #2
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	4a62      	ldr	r2, [pc, #392]	@ (80076b8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800752e:	4013      	ands	r3, r2
 8007530:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	495f      	ldr	r1, [pc, #380]	@ (80076bc <HAL_ADCEx_Calibration_Start+0x1ec>)
 800753e:	400a      	ands	r2, r1
 8007540:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	@ 0x24
 8007546:	e02d      	b.n	80075a4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff ff97 	bl	8007480 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007552:	e014      	b.n	800757e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a58      	ldr	r2, [pc, #352]	@ (80076c0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d90d      	bls.n	800757e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007566:	2212      	movs	r2, #18
 8007568:	4393      	bics	r3, r2
 800756a:	2210      	movs	r2, #16
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2254      	movs	r2, #84	@ 0x54
 8007576:	2100      	movs	r1, #0
 8007578:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e095      	b.n	80076aa <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	0018      	movs	r0, r3
 8007584:	f7ff ff90 	bl	80074a8 <LL_ADC_IsCalibrationOnGoing>
 8007588:	1e03      	subs	r3, r0, #0
 800758a:	d1e3      	bne.n	8007554 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	0018      	movs	r0, r3
 8007592:	f7ff ff32 	bl	80073fa <LL_ADC_GetCalibrationFactor>
 8007596:	0002      	movs	r2, r0
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	189b      	adds	r3, r3, r2
 800759c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	3301      	adds	r3, #1
 80075a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	2b07      	cmp	r3, #7
 80075a8:	d9ce      	bls.n	8007548 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80075aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075ac:	6a38      	ldr	r0, [r7, #32]
 80075ae:	f7f8 fda9 	bl	8000104 <__udivsi3>
 80075b2:	0003      	movs	r3, r0
 80075b4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	0018      	movs	r0, r3
 80075bc:	f7ff ff2a 	bl	8007414 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	0018      	movs	r0, r3
 80075c6:	f7ff fef8 	bl	80073ba <LL_ADC_GetClock>
 80075ca:	1e03      	subs	r3, r0, #0
 80075cc:	d11b      	bne.n	8007606 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075ce:	4b3d      	ldr	r3, [pc, #244]	@ (80076c4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7ff fee5 	bl	80073a0 <LL_ADC_GetCommonClock>
 80075d6:	0003      	movs	r3, r0
 80075d8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	23e0      	movs	r3, #224	@ 0xe0
 80075de:	035b      	lsls	r3, r3, #13
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d310      	bcc.n	8007606 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	0c9b      	lsrs	r3, r3, #18
 80075e8:	3b03      	subs	r3, #3
 80075ea:	2201      	movs	r2, #1
 80075ec:	409a      	lsls	r2, r3
 80075ee:	0013      	movs	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	085b      	lsrs	r3, r3, #1
 80075f6:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80075f8:	e002      	b.n	8007600 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f9      	bne.n	80075fa <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6a3a      	ldr	r2, [r7, #32]
 800760c:	0011      	movs	r1, r2
 800760e:	0018      	movs	r0, r3
 8007610:	f7ff fedf 	bl	80073d2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	0018      	movs	r0, r3
 800761a:	f7ff ff0d 	bl	8007438 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800761e:	f7fe fe37 	bl	8006290 <HAL_GetTick>
 8007622:	0003      	movs	r3, r0
 8007624:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007626:	e01b      	b.n	8007660 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007628:	f7fe fe32 	bl	8006290 <HAL_GetTick>
 800762c:	0002      	movs	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d914      	bls.n	8007660 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	0018      	movs	r0, r3
 800763c:	f7ff ff0e 	bl	800745c <LL_ADC_IsEnabled>
 8007640:	1e03      	subs	r3, r0, #0
 8007642:	d00d      	beq.n	8007660 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007648:	2210      	movs	r2, #16
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007654:	2201      	movs	r2, #1
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e024      	b.n	80076aa <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	0018      	movs	r0, r3
 8007666:	f7ff fef9 	bl	800745c <LL_ADC_IsEnabled>
 800766a:	1e03      	subs	r3, r0, #0
 800766c:	d1dc      	bne.n	8007628 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68d9      	ldr	r1, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	430a      	orrs	r2, r1
 800767c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007682:	2203      	movs	r2, #3
 8007684:	4393      	bics	r3, r2
 8007686:	2201      	movs	r2, #1
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	659a      	str	r2, [r3, #88]	@ 0x58
 800768e:	e005      	b.n	800769c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007694:	2210      	movs	r2, #16
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2254      	movs	r2, #84	@ 0x54
 80076a0:	2100      	movs	r1, #0
 80076a2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80076a4:	231f      	movs	r3, #31
 80076a6:	18fb      	adds	r3, r7, r3
 80076a8:	781b      	ldrb	r3, [r3, #0]
}
 80076aa:	0018      	movs	r0, r3
 80076ac:	46bd      	mov	sp, r7
 80076ae:	b00b      	add	sp, #44	@ 0x2c
 80076b0:	bd90      	pop	{r4, r7, pc}
 80076b2:	46c0      	nop			@ (mov r8, r8)
 80076b4:	fffffefd 	.word	0xfffffefd
 80076b8:	00008003 	.word	0x00008003
 80076bc:	ffff7ffc 	.word	0xffff7ffc
 80076c0:	0002f1ff 	.word	0x0002f1ff
 80076c4:	40012708 	.word	0x40012708

080076c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80076d0:	46c0      	nop			@ (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80076e0:	46c0      	nop			@ (mov r8, r8)
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b002      	add	sp, #8
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80076f0:	46c0      	nop			@ (mov r8, r8)
 80076f2:	46bd      	mov	sp, r7
 80076f4:	b002      	add	sp, #8
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	0002      	movs	r2, r0
 8007700:	1dfb      	adds	r3, r7, #7
 8007702:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007704:	1dfb      	adds	r3, r7, #7
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b7f      	cmp	r3, #127	@ 0x7f
 800770a:	d809      	bhi.n	8007720 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800770c:	1dfb      	adds	r3, r7, #7
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	001a      	movs	r2, r3
 8007712:	231f      	movs	r3, #31
 8007714:	401a      	ands	r2, r3
 8007716:	4b04      	ldr	r3, [pc, #16]	@ (8007728 <__NVIC_EnableIRQ+0x30>)
 8007718:	2101      	movs	r1, #1
 800771a:	4091      	lsls	r1, r2
 800771c:	000a      	movs	r2, r1
 800771e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007720:	46c0      	nop			@ (mov r8, r8)
 8007722:	46bd      	mov	sp, r7
 8007724:	b002      	add	sp, #8
 8007726:	bd80      	pop	{r7, pc}
 8007728:	e000e100 	.word	0xe000e100

0800772c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	0002      	movs	r2, r0
 8007734:	1dfb      	adds	r3, r7, #7
 8007736:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007738:	1dfb      	adds	r3, r7, #7
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b7f      	cmp	r3, #127	@ 0x7f
 800773e:	d810      	bhi.n	8007762 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007740:	1dfb      	adds	r3, r7, #7
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	001a      	movs	r2, r3
 8007746:	231f      	movs	r3, #31
 8007748:	4013      	ands	r3, r2
 800774a:	4908      	ldr	r1, [pc, #32]	@ (800776c <__NVIC_DisableIRQ+0x40>)
 800774c:	2201      	movs	r2, #1
 800774e:	409a      	lsls	r2, r3
 8007750:	0013      	movs	r3, r2
 8007752:	2280      	movs	r2, #128	@ 0x80
 8007754:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007756:	f3bf 8f4f 	dsb	sy
}
 800775a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800775c:	f3bf 8f6f 	isb	sy
}
 8007760:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007762:	46c0      	nop			@ (mov r8, r8)
 8007764:	46bd      	mov	sp, r7
 8007766:	b002      	add	sp, #8
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	e000e100 	.word	0xe000e100

08007770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007770:	b590      	push	{r4, r7, lr}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	0002      	movs	r2, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	1dfb      	adds	r3, r7, #7
 800777c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800777e:	1dfb      	adds	r3, r7, #7
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b7f      	cmp	r3, #127	@ 0x7f
 8007784:	d828      	bhi.n	80077d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007786:	4a2f      	ldr	r2, [pc, #188]	@ (8007844 <__NVIC_SetPriority+0xd4>)
 8007788:	1dfb      	adds	r3, r7, #7
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b25b      	sxtb	r3, r3
 800778e:	089b      	lsrs	r3, r3, #2
 8007790:	33c0      	adds	r3, #192	@ 0xc0
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	589b      	ldr	r3, [r3, r2]
 8007796:	1dfa      	adds	r2, r7, #7
 8007798:	7812      	ldrb	r2, [r2, #0]
 800779a:	0011      	movs	r1, r2
 800779c:	2203      	movs	r2, #3
 800779e:	400a      	ands	r2, r1
 80077a0:	00d2      	lsls	r2, r2, #3
 80077a2:	21ff      	movs	r1, #255	@ 0xff
 80077a4:	4091      	lsls	r1, r2
 80077a6:	000a      	movs	r2, r1
 80077a8:	43d2      	mvns	r2, r2
 80077aa:	401a      	ands	r2, r3
 80077ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	019b      	lsls	r3, r3, #6
 80077b2:	22ff      	movs	r2, #255	@ 0xff
 80077b4:	401a      	ands	r2, r3
 80077b6:	1dfb      	adds	r3, r7, #7
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	0018      	movs	r0, r3
 80077bc:	2303      	movs	r3, #3
 80077be:	4003      	ands	r3, r0
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077c4:	481f      	ldr	r0, [pc, #124]	@ (8007844 <__NVIC_SetPriority+0xd4>)
 80077c6:	1dfb      	adds	r3, r7, #7
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	089b      	lsrs	r3, r3, #2
 80077ce:	430a      	orrs	r2, r1
 80077d0:	33c0      	adds	r3, #192	@ 0xc0
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80077d6:	e031      	b.n	800783c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007848 <__NVIC_SetPriority+0xd8>)
 80077da:	1dfb      	adds	r3, r7, #7
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	0019      	movs	r1, r3
 80077e0:	230f      	movs	r3, #15
 80077e2:	400b      	ands	r3, r1
 80077e4:	3b08      	subs	r3, #8
 80077e6:	089b      	lsrs	r3, r3, #2
 80077e8:	3306      	adds	r3, #6
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	18d3      	adds	r3, r2, r3
 80077ee:	3304      	adds	r3, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	1dfa      	adds	r2, r7, #7
 80077f4:	7812      	ldrb	r2, [r2, #0]
 80077f6:	0011      	movs	r1, r2
 80077f8:	2203      	movs	r2, #3
 80077fa:	400a      	ands	r2, r1
 80077fc:	00d2      	lsls	r2, r2, #3
 80077fe:	21ff      	movs	r1, #255	@ 0xff
 8007800:	4091      	lsls	r1, r2
 8007802:	000a      	movs	r2, r1
 8007804:	43d2      	mvns	r2, r2
 8007806:	401a      	ands	r2, r3
 8007808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	019b      	lsls	r3, r3, #6
 800780e:	22ff      	movs	r2, #255	@ 0xff
 8007810:	401a      	ands	r2, r3
 8007812:	1dfb      	adds	r3, r7, #7
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	0018      	movs	r0, r3
 8007818:	2303      	movs	r3, #3
 800781a:	4003      	ands	r3, r0
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007820:	4809      	ldr	r0, [pc, #36]	@ (8007848 <__NVIC_SetPriority+0xd8>)
 8007822:	1dfb      	adds	r3, r7, #7
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	001c      	movs	r4, r3
 8007828:	230f      	movs	r3, #15
 800782a:	4023      	ands	r3, r4
 800782c:	3b08      	subs	r3, #8
 800782e:	089b      	lsrs	r3, r3, #2
 8007830:	430a      	orrs	r2, r1
 8007832:	3306      	adds	r3, #6
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	18c3      	adds	r3, r0, r3
 8007838:	3304      	adds	r3, #4
 800783a:	601a      	str	r2, [r3, #0]
}
 800783c:	46c0      	nop			@ (mov r8, r8)
 800783e:	46bd      	mov	sp, r7
 8007840:	b003      	add	sp, #12
 8007842:	bd90      	pop	{r4, r7, pc}
 8007844:	e000e100 	.word	0xe000e100
 8007848:	e000ed00 	.word	0xe000ed00

0800784c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	1e5a      	subs	r2, r3, #1
 8007858:	2380      	movs	r3, #128	@ 0x80
 800785a:	045b      	lsls	r3, r3, #17
 800785c:	429a      	cmp	r2, r3
 800785e:	d301      	bcc.n	8007864 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007860:	2301      	movs	r3, #1
 8007862:	e010      	b.n	8007886 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007864:	4b0a      	ldr	r3, [pc, #40]	@ (8007890 <SysTick_Config+0x44>)
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	3a01      	subs	r2, #1
 800786a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800786c:	2301      	movs	r3, #1
 800786e:	425b      	negs	r3, r3
 8007870:	2103      	movs	r1, #3
 8007872:	0018      	movs	r0, r3
 8007874:	f7ff ff7c 	bl	8007770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007878:	4b05      	ldr	r3, [pc, #20]	@ (8007890 <SysTick_Config+0x44>)
 800787a:	2200      	movs	r2, #0
 800787c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800787e:	4b04      	ldr	r3, [pc, #16]	@ (8007890 <SysTick_Config+0x44>)
 8007880:	2207      	movs	r2, #7
 8007882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007884:	2300      	movs	r3, #0
}
 8007886:	0018      	movs	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	b002      	add	sp, #8
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	e000e010 	.word	0xe000e010

08007894 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	210f      	movs	r1, #15
 80078a0:	187b      	adds	r3, r7, r1
 80078a2:	1c02      	adds	r2, r0, #0
 80078a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	187b      	adds	r3, r7, r1
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	0011      	movs	r1, r2
 80078b0:	0018      	movs	r0, r3
 80078b2:	f7ff ff5d 	bl	8007770 <__NVIC_SetPriority>
}
 80078b6:	46c0      	nop			@ (mov r8, r8)
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b004      	add	sp, #16
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	0002      	movs	r2, r0
 80078c6:	1dfb      	adds	r3, r7, #7
 80078c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078ca:	1dfb      	adds	r3, r7, #7
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	b25b      	sxtb	r3, r3
 80078d0:	0018      	movs	r0, r3
 80078d2:	f7ff ff11 	bl	80076f8 <__NVIC_EnableIRQ>
}
 80078d6:	46c0      	nop			@ (mov r8, r8)
 80078d8:	46bd      	mov	sp, r7
 80078da:	b002      	add	sp, #8
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	0002      	movs	r2, r0
 80078e6:	1dfb      	adds	r3, r7, #7
 80078e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80078ea:	1dfb      	adds	r3, r7, #7
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	b25b      	sxtb	r3, r3
 80078f0:	0018      	movs	r0, r3
 80078f2:	f7ff ff1b 	bl	800772c <__NVIC_DisableIRQ>
}
 80078f6:	46c0      	nop			@ (mov r8, r8)
 80078f8:	46bd      	mov	sp, r7
 80078fa:	b002      	add	sp, #8
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	0018      	movs	r0, r3
 800790a:	f7ff ff9f 	bl	800784c <SysTick_Config>
 800790e:	0003      	movs	r3, r0
}
 8007910:	0018      	movs	r0, r3
 8007912:	46bd      	mov	sp, r7
 8007914:	b002      	add	sp, #8
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e077      	b.n	8007a1a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a3d      	ldr	r2, [pc, #244]	@ (8007a24 <HAL_DMA_Init+0x10c>)
 8007930:	4694      	mov	ip, r2
 8007932:	4463      	add	r3, ip
 8007934:	2114      	movs	r1, #20
 8007936:	0018      	movs	r0, r3
 8007938:	f7f8 fbe4 	bl	8000104 <__udivsi3>
 800793c:	0003      	movs	r3, r0
 800793e:	009a      	lsls	r2, r3, #2
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2225      	movs	r2, #37	@ 0x25
 8007948:	2102      	movs	r1, #2
 800794a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4934      	ldr	r1, [pc, #208]	@ (8007a28 <HAL_DMA_Init+0x110>)
 8007958:	400a      	ands	r2, r1
 800795a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6819      	ldr	r1, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0018      	movs	r0, r3
 8007996:	f000 fa8d 	bl	8007eb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	2380      	movs	r3, #128	@ 0x80
 80079a0:	01db      	lsls	r3, r3, #7
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d102      	bne.n	80079ac <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b4:	213f      	movs	r1, #63	@ 0x3f
 80079b6:	400a      	ands	r2, r1
 80079b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80079c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d011      	beq.n	80079f0 <HAL_DMA_Init+0xd8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d80d      	bhi.n	80079f0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	0018      	movs	r0, r3
 80079d8:	f000 fa98 	bl	8007f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	e008      	b.n	8007a02 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2225      	movs	r2, #37	@ 0x25
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2224      	movs	r2, #36	@ 0x24
 8007a14:	2100      	movs	r1, #0
 8007a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	b002      	add	sp, #8
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	46c0      	nop			@ (mov r8, r8)
 8007a24:	bffdfff8 	.word	0xbffdfff8
 8007a28:	ffff800f 	.word	0xffff800f

08007a2c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3a:	2317      	movs	r3, #23
 8007a3c:	18fb      	adds	r3, r7, r3
 8007a3e:	2200      	movs	r2, #0
 8007a40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2224      	movs	r2, #36	@ 0x24
 8007a46:	5c9b      	ldrb	r3, [r3, r2]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_DMA_Start_IT+0x24>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e06f      	b.n	8007b30 <HAL_DMA_Start_IT+0x104>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2224      	movs	r2, #36	@ 0x24
 8007a54:	2101      	movs	r1, #1
 8007a56:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2225      	movs	r2, #37	@ 0x25
 8007a5c:	5c9b      	ldrb	r3, [r3, r2]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d157      	bne.n	8007b14 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2225      	movs	r2, #37	@ 0x25
 8007a68:	2102      	movs	r1, #2
 8007a6a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	438a      	bics	r2, r1
 8007a80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 f9d3 	bl	8007e34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d008      	beq.n	8007aa8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	210e      	movs	r1, #14
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	e00f      	b.n	8007ac8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2104      	movs	r1, #4
 8007ab4:	438a      	bics	r2, r1
 8007ab6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	210a      	movs	r1, #10
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	2380      	movs	r3, #128	@ 0x80
 8007ad0:	025b      	lsls	r3, r3, #9
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	d008      	beq.n	8007ae8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae0:	2180      	movs	r1, #128	@ 0x80
 8007ae2:	0049      	lsls	r1, r1, #1
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007afa:	2180      	movs	r1, #128	@ 0x80
 8007afc:	0049      	lsls	r1, r1, #1
 8007afe:	430a      	orrs	r2, r1
 8007b00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	e00a      	b.n	8007b2a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2280      	movs	r2, #128	@ 0x80
 8007b18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2224      	movs	r2, #36	@ 0x24
 8007b1e:	2100      	movs	r1, #0
 8007b20:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007b22:	2317      	movs	r3, #23
 8007b24:	18fb      	adds	r3, r7, r3
 8007b26:	2201      	movs	r2, #1
 8007b28:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007b2a:	2317      	movs	r3, #23
 8007b2c:	18fb      	adds	r3, r7, r3
 8007b2e:	781b      	ldrb	r3, [r3, #0]
}
 8007b30:	0018      	movs	r0, r3
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b006      	add	sp, #24
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e050      	b.n	8007bec <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2225      	movs	r2, #37	@ 0x25
 8007b4e:	5c9b      	ldrb	r3, [r3, r2]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d008      	beq.n	8007b68 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2204      	movs	r2, #4
 8007b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2224      	movs	r2, #36	@ 0x24
 8007b60:	2100      	movs	r1, #0
 8007b62:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e041      	b.n	8007bec <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	210e      	movs	r1, #14
 8007b74:	438a      	bics	r2, r1
 8007b76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b82:	491c      	ldr	r1, [pc, #112]	@ (8007bf4 <HAL_DMA_Abort+0xbc>)
 8007b84:	400a      	ands	r2, r1
 8007b86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2101      	movs	r1, #1
 8007b94:	438a      	bics	r2, r1
 8007b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007b98:	4b17      	ldr	r3, [pc, #92]	@ (8007bf8 <HAL_DMA_Abort+0xc0>)
 8007b9a:	6859      	ldr	r1, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba0:	221c      	movs	r2, #28
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	409a      	lsls	r2, r3
 8007ba8:	4b13      	ldr	r3, [pc, #76]	@ (8007bf8 <HAL_DMA_Abort+0xc0>)
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007bb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00c      	beq.n	8007bda <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bca:	490a      	ldr	r1, [pc, #40]	@ (8007bf4 <HAL_DMA_Abort+0xbc>)
 8007bcc:	400a      	ands	r2, r1
 8007bce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007bd8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2225      	movs	r2, #37	@ 0x25
 8007bde:	2101      	movs	r1, #1
 8007be0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2224      	movs	r2, #36	@ 0x24
 8007be6:	2100      	movs	r1, #0
 8007be8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	0018      	movs	r0, r3
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	b002      	add	sp, #8
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	fffffeff 	.word	0xfffffeff
 8007bf8:	40020000 	.word	0x40020000

08007bfc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c04:	210f      	movs	r1, #15
 8007c06:	187b      	adds	r3, r7, r1
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2225      	movs	r2, #37	@ 0x25
 8007c10:	5c9b      	ldrb	r3, [r3, r2]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d006      	beq.n	8007c26 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007c1e:	187b      	adds	r3, r7, r1
 8007c20:	2201      	movs	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e049      	b.n	8007cba <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	210e      	movs	r1, #14
 8007c32:	438a      	bics	r2, r1
 8007c34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2101      	movs	r1, #1
 8007c42:	438a      	bics	r2, r1
 8007c44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c50:	491d      	ldr	r1, [pc, #116]	@ (8007cc8 <HAL_DMA_Abort_IT+0xcc>)
 8007c52:	400a      	ands	r2, r1
 8007c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007c56:	4b1d      	ldr	r3, [pc, #116]	@ (8007ccc <HAL_DMA_Abort_IT+0xd0>)
 8007c58:	6859      	ldr	r1, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5e:	221c      	movs	r2, #28
 8007c60:	4013      	ands	r3, r2
 8007c62:	2201      	movs	r2, #1
 8007c64:	409a      	lsls	r2, r3
 8007c66:	4b19      	ldr	r3, [pc, #100]	@ (8007ccc <HAL_DMA_Abort_IT+0xd0>)
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007c74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c88:	490f      	ldr	r1, [pc, #60]	@ (8007cc8 <HAL_DMA_Abort_IT+0xcc>)
 8007c8a:	400a      	ands	r2, r1
 8007c8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007c96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2225      	movs	r2, #37	@ 0x25
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2224      	movs	r2, #36	@ 0x24
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	0010      	movs	r0, r2
 8007cb8:	4798      	blx	r3
    }
  }
  return status;
 8007cba:	230f      	movs	r3, #15
 8007cbc:	18fb      	adds	r3, r7, r3
 8007cbe:	781b      	ldrb	r3, [r3, #0]
}
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	b004      	add	sp, #16
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	fffffeff 	.word	0xfffffeff
 8007ccc:	40020000 	.word	0x40020000

08007cd0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007cd8:	4b55      	ldr	r3, [pc, #340]	@ (8007e30 <HAL_DMA_IRQHandler+0x160>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cea:	221c      	movs	r2, #28
 8007cec:	4013      	ands	r3, r2
 8007cee:	2204      	movs	r2, #4
 8007cf0:	409a      	lsls	r2, r3
 8007cf2:	0013      	movs	r3, r2
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	d027      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x7a>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2204      	movs	r2, #4
 8007cfe:	4013      	ands	r3, r2
 8007d00:	d023      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d107      	bne.n	8007d1e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2104      	movs	r1, #4
 8007d1a:	438a      	bics	r2, r1
 8007d1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007d1e:	4b44      	ldr	r3, [pc, #272]	@ (8007e30 <HAL_DMA_IRQHandler+0x160>)
 8007d20:	6859      	ldr	r1, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d26:	221c      	movs	r2, #28
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	409a      	lsls	r2, r3
 8007d2e:	4b40      	ldr	r3, [pc, #256]	@ (8007e30 <HAL_DMA_IRQHandler+0x160>)
 8007d30:	430a      	orrs	r2, r1
 8007d32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d100      	bne.n	8007d3e <HAL_DMA_IRQHandler+0x6e>
 8007d3c:	e073      	b.n	8007e26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	0010      	movs	r0, r2
 8007d46:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007d48:	e06d      	b.n	8007e26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4e:	221c      	movs	r2, #28
 8007d50:	4013      	ands	r3, r2
 8007d52:	2202      	movs	r2, #2
 8007d54:	409a      	lsls	r2, r3
 8007d56:	0013      	movs	r3, r2
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	d02e      	beq.n	8007dbc <HAL_DMA_IRQHandler+0xec>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2202      	movs	r2, #2
 8007d62:	4013      	ands	r3, r2
 8007d64:	d02a      	beq.n	8007dbc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d10b      	bne.n	8007d8a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	210a      	movs	r1, #10
 8007d7e:	438a      	bics	r2, r1
 8007d80:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2225      	movs	r2, #37	@ 0x25
 8007d86:	2101      	movs	r1, #1
 8007d88:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007d8a:	4b29      	ldr	r3, [pc, #164]	@ (8007e30 <HAL_DMA_IRQHandler+0x160>)
 8007d8c:	6859      	ldr	r1, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d92:	221c      	movs	r2, #28
 8007d94:	4013      	ands	r3, r2
 8007d96:	2202      	movs	r2, #2
 8007d98:	409a      	lsls	r2, r3
 8007d9a:	4b25      	ldr	r3, [pc, #148]	@ (8007e30 <HAL_DMA_IRQHandler+0x160>)
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2224      	movs	r2, #36	@ 0x24
 8007da4:	2100      	movs	r1, #0
 8007da6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d03a      	beq.n	8007e26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	0010      	movs	r0, r2
 8007db8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007dba:	e034      	b.n	8007e26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc0:	221c      	movs	r2, #28
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	409a      	lsls	r2, r3
 8007dc8:	0013      	movs	r3, r2
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d02b      	beq.n	8007e28 <HAL_DMA_IRQHandler+0x158>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d027      	beq.n	8007e28 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	210e      	movs	r1, #14
 8007de4:	438a      	bics	r2, r1
 8007de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007de8:	4b11      	ldr	r3, [pc, #68]	@ (8007e30 <HAL_DMA_IRQHandler+0x160>)
 8007dea:	6859      	ldr	r1, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df0:	221c      	movs	r2, #28
 8007df2:	4013      	ands	r3, r2
 8007df4:	2201      	movs	r2, #1
 8007df6:	409a      	lsls	r2, r3
 8007df8:	4b0d      	ldr	r3, [pc, #52]	@ (8007e30 <HAL_DMA_IRQHandler+0x160>)
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2225      	movs	r2, #37	@ 0x25
 8007e08:	2101      	movs	r1, #1
 8007e0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2224      	movs	r2, #36	@ 0x24
 8007e10:	2100      	movs	r1, #0
 8007e12:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	0010      	movs	r0, r2
 8007e24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	46c0      	nop			@ (mov r8, r8)
}
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	b004      	add	sp, #16
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40020000 	.word	0x40020000

08007e34 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007e4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007e5e:	4b14      	ldr	r3, [pc, #80]	@ (8007eb0 <DMA_SetConfig+0x7c>)
 8007e60:	6859      	ldr	r1, [r3, #4]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e66:	221c      	movs	r2, #28
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	409a      	lsls	r2, r3
 8007e6e:	4b10      	ldr	r3, [pc, #64]	@ (8007eb0 <DMA_SetConfig+0x7c>)
 8007e70:	430a      	orrs	r2, r1
 8007e72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d108      	bne.n	8007e96 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007e94:	e007      	b.n	8007ea6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	60da      	str	r2, [r3, #12]
}
 8007ea6:	46c0      	nop			@ (mov r8, r8)
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	b004      	add	sp, #16
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	46c0      	nop			@ (mov r8, r8)
 8007eb0:	40020000 	.word	0x40020000

08007eb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec0:	089b      	lsrs	r3, r3, #2
 8007ec2:	4a10      	ldr	r2, [pc, #64]	@ (8007f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007ec4:	4694      	mov	ip, r2
 8007ec6:	4463      	add	r3, ip
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	001a      	movs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	001a      	movs	r2, r3
 8007ed6:	23ff      	movs	r3, #255	@ 0xff
 8007ed8:	4013      	ands	r3, r2
 8007eda:	3b08      	subs	r3, #8
 8007edc:	2114      	movs	r1, #20
 8007ede:	0018      	movs	r0, r3
 8007ee0:	f7f8 f910 	bl	8000104 <__udivsi3>
 8007ee4:	0003      	movs	r3, r0
 8007ee6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a07      	ldr	r2, [pc, #28]	@ (8007f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007eec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	221f      	movs	r2, #31
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	409a      	lsls	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8007efc:	46c0      	nop			@ (mov r8, r8)
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b004      	add	sp, #16
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	10008200 	.word	0x10008200
 8007f08:	40020880 	.word	0x40020880

08007f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	223f      	movs	r2, #63	@ 0x3f
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	@ (8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007f22:	4694      	mov	ip, r2
 8007f24:	4463      	add	r3, ip
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	001a      	movs	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a07      	ldr	r2, [pc, #28]	@ (8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007f32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	2203      	movs	r2, #3
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	409a      	lsls	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007f44:	46c0      	nop			@ (mov r8, r8)
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b004      	add	sp, #16
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	1000823f 	.word	0x1000823f
 8007f50:	40020940 	.word	0x40020940

08007f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f62:	e147      	b.n	80081f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2101      	movs	r1, #1
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4091      	lsls	r1, r2
 8007f6e:	000a      	movs	r2, r1
 8007f70:	4013      	ands	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d100      	bne.n	8007f7c <HAL_GPIO_Init+0x28>
 8007f7a:	e138      	b.n	80081ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	2203      	movs	r2, #3
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d005      	beq.n	8007f94 <HAL_GPIO_Init+0x40>
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	4013      	ands	r3, r2
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d130      	bne.n	8007ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	409a      	lsls	r2, r3
 8007fa2:	0013      	movs	r3, r2
 8007fa4:	43da      	mvns	r2, r3
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	4013      	ands	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	409a      	lsls	r2, r3
 8007fb6:	0013      	movs	r3, r2
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fca:	2201      	movs	r2, #1
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	409a      	lsls	r2, r3
 8007fd0:	0013      	movs	r3, r2
 8007fd2:	43da      	mvns	r2, r3
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	091b      	lsrs	r3, r3, #4
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	401a      	ands	r2, r3
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	409a      	lsls	r2, r3
 8007fe8:	0013      	movs	r3, r2
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d017      	beq.n	8008032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	2203      	movs	r2, #3
 800800e:	409a      	lsls	r2, r3
 8008010:	0013      	movs	r3, r2
 8008012:	43da      	mvns	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	4013      	ands	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	409a      	lsls	r2, r3
 8008024:	0013      	movs	r3, r2
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2203      	movs	r2, #3
 8008038:	4013      	ands	r3, r2
 800803a:	2b02      	cmp	r3, #2
 800803c:	d123      	bne.n	8008086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	08da      	lsrs	r2, r3, #3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3208      	adds	r2, #8
 8008046:	0092      	lsls	r2, r2, #2
 8008048:	58d3      	ldr	r3, [r2, r3]
 800804a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2207      	movs	r2, #7
 8008050:	4013      	ands	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	220f      	movs	r2, #15
 8008056:	409a      	lsls	r2, r3
 8008058:	0013      	movs	r3, r2
 800805a:	43da      	mvns	r2, r3
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	4013      	ands	r3, r2
 8008060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2107      	movs	r1, #7
 800806a:	400b      	ands	r3, r1
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	409a      	lsls	r2, r3
 8008070:	0013      	movs	r3, r2
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	08da      	lsrs	r2, r3, #3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3208      	adds	r2, #8
 8008080:	0092      	lsls	r2, r2, #2
 8008082:	6939      	ldr	r1, [r7, #16]
 8008084:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	2203      	movs	r2, #3
 8008092:	409a      	lsls	r2, r3
 8008094:	0013      	movs	r3, r2
 8008096:	43da      	mvns	r2, r3
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4013      	ands	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2203      	movs	r2, #3
 80080a4:	401a      	ands	r2, r3
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	409a      	lsls	r2, r3
 80080ac:	0013      	movs	r3, r2
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	23c0      	movs	r3, #192	@ 0xc0
 80080c0:	029b      	lsls	r3, r3, #10
 80080c2:	4013      	ands	r3, r2
 80080c4:	d100      	bne.n	80080c8 <HAL_GPIO_Init+0x174>
 80080c6:	e092      	b.n	80081ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80080c8:	4a50      	ldr	r2, [pc, #320]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	089b      	lsrs	r3, r3, #2
 80080ce:	3318      	adds	r3, #24
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	589b      	ldr	r3, [r3, r2]
 80080d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2203      	movs	r2, #3
 80080da:	4013      	ands	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	220f      	movs	r2, #15
 80080e0:	409a      	lsls	r2, r3
 80080e2:	0013      	movs	r3, r2
 80080e4:	43da      	mvns	r2, r3
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	4013      	ands	r3, r2
 80080ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	23a0      	movs	r3, #160	@ 0xa0
 80080f0:	05db      	lsls	r3, r3, #23
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d013      	beq.n	800811e <HAL_GPIO_Init+0x1ca>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a45      	ldr	r2, [pc, #276]	@ (8008210 <HAL_GPIO_Init+0x2bc>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00d      	beq.n	800811a <HAL_GPIO_Init+0x1c6>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a44      	ldr	r2, [pc, #272]	@ (8008214 <HAL_GPIO_Init+0x2c0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d007      	beq.n	8008116 <HAL_GPIO_Init+0x1c2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a43      	ldr	r2, [pc, #268]	@ (8008218 <HAL_GPIO_Init+0x2c4>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d101      	bne.n	8008112 <HAL_GPIO_Init+0x1be>
 800810e:	2303      	movs	r3, #3
 8008110:	e006      	b.n	8008120 <HAL_GPIO_Init+0x1cc>
 8008112:	2305      	movs	r3, #5
 8008114:	e004      	b.n	8008120 <HAL_GPIO_Init+0x1cc>
 8008116:	2302      	movs	r3, #2
 8008118:	e002      	b.n	8008120 <HAL_GPIO_Init+0x1cc>
 800811a:	2301      	movs	r3, #1
 800811c:	e000      	b.n	8008120 <HAL_GPIO_Init+0x1cc>
 800811e:	2300      	movs	r3, #0
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	2103      	movs	r1, #3
 8008124:	400a      	ands	r2, r1
 8008126:	00d2      	lsls	r2, r2, #3
 8008128:	4093      	lsls	r3, r2
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008130:	4936      	ldr	r1, [pc, #216]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	089b      	lsrs	r3, r3, #2
 8008136:	3318      	adds	r3, #24
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800813e:	4b33      	ldr	r3, [pc, #204]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	43da      	mvns	r2, r3
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	4013      	ands	r3, r2
 800814c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	2380      	movs	r3, #128	@ 0x80
 8008154:	035b      	lsls	r3, r3, #13
 8008156:	4013      	ands	r3, r2
 8008158:	d003      	beq.n	8008162 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008162:	4b2a      	ldr	r3, [pc, #168]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008168:	4b28      	ldr	r3, [pc, #160]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	43da      	mvns	r2, r3
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	4013      	ands	r3, r2
 8008176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	2380      	movs	r3, #128	@ 0x80
 800817e:	039b      	lsls	r3, r3, #14
 8008180:	4013      	ands	r3, r2
 8008182:	d003      	beq.n	800818c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800818c:	4b1f      	ldr	r3, [pc, #124]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008192:	4a1e      	ldr	r2, [pc, #120]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 8008194:	2384      	movs	r3, #132	@ 0x84
 8008196:	58d3      	ldr	r3, [r2, r3]
 8008198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	43da      	mvns	r2, r3
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4013      	ands	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	2380      	movs	r3, #128	@ 0x80
 80081aa:	029b      	lsls	r3, r3, #10
 80081ac:	4013      	ands	r3, r2
 80081ae:	d003      	beq.n	80081b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081b8:	4914      	ldr	r1, [pc, #80]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 80081ba:	2284      	movs	r2, #132	@ 0x84
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80081c0:	4a12      	ldr	r2, [pc, #72]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 80081c2:	2380      	movs	r3, #128	@ 0x80
 80081c4:	58d3      	ldr	r3, [r2, r3]
 80081c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	43da      	mvns	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4013      	ands	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	2380      	movs	r3, #128	@ 0x80
 80081d8:	025b      	lsls	r3, r3, #9
 80081da:	4013      	ands	r3, r2
 80081dc:	d003      	beq.n	80081e6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80081e6:	4909      	ldr	r1, [pc, #36]	@ (800820c <HAL_GPIO_Init+0x2b8>)
 80081e8:	2280      	movs	r2, #128	@ 0x80
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	3301      	adds	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	40da      	lsrs	r2, r3
 80081fc:	1e13      	subs	r3, r2, #0
 80081fe:	d000      	beq.n	8008202 <HAL_GPIO_Init+0x2ae>
 8008200:	e6b0      	b.n	8007f64 <HAL_GPIO_Init+0x10>
  }
}
 8008202:	46c0      	nop			@ (mov r8, r8)
 8008204:	46c0      	nop			@ (mov r8, r8)
 8008206:	46bd      	mov	sp, r7
 8008208:	b006      	add	sp, #24
 800820a:	bd80      	pop	{r7, pc}
 800820c:	40021800 	.word	0x40021800
 8008210:	50000400 	.word	0x50000400
 8008214:	50000800 	.word	0x50000800
 8008218:	50000c00 	.word	0x50000c00

0800821c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	000a      	movs	r2, r1
 8008226:	1cbb      	adds	r3, r7, #2
 8008228:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	1cba      	adds	r2, r7, #2
 8008230:	8812      	ldrh	r2, [r2, #0]
 8008232:	4013      	ands	r3, r2
 8008234:	d004      	beq.n	8008240 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008236:	230f      	movs	r3, #15
 8008238:	18fb      	adds	r3, r7, r3
 800823a:	2201      	movs	r2, #1
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	e003      	b.n	8008248 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008240:	230f      	movs	r3, #15
 8008242:	18fb      	adds	r3, r7, r3
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008248:	230f      	movs	r3, #15
 800824a:	18fb      	adds	r3, r7, r3
 800824c:	781b      	ldrb	r3, [r3, #0]
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b004      	add	sp, #16
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	0008      	movs	r0, r1
 8008260:	0011      	movs	r1, r2
 8008262:	1cbb      	adds	r3, r7, #2
 8008264:	1c02      	adds	r2, r0, #0
 8008266:	801a      	strh	r2, [r3, #0]
 8008268:	1c7b      	adds	r3, r7, #1
 800826a:	1c0a      	adds	r2, r1, #0
 800826c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800826e:	1c7b      	adds	r3, r7, #1
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008276:	1cbb      	adds	r3, r7, #2
 8008278:	881a      	ldrh	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800827e:	e003      	b.n	8008288 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008280:	1cbb      	adds	r3, r7, #2
 8008282:	881a      	ldrh	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008288:	46c0      	nop			@ (mov r8, r8)
 800828a:	46bd      	mov	sp, r7
 800828c:	b002      	add	sp, #8
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	0002      	movs	r2, r0
 8008298:	1dbb      	adds	r3, r7, #6
 800829a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800829c:	4b10      	ldr	r3, [pc, #64]	@ (80082e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	1dba      	adds	r2, r7, #6
 80082a2:	8812      	ldrh	r2, [r2, #0]
 80082a4:	4013      	ands	r3, r2
 80082a6:	d008      	beq.n	80082ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80082a8:	4b0d      	ldr	r3, [pc, #52]	@ (80082e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80082aa:	1dba      	adds	r2, r7, #6
 80082ac:	8812      	ldrh	r2, [r2, #0]
 80082ae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80082b0:	1dbb      	adds	r3, r7, #6
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	0018      	movs	r0, r3
 80082b6:	f7fb fbf1 	bl	8003a9c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80082ba:	4b09      	ldr	r3, [pc, #36]	@ (80082e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	1dba      	adds	r2, r7, #6
 80082c0:	8812      	ldrh	r2, [r2, #0]
 80082c2:	4013      	ands	r3, r2
 80082c4:	d008      	beq.n	80082d8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80082c6:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80082c8:	1dba      	adds	r2, r7, #6
 80082ca:	8812      	ldrh	r2, [r2, #0]
 80082cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80082ce:	1dbb      	adds	r3, r7, #6
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	0018      	movs	r0, r3
 80082d4:	f7fb fbb8 	bl	8003a48 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80082d8:	46c0      	nop			@ (mov r8, r8)
 80082da:	46bd      	mov	sp, r7
 80082dc:	b002      	add	sp, #8
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	40021800 	.word	0x40021800

080082e4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e097      	b.n	8008426 <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2236      	movs	r2, #54	@ 0x36
 80082fa:	5c9b      	ldrb	r3, [r3, r2]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d113      	bne.n	800832a <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2235      	movs	r2, #53	@ 0x35
 8008306:	2100      	movs	r1, #0
 8008308:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	0018      	movs	r0, r3
 800830e:	f000 fa8f 	bl	8008830 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	2b00      	cmp	r3, #0
 8008318:	d102      	bne.n	8008320 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a44      	ldr	r2, [pc, #272]	@ (8008430 <HAL_LPTIM_Init+0x14c>)
 800831e:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	0010      	movs	r0, r2
 8008328:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2236      	movs	r2, #54	@ 0x36
 800832e:	2102      	movs	r1, #2
 8008330:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d005      	beq.n	800834e <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008346:	2380      	movs	r3, #128	@ 0x80
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	429a      	cmp	r2, r3
 800834c:	d103      	bne.n	8008356 <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	221e      	movs	r2, #30
 8008352:	4393      	bics	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	4a36      	ldr	r2, [pc, #216]	@ (8008434 <HAL_LPTIM_Init+0x150>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4a35      	ldr	r2, [pc, #212]	@ (8008438 <HAL_LPTIM_Init+0x154>)
 8008364:	4013      	ands	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a34      	ldr	r2, [pc, #208]	@ (800843c <HAL_LPTIM_Init+0x158>)
 800836c:	4013      	ands	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008378:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800837e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8008384:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800838a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d107      	bne.n	80083aa <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80083a2:	4313      	orrs	r3, r2
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d005      	beq.n	80083be <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083b6:	2380      	movs	r3, #128	@ 0x80
 80083b8:	041b      	lsls	r3, r3, #16
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d107      	bne.n	80083ce <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80083c6:	4313      	orrs	r3, r2
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	4a18      	ldr	r2, [pc, #96]	@ (8008434 <HAL_LPTIM_Init+0x150>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d00a      	beq.n	80083ee <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80083e0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80083e6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a11      	ldr	r2, [pc, #68]	@ (8008440 <HAL_LPTIM_Init+0x15c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d108      	bne.n	8008412 <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008410:	e004      	b.n	800841c <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800841a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2236      	movs	r2, #54	@ 0x36
 8008420:	2101      	movs	r1, #1
 8008422:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	0018      	movs	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	b004      	add	sp, #16
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	080050e9 	.word	0x080050e9
 8008434:	0000ffff 	.word	0x0000ffff
 8008438:	ffff1f3f 	.word	0xffff1f3f
 800843c:	ff19f1fe 	.word	0xff19f1fe
 8008440:	40007c00 	.word	0x40007c00

08008444 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2236      	movs	r2, #54	@ 0x36
 8008454:	2102      	movs	r1, #2
 8008456:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2180      	movs	r1, #128	@ 0x80
 8008464:	0349      	lsls	r1, r1, #13
 8008466:	430a      	orrs	r2, r1
 8008468:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2101      	movs	r1, #1
 8008476:	430a      	orrs	r2, r1
 8008478:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2210      	movs	r2, #16
 8008480:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2110      	movs	r1, #16
 800848e:	0018      	movs	r0, r3
 8008490:	f000 f9fa 	bl	8008888 <LPTIM_WaitForFlag>
 8008494:	0003      	movs	r3, r0
 8008496:	2b03      	cmp	r3, #3
 8008498:	d101      	bne.n	800849e <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e060      	b.n	8008560 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2208      	movs	r2, #8
 80084a4:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2108      	movs	r1, #8
 80084b2:	0018      	movs	r0, r3
 80084b4:	f000 f9e8 	bl	8008888 <LPTIM_WaitForFlag>
 80084b8:	0003      	movs	r3, r0
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d101      	bne.n	80084c2 <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e04e      	b.n	8008560 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	0018      	movs	r0, r3
 80084c6:	f000 fa17 	bl	80088f8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	0018      	movs	r0, r3
 80084ce:	f000 f9a3 	bl	8008818 <HAL_LPTIM_GetState>
 80084d2:	0003      	movs	r3, r0
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d101      	bne.n	80084dc <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e041      	b.n	8008560 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2110      	movs	r1, #16
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2108      	movs	r1, #8
 80084f8:	430a      	orrs	r2, r1
 80084fa:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2102      	movs	r1, #2
 8008508:	430a      	orrs	r2, r1
 800850a:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2101      	movs	r1, #1
 8008518:	430a      	orrs	r2, r1
 800851a:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	4a11      	ldr	r2, [pc, #68]	@ (8008568 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d007      	beq.n	8008536 <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2104      	movs	r1, #4
 8008532:	430a      	orrs	r2, r1
 8008534:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2101      	movs	r1, #1
 8008542:	430a      	orrs	r2, r1
 8008544:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	691a      	ldr	r2, [r3, #16]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2102      	movs	r1, #2
 8008552:	430a      	orrs	r2, r1
 8008554:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2236      	movs	r2, #54	@ 0x36
 800855a:	2101      	movs	r1, #1
 800855c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	0018      	movs	r0, r3
 8008562:	46bd      	mov	sp, r7
 8008564:	b004      	add	sp, #16
 8008566:	bd80      	pop	{r7, pc}
 8008568:	0000ffff 	.word	0x0000ffff

0800856c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2201      	movs	r2, #1
 800857c:	4013      	ands	r3, r2
 800857e:	2b01      	cmp	r3, #1
 8008580:	d10f      	bne.n	80085a2 <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	2201      	movs	r2, #1
 800858a:	4013      	ands	r3, r2
 800858c:	2b01      	cmp	r3, #1
 800858e:	d108      	bne.n	80085a2 <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2201      	movs	r2, #1
 8008596:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	0010      	movs	r0, r2
 80085a0:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2202      	movs	r2, #2
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d10f      	bne.n	80085d0 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2202      	movs	r2, #2
 80085b8:	4013      	ands	r3, r2
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d108      	bne.n	80085d0 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2202      	movs	r2, #2
 80085c4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	0010      	movs	r0, r2
 80085ce:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2204      	movs	r2, #4
 80085d8:	4013      	ands	r3, r2
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d10f      	bne.n	80085fe <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2204      	movs	r2, #4
 80085e6:	4013      	ands	r3, r2
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d108      	bne.n	80085fe <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2204      	movs	r2, #4
 80085f2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	0010      	movs	r0, r2
 80085fc:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2208      	movs	r2, #8
 8008606:	4013      	ands	r3, r2
 8008608:	2b08      	cmp	r3, #8
 800860a:	d10f      	bne.n	800862c <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	2208      	movs	r2, #8
 8008614:	4013      	ands	r3, r2
 8008616:	2b08      	cmp	r3, #8
 8008618:	d108      	bne.n	800862c <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2208      	movs	r2, #8
 8008620:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	0010      	movs	r0, r2
 800862a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2210      	movs	r2, #16
 8008634:	4013      	ands	r3, r2
 8008636:	2b10      	cmp	r3, #16
 8008638:	d10f      	bne.n	800865a <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	2210      	movs	r2, #16
 8008642:	4013      	ands	r3, r2
 8008644:	2b10      	cmp	r3, #16
 8008646:	d108      	bne.n	800865a <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2210      	movs	r2, #16
 800864e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	0010      	movs	r0, r2
 8008658:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2220      	movs	r2, #32
 8008662:	4013      	ands	r3, r2
 8008664:	2b20      	cmp	r3, #32
 8008666:	d10f      	bne.n	8008688 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	2220      	movs	r2, #32
 8008670:	4013      	ands	r3, r2
 8008672:	2b20      	cmp	r3, #32
 8008674:	d108      	bne.n	8008688 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2220      	movs	r2, #32
 800867c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	0010      	movs	r0, r2
 8008686:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2240      	movs	r2, #64	@ 0x40
 8008690:	4013      	ands	r3, r2
 8008692:	2b40      	cmp	r3, #64	@ 0x40
 8008694:	d10f      	bne.n	80086b6 <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2240      	movs	r2, #64	@ 0x40
 800869e:	4013      	ands	r3, r2
 80086a0:	2b40      	cmp	r3, #64	@ 0x40
 80086a2:	d108      	bne.n	80086b6 <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2240      	movs	r2, #64	@ 0x40
 80086aa:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	0010      	movs	r0, r2
 80086b4:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80086b6:	46c0      	nop			@ (mov r8, r8)
 80086b8:	46bd      	mov	sp, r7
 80086ba:	b002      	add	sp, #8
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80086c6:	46c0      	nop			@ (mov r8, r8)
 80086c8:	46bd      	mov	sp, r7
 80086ca:	b002      	add	sp, #8
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80086d6:	46c0      	nop			@ (mov r8, r8)
 80086d8:	46bd      	mov	sp, r7
 80086da:	b002      	add	sp, #8
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80086e6:	46c0      	nop			@ (mov r8, r8)
 80086e8:	46bd      	mov	sp, r7
 80086ea:	b002      	add	sp, #8
 80086ec:	bd80      	pop	{r7, pc}

080086ee <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80086f6:	46c0      	nop			@ (mov r8, r8)
 80086f8:	46bd      	mov	sp, r7
 80086fa:	b002      	add	sp, #8
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	46bd      	mov	sp, r7
 800870a:	b002      	add	sp, #8
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008716:	46c0      	nop			@ (mov r8, r8)
 8008718:	46bd      	mov	sp, r7
 800871a:	b002      	add	sp, #8
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	46bd      	mov	sp, r7
 800872a:	b002      	add	sp, #8
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	230b      	movs	r3, #11
 800873c:	18fb      	adds	r3, r7, r3
 800873e:	1c0a      	adds	r2, r1, #0
 8008740:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008742:	2317      	movs	r3, #23
 8008744:	18fb      	adds	r3, r7, r3
 8008746:	2200      	movs	r2, #0
 8008748:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e05a      	b.n	800880a <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2236      	movs	r2, #54	@ 0x36
 8008758:	5c9b      	ldrb	r3, [r3, r2]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b01      	cmp	r3, #1
 800875e:	d132      	bne.n	80087c6 <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8008760:	230b      	movs	r3, #11
 8008762:	18fb      	adds	r3, r7, r3
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b08      	cmp	r3, #8
 8008768:	d828      	bhi.n	80087bc <HAL_LPTIM_RegisterCallback+0x8c>
 800876a:	009a      	lsls	r2, r3, #2
 800876c:	4b29      	ldr	r3, [pc, #164]	@ (8008814 <HAL_LPTIM_RegisterCallback+0xe4>)
 800876e:	18d3      	adds	r3, r2, r3
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800877a:	e043      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008782:	e03f      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800878a:	e03b      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8008792:	e037      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800879a:	e033      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80087a2:	e02f      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80087aa:	e02b      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80087b2:	e027      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80087ba:	e023      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80087bc:	2317      	movs	r3, #23
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	2201      	movs	r2, #1
 80087c2:	701a      	strb	r2, [r3, #0]
        break;
 80087c4:	e01e      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2236      	movs	r2, #54	@ 0x36
 80087ca:	5c9b      	ldrb	r3, [r3, r2]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d114      	bne.n	80087fc <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 80087d2:	230b      	movs	r3, #11
 80087d4:	18fb      	adds	r3, r7, r3
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <HAL_LPTIM_RegisterCallback+0xb2>
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d004      	beq.n	80087ea <HAL_LPTIM_RegisterCallback+0xba>
 80087e0:	e007      	b.n	80087f2 <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80087e8:	e00c      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80087f0:	e008      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80087f2:	2317      	movs	r3, #23
 80087f4:	18fb      	adds	r3, r7, r3
 80087f6:	2201      	movs	r2, #1
 80087f8:	701a      	strb	r2, [r3, #0]
        break;
 80087fa:	e003      	b.n	8008804 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80087fc:	2317      	movs	r3, #23
 80087fe:	18fb      	adds	r3, r7, r3
 8008800:	2201      	movs	r2, #1
 8008802:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008804:	2317      	movs	r3, #23
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	781b      	ldrb	r3, [r3, #0]
}
 800880a:	0018      	movs	r0, r3
 800880c:	46bd      	mov	sp, r7
 800880e:	b006      	add	sp, #24
 8008810:	bd80      	pop	{r7, pc}
 8008812:	46c0      	nop			@ (mov r8, r8)
 8008814:	0800de74 	.word	0x0800de74

08008818 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2236      	movs	r2, #54	@ 0x36
 8008824:	5c9b      	ldrb	r3, [r3, r2]
 8008826:	b2db      	uxtb	r3, r3
}
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b002      	add	sp, #8
 800882e:	bd80      	pop	{r7, pc}

08008830 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a0c      	ldr	r2, [pc, #48]	@ (800886c <LPTIM_ResetCallback+0x3c>)
 800883c:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a0b      	ldr	r2, [pc, #44]	@ (8008870 <LPTIM_ResetCallback+0x40>)
 8008842:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a0b      	ldr	r2, [pc, #44]	@ (8008874 <LPTIM_ResetCallback+0x44>)
 8008848:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a0a      	ldr	r2, [pc, #40]	@ (8008878 <LPTIM_ResetCallback+0x48>)
 800884e:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a0a      	ldr	r2, [pc, #40]	@ (800887c <LPTIM_ResetCallback+0x4c>)
 8008854:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a09      	ldr	r2, [pc, #36]	@ (8008880 <LPTIM_ResetCallback+0x50>)
 800885a:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a09      	ldr	r2, [pc, #36]	@ (8008884 <LPTIM_ResetCallback+0x54>)
 8008860:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	46bd      	mov	sp, r7
 8008866:	b002      	add	sp, #8
 8008868:	bd80      	pop	{r7, pc}
 800886a:	46c0      	nop			@ (mov r8, r8)
 800886c:	080086bf 	.word	0x080086bf
 8008870:	080086cf 	.word	0x080086cf
 8008874:	080086df 	.word	0x080086df
 8008878:	080086ef 	.word	0x080086ef
 800887c:	080086ff 	.word	0x080086ff
 8008880:	0800870f 	.word	0x0800870f
 8008884:	0800871f 	.word	0x0800871f

08008888 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008892:	230f      	movs	r3, #15
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	2200      	movs	r2, #0
 8008898:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800889a:	4b15      	ldr	r3, [pc, #84]	@ (80088f0 <LPTIM_WaitForFlag+0x68>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4915      	ldr	r1, [pc, #84]	@ (80088f4 <LPTIM_WaitForFlag+0x6c>)
 80088a0:	0018      	movs	r0, r3
 80088a2:	f7f7 fc2f 	bl	8000104 <__udivsi3>
 80088a6:	0003      	movs	r3, r0
 80088a8:	001a      	movs	r2, r3
 80088aa:	0013      	movs	r3, r2
 80088ac:	015b      	lsls	r3, r3, #5
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	189b      	adds	r3, r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d103      	bne.n	80088cc <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80088c4:	230f      	movs	r3, #15
 80088c6:	18fb      	adds	r3, r7, r3
 80088c8:	2203      	movs	r2, #3
 80088ca:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4013      	ands	r3, r2
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d002      	beq.n	80088e2 <LPTIM_WaitForFlag+0x5a>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1ea      	bne.n	80088b8 <LPTIM_WaitForFlag+0x30>

  return result;
 80088e2:	230f      	movs	r3, #15
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	781b      	ldrb	r3, [r3, #0]
}
 80088e8:	0018      	movs	r0, r3
 80088ea:	46bd      	mov	sp, r7
 80088ec:	b004      	add	sp, #16
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	2000044c 	.word	0x2000044c
 80088f4:	00004e20 	.word	0x00004e20

080088f8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	@ 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008904:	f3ef 8310 	mrs	r3, PRIMASK
 8008908:	60fb      	str	r3, [r7, #12]
  return(result);
 800890a:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800890c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800890e:	2301      	movs	r3, #1
 8008910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f383 8810 	msr	PRIMASK, r3
}
 8008918:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a72      	ldr	r2, [pc, #456]	@ (8008ae8 <LPTIM_Disable+0x1f0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <LPTIM_Disable+0x34>
 8008924:	4a71      	ldr	r2, [pc, #452]	@ (8008aec <LPTIM_Disable+0x1f4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d007      	beq.n	800893a <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800892a:	e00d      	b.n	8008948 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800892c:	4b70      	ldr	r3, [pc, #448]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 800892e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008930:	23c0      	movs	r3, #192	@ 0xc0
 8008932:	031b      	lsls	r3, r3, #12
 8008934:	4013      	ands	r3, r2
 8008936:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008938:	e006      	b.n	8008948 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800893a:	4b6d      	ldr	r3, [pc, #436]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 800893c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800893e:	23c0      	movs	r3, #192	@ 0xc0
 8008940:	039b      	lsls	r3, r3, #14
 8008942:	4013      	ands	r3, r2
 8008944:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008946:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896e:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a5c      	ldr	r2, [pc, #368]	@ (8008ae8 <LPTIM_Disable+0x1f0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d003      	beq.n	8008982 <LPTIM_Disable+0x8a>
 800897a:	4a5c      	ldr	r2, [pc, #368]	@ (8008aec <LPTIM_Disable+0x1f4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00e      	beq.n	800899e <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008980:	e01b      	b.n	80089ba <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008982:	4b5b      	ldr	r3, [pc, #364]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 8008984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008986:	4b5a      	ldr	r3, [pc, #360]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 8008988:	2180      	movs	r1, #128	@ 0x80
 800898a:	0609      	lsls	r1, r1, #24
 800898c:	430a      	orrs	r2, r1
 800898e:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008990:	4b57      	ldr	r3, [pc, #348]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 8008992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008994:	4b56      	ldr	r3, [pc, #344]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 8008996:	0052      	lsls	r2, r2, #1
 8008998:	0852      	lsrs	r2, r2, #1
 800899a:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 800899c:	e00d      	b.n	80089ba <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800899e:	4b54      	ldr	r3, [pc, #336]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 80089a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a2:	4b53      	ldr	r3, [pc, #332]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 80089a4:	2180      	movs	r1, #128	@ 0x80
 80089a6:	05c9      	lsls	r1, r1, #23
 80089a8:	430a      	orrs	r2, r1
 80089aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80089ac:	4b50      	ldr	r3, [pc, #320]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 80089ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b0:	4b4f      	ldr	r3, [pc, #316]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 80089b2:	4950      	ldr	r1, [pc, #320]	@ (8008af4 <LPTIM_Disable+0x1fc>)
 80089b4:	400a      	ands	r2, r1
 80089b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80089b8:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <LPTIM_Disable+0xd0>
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d100      	bne.n	80089c8 <LPTIM_Disable+0xd0>
 80089c6:	e071      	b.n	8008aac <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a46      	ldr	r2, [pc, #280]	@ (8008ae8 <LPTIM_Disable+0x1f0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d003      	beq.n	80089da <LPTIM_Disable+0xe2>
 80089d2:	4a46      	ldr	r2, [pc, #280]	@ (8008aec <LPTIM_Disable+0x1f4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80089d8:	e00d      	b.n	80089f6 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80089da:	4b45      	ldr	r3, [pc, #276]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 80089dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089de:	4b44      	ldr	r3, [pc, #272]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 80089e0:	4945      	ldr	r1, [pc, #276]	@ (8008af8 <LPTIM_Disable+0x200>)
 80089e2:	400a      	ands	r2, r1
 80089e4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80089e6:	e006      	b.n	80089f6 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80089e8:	4b41      	ldr	r3, [pc, #260]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 80089ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089ec:	4b40      	ldr	r3, [pc, #256]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 80089ee:	4943      	ldr	r1, [pc, #268]	@ (8008afc <LPTIM_Disable+0x204>)
 80089f0:	400a      	ands	r2, r1
 80089f2:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80089f4:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01b      	beq.n	8008a34 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2101      	movs	r1, #1
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	69fa      	ldr	r2, [r7, #28]
 8008a12:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2108      	movs	r1, #8
 8008a18:	0018      	movs	r0, r3
 8008a1a:	f7ff ff35 	bl	8008888 <LPTIM_WaitForFlag>
 8008a1e:	0003      	movs	r3, r0
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d103      	bne.n	8008a2c <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2236      	movs	r2, #54	@ 0x36
 8008a28:	2103      	movs	r1, #3
 8008a2a:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2208      	movs	r2, #8
 8008a32:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d01b      	beq.n	8008a72 <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	691a      	ldr	r2, [r3, #16]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2101      	movs	r1, #1
 8008a46:	430a      	orrs	r2, r1
 8008a48:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2110      	movs	r1, #16
 8008a56:	0018      	movs	r0, r3
 8008a58:	f7ff ff16 	bl	8008888 <LPTIM_WaitForFlag>
 8008a5c:	0003      	movs	r3, r0
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d103      	bne.n	8008a6a <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2236      	movs	r2, #54	@ 0x36
 8008a66:	2103      	movs	r1, #3
 8008a68:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2210      	movs	r2, #16
 8008a70:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae8 <LPTIM_Disable+0x1f0>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <LPTIM_Disable+0x18c>
 8008a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008aec <LPTIM_Disable+0x1f4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00a      	beq.n	8008a98 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008a82:	e013      	b.n	8008aac <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008a84:	4b1a      	ldr	r3, [pc, #104]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 8008a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a88:	4a1b      	ldr	r2, [pc, #108]	@ (8008af8 <LPTIM_Disable+0x200>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	0019      	movs	r1, r3
 8008a8e:	4b18      	ldr	r3, [pc, #96]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 8008a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a92:	430a      	orrs	r2, r1
 8008a94:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008a96:	e009      	b.n	8008aac <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008a98:	4b15      	ldr	r3, [pc, #84]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 8008a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9c:	4a17      	ldr	r2, [pc, #92]	@ (8008afc <LPTIM_Disable+0x204>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	4b13      	ldr	r3, [pc, #76]	@ (8008af0 <LPTIM_Disable+0x1f8>)
 8008aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008aaa:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	691a      	ldr	r2, [r3, #16]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	438a      	bics	r2, r1
 8008aba:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac2:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a3a      	ldr	r2, [r7, #32]
 8008aca:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f383 8810 	msr	PRIMASK, r3
}
 8008ade:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008ae0:	46c0      	nop			@ (mov r8, r8)
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	b00c      	add	sp, #48	@ 0x30
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	40007c00 	.word	0x40007c00
 8008aec:	40009400 	.word	0x40009400
 8008af0:	40021000 	.word	0x40021000
 8008af4:	bfffffff 	.word	0xbfffffff
 8008af8:	fff3ffff 	.word	0xfff3ffff
 8008afc:	ffcfffff 	.word	0xffcfffff

08008b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008b08:	4b19      	ldr	r3, [pc, #100]	@ (8008b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a19      	ldr	r2, [pc, #100]	@ (8008b74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	0019      	movs	r1, r3
 8008b12:	4b17      	ldr	r3, [pc, #92]	@ (8008b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	2380      	movs	r3, #128	@ 0x80
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d11f      	bne.n	8008b64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008b24:	4b14      	ldr	r3, [pc, #80]	@ (8008b78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	0013      	movs	r3, r2
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	189b      	adds	r3, r3, r2
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	4912      	ldr	r1, [pc, #72]	@ (8008b7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008b32:	0018      	movs	r0, r3
 8008b34:	f7f7 fae6 	bl	8000104 <__udivsi3>
 8008b38:	0003      	movs	r3, r0
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b3e:	e008      	b.n	8008b52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	e001      	b.n	8008b52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e009      	b.n	8008b66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b52:	4b07      	ldr	r3, [pc, #28]	@ (8008b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008b54:	695a      	ldr	r2, [r3, #20]
 8008b56:	2380      	movs	r3, #128	@ 0x80
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	401a      	ands	r2, r3
 8008b5c:	2380      	movs	r3, #128	@ 0x80
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d0ed      	beq.n	8008b40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	0018      	movs	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b004      	add	sp, #16
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	46c0      	nop			@ (mov r8, r8)
 8008b70:	40007000 	.word	0x40007000
 8008b74:	fffff9ff 	.word	0xfffff9ff
 8008b78:	2000044c 	.word	0x2000044c
 8008b7c:	000f4240 	.word	0x000f4240

08008b80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008b84:	4b03      	ldr	r3, [pc, #12]	@ (8008b94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	23e0      	movs	r3, #224	@ 0xe0
 8008b8a:	01db      	lsls	r3, r3, #7
 8008b8c:	4013      	ands	r3, r2
}
 8008b8e:	0018      	movs	r0, r3
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	40021000 	.word	0x40021000

08008b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e2fe      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	d100      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x1e>
 8008bb4:	e07c      	b.n	8008cb0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bb6:	4bc3      	ldr	r3, [pc, #780]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2238      	movs	r2, #56	@ 0x38
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bc0:	4bc0      	ldr	r3, [pc, #768]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	2b10      	cmp	r3, #16
 8008bce:	d102      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x3e>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d002      	beq.n	8008bdc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d10b      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bdc:	4bb9      	ldr	r3, [pc, #740]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	2380      	movs	r3, #128	@ 0x80
 8008be2:	029b      	lsls	r3, r3, #10
 8008be4:	4013      	ands	r3, r2
 8008be6:	d062      	beq.n	8008cae <HAL_RCC_OscConfig+0x116>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d15e      	bne.n	8008cae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e2d9      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	2380      	movs	r3, #128	@ 0x80
 8008bfa:	025b      	lsls	r3, r3, #9
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d107      	bne.n	8008c10 <HAL_RCC_OscConfig+0x78>
 8008c00:	4bb0      	ldr	r3, [pc, #704]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	4baf      	ldr	r3, [pc, #700]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c06:	2180      	movs	r1, #128	@ 0x80
 8008c08:	0249      	lsls	r1, r1, #9
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	e020      	b.n	8008c52 <HAL_RCC_OscConfig+0xba>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	23a0      	movs	r3, #160	@ 0xa0
 8008c16:	02db      	lsls	r3, r3, #11
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d10e      	bne.n	8008c3a <HAL_RCC_OscConfig+0xa2>
 8008c1c:	4ba9      	ldr	r3, [pc, #676]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4ba8      	ldr	r3, [pc, #672]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c22:	2180      	movs	r1, #128	@ 0x80
 8008c24:	02c9      	lsls	r1, r1, #11
 8008c26:	430a      	orrs	r2, r1
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	4ba6      	ldr	r3, [pc, #664]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	4ba5      	ldr	r3, [pc, #660]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c30:	2180      	movs	r1, #128	@ 0x80
 8008c32:	0249      	lsls	r1, r1, #9
 8008c34:	430a      	orrs	r2, r1
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e00b      	b.n	8008c52 <HAL_RCC_OscConfig+0xba>
 8008c3a:	4ba2      	ldr	r3, [pc, #648]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4ba1      	ldr	r3, [pc, #644]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c40:	49a1      	ldr	r1, [pc, #644]	@ (8008ec8 <HAL_RCC_OscConfig+0x330>)
 8008c42:	400a      	ands	r2, r1
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	4b9f      	ldr	r3, [pc, #636]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c4c:	499f      	ldr	r1, [pc, #636]	@ (8008ecc <HAL_RCC_OscConfig+0x334>)
 8008c4e:	400a      	ands	r2, r1
 8008c50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d014      	beq.n	8008c84 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c5a:	f7fd fb19 	bl	8006290 <HAL_GetTick>
 8008c5e:	0003      	movs	r3, r0
 8008c60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c62:	e008      	b.n	8008c76 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c64:	f7fd fb14 	bl	8006290 <HAL_GetTick>
 8008c68:	0002      	movs	r2, r0
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b64      	cmp	r3, #100	@ 0x64
 8008c70:	d901      	bls.n	8008c76 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e298      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c76:	4b93      	ldr	r3, [pc, #588]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	2380      	movs	r3, #128	@ 0x80
 8008c7c:	029b      	lsls	r3, r3, #10
 8008c7e:	4013      	ands	r3, r2
 8008c80:	d0f0      	beq.n	8008c64 <HAL_RCC_OscConfig+0xcc>
 8008c82:	e015      	b.n	8008cb0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c84:	f7fd fb04 	bl	8006290 <HAL_GetTick>
 8008c88:	0003      	movs	r3, r0
 8008c8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c8c:	e008      	b.n	8008ca0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c8e:	f7fd faff 	bl	8006290 <HAL_GetTick>
 8008c92:	0002      	movs	r2, r0
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	2b64      	cmp	r3, #100	@ 0x64
 8008c9a:	d901      	bls.n	8008ca0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e283      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ca0:	4b88      	ldr	r3, [pc, #544]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	2380      	movs	r3, #128	@ 0x80
 8008ca6:	029b      	lsls	r3, r3, #10
 8008ca8:	4013      	ands	r3, r2
 8008caa:	d1f0      	bne.n	8008c8e <HAL_RCC_OscConfig+0xf6>
 8008cac:	e000      	b.n	8008cb0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	d100      	bne.n	8008cbc <HAL_RCC_OscConfig+0x124>
 8008cba:	e099      	b.n	8008df0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cbc:	4b81      	ldr	r3, [pc, #516]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2238      	movs	r2, #56	@ 0x38
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	2203      	movs	r2, #3
 8008ccc:	4013      	ands	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2b10      	cmp	r3, #16
 8008cd4:	d102      	bne.n	8008cdc <HAL_RCC_OscConfig+0x144>
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d002      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d135      	bne.n	8008d4e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ce2:	4b78      	ldr	r3, [pc, #480]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	2380      	movs	r3, #128	@ 0x80
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	4013      	ands	r3, r2
 8008cec:	d005      	beq.n	8008cfa <HAL_RCC_OscConfig+0x162>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e256      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cfa:	4b72      	ldr	r3, [pc, #456]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	4a74      	ldr	r2, [pc, #464]	@ (8008ed0 <HAL_RCC_OscConfig+0x338>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	0019      	movs	r1, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	021a      	lsls	r2, r3, #8
 8008d0a:	4b6e      	ldr	r3, [pc, #440]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d112      	bne.n	8008d3c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008d16:	4b6b      	ldr	r3, [pc, #428]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8008ed4 <HAL_RCC_OscConfig+0x33c>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	0019      	movs	r1, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691a      	ldr	r2, [r3, #16]
 8008d24:	4b67      	ldr	r3, [pc, #412]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d26:	430a      	orrs	r2, r1
 8008d28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008d2a:	4b66      	ldr	r3, [pc, #408]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	0adb      	lsrs	r3, r3, #11
 8008d30:	2207      	movs	r2, #7
 8008d32:	4013      	ands	r3, r2
 8008d34:	4a68      	ldr	r2, [pc, #416]	@ (8008ed8 <HAL_RCC_OscConfig+0x340>)
 8008d36:	40da      	lsrs	r2, r3
 8008d38:	4b68      	ldr	r3, [pc, #416]	@ (8008edc <HAL_RCC_OscConfig+0x344>)
 8008d3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d3c:	4b68      	ldr	r3, [pc, #416]	@ (8008ee0 <HAL_RCC_OscConfig+0x348>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	0018      	movs	r0, r3
 8008d42:	f7fd fa49 	bl	80061d8 <HAL_InitTick>
 8008d46:	1e03      	subs	r3, r0, #0
 8008d48:	d051      	beq.n	8008dee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e22c      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d030      	beq.n	8008db8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008d56:	4b5b      	ldr	r3, [pc, #364]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a5e      	ldr	r2, [pc, #376]	@ (8008ed4 <HAL_RCC_OscConfig+0x33c>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	0019      	movs	r1, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	691a      	ldr	r2, [r3, #16]
 8008d64:	4b57      	ldr	r3, [pc, #348]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d66:	430a      	orrs	r2, r1
 8008d68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008d6a:	4b56      	ldr	r3, [pc, #344]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b55      	ldr	r3, [pc, #340]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d70:	2180      	movs	r1, #128	@ 0x80
 8008d72:	0049      	lsls	r1, r1, #1
 8008d74:	430a      	orrs	r2, r1
 8008d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d78:	f7fd fa8a 	bl	8006290 <HAL_GetTick>
 8008d7c:	0003      	movs	r3, r0
 8008d7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d80:	e008      	b.n	8008d94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d82:	f7fd fa85 	bl	8006290 <HAL_GetTick>
 8008d86:	0002      	movs	r2, r0
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e209      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d94:	4b4b      	ldr	r3, [pc, #300]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	2380      	movs	r3, #128	@ 0x80
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	d0f0      	beq.n	8008d82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008da0:	4b48      	ldr	r3, [pc, #288]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	4a4a      	ldr	r2, [pc, #296]	@ (8008ed0 <HAL_RCC_OscConfig+0x338>)
 8008da6:	4013      	ands	r3, r2
 8008da8:	0019      	movs	r1, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	021a      	lsls	r2, r3, #8
 8008db0:	4b44      	ldr	r3, [pc, #272]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008db2:	430a      	orrs	r2, r1
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	e01b      	b.n	8008df0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008db8:	4b42      	ldr	r3, [pc, #264]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b41      	ldr	r3, [pc, #260]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008dbe:	4949      	ldr	r1, [pc, #292]	@ (8008ee4 <HAL_RCC_OscConfig+0x34c>)
 8008dc0:	400a      	ands	r2, r1
 8008dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc4:	f7fd fa64 	bl	8006290 <HAL_GetTick>
 8008dc8:	0003      	movs	r3, r0
 8008dca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008dcc:	e008      	b.n	8008de0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dce:	f7fd fa5f 	bl	8006290 <HAL_GetTick>
 8008dd2:	0002      	movs	r2, r0
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d901      	bls.n	8008de0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e1e3      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008de0:	4b38      	ldr	r3, [pc, #224]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4013      	ands	r3, r2
 8008dea:	d1f0      	bne.n	8008dce <HAL_RCC_OscConfig+0x236>
 8008dec:	e000      	b.n	8008df0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2208      	movs	r2, #8
 8008df6:	4013      	ands	r3, r2
 8008df8:	d047      	beq.n	8008e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008dfa:	4b32      	ldr	r3, [pc, #200]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2238      	movs	r2, #56	@ 0x38
 8008e00:	4013      	ands	r3, r2
 8008e02:	2b18      	cmp	r3, #24
 8008e04:	d10a      	bne.n	8008e1c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008e06:	4b2f      	ldr	r3, [pc, #188]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	d03c      	beq.n	8008e8a <HAL_RCC_OscConfig+0x2f2>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d138      	bne.n	8008e8a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e1c5      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d019      	beq.n	8008e58 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008e24:	4b27      	ldr	r3, [pc, #156]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008e26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008e28:	4b26      	ldr	r3, [pc, #152]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e30:	f7fd fa2e 	bl	8006290 <HAL_GetTick>
 8008e34:	0003      	movs	r3, r0
 8008e36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e38:	e008      	b.n	8008e4c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e3a:	f7fd fa29 	bl	8006290 <HAL_GetTick>
 8008e3e:	0002      	movs	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e1ad      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e50:	2202      	movs	r2, #2
 8008e52:	4013      	ands	r3, r2
 8008e54:	d0f1      	beq.n	8008e3a <HAL_RCC_OscConfig+0x2a2>
 8008e56:	e018      	b.n	8008e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008e58:	4b1a      	ldr	r3, [pc, #104]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008e5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008e5c:	4b19      	ldr	r3, [pc, #100]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008e5e:	2101      	movs	r1, #1
 8008e60:	438a      	bics	r2, r1
 8008e62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e64:	f7fd fa14 	bl	8006290 <HAL_GetTick>
 8008e68:	0003      	movs	r3, r0
 8008e6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e6c:	e008      	b.n	8008e80 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e6e:	f7fd fa0f 	bl	8006290 <HAL_GetTick>
 8008e72:	0002      	movs	r2, r0
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d901      	bls.n	8008e80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e193      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e80:	4b10      	ldr	r3, [pc, #64]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e84:	2202      	movs	r2, #2
 8008e86:	4013      	ands	r3, r2
 8008e88:	d1f1      	bne.n	8008e6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	4013      	ands	r3, r2
 8008e92:	d100      	bne.n	8008e96 <HAL_RCC_OscConfig+0x2fe>
 8008e94:	e0c6      	b.n	8009024 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e96:	231f      	movs	r3, #31
 8008e98:	18fb      	adds	r3, r7, r3
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008e9e:	4b09      	ldr	r3, [pc, #36]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	2238      	movs	r2, #56	@ 0x38
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	2b20      	cmp	r3, #32
 8008ea8:	d11e      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008eaa:	4b06      	ldr	r3, [pc, #24]	@ (8008ec4 <HAL_RCC_OscConfig+0x32c>)
 8008eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eae:	2202      	movs	r2, #2
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	d100      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x31e>
 8008eb4:	e0b6      	b.n	8009024 <HAL_RCC_OscConfig+0x48c>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d000      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x328>
 8008ebe:	e0b1      	b.n	8009024 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e171      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
 8008ec4:	40021000 	.word	0x40021000
 8008ec8:	fffeffff 	.word	0xfffeffff
 8008ecc:	fffbffff 	.word	0xfffbffff
 8008ed0:	ffff80ff 	.word	0xffff80ff
 8008ed4:	ffffc7ff 	.word	0xffffc7ff
 8008ed8:	00f42400 	.word	0x00f42400
 8008edc:	2000044c 	.word	0x2000044c
 8008ee0:	20000450 	.word	0x20000450
 8008ee4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ee8:	4bb1      	ldr	r3, [pc, #708]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eec:	2380      	movs	r3, #128	@ 0x80
 8008eee:	055b      	lsls	r3, r3, #21
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	d101      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x360>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <HAL_RCC_OscConfig+0x362>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d011      	beq.n	8008f22 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008efe:	4bac      	ldr	r3, [pc, #688]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f02:	4bab      	ldr	r3, [pc, #684]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f04:	2180      	movs	r1, #128	@ 0x80
 8008f06:	0549      	lsls	r1, r1, #21
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008f0c:	4ba8      	ldr	r3, [pc, #672]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	055b      	lsls	r3, r3, #21
 8008f14:	4013      	ands	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008f1a:	231f      	movs	r3, #31
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	2201      	movs	r2, #1
 8008f20:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f22:	4ba4      	ldr	r3, [pc, #656]	@ (80091b4 <HAL_RCC_OscConfig+0x61c>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	2380      	movs	r3, #128	@ 0x80
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	d11a      	bne.n	8008f64 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f2e:	4ba1      	ldr	r3, [pc, #644]	@ (80091b4 <HAL_RCC_OscConfig+0x61c>)
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4ba0      	ldr	r3, [pc, #640]	@ (80091b4 <HAL_RCC_OscConfig+0x61c>)
 8008f34:	2180      	movs	r1, #128	@ 0x80
 8008f36:	0049      	lsls	r1, r1, #1
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008f3c:	f7fd f9a8 	bl	8006290 <HAL_GetTick>
 8008f40:	0003      	movs	r3, r0
 8008f42:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f44:	e008      	b.n	8008f58 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f46:	f7fd f9a3 	bl	8006290 <HAL_GetTick>
 8008f4a:	0002      	movs	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d901      	bls.n	8008f58 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e127      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f58:	4b96      	ldr	r3, [pc, #600]	@ (80091b4 <HAL_RCC_OscConfig+0x61c>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	2380      	movs	r3, #128	@ 0x80
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	4013      	ands	r3, r2
 8008f62:	d0f0      	beq.n	8008f46 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d106      	bne.n	8008f7a <HAL_RCC_OscConfig+0x3e2>
 8008f6c:	4b90      	ldr	r3, [pc, #576]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f70:	4b8f      	ldr	r3, [pc, #572]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f72:	2101      	movs	r1, #1
 8008f74:	430a      	orrs	r2, r1
 8008f76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008f78:	e01c      	b.n	8008fb4 <HAL_RCC_OscConfig+0x41c>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	d10c      	bne.n	8008f9c <HAL_RCC_OscConfig+0x404>
 8008f82:	4b8b      	ldr	r3, [pc, #556]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f86:	4b8a      	ldr	r3, [pc, #552]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f88:	2104      	movs	r1, #4
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008f8e:	4b88      	ldr	r3, [pc, #544]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f92:	4b87      	ldr	r3, [pc, #540]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f94:	2101      	movs	r1, #1
 8008f96:	430a      	orrs	r2, r1
 8008f98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008f9a:	e00b      	b.n	8008fb4 <HAL_RCC_OscConfig+0x41c>
 8008f9c:	4b84      	ldr	r3, [pc, #528]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008f9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fa0:	4b83      	ldr	r3, [pc, #524]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	438a      	bics	r2, r1
 8008fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008fa8:	4b81      	ldr	r3, [pc, #516]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008faa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fac:	4b80      	ldr	r3, [pc, #512]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008fae:	2104      	movs	r1, #4
 8008fb0:	438a      	bics	r2, r1
 8008fb2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d014      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fbc:	f7fd f968 	bl	8006290 <HAL_GetTick>
 8008fc0:	0003      	movs	r3, r0
 8008fc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fc4:	e009      	b.n	8008fda <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fc6:	f7fd f963 	bl	8006290 <HAL_GetTick>
 8008fca:	0002      	movs	r2, r0
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	4a79      	ldr	r2, [pc, #484]	@ (80091b8 <HAL_RCC_OscConfig+0x620>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e0e6      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fda:	4b75      	ldr	r3, [pc, #468]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8008fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fde:	2202      	movs	r2, #2
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	d0f0      	beq.n	8008fc6 <HAL_RCC_OscConfig+0x42e>
 8008fe4:	e013      	b.n	800900e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe6:	f7fd f953 	bl	8006290 <HAL_GetTick>
 8008fea:	0003      	movs	r3, r0
 8008fec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008fee:	e009      	b.n	8009004 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ff0:	f7fd f94e 	bl	8006290 <HAL_GetTick>
 8008ff4:	0002      	movs	r2, r0
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80091b8 <HAL_RCC_OscConfig+0x620>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e0d1      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009004:	4b6a      	ldr	r3, [pc, #424]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8009006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009008:	2202      	movs	r2, #2
 800900a:	4013      	ands	r3, r2
 800900c:	d1f0      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800900e:	231f      	movs	r3, #31
 8009010:	18fb      	adds	r3, r7, r3
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d105      	bne.n	8009024 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009018:	4b65      	ldr	r3, [pc, #404]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 800901a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800901c:	4b64      	ldr	r3, [pc, #400]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 800901e:	4967      	ldr	r1, [pc, #412]	@ (80091bc <HAL_RCC_OscConfig+0x624>)
 8009020:	400a      	ands	r2, r1
 8009022:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d100      	bne.n	800902e <HAL_RCC_OscConfig+0x496>
 800902c:	e0bb      	b.n	80091a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800902e:	4b60      	ldr	r3, [pc, #384]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	2238      	movs	r2, #56	@ 0x38
 8009034:	4013      	ands	r3, r2
 8009036:	2b10      	cmp	r3, #16
 8009038:	d100      	bne.n	800903c <HAL_RCC_OscConfig+0x4a4>
 800903a:	e07b      	b.n	8009134 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d156      	bne.n	80090f2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009044:	4b5a      	ldr	r3, [pc, #360]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	4b59      	ldr	r3, [pc, #356]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 800904a:	495d      	ldr	r1, [pc, #372]	@ (80091c0 <HAL_RCC_OscConfig+0x628>)
 800904c:	400a      	ands	r2, r1
 800904e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009050:	f7fd f91e 	bl	8006290 <HAL_GetTick>
 8009054:	0003      	movs	r3, r0
 8009056:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009058:	e008      	b.n	800906c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800905a:	f7fd f919 	bl	8006290 <HAL_GetTick>
 800905e:	0002      	movs	r2, r0
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d901      	bls.n	800906c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e09d      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800906c:	4b50      	ldr	r3, [pc, #320]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	2380      	movs	r3, #128	@ 0x80
 8009072:	049b      	lsls	r3, r3, #18
 8009074:	4013      	ands	r3, r2
 8009076:	d1f0      	bne.n	800905a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009078:	4b4d      	ldr	r3, [pc, #308]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	4a51      	ldr	r2, [pc, #324]	@ (80091c4 <HAL_RCC_OscConfig+0x62c>)
 800907e:	4013      	ands	r3, r2
 8009080:	0019      	movs	r1, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1a      	ldr	r2, [r3, #32]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	431a      	orrs	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009098:	431a      	orrs	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a4:	431a      	orrs	r2, r3
 80090a6:	4b42      	ldr	r3, [pc, #264]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 80090a8:	430a      	orrs	r2, r1
 80090aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090ac:	4b40      	ldr	r3, [pc, #256]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	4b3f      	ldr	r3, [pc, #252]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 80090b2:	2180      	movs	r1, #128	@ 0x80
 80090b4:	0449      	lsls	r1, r1, #17
 80090b6:	430a      	orrs	r2, r1
 80090b8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80090ba:	4b3d      	ldr	r3, [pc, #244]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	4b3c      	ldr	r3, [pc, #240]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 80090c0:	2180      	movs	r1, #128	@ 0x80
 80090c2:	0549      	lsls	r1, r1, #21
 80090c4:	430a      	orrs	r2, r1
 80090c6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c8:	f7fd f8e2 	bl	8006290 <HAL_GetTick>
 80090cc:	0003      	movs	r3, r0
 80090ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090d2:	f7fd f8dd 	bl	8006290 <HAL_GetTick>
 80090d6:	0002      	movs	r2, r0
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e061      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090e4:	4b32      	ldr	r3, [pc, #200]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	2380      	movs	r3, #128	@ 0x80
 80090ea:	049b      	lsls	r3, r3, #18
 80090ec:	4013      	ands	r3, r2
 80090ee:	d0f0      	beq.n	80090d2 <HAL_RCC_OscConfig+0x53a>
 80090f0:	e059      	b.n	80091a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090f2:	4b2f      	ldr	r3, [pc, #188]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b2e      	ldr	r3, [pc, #184]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 80090f8:	4931      	ldr	r1, [pc, #196]	@ (80091c0 <HAL_RCC_OscConfig+0x628>)
 80090fa:	400a      	ands	r2, r1
 80090fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fe:	f7fd f8c7 	bl	8006290 <HAL_GetTick>
 8009102:	0003      	movs	r3, r0
 8009104:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009106:	e008      	b.n	800911a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009108:	f7fd f8c2 	bl	8006290 <HAL_GetTick>
 800910c:	0002      	movs	r2, r0
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b02      	cmp	r3, #2
 8009114:	d901      	bls.n	800911a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e046      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800911a:	4b25      	ldr	r3, [pc, #148]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	2380      	movs	r3, #128	@ 0x80
 8009120:	049b      	lsls	r3, r3, #18
 8009122:	4013      	ands	r3, r2
 8009124:	d1f0      	bne.n	8009108 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009126:	4b22      	ldr	r3, [pc, #136]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	4b21      	ldr	r3, [pc, #132]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 800912c:	4926      	ldr	r1, [pc, #152]	@ (80091c8 <HAL_RCC_OscConfig+0x630>)
 800912e:	400a      	ands	r2, r1
 8009130:	60da      	str	r2, [r3, #12]
 8009132:	e038      	b.n	80091a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e033      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009140:	4b1b      	ldr	r3, [pc, #108]	@ (80091b0 <HAL_RCC_OscConfig+0x618>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2203      	movs	r2, #3
 800914a:	401a      	ands	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	429a      	cmp	r2, r3
 8009152:	d126      	bne.n	80091a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2270      	movs	r2, #112	@ 0x70
 8009158:	401a      	ands	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800915e:	429a      	cmp	r2, r3
 8009160:	d11f      	bne.n	80091a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	23fe      	movs	r3, #254	@ 0xfe
 8009166:	01db      	lsls	r3, r3, #7
 8009168:	401a      	ands	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009170:	429a      	cmp	r2, r3
 8009172:	d116      	bne.n	80091a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	23f8      	movs	r3, #248	@ 0xf8
 8009178:	039b      	lsls	r3, r3, #14
 800917a:	401a      	ands	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009180:	429a      	cmp	r2, r3
 8009182:	d10e      	bne.n	80091a2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	23e0      	movs	r3, #224	@ 0xe0
 8009188:	051b      	lsls	r3, r3, #20
 800918a:	401a      	ands	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009190:	429a      	cmp	r2, r3
 8009192:	d106      	bne.n	80091a2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	0f5b      	lsrs	r3, r3, #29
 8009198:	075a      	lsls	r2, r3, #29
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800919e:	429a      	cmp	r2, r3
 80091a0:	d001      	beq.n	80091a6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	0018      	movs	r0, r3
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b008      	add	sp, #32
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	40021000 	.word	0x40021000
 80091b4:	40007000 	.word	0x40007000
 80091b8:	00001388 	.word	0x00001388
 80091bc:	efffffff 	.word	0xefffffff
 80091c0:	feffffff 	.word	0xfeffffff
 80091c4:	11c1808c 	.word	0x11c1808c
 80091c8:	eefefffc 	.word	0xeefefffc

080091cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e0e9      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091e0:	4b76      	ldr	r3, [pc, #472]	@ (80093bc <HAL_RCC_ClockConfig+0x1f0>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2207      	movs	r2, #7
 80091e6:	4013      	ands	r3, r2
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d91e      	bls.n	800922c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ee:	4b73      	ldr	r3, [pc, #460]	@ (80093bc <HAL_RCC_ClockConfig+0x1f0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2207      	movs	r2, #7
 80091f4:	4393      	bics	r3, r2
 80091f6:	0019      	movs	r1, r3
 80091f8:	4b70      	ldr	r3, [pc, #448]	@ (80093bc <HAL_RCC_ClockConfig+0x1f0>)
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009200:	f7fd f846 	bl	8006290 <HAL_GetTick>
 8009204:	0003      	movs	r3, r0
 8009206:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009208:	e009      	b.n	800921e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800920a:	f7fd f841 	bl	8006290 <HAL_GetTick>
 800920e:	0002      	movs	r2, r0
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	4a6a      	ldr	r2, [pc, #424]	@ (80093c0 <HAL_RCC_ClockConfig+0x1f4>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d901      	bls.n	800921e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e0ca      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800921e:	4b67      	ldr	r3, [pc, #412]	@ (80093bc <HAL_RCC_ClockConfig+0x1f0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2207      	movs	r2, #7
 8009224:	4013      	ands	r3, r2
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d1ee      	bne.n	800920a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2202      	movs	r2, #2
 8009232:	4013      	ands	r3, r2
 8009234:	d015      	beq.n	8009262 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2204      	movs	r2, #4
 800923c:	4013      	ands	r3, r2
 800923e:	d006      	beq.n	800924e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009240:	4b60      	ldr	r3, [pc, #384]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	4b5f      	ldr	r3, [pc, #380]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 8009246:	21e0      	movs	r1, #224	@ 0xe0
 8009248:	01c9      	lsls	r1, r1, #7
 800924a:	430a      	orrs	r2, r1
 800924c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800924e:	4b5d      	ldr	r3, [pc, #372]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	4a5d      	ldr	r2, [pc, #372]	@ (80093c8 <HAL_RCC_ClockConfig+0x1fc>)
 8009254:	4013      	ands	r3, r2
 8009256:	0019      	movs	r1, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	4b59      	ldr	r3, [pc, #356]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 800925e:	430a      	orrs	r2, r1
 8009260:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2201      	movs	r2, #1
 8009268:	4013      	ands	r3, r2
 800926a:	d057      	beq.n	800931c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d107      	bne.n	8009284 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009274:	4b53      	ldr	r3, [pc, #332]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	2380      	movs	r3, #128	@ 0x80
 800927a:	029b      	lsls	r3, r3, #10
 800927c:	4013      	ands	r3, r2
 800927e:	d12b      	bne.n	80092d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e097      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d107      	bne.n	800929c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800928c:	4b4d      	ldr	r3, [pc, #308]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	2380      	movs	r3, #128	@ 0x80
 8009292:	049b      	lsls	r3, r3, #18
 8009294:	4013      	ands	r3, r2
 8009296:	d11f      	bne.n	80092d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e08b      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d107      	bne.n	80092b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092a4:	4b47      	ldr	r3, [pc, #284]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	2380      	movs	r3, #128	@ 0x80
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	4013      	ands	r3, r2
 80092ae:	d113      	bne.n	80092d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e07f      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d106      	bne.n	80092ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092bc:	4b41      	ldr	r3, [pc, #260]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 80092be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092c0:	2202      	movs	r2, #2
 80092c2:	4013      	ands	r3, r2
 80092c4:	d108      	bne.n	80092d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e074      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092ca:	4b3e      	ldr	r3, [pc, #248]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 80092cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ce:	2202      	movs	r2, #2
 80092d0:	4013      	ands	r3, r2
 80092d2:	d101      	bne.n	80092d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e06d      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092d8:	4b3a      	ldr	r3, [pc, #232]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	2207      	movs	r2, #7
 80092de:	4393      	bics	r3, r2
 80092e0:	0019      	movs	r1, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	4b37      	ldr	r3, [pc, #220]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 80092e8:	430a      	orrs	r2, r1
 80092ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ec:	f7fc ffd0 	bl	8006290 <HAL_GetTick>
 80092f0:	0003      	movs	r3, r0
 80092f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092f4:	e009      	b.n	800930a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092f6:	f7fc ffcb 	bl	8006290 <HAL_GetTick>
 80092fa:	0002      	movs	r2, r0
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	4a2f      	ldr	r2, [pc, #188]	@ (80093c0 <HAL_RCC_ClockConfig+0x1f4>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d901      	bls.n	800930a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e054      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800930a:	4b2e      	ldr	r3, [pc, #184]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	2238      	movs	r2, #56	@ 0x38
 8009310:	401a      	ands	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	429a      	cmp	r2, r3
 800931a:	d1ec      	bne.n	80092f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800931c:	4b27      	ldr	r3, [pc, #156]	@ (80093bc <HAL_RCC_ClockConfig+0x1f0>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2207      	movs	r2, #7
 8009322:	4013      	ands	r3, r2
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d21e      	bcs.n	8009368 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800932a:	4b24      	ldr	r3, [pc, #144]	@ (80093bc <HAL_RCC_ClockConfig+0x1f0>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2207      	movs	r2, #7
 8009330:	4393      	bics	r3, r2
 8009332:	0019      	movs	r1, r3
 8009334:	4b21      	ldr	r3, [pc, #132]	@ (80093bc <HAL_RCC_ClockConfig+0x1f0>)
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800933c:	f7fc ffa8 	bl	8006290 <HAL_GetTick>
 8009340:	0003      	movs	r3, r0
 8009342:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009344:	e009      	b.n	800935a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009346:	f7fc ffa3 	bl	8006290 <HAL_GetTick>
 800934a:	0002      	movs	r2, r0
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	4a1b      	ldr	r2, [pc, #108]	@ (80093c0 <HAL_RCC_ClockConfig+0x1f4>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d901      	bls.n	800935a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e02c      	b.n	80093b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800935a:	4b18      	ldr	r3, [pc, #96]	@ (80093bc <HAL_RCC_ClockConfig+0x1f0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2207      	movs	r2, #7
 8009360:	4013      	ands	r3, r2
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d1ee      	bne.n	8009346 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2204      	movs	r2, #4
 800936e:	4013      	ands	r3, r2
 8009370:	d009      	beq.n	8009386 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009372:	4b14      	ldr	r3, [pc, #80]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	4a15      	ldr	r2, [pc, #84]	@ (80093cc <HAL_RCC_ClockConfig+0x200>)
 8009378:	4013      	ands	r3, r2
 800937a:	0019      	movs	r1, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68da      	ldr	r2, [r3, #12]
 8009380:	4b10      	ldr	r3, [pc, #64]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 8009382:	430a      	orrs	r2, r1
 8009384:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009386:	f000 f829 	bl	80093dc <HAL_RCC_GetSysClockFreq>
 800938a:	0001      	movs	r1, r0
 800938c:	4b0d      	ldr	r3, [pc, #52]	@ (80093c4 <HAL_RCC_ClockConfig+0x1f8>)
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	0a1b      	lsrs	r3, r3, #8
 8009392:	220f      	movs	r2, #15
 8009394:	401a      	ands	r2, r3
 8009396:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <HAL_RCC_ClockConfig+0x204>)
 8009398:	0092      	lsls	r2, r2, #2
 800939a:	58d3      	ldr	r3, [r2, r3]
 800939c:	221f      	movs	r2, #31
 800939e:	4013      	ands	r3, r2
 80093a0:	000a      	movs	r2, r1
 80093a2:	40da      	lsrs	r2, r3
 80093a4:	4b0b      	ldr	r3, [pc, #44]	@ (80093d4 <HAL_RCC_ClockConfig+0x208>)
 80093a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80093a8:	4b0b      	ldr	r3, [pc, #44]	@ (80093d8 <HAL_RCC_ClockConfig+0x20c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	0018      	movs	r0, r3
 80093ae:	f7fc ff13 	bl	80061d8 <HAL_InitTick>
 80093b2:	0003      	movs	r3, r0
}
 80093b4:	0018      	movs	r0, r3
 80093b6:	46bd      	mov	sp, r7
 80093b8:	b004      	add	sp, #16
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40022000 	.word	0x40022000
 80093c0:	00001388 	.word	0x00001388
 80093c4:	40021000 	.word	0x40021000
 80093c8:	fffff0ff 	.word	0xfffff0ff
 80093cc:	ffff8fff 	.word	0xffff8fff
 80093d0:	0800dde8 	.word	0x0800dde8
 80093d4:	2000044c 	.word	0x2000044c
 80093d8:	20000450 	.word	0x20000450

080093dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80093e2:	4b3c      	ldr	r3, [pc, #240]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	2238      	movs	r2, #56	@ 0x38
 80093e8:	4013      	ands	r3, r2
 80093ea:	d10f      	bne.n	800940c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80093ec:	4b39      	ldr	r3, [pc, #228]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	0adb      	lsrs	r3, r3, #11
 80093f2:	2207      	movs	r2, #7
 80093f4:	4013      	ands	r3, r2
 80093f6:	2201      	movs	r2, #1
 80093f8:	409a      	lsls	r2, r3
 80093fa:	0013      	movs	r3, r2
 80093fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	4835      	ldr	r0, [pc, #212]	@ (80094d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009402:	f7f6 fe7f 	bl	8000104 <__udivsi3>
 8009406:	0003      	movs	r3, r0
 8009408:	613b      	str	r3, [r7, #16]
 800940a:	e05d      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800940c:	4b31      	ldr	r3, [pc, #196]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	2238      	movs	r2, #56	@ 0x38
 8009412:	4013      	ands	r3, r2
 8009414:	2b08      	cmp	r3, #8
 8009416:	d102      	bne.n	800941e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009418:	4b30      	ldr	r3, [pc, #192]	@ (80094dc <HAL_RCC_GetSysClockFreq+0x100>)
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	e054      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800941e:	4b2d      	ldr	r3, [pc, #180]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	2238      	movs	r2, #56	@ 0x38
 8009424:	4013      	ands	r3, r2
 8009426:	2b10      	cmp	r3, #16
 8009428:	d138      	bne.n	800949c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800942a:	4b2a      	ldr	r3, [pc, #168]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	2203      	movs	r2, #3
 8009430:	4013      	ands	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009434:	4b27      	ldr	r3, [pc, #156]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	091b      	lsrs	r3, r3, #4
 800943a:	2207      	movs	r2, #7
 800943c:	4013      	ands	r3, r2
 800943e:	3301      	adds	r3, #1
 8009440:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b03      	cmp	r3, #3
 8009446:	d10d      	bne.n	8009464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	4824      	ldr	r0, [pc, #144]	@ (80094dc <HAL_RCC_GetSysClockFreq+0x100>)
 800944c:	f7f6 fe5a 	bl	8000104 <__udivsi3>
 8009450:	0003      	movs	r3, r0
 8009452:	0019      	movs	r1, r3
 8009454:	4b1f      	ldr	r3, [pc, #124]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	227f      	movs	r2, #127	@ 0x7f
 800945c:	4013      	ands	r3, r2
 800945e:	434b      	muls	r3, r1
 8009460:	617b      	str	r3, [r7, #20]
        break;
 8009462:	e00d      	b.n	8009480 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	481c      	ldr	r0, [pc, #112]	@ (80094d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009468:	f7f6 fe4c 	bl	8000104 <__udivsi3>
 800946c:	0003      	movs	r3, r0
 800946e:	0019      	movs	r1, r3
 8009470:	4b18      	ldr	r3, [pc, #96]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	0a1b      	lsrs	r3, r3, #8
 8009476:	227f      	movs	r2, #127	@ 0x7f
 8009478:	4013      	ands	r3, r2
 800947a:	434b      	muls	r3, r1
 800947c:	617b      	str	r3, [r7, #20]
        break;
 800947e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009480:	4b14      	ldr	r3, [pc, #80]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	0f5b      	lsrs	r3, r3, #29
 8009486:	2207      	movs	r2, #7
 8009488:	4013      	ands	r3, r2
 800948a:	3301      	adds	r3, #1
 800948c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	6978      	ldr	r0, [r7, #20]
 8009492:	f7f6 fe37 	bl	8000104 <__udivsi3>
 8009496:	0003      	movs	r3, r0
 8009498:	613b      	str	r3, [r7, #16]
 800949a:	e015      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800949c:	4b0d      	ldr	r3, [pc, #52]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	2238      	movs	r2, #56	@ 0x38
 80094a2:	4013      	ands	r3, r2
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d103      	bne.n	80094b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80094a8:	2380      	movs	r3, #128	@ 0x80
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	613b      	str	r3, [r7, #16]
 80094ae:	e00b      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80094b0:	4b08      	ldr	r3, [pc, #32]	@ (80094d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2238      	movs	r2, #56	@ 0x38
 80094b6:	4013      	ands	r3, r2
 80094b8:	2b18      	cmp	r3, #24
 80094ba:	d103      	bne.n	80094c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80094bc:	23fa      	movs	r3, #250	@ 0xfa
 80094be:	01db      	lsls	r3, r3, #7
 80094c0:	613b      	str	r3, [r7, #16]
 80094c2:	e001      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80094c8:	693b      	ldr	r3, [r7, #16]
}
 80094ca:	0018      	movs	r0, r3
 80094cc:	46bd      	mov	sp, r7
 80094ce:	b006      	add	sp, #24
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	46c0      	nop			@ (mov r8, r8)
 80094d4:	40021000 	.word	0x40021000
 80094d8:	00f42400 	.word	0x00f42400
 80094dc:	007a1200 	.word	0x007a1200

080094e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094e4:	4b02      	ldr	r3, [pc, #8]	@ (80094f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80094e6:	681b      	ldr	r3, [r3, #0]
}
 80094e8:	0018      	movs	r0, r3
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	46c0      	nop			@ (mov r8, r8)
 80094f0:	2000044c 	.word	0x2000044c

080094f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094f4:	b5b0      	push	{r4, r5, r7, lr}
 80094f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80094f8:	f7ff fff2 	bl	80094e0 <HAL_RCC_GetHCLKFreq>
 80094fc:	0004      	movs	r4, r0
 80094fe:	f7ff fb3f 	bl	8008b80 <LL_RCC_GetAPB1Prescaler>
 8009502:	0003      	movs	r3, r0
 8009504:	0b1a      	lsrs	r2, r3, #12
 8009506:	4b05      	ldr	r3, [pc, #20]	@ (800951c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009508:	0092      	lsls	r2, r2, #2
 800950a:	58d3      	ldr	r3, [r2, r3]
 800950c:	221f      	movs	r2, #31
 800950e:	4013      	ands	r3, r2
 8009510:	40dc      	lsrs	r4, r3
 8009512:	0023      	movs	r3, r4
}
 8009514:	0018      	movs	r0, r3
 8009516:	46bd      	mov	sp, r7
 8009518:	bdb0      	pop	{r4, r5, r7, pc}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	0800de28 	.word	0x0800de28

08009520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009528:	2313      	movs	r3, #19
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009530:	2312      	movs	r3, #18
 8009532:	18fb      	adds	r3, r7, r3
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	2380      	movs	r3, #128	@ 0x80
 800953e:	029b      	lsls	r3, r3, #10
 8009540:	4013      	ands	r3, r2
 8009542:	d100      	bne.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009544:	e0a3      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009546:	2011      	movs	r0, #17
 8009548:	183b      	adds	r3, r7, r0
 800954a:	2200      	movs	r2, #0
 800954c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800954e:	4ba5      	ldr	r3, [pc, #660]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009552:	2380      	movs	r3, #128	@ 0x80
 8009554:	055b      	lsls	r3, r3, #21
 8009556:	4013      	ands	r3, r2
 8009558:	d110      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800955a:	4ba2      	ldr	r3, [pc, #648]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800955c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800955e:	4ba1      	ldr	r3, [pc, #644]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009560:	2180      	movs	r1, #128	@ 0x80
 8009562:	0549      	lsls	r1, r1, #21
 8009564:	430a      	orrs	r2, r1
 8009566:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009568:	4b9e      	ldr	r3, [pc, #632]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800956a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800956c:	2380      	movs	r3, #128	@ 0x80
 800956e:	055b      	lsls	r3, r3, #21
 8009570:	4013      	ands	r3, r2
 8009572:	60bb      	str	r3, [r7, #8]
 8009574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009576:	183b      	adds	r3, r7, r0
 8009578:	2201      	movs	r2, #1
 800957a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800957c:	4b9a      	ldr	r3, [pc, #616]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	4b99      	ldr	r3, [pc, #612]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009582:	2180      	movs	r1, #128	@ 0x80
 8009584:	0049      	lsls	r1, r1, #1
 8009586:	430a      	orrs	r2, r1
 8009588:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800958a:	f7fc fe81 	bl	8006290 <HAL_GetTick>
 800958e:	0003      	movs	r3, r0
 8009590:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009592:	e00b      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009594:	f7fc fe7c 	bl	8006290 <HAL_GetTick>
 8009598:	0002      	movs	r2, r0
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d904      	bls.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80095a2:	2313      	movs	r3, #19
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	2203      	movs	r2, #3
 80095a8:	701a      	strb	r2, [r3, #0]
        break;
 80095aa:	e005      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095ac:	4b8e      	ldr	r3, [pc, #568]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	2380      	movs	r3, #128	@ 0x80
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	4013      	ands	r3, r2
 80095b6:	d0ed      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80095b8:	2313      	movs	r3, #19
 80095ba:	18fb      	adds	r3, r7, r3
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d154      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095c2:	4b88      	ldr	r3, [pc, #544]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80095c6:	23c0      	movs	r3, #192	@ 0xc0
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4013      	ands	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d019      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d014      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095de:	4b81      	ldr	r3, [pc, #516]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095e2:	4a82      	ldr	r2, [pc, #520]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80095e4:	4013      	ands	r3, r2
 80095e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095e8:	4b7e      	ldr	r3, [pc, #504]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80095ec:	4b7d      	ldr	r3, [pc, #500]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095ee:	2180      	movs	r1, #128	@ 0x80
 80095f0:	0249      	lsls	r1, r1, #9
 80095f2:	430a      	orrs	r2, r1
 80095f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095f6:	4b7b      	ldr	r3, [pc, #492]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80095fa:	4b7a      	ldr	r3, [pc, #488]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095fc:	497c      	ldr	r1, [pc, #496]	@ (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80095fe:	400a      	ands	r2, r1
 8009600:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009602:	4b78      	ldr	r3, [pc, #480]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2201      	movs	r2, #1
 800960c:	4013      	ands	r3, r2
 800960e:	d016      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009610:	f7fc fe3e 	bl	8006290 <HAL_GetTick>
 8009614:	0003      	movs	r3, r0
 8009616:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009618:	e00c      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800961a:	f7fc fe39 	bl	8006290 <HAL_GetTick>
 800961e:	0002      	movs	r2, r0
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	4a73      	ldr	r2, [pc, #460]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d904      	bls.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800962a:	2313      	movs	r3, #19
 800962c:	18fb      	adds	r3, r7, r3
 800962e:	2203      	movs	r2, #3
 8009630:	701a      	strb	r2, [r3, #0]
            break;
 8009632:	e004      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009634:	4b6b      	ldr	r3, [pc, #428]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009638:	2202      	movs	r2, #2
 800963a:	4013      	ands	r3, r2
 800963c:	d0ed      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800963e:	2313      	movs	r3, #19
 8009640:	18fb      	adds	r3, r7, r3
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009648:	4b66      	ldr	r3, [pc, #408]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800964a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800964c:	4a67      	ldr	r2, [pc, #412]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800964e:	4013      	ands	r3, r2
 8009650:	0019      	movs	r1, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009656:	4b63      	ldr	r3, [pc, #396]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009658:	430a      	orrs	r2, r1
 800965a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800965c:	e00c      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800965e:	2312      	movs	r3, #18
 8009660:	18fb      	adds	r3, r7, r3
 8009662:	2213      	movs	r2, #19
 8009664:	18ba      	adds	r2, r7, r2
 8009666:	7812      	ldrb	r2, [r2, #0]
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e005      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	2312      	movs	r3, #18
 800966e:	18fb      	adds	r3, r7, r3
 8009670:	2213      	movs	r2, #19
 8009672:	18ba      	adds	r2, r7, r2
 8009674:	7812      	ldrb	r2, [r2, #0]
 8009676:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009678:	2311      	movs	r3, #17
 800967a:	18fb      	adds	r3, r7, r3
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d105      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009682:	4b58      	ldr	r3, [pc, #352]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009686:	4b57      	ldr	r3, [pc, #348]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009688:	495b      	ldr	r1, [pc, #364]	@ (80097f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800968a:	400a      	ands	r2, r1
 800968c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2201      	movs	r2, #1
 8009694:	4013      	ands	r3, r2
 8009696:	d009      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009698:	4b52      	ldr	r3, [pc, #328]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800969a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800969c:	2203      	movs	r2, #3
 800969e:	4393      	bics	r3, r2
 80096a0:	0019      	movs	r1, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	4b4f      	ldr	r3, [pc, #316]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096a8:	430a      	orrs	r2, r1
 80096aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2210      	movs	r2, #16
 80096b2:	4013      	ands	r3, r2
 80096b4:	d009      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096b6:	4b4b      	ldr	r3, [pc, #300]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ba:	4a50      	ldr	r2, [pc, #320]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80096bc:	4013      	ands	r3, r2
 80096be:	0019      	movs	r1, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	4b47      	ldr	r3, [pc, #284]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096c6:	430a      	orrs	r2, r1
 80096c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	2380      	movs	r3, #128	@ 0x80
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4013      	ands	r3, r2
 80096d4:	d009      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096d6:	4b43      	ldr	r3, [pc, #268]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096da:	4a49      	ldr	r2, [pc, #292]	@ (8009800 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80096dc:	4013      	ands	r3, r2
 80096de:	0019      	movs	r1, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	695a      	ldr	r2, [r3, #20]
 80096e4:	4b3f      	ldr	r3, [pc, #252]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096e6:	430a      	orrs	r2, r1
 80096e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	2380      	movs	r3, #128	@ 0x80
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	4013      	ands	r3, r2
 80096f4:	d009      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80096f6:	4b3b      	ldr	r3, [pc, #236]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fa:	4a42      	ldr	r2, [pc, #264]	@ (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80096fc:	4013      	ands	r3, r2
 80096fe:	0019      	movs	r1, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699a      	ldr	r2, [r3, #24]
 8009704:	4b37      	ldr	r3, [pc, #220]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009706:	430a      	orrs	r2, r1
 8009708:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2220      	movs	r2, #32
 8009710:	4013      	ands	r3, r2
 8009712:	d009      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009714:	4b33      	ldr	r3, [pc, #204]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009718:	4a3b      	ldr	r2, [pc, #236]	@ (8009808 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800971a:	4013      	ands	r3, r2
 800971c:	0019      	movs	r1, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	4b30      	ldr	r3, [pc, #192]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009724:	430a      	orrs	r2, r1
 8009726:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	2380      	movs	r3, #128	@ 0x80
 800972e:	01db      	lsls	r3, r3, #7
 8009730:	4013      	ands	r3, r2
 8009732:	d015      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009734:	4b2b      	ldr	r3, [pc, #172]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	0899      	lsrs	r1, r3, #2
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	69da      	ldr	r2, [r3, #28]
 8009740:	4b28      	ldr	r3, [pc, #160]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009742:	430a      	orrs	r2, r1
 8009744:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	69da      	ldr	r2, [r3, #28]
 800974a:	2380      	movs	r3, #128	@ 0x80
 800974c:	05db      	lsls	r3, r3, #23
 800974e:	429a      	cmp	r2, r3
 8009750:	d106      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009752:	4b24      	ldr	r3, [pc, #144]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	4b23      	ldr	r3, [pc, #140]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009758:	2180      	movs	r1, #128	@ 0x80
 800975a:	0249      	lsls	r1, r1, #9
 800975c:	430a      	orrs	r2, r1
 800975e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	2380      	movs	r3, #128	@ 0x80
 8009766:	039b      	lsls	r3, r3, #14
 8009768:	4013      	ands	r3, r2
 800976a:	d016      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800976c:	4b1d      	ldr	r3, [pc, #116]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800976e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009770:	4a26      	ldr	r2, [pc, #152]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009772:	4013      	ands	r3, r2
 8009774:	0019      	movs	r1, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1a      	ldr	r2, [r3, #32]
 800977a:	4b1a      	ldr	r3, [pc, #104]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800977c:	430a      	orrs	r2, r1
 800977e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a1a      	ldr	r2, [r3, #32]
 8009784:	2380      	movs	r3, #128	@ 0x80
 8009786:	03db      	lsls	r3, r3, #15
 8009788:	429a      	cmp	r2, r3
 800978a:	d106      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800978c:	4b15      	ldr	r3, [pc, #84]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	4b14      	ldr	r3, [pc, #80]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009792:	2180      	movs	r1, #128	@ 0x80
 8009794:	0449      	lsls	r1, r1, #17
 8009796:	430a      	orrs	r2, r1
 8009798:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	2380      	movs	r3, #128	@ 0x80
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	4013      	ands	r3, r2
 80097a4:	d016      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80097a6:	4b0f      	ldr	r3, [pc, #60]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097aa:	4a19      	ldr	r2, [pc, #100]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	0019      	movs	r1, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	691a      	ldr	r2, [r3, #16]
 80097b4:	4b0b      	ldr	r3, [pc, #44]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097b6:	430a      	orrs	r2, r1
 80097b8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	2380      	movs	r3, #128	@ 0x80
 80097c0:	01db      	lsls	r3, r3, #7
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d106      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80097c6:	4b07      	ldr	r3, [pc, #28]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	4b06      	ldr	r3, [pc, #24]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097cc:	2180      	movs	r1, #128	@ 0x80
 80097ce:	0249      	lsls	r1, r1, #9
 80097d0:	430a      	orrs	r2, r1
 80097d2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80097d4:	2312      	movs	r3, #18
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	781b      	ldrb	r3, [r3, #0]
}
 80097da:	0018      	movs	r0, r3
 80097dc:	46bd      	mov	sp, r7
 80097de:	b006      	add	sp, #24
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	46c0      	nop			@ (mov r8, r8)
 80097e4:	40021000 	.word	0x40021000
 80097e8:	40007000 	.word	0x40007000
 80097ec:	fffffcff 	.word	0xfffffcff
 80097f0:	fffeffff 	.word	0xfffeffff
 80097f4:	00001388 	.word	0x00001388
 80097f8:	efffffff 	.word	0xefffffff
 80097fc:	fffff3ff 	.word	0xfffff3ff
 8009800:	fff3ffff 	.word	0xfff3ffff
 8009804:	ffcfffff 	.word	0xffcfffff
 8009808:	ffffcfff 	.word	0xffffcfff
 800980c:	ffbfffff 	.word	0xffbfffff
 8009810:	ffff3fff 	.word	0xffff3fff

08009814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e056      	b.n	80098d4 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	223d      	movs	r2, #61	@ 0x3d
 800982a:	5c9b      	ldrb	r3, [r3, r2]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d113      	bne.n	800985a <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	223c      	movs	r2, #60	@ 0x3c
 8009836:	2100      	movs	r1, #0
 8009838:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	0018      	movs	r0, r3
 800983e:	f002 f8c5 	bl	800b9cc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009846:	2b00      	cmp	r3, #0
 8009848:	d102      	bne.n	8009850 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a23      	ldr	r2, [pc, #140]	@ (80098dc <HAL_TIM_Base_Init+0xc8>)
 800984e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	0010      	movs	r0, r2
 8009858:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	223d      	movs	r2, #61	@ 0x3d
 800985e:	2102      	movs	r1, #2
 8009860:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3304      	adds	r3, #4
 800986a:	0019      	movs	r1, r3
 800986c:	0010      	movs	r0, r2
 800986e:	f001 fbaf 	bl	800afd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2248      	movs	r2, #72	@ 0x48
 8009876:	2101      	movs	r1, #1
 8009878:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	223e      	movs	r2, #62	@ 0x3e
 800987e:	2101      	movs	r1, #1
 8009880:	5499      	strb	r1, [r3, r2]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	223f      	movs	r2, #63	@ 0x3f
 8009886:	2101      	movs	r1, #1
 8009888:	5499      	strb	r1, [r3, r2]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2240      	movs	r2, #64	@ 0x40
 800988e:	2101      	movs	r1, #1
 8009890:	5499      	strb	r1, [r3, r2]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2241      	movs	r2, #65	@ 0x41
 8009896:	2101      	movs	r1, #1
 8009898:	5499      	strb	r1, [r3, r2]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2242      	movs	r2, #66	@ 0x42
 800989e:	2101      	movs	r1, #1
 80098a0:	5499      	strb	r1, [r3, r2]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2243      	movs	r2, #67	@ 0x43
 80098a6:	2101      	movs	r1, #1
 80098a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2244      	movs	r2, #68	@ 0x44
 80098ae:	2101      	movs	r1, #1
 80098b0:	5499      	strb	r1, [r3, r2]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2245      	movs	r2, #69	@ 0x45
 80098b6:	2101      	movs	r1, #1
 80098b8:	5499      	strb	r1, [r3, r2]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2246      	movs	r2, #70	@ 0x46
 80098be:	2101      	movs	r1, #1
 80098c0:	5499      	strb	r1, [r3, r2]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2247      	movs	r2, #71	@ 0x47
 80098c6:	2101      	movs	r1, #1
 80098c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	223d      	movs	r2, #61	@ 0x3d
 80098ce:	2101      	movs	r1, #1
 80098d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	0018      	movs	r0, r3
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b002      	add	sp, #8
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	08005241 	.word	0x08005241

080098e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	223d      	movs	r2, #61	@ 0x3d
 80098ec:	5c9b      	ldrb	r3, [r3, r2]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d001      	beq.n	80098f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e035      	b.n	8009964 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	223d      	movs	r2, #61	@ 0x3d
 80098fc:	2102      	movs	r1, #2
 80098fe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a19      	ldr	r2, [pc, #100]	@ (800996c <HAL_TIM_Base_Start+0x8c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00a      	beq.n	8009920 <HAL_TIM_Base_Start+0x40>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	2380      	movs	r3, #128	@ 0x80
 8009910:	05db      	lsls	r3, r3, #23
 8009912:	429a      	cmp	r2, r3
 8009914:	d004      	beq.n	8009920 <HAL_TIM_Base_Start+0x40>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a15      	ldr	r2, [pc, #84]	@ (8009970 <HAL_TIM_Base_Start+0x90>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d116      	bne.n	800994e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	4a13      	ldr	r2, [pc, #76]	@ (8009974 <HAL_TIM_Base_Start+0x94>)
 8009928:	4013      	ands	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b06      	cmp	r3, #6
 8009930:	d016      	beq.n	8009960 <HAL_TIM_Base_Start+0x80>
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	2380      	movs	r3, #128	@ 0x80
 8009936:	025b      	lsls	r3, r3, #9
 8009938:	429a      	cmp	r2, r3
 800993a:	d011      	beq.n	8009960 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2101      	movs	r1, #1
 8009948:	430a      	orrs	r2, r1
 800994a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994c:	e008      	b.n	8009960 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2101      	movs	r1, #1
 800995a:	430a      	orrs	r2, r1
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	e000      	b.n	8009962 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009960:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	0018      	movs	r0, r3
 8009966:	46bd      	mov	sp, r7
 8009968:	b004      	add	sp, #16
 800996a:	bd80      	pop	{r7, pc}
 800996c:	40012c00 	.word	0x40012c00
 8009970:	40000400 	.word	0x40000400
 8009974:	00010007 	.word	0x00010007

08009978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	223d      	movs	r2, #61	@ 0x3d
 8009984:	5c9b      	ldrb	r3, [r3, r2]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b01      	cmp	r3, #1
 800998a:	d001      	beq.n	8009990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e03d      	b.n	8009a0c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	223d      	movs	r2, #61	@ 0x3d
 8009994:	2102      	movs	r1, #2
 8009996:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68da      	ldr	r2, [r3, #12]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2101      	movs	r1, #1
 80099a4:	430a      	orrs	r2, r1
 80099a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a19      	ldr	r2, [pc, #100]	@ (8009a14 <HAL_TIM_Base_Start_IT+0x9c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00a      	beq.n	80099c8 <HAL_TIM_Base_Start_IT+0x50>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	2380      	movs	r3, #128	@ 0x80
 80099b8:	05db      	lsls	r3, r3, #23
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d004      	beq.n	80099c8 <HAL_TIM_Base_Start_IT+0x50>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a15      	ldr	r2, [pc, #84]	@ (8009a18 <HAL_TIM_Base_Start_IT+0xa0>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d116      	bne.n	80099f6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	4a13      	ldr	r2, [pc, #76]	@ (8009a1c <HAL_TIM_Base_Start_IT+0xa4>)
 80099d0:	4013      	ands	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b06      	cmp	r3, #6
 80099d8:	d016      	beq.n	8009a08 <HAL_TIM_Base_Start_IT+0x90>
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	2380      	movs	r3, #128	@ 0x80
 80099de:	025b      	lsls	r3, r3, #9
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d011      	beq.n	8009a08 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2101      	movs	r1, #1
 80099f0:	430a      	orrs	r2, r1
 80099f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f4:	e008      	b.n	8009a08 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2101      	movs	r1, #1
 8009a02:	430a      	orrs	r2, r1
 8009a04:	601a      	str	r2, [r3, #0]
 8009a06:	e000      	b.n	8009a0a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a08:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	b004      	add	sp, #16
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	40012c00 	.word	0x40012c00
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	00010007 	.word	0x00010007

08009a20 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e056      	b.n	8009ae0 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	223d      	movs	r2, #61	@ 0x3d
 8009a36:	5c9b      	ldrb	r3, [r3, r2]
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d113      	bne.n	8009a66 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	223c      	movs	r2, #60	@ 0x3c
 8009a42:	2100      	movs	r1, #0
 8009a44:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f001 ffbf 	bl	800b9cc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d102      	bne.n	8009a5c <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a23      	ldr	r2, [pc, #140]	@ (8009ae8 <HAL_TIM_OC_Init+0xc8>)
 8009a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	0010      	movs	r0, r2
 8009a64:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	223d      	movs	r2, #61	@ 0x3d
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	3304      	adds	r3, #4
 8009a76:	0019      	movs	r1, r3
 8009a78:	0010      	movs	r0, r2
 8009a7a:	f001 faa9 	bl	800afd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2248      	movs	r2, #72	@ 0x48
 8009a82:	2101      	movs	r1, #1
 8009a84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	223e      	movs	r2, #62	@ 0x3e
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	5499      	strb	r1, [r3, r2]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	223f      	movs	r2, #63	@ 0x3f
 8009a92:	2101      	movs	r1, #1
 8009a94:	5499      	strb	r1, [r3, r2]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2240      	movs	r2, #64	@ 0x40
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	5499      	strb	r1, [r3, r2]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2241      	movs	r2, #65	@ 0x41
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	5499      	strb	r1, [r3, r2]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2242      	movs	r2, #66	@ 0x42
 8009aaa:	2101      	movs	r1, #1
 8009aac:	5499      	strb	r1, [r3, r2]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2243      	movs	r2, #67	@ 0x43
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2244      	movs	r2, #68	@ 0x44
 8009aba:	2101      	movs	r1, #1
 8009abc:	5499      	strb	r1, [r3, r2]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2245      	movs	r2, #69	@ 0x45
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	5499      	strb	r1, [r3, r2]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2246      	movs	r2, #70	@ 0x46
 8009aca:	2101      	movs	r1, #1
 8009acc:	5499      	strb	r1, [r3, r2]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2247      	movs	r2, #71	@ 0x47
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	223d      	movs	r2, #61	@ 0x3d
 8009ada:	2101      	movs	r1, #1
 8009adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	b002      	add	sp, #8
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	08009aed 	.word	0x08009aed

08009aec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009af4:	46c0      	nop			@ (mov r8, r8)
 8009af6:	46bd      	mov	sp, r7
 8009af8:	b002      	add	sp, #8
 8009afa:	bd80      	pop	{r7, pc}

08009afc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b06:	230f      	movs	r3, #15
 8009b08:	18fb      	adds	r3, r7, r3
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d108      	bne.n	8009b26 <HAL_TIM_OC_Start_IT+0x2a>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	223e      	movs	r2, #62	@ 0x3e
 8009b18:	5c9b      	ldrb	r3, [r3, r2]
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	1e5a      	subs	r2, r3, #1
 8009b20:	4193      	sbcs	r3, r2
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	e037      	b.n	8009b96 <HAL_TIM_OC_Start_IT+0x9a>
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	d108      	bne.n	8009b3e <HAL_TIM_OC_Start_IT+0x42>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	223f      	movs	r2, #63	@ 0x3f
 8009b30:	5c9b      	ldrb	r3, [r3, r2]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	3b01      	subs	r3, #1
 8009b36:	1e5a      	subs	r2, r3, #1
 8009b38:	4193      	sbcs	r3, r2
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	e02b      	b.n	8009b96 <HAL_TIM_OC_Start_IT+0x9a>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	d108      	bne.n	8009b56 <HAL_TIM_OC_Start_IT+0x5a>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2240      	movs	r2, #64	@ 0x40
 8009b48:	5c9b      	ldrb	r3, [r3, r2]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	1e5a      	subs	r2, r3, #1
 8009b50:	4193      	sbcs	r3, r2
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	e01f      	b.n	8009b96 <HAL_TIM_OC_Start_IT+0x9a>
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b0c      	cmp	r3, #12
 8009b5a:	d108      	bne.n	8009b6e <HAL_TIM_OC_Start_IT+0x72>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2241      	movs	r2, #65	@ 0x41
 8009b60:	5c9b      	ldrb	r3, [r3, r2]
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	3b01      	subs	r3, #1
 8009b66:	1e5a      	subs	r2, r3, #1
 8009b68:	4193      	sbcs	r3, r2
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	e013      	b.n	8009b96 <HAL_TIM_OC_Start_IT+0x9a>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b10      	cmp	r3, #16
 8009b72:	d108      	bne.n	8009b86 <HAL_TIM_OC_Start_IT+0x8a>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2242      	movs	r2, #66	@ 0x42
 8009b78:	5c9b      	ldrb	r3, [r3, r2]
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	1e5a      	subs	r2, r3, #1
 8009b80:	4193      	sbcs	r3, r2
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	e007      	b.n	8009b96 <HAL_TIM_OC_Start_IT+0x9a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2243      	movs	r2, #67	@ 0x43
 8009b8a:	5c9b      	ldrb	r3, [r3, r2]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	1e5a      	subs	r2, r3, #1
 8009b92:	4193      	sbcs	r3, r2
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e0c4      	b.n	8009d28 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <HAL_TIM_OC_Start_IT+0xb2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	223e      	movs	r2, #62	@ 0x3e
 8009ba8:	2102      	movs	r1, #2
 8009baa:	5499      	strb	r1, [r3, r2]
 8009bac:	e023      	b.n	8009bf6 <HAL_TIM_OC_Start_IT+0xfa>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d104      	bne.n	8009bbe <HAL_TIM_OC_Start_IT+0xc2>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	223f      	movs	r2, #63	@ 0x3f
 8009bb8:	2102      	movs	r1, #2
 8009bba:	5499      	strb	r1, [r3, r2]
 8009bbc:	e01b      	b.n	8009bf6 <HAL_TIM_OC_Start_IT+0xfa>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d104      	bne.n	8009bce <HAL_TIM_OC_Start_IT+0xd2>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2240      	movs	r2, #64	@ 0x40
 8009bc8:	2102      	movs	r1, #2
 8009bca:	5499      	strb	r1, [r3, r2]
 8009bcc:	e013      	b.n	8009bf6 <HAL_TIM_OC_Start_IT+0xfa>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b0c      	cmp	r3, #12
 8009bd2:	d104      	bne.n	8009bde <HAL_TIM_OC_Start_IT+0xe2>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2241      	movs	r2, #65	@ 0x41
 8009bd8:	2102      	movs	r1, #2
 8009bda:	5499      	strb	r1, [r3, r2]
 8009bdc:	e00b      	b.n	8009bf6 <HAL_TIM_OC_Start_IT+0xfa>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b10      	cmp	r3, #16
 8009be2:	d104      	bne.n	8009bee <HAL_TIM_OC_Start_IT+0xf2>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2242      	movs	r2, #66	@ 0x42
 8009be8:	2102      	movs	r1, #2
 8009bea:	5499      	strb	r1, [r3, r2]
 8009bec:	e003      	b.n	8009bf6 <HAL_TIM_OC_Start_IT+0xfa>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2243      	movs	r2, #67	@ 0x43
 8009bf2:	2102      	movs	r1, #2
 8009bf4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b0c      	cmp	r3, #12
 8009bfa:	d02a      	beq.n	8009c52 <HAL_TIM_OC_Start_IT+0x156>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b0c      	cmp	r3, #12
 8009c00:	d830      	bhi.n	8009c64 <HAL_TIM_OC_Start_IT+0x168>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d01b      	beq.n	8009c40 <HAL_TIM_OC_Start_IT+0x144>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b08      	cmp	r3, #8
 8009c0c:	d82a      	bhi.n	8009c64 <HAL_TIM_OC_Start_IT+0x168>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <HAL_TIM_OC_Start_IT+0x120>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d009      	beq.n	8009c2e <HAL_TIM_OC_Start_IT+0x132>
 8009c1a:	e023      	b.n	8009c64 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2102      	movs	r1, #2
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	60da      	str	r2, [r3, #12]
      break;
 8009c2c:	e01f      	b.n	8009c6e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2104      	movs	r1, #4
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	60da      	str	r2, [r3, #12]
      break;
 8009c3e:	e016      	b.n	8009c6e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2108      	movs	r1, #8
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	60da      	str	r2, [r3, #12]
      break;
 8009c50:	e00d      	b.n	8009c6e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68da      	ldr	r2, [r3, #12]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2110      	movs	r1, #16
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	60da      	str	r2, [r3, #12]
      break;
 8009c62:	e004      	b.n	8009c6e <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c64:	230f      	movs	r3, #15
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	2201      	movs	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]
      break;
 8009c6c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009c6e:	230f      	movs	r3, #15
 8009c70:	18fb      	adds	r3, r7, r3
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d154      	bne.n	8009d22 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	0018      	movs	r0, r3
 8009c82:	f001 fe7f 	bl	800b984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a29      	ldr	r2, [pc, #164]	@ (8009d30 <HAL_TIM_OC_Start_IT+0x234>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d009      	beq.n	8009ca4 <HAL_TIM_OC_Start_IT+0x1a8>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a27      	ldr	r2, [pc, #156]	@ (8009d34 <HAL_TIM_OC_Start_IT+0x238>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d004      	beq.n	8009ca4 <HAL_TIM_OC_Start_IT+0x1a8>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a26      	ldr	r2, [pc, #152]	@ (8009d38 <HAL_TIM_OC_Start_IT+0x23c>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d101      	bne.n	8009ca8 <HAL_TIM_OC_Start_IT+0x1ac>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e000      	b.n	8009caa <HAL_TIM_OC_Start_IT+0x1ae>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d008      	beq.n	8009cc0 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2180      	movs	r1, #128	@ 0x80
 8009cba:	0209      	lsls	r1, r1, #8
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8009d30 <HAL_TIM_OC_Start_IT+0x234>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00a      	beq.n	8009ce0 <HAL_TIM_OC_Start_IT+0x1e4>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	2380      	movs	r3, #128	@ 0x80
 8009cd0:	05db      	lsls	r3, r3, #23
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d004      	beq.n	8009ce0 <HAL_TIM_OC_Start_IT+0x1e4>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a18      	ldr	r2, [pc, #96]	@ (8009d3c <HAL_TIM_OC_Start_IT+0x240>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d116      	bne.n	8009d0e <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	4a16      	ldr	r2, [pc, #88]	@ (8009d40 <HAL_TIM_OC_Start_IT+0x244>)
 8009ce8:	4013      	ands	r3, r2
 8009cea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2b06      	cmp	r3, #6
 8009cf0:	d016      	beq.n	8009d20 <HAL_TIM_OC_Start_IT+0x224>
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	2380      	movs	r3, #128	@ 0x80
 8009cf6:	025b      	lsls	r3, r3, #9
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d011      	beq.n	8009d20 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2101      	movs	r1, #1
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d0c:	e008      	b.n	8009d20 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2101      	movs	r1, #1
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	e000      	b.n	8009d22 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d20:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009d22:	230f      	movs	r3, #15
 8009d24:	18fb      	adds	r3, r7, r3
 8009d26:	781b      	ldrb	r3, [r3, #0]
}
 8009d28:	0018      	movs	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	b004      	add	sp, #16
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	40012c00 	.word	0x40012c00
 8009d34:	40014400 	.word	0x40014400
 8009d38:	40014800 	.word	0x40014800
 8009d3c:	40000400 	.word	0x40000400
 8009d40:	00010007 	.word	0x00010007

08009d44 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d4e:	230f      	movs	r3, #15
 8009d50:	18fb      	adds	r3, r7, r3
 8009d52:	2200      	movs	r2, #0
 8009d54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b0c      	cmp	r3, #12
 8009d5a:	d02a      	beq.n	8009db2 <HAL_TIM_OC_Stop_IT+0x6e>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b0c      	cmp	r3, #12
 8009d60:	d830      	bhi.n	8009dc4 <HAL_TIM_OC_Stop_IT+0x80>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d01b      	beq.n	8009da0 <HAL_TIM_OC_Stop_IT+0x5c>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	2b08      	cmp	r3, #8
 8009d6c:	d82a      	bhi.n	8009dc4 <HAL_TIM_OC_Stop_IT+0x80>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_TIM_OC_Stop_IT+0x38>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	d009      	beq.n	8009d8e <HAL_TIM_OC_Stop_IT+0x4a>
 8009d7a:	e023      	b.n	8009dc4 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2102      	movs	r1, #2
 8009d88:	438a      	bics	r2, r1
 8009d8a:	60da      	str	r2, [r3, #12]
      break;
 8009d8c:	e01f      	b.n	8009dce <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2104      	movs	r1, #4
 8009d9a:	438a      	bics	r2, r1
 8009d9c:	60da      	str	r2, [r3, #12]
      break;
 8009d9e:	e016      	b.n	8009dce <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2108      	movs	r1, #8
 8009dac:	438a      	bics	r2, r1
 8009dae:	60da      	str	r2, [r3, #12]
      break;
 8009db0:	e00d      	b.n	8009dce <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2110      	movs	r1, #16
 8009dbe:	438a      	bics	r2, r1
 8009dc0:	60da      	str	r2, [r3, #12]
      break;
 8009dc2:	e004      	b.n	8009dce <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8009dc4:	230f      	movs	r3, #15
 8009dc6:	18fb      	adds	r3, r7, r3
 8009dc8:	2201      	movs	r2, #1
 8009dca:	701a      	strb	r2, [r3, #0]
      break;
 8009dcc:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009dce:	230f      	movs	r3, #15
 8009dd0:	18fb      	adds	r3, r7, r3
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d000      	beq.n	8009dda <HAL_TIM_OC_Stop_IT+0x96>
 8009dd8:	e06e      	b.n	8009eb8 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	2200      	movs	r2, #0
 8009de2:	0018      	movs	r0, r3
 8009de4:	f001 fdce 	bl	800b984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a36      	ldr	r2, [pc, #216]	@ (8009ec8 <HAL_TIM_OC_Stop_IT+0x184>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d009      	beq.n	8009e06 <HAL_TIM_OC_Stop_IT+0xc2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a35      	ldr	r2, [pc, #212]	@ (8009ecc <HAL_TIM_OC_Stop_IT+0x188>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d004      	beq.n	8009e06 <HAL_TIM_OC_Stop_IT+0xc2>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a33      	ldr	r2, [pc, #204]	@ (8009ed0 <HAL_TIM_OC_Stop_IT+0x18c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d101      	bne.n	8009e0a <HAL_TIM_OC_Stop_IT+0xc6>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <HAL_TIM_OC_Stop_IT+0xc8>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d013      	beq.n	8009e38 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	4a2f      	ldr	r2, [pc, #188]	@ (8009ed4 <HAL_TIM_OC_Stop_IT+0x190>)
 8009e18:	4013      	ands	r3, r2
 8009e1a:	d10d      	bne.n	8009e38 <HAL_TIM_OC_Stop_IT+0xf4>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	4a2d      	ldr	r2, [pc, #180]	@ (8009ed8 <HAL_TIM_OC_Stop_IT+0x194>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	d107      	bne.n	8009e38 <HAL_TIM_OC_Stop_IT+0xf4>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	492a      	ldr	r1, [pc, #168]	@ (8009edc <HAL_TIM_OC_Stop_IT+0x198>)
 8009e34:	400a      	ands	r2, r1
 8009e36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	4a25      	ldr	r2, [pc, #148]	@ (8009ed4 <HAL_TIM_OC_Stop_IT+0x190>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	d10d      	bne.n	8009e60 <HAL_TIM_OC_Stop_IT+0x11c>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	4a23      	ldr	r2, [pc, #140]	@ (8009ed8 <HAL_TIM_OC_Stop_IT+0x194>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	d107      	bne.n	8009e60 <HAL_TIM_OC_Stop_IT+0x11c>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	438a      	bics	r2, r1
 8009e5e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d104      	bne.n	8009e70 <HAL_TIM_OC_Stop_IT+0x12c>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	223e      	movs	r2, #62	@ 0x3e
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	5499      	strb	r1, [r3, r2]
 8009e6e:	e023      	b.n	8009eb8 <HAL_TIM_OC_Stop_IT+0x174>
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	d104      	bne.n	8009e80 <HAL_TIM_OC_Stop_IT+0x13c>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	223f      	movs	r2, #63	@ 0x3f
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	5499      	strb	r1, [r3, r2]
 8009e7e:	e01b      	b.n	8009eb8 <HAL_TIM_OC_Stop_IT+0x174>
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2b08      	cmp	r3, #8
 8009e84:	d104      	bne.n	8009e90 <HAL_TIM_OC_Stop_IT+0x14c>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2240      	movs	r2, #64	@ 0x40
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	5499      	strb	r1, [r3, r2]
 8009e8e:	e013      	b.n	8009eb8 <HAL_TIM_OC_Stop_IT+0x174>
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b0c      	cmp	r3, #12
 8009e94:	d104      	bne.n	8009ea0 <HAL_TIM_OC_Stop_IT+0x15c>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2241      	movs	r2, #65	@ 0x41
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	5499      	strb	r1, [r3, r2]
 8009e9e:	e00b      	b.n	8009eb8 <HAL_TIM_OC_Stop_IT+0x174>
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2b10      	cmp	r3, #16
 8009ea4:	d104      	bne.n	8009eb0 <HAL_TIM_OC_Stop_IT+0x16c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2242      	movs	r2, #66	@ 0x42
 8009eaa:	2101      	movs	r1, #1
 8009eac:	5499      	strb	r1, [r3, r2]
 8009eae:	e003      	b.n	8009eb8 <HAL_TIM_OC_Stop_IT+0x174>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2243      	movs	r2, #67	@ 0x43
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8009eb8:	230f      	movs	r3, #15
 8009eba:	18fb      	adds	r3, r7, r3
 8009ebc:	781b      	ldrb	r3, [r3, #0]
}
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	b004      	add	sp, #16
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	46c0      	nop			@ (mov r8, r8)
 8009ec8:	40012c00 	.word	0x40012c00
 8009ecc:	40014400 	.word	0x40014400
 8009ed0:	40014800 	.word	0x40014800
 8009ed4:	00001111 	.word	0x00001111
 8009ed8:	00000444 	.word	0x00000444
 8009edc:	ffff7fff 	.word	0xffff7fff

08009ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e056      	b.n	8009fa0 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	223d      	movs	r2, #61	@ 0x3d
 8009ef6:	5c9b      	ldrb	r3, [r3, r2]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d113      	bne.n	8009f26 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	223c      	movs	r2, #60	@ 0x3c
 8009f02:	2100      	movs	r1, #0
 8009f04:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	0018      	movs	r0, r3
 8009f0a:	f001 fd5f 	bl	800b9cc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d102      	bne.n	8009f1c <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a23      	ldr	r2, [pc, #140]	@ (8009fa8 <HAL_TIM_PWM_Init+0xc8>)
 8009f1a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	0010      	movs	r0, r2
 8009f24:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	223d      	movs	r2, #61	@ 0x3d
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3304      	adds	r3, #4
 8009f36:	0019      	movs	r1, r3
 8009f38:	0010      	movs	r0, r2
 8009f3a:	f001 f849 	bl	800afd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2248      	movs	r2, #72	@ 0x48
 8009f42:	2101      	movs	r1, #1
 8009f44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	223e      	movs	r2, #62	@ 0x3e
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	5499      	strb	r1, [r3, r2]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	223f      	movs	r2, #63	@ 0x3f
 8009f52:	2101      	movs	r1, #1
 8009f54:	5499      	strb	r1, [r3, r2]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2240      	movs	r2, #64	@ 0x40
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	5499      	strb	r1, [r3, r2]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2241      	movs	r2, #65	@ 0x41
 8009f62:	2101      	movs	r1, #1
 8009f64:	5499      	strb	r1, [r3, r2]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2242      	movs	r2, #66	@ 0x42
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	5499      	strb	r1, [r3, r2]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2243      	movs	r2, #67	@ 0x43
 8009f72:	2101      	movs	r1, #1
 8009f74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2244      	movs	r2, #68	@ 0x44
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	5499      	strb	r1, [r3, r2]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2245      	movs	r2, #69	@ 0x45
 8009f82:	2101      	movs	r1, #1
 8009f84:	5499      	strb	r1, [r3, r2]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2246      	movs	r2, #70	@ 0x46
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	5499      	strb	r1, [r3, r2]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2247      	movs	r2, #71	@ 0x47
 8009f92:	2101      	movs	r1, #1
 8009f94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	223d      	movs	r2, #61	@ 0x3d
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	b002      	add	sp, #8
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	08009fad 	.word	0x08009fad

08009fac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009fb4:	46c0      	nop			@ (mov r8, r8)
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	b002      	add	sp, #8
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d108      	bne.n	8009fde <HAL_TIM_PWM_Start+0x22>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	223e      	movs	r2, #62	@ 0x3e
 8009fd0:	5c9b      	ldrb	r3, [r3, r2]
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	1e5a      	subs	r2, r3, #1
 8009fd8:	4193      	sbcs	r3, r2
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	e037      	b.n	800a04e <HAL_TIM_PWM_Start+0x92>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d108      	bne.n	8009ff6 <HAL_TIM_PWM_Start+0x3a>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	223f      	movs	r2, #63	@ 0x3f
 8009fe8:	5c9b      	ldrb	r3, [r3, r2]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	1e5a      	subs	r2, r3, #1
 8009ff0:	4193      	sbcs	r3, r2
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	e02b      	b.n	800a04e <HAL_TIM_PWM_Start+0x92>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d108      	bne.n	800a00e <HAL_TIM_PWM_Start+0x52>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2240      	movs	r2, #64	@ 0x40
 800a000:	5c9b      	ldrb	r3, [r3, r2]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	3b01      	subs	r3, #1
 800a006:	1e5a      	subs	r2, r3, #1
 800a008:	4193      	sbcs	r3, r2
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	e01f      	b.n	800a04e <HAL_TIM_PWM_Start+0x92>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b0c      	cmp	r3, #12
 800a012:	d108      	bne.n	800a026 <HAL_TIM_PWM_Start+0x6a>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2241      	movs	r2, #65	@ 0x41
 800a018:	5c9b      	ldrb	r3, [r3, r2]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	3b01      	subs	r3, #1
 800a01e:	1e5a      	subs	r2, r3, #1
 800a020:	4193      	sbcs	r3, r2
 800a022:	b2db      	uxtb	r3, r3
 800a024:	e013      	b.n	800a04e <HAL_TIM_PWM_Start+0x92>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	2b10      	cmp	r3, #16
 800a02a:	d108      	bne.n	800a03e <HAL_TIM_PWM_Start+0x82>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2242      	movs	r2, #66	@ 0x42
 800a030:	5c9b      	ldrb	r3, [r3, r2]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	3b01      	subs	r3, #1
 800a036:	1e5a      	subs	r2, r3, #1
 800a038:	4193      	sbcs	r3, r2
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	e007      	b.n	800a04e <HAL_TIM_PWM_Start+0x92>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2243      	movs	r2, #67	@ 0x43
 800a042:	5c9b      	ldrb	r3, [r3, r2]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	3b01      	subs	r3, #1
 800a048:	1e5a      	subs	r2, r3, #1
 800a04a:	4193      	sbcs	r3, r2
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e081      	b.n	800a15a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d104      	bne.n	800a066 <HAL_TIM_PWM_Start+0xaa>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	223e      	movs	r2, #62	@ 0x3e
 800a060:	2102      	movs	r1, #2
 800a062:	5499      	strb	r1, [r3, r2]
 800a064:	e023      	b.n	800a0ae <HAL_TIM_PWM_Start+0xf2>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b04      	cmp	r3, #4
 800a06a:	d104      	bne.n	800a076 <HAL_TIM_PWM_Start+0xba>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	223f      	movs	r2, #63	@ 0x3f
 800a070:	2102      	movs	r1, #2
 800a072:	5499      	strb	r1, [r3, r2]
 800a074:	e01b      	b.n	800a0ae <HAL_TIM_PWM_Start+0xf2>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d104      	bne.n	800a086 <HAL_TIM_PWM_Start+0xca>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2240      	movs	r2, #64	@ 0x40
 800a080:	2102      	movs	r1, #2
 800a082:	5499      	strb	r1, [r3, r2]
 800a084:	e013      	b.n	800a0ae <HAL_TIM_PWM_Start+0xf2>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b0c      	cmp	r3, #12
 800a08a:	d104      	bne.n	800a096 <HAL_TIM_PWM_Start+0xda>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2241      	movs	r2, #65	@ 0x41
 800a090:	2102      	movs	r1, #2
 800a092:	5499      	strb	r1, [r3, r2]
 800a094:	e00b      	b.n	800a0ae <HAL_TIM_PWM_Start+0xf2>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b10      	cmp	r3, #16
 800a09a:	d104      	bne.n	800a0a6 <HAL_TIM_PWM_Start+0xea>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2242      	movs	r2, #66	@ 0x42
 800a0a0:	2102      	movs	r1, #2
 800a0a2:	5499      	strb	r1, [r3, r2]
 800a0a4:	e003      	b.n	800a0ae <HAL_TIM_PWM_Start+0xf2>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2243      	movs	r2, #67	@ 0x43
 800a0aa:	2102      	movs	r1, #2
 800a0ac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	f001 fc64 	bl	800b984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a28      	ldr	r2, [pc, #160]	@ (800a164 <HAL_TIM_PWM_Start+0x1a8>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d009      	beq.n	800a0da <HAL_TIM_PWM_Start+0x11e>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a27      	ldr	r2, [pc, #156]	@ (800a168 <HAL_TIM_PWM_Start+0x1ac>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d004      	beq.n	800a0da <HAL_TIM_PWM_Start+0x11e>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a25      	ldr	r2, [pc, #148]	@ (800a16c <HAL_TIM_PWM_Start+0x1b0>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d101      	bne.n	800a0de <HAL_TIM_PWM_Start+0x122>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <HAL_TIM_PWM_Start+0x124>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d008      	beq.n	800a0f6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2180      	movs	r1, #128	@ 0x80
 800a0f0:	0209      	lsls	r1, r1, #8
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a1a      	ldr	r2, [pc, #104]	@ (800a164 <HAL_TIM_PWM_Start+0x1a8>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d00a      	beq.n	800a116 <HAL_TIM_PWM_Start+0x15a>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	2380      	movs	r3, #128	@ 0x80
 800a106:	05db      	lsls	r3, r3, #23
 800a108:	429a      	cmp	r2, r3
 800a10a:	d004      	beq.n	800a116 <HAL_TIM_PWM_Start+0x15a>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a17      	ldr	r2, [pc, #92]	@ (800a170 <HAL_TIM_PWM_Start+0x1b4>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d116      	bne.n	800a144 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	4a15      	ldr	r2, [pc, #84]	@ (800a174 <HAL_TIM_PWM_Start+0x1b8>)
 800a11e:	4013      	ands	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b06      	cmp	r3, #6
 800a126:	d016      	beq.n	800a156 <HAL_TIM_PWM_Start+0x19a>
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	2380      	movs	r3, #128	@ 0x80
 800a12c:	025b      	lsls	r3, r3, #9
 800a12e:	429a      	cmp	r2, r3
 800a130:	d011      	beq.n	800a156 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2101      	movs	r1, #1
 800a13e:	430a      	orrs	r2, r1
 800a140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a142:	e008      	b.n	800a156 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2101      	movs	r1, #1
 800a150:	430a      	orrs	r2, r1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e000      	b.n	800a158 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a156:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	0018      	movs	r0, r3
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b004      	add	sp, #16
 800a160:	bd80      	pop	{r7, pc}
 800a162:	46c0      	nop			@ (mov r8, r8)
 800a164:	40012c00 	.word	0x40012c00
 800a168:	40014400 	.word	0x40014400
 800a16c:	40014800 	.word	0x40014800
 800a170:	40000400 	.word	0x40000400
 800a174:	00010007 	.word	0x00010007

0800a178 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e056      	b.n	800a238 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	223d      	movs	r2, #61	@ 0x3d
 800a18e:	5c9b      	ldrb	r3, [r3, r2]
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d113      	bne.n	800a1be <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	223c      	movs	r2, #60	@ 0x3c
 800a19a:	2100      	movs	r1, #0
 800a19c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f001 fc13 	bl	800b9cc <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d102      	bne.n	800a1b4 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a23      	ldr	r2, [pc, #140]	@ (800a240 <HAL_TIM_IC_Init+0xc8>)
 800a1b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	0010      	movs	r0, r2
 800a1bc:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	223d      	movs	r2, #61	@ 0x3d
 800a1c2:	2102      	movs	r1, #2
 800a1c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	0019      	movs	r1, r3
 800a1d0:	0010      	movs	r0, r2
 800a1d2:	f000 fefd 	bl	800afd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2248      	movs	r2, #72	@ 0x48
 800a1da:	2101      	movs	r1, #1
 800a1dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	223e      	movs	r2, #62	@ 0x3e
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	5499      	strb	r1, [r3, r2]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	223f      	movs	r2, #63	@ 0x3f
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	5499      	strb	r1, [r3, r2]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2240      	movs	r2, #64	@ 0x40
 800a1f2:	2101      	movs	r1, #1
 800a1f4:	5499      	strb	r1, [r3, r2]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2241      	movs	r2, #65	@ 0x41
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	5499      	strb	r1, [r3, r2]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2242      	movs	r2, #66	@ 0x42
 800a202:	2101      	movs	r1, #1
 800a204:	5499      	strb	r1, [r3, r2]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2243      	movs	r2, #67	@ 0x43
 800a20a:	2101      	movs	r1, #1
 800a20c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2244      	movs	r2, #68	@ 0x44
 800a212:	2101      	movs	r1, #1
 800a214:	5499      	strb	r1, [r3, r2]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2245      	movs	r2, #69	@ 0x45
 800a21a:	2101      	movs	r1, #1
 800a21c:	5499      	strb	r1, [r3, r2]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2246      	movs	r2, #70	@ 0x46
 800a222:	2101      	movs	r1, #1
 800a224:	5499      	strb	r1, [r3, r2]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2247      	movs	r2, #71	@ 0x47
 800a22a:	2101      	movs	r1, #1
 800a22c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	223d      	movs	r2, #61	@ 0x3d
 800a232:	2101      	movs	r1, #1
 800a234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	0018      	movs	r0, r3
 800a23a:	46bd      	mov	sp, r7
 800a23c:	b002      	add	sp, #8
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	0800a245 	.word	0x0800a245

0800a244 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a24c:	46c0      	nop			@ (mov r8, r8)
 800a24e:	46bd      	mov	sp, r7
 800a250:	b002      	add	sp, #8
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a25e:	230f      	movs	r3, #15
 800a260:	18fb      	adds	r3, r7, r3
 800a262:	2200      	movs	r2, #0
 800a264:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d104      	bne.n	800a276 <HAL_TIM_IC_Start_IT+0x22>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	223e      	movs	r2, #62	@ 0x3e
 800a270:	5c9b      	ldrb	r3, [r3, r2]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	e023      	b.n	800a2be <HAL_TIM_IC_Start_IT+0x6a>
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	2b04      	cmp	r3, #4
 800a27a:	d104      	bne.n	800a286 <HAL_TIM_IC_Start_IT+0x32>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	223f      	movs	r2, #63	@ 0x3f
 800a280:	5c9b      	ldrb	r3, [r3, r2]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	e01b      	b.n	800a2be <HAL_TIM_IC_Start_IT+0x6a>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b08      	cmp	r3, #8
 800a28a:	d104      	bne.n	800a296 <HAL_TIM_IC_Start_IT+0x42>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2240      	movs	r2, #64	@ 0x40
 800a290:	5c9b      	ldrb	r3, [r3, r2]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	e013      	b.n	800a2be <HAL_TIM_IC_Start_IT+0x6a>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b0c      	cmp	r3, #12
 800a29a:	d104      	bne.n	800a2a6 <HAL_TIM_IC_Start_IT+0x52>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2241      	movs	r2, #65	@ 0x41
 800a2a0:	5c9b      	ldrb	r3, [r3, r2]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	e00b      	b.n	800a2be <HAL_TIM_IC_Start_IT+0x6a>
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b10      	cmp	r3, #16
 800a2aa:	d104      	bne.n	800a2b6 <HAL_TIM_IC_Start_IT+0x62>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2242      	movs	r2, #66	@ 0x42
 800a2b0:	5c9b      	ldrb	r3, [r3, r2]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	e003      	b.n	800a2be <HAL_TIM_IC_Start_IT+0x6a>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2243      	movs	r2, #67	@ 0x43
 800a2ba:	5c9b      	ldrb	r3, [r3, r2]
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	220e      	movs	r2, #14
 800a2c0:	18ba      	adds	r2, r7, r2
 800a2c2:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d104      	bne.n	800a2d4 <HAL_TIM_IC_Start_IT+0x80>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2244      	movs	r2, #68	@ 0x44
 800a2ce:	5c9b      	ldrb	r3, [r3, r2]
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	e013      	b.n	800a2fc <HAL_TIM_IC_Start_IT+0xa8>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d104      	bne.n	800a2e4 <HAL_TIM_IC_Start_IT+0x90>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2245      	movs	r2, #69	@ 0x45
 800a2de:	5c9b      	ldrb	r3, [r3, r2]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	e00b      	b.n	800a2fc <HAL_TIM_IC_Start_IT+0xa8>
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2b08      	cmp	r3, #8
 800a2e8:	d104      	bne.n	800a2f4 <HAL_TIM_IC_Start_IT+0xa0>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2246      	movs	r2, #70	@ 0x46
 800a2ee:	5c9b      	ldrb	r3, [r3, r2]
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	e003      	b.n	800a2fc <HAL_TIM_IC_Start_IT+0xa8>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2247      	movs	r2, #71	@ 0x47
 800a2f8:	5c9b      	ldrb	r3, [r3, r2]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	210d      	movs	r1, #13
 800a2fe:	187a      	adds	r2, r7, r1
 800a300:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a302:	230e      	movs	r3, #14
 800a304:	18fb      	adds	r3, r7, r3
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d103      	bne.n	800a314 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a30c:	187b      	adds	r3, r7, r1
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d001      	beq.n	800a318 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e0c3      	b.n	800a4a0 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d104      	bne.n	800a328 <HAL_TIM_IC_Start_IT+0xd4>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	223e      	movs	r2, #62	@ 0x3e
 800a322:	2102      	movs	r1, #2
 800a324:	5499      	strb	r1, [r3, r2]
 800a326:	e023      	b.n	800a370 <HAL_TIM_IC_Start_IT+0x11c>
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d104      	bne.n	800a338 <HAL_TIM_IC_Start_IT+0xe4>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	223f      	movs	r2, #63	@ 0x3f
 800a332:	2102      	movs	r1, #2
 800a334:	5499      	strb	r1, [r3, r2]
 800a336:	e01b      	b.n	800a370 <HAL_TIM_IC_Start_IT+0x11c>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b08      	cmp	r3, #8
 800a33c:	d104      	bne.n	800a348 <HAL_TIM_IC_Start_IT+0xf4>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2240      	movs	r2, #64	@ 0x40
 800a342:	2102      	movs	r1, #2
 800a344:	5499      	strb	r1, [r3, r2]
 800a346:	e013      	b.n	800a370 <HAL_TIM_IC_Start_IT+0x11c>
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b0c      	cmp	r3, #12
 800a34c:	d104      	bne.n	800a358 <HAL_TIM_IC_Start_IT+0x104>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2241      	movs	r2, #65	@ 0x41
 800a352:	2102      	movs	r1, #2
 800a354:	5499      	strb	r1, [r3, r2]
 800a356:	e00b      	b.n	800a370 <HAL_TIM_IC_Start_IT+0x11c>
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b10      	cmp	r3, #16
 800a35c:	d104      	bne.n	800a368 <HAL_TIM_IC_Start_IT+0x114>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2242      	movs	r2, #66	@ 0x42
 800a362:	2102      	movs	r1, #2
 800a364:	5499      	strb	r1, [r3, r2]
 800a366:	e003      	b.n	800a370 <HAL_TIM_IC_Start_IT+0x11c>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2243      	movs	r2, #67	@ 0x43
 800a36c:	2102      	movs	r1, #2
 800a36e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d104      	bne.n	800a380 <HAL_TIM_IC_Start_IT+0x12c>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2244      	movs	r2, #68	@ 0x44
 800a37a:	2102      	movs	r1, #2
 800a37c:	5499      	strb	r1, [r3, r2]
 800a37e:	e013      	b.n	800a3a8 <HAL_TIM_IC_Start_IT+0x154>
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2b04      	cmp	r3, #4
 800a384:	d104      	bne.n	800a390 <HAL_TIM_IC_Start_IT+0x13c>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2245      	movs	r2, #69	@ 0x45
 800a38a:	2102      	movs	r1, #2
 800a38c:	5499      	strb	r1, [r3, r2]
 800a38e:	e00b      	b.n	800a3a8 <HAL_TIM_IC_Start_IT+0x154>
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2b08      	cmp	r3, #8
 800a394:	d104      	bne.n	800a3a0 <HAL_TIM_IC_Start_IT+0x14c>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2246      	movs	r2, #70	@ 0x46
 800a39a:	2102      	movs	r1, #2
 800a39c:	5499      	strb	r1, [r3, r2]
 800a39e:	e003      	b.n	800a3a8 <HAL_TIM_IC_Start_IT+0x154>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2247      	movs	r2, #71	@ 0x47
 800a3a4:	2102      	movs	r1, #2
 800a3a6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b0c      	cmp	r3, #12
 800a3ac:	d02a      	beq.n	800a404 <HAL_TIM_IC_Start_IT+0x1b0>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b0c      	cmp	r3, #12
 800a3b2:	d830      	bhi.n	800a416 <HAL_TIM_IC_Start_IT+0x1c2>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b08      	cmp	r3, #8
 800a3b8:	d01b      	beq.n	800a3f2 <HAL_TIM_IC_Start_IT+0x19e>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d82a      	bhi.n	800a416 <HAL_TIM_IC_Start_IT+0x1c2>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_TIM_IC_Start_IT+0x17a>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d009      	beq.n	800a3e0 <HAL_TIM_IC_Start_IT+0x18c>
 800a3cc:	e023      	b.n	800a416 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68da      	ldr	r2, [r3, #12]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2102      	movs	r1, #2
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	60da      	str	r2, [r3, #12]
      break;
 800a3de:	e01f      	b.n	800a420 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68da      	ldr	r2, [r3, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	60da      	str	r2, [r3, #12]
      break;
 800a3f0:	e016      	b.n	800a420 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2108      	movs	r1, #8
 800a3fe:	430a      	orrs	r2, r1
 800a400:	60da      	str	r2, [r3, #12]
      break;
 800a402:	e00d      	b.n	800a420 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2110      	movs	r1, #16
 800a410:	430a      	orrs	r2, r1
 800a412:	60da      	str	r2, [r3, #12]
      break;
 800a414:	e004      	b.n	800a420 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800a416:	230f      	movs	r3, #15
 800a418:	18fb      	adds	r3, r7, r3
 800a41a:	2201      	movs	r2, #1
 800a41c:	701a      	strb	r2, [r3, #0]
      break;
 800a41e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a420:	230f      	movs	r3, #15
 800a422:	18fb      	adds	r3, r7, r3
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d137      	bne.n	800a49a <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	2201      	movs	r2, #1
 800a432:	0018      	movs	r0, r3
 800a434:	f001 faa6 	bl	800b984 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a1a      	ldr	r2, [pc, #104]	@ (800a4a8 <HAL_TIM_IC_Start_IT+0x254>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00a      	beq.n	800a458 <HAL_TIM_IC_Start_IT+0x204>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	2380      	movs	r3, #128	@ 0x80
 800a448:	05db      	lsls	r3, r3, #23
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d004      	beq.n	800a458 <HAL_TIM_IC_Start_IT+0x204>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a16      	ldr	r2, [pc, #88]	@ (800a4ac <HAL_TIM_IC_Start_IT+0x258>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d116      	bne.n	800a486 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	4a14      	ldr	r2, [pc, #80]	@ (800a4b0 <HAL_TIM_IC_Start_IT+0x25c>)
 800a460:	4013      	ands	r3, r2
 800a462:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2b06      	cmp	r3, #6
 800a468:	d016      	beq.n	800a498 <HAL_TIM_IC_Start_IT+0x244>
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	2380      	movs	r3, #128	@ 0x80
 800a46e:	025b      	lsls	r3, r3, #9
 800a470:	429a      	cmp	r2, r3
 800a472:	d011      	beq.n	800a498 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2101      	movs	r1, #1
 800a480:	430a      	orrs	r2, r1
 800a482:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a484:	e008      	b.n	800a498 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2101      	movs	r1, #1
 800a492:	430a      	orrs	r2, r1
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	e000      	b.n	800a49a <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a498:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a49a:	230f      	movs	r3, #15
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	781b      	ldrb	r3, [r3, #0]
}
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	b004      	add	sp, #16
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	40012c00 	.word	0x40012c00
 800a4ac:	40000400 	.word	0x40000400
 800a4b0:	00010007 	.word	0x00010007

0800a4b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	d027      	beq.n	800a524 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	4013      	ands	r3, r2
 800a4da:	d023      	beq.n	800a524 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	4252      	negs	r2, r2
 800a4e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	d006      	beq.n	800a506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2294      	movs	r2, #148	@ 0x94
 800a4fc:	589b      	ldr	r3, [r3, r2]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	0010      	movs	r0, r2
 800a502:	4798      	blx	r3
 800a504:	e00b      	b.n	800a51e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	229c      	movs	r2, #156	@ 0x9c
 800a50a:	589b      	ldr	r3, [r3, r2]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	0010      	movs	r0, r2
 800a510:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	22a0      	movs	r2, #160	@ 0xa0
 800a516:	589b      	ldr	r3, [r3, r2]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	0010      	movs	r0, r2
 800a51c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2204      	movs	r2, #4
 800a528:	4013      	ands	r3, r2
 800a52a:	d028      	beq.n	800a57e <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2204      	movs	r2, #4
 800a530:	4013      	ands	r3, r2
 800a532:	d024      	beq.n	800a57e <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2205      	movs	r2, #5
 800a53a:	4252      	negs	r2, r2
 800a53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2202      	movs	r2, #2
 800a542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	23c0      	movs	r3, #192	@ 0xc0
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4013      	ands	r3, r2
 800a550:	d006      	beq.n	800a560 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2294      	movs	r2, #148	@ 0x94
 800a556:	589b      	ldr	r3, [r3, r2]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	0010      	movs	r0, r2
 800a55c:	4798      	blx	r3
 800a55e:	e00b      	b.n	800a578 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	229c      	movs	r2, #156	@ 0x9c
 800a564:	589b      	ldr	r3, [r3, r2]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	0010      	movs	r0, r2
 800a56a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	22a0      	movs	r2, #160	@ 0xa0
 800a570:	589b      	ldr	r3, [r3, r2]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	0010      	movs	r0, r2
 800a576:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	2208      	movs	r2, #8
 800a582:	4013      	ands	r3, r2
 800a584:	d027      	beq.n	800a5d6 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2208      	movs	r2, #8
 800a58a:	4013      	ands	r3, r2
 800a58c:	d023      	beq.n	800a5d6 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2209      	movs	r2, #9
 800a594:	4252      	negs	r2, r2
 800a596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2204      	movs	r2, #4
 800a59c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	d006      	beq.n	800a5b8 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2294      	movs	r2, #148	@ 0x94
 800a5ae:	589b      	ldr	r3, [r3, r2]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	0010      	movs	r0, r2
 800a5b4:	4798      	blx	r3
 800a5b6:	e00b      	b.n	800a5d0 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	229c      	movs	r2, #156	@ 0x9c
 800a5bc:	589b      	ldr	r3, [r3, r2]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	0010      	movs	r0, r2
 800a5c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	22a0      	movs	r2, #160	@ 0xa0
 800a5c8:	589b      	ldr	r3, [r3, r2]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	0010      	movs	r0, r2
 800a5ce:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2210      	movs	r2, #16
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d028      	beq.n	800a630 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2210      	movs	r2, #16
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	d024      	beq.n	800a630 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2211      	movs	r2, #17
 800a5ec:	4252      	negs	r2, r2
 800a5ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2208      	movs	r2, #8
 800a5f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69da      	ldr	r2, [r3, #28]
 800a5fc:	23c0      	movs	r3, #192	@ 0xc0
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4013      	ands	r3, r2
 800a602:	d006      	beq.n	800a612 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2294      	movs	r2, #148	@ 0x94
 800a608:	589b      	ldr	r3, [r3, r2]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	0010      	movs	r0, r2
 800a60e:	4798      	blx	r3
 800a610:	e00b      	b.n	800a62a <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	229c      	movs	r2, #156	@ 0x9c
 800a616:	589b      	ldr	r3, [r3, r2]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	0010      	movs	r0, r2
 800a61c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	22a0      	movs	r2, #160	@ 0xa0
 800a622:	589b      	ldr	r3, [r3, r2]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	0010      	movs	r0, r2
 800a628:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2201      	movs	r2, #1
 800a634:	4013      	ands	r3, r2
 800a636:	d00e      	beq.n	800a656 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	4013      	ands	r3, r2
 800a63e:	d00a      	beq.n	800a656 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2202      	movs	r2, #2
 800a646:	4252      	negs	r2, r2
 800a648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2284      	movs	r2, #132	@ 0x84
 800a64e:	589b      	ldr	r3, [r3, r2]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	0010      	movs	r0, r2
 800a654:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2280      	movs	r2, #128	@ 0x80
 800a65a:	4013      	ands	r3, r2
 800a65c:	d104      	bne.n	800a668 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	2380      	movs	r3, #128	@ 0x80
 800a662:	019b      	lsls	r3, r3, #6
 800a664:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a666:	d00d      	beq.n	800a684 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2280      	movs	r2, #128	@ 0x80
 800a66c:	4013      	ands	r3, r2
 800a66e:	d009      	beq.n	800a684 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a22      	ldr	r2, [pc, #136]	@ (800a700 <HAL_TIM_IRQHandler+0x24c>)
 800a676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	22b4      	movs	r2, #180	@ 0xb4
 800a67c:	589b      	ldr	r3, [r3, r2]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	0010      	movs	r0, r2
 800a682:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	2380      	movs	r3, #128	@ 0x80
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	4013      	ands	r3, r2
 800a68c:	d00d      	beq.n	800a6aa <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2280      	movs	r2, #128	@ 0x80
 800a692:	4013      	ands	r3, r2
 800a694:	d009      	beq.n	800a6aa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a1a      	ldr	r2, [pc, #104]	@ (800a704 <HAL_TIM_IRQHandler+0x250>)
 800a69c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	22b8      	movs	r2, #184	@ 0xb8
 800a6a2:	589b      	ldr	r3, [r3, r2]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	0010      	movs	r0, r2
 800a6a8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2240      	movs	r2, #64	@ 0x40
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	d00e      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2240      	movs	r2, #64	@ 0x40
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	d00a      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2241      	movs	r2, #65	@ 0x41
 800a6c0:	4252      	negs	r2, r2
 800a6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	228c      	movs	r2, #140	@ 0x8c
 800a6c8:	589b      	ldr	r3, [r3, r2]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	0010      	movs	r0, r2
 800a6ce:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	d00e      	beq.n	800a6f6 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	4013      	ands	r3, r2
 800a6de:	d00a      	beq.n	800a6f6 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2221      	movs	r2, #33	@ 0x21
 800a6e6:	4252      	negs	r2, r2
 800a6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	22ac      	movs	r2, #172	@ 0xac
 800a6ee:	589b      	ldr	r3, [r3, r2]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	0010      	movs	r0, r2
 800a6f4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6f6:	46c0      	nop			@ (mov r8, r8)
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	b004      	add	sp, #16
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	46c0      	nop			@ (mov r8, r8)
 800a700:	ffffdf7f 	.word	0xffffdf7f
 800a704:	fffffeff 	.word	0xfffffeff

0800a708 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a714:	2317      	movs	r3, #23
 800a716:	18fb      	adds	r3, r7, r3
 800a718:	2200      	movs	r2, #0
 800a71a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	223c      	movs	r2, #60	@ 0x3c
 800a720:	5c9b      	ldrb	r3, [r3, r2]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d101      	bne.n	800a72a <HAL_TIM_OC_ConfigChannel+0x22>
 800a726:	2302      	movs	r3, #2
 800a728:	e048      	b.n	800a7bc <HAL_TIM_OC_ConfigChannel+0xb4>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	223c      	movs	r2, #60	@ 0x3c
 800a72e:	2101      	movs	r1, #1
 800a730:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b14      	cmp	r3, #20
 800a736:	d835      	bhi.n	800a7a4 <HAL_TIM_OC_ConfigChannel+0x9c>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	009a      	lsls	r2, r3, #2
 800a73c:	4b21      	ldr	r3, [pc, #132]	@ (800a7c4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a73e:	18d3      	adds	r3, r2, r3
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	0011      	movs	r1, r2
 800a74c:	0018      	movs	r0, r3
 800a74e:	f000 fcc3 	bl	800b0d8 <TIM_OC1_SetConfig>
      break;
 800a752:	e02c      	b.n	800a7ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	0011      	movs	r1, r2
 800a75c:	0018      	movs	r0, r3
 800a75e:	f000 fd3b 	bl	800b1d8 <TIM_OC2_SetConfig>
      break;
 800a762:	e024      	b.n	800a7ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0011      	movs	r1, r2
 800a76c:	0018      	movs	r0, r3
 800a76e:	f000 fdb1 	bl	800b2d4 <TIM_OC3_SetConfig>
      break;
 800a772:	e01c      	b.n	800a7ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	0011      	movs	r1, r2
 800a77c:	0018      	movs	r0, r3
 800a77e:	f000 fe2b 	bl	800b3d8 <TIM_OC4_SetConfig>
      break;
 800a782:	e014      	b.n	800a7ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	0011      	movs	r1, r2
 800a78c:	0018      	movs	r0, r3
 800a78e:	f000 fe87 	bl	800b4a0 <TIM_OC5_SetConfig>
      break;
 800a792:	e00c      	b.n	800a7ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	0011      	movs	r1, r2
 800a79c:	0018      	movs	r0, r3
 800a79e:	f000 fed9 	bl	800b554 <TIM_OC6_SetConfig>
      break;
 800a7a2:	e004      	b.n	800a7ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a7a4:	2317      	movs	r3, #23
 800a7a6:	18fb      	adds	r3, r7, r3
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	701a      	strb	r2, [r3, #0]
      break;
 800a7ac:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	223c      	movs	r2, #60	@ 0x3c
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	5499      	strb	r1, [r3, r2]

  return status;
 800a7b6:	2317      	movs	r3, #23
 800a7b8:	18fb      	adds	r3, r7, r3
 800a7ba:	781b      	ldrb	r3, [r3, #0]
}
 800a7bc:	0018      	movs	r0, r3
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b006      	add	sp, #24
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	0800de98 	.word	0x0800de98

0800a7c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7d4:	2317      	movs	r3, #23
 800a7d6:	18fb      	adds	r3, r7, r3
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	223c      	movs	r2, #60	@ 0x3c
 800a7e0:	5c9b      	ldrb	r3, [r3, r2]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d101      	bne.n	800a7ea <HAL_TIM_IC_ConfigChannel+0x22>
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	e08c      	b.n	800a904 <HAL_TIM_IC_ConfigChannel+0x13c>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	223c      	movs	r2, #60	@ 0x3c
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d11b      	bne.n	800a830 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a808:	f000 ff02 	bl	800b610 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	210c      	movs	r1, #12
 800a818:	438a      	bics	r2, r1
 800a81a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6999      	ldr	r1, [r3, #24]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	430a      	orrs	r2, r1
 800a82c:	619a      	str	r2, [r3, #24]
 800a82e:	e062      	b.n	800a8f6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b04      	cmp	r3, #4
 800a834:	d11c      	bne.n	800a870 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a846:	f000 ff67 	bl	800b718 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	699a      	ldr	r2, [r3, #24]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	492d      	ldr	r1, [pc, #180]	@ (800a90c <HAL_TIM_IC_ConfigChannel+0x144>)
 800a856:	400a      	ands	r2, r1
 800a858:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6999      	ldr	r1, [r3, #24]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	021a      	lsls	r2, r3, #8
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	619a      	str	r2, [r3, #24]
 800a86e:	e042      	b.n	800a8f6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b08      	cmp	r3, #8
 800a874:	d11b      	bne.n	800a8ae <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a886:	f000 ffbb 	bl	800b800 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	69da      	ldr	r2, [r3, #28]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	210c      	movs	r1, #12
 800a896:	438a      	bics	r2, r1
 800a898:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69d9      	ldr	r1, [r3, #28]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	61da      	str	r2, [r3, #28]
 800a8ac:	e023      	b.n	800a8f6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b0c      	cmp	r3, #12
 800a8b2:	d11c      	bne.n	800a8ee <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a8c4:	f000 ffdc 	bl	800b880 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69da      	ldr	r2, [r3, #28]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	490e      	ldr	r1, [pc, #56]	@ (800a90c <HAL_TIM_IC_ConfigChannel+0x144>)
 800a8d4:	400a      	ands	r2, r1
 800a8d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	69d9      	ldr	r1, [r3, #28]
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	021a      	lsls	r2, r3, #8
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	61da      	str	r2, [r3, #28]
 800a8ec:	e003      	b.n	800a8f6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a8ee:	2317      	movs	r3, #23
 800a8f0:	18fb      	adds	r3, r7, r3
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	223c      	movs	r2, #60	@ 0x3c
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	5499      	strb	r1, [r3, r2]

  return status;
 800a8fe:	2317      	movs	r3, #23
 800a900:	18fb      	adds	r3, r7, r3
 800a902:	781b      	ldrb	r3, [r3, #0]
}
 800a904:	0018      	movs	r0, r3
 800a906:	46bd      	mov	sp, r7
 800a908:	b006      	add	sp, #24
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	fffff3ff 	.word	0xfffff3ff

0800a910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a91c:	2317      	movs	r3, #23
 800a91e:	18fb      	adds	r3, r7, r3
 800a920:	2200      	movs	r2, #0
 800a922:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	223c      	movs	r2, #60	@ 0x3c
 800a928:	5c9b      	ldrb	r3, [r3, r2]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d101      	bne.n	800a932 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a92e:	2302      	movs	r3, #2
 800a930:	e0e5      	b.n	800aafe <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	223c      	movs	r2, #60	@ 0x3c
 800a936:	2101      	movs	r1, #1
 800a938:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b14      	cmp	r3, #20
 800a93e:	d900      	bls.n	800a942 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a940:	e0d1      	b.n	800aae6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	009a      	lsls	r2, r3, #2
 800a946:	4b70      	ldr	r3, [pc, #448]	@ (800ab08 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a948:	18d3      	adds	r3, r2, r3
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	0011      	movs	r1, r2
 800a956:	0018      	movs	r0, r3
 800a958:	f000 fbbe 	bl	800b0d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2108      	movs	r1, #8
 800a968:	430a      	orrs	r2, r1
 800a96a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699a      	ldr	r2, [r3, #24]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2104      	movs	r1, #4
 800a978:	438a      	bics	r2, r1
 800a97a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6999      	ldr	r1, [r3, #24]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	691a      	ldr	r2, [r3, #16]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	619a      	str	r2, [r3, #24]
      break;
 800a98e:	e0af      	b.n	800aaf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	0011      	movs	r1, r2
 800a998:	0018      	movs	r0, r3
 800a99a:	f000 fc1d 	bl	800b1d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	699a      	ldr	r2, [r3, #24]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2180      	movs	r1, #128	@ 0x80
 800a9aa:	0109      	lsls	r1, r1, #4
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	699a      	ldr	r2, [r3, #24]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4954      	ldr	r1, [pc, #336]	@ (800ab0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a9bc:	400a      	ands	r2, r1
 800a9be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6999      	ldr	r1, [r3, #24]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	021a      	lsls	r2, r3, #8
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	619a      	str	r2, [r3, #24]
      break;
 800a9d4:	e08c      	b.n	800aaf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	0011      	movs	r1, r2
 800a9de:	0018      	movs	r0, r3
 800a9e0:	f000 fc78 	bl	800b2d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	69da      	ldr	r2, [r3, #28]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2108      	movs	r1, #8
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	69da      	ldr	r2, [r3, #28]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2104      	movs	r1, #4
 800aa00:	438a      	bics	r2, r1
 800aa02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69d9      	ldr	r1, [r3, #28]
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	691a      	ldr	r2, [r3, #16]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	61da      	str	r2, [r3, #28]
      break;
 800aa16:	e06b      	b.n	800aaf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	0011      	movs	r1, r2
 800aa20:	0018      	movs	r0, r3
 800aa22:	f000 fcd9 	bl	800b3d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69da      	ldr	r2, [r3, #28]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2180      	movs	r1, #128	@ 0x80
 800aa32:	0109      	lsls	r1, r1, #4
 800aa34:	430a      	orrs	r2, r1
 800aa36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	69da      	ldr	r2, [r3, #28]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4932      	ldr	r1, [pc, #200]	@ (800ab0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aa44:	400a      	ands	r2, r1
 800aa46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	69d9      	ldr	r1, [r3, #28]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	021a      	lsls	r2, r3, #8
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	61da      	str	r2, [r3, #28]
      break;
 800aa5c:	e048      	b.n	800aaf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	0011      	movs	r1, r2
 800aa66:	0018      	movs	r0, r3
 800aa68:	f000 fd1a 	bl	800b4a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2108      	movs	r1, #8
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2104      	movs	r1, #4
 800aa88:	438a      	bics	r2, r1
 800aa8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	691a      	ldr	r2, [r3, #16]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aa9e:	e027      	b.n	800aaf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	0011      	movs	r1, r2
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	f000 fd53 	bl	800b554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2180      	movs	r1, #128	@ 0x80
 800aaba:	0109      	lsls	r1, r1, #4
 800aabc:	430a      	orrs	r2, r1
 800aabe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4910      	ldr	r1, [pc, #64]	@ (800ab0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aacc:	400a      	ands	r2, r1
 800aace:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	021a      	lsls	r2, r3, #8
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aae4:	e004      	b.n	800aaf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800aae6:	2317      	movs	r3, #23
 800aae8:	18fb      	adds	r3, r7, r3
 800aaea:	2201      	movs	r2, #1
 800aaec:	701a      	strb	r2, [r3, #0]
      break;
 800aaee:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	223c      	movs	r2, #60	@ 0x3c
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	5499      	strb	r1, [r3, r2]

  return status;
 800aaf8:	2317      	movs	r3, #23
 800aafa:	18fb      	adds	r3, r7, r3
 800aafc:	781b      	ldrb	r3, [r3, #0]
}
 800aafe:	0018      	movs	r0, r3
 800ab00:	46bd      	mov	sp, r7
 800ab02:	b006      	add	sp, #24
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	46c0      	nop			@ (mov r8, r8)
 800ab08:	0800deec 	.word	0x0800deec
 800ab0c:	fffffbff 	.word	0xfffffbff

0800ab10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab1a:	230f      	movs	r3, #15
 800ab1c:	18fb      	adds	r3, r7, r3
 800ab1e:	2200      	movs	r2, #0
 800ab20:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	223c      	movs	r2, #60	@ 0x3c
 800ab26:	5c9b      	ldrb	r3, [r3, r2]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d101      	bne.n	800ab30 <HAL_TIM_ConfigClockSource+0x20>
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e0bc      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x19a>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	223c      	movs	r2, #60	@ 0x3c
 800ab34:	2101      	movs	r1, #1
 800ab36:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	223d      	movs	r2, #61	@ 0x3d
 800ab3c:	2102      	movs	r1, #2
 800ab3e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	4a5a      	ldr	r2, [pc, #360]	@ (800acb4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4a59      	ldr	r2, [pc, #356]	@ (800acb8 <HAL_TIM_ConfigClockSource+0x1a8>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2280      	movs	r2, #128	@ 0x80
 800ab66:	0192      	lsls	r2, r2, #6
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d040      	beq.n	800abee <HAL_TIM_ConfigClockSource+0xde>
 800ab6c:	2280      	movs	r2, #128	@ 0x80
 800ab6e:	0192      	lsls	r2, r2, #6
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d900      	bls.n	800ab76 <HAL_TIM_ConfigClockSource+0x66>
 800ab74:	e088      	b.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
 800ab76:	2280      	movs	r2, #128	@ 0x80
 800ab78:	0152      	lsls	r2, r2, #5
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d100      	bne.n	800ab80 <HAL_TIM_ConfigClockSource+0x70>
 800ab7e:	e088      	b.n	800ac92 <HAL_TIM_ConfigClockSource+0x182>
 800ab80:	2280      	movs	r2, #128	@ 0x80
 800ab82:	0152      	lsls	r2, r2, #5
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d900      	bls.n	800ab8a <HAL_TIM_ConfigClockSource+0x7a>
 800ab88:	e07e      	b.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
 800ab8a:	2b70      	cmp	r3, #112	@ 0x70
 800ab8c:	d018      	beq.n	800abc0 <HAL_TIM_ConfigClockSource+0xb0>
 800ab8e:	d900      	bls.n	800ab92 <HAL_TIM_ConfigClockSource+0x82>
 800ab90:	e07a      	b.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
 800ab92:	2b60      	cmp	r3, #96	@ 0x60
 800ab94:	d04f      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x126>
 800ab96:	d900      	bls.n	800ab9a <HAL_TIM_ConfigClockSource+0x8a>
 800ab98:	e076      	b.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
 800ab9a:	2b50      	cmp	r3, #80	@ 0x50
 800ab9c:	d03b      	beq.n	800ac16 <HAL_TIM_ConfigClockSource+0x106>
 800ab9e:	d900      	bls.n	800aba2 <HAL_TIM_ConfigClockSource+0x92>
 800aba0:	e072      	b.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
 800aba2:	2b40      	cmp	r3, #64	@ 0x40
 800aba4:	d057      	beq.n	800ac56 <HAL_TIM_ConfigClockSource+0x146>
 800aba6:	d900      	bls.n	800abaa <HAL_TIM_ConfigClockSource+0x9a>
 800aba8:	e06e      	b.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
 800abaa:	2b30      	cmp	r3, #48	@ 0x30
 800abac:	d063      	beq.n	800ac76 <HAL_TIM_ConfigClockSource+0x166>
 800abae:	d86b      	bhi.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
 800abb0:	2b20      	cmp	r3, #32
 800abb2:	d060      	beq.n	800ac76 <HAL_TIM_ConfigClockSource+0x166>
 800abb4:	d868      	bhi.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d05d      	beq.n	800ac76 <HAL_TIM_ConfigClockSource+0x166>
 800abba:	2b10      	cmp	r3, #16
 800abbc:	d05b      	beq.n	800ac76 <HAL_TIM_ConfigClockSource+0x166>
 800abbe:	e063      	b.n	800ac88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abd0:	f000 feb8 	bl	800b944 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2277      	movs	r2, #119	@ 0x77
 800abe0:	4313      	orrs	r3, r2
 800abe2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	609a      	str	r2, [r3, #8]
      break;
 800abec:	e052      	b.n	800ac94 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abfe:	f000 fea1 	bl	800b944 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2180      	movs	r1, #128	@ 0x80
 800ac0e:	01c9      	lsls	r1, r1, #7
 800ac10:	430a      	orrs	r2, r1
 800ac12:	609a      	str	r2, [r3, #8]
      break;
 800ac14:	e03e      	b.n	800ac94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac22:	001a      	movs	r2, r3
 800ac24:	f000 fd4a 	bl	800b6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2150      	movs	r1, #80	@ 0x50
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f000 fe6c 	bl	800b90c <TIM_ITRx_SetConfig>
      break;
 800ac34:	e02e      	b.n	800ac94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac42:	001a      	movs	r2, r3
 800ac44:	f000 fdaa 	bl	800b79c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2160      	movs	r1, #96	@ 0x60
 800ac4e:	0018      	movs	r0, r3
 800ac50:	f000 fe5c 	bl	800b90c <TIM_ITRx_SetConfig>
      break;
 800ac54:	e01e      	b.n	800ac94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac62:	001a      	movs	r2, r3
 800ac64:	f000 fd2a 	bl	800b6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2140      	movs	r1, #64	@ 0x40
 800ac6e:	0018      	movs	r0, r3
 800ac70:	f000 fe4c 	bl	800b90c <TIM_ITRx_SetConfig>
      break;
 800ac74:	e00e      	b.n	800ac94 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	0019      	movs	r1, r3
 800ac80:	0010      	movs	r0, r2
 800ac82:	f000 fe43 	bl	800b90c <TIM_ITRx_SetConfig>
      break;
 800ac86:	e005      	b.n	800ac94 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800ac88:	230f      	movs	r3, #15
 800ac8a:	18fb      	adds	r3, r7, r3
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	701a      	strb	r2, [r3, #0]
      break;
 800ac90:	e000      	b.n	800ac94 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800ac92:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	223d      	movs	r2, #61	@ 0x3d
 800ac98:	2101      	movs	r1, #1
 800ac9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	223c      	movs	r2, #60	@ 0x3c
 800aca0:	2100      	movs	r1, #0
 800aca2:	5499      	strb	r1, [r3, r2]

  return status;
 800aca4:	230f      	movs	r3, #15
 800aca6:	18fb      	adds	r3, r7, r3
 800aca8:	781b      	ldrb	r3, [r3, #0]
}
 800acaa:	0018      	movs	r0, r3
 800acac:	46bd      	mov	sp, r7
 800acae:	b004      	add	sp, #16
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	46c0      	nop			@ (mov r8, r8)
 800acb4:	ffceff88 	.word	0xffceff88
 800acb8:	ffff00ff 	.word	0xffff00ff

0800acbc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b0c      	cmp	r3, #12
 800acce:	d01e      	beq.n	800ad0e <HAL_TIM_ReadCapturedValue+0x52>
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	2b0c      	cmp	r3, #12
 800acd4:	d820      	bhi.n	800ad18 <HAL_TIM_ReadCapturedValue+0x5c>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b08      	cmp	r3, #8
 800acda:	d013      	beq.n	800ad04 <HAL_TIM_ReadCapturedValue+0x48>
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2b08      	cmp	r3, #8
 800ace0:	d81a      	bhi.n	800ad18 <HAL_TIM_ReadCapturedValue+0x5c>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d003      	beq.n	800acf0 <HAL_TIM_ReadCapturedValue+0x34>
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b04      	cmp	r3, #4
 800acec:	d005      	beq.n	800acfa <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800acee:	e013      	b.n	800ad18 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf6:	60fb      	str	r3, [r7, #12]
      break;
 800acf8:	e00f      	b.n	800ad1a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad00:	60fb      	str	r3, [r7, #12]
      break;
 800ad02:	e00a      	b.n	800ad1a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad0a:	60fb      	str	r3, [r7, #12]
      break;
 800ad0c:	e005      	b.n	800ad1a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad14:	60fb      	str	r3, [r7, #12]
      break;
 800ad16:	e000      	b.n	800ad1a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800ad18:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
}
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	b004      	add	sp, #16
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ad2c:	46c0      	nop			@ (mov r8, r8)
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b002      	add	sp, #8
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ad3c:	46c0      	nop			@ (mov r8, r8)
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	b002      	add	sp, #8
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad4c:	46c0      	nop			@ (mov r8, r8)
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	b002      	add	sp, #8
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad5c:	46c0      	nop			@ (mov r8, r8)
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	b002      	add	sp, #8
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ad6c:	46c0      	nop			@ (mov r8, r8)
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	b002      	add	sp, #8
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad7c:	46c0      	nop			@ (mov r8, r8)
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	b002      	add	sp, #8
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ad8c:	46c0      	nop			@ (mov r8, r8)
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	b002      	add	sp, #8
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad9c:	46c0      	nop			@ (mov r8, r8)
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b002      	add	sp, #8
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800adac:	46c0      	nop			@ (mov r8, r8)
 800adae:	46bd      	mov	sp, r7
 800adb0:	b002      	add	sp, #8
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800adbc:	46c0      	nop			@ (mov r8, r8)
 800adbe:	46bd      	mov	sp, r7
 800adc0:	b002      	add	sp, #8
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	607a      	str	r2, [r7, #4]
 800adce:	230b      	movs	r3, #11
 800add0:	18fb      	adds	r3, r7, r3
 800add2:	1c0a      	adds	r2, r1, #0
 800add4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800add6:	2317      	movs	r3, #23
 800add8:	18fb      	adds	r3, r7, r3
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e0ea      	b.n	800afbe <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	223d      	movs	r2, #61	@ 0x3d
 800adec:	5c9b      	ldrb	r3, [r3, r2]
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d000      	beq.n	800adf6 <HAL_TIM_RegisterCallback+0x32>
 800adf4:	e08e      	b.n	800af14 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800adf6:	230b      	movs	r3, #11
 800adf8:	18fb      	adds	r3, r7, r3
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b1b      	cmp	r3, #27
 800adfe:	d900      	bls.n	800ae02 <HAL_TIM_RegisterCallback+0x3e>
 800ae00:	e083      	b.n	800af0a <HAL_TIM_RegisterCallback+0x146>
 800ae02:	009a      	lsls	r2, r3, #2
 800ae04:	4b70      	ldr	r3, [pc, #448]	@ (800afc8 <HAL_TIM_RegisterCallback+0x204>)
 800ae06:	18d3      	adds	r3, r2, r3
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ae12:	e0d1      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ae1a:	e0cd      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ae22:	e0c9      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ae2a:	e0c5      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ae32:	e0c1      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ae3a:	e0bd      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ae42:	e0b9      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ae4a:	e0b5      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ae52:	e0b1      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ae5a:	e0ad      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ae62:	e0a9      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ae6a:	e0a5      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ae72:	e0a1      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2180      	movs	r1, #128	@ 0x80
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	505a      	str	r2, [r3, r1]
        break;
 800ae7c:	e09c      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2184      	movs	r1, #132	@ 0x84
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	505a      	str	r2, [r3, r1]
        break;
 800ae86:	e097      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2188      	movs	r1, #136	@ 0x88
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	505a      	str	r2, [r3, r1]
        break;
 800ae90:	e092      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	218c      	movs	r1, #140	@ 0x8c
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	505a      	str	r2, [r3, r1]
        break;
 800ae9a:	e08d      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2190      	movs	r1, #144	@ 0x90
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	505a      	str	r2, [r3, r1]
        break;
 800aea4:	e088      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2194      	movs	r1, #148	@ 0x94
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	505a      	str	r2, [r3, r1]
        break;
 800aeae:	e083      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2198      	movs	r1, #152	@ 0x98
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	505a      	str	r2, [r3, r1]
        break;
 800aeb8:	e07e      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	219c      	movs	r1, #156	@ 0x9c
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	505a      	str	r2, [r3, r1]
        break;
 800aec2:	e079      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	21a0      	movs	r1, #160	@ 0xa0
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	505a      	str	r2, [r3, r1]
        break;
 800aecc:	e074      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	21a4      	movs	r1, #164	@ 0xa4
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	505a      	str	r2, [r3, r1]
        break;
 800aed6:	e06f      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	21a8      	movs	r1, #168	@ 0xa8
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	505a      	str	r2, [r3, r1]
        break;
 800aee0:	e06a      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	21ac      	movs	r1, #172	@ 0xac
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	505a      	str	r2, [r3, r1]
        break;
 800aeea:	e065      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	21b0      	movs	r1, #176	@ 0xb0
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	505a      	str	r2, [r3, r1]
        break;
 800aef4:	e060      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	21b4      	movs	r1, #180	@ 0xb4
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	505a      	str	r2, [r3, r1]
        break;
 800aefe:	e05b      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	21b8      	movs	r1, #184	@ 0xb8
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	505a      	str	r2, [r3, r1]
        break;
 800af08:	e056      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800af0a:	2317      	movs	r3, #23
 800af0c:	18fb      	adds	r3, r7, r3
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
        break;
 800af12:	e051      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	223d      	movs	r2, #61	@ 0x3d
 800af18:	5c9b      	ldrb	r3, [r3, r2]
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d147      	bne.n	800afb0 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800af20:	230b      	movs	r3, #11
 800af22:	18fb      	adds	r3, r7, r3
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	2b0d      	cmp	r3, #13
 800af28:	d83d      	bhi.n	800afa6 <HAL_TIM_RegisterCallback+0x1e2>
 800af2a:	009a      	lsls	r2, r3, #2
 800af2c:	4b27      	ldr	r3, [pc, #156]	@ (800afcc <HAL_TIM_RegisterCallback+0x208>)
 800af2e:	18d3      	adds	r3, r2, r3
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800af3a:	e03d      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800af42:	e039      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800af4a:	e035      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800af52:	e031      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800af5a:	e02d      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800af62:	e029      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800af6a:	e025      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800af72:	e021      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800af7a:	e01d      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800af82:	e019      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800af8a:	e015      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800af92:	e011      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800af9a:	e00d      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2180      	movs	r1, #128	@ 0x80
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	505a      	str	r2, [r3, r1]
        break;
 800afa4:	e008      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800afa6:	2317      	movs	r3, #23
 800afa8:	18fb      	adds	r3, r7, r3
 800afaa:	2201      	movs	r2, #1
 800afac:	701a      	strb	r2, [r3, #0]
        break;
 800afae:	e003      	b.n	800afb8 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800afb0:	2317      	movs	r3, #23
 800afb2:	18fb      	adds	r3, r7, r3
 800afb4:	2201      	movs	r2, #1
 800afb6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800afb8:	2317      	movs	r3, #23
 800afba:	18fb      	adds	r3, r7, r3
 800afbc:	781b      	ldrb	r3, [r3, #0]
}
 800afbe:	0018      	movs	r0, r3
 800afc0:	46bd      	mov	sp, r7
 800afc2:	b006      	add	sp, #24
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	46c0      	nop			@ (mov r8, r8)
 800afc8:	0800df40 	.word	0x0800df40
 800afcc:	0800dfb0 	.word	0x0800dfb0

0800afd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a37      	ldr	r2, [pc, #220]	@ (800b0c0 <TIM_Base_SetConfig+0xf0>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d008      	beq.n	800affa <TIM_Base_SetConfig+0x2a>
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	2380      	movs	r3, #128	@ 0x80
 800afec:	05db      	lsls	r3, r3, #23
 800afee:	429a      	cmp	r2, r3
 800aff0:	d003      	beq.n	800affa <TIM_Base_SetConfig+0x2a>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a33      	ldr	r2, [pc, #204]	@ (800b0c4 <TIM_Base_SetConfig+0xf4>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d108      	bne.n	800b00c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2270      	movs	r2, #112	@ 0x70
 800affe:	4393      	bics	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a2c      	ldr	r2, [pc, #176]	@ (800b0c0 <TIM_Base_SetConfig+0xf0>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d014      	beq.n	800b03e <TIM_Base_SetConfig+0x6e>
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	2380      	movs	r3, #128	@ 0x80
 800b018:	05db      	lsls	r3, r3, #23
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d00f      	beq.n	800b03e <TIM_Base_SetConfig+0x6e>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a28      	ldr	r2, [pc, #160]	@ (800b0c4 <TIM_Base_SetConfig+0xf4>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d00b      	beq.n	800b03e <TIM_Base_SetConfig+0x6e>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a27      	ldr	r2, [pc, #156]	@ (800b0c8 <TIM_Base_SetConfig+0xf8>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d007      	beq.n	800b03e <TIM_Base_SetConfig+0x6e>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a26      	ldr	r2, [pc, #152]	@ (800b0cc <TIM_Base_SetConfig+0xfc>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d003      	beq.n	800b03e <TIM_Base_SetConfig+0x6e>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a25      	ldr	r2, [pc, #148]	@ (800b0d0 <TIM_Base_SetConfig+0x100>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d108      	bne.n	800b050 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4a24      	ldr	r2, [pc, #144]	@ (800b0d4 <TIM_Base_SetConfig+0x104>)
 800b042:	4013      	ands	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2280      	movs	r2, #128	@ 0x80
 800b054:	4393      	bics	r3, r2
 800b056:	001a      	movs	r2, r3
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a11      	ldr	r2, [pc, #68]	@ (800b0c0 <TIM_Base_SetConfig+0xf0>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d007      	beq.n	800b08e <TIM_Base_SetConfig+0xbe>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a12      	ldr	r2, [pc, #72]	@ (800b0cc <TIM_Base_SetConfig+0xfc>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d003      	beq.n	800b08e <TIM_Base_SetConfig+0xbe>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a11      	ldr	r2, [pc, #68]	@ (800b0d0 <TIM_Base_SetConfig+0x100>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d103      	bne.n	800b096 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d106      	bne.n	800b0b6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	4393      	bics	r3, r2
 800b0b0:	001a      	movs	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	611a      	str	r2, [r3, #16]
  }
}
 800b0b6:	46c0      	nop			@ (mov r8, r8)
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	b004      	add	sp, #16
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	46c0      	nop			@ (mov r8, r8)
 800b0c0:	40012c00 	.word	0x40012c00
 800b0c4:	40000400 	.word	0x40000400
 800b0c8:	40002000 	.word	0x40002000
 800b0cc:	40014400 	.word	0x40014400
 800b0d0:	40014800 	.word	0x40014800
 800b0d4:	fffffcff 	.word	0xfffffcff

0800b0d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a1b      	ldr	r3, [r3, #32]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	4393      	bics	r3, r2
 800b0f0:	001a      	movs	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	4a2e      	ldr	r2, [pc, #184]	@ (800b1c0 <TIM_OC1_SetConfig+0xe8>)
 800b106:	4013      	ands	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2203      	movs	r2, #3
 800b10e:	4393      	bics	r3, r2
 800b110:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	4313      	orrs	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	2202      	movs	r2, #2
 800b120:	4393      	bics	r3, r2
 800b122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a24      	ldr	r2, [pc, #144]	@ (800b1c4 <TIM_OC1_SetConfig+0xec>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d007      	beq.n	800b146 <TIM_OC1_SetConfig+0x6e>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a23      	ldr	r2, [pc, #140]	@ (800b1c8 <TIM_OC1_SetConfig+0xf0>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d003      	beq.n	800b146 <TIM_OC1_SetConfig+0x6e>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a22      	ldr	r2, [pc, #136]	@ (800b1cc <TIM_OC1_SetConfig+0xf4>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d10c      	bne.n	800b160 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2208      	movs	r2, #8
 800b14a:	4393      	bics	r3, r2
 800b14c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	4313      	orrs	r3, r2
 800b156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2204      	movs	r2, #4
 800b15c:	4393      	bics	r3, r2
 800b15e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a18      	ldr	r2, [pc, #96]	@ (800b1c4 <TIM_OC1_SetConfig+0xec>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d007      	beq.n	800b178 <TIM_OC1_SetConfig+0xa0>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a17      	ldr	r2, [pc, #92]	@ (800b1c8 <TIM_OC1_SetConfig+0xf0>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d003      	beq.n	800b178 <TIM_OC1_SetConfig+0xa0>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a16      	ldr	r2, [pc, #88]	@ (800b1cc <TIM_OC1_SetConfig+0xf4>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d111      	bne.n	800b19c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	4a15      	ldr	r2, [pc, #84]	@ (800b1d0 <TIM_OC1_SetConfig+0xf8>)
 800b17c:	4013      	ands	r3, r2
 800b17e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	4a14      	ldr	r2, [pc, #80]	@ (800b1d4 <TIM_OC1_SetConfig+0xfc>)
 800b184:	4013      	ands	r3, r2
 800b186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4313      	orrs	r3, r2
 800b190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	4313      	orrs	r3, r2
 800b19a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	621a      	str	r2, [r3, #32]
}
 800b1b6:	46c0      	nop			@ (mov r8, r8)
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	b006      	add	sp, #24
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	46c0      	nop			@ (mov r8, r8)
 800b1c0:	fffeff8f 	.word	0xfffeff8f
 800b1c4:	40012c00 	.word	0x40012c00
 800b1c8:	40014400 	.word	0x40014400
 800b1cc:	40014800 	.word	0x40014800
 800b1d0:	fffffeff 	.word	0xfffffeff
 800b1d4:	fffffdff 	.word	0xfffffdff

0800b1d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	2210      	movs	r2, #16
 800b1ee:	4393      	bics	r3, r2
 800b1f0:	001a      	movs	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	4a2c      	ldr	r2, [pc, #176]	@ (800b2b8 <TIM_OC2_SetConfig+0xe0>)
 800b206:	4013      	ands	r3, r2
 800b208:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	4a2b      	ldr	r2, [pc, #172]	@ (800b2bc <TIM_OC2_SetConfig+0xe4>)
 800b20e:	4013      	ands	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	021b      	lsls	r3, r3, #8
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2220      	movs	r2, #32
 800b222:	4393      	bics	r3, r2
 800b224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	011b      	lsls	r3, r3, #4
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	4313      	orrs	r3, r2
 800b230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a22      	ldr	r2, [pc, #136]	@ (800b2c0 <TIM_OC2_SetConfig+0xe8>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d10d      	bne.n	800b256 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2280      	movs	r2, #128	@ 0x80
 800b23e:	4393      	bics	r3, r2
 800b240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	011b      	lsls	r3, r3, #4
 800b248:	697a      	ldr	r2, [r7, #20]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2240      	movs	r2, #64	@ 0x40
 800b252:	4393      	bics	r3, r2
 800b254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a19      	ldr	r2, [pc, #100]	@ (800b2c0 <TIM_OC2_SetConfig+0xe8>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d007      	beq.n	800b26e <TIM_OC2_SetConfig+0x96>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a18      	ldr	r2, [pc, #96]	@ (800b2c4 <TIM_OC2_SetConfig+0xec>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d003      	beq.n	800b26e <TIM_OC2_SetConfig+0x96>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a17      	ldr	r2, [pc, #92]	@ (800b2c8 <TIM_OC2_SetConfig+0xf0>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d113      	bne.n	800b296 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	4a16      	ldr	r2, [pc, #88]	@ (800b2cc <TIM_OC2_SetConfig+0xf4>)
 800b272:	4013      	ands	r3, r2
 800b274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	4a15      	ldr	r2, [pc, #84]	@ (800b2d0 <TIM_OC2_SetConfig+0xf8>)
 800b27a:	4013      	ands	r3, r2
 800b27c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	695b      	ldr	r3, [r3, #20]
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	4313      	orrs	r3, r2
 800b288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	4313      	orrs	r3, r2
 800b294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	621a      	str	r2, [r3, #32]
}
 800b2b0:	46c0      	nop			@ (mov r8, r8)
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	b006      	add	sp, #24
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	feff8fff 	.word	0xfeff8fff
 800b2bc:	fffffcff 	.word	0xfffffcff
 800b2c0:	40012c00 	.word	0x40012c00
 800b2c4:	40014400 	.word	0x40014400
 800b2c8:	40014800 	.word	0x40014800
 800b2cc:	fffffbff 	.word	0xfffffbff
 800b2d0:	fffff7ff 	.word	0xfffff7ff

0800b2d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	4a31      	ldr	r2, [pc, #196]	@ (800b3b0 <TIM_OC3_SetConfig+0xdc>)
 800b2ea:	401a      	ands	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4a2d      	ldr	r2, [pc, #180]	@ (800b3b4 <TIM_OC3_SetConfig+0xe0>)
 800b300:	4013      	ands	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2203      	movs	r2, #3
 800b308:	4393      	bics	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	4313      	orrs	r3, r2
 800b314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	4a27      	ldr	r2, [pc, #156]	@ (800b3b8 <TIM_OC3_SetConfig+0xe4>)
 800b31a:	4013      	ands	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	021b      	lsls	r3, r3, #8
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	4313      	orrs	r3, r2
 800b328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a23      	ldr	r2, [pc, #140]	@ (800b3bc <TIM_OC3_SetConfig+0xe8>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d10d      	bne.n	800b34e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	4a22      	ldr	r2, [pc, #136]	@ (800b3c0 <TIM_OC3_SetConfig+0xec>)
 800b336:	4013      	ands	r3, r2
 800b338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	021b      	lsls	r3, r3, #8
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	4313      	orrs	r3, r2
 800b344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	4a1e      	ldr	r2, [pc, #120]	@ (800b3c4 <TIM_OC3_SetConfig+0xf0>)
 800b34a:	4013      	ands	r3, r2
 800b34c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a1a      	ldr	r2, [pc, #104]	@ (800b3bc <TIM_OC3_SetConfig+0xe8>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d007      	beq.n	800b366 <TIM_OC3_SetConfig+0x92>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a1b      	ldr	r2, [pc, #108]	@ (800b3c8 <TIM_OC3_SetConfig+0xf4>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d003      	beq.n	800b366 <TIM_OC3_SetConfig+0x92>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a1a      	ldr	r2, [pc, #104]	@ (800b3cc <TIM_OC3_SetConfig+0xf8>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d113      	bne.n	800b38e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	4a19      	ldr	r2, [pc, #100]	@ (800b3d0 <TIM_OC3_SetConfig+0xfc>)
 800b36a:	4013      	ands	r3, r2
 800b36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4a18      	ldr	r2, [pc, #96]	@ (800b3d4 <TIM_OC3_SetConfig+0x100>)
 800b372:	4013      	ands	r3, r2
 800b374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	4313      	orrs	r3, r2
 800b380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	693a      	ldr	r2, [r7, #16]
 800b392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	621a      	str	r2, [r3, #32]
}
 800b3a8:	46c0      	nop			@ (mov r8, r8)
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	b006      	add	sp, #24
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	fffffeff 	.word	0xfffffeff
 800b3b4:	fffeff8f 	.word	0xfffeff8f
 800b3b8:	fffffdff 	.word	0xfffffdff
 800b3bc:	40012c00 	.word	0x40012c00
 800b3c0:	fffff7ff 	.word	0xfffff7ff
 800b3c4:	fffffbff 	.word	0xfffffbff
 800b3c8:	40014400 	.word	0x40014400
 800b3cc:	40014800 	.word	0x40014800
 800b3d0:	ffffefff 	.word	0xffffefff
 800b3d4:	ffffdfff 	.word	0xffffdfff

0800b3d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a1b      	ldr	r3, [r3, #32]
 800b3ec:	4a24      	ldr	r2, [pc, #144]	@ (800b480 <TIM_OC4_SetConfig+0xa8>)
 800b3ee:	401a      	ands	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4a20      	ldr	r2, [pc, #128]	@ (800b484 <TIM_OC4_SetConfig+0xac>)
 800b404:	4013      	ands	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4a1f      	ldr	r2, [pc, #124]	@ (800b488 <TIM_OC4_SetConfig+0xb0>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	021b      	lsls	r3, r3, #8
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4313      	orrs	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	4a1b      	ldr	r2, [pc, #108]	@ (800b48c <TIM_OC4_SetConfig+0xb4>)
 800b420:	4013      	ands	r3, r2
 800b422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	031b      	lsls	r3, r3, #12
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a17      	ldr	r2, [pc, #92]	@ (800b490 <TIM_OC4_SetConfig+0xb8>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d007      	beq.n	800b448 <TIM_OC4_SetConfig+0x70>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a16      	ldr	r2, [pc, #88]	@ (800b494 <TIM_OC4_SetConfig+0xbc>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d003      	beq.n	800b448 <TIM_OC4_SetConfig+0x70>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a15      	ldr	r2, [pc, #84]	@ (800b498 <TIM_OC4_SetConfig+0xc0>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d109      	bne.n	800b45c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	4a14      	ldr	r2, [pc, #80]	@ (800b49c <TIM_OC4_SetConfig+0xc4>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	695b      	ldr	r3, [r3, #20]
 800b454:	019b      	lsls	r3, r3, #6
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	4313      	orrs	r3, r2
 800b45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	621a      	str	r2, [r3, #32]
}
 800b476:	46c0      	nop			@ (mov r8, r8)
 800b478:	46bd      	mov	sp, r7
 800b47a:	b006      	add	sp, #24
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	46c0      	nop			@ (mov r8, r8)
 800b480:	ffffefff 	.word	0xffffefff
 800b484:	feff8fff 	.word	0xfeff8fff
 800b488:	fffffcff 	.word	0xfffffcff
 800b48c:	ffffdfff 	.word	0xffffdfff
 800b490:	40012c00 	.word	0x40012c00
 800b494:	40014400 	.word	0x40014400
 800b498:	40014800 	.word	0x40014800
 800b49c:	ffffbfff 	.word	0xffffbfff

0800b4a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	4a21      	ldr	r2, [pc, #132]	@ (800b53c <TIM_OC5_SetConfig+0x9c>)
 800b4b6:	401a      	ands	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	4a1d      	ldr	r2, [pc, #116]	@ (800b540 <TIM_OC5_SetConfig+0xa0>)
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	4a19      	ldr	r2, [pc, #100]	@ (800b544 <TIM_OC5_SetConfig+0xa4>)
 800b4de:	4013      	ands	r3, r2
 800b4e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	041b      	lsls	r3, r3, #16
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a15      	ldr	r2, [pc, #84]	@ (800b548 <TIM_OC5_SetConfig+0xa8>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d007      	beq.n	800b506 <TIM_OC5_SetConfig+0x66>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a14      	ldr	r2, [pc, #80]	@ (800b54c <TIM_OC5_SetConfig+0xac>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d003      	beq.n	800b506 <TIM_OC5_SetConfig+0x66>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a13      	ldr	r2, [pc, #76]	@ (800b550 <TIM_OC5_SetConfig+0xb0>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d109      	bne.n	800b51a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	4a0c      	ldr	r2, [pc, #48]	@ (800b53c <TIM_OC5_SetConfig+0x9c>)
 800b50a:	4013      	ands	r3, r2
 800b50c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	621a      	str	r2, [r3, #32]
}
 800b534:	46c0      	nop			@ (mov r8, r8)
 800b536:	46bd      	mov	sp, r7
 800b538:	b006      	add	sp, #24
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	fffeffff 	.word	0xfffeffff
 800b540:	fffeff8f 	.word	0xfffeff8f
 800b544:	fffdffff 	.word	0xfffdffff
 800b548:	40012c00 	.word	0x40012c00
 800b54c:	40014400 	.word	0x40014400
 800b550:	40014800 	.word	0x40014800

0800b554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	4a22      	ldr	r2, [pc, #136]	@ (800b5f4 <TIM_OC6_SetConfig+0xa0>)
 800b56a:	401a      	ands	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	4a1e      	ldr	r2, [pc, #120]	@ (800b5f8 <TIM_OC6_SetConfig+0xa4>)
 800b580:	4013      	ands	r3, r2
 800b582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	021b      	lsls	r3, r3, #8
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	4a1a      	ldr	r2, [pc, #104]	@ (800b5fc <TIM_OC6_SetConfig+0xa8>)
 800b594:	4013      	ands	r3, r2
 800b596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	051b      	lsls	r3, r3, #20
 800b59e:	693a      	ldr	r2, [r7, #16]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a16      	ldr	r2, [pc, #88]	@ (800b600 <TIM_OC6_SetConfig+0xac>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d007      	beq.n	800b5bc <TIM_OC6_SetConfig+0x68>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a15      	ldr	r2, [pc, #84]	@ (800b604 <TIM_OC6_SetConfig+0xb0>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d003      	beq.n	800b5bc <TIM_OC6_SetConfig+0x68>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a14      	ldr	r2, [pc, #80]	@ (800b608 <TIM_OC6_SetConfig+0xb4>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d109      	bne.n	800b5d0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	4a13      	ldr	r2, [pc, #76]	@ (800b60c <TIM_OC6_SetConfig+0xb8>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	029b      	lsls	r3, r3, #10
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	697a      	ldr	r2, [r7, #20]
 800b5d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	621a      	str	r2, [r3, #32]
}
 800b5ea:	46c0      	nop			@ (mov r8, r8)
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	b006      	add	sp, #24
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	46c0      	nop			@ (mov r8, r8)
 800b5f4:	ffefffff 	.word	0xffefffff
 800b5f8:	feff8fff 	.word	0xfeff8fff
 800b5fc:	ffdfffff 	.word	0xffdfffff
 800b600:	40012c00 	.word	0x40012c00
 800b604:	40014400 	.word	0x40014400
 800b608:	40014800 	.word	0x40014800
 800b60c:	fffbffff 	.word	0xfffbffff

0800b610 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6a1b      	ldr	r3, [r3, #32]
 800b622:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	2201      	movs	r2, #1
 800b62a:	4393      	bics	r3, r2
 800b62c:	001a      	movs	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	4a1e      	ldr	r2, [pc, #120]	@ (800b6b4 <TIM_TI1_SetConfig+0xa4>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d008      	beq.n	800b652 <TIM_TI1_SetConfig+0x42>
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	2380      	movs	r3, #128	@ 0x80
 800b644:	05db      	lsls	r3, r3, #23
 800b646:	429a      	cmp	r2, r3
 800b648:	d003      	beq.n	800b652 <TIM_TI1_SetConfig+0x42>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	4a1a      	ldr	r2, [pc, #104]	@ (800b6b8 <TIM_TI1_SetConfig+0xa8>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d101      	bne.n	800b656 <TIM_TI1_SetConfig+0x46>
 800b652:	2301      	movs	r3, #1
 800b654:	e000      	b.n	800b658 <TIM_TI1_SetConfig+0x48>
 800b656:	2300      	movs	r3, #0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	2203      	movs	r2, #3
 800b660:	4393      	bics	r3, r2
 800b662:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4313      	orrs	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e003      	b.n	800b676 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2201      	movs	r2, #1
 800b672:	4313      	orrs	r3, r2
 800b674:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	22f0      	movs	r2, #240	@ 0xf0
 800b67a:	4393      	bics	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	22ff      	movs	r2, #255	@ 0xff
 800b684:	4013      	ands	r3, r2
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	4313      	orrs	r3, r2
 800b68a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	220a      	movs	r2, #10
 800b690:	4393      	bics	r3, r2
 800b692:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	220a      	movs	r2, #10
 800b698:	4013      	ands	r3, r2
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	621a      	str	r2, [r3, #32]
}
 800b6ac:	46c0      	nop			@ (mov r8, r8)
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	b006      	add	sp, #24
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	40012c00 	.word	0x40012c00
 800b6b8:	40000400 	.word	0x40000400

0800b6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	4393      	bics	r3, r2
 800b6d6:	001a      	movs	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	22f0      	movs	r2, #240	@ 0xf0
 800b6e6:	4393      	bics	r3, r2
 800b6e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	011b      	lsls	r3, r3, #4
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	220a      	movs	r2, #10
 800b6f8:	4393      	bics	r3, r2
 800b6fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	4313      	orrs	r3, r2
 800b702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	693a      	ldr	r2, [r7, #16]
 800b708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	621a      	str	r2, [r3, #32]
}
 800b710:	46c0      	nop			@ (mov r8, r8)
 800b712:	46bd      	mov	sp, r7
 800b714:	b006      	add	sp, #24
 800b716:	bd80      	pop	{r7, pc}

0800b718 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
 800b724:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a1b      	ldr	r3, [r3, #32]
 800b730:	2210      	movs	r2, #16
 800b732:	4393      	bics	r3, r2
 800b734:	001a      	movs	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	4a14      	ldr	r2, [pc, #80]	@ (800b794 <TIM_TI2_SetConfig+0x7c>)
 800b744:	4013      	ands	r3, r2
 800b746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	021b      	lsls	r3, r3, #8
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	4313      	orrs	r3, r2
 800b750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	4a10      	ldr	r2, [pc, #64]	@ (800b798 <TIM_TI2_SetConfig+0x80>)
 800b756:	4013      	ands	r3, r2
 800b758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	031b      	lsls	r3, r3, #12
 800b75e:	041b      	lsls	r3, r3, #16
 800b760:	0c1b      	lsrs	r3, r3, #16
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	4313      	orrs	r3, r2
 800b766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	22a0      	movs	r2, #160	@ 0xa0
 800b76c:	4393      	bics	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	011b      	lsls	r3, r3, #4
 800b774:	22a0      	movs	r2, #160	@ 0xa0
 800b776:	4013      	ands	r3, r2
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	621a      	str	r2, [r3, #32]
}
 800b78a:	46c0      	nop			@ (mov r8, r8)
 800b78c:	46bd      	mov	sp, r7
 800b78e:	b006      	add	sp, #24
 800b790:	bd80      	pop	{r7, pc}
 800b792:	46c0      	nop			@ (mov r8, r8)
 800b794:	fffffcff 	.word	0xfffffcff
 800b798:	ffff0fff 	.word	0xffff0fff

0800b79c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6a1b      	ldr	r3, [r3, #32]
 800b7ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	2210      	movs	r2, #16
 800b7b4:	4393      	bics	r3, r2
 800b7b6:	001a      	movs	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	4a0d      	ldr	r2, [pc, #52]	@ (800b7fc <TIM_TI2_ConfigInputStage+0x60>)
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	031b      	lsls	r3, r3, #12
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	22a0      	movs	r2, #160	@ 0xa0
 800b7d8:	4393      	bics	r3, r2
 800b7da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	621a      	str	r2, [r3, #32]
}
 800b7f2:	46c0      	nop			@ (mov r8, r8)
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	b006      	add	sp, #24
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	46c0      	nop			@ (mov r8, r8)
 800b7fc:	ffff0fff 	.word	0xffff0fff

0800b800 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6a1b      	ldr	r3, [r3, #32]
 800b818:	4a17      	ldr	r2, [pc, #92]	@ (800b878 <TIM_TI3_SetConfig+0x78>)
 800b81a:	401a      	ands	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	69db      	ldr	r3, [r3, #28]
 800b824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2203      	movs	r2, #3
 800b82a:	4393      	bics	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4313      	orrs	r3, r2
 800b834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	22f0      	movs	r2, #240	@ 0xf0
 800b83a:	4393      	bics	r3, r2
 800b83c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	011b      	lsls	r3, r3, #4
 800b842:	22ff      	movs	r2, #255	@ 0xff
 800b844:	4013      	ands	r3, r2
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	4a0b      	ldr	r2, [pc, #44]	@ (800b87c <TIM_TI3_SetConfig+0x7c>)
 800b850:	4013      	ands	r3, r2
 800b852:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	021a      	lsls	r2, r3, #8
 800b858:	23a0      	movs	r3, #160	@ 0xa0
 800b85a:	011b      	lsls	r3, r3, #4
 800b85c:	4013      	ands	r3, r2
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	4313      	orrs	r3, r2
 800b862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	621a      	str	r2, [r3, #32]
}
 800b870:	46c0      	nop			@ (mov r8, r8)
 800b872:	46bd      	mov	sp, r7
 800b874:	b006      	add	sp, #24
 800b876:	bd80      	pop	{r7, pc}
 800b878:	fffffeff 	.word	0xfffffeff
 800b87c:	fffff5ff 	.word	0xfffff5ff

0800b880 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	4a18      	ldr	r2, [pc, #96]	@ (800b8fc <TIM_TI4_SetConfig+0x7c>)
 800b89a:	401a      	ands	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	69db      	ldr	r3, [r3, #28]
 800b8a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	4a15      	ldr	r2, [pc, #84]	@ (800b900 <TIM_TI4_SetConfig+0x80>)
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	021b      	lsls	r3, r3, #8
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	4a12      	ldr	r2, [pc, #72]	@ (800b904 <TIM_TI4_SetConfig+0x84>)
 800b8bc:	4013      	ands	r3, r2
 800b8be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	031b      	lsls	r3, r3, #12
 800b8c4:	041b      	lsls	r3, r3, #16
 800b8c6:	0c1b      	lsrs	r3, r3, #16
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b908 <TIM_TI4_SetConfig+0x88>)
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	031a      	lsls	r2, r3, #12
 800b8da:	23a0      	movs	r3, #160	@ 0xa0
 800b8dc:	021b      	lsls	r3, r3, #8
 800b8de:	4013      	ands	r3, r2
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	621a      	str	r2, [r3, #32]
}
 800b8f2:	46c0      	nop			@ (mov r8, r8)
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	b006      	add	sp, #24
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	46c0      	nop			@ (mov r8, r8)
 800b8fc:	ffffefff 	.word	0xffffefff
 800b900:	fffffcff 	.word	0xfffffcff
 800b904:	ffff0fff 	.word	0xffff0fff
 800b908:	ffff5fff 	.word	0xffff5fff

0800b90c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4a08      	ldr	r2, [pc, #32]	@ (800b940 <TIM_ITRx_SetConfig+0x34>)
 800b920:	4013      	ands	r3, r2
 800b922:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	4313      	orrs	r3, r2
 800b92a:	2207      	movs	r2, #7
 800b92c:	4313      	orrs	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	609a      	str	r2, [r3, #8]
}
 800b936:	46c0      	nop			@ (mov r8, r8)
 800b938:	46bd      	mov	sp, r7
 800b93a:	b004      	add	sp, #16
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	46c0      	nop			@ (mov r8, r8)
 800b940:	ffcfff8f 	.word	0xffcfff8f

0800b944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
 800b950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	4a09      	ldr	r2, [pc, #36]	@ (800b980 <TIM_ETR_SetConfig+0x3c>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	021a      	lsls	r2, r3, #8
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	431a      	orrs	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	4313      	orrs	r3, r2
 800b970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	609a      	str	r2, [r3, #8]
}
 800b978:	46c0      	nop			@ (mov r8, r8)
 800b97a:	46bd      	mov	sp, r7
 800b97c:	b006      	add	sp, #24
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	ffff00ff 	.word	0xffff00ff

0800b984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	221f      	movs	r2, #31
 800b994:	4013      	ands	r3, r2
 800b996:	2201      	movs	r2, #1
 800b998:	409a      	lsls	r2, r3
 800b99a:	0013      	movs	r3, r2
 800b99c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	43d2      	mvns	r2, r2
 800b9a6:	401a      	ands	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6a1a      	ldr	r2, [r3, #32]
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	211f      	movs	r1, #31
 800b9b4:	400b      	ands	r3, r1
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	4099      	lsls	r1, r3
 800b9ba:	000b      	movs	r3, r1
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	621a      	str	r2, [r3, #32]
}
 800b9c2:	46c0      	nop			@ (mov r8, r8)
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	b006      	add	sp, #24
 800b9c8:	bd80      	pop	{r7, pc}
	...

0800b9cc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2184      	movs	r1, #132	@ 0x84
 800b9d8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba4c <TIM_ResetCallback+0x80>)
 800b9da:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2188      	movs	r1, #136	@ 0x88
 800b9e0:	4a1b      	ldr	r2, [pc, #108]	@ (800ba50 <TIM_ResetCallback+0x84>)
 800b9e2:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	218c      	movs	r1, #140	@ 0x8c
 800b9e8:	4a1a      	ldr	r2, [pc, #104]	@ (800ba54 <TIM_ResetCallback+0x88>)
 800b9ea:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2190      	movs	r1, #144	@ 0x90
 800b9f0:	4a19      	ldr	r2, [pc, #100]	@ (800ba58 <TIM_ResetCallback+0x8c>)
 800b9f2:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2194      	movs	r1, #148	@ 0x94
 800b9f8:	4a18      	ldr	r2, [pc, #96]	@ (800ba5c <TIM_ResetCallback+0x90>)
 800b9fa:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2198      	movs	r1, #152	@ 0x98
 800ba00:	4a17      	ldr	r2, [pc, #92]	@ (800ba60 <TIM_ResetCallback+0x94>)
 800ba02:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	219c      	movs	r1, #156	@ 0x9c
 800ba08:	4a16      	ldr	r2, [pc, #88]	@ (800ba64 <TIM_ResetCallback+0x98>)
 800ba0a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	21a0      	movs	r1, #160	@ 0xa0
 800ba10:	4a15      	ldr	r2, [pc, #84]	@ (800ba68 <TIM_ResetCallback+0x9c>)
 800ba12:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	21a4      	movs	r1, #164	@ 0xa4
 800ba18:	4a14      	ldr	r2, [pc, #80]	@ (800ba6c <TIM_ResetCallback+0xa0>)
 800ba1a:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	21a8      	movs	r1, #168	@ 0xa8
 800ba20:	4a13      	ldr	r2, [pc, #76]	@ (800ba70 <TIM_ResetCallback+0xa4>)
 800ba22:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	21ac      	movs	r1, #172	@ 0xac
 800ba28:	4a12      	ldr	r2, [pc, #72]	@ (800ba74 <TIM_ResetCallback+0xa8>)
 800ba2a:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	21b0      	movs	r1, #176	@ 0xb0
 800ba30:	4a11      	ldr	r2, [pc, #68]	@ (800ba78 <TIM_ResetCallback+0xac>)
 800ba32:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	21b4      	movs	r1, #180	@ 0xb4
 800ba38:	4a10      	ldr	r2, [pc, #64]	@ (800ba7c <TIM_ResetCallback+0xb0>)
 800ba3a:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	21b8      	movs	r1, #184	@ 0xb8
 800ba40:	4a0f      	ldr	r2, [pc, #60]	@ (800ba80 <TIM_ResetCallback+0xb4>)
 800ba42:	505a      	str	r2, [r3, r1]
}
 800ba44:	46c0      	nop			@ (mov r8, r8)
 800ba46:	46bd      	mov	sp, r7
 800ba48:	b002      	add	sp, #8
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	0800ad25 	.word	0x0800ad25
 800ba50:	0800ad35 	.word	0x0800ad35
 800ba54:	0800ad95 	.word	0x0800ad95
 800ba58:	0800ada5 	.word	0x0800ada5
 800ba5c:	0800ad55 	.word	0x0800ad55
 800ba60:	0800ad65 	.word	0x0800ad65
 800ba64:	0800ad45 	.word	0x0800ad45
 800ba68:	0800ad75 	.word	0x0800ad75
 800ba6c:	0800ad85 	.word	0x0800ad85
 800ba70:	0800adb5 	.word	0x0800adb5
 800ba74:	0800bc8d 	.word	0x0800bc8d
 800ba78:	0800bc9d 	.word	0x0800bc9d
 800ba7c:	0800bcad 	.word	0x0800bcad
 800ba80:	0800bcbd 	.word	0x0800bcbd

0800ba84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	223c      	movs	r2, #60	@ 0x3c
 800ba92:	5c9b      	ldrb	r3, [r3, r2]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d101      	bne.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	e050      	b.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	223c      	movs	r2, #60	@ 0x3c
 800baa0:	2101      	movs	r1, #1
 800baa2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	223d      	movs	r2, #61	@ 0x3d
 800baa8:	2102      	movs	r1, #2
 800baaa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a21      	ldr	r2, [pc, #132]	@ (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d108      	bne.n	800bad8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4a20      	ldr	r2, [pc, #128]	@ (800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800baca:	4013      	ands	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2270      	movs	r2, #112	@ 0x70
 800badc:	4393      	bics	r3, r2
 800bade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a14      	ldr	r2, [pc, #80]	@ (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d00a      	beq.n	800bb12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	2380      	movs	r3, #128	@ 0x80
 800bb02:	05db      	lsls	r3, r3, #23
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d004      	beq.n	800bb12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a10      	ldr	r2, [pc, #64]	@ (800bb50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d10c      	bne.n	800bb2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2280      	movs	r2, #128	@ 0x80
 800bb16:	4393      	bics	r3, r2
 800bb18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	223d      	movs	r2, #61	@ 0x3d
 800bb30:	2101      	movs	r1, #1
 800bb32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	223c      	movs	r2, #60	@ 0x3c
 800bb38:	2100      	movs	r1, #0
 800bb3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	0018      	movs	r0, r3
 800bb40:	46bd      	mov	sp, r7
 800bb42:	b004      	add	sp, #16
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	46c0      	nop			@ (mov r8, r8)
 800bb48:	40012c00 	.word	0x40012c00
 800bb4c:	ff0fffff 	.word	0xff0fffff
 800bb50:	40000400 	.word	0x40000400

0800bb54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	223c      	movs	r2, #60	@ 0x3c
 800bb66:	5c9b      	ldrb	r3, [r3, r2]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d101      	bne.n	800bb70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	e06f      	b.n	800bc50 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	223c      	movs	r2, #60	@ 0x3c
 800bb74:	2101      	movs	r1, #1
 800bb76:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	22ff      	movs	r2, #255	@ 0xff
 800bb7c:	4393      	bics	r3, r2
 800bb7e:	001a      	movs	r2, r3
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4a33      	ldr	r2, [pc, #204]	@ (800bc58 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800bb8c:	401a      	ands	r2, r3
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4a30      	ldr	r2, [pc, #192]	@ (800bc5c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800bb9a:	401a      	ands	r2, r3
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4a2e      	ldr	r2, [pc, #184]	@ (800bc60 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800bba8:	401a      	ands	r2, r3
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4a2b      	ldr	r2, [pc, #172]	@ (800bc64 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800bbb6:	401a      	ands	r2, r3
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4a29      	ldr	r2, [pc, #164]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800bbc4:	401a      	ands	r2, r3
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4a26      	ldr	r2, [pc, #152]	@ (800bc6c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800bbd2:	401a      	ands	r2, r3
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4a24      	ldr	r2, [pc, #144]	@ (800bc70 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bbe0:	401a      	ands	r2, r3
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	041b      	lsls	r3, r3, #16
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4a21      	ldr	r2, [pc, #132]	@ (800bc74 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bbf0:	401a      	ands	r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	69db      	ldr	r3, [r3, #28]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a1e      	ldr	r2, [pc, #120]	@ (800bc78 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d11c      	bne.n	800bc3e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	4a1d      	ldr	r2, [pc, #116]	@ (800bc7c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800bc08:	401a      	ands	r2, r3
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc0e:	051b      	lsls	r3, r3, #20
 800bc10:	4313      	orrs	r3, r2
 800bc12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	4a1a      	ldr	r2, [pc, #104]	@ (800bc80 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800bc18:	401a      	ands	r2, r3
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4a17      	ldr	r2, [pc, #92]	@ (800bc84 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800bc26:	401a      	ands	r2, r3
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4a15      	ldr	r2, [pc, #84]	@ (800bc88 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800bc34:	401a      	ands	r2, r3
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	223c      	movs	r2, #60	@ 0x3c
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	0018      	movs	r0, r3
 800bc52:	46bd      	mov	sp, r7
 800bc54:	b004      	add	sp, #16
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	fffffcff 	.word	0xfffffcff
 800bc5c:	fffffbff 	.word	0xfffffbff
 800bc60:	fffff7ff 	.word	0xfffff7ff
 800bc64:	ffffefff 	.word	0xffffefff
 800bc68:	ffffdfff 	.word	0xffffdfff
 800bc6c:	ffffbfff 	.word	0xffffbfff
 800bc70:	fff0ffff 	.word	0xfff0ffff
 800bc74:	efffffff 	.word	0xefffffff
 800bc78:	40012c00 	.word	0x40012c00
 800bc7c:	ff0fffff 	.word	0xff0fffff
 800bc80:	feffffff 	.word	0xfeffffff
 800bc84:	fdffffff 	.word	0xfdffffff
 800bc88:	dfffffff 	.word	0xdfffffff

0800bc8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc94:	46c0      	nop			@ (mov r8, r8)
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b002      	add	sp, #8
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bca4:	46c0      	nop			@ (mov r8, r8)
 800bca6:	46bd      	mov	sp, r7
 800bca8:	b002      	add	sp, #8
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcb4:	46c0      	nop			@ (mov r8, r8)
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	b002      	add	sp, #8
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcc4:	46c0      	nop			@ (mov r8, r8)
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	b002      	add	sp, #8
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e055      	b.n	800bd8a <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2288      	movs	r2, #136	@ 0x88
 800bce2:	589b      	ldr	r3, [r3, r2]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d116      	bne.n	800bd16 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2284      	movs	r2, #132	@ 0x84
 800bcec:	2100      	movs	r1, #0
 800bcee:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f000 fce0 	bl	800c6b8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	22c4      	movs	r2, #196	@ 0xc4
 800bcfc:	589b      	ldr	r3, [r3, r2]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d103      	bne.n	800bd0a <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	21c4      	movs	r1, #196	@ 0xc4
 800bd06:	4a23      	ldr	r2, [pc, #140]	@ (800bd94 <HAL_UART_Init+0xc8>)
 800bd08:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	22c4      	movs	r2, #196	@ 0xc4
 800bd0e:	589b      	ldr	r3, [r3, r2]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	0010      	movs	r0, r2
 800bd14:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2288      	movs	r2, #136	@ 0x88
 800bd1a:	2124      	movs	r1, #36	@ 0x24
 800bd1c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2101      	movs	r1, #1
 800bd2a:	438a      	bics	r2, r1
 800bd2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	0018      	movs	r0, r3
 800bd3a:	f000 ff85 	bl	800cc48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	0018      	movs	r0, r3
 800bd42:	f000 fd09 	bl	800c758 <UART_SetConfig>
 800bd46:	0003      	movs	r3, r0
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d101      	bne.n	800bd50 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e01c      	b.n	800bd8a <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	490f      	ldr	r1, [pc, #60]	@ (800bd98 <HAL_UART_Init+0xcc>)
 800bd5c:	400a      	ands	r2, r1
 800bd5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	212a      	movs	r1, #42	@ 0x2a
 800bd6c:	438a      	bics	r2, r1
 800bd6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	430a      	orrs	r2, r1
 800bd7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	0018      	movs	r0, r3
 800bd84:	f001 f814 	bl	800cdb0 <UART_CheckIdleState>
 800bd88:	0003      	movs	r3, r0
}
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	b002      	add	sp, #8
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	46c0      	nop			@ (mov r8, r8)
 800bd94:	080054e9 	.word	0x080054e9
 800bd98:	ffffb7ff 	.word	0xffffb7ff

0800bd9c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	230b      	movs	r3, #11
 800bda8:	18fb      	adds	r3, r7, r3
 800bdaa:	1c0a      	adds	r2, r1, #0
 800bdac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdae:	2317      	movs	r3, #23
 800bdb0:	18fb      	adds	r3, r7, r3
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d109      	bne.n	800bdd0 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2290      	movs	r2, #144	@ 0x90
 800bdc0:	589b      	ldr	r3, [r3, r2]
 800bdc2:	2240      	movs	r2, #64	@ 0x40
 800bdc4:	431a      	orrs	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2190      	movs	r1, #144	@ 0x90
 800bdca:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e08f      	b.n	800bef0 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2288      	movs	r2, #136	@ 0x88
 800bdd4:	589b      	ldr	r3, [r3, r2]
 800bdd6:	2b20      	cmp	r3, #32
 800bdd8:	d157      	bne.n	800be8a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800bdda:	230b      	movs	r3, #11
 800bddc:	18fb      	adds	r3, r7, r3
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b0c      	cmp	r3, #12
 800bde2:	d845      	bhi.n	800be70 <HAL_UART_RegisterCallback+0xd4>
 800bde4:	009a      	lsls	r2, r3, #2
 800bde6:	4b44      	ldr	r3, [pc, #272]	@ (800bef8 <HAL_UART_RegisterCallback+0x15c>)
 800bde8:	18d3      	adds	r3, r2, r3
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2194      	movs	r1, #148	@ 0x94
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	505a      	str	r2, [r3, r1]
        break;
 800bdf6:	e078      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2198      	movs	r1, #152	@ 0x98
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	505a      	str	r2, [r3, r1]
        break;
 800be00:	e073      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	219c      	movs	r1, #156	@ 0x9c
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	505a      	str	r2, [r3, r1]
        break;
 800be0a:	e06e      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	21a0      	movs	r1, #160	@ 0xa0
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	505a      	str	r2, [r3, r1]
        break;
 800be14:	e069      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	21a4      	movs	r1, #164	@ 0xa4
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	505a      	str	r2, [r3, r1]
        break;
 800be1e:	e064      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	21a8      	movs	r1, #168	@ 0xa8
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	505a      	str	r2, [r3, r1]
        break;
 800be28:	e05f      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	21ac      	movs	r1, #172	@ 0xac
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	505a      	str	r2, [r3, r1]
        break;
 800be32:	e05a      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	21b0      	movs	r1, #176	@ 0xb0
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	505a      	str	r2, [r3, r1]
        break;
 800be3c:	e055      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	21b4      	movs	r1, #180	@ 0xb4
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	505a      	str	r2, [r3, r1]
        break;
 800be46:	e050      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	21b8      	movs	r1, #184	@ 0xb8
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	505a      	str	r2, [r3, r1]
        break;
 800be50:	e04b      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	21bc      	movs	r1, #188	@ 0xbc
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	505a      	str	r2, [r3, r1]
        break;
 800be5a:	e046      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	21c4      	movs	r1, #196	@ 0xc4
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	505a      	str	r2, [r3, r1]
        break;
 800be64:	e041      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	21c8      	movs	r1, #200	@ 0xc8
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	505a      	str	r2, [r3, r1]
        break;
 800be6e:	e03c      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2290      	movs	r2, #144	@ 0x90
 800be74:	589b      	ldr	r3, [r3, r2]
 800be76:	2240      	movs	r2, #64	@ 0x40
 800be78:	431a      	orrs	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2190      	movs	r1, #144	@ 0x90
 800be7e:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800be80:	2317      	movs	r3, #23
 800be82:	18fb      	adds	r3, r7, r3
 800be84:	2201      	movs	r2, #1
 800be86:	701a      	strb	r2, [r3, #0]
        break;
 800be88:	e02f      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2288      	movs	r2, #136	@ 0x88
 800be8e:	589b      	ldr	r3, [r3, r2]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d11e      	bne.n	800bed2 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800be94:	230b      	movs	r3, #11
 800be96:	18fb      	adds	r3, r7, r3
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	2b0b      	cmp	r3, #11
 800be9c:	d002      	beq.n	800bea4 <HAL_UART_RegisterCallback+0x108>
 800be9e:	2b0c      	cmp	r3, #12
 800bea0:	d005      	beq.n	800beae <HAL_UART_RegisterCallback+0x112>
 800bea2:	e009      	b.n	800beb8 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	21c4      	movs	r1, #196	@ 0xc4
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	505a      	str	r2, [r3, r1]
        break;
 800beac:	e01d      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	21c8      	movs	r1, #200	@ 0xc8
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	505a      	str	r2, [r3, r1]
        break;
 800beb6:	e018      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2290      	movs	r2, #144	@ 0x90
 800bebc:	589b      	ldr	r3, [r3, r2]
 800bebe:	2240      	movs	r2, #64	@ 0x40
 800bec0:	431a      	orrs	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2190      	movs	r1, #144	@ 0x90
 800bec6:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800bec8:	2317      	movs	r3, #23
 800beca:	18fb      	adds	r3, r7, r3
 800becc:	2201      	movs	r2, #1
 800bece:	701a      	strb	r2, [r3, #0]
        break;
 800bed0:	e00b      	b.n	800beea <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2290      	movs	r2, #144	@ 0x90
 800bed6:	589b      	ldr	r3, [r3, r2]
 800bed8:	2240      	movs	r2, #64	@ 0x40
 800beda:	431a      	orrs	r2, r3
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2190      	movs	r1, #144	@ 0x90
 800bee0:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800bee2:	2317      	movs	r3, #23
 800bee4:	18fb      	adds	r3, r7, r3
 800bee6:	2201      	movs	r2, #1
 800bee8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800beea:	2317      	movs	r3, #23
 800beec:	18fb      	adds	r3, r7, r3
 800beee:	781b      	ldrb	r3, [r3, #0]
}
 800bef0:	0018      	movs	r0, r3
 800bef2:	46bd      	mov	sp, r7
 800bef4:	b006      	add	sp, #24
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	0800e000 	.word	0x0800e000

0800befc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b088      	sub	sp, #32
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	1dbb      	adds	r3, r7, #6
 800bf08:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	228c      	movs	r2, #140	@ 0x8c
 800bf0e:	589b      	ldr	r3, [r3, r2]
 800bf10:	2b20      	cmp	r3, #32
 800bf12:	d14a      	bne.n	800bfaa <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <HAL_UART_Receive_DMA+0x26>
 800bf1a:	1dbb      	adds	r3, r7, #6
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d101      	bne.n	800bf26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e042      	b.n	800bfac <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	689a      	ldr	r2, [r3, #8]
 800bf2a:	2380      	movs	r3, #128	@ 0x80
 800bf2c:	015b      	lsls	r3, r3, #5
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d109      	bne.n	800bf46 <HAL_UART_Receive_DMA+0x4a>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d105      	bne.n	800bf46 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	4013      	ands	r3, r2
 800bf40:	d001      	beq.n	800bf46 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e032      	b.n	800bfac <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a18      	ldr	r2, [pc, #96]	@ (800bfb4 <HAL_UART_Receive_DMA+0xb8>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d020      	beq.n	800bf98 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	2380      	movs	r3, #128	@ 0x80
 800bf5e:	041b      	lsls	r3, r3, #16
 800bf60:	4013      	ands	r3, r2
 800bf62:	d019      	beq.n	800bf98 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf64:	f3ef 8310 	mrs	r3, PRIMASK
 800bf68:	613b      	str	r3, [r7, #16]
  return(result);
 800bf6a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf6c:	61fb      	str	r3, [r7, #28]
 800bf6e:	2301      	movs	r3, #1
 800bf70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f383 8810 	msr	PRIMASK, r3
}
 800bf78:	46c0      	nop			@ (mov r8, r8)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2180      	movs	r1, #128	@ 0x80
 800bf86:	04c9      	lsls	r1, r1, #19
 800bf88:	430a      	orrs	r2, r1
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	f383 8810 	msr	PRIMASK, r3
}
 800bf96:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bf98:	1dbb      	adds	r3, r7, #6
 800bf9a:	881a      	ldrh	r2, [r3, #0]
 800bf9c:	68b9      	ldr	r1, [r7, #8]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	0018      	movs	r0, r3
 800bfa2:	f001 f81f 	bl	800cfe4 <UART_Start_Receive_DMA>
 800bfa6:	0003      	movs	r3, r0
 800bfa8:	e000      	b.n	800bfac <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800bfaa:	2302      	movs	r3, #2
  }
}
 800bfac:	0018      	movs	r0, r3
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	b008      	add	sp, #32
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	40008000 	.word	0x40008000

0800bfb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfb8:	b5b0      	push	{r4, r5, r7, lr}
 800bfba:	b0aa      	sub	sp, #168	@ 0xa8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	69db      	ldr	r3, [r3, #28]
 800bfc6:	22a4      	movs	r2, #164	@ 0xa4
 800bfc8:	18b9      	adds	r1, r7, r2
 800bfca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	20a0      	movs	r0, #160	@ 0xa0
 800bfd4:	1839      	adds	r1, r7, r0
 800bfd6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	249c      	movs	r4, #156	@ 0x9c
 800bfe0:	1939      	adds	r1, r7, r4
 800bfe2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bfe4:	0011      	movs	r1, r2
 800bfe6:	18bb      	adds	r3, r7, r2
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4aa5      	ldr	r2, [pc, #660]	@ (800c280 <HAL_UART_IRQHandler+0x2c8>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	2298      	movs	r2, #152	@ 0x98
 800bff0:	18bd      	adds	r5, r7, r2
 800bff2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800bff4:	18bb      	adds	r3, r7, r2
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d11a      	bne.n	800c032 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bffc:	187b      	adds	r3, r7, r1
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2220      	movs	r2, #32
 800c002:	4013      	ands	r3, r2
 800c004:	d015      	beq.n	800c032 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c006:	183b      	adds	r3, r7, r0
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2220      	movs	r2, #32
 800c00c:	4013      	ands	r3, r2
 800c00e:	d105      	bne.n	800c01c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c010:	193b      	adds	r3, r7, r4
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	2380      	movs	r3, #128	@ 0x80
 800c016:	055b      	lsls	r3, r3, #21
 800c018:	4013      	ands	r3, r2
 800c01a:	d00a      	beq.n	800c032 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c020:	2b00      	cmp	r3, #0
 800c022:	d100      	bne.n	800c026 <HAL_UART_IRQHandler+0x6e>
 800c024:	e2ea      	b.n	800c5fc <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	0010      	movs	r0, r2
 800c02e:	4798      	blx	r3
      }
      return;
 800c030:	e2e4      	b.n	800c5fc <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c032:	2398      	movs	r3, #152	@ 0x98
 800c034:	18fb      	adds	r3, r7, r3
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d100      	bne.n	800c03e <HAL_UART_IRQHandler+0x86>
 800c03c:	e128      	b.n	800c290 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c03e:	239c      	movs	r3, #156	@ 0x9c
 800c040:	18fb      	adds	r3, r7, r3
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a8f      	ldr	r2, [pc, #572]	@ (800c284 <HAL_UART_IRQHandler+0x2cc>)
 800c046:	4013      	ands	r3, r2
 800c048:	d106      	bne.n	800c058 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c04a:	23a0      	movs	r3, #160	@ 0xa0
 800c04c:	18fb      	adds	r3, r7, r3
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a8d      	ldr	r2, [pc, #564]	@ (800c288 <HAL_UART_IRQHandler+0x2d0>)
 800c052:	4013      	ands	r3, r2
 800c054:	d100      	bne.n	800c058 <HAL_UART_IRQHandler+0xa0>
 800c056:	e11b      	b.n	800c290 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c058:	23a4      	movs	r3, #164	@ 0xa4
 800c05a:	18fb      	adds	r3, r7, r3
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2201      	movs	r2, #1
 800c060:	4013      	ands	r3, r2
 800c062:	d012      	beq.n	800c08a <HAL_UART_IRQHandler+0xd2>
 800c064:	23a0      	movs	r3, #160	@ 0xa0
 800c066:	18fb      	adds	r3, r7, r3
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	2380      	movs	r3, #128	@ 0x80
 800c06c:	005b      	lsls	r3, r3, #1
 800c06e:	4013      	ands	r3, r2
 800c070:	d00b      	beq.n	800c08a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2201      	movs	r2, #1
 800c078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2290      	movs	r2, #144	@ 0x90
 800c07e:	589b      	ldr	r3, [r3, r2]
 800c080:	2201      	movs	r2, #1
 800c082:	431a      	orrs	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2190      	movs	r1, #144	@ 0x90
 800c088:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c08a:	23a4      	movs	r3, #164	@ 0xa4
 800c08c:	18fb      	adds	r3, r7, r3
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2202      	movs	r2, #2
 800c092:	4013      	ands	r3, r2
 800c094:	d011      	beq.n	800c0ba <HAL_UART_IRQHandler+0x102>
 800c096:	239c      	movs	r3, #156	@ 0x9c
 800c098:	18fb      	adds	r3, r7, r3
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2201      	movs	r2, #1
 800c09e:	4013      	ands	r3, r2
 800c0a0:	d00b      	beq.n	800c0ba <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2290      	movs	r2, #144	@ 0x90
 800c0ae:	589b      	ldr	r3, [r3, r2]
 800c0b0:	2204      	movs	r2, #4
 800c0b2:	431a      	orrs	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2190      	movs	r1, #144	@ 0x90
 800c0b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0ba:	23a4      	movs	r3, #164	@ 0xa4
 800c0bc:	18fb      	adds	r3, r7, r3
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2204      	movs	r2, #4
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	d011      	beq.n	800c0ea <HAL_UART_IRQHandler+0x132>
 800c0c6:	239c      	movs	r3, #156	@ 0x9c
 800c0c8:	18fb      	adds	r3, r7, r3
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	d00b      	beq.n	800c0ea <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2204      	movs	r2, #4
 800c0d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2290      	movs	r2, #144	@ 0x90
 800c0de:	589b      	ldr	r3, [r3, r2]
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	431a      	orrs	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2190      	movs	r1, #144	@ 0x90
 800c0e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c0ea:	23a4      	movs	r3, #164	@ 0xa4
 800c0ec:	18fb      	adds	r3, r7, r3
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2208      	movs	r2, #8
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	d017      	beq.n	800c126 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0f6:	23a0      	movs	r3, #160	@ 0xa0
 800c0f8:	18fb      	adds	r3, r7, r3
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	4013      	ands	r3, r2
 800c100:	d105      	bne.n	800c10e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c102:	239c      	movs	r3, #156	@ 0x9c
 800c104:	18fb      	adds	r3, r7, r3
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a5e      	ldr	r2, [pc, #376]	@ (800c284 <HAL_UART_IRQHandler+0x2cc>)
 800c10a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c10c:	d00b      	beq.n	800c126 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2208      	movs	r2, #8
 800c114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2290      	movs	r2, #144	@ 0x90
 800c11a:	589b      	ldr	r3, [r3, r2]
 800c11c:	2208      	movs	r2, #8
 800c11e:	431a      	orrs	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2190      	movs	r1, #144	@ 0x90
 800c124:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c126:	23a4      	movs	r3, #164	@ 0xa4
 800c128:	18fb      	adds	r3, r7, r3
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	2380      	movs	r3, #128	@ 0x80
 800c12e:	011b      	lsls	r3, r3, #4
 800c130:	4013      	ands	r3, r2
 800c132:	d013      	beq.n	800c15c <HAL_UART_IRQHandler+0x1a4>
 800c134:	23a0      	movs	r3, #160	@ 0xa0
 800c136:	18fb      	adds	r3, r7, r3
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	2380      	movs	r3, #128	@ 0x80
 800c13c:	04db      	lsls	r3, r3, #19
 800c13e:	4013      	ands	r3, r2
 800c140:	d00c      	beq.n	800c15c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2280      	movs	r2, #128	@ 0x80
 800c148:	0112      	lsls	r2, r2, #4
 800c14a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2290      	movs	r2, #144	@ 0x90
 800c150:	589b      	ldr	r3, [r3, r2]
 800c152:	2220      	movs	r2, #32
 800c154:	431a      	orrs	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2190      	movs	r1, #144	@ 0x90
 800c15a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2290      	movs	r2, #144	@ 0x90
 800c160:	589b      	ldr	r3, [r3, r2]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d100      	bne.n	800c168 <HAL_UART_IRQHandler+0x1b0>
 800c166:	e24b      	b.n	800c600 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c168:	23a4      	movs	r3, #164	@ 0xa4
 800c16a:	18fb      	adds	r3, r7, r3
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2220      	movs	r2, #32
 800c170:	4013      	ands	r3, r2
 800c172:	d015      	beq.n	800c1a0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c174:	23a0      	movs	r3, #160	@ 0xa0
 800c176:	18fb      	adds	r3, r7, r3
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2220      	movs	r2, #32
 800c17c:	4013      	ands	r3, r2
 800c17e:	d106      	bne.n	800c18e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c180:	239c      	movs	r3, #156	@ 0x9c
 800c182:	18fb      	adds	r3, r7, r3
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	2380      	movs	r3, #128	@ 0x80
 800c188:	055b      	lsls	r3, r3, #21
 800c18a:	4013      	ands	r3, r2
 800c18c:	d008      	beq.n	800c1a0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c192:	2b00      	cmp	r3, #0
 800c194:	d004      	beq.n	800c1a0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	0010      	movs	r0, r2
 800c19e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2290      	movs	r2, #144	@ 0x90
 800c1a4:	589b      	ldr	r3, [r3, r2]
 800c1a6:	2194      	movs	r1, #148	@ 0x94
 800c1a8:	187a      	adds	r2, r7, r1
 800c1aa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	2240      	movs	r2, #64	@ 0x40
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	2b40      	cmp	r3, #64	@ 0x40
 800c1b8:	d004      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1ba:	187b      	adds	r3, r7, r1
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2228      	movs	r2, #40	@ 0x28
 800c1c0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1c2:	d050      	beq.n	800c266 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	0018      	movs	r0, r3
 800c1c8:	f000 fff2 	bl	800d1b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	2240      	movs	r2, #64	@ 0x40
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	2b40      	cmp	r3, #64	@ 0x40
 800c1d8:	d13e      	bne.n	800c258 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1da:	f3ef 8310 	mrs	r3, PRIMASK
 800c1de:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800c1e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1e2:	2090      	movs	r0, #144	@ 0x90
 800c1e4:	183a      	adds	r2, r7, r0
 800c1e6:	6013      	str	r3, [r2, #0]
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1ee:	f383 8810 	msr	PRIMASK, r3
}
 800c1f2:	46c0      	nop			@ (mov r8, r8)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	689a      	ldr	r2, [r3, #8]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2140      	movs	r1, #64	@ 0x40
 800c200:	438a      	bics	r2, r1
 800c202:	609a      	str	r2, [r3, #8]
 800c204:	183b      	adds	r3, r7, r0
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c20a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c20c:	f383 8810 	msr	PRIMASK, r3
}
 800c210:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2280      	movs	r2, #128	@ 0x80
 800c216:	589b      	ldr	r3, [r3, r2]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d016      	beq.n	800c24a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2280      	movs	r2, #128	@ 0x80
 800c220:	589b      	ldr	r3, [r3, r2]
 800c222:	4a1a      	ldr	r2, [pc, #104]	@ (800c28c <HAL_UART_IRQHandler+0x2d4>)
 800c224:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2280      	movs	r2, #128	@ 0x80
 800c22a:	589b      	ldr	r3, [r3, r2]
 800c22c:	0018      	movs	r0, r3
 800c22e:	f7fb fce5 	bl	8007bfc <HAL_DMA_Abort_IT>
 800c232:	1e03      	subs	r3, r0, #0
 800c234:	d022      	beq.n	800c27c <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2280      	movs	r2, #128	@ 0x80
 800c23a:	589b      	ldr	r3, [r3, r2]
 800c23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	2180      	movs	r1, #128	@ 0x80
 800c242:	5852      	ldr	r2, [r2, r1]
 800c244:	0010      	movs	r0, r2
 800c246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c248:	e018      	b.n	800c27c <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	22a4      	movs	r2, #164	@ 0xa4
 800c24e:	589b      	ldr	r3, [r3, r2]
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	0010      	movs	r0, r2
 800c254:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c256:	e011      	b.n	800c27c <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	22a4      	movs	r2, #164	@ 0xa4
 800c25c:	589b      	ldr	r3, [r3, r2]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	0010      	movs	r0, r2
 800c262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c264:	e00a      	b.n	800c27c <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	22a4      	movs	r2, #164	@ 0xa4
 800c26a:	589b      	ldr	r3, [r3, r2]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	0010      	movs	r0, r2
 800c270:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2290      	movs	r2, #144	@ 0x90
 800c276:	2100      	movs	r1, #0
 800c278:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c27a:	e1c1      	b.n	800c600 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c27c:	46c0      	nop			@ (mov r8, r8)
    return;
 800c27e:	e1bf      	b.n	800c600 <HAL_UART_IRQHandler+0x648>
 800c280:	0000080f 	.word	0x0000080f
 800c284:	10000001 	.word	0x10000001
 800c288:	04000120 	.word	0x04000120
 800c28c:	0800d483 	.word	0x0800d483

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c294:	2b01      	cmp	r3, #1
 800c296:	d000      	beq.n	800c29a <HAL_UART_IRQHandler+0x2e2>
 800c298:	e140      	b.n	800c51c <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c29a:	23a4      	movs	r3, #164	@ 0xa4
 800c29c:	18fb      	adds	r3, r7, r3
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2210      	movs	r2, #16
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	d100      	bne.n	800c2a8 <HAL_UART_IRQHandler+0x2f0>
 800c2a6:	e139      	b.n	800c51c <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c2a8:	23a0      	movs	r3, #160	@ 0xa0
 800c2aa:	18fb      	adds	r3, r7, r3
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2210      	movs	r2, #16
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	d100      	bne.n	800c2b6 <HAL_UART_IRQHandler+0x2fe>
 800c2b4:	e132      	b.n	800c51c <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2210      	movs	r2, #16
 800c2bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	2240      	movs	r2, #64	@ 0x40
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	2b40      	cmp	r3, #64	@ 0x40
 800c2ca:	d000      	beq.n	800c2ce <HAL_UART_IRQHandler+0x316>
 800c2cc:	e0a5      	b.n	800c41a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2280      	movs	r2, #128	@ 0x80
 800c2d2:	589b      	ldr	r3, [r3, r2]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	217e      	movs	r1, #126	@ 0x7e
 800c2da:	187b      	adds	r3, r7, r1
 800c2dc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c2de:	187b      	adds	r3, r7, r1
 800c2e0:	881b      	ldrh	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d100      	bne.n	800c2e8 <HAL_UART_IRQHandler+0x330>
 800c2e6:	e18d      	b.n	800c604 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	225c      	movs	r2, #92	@ 0x5c
 800c2ec:	5a9b      	ldrh	r3, [r3, r2]
 800c2ee:	187a      	adds	r2, r7, r1
 800c2f0:	8812      	ldrh	r2, [r2, #0]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d300      	bcc.n	800c2f8 <HAL_UART_IRQHandler+0x340>
 800c2f6:	e185      	b.n	800c604 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	187a      	adds	r2, r7, r1
 800c2fc:	215e      	movs	r1, #94	@ 0x5e
 800c2fe:	8812      	ldrh	r2, [r2, #0]
 800c300:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2280      	movs	r2, #128	@ 0x80
 800c306:	589b      	ldr	r3, [r3, r2]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2220      	movs	r2, #32
 800c30e:	4013      	ands	r3, r2
 800c310:	d170      	bne.n	800c3f4 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c312:	f3ef 8310 	mrs	r3, PRIMASK
 800c316:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c31a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c31c:	2301      	movs	r3, #1
 800c31e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c322:	f383 8810 	msr	PRIMASK, r3
}
 800c326:	46c0      	nop			@ (mov r8, r8)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	49b8      	ldr	r1, [pc, #736]	@ (800c614 <HAL_UART_IRQHandler+0x65c>)
 800c334:	400a      	ands	r2, r1
 800c336:	601a      	str	r2, [r3, #0]
 800c338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c33a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33e:	f383 8810 	msr	PRIMASK, r3
}
 800c342:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c344:	f3ef 8310 	mrs	r3, PRIMASK
 800c348:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800c34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c34c:	677b      	str	r3, [r7, #116]	@ 0x74
 800c34e:	2301      	movs	r3, #1
 800c350:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c354:	f383 8810 	msr	PRIMASK, r3
}
 800c358:	46c0      	nop			@ (mov r8, r8)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	689a      	ldr	r2, [r3, #8]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2101      	movs	r1, #1
 800c366:	438a      	bics	r2, r1
 800c368:	609a      	str	r2, [r3, #8]
 800c36a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c36c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c36e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c370:	f383 8810 	msr	PRIMASK, r3
}
 800c374:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c376:	f3ef 8310 	mrs	r3, PRIMASK
 800c37a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c37c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c37e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c380:	2301      	movs	r3, #1
 800c382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c386:	f383 8810 	msr	PRIMASK, r3
}
 800c38a:	46c0      	nop			@ (mov r8, r8)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	689a      	ldr	r2, [r3, #8]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2140      	movs	r1, #64	@ 0x40
 800c398:	438a      	bics	r2, r1
 800c39a:	609a      	str	r2, [r3, #8]
 800c39c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c39e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3a2:	f383 8810 	msr	PRIMASK, r3
}
 800c3a6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	228c      	movs	r2, #140	@ 0x8c
 800c3ac:	2120      	movs	r1, #32
 800c3ae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3b6:	f3ef 8310 	mrs	r3, PRIMASK
 800c3ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c3bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3c6:	f383 8810 	msr	PRIMASK, r3
}
 800c3ca:	46c0      	nop			@ (mov r8, r8)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2110      	movs	r1, #16
 800c3d8:	438a      	bics	r2, r1
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3e2:	f383 8810 	msr	PRIMASK, r3
}
 800c3e6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2280      	movs	r2, #128	@ 0x80
 800c3ec:	589b      	ldr	r3, [r3, r2]
 800c3ee:	0018      	movs	r0, r3
 800c3f0:	f7fb fba2 	bl	8007b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	22c0      	movs	r2, #192	@ 0xc0
 800c3fe:	589b      	ldr	r3, [r3, r2]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	215c      	movs	r1, #92	@ 0x5c
 800c404:	5a51      	ldrh	r1, [r2, r1]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	205e      	movs	r0, #94	@ 0x5e
 800c40a:	5a12      	ldrh	r2, [r2, r0]
 800c40c:	b292      	uxth	r2, r2
 800c40e:	1a8a      	subs	r2, r1, r2
 800c410:	b291      	uxth	r1, r2
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	0010      	movs	r0, r2
 800c416:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c418:	e0f4      	b.n	800c604 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	225c      	movs	r2, #92	@ 0x5c
 800c41e:	5a99      	ldrh	r1, [r3, r2]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	225e      	movs	r2, #94	@ 0x5e
 800c424:	5a9b      	ldrh	r3, [r3, r2]
 800c426:	b29a      	uxth	r2, r3
 800c428:	208e      	movs	r0, #142	@ 0x8e
 800c42a:	183b      	adds	r3, r7, r0
 800c42c:	1a8a      	subs	r2, r1, r2
 800c42e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	225e      	movs	r2, #94	@ 0x5e
 800c434:	5a9b      	ldrh	r3, [r3, r2]
 800c436:	b29b      	uxth	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d100      	bne.n	800c43e <HAL_UART_IRQHandler+0x486>
 800c43c:	e0e4      	b.n	800c608 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800c43e:	183b      	adds	r3, r7, r0
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d100      	bne.n	800c448 <HAL_UART_IRQHandler+0x490>
 800c446:	e0df      	b.n	800c608 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c448:	f3ef 8310 	mrs	r3, PRIMASK
 800c44c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c44e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c450:	2488      	movs	r4, #136	@ 0x88
 800c452:	193a      	adds	r2, r7, r4
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	2301      	movs	r3, #1
 800c458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f383 8810 	msr	PRIMASK, r3
}
 800c460:	46c0      	nop			@ (mov r8, r8)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	496a      	ldr	r1, [pc, #424]	@ (800c618 <HAL_UART_IRQHandler+0x660>)
 800c46e:	400a      	ands	r2, r1
 800c470:	601a      	str	r2, [r3, #0]
 800c472:	193b      	adds	r3, r7, r4
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f383 8810 	msr	PRIMASK, r3
}
 800c47e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c480:	f3ef 8310 	mrs	r3, PRIMASK
 800c484:	61bb      	str	r3, [r7, #24]
  return(result);
 800c486:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c488:	2484      	movs	r4, #132	@ 0x84
 800c48a:	193a      	adds	r2, r7, r4
 800c48c:	6013      	str	r3, [r2, #0]
 800c48e:	2301      	movs	r3, #1
 800c490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	f383 8810 	msr	PRIMASK, r3
}
 800c498:	46c0      	nop			@ (mov r8, r8)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	689a      	ldr	r2, [r3, #8]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	495d      	ldr	r1, [pc, #372]	@ (800c61c <HAL_UART_IRQHandler+0x664>)
 800c4a6:	400a      	ands	r2, r1
 800c4a8:	609a      	str	r2, [r3, #8]
 800c4aa:	193b      	adds	r3, r7, r4
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	f383 8810 	msr	PRIMASK, r3
}
 800c4b6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	228c      	movs	r2, #140	@ 0x8c
 800c4bc:	2120      	movs	r1, #32
 800c4be:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c4d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4d4:	2480      	movs	r4, #128	@ 0x80
 800c4d6:	193a      	adds	r2, r7, r4
 800c4d8:	6013      	str	r3, [r2, #0]
 800c4da:	2301      	movs	r3, #1
 800c4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e0:	f383 8810 	msr	PRIMASK, r3
}
 800c4e4:	46c0      	nop			@ (mov r8, r8)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2110      	movs	r1, #16
 800c4f2:	438a      	bics	r2, r1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	193b      	adds	r3, r7, r4
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fe:	f383 8810 	msr	PRIMASK, r3
}
 800c502:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2202      	movs	r2, #2
 800c508:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	22c0      	movs	r2, #192	@ 0xc0
 800c50e:	589b      	ldr	r3, [r3, r2]
 800c510:	183a      	adds	r2, r7, r0
 800c512:	8811      	ldrh	r1, [r2, #0]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	0010      	movs	r0, r2
 800c518:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c51a:	e075      	b.n	800c608 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c51c:	23a4      	movs	r3, #164	@ 0xa4
 800c51e:	18fb      	adds	r3, r7, r3
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	2380      	movs	r3, #128	@ 0x80
 800c524:	035b      	lsls	r3, r3, #13
 800c526:	4013      	ands	r3, r2
 800c528:	d012      	beq.n	800c550 <HAL_UART_IRQHandler+0x598>
 800c52a:	239c      	movs	r3, #156	@ 0x9c
 800c52c:	18fb      	adds	r3, r7, r3
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	2380      	movs	r3, #128	@ 0x80
 800c532:	03db      	lsls	r3, r3, #15
 800c534:	4013      	ands	r3, r2
 800c536:	d00b      	beq.n	800c550 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2280      	movs	r2, #128	@ 0x80
 800c53e:	0352      	lsls	r2, r2, #13
 800c540:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	22b4      	movs	r2, #180	@ 0xb4
 800c546:	589b      	ldr	r3, [r3, r2]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	0010      	movs	r0, r2
 800c54c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c54e:	e05e      	b.n	800c60e <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c550:	23a4      	movs	r3, #164	@ 0xa4
 800c552:	18fb      	adds	r3, r7, r3
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2280      	movs	r2, #128	@ 0x80
 800c558:	4013      	ands	r3, r2
 800c55a:	d016      	beq.n	800c58a <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c55c:	23a0      	movs	r3, #160	@ 0xa0
 800c55e:	18fb      	adds	r3, r7, r3
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2280      	movs	r2, #128	@ 0x80
 800c564:	4013      	ands	r3, r2
 800c566:	d106      	bne.n	800c576 <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c568:	239c      	movs	r3, #156	@ 0x9c
 800c56a:	18fb      	adds	r3, r7, r3
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	2380      	movs	r3, #128	@ 0x80
 800c570:	041b      	lsls	r3, r3, #16
 800c572:	4013      	ands	r3, r2
 800c574:	d009      	beq.n	800c58a <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d046      	beq.n	800c60c <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	0010      	movs	r0, r2
 800c586:	4798      	blx	r3
    }
    return;
 800c588:	e040      	b.n	800c60c <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c58a:	23a4      	movs	r3, #164	@ 0xa4
 800c58c:	18fb      	adds	r3, r7, r3
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2240      	movs	r2, #64	@ 0x40
 800c592:	4013      	ands	r3, r2
 800c594:	d00a      	beq.n	800c5ac <HAL_UART_IRQHandler+0x5f4>
 800c596:	23a0      	movs	r3, #160	@ 0xa0
 800c598:	18fb      	adds	r3, r7, r3
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2240      	movs	r2, #64	@ 0x40
 800c59e:	4013      	ands	r3, r2
 800c5a0:	d004      	beq.n	800c5ac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	f000 ff85 	bl	800d4b4 <UART_EndTransmit_IT>
    return;
 800c5aa:	e030      	b.n	800c60e <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c5ac:	23a4      	movs	r3, #164	@ 0xa4
 800c5ae:	18fb      	adds	r3, r7, r3
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	2380      	movs	r3, #128	@ 0x80
 800c5b4:	041b      	lsls	r3, r3, #16
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	d00d      	beq.n	800c5d6 <HAL_UART_IRQHandler+0x61e>
 800c5ba:	23a0      	movs	r3, #160	@ 0xa0
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	2380      	movs	r3, #128	@ 0x80
 800c5c2:	05db      	lsls	r3, r3, #23
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	d006      	beq.n	800c5d6 <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	22bc      	movs	r2, #188	@ 0xbc
 800c5cc:	589b      	ldr	r3, [r3, r2]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	0010      	movs	r0, r2
 800c5d2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5d4:	e01b      	b.n	800c60e <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c5d6:	23a4      	movs	r3, #164	@ 0xa4
 800c5d8:	18fb      	adds	r3, r7, r3
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	2380      	movs	r3, #128	@ 0x80
 800c5de:	045b      	lsls	r3, r3, #17
 800c5e0:	4013      	ands	r3, r2
 800c5e2:	d014      	beq.n	800c60e <HAL_UART_IRQHandler+0x656>
 800c5e4:	23a0      	movs	r3, #160	@ 0xa0
 800c5e6:	18fb      	adds	r3, r7, r3
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	da0f      	bge.n	800c60e <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	22b8      	movs	r2, #184	@ 0xb8
 800c5f2:	589b      	ldr	r3, [r3, r2]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	0010      	movs	r0, r2
 800c5f8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5fa:	e008      	b.n	800c60e <HAL_UART_IRQHandler+0x656>
      return;
 800c5fc:	46c0      	nop			@ (mov r8, r8)
 800c5fe:	e006      	b.n	800c60e <HAL_UART_IRQHandler+0x656>
    return;
 800c600:	46c0      	nop			@ (mov r8, r8)
 800c602:	e004      	b.n	800c60e <HAL_UART_IRQHandler+0x656>
      return;
 800c604:	46c0      	nop			@ (mov r8, r8)
 800c606:	e002      	b.n	800c60e <HAL_UART_IRQHandler+0x656>
      return;
 800c608:	46c0      	nop			@ (mov r8, r8)
 800c60a:	e000      	b.n	800c60e <HAL_UART_IRQHandler+0x656>
    return;
 800c60c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c60e:	46bd      	mov	sp, r7
 800c610:	b02a      	add	sp, #168	@ 0xa8
 800c612:	bdb0      	pop	{r4, r5, r7, pc}
 800c614:	fffffeff 	.word	0xfffffeff
 800c618:	fffffedf 	.word	0xfffffedf
 800c61c:	effffffe 	.word	0xeffffffe

0800c620 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c628:	46c0      	nop			@ (mov r8, r8)
 800c62a:	46bd      	mov	sp, r7
 800c62c:	b002      	add	sp, #8
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c638:	46c0      	nop			@ (mov r8, r8)
 800c63a:	46bd      	mov	sp, r7
 800c63c:	b002      	add	sp, #8
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c648:	46c0      	nop			@ (mov r8, r8)
 800c64a:	46bd      	mov	sp, r7
 800c64c:	b002      	add	sp, #8
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c658:	46c0      	nop			@ (mov r8, r8)
 800c65a:	46bd      	mov	sp, r7
 800c65c:	b002      	add	sp, #8
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c668:	46c0      	nop			@ (mov r8, r8)
 800c66a:	46bd      	mov	sp, r7
 800c66c:	b002      	add	sp, #8
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c678:	46c0      	nop			@ (mov r8, r8)
 800c67a:	46bd      	mov	sp, r7
 800c67c:	b002      	add	sp, #8
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c688:	46c0      	nop			@ (mov r8, r8)
 800c68a:	46bd      	mov	sp, r7
 800c68c:	b002      	add	sp, #8
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c698:	46c0      	nop			@ (mov r8, r8)
 800c69a:	46bd      	mov	sp, r7
 800c69c:	b002      	add	sp, #8
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	000a      	movs	r2, r1
 800c6aa:	1cbb      	adds	r3, r7, #2
 800c6ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6ae:	46c0      	nop			@ (mov r8, r8)
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	b002      	add	sp, #8
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2194      	movs	r1, #148	@ 0x94
 800c6c4:	4a18      	ldr	r2, [pc, #96]	@ (800c728 <UART_InitCallbacksToDefault+0x70>)
 800c6c6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2198      	movs	r1, #152	@ 0x98
 800c6cc:	4a17      	ldr	r2, [pc, #92]	@ (800c72c <UART_InitCallbacksToDefault+0x74>)
 800c6ce:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	219c      	movs	r1, #156	@ 0x9c
 800c6d4:	4a16      	ldr	r2, [pc, #88]	@ (800c730 <UART_InitCallbacksToDefault+0x78>)
 800c6d6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	21a0      	movs	r1, #160	@ 0xa0
 800c6dc:	4a15      	ldr	r2, [pc, #84]	@ (800c734 <UART_InitCallbacksToDefault+0x7c>)
 800c6de:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	21a4      	movs	r1, #164	@ 0xa4
 800c6e4:	4a14      	ldr	r2, [pc, #80]	@ (800c738 <UART_InitCallbacksToDefault+0x80>)
 800c6e6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	21a8      	movs	r1, #168	@ 0xa8
 800c6ec:	4a13      	ldr	r2, [pc, #76]	@ (800c73c <UART_InitCallbacksToDefault+0x84>)
 800c6ee:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	21ac      	movs	r1, #172	@ 0xac
 800c6f4:	4a12      	ldr	r2, [pc, #72]	@ (800c740 <UART_InitCallbacksToDefault+0x88>)
 800c6f6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	21b0      	movs	r1, #176	@ 0xb0
 800c6fc:	4a11      	ldr	r2, [pc, #68]	@ (800c744 <UART_InitCallbacksToDefault+0x8c>)
 800c6fe:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	21b4      	movs	r1, #180	@ 0xb4
 800c704:	4a10      	ldr	r2, [pc, #64]	@ (800c748 <UART_InitCallbacksToDefault+0x90>)
 800c706:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	21b8      	movs	r1, #184	@ 0xb8
 800c70c:	4a0f      	ldr	r2, [pc, #60]	@ (800c74c <UART_InitCallbacksToDefault+0x94>)
 800c70e:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	21bc      	movs	r1, #188	@ 0xbc
 800c714:	4a0e      	ldr	r2, [pc, #56]	@ (800c750 <UART_InitCallbacksToDefault+0x98>)
 800c716:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	21c0      	movs	r1, #192	@ 0xc0
 800c71c:	4a0d      	ldr	r2, [pc, #52]	@ (800c754 <UART_InitCallbacksToDefault+0x9c>)
 800c71e:	505a      	str	r2, [r3, r1]

}
 800c720:	46c0      	nop			@ (mov r8, r8)
 800c722:	46bd      	mov	sp, r7
 800c724:	b002      	add	sp, #8
 800c726:	bd80      	pop	{r7, pc}
 800c728:	0800c631 	.word	0x0800c631
 800c72c:	0800c621 	.word	0x0800c621
 800c730:	0800c651 	.word	0x0800c651
 800c734:	0800c641 	.word	0x0800c641
 800c738:	0800c661 	.word	0x0800c661
 800c73c:	0800c671 	.word	0x0800c671
 800c740:	0800c681 	.word	0x0800c681
 800c744:	0800c691 	.word	0x0800c691
 800c748:	0800d511 	.word	0x0800d511
 800c74c:	0800d521 	.word	0x0800d521
 800c750:	0800d531 	.word	0x0800d531
 800c754:	0800c6a1 	.word	0x0800c6a1

0800c758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c758:	b5b0      	push	{r4, r5, r7, lr}
 800c75a:	b090      	sub	sp, #64	@ 0x40
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c760:	231a      	movs	r3, #26
 800c762:	2220      	movs	r2, #32
 800c764:	189b      	adds	r3, r3, r2
 800c766:	19db      	adds	r3, r3, r7
 800c768:	2200      	movs	r2, #0
 800c76a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76e:	689a      	ldr	r2, [r3, #8]
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	431a      	orrs	r2, r3
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	431a      	orrs	r2, r3
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	69db      	ldr	r3, [r3, #28]
 800c780:	4313      	orrs	r3, r2
 800c782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4ac4      	ldr	r2, [pc, #784]	@ (800ca9c <UART_SetConfig+0x344>)
 800c78c:	4013      	ands	r3, r2
 800c78e:	0019      	movs	r1, r3
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c796:	430b      	orrs	r3, r1
 800c798:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	4abf      	ldr	r2, [pc, #764]	@ (800caa0 <UART_SetConfig+0x348>)
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	0018      	movs	r0, r3
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a8:	68d9      	ldr	r1, [r3, #12]
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	0003      	movs	r3, r0
 800c7b0:	430b      	orrs	r3, r1
 800c7b2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4ab9      	ldr	r2, [pc, #740]	@ (800caa4 <UART_SetConfig+0x34c>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d004      	beq.n	800c7ce <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c6:	6a1b      	ldr	r3, [r3, #32]
 800c7c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	4ab4      	ldr	r2, [pc, #720]	@ (800caa8 <UART_SetConfig+0x350>)
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	0019      	movs	r1, r3
 800c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7e0:	430b      	orrs	r3, r1
 800c7e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ea:	220f      	movs	r2, #15
 800c7ec:	4393      	bics	r3, r2
 800c7ee:	0018      	movs	r0, r3
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	0003      	movs	r3, r0
 800c7fa:	430b      	orrs	r3, r1
 800c7fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4aaa      	ldr	r2, [pc, #680]	@ (800caac <UART_SetConfig+0x354>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d131      	bne.n	800c86c <UART_SetConfig+0x114>
 800c808:	4ba9      	ldr	r3, [pc, #676]	@ (800cab0 <UART_SetConfig+0x358>)
 800c80a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c80c:	2203      	movs	r2, #3
 800c80e:	4013      	ands	r3, r2
 800c810:	2b03      	cmp	r3, #3
 800c812:	d01d      	beq.n	800c850 <UART_SetConfig+0xf8>
 800c814:	d823      	bhi.n	800c85e <UART_SetConfig+0x106>
 800c816:	2b02      	cmp	r3, #2
 800c818:	d00c      	beq.n	800c834 <UART_SetConfig+0xdc>
 800c81a:	d820      	bhi.n	800c85e <UART_SetConfig+0x106>
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d002      	beq.n	800c826 <UART_SetConfig+0xce>
 800c820:	2b01      	cmp	r3, #1
 800c822:	d00e      	beq.n	800c842 <UART_SetConfig+0xea>
 800c824:	e01b      	b.n	800c85e <UART_SetConfig+0x106>
 800c826:	231b      	movs	r3, #27
 800c828:	2220      	movs	r2, #32
 800c82a:	189b      	adds	r3, r3, r2
 800c82c:	19db      	adds	r3, r3, r7
 800c82e:	2200      	movs	r2, #0
 800c830:	701a      	strb	r2, [r3, #0]
 800c832:	e071      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c834:	231b      	movs	r3, #27
 800c836:	2220      	movs	r2, #32
 800c838:	189b      	adds	r3, r3, r2
 800c83a:	19db      	adds	r3, r3, r7
 800c83c:	2202      	movs	r2, #2
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	e06a      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c842:	231b      	movs	r3, #27
 800c844:	2220      	movs	r2, #32
 800c846:	189b      	adds	r3, r3, r2
 800c848:	19db      	adds	r3, r3, r7
 800c84a:	2204      	movs	r2, #4
 800c84c:	701a      	strb	r2, [r3, #0]
 800c84e:	e063      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c850:	231b      	movs	r3, #27
 800c852:	2220      	movs	r2, #32
 800c854:	189b      	adds	r3, r3, r2
 800c856:	19db      	adds	r3, r3, r7
 800c858:	2208      	movs	r2, #8
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	e05c      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c85e:	231b      	movs	r3, #27
 800c860:	2220      	movs	r2, #32
 800c862:	189b      	adds	r3, r3, r2
 800c864:	19db      	adds	r3, r3, r7
 800c866:	2210      	movs	r2, #16
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	e055      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a90      	ldr	r2, [pc, #576]	@ (800cab4 <UART_SetConfig+0x35c>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d106      	bne.n	800c884 <UART_SetConfig+0x12c>
 800c876:	231b      	movs	r3, #27
 800c878:	2220      	movs	r2, #32
 800c87a:	189b      	adds	r3, r3, r2
 800c87c:	19db      	adds	r3, r3, r7
 800c87e:	2200      	movs	r2, #0
 800c880:	701a      	strb	r2, [r3, #0]
 800c882:	e049      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a86      	ldr	r2, [pc, #536]	@ (800caa4 <UART_SetConfig+0x34c>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d13e      	bne.n	800c90c <UART_SetConfig+0x1b4>
 800c88e:	4b88      	ldr	r3, [pc, #544]	@ (800cab0 <UART_SetConfig+0x358>)
 800c890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c892:	23c0      	movs	r3, #192	@ 0xc0
 800c894:	011b      	lsls	r3, r3, #4
 800c896:	4013      	ands	r3, r2
 800c898:	22c0      	movs	r2, #192	@ 0xc0
 800c89a:	0112      	lsls	r2, r2, #4
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d027      	beq.n	800c8f0 <UART_SetConfig+0x198>
 800c8a0:	22c0      	movs	r2, #192	@ 0xc0
 800c8a2:	0112      	lsls	r2, r2, #4
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d82a      	bhi.n	800c8fe <UART_SetConfig+0x1a6>
 800c8a8:	2280      	movs	r2, #128	@ 0x80
 800c8aa:	0112      	lsls	r2, r2, #4
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d011      	beq.n	800c8d4 <UART_SetConfig+0x17c>
 800c8b0:	2280      	movs	r2, #128	@ 0x80
 800c8b2:	0112      	lsls	r2, r2, #4
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d822      	bhi.n	800c8fe <UART_SetConfig+0x1a6>
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d004      	beq.n	800c8c6 <UART_SetConfig+0x16e>
 800c8bc:	2280      	movs	r2, #128	@ 0x80
 800c8be:	00d2      	lsls	r2, r2, #3
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d00e      	beq.n	800c8e2 <UART_SetConfig+0x18a>
 800c8c4:	e01b      	b.n	800c8fe <UART_SetConfig+0x1a6>
 800c8c6:	231b      	movs	r3, #27
 800c8c8:	2220      	movs	r2, #32
 800c8ca:	189b      	adds	r3, r3, r2
 800c8cc:	19db      	adds	r3, r3, r7
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	701a      	strb	r2, [r3, #0]
 800c8d2:	e021      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c8d4:	231b      	movs	r3, #27
 800c8d6:	2220      	movs	r2, #32
 800c8d8:	189b      	adds	r3, r3, r2
 800c8da:	19db      	adds	r3, r3, r7
 800c8dc:	2202      	movs	r2, #2
 800c8de:	701a      	strb	r2, [r3, #0]
 800c8e0:	e01a      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c8e2:	231b      	movs	r3, #27
 800c8e4:	2220      	movs	r2, #32
 800c8e6:	189b      	adds	r3, r3, r2
 800c8e8:	19db      	adds	r3, r3, r7
 800c8ea:	2204      	movs	r2, #4
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	e013      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c8f0:	231b      	movs	r3, #27
 800c8f2:	2220      	movs	r2, #32
 800c8f4:	189b      	adds	r3, r3, r2
 800c8f6:	19db      	adds	r3, r3, r7
 800c8f8:	2208      	movs	r2, #8
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	e00c      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c8fe:	231b      	movs	r3, #27
 800c900:	2220      	movs	r2, #32
 800c902:	189b      	adds	r3, r3, r2
 800c904:	19db      	adds	r3, r3, r7
 800c906:	2210      	movs	r2, #16
 800c908:	701a      	strb	r2, [r3, #0]
 800c90a:	e005      	b.n	800c918 <UART_SetConfig+0x1c0>
 800c90c:	231b      	movs	r3, #27
 800c90e:	2220      	movs	r2, #32
 800c910:	189b      	adds	r3, r3, r2
 800c912:	19db      	adds	r3, r3, r7
 800c914:	2210      	movs	r2, #16
 800c916:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a61      	ldr	r2, [pc, #388]	@ (800caa4 <UART_SetConfig+0x34c>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d000      	beq.n	800c924 <UART_SetConfig+0x1cc>
 800c922:	e092      	b.n	800ca4a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c924:	231b      	movs	r3, #27
 800c926:	2220      	movs	r2, #32
 800c928:	189b      	adds	r3, r3, r2
 800c92a:	19db      	adds	r3, r3, r7
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2b08      	cmp	r3, #8
 800c930:	d015      	beq.n	800c95e <UART_SetConfig+0x206>
 800c932:	dc18      	bgt.n	800c966 <UART_SetConfig+0x20e>
 800c934:	2b04      	cmp	r3, #4
 800c936:	d00d      	beq.n	800c954 <UART_SetConfig+0x1fc>
 800c938:	dc15      	bgt.n	800c966 <UART_SetConfig+0x20e>
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d002      	beq.n	800c944 <UART_SetConfig+0x1ec>
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d005      	beq.n	800c94e <UART_SetConfig+0x1f6>
 800c942:	e010      	b.n	800c966 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c944:	f7fc fdd6 	bl	80094f4 <HAL_RCC_GetPCLK1Freq>
 800c948:	0003      	movs	r3, r0
 800c94a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c94c:	e014      	b.n	800c978 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c94e:	4b5a      	ldr	r3, [pc, #360]	@ (800cab8 <UART_SetConfig+0x360>)
 800c950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c952:	e011      	b.n	800c978 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c954:	f7fc fd42 	bl	80093dc <HAL_RCC_GetSysClockFreq>
 800c958:	0003      	movs	r3, r0
 800c95a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c95c:	e00c      	b.n	800c978 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c95e:	2380      	movs	r3, #128	@ 0x80
 800c960:	021b      	lsls	r3, r3, #8
 800c962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c964:	e008      	b.n	800c978 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c966:	2300      	movs	r3, #0
 800c968:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c96a:	231a      	movs	r3, #26
 800c96c:	2220      	movs	r2, #32
 800c96e:	189b      	adds	r3, r3, r2
 800c970:	19db      	adds	r3, r3, r7
 800c972:	2201      	movs	r2, #1
 800c974:	701a      	strb	r2, [r3, #0]
        break;
 800c976:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d100      	bne.n	800c980 <UART_SetConfig+0x228>
 800c97e:	e147      	b.n	800cc10 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c982:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c984:	4b4d      	ldr	r3, [pc, #308]	@ (800cabc <UART_SetConfig+0x364>)
 800c986:	0052      	lsls	r2, r2, #1
 800c988:	5ad3      	ldrh	r3, [r2, r3]
 800c98a:	0019      	movs	r1, r3
 800c98c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c98e:	f7f3 fbb9 	bl	8000104 <__udivsi3>
 800c992:	0003      	movs	r3, r0
 800c994:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	0013      	movs	r3, r2
 800c99c:	005b      	lsls	r3, r3, #1
 800c99e:	189b      	adds	r3, r3, r2
 800c9a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d305      	bcc.n	800c9b2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d906      	bls.n	800c9c0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c9b2:	231a      	movs	r3, #26
 800c9b4:	2220      	movs	r2, #32
 800c9b6:	189b      	adds	r3, r3, r2
 800c9b8:	19db      	adds	r3, r3, r7
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	701a      	strb	r2, [r3, #0]
 800c9be:	e127      	b.n	800cc10 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c2:	61bb      	str	r3, [r7, #24]
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	61fb      	str	r3, [r7, #28]
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9cc:	4b3b      	ldr	r3, [pc, #236]	@ (800cabc <UART_SetConfig+0x364>)
 800c9ce:	0052      	lsls	r2, r2, #1
 800c9d0:	5ad3      	ldrh	r3, [r2, r3]
 800c9d2:	613b      	str	r3, [r7, #16]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	617b      	str	r3, [r7, #20]
 800c9d8:	693a      	ldr	r2, [r7, #16]
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	69b8      	ldr	r0, [r7, #24]
 800c9de:	69f9      	ldr	r1, [r7, #28]
 800c9e0:	f7f3 fc1c 	bl	800021c <__aeabi_uldivmod>
 800c9e4:	0002      	movs	r2, r0
 800c9e6:	000b      	movs	r3, r1
 800c9e8:	0e11      	lsrs	r1, r2, #24
 800c9ea:	021d      	lsls	r5, r3, #8
 800c9ec:	430d      	orrs	r5, r1
 800c9ee:	0214      	lsls	r4, r2, #8
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	085b      	lsrs	r3, r3, #1
 800c9f6:	60bb      	str	r3, [r7, #8]
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
 800c9fc:	68b8      	ldr	r0, [r7, #8]
 800c9fe:	68f9      	ldr	r1, [r7, #12]
 800ca00:	1900      	adds	r0, r0, r4
 800ca02:	4169      	adcs	r1, r5
 800ca04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	603b      	str	r3, [r7, #0]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	607b      	str	r3, [r7, #4]
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f7f3 fc03 	bl	800021c <__aeabi_uldivmod>
 800ca16:	0002      	movs	r2, r0
 800ca18:	000b      	movs	r3, r1
 800ca1a:	0013      	movs	r3, r2
 800ca1c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca20:	23c0      	movs	r3, #192	@ 0xc0
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d309      	bcc.n	800ca3c <UART_SetConfig+0x2e4>
 800ca28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca2a:	2380      	movs	r3, #128	@ 0x80
 800ca2c:	035b      	lsls	r3, r3, #13
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d204      	bcs.n	800ca3c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800ca32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca38:	60da      	str	r2, [r3, #12]
 800ca3a:	e0e9      	b.n	800cc10 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800ca3c:	231a      	movs	r3, #26
 800ca3e:	2220      	movs	r2, #32
 800ca40:	189b      	adds	r3, r3, r2
 800ca42:	19db      	adds	r3, r3, r7
 800ca44:	2201      	movs	r2, #1
 800ca46:	701a      	strb	r2, [r3, #0]
 800ca48:	e0e2      	b.n	800cc10 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4c:	69da      	ldr	r2, [r3, #28]
 800ca4e:	2380      	movs	r3, #128	@ 0x80
 800ca50:	021b      	lsls	r3, r3, #8
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d000      	beq.n	800ca58 <UART_SetConfig+0x300>
 800ca56:	e083      	b.n	800cb60 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800ca58:	231b      	movs	r3, #27
 800ca5a:	2220      	movs	r2, #32
 800ca5c:	189b      	adds	r3, r3, r2
 800ca5e:	19db      	adds	r3, r3, r7
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b08      	cmp	r3, #8
 800ca64:	d015      	beq.n	800ca92 <UART_SetConfig+0x33a>
 800ca66:	dc2b      	bgt.n	800cac0 <UART_SetConfig+0x368>
 800ca68:	2b04      	cmp	r3, #4
 800ca6a:	d00d      	beq.n	800ca88 <UART_SetConfig+0x330>
 800ca6c:	dc28      	bgt.n	800cac0 <UART_SetConfig+0x368>
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d002      	beq.n	800ca78 <UART_SetConfig+0x320>
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d005      	beq.n	800ca82 <UART_SetConfig+0x32a>
 800ca76:	e023      	b.n	800cac0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca78:	f7fc fd3c 	bl	80094f4 <HAL_RCC_GetPCLK1Freq>
 800ca7c:	0003      	movs	r3, r0
 800ca7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca80:	e027      	b.n	800cad2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca82:	4b0d      	ldr	r3, [pc, #52]	@ (800cab8 <UART_SetConfig+0x360>)
 800ca84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca86:	e024      	b.n	800cad2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca88:	f7fc fca8 	bl	80093dc <HAL_RCC_GetSysClockFreq>
 800ca8c:	0003      	movs	r3, r0
 800ca8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca90:	e01f      	b.n	800cad2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca92:	2380      	movs	r3, #128	@ 0x80
 800ca94:	021b      	lsls	r3, r3, #8
 800ca96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca98:	e01b      	b.n	800cad2 <UART_SetConfig+0x37a>
 800ca9a:	46c0      	nop			@ (mov r8, r8)
 800ca9c:	cfff69f3 	.word	0xcfff69f3
 800caa0:	ffffcfff 	.word	0xffffcfff
 800caa4:	40008000 	.word	0x40008000
 800caa8:	11fff4ff 	.word	0x11fff4ff
 800caac:	40013800 	.word	0x40013800
 800cab0:	40021000 	.word	0x40021000
 800cab4:	40004400 	.word	0x40004400
 800cab8:	00f42400 	.word	0x00f42400
 800cabc:	0800dfe8 	.word	0x0800dfe8
      default:
        pclk = 0U;
 800cac0:	2300      	movs	r3, #0
 800cac2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cac4:	231a      	movs	r3, #26
 800cac6:	2220      	movs	r2, #32
 800cac8:	189b      	adds	r3, r3, r2
 800caca:	19db      	adds	r3, r3, r7
 800cacc:	2201      	movs	r2, #1
 800cace:	701a      	strb	r2, [r3, #0]
        break;
 800cad0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d100      	bne.n	800cada <UART_SetConfig+0x382>
 800cad8:	e09a      	b.n	800cc10 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cadc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cade:	4b58      	ldr	r3, [pc, #352]	@ (800cc40 <UART_SetConfig+0x4e8>)
 800cae0:	0052      	lsls	r2, r2, #1
 800cae2:	5ad3      	ldrh	r3, [r2, r3]
 800cae4:	0019      	movs	r1, r3
 800cae6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cae8:	f7f3 fb0c 	bl	8000104 <__udivsi3>
 800caec:	0003      	movs	r3, r0
 800caee:	005a      	lsls	r2, r3, #1
 800caf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	085b      	lsrs	r3, r3, #1
 800caf6:	18d2      	adds	r2, r2, r3
 800caf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	0019      	movs	r1, r3
 800cafe:	0010      	movs	r0, r2
 800cb00:	f7f3 fb00 	bl	8000104 <__udivsi3>
 800cb04:	0003      	movs	r3, r0
 800cb06:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0a:	2b0f      	cmp	r3, #15
 800cb0c:	d921      	bls.n	800cb52 <UART_SetConfig+0x3fa>
 800cb0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb10:	2380      	movs	r3, #128	@ 0x80
 800cb12:	025b      	lsls	r3, r3, #9
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d21c      	bcs.n	800cb52 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	200e      	movs	r0, #14
 800cb1e:	2420      	movs	r4, #32
 800cb20:	1903      	adds	r3, r0, r4
 800cb22:	19db      	adds	r3, r3, r7
 800cb24:	210f      	movs	r1, #15
 800cb26:	438a      	bics	r2, r1
 800cb28:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	085b      	lsrs	r3, r3, #1
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	2207      	movs	r2, #7
 800cb32:	4013      	ands	r3, r2
 800cb34:	b299      	uxth	r1, r3
 800cb36:	1903      	adds	r3, r0, r4
 800cb38:	19db      	adds	r3, r3, r7
 800cb3a:	1902      	adds	r2, r0, r4
 800cb3c:	19d2      	adds	r2, r2, r7
 800cb3e:	8812      	ldrh	r2, [r2, #0]
 800cb40:	430a      	orrs	r2, r1
 800cb42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	1902      	adds	r2, r0, r4
 800cb4a:	19d2      	adds	r2, r2, r7
 800cb4c:	8812      	ldrh	r2, [r2, #0]
 800cb4e:	60da      	str	r2, [r3, #12]
 800cb50:	e05e      	b.n	800cc10 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cb52:	231a      	movs	r3, #26
 800cb54:	2220      	movs	r2, #32
 800cb56:	189b      	adds	r3, r3, r2
 800cb58:	19db      	adds	r3, r3, r7
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	701a      	strb	r2, [r3, #0]
 800cb5e:	e057      	b.n	800cc10 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb60:	231b      	movs	r3, #27
 800cb62:	2220      	movs	r2, #32
 800cb64:	189b      	adds	r3, r3, r2
 800cb66:	19db      	adds	r3, r3, r7
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	2b08      	cmp	r3, #8
 800cb6c:	d015      	beq.n	800cb9a <UART_SetConfig+0x442>
 800cb6e:	dc18      	bgt.n	800cba2 <UART_SetConfig+0x44a>
 800cb70:	2b04      	cmp	r3, #4
 800cb72:	d00d      	beq.n	800cb90 <UART_SetConfig+0x438>
 800cb74:	dc15      	bgt.n	800cba2 <UART_SetConfig+0x44a>
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d002      	beq.n	800cb80 <UART_SetConfig+0x428>
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d005      	beq.n	800cb8a <UART_SetConfig+0x432>
 800cb7e:	e010      	b.n	800cba2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb80:	f7fc fcb8 	bl	80094f4 <HAL_RCC_GetPCLK1Freq>
 800cb84:	0003      	movs	r3, r0
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb88:	e014      	b.n	800cbb4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb8a:	4b2e      	ldr	r3, [pc, #184]	@ (800cc44 <UART_SetConfig+0x4ec>)
 800cb8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb8e:	e011      	b.n	800cbb4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb90:	f7fc fc24 	bl	80093dc <HAL_RCC_GetSysClockFreq>
 800cb94:	0003      	movs	r3, r0
 800cb96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb98:	e00c      	b.n	800cbb4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb9a:	2380      	movs	r3, #128	@ 0x80
 800cb9c:	021b      	lsls	r3, r3, #8
 800cb9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cba0:	e008      	b.n	800cbb4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cba6:	231a      	movs	r3, #26
 800cba8:	2220      	movs	r2, #32
 800cbaa:	189b      	adds	r3, r3, r2
 800cbac:	19db      	adds	r3, r3, r7
 800cbae:	2201      	movs	r2, #1
 800cbb0:	701a      	strb	r2, [r3, #0]
        break;
 800cbb2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800cbb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d02a      	beq.n	800cc10 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbbe:	4b20      	ldr	r3, [pc, #128]	@ (800cc40 <UART_SetConfig+0x4e8>)
 800cbc0:	0052      	lsls	r2, r2, #1
 800cbc2:	5ad3      	ldrh	r3, [r2, r3]
 800cbc4:	0019      	movs	r1, r3
 800cbc6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cbc8:	f7f3 fa9c 	bl	8000104 <__udivsi3>
 800cbcc:	0003      	movs	r3, r0
 800cbce:	001a      	movs	r2, r3
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	085b      	lsrs	r3, r3, #1
 800cbd6:	18d2      	adds	r2, r2, r3
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	0019      	movs	r1, r3
 800cbde:	0010      	movs	r0, r2
 800cbe0:	f7f3 fa90 	bl	8000104 <__udivsi3>
 800cbe4:	0003      	movs	r3, r0
 800cbe6:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbea:	2b0f      	cmp	r3, #15
 800cbec:	d90a      	bls.n	800cc04 <UART_SetConfig+0x4ac>
 800cbee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbf0:	2380      	movs	r3, #128	@ 0x80
 800cbf2:	025b      	lsls	r3, r3, #9
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d205      	bcs.n	800cc04 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	60da      	str	r2, [r3, #12]
 800cc02:	e005      	b.n	800cc10 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cc04:	231a      	movs	r3, #26
 800cc06:	2220      	movs	r2, #32
 800cc08:	189b      	adds	r3, r3, r2
 800cc0a:	19db      	adds	r3, r3, r7
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc12:	226a      	movs	r2, #106	@ 0x6a
 800cc14:	2101      	movs	r1, #1
 800cc16:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800cc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1a:	2268      	movs	r2, #104	@ 0x68
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc22:	2200      	movs	r2, #0
 800cc24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	2200      	movs	r2, #0
 800cc2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cc2c:	231a      	movs	r3, #26
 800cc2e:	2220      	movs	r2, #32
 800cc30:	189b      	adds	r3, r3, r2
 800cc32:	19db      	adds	r3, r3, r7
 800cc34:	781b      	ldrb	r3, [r3, #0]
}
 800cc36:	0018      	movs	r0, r3
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	b010      	add	sp, #64	@ 0x40
 800cc3c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc3e:	46c0      	nop			@ (mov r8, r8)
 800cc40:	0800dfe8 	.word	0x0800dfe8
 800cc44:	00f42400 	.word	0x00f42400

0800cc48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc54:	2208      	movs	r2, #8
 800cc56:	4013      	ands	r3, r2
 800cc58:	d00b      	beq.n	800cc72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	4a4a      	ldr	r2, [pc, #296]	@ (800cd8c <UART_AdvFeatureConfig+0x144>)
 800cc62:	4013      	ands	r3, r2
 800cc64:	0019      	movs	r1, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc76:	2201      	movs	r2, #1
 800cc78:	4013      	ands	r3, r2
 800cc7a:	d00b      	beq.n	800cc94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	4a43      	ldr	r2, [pc, #268]	@ (800cd90 <UART_AdvFeatureConfig+0x148>)
 800cc84:	4013      	ands	r3, r2
 800cc86:	0019      	movs	r1, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	430a      	orrs	r2, r1
 800cc92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc98:	2202      	movs	r2, #2
 800cc9a:	4013      	ands	r3, r2
 800cc9c:	d00b      	beq.n	800ccb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	4a3b      	ldr	r2, [pc, #236]	@ (800cd94 <UART_AdvFeatureConfig+0x14c>)
 800cca6:	4013      	ands	r3, r2
 800cca8:	0019      	movs	r1, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccba:	2204      	movs	r2, #4
 800ccbc:	4013      	ands	r3, r2
 800ccbe:	d00b      	beq.n	800ccd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	4a34      	ldr	r2, [pc, #208]	@ (800cd98 <UART_AdvFeatureConfig+0x150>)
 800ccc8:	4013      	ands	r3, r2
 800ccca:	0019      	movs	r1, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	430a      	orrs	r2, r1
 800ccd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccdc:	2210      	movs	r2, #16
 800ccde:	4013      	ands	r3, r2
 800cce0:	d00b      	beq.n	800ccfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	4a2c      	ldr	r2, [pc, #176]	@ (800cd9c <UART_AdvFeatureConfig+0x154>)
 800ccea:	4013      	ands	r3, r2
 800ccec:	0019      	movs	r1, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccfe:	2220      	movs	r2, #32
 800cd00:	4013      	ands	r3, r2
 800cd02:	d00b      	beq.n	800cd1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	4a25      	ldr	r2, [pc, #148]	@ (800cda0 <UART_AdvFeatureConfig+0x158>)
 800cd0c:	4013      	ands	r3, r2
 800cd0e:	0019      	movs	r1, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	430a      	orrs	r2, r1
 800cd1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd20:	2240      	movs	r2, #64	@ 0x40
 800cd22:	4013      	ands	r3, r2
 800cd24:	d01d      	beq.n	800cd62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	4a1d      	ldr	r2, [pc, #116]	@ (800cda4 <UART_AdvFeatureConfig+0x15c>)
 800cd2e:	4013      	ands	r3, r2
 800cd30:	0019      	movs	r1, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	430a      	orrs	r2, r1
 800cd3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd42:	2380      	movs	r3, #128	@ 0x80
 800cd44:	035b      	lsls	r3, r3, #13
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d10b      	bne.n	800cd62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	4a15      	ldr	r2, [pc, #84]	@ (800cda8 <UART_AdvFeatureConfig+0x160>)
 800cd52:	4013      	ands	r3, r2
 800cd54:	0019      	movs	r1, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	430a      	orrs	r2, r1
 800cd60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd66:	2280      	movs	r2, #128	@ 0x80
 800cd68:	4013      	ands	r3, r2
 800cd6a:	d00b      	beq.n	800cd84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	4a0e      	ldr	r2, [pc, #56]	@ (800cdac <UART_AdvFeatureConfig+0x164>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	0019      	movs	r1, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	430a      	orrs	r2, r1
 800cd82:	605a      	str	r2, [r3, #4]
  }
}
 800cd84:	46c0      	nop			@ (mov r8, r8)
 800cd86:	46bd      	mov	sp, r7
 800cd88:	b002      	add	sp, #8
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	ffff7fff 	.word	0xffff7fff
 800cd90:	fffdffff 	.word	0xfffdffff
 800cd94:	fffeffff 	.word	0xfffeffff
 800cd98:	fffbffff 	.word	0xfffbffff
 800cd9c:	ffffefff 	.word	0xffffefff
 800cda0:	ffffdfff 	.word	0xffffdfff
 800cda4:	ffefffff 	.word	0xffefffff
 800cda8:	ff9fffff 	.word	0xff9fffff
 800cdac:	fff7ffff 	.word	0xfff7ffff

0800cdb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b092      	sub	sp, #72	@ 0x48
 800cdb4:	af02      	add	r7, sp, #8
 800cdb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2290      	movs	r2, #144	@ 0x90
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdc0:	f7f9 fa66 	bl	8006290 <HAL_GetTick>
 800cdc4:	0003      	movs	r3, r0
 800cdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2208      	movs	r2, #8
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	2b08      	cmp	r3, #8
 800cdd4:	d12d      	bne.n	800ce32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdd8:	2280      	movs	r2, #128	@ 0x80
 800cdda:	0391      	lsls	r1, r2, #14
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4a47      	ldr	r2, [pc, #284]	@ (800cefc <UART_CheckIdleState+0x14c>)
 800cde0:	9200      	str	r2, [sp, #0]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f000 f88e 	bl	800cf04 <UART_WaitOnFlagUntilTimeout>
 800cde8:	1e03      	subs	r3, r0, #0
 800cdea:	d022      	beq.n	800ce32 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdec:	f3ef 8310 	mrs	r3, PRIMASK
 800cdf0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cdf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	f383 8810 	msr	PRIMASK, r3
}
 800ce00:	46c0      	nop			@ (mov r8, r8)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2180      	movs	r1, #128	@ 0x80
 800ce0e:	438a      	bics	r2, r1
 800ce10:	601a      	str	r2, [r3, #0]
 800ce12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce18:	f383 8810 	msr	PRIMASK, r3
}
 800ce1c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2288      	movs	r2, #136	@ 0x88
 800ce22:	2120      	movs	r1, #32
 800ce24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2284      	movs	r2, #132	@ 0x84
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	e060      	b.n	800cef4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2204      	movs	r2, #4
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	2b04      	cmp	r3, #4
 800ce3e:	d146      	bne.n	800cece <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce42:	2280      	movs	r2, #128	@ 0x80
 800ce44:	03d1      	lsls	r1, r2, #15
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	4a2c      	ldr	r2, [pc, #176]	@ (800cefc <UART_CheckIdleState+0x14c>)
 800ce4a:	9200      	str	r2, [sp, #0]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f000 f859 	bl	800cf04 <UART_WaitOnFlagUntilTimeout>
 800ce52:	1e03      	subs	r3, r0, #0
 800ce54:	d03b      	beq.n	800cece <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce56:	f3ef 8310 	mrs	r3, PRIMASK
 800ce5a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce60:	2301      	movs	r3, #1
 800ce62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	f383 8810 	msr	PRIMASK, r3
}
 800ce6a:	46c0      	nop			@ (mov r8, r8)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4922      	ldr	r1, [pc, #136]	@ (800cf00 <UART_CheckIdleState+0x150>)
 800ce78:	400a      	ands	r2, r1
 800ce7a:	601a      	str	r2, [r3, #0]
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	f383 8810 	msr	PRIMASK, r3
}
 800ce86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce88:	f3ef 8310 	mrs	r3, PRIMASK
 800ce8c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ce8e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce90:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce92:	2301      	movs	r3, #1
 800ce94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	f383 8810 	msr	PRIMASK, r3
}
 800ce9c:	46c0      	nop			@ (mov r8, r8)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689a      	ldr	r2, [r3, #8]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2101      	movs	r1, #1
 800ceaa:	438a      	bics	r2, r1
 800ceac:	609a      	str	r2, [r3, #8]
 800ceae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
 800ceb4:	f383 8810 	msr	PRIMASK, r3
}
 800ceb8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	228c      	movs	r2, #140	@ 0x8c
 800cebe:	2120      	movs	r1, #32
 800cec0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2284      	movs	r2, #132	@ 0x84
 800cec6:	2100      	movs	r1, #0
 800cec8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e012      	b.n	800cef4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2288      	movs	r2, #136	@ 0x88
 800ced2:	2120      	movs	r1, #32
 800ced4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	228c      	movs	r2, #140	@ 0x8c
 800ceda:	2120      	movs	r1, #32
 800cedc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2284      	movs	r2, #132	@ 0x84
 800ceee:	2100      	movs	r1, #0
 800cef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	0018      	movs	r0, r3
 800cef6:	46bd      	mov	sp, r7
 800cef8:	b010      	add	sp, #64	@ 0x40
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	01ffffff 	.word	0x01ffffff
 800cf00:	fffffedf 	.word	0xfffffedf

0800cf04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	603b      	str	r3, [r7, #0]
 800cf10:	1dfb      	adds	r3, r7, #7
 800cf12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf14:	e051      	b.n	800cfba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	d04e      	beq.n	800cfba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf1c:	f7f9 f9b8 	bl	8006290 <HAL_GetTick>
 800cf20:	0002      	movs	r2, r0
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	69ba      	ldr	r2, [r7, #24]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d302      	bcc.n	800cf32 <UART_WaitOnFlagUntilTimeout+0x2e>
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800cf32:	2303      	movs	r3, #3
 800cf34:	e051      	b.n	800cfda <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2204      	movs	r2, #4
 800cf3e:	4013      	ands	r3, r2
 800cf40:	d03b      	beq.n	800cfba <UART_WaitOnFlagUntilTimeout+0xb6>
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	2b80      	cmp	r3, #128	@ 0x80
 800cf46:	d038      	beq.n	800cfba <UART_WaitOnFlagUntilTimeout+0xb6>
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2b40      	cmp	r3, #64	@ 0x40
 800cf4c:	d035      	beq.n	800cfba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	69db      	ldr	r3, [r3, #28]
 800cf54:	2208      	movs	r2, #8
 800cf56:	4013      	ands	r3, r2
 800cf58:	2b08      	cmp	r3, #8
 800cf5a:	d111      	bne.n	800cf80 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2208      	movs	r2, #8
 800cf62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	0018      	movs	r0, r3
 800cf68:	f000 f922 	bl	800d1b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2290      	movs	r2, #144	@ 0x90
 800cf70:	2108      	movs	r1, #8
 800cf72:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2284      	movs	r2, #132	@ 0x84
 800cf78:	2100      	movs	r1, #0
 800cf7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e02c      	b.n	800cfda <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	69da      	ldr	r2, [r3, #28]
 800cf86:	2380      	movs	r3, #128	@ 0x80
 800cf88:	011b      	lsls	r3, r3, #4
 800cf8a:	401a      	ands	r2, r3
 800cf8c:	2380      	movs	r3, #128	@ 0x80
 800cf8e:	011b      	lsls	r3, r3, #4
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d112      	bne.n	800cfba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2280      	movs	r2, #128	@ 0x80
 800cf9a:	0112      	lsls	r2, r2, #4
 800cf9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f000 f905 	bl	800d1b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2290      	movs	r2, #144	@ 0x90
 800cfaa:	2120      	movs	r1, #32
 800cfac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2284      	movs	r2, #132	@ 0x84
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	e00f      	b.n	800cfda <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	69db      	ldr	r3, [r3, #28]
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	4013      	ands	r3, r2
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	425a      	negs	r2, r3
 800cfca:	4153      	adcs	r3, r2
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	001a      	movs	r2, r3
 800cfd0:	1dfb      	adds	r3, r7, #7
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d09e      	beq.n	800cf16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	0018      	movs	r0, r3
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	b004      	add	sp, #16
 800cfe0:	bd80      	pop	{r7, pc}
	...

0800cfe4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b090      	sub	sp, #64	@ 0x40
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	1dbb      	adds	r3, r7, #6
 800cff0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	1dba      	adds	r2, r7, #6
 800cffc:	215c      	movs	r1, #92	@ 0x5c
 800cffe:	8812      	ldrh	r2, [r2, #0]
 800d000:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2290      	movs	r2, #144	@ 0x90
 800d006:	2100      	movs	r1, #0
 800d008:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	228c      	movs	r2, #140	@ 0x8c
 800d00e:	2122      	movs	r1, #34	@ 0x22
 800d010:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2280      	movs	r2, #128	@ 0x80
 800d016:	589b      	ldr	r3, [r3, r2]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d02d      	beq.n	800d078 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2280      	movs	r2, #128	@ 0x80
 800d020:	589b      	ldr	r3, [r3, r2]
 800d022:	4a40      	ldr	r2, [pc, #256]	@ (800d124 <UART_Start_Receive_DMA+0x140>)
 800d024:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2280      	movs	r2, #128	@ 0x80
 800d02a:	589b      	ldr	r3, [r3, r2]
 800d02c:	4a3e      	ldr	r2, [pc, #248]	@ (800d128 <UART_Start_Receive_DMA+0x144>)
 800d02e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2280      	movs	r2, #128	@ 0x80
 800d034:	589b      	ldr	r3, [r3, r2]
 800d036:	4a3d      	ldr	r2, [pc, #244]	@ (800d12c <UART_Start_Receive_DMA+0x148>)
 800d038:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2280      	movs	r2, #128	@ 0x80
 800d03e:	589b      	ldr	r3, [r3, r2]
 800d040:	2200      	movs	r2, #0
 800d042:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2280      	movs	r2, #128	@ 0x80
 800d048:	5898      	ldr	r0, [r3, r2]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3324      	adds	r3, #36	@ 0x24
 800d050:	0019      	movs	r1, r3
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d056:	001a      	movs	r2, r3
 800d058:	1dbb      	adds	r3, r7, #6
 800d05a:	881b      	ldrh	r3, [r3, #0]
 800d05c:	f7fa fce6 	bl	8007a2c <HAL_DMA_Start_IT>
 800d060:	1e03      	subs	r3, r0, #0
 800d062:	d009      	beq.n	800d078 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2290      	movs	r2, #144	@ 0x90
 800d068:	2110      	movs	r1, #16
 800d06a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	228c      	movs	r2, #140	@ 0x8c
 800d070:	2120      	movs	r1, #32
 800d072:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e050      	b.n	800d11a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d019      	beq.n	800d0b4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d080:	f3ef 8310 	mrs	r3, PRIMASK
 800d084:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800d086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d08a:	2301      	movs	r3, #1
 800d08c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d090:	f383 8810 	msr	PRIMASK, r3
}
 800d094:	46c0      	nop			@ (mov r8, r8)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2180      	movs	r1, #128	@ 0x80
 800d0a2:	0049      	lsls	r1, r1, #1
 800d0a4:	430a      	orrs	r2, r1
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0aa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ae:	f383 8810 	msr	PRIMASK, r3
}
 800d0b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b8:	613b      	str	r3, [r7, #16]
  return(result);
 800d0ba:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0be:	2301      	movs	r3, #1
 800d0c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	f383 8810 	msr	PRIMASK, r3
}
 800d0c8:	46c0      	nop			@ (mov r8, r8)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	689a      	ldr	r2, [r3, #8]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2101      	movs	r1, #1
 800d0d6:	430a      	orrs	r2, r1
 800d0d8:	609a      	str	r2, [r3, #8]
 800d0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	f383 8810 	msr	PRIMASK, r3
}
 800d0e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0e6:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ea:	61fb      	str	r3, [r7, #28]
  return(result);
 800d0ec:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	f383 8810 	msr	PRIMASK, r3
}
 800d0fa:	46c0      	nop			@ (mov r8, r8)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	689a      	ldr	r2, [r3, #8]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2140      	movs	r1, #64	@ 0x40
 800d108:	430a      	orrs	r2, r1
 800d10a:	609a      	str	r2, [r3, #8]
 800d10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d10e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d112:	f383 8810 	msr	PRIMASK, r3
}
 800d116:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	0018      	movs	r0, r3
 800d11c:	46bd      	mov	sp, r7
 800d11e:	b010      	add	sp, #64	@ 0x40
 800d120:	bd80      	pop	{r7, pc}
 800d122:	46c0      	nop			@ (mov r8, r8)
 800d124:	0800d27d 	.word	0x0800d27d
 800d128:	0800d3b1 	.word	0x0800d3b1
 800d12c:	0800d3f9 	.word	0x0800d3f9

0800d130 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	@ 0x28
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d138:	f3ef 8310 	mrs	r3, PRIMASK
 800d13c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d13e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d140:	627b      	str	r3, [r7, #36]	@ 0x24
 800d142:	2301      	movs	r3, #1
 800d144:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f383 8810 	msr	PRIMASK, r3
}
 800d14c:	46c0      	nop			@ (mov r8, r8)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	21c0      	movs	r1, #192	@ 0xc0
 800d15a:	438a      	bics	r2, r1
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d160:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f383 8810 	msr	PRIMASK, r3
}
 800d168:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d16a:	f3ef 8310 	mrs	r3, PRIMASK
 800d16e:	617b      	str	r3, [r7, #20]
  return(result);
 800d170:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d172:	623b      	str	r3, [r7, #32]
 800d174:	2301      	movs	r3, #1
 800d176:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	f383 8810 	msr	PRIMASK, r3
}
 800d17e:	46c0      	nop			@ (mov r8, r8)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689a      	ldr	r2, [r3, #8]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4908      	ldr	r1, [pc, #32]	@ (800d1ac <UART_EndTxTransfer+0x7c>)
 800d18c:	400a      	ands	r2, r1
 800d18e:	609a      	str	r2, [r3, #8]
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	f383 8810 	msr	PRIMASK, r3
}
 800d19a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2288      	movs	r2, #136	@ 0x88
 800d1a0:	2120      	movs	r1, #32
 800d1a2:	5099      	str	r1, [r3, r2]
}
 800d1a4:	46c0      	nop			@ (mov r8, r8)
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	b00a      	add	sp, #40	@ 0x28
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	ff7fffff 	.word	0xff7fffff

0800d1b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b08e      	sub	sp, #56	@ 0x38
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800d1bc:	617b      	str	r3, [r7, #20]
  return(result);
 800d1be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	f383 8810 	msr	PRIMASK, r3
}
 800d1cc:	46c0      	nop			@ (mov r8, r8)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4926      	ldr	r1, [pc, #152]	@ (800d274 <UART_EndRxTransfer+0xc4>)
 800d1da:	400a      	ands	r2, r1
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	f383 8810 	msr	PRIMASK, r3
}
 800d1e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d1ee:	623b      	str	r3, [r7, #32]
  return(result);
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fa:	f383 8810 	msr	PRIMASK, r3
}
 800d1fe:	46c0      	nop			@ (mov r8, r8)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	689a      	ldr	r2, [r3, #8]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	491b      	ldr	r1, [pc, #108]	@ (800d278 <UART_EndRxTransfer+0xc8>)
 800d20c:	400a      	ands	r2, r1
 800d20e:	609a      	str	r2, [r3, #8]
 800d210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d212:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d216:	f383 8810 	msr	PRIMASK, r3
}
 800d21a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d220:	2b01      	cmp	r3, #1
 800d222:	d118      	bne.n	800d256 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d224:	f3ef 8310 	mrs	r3, PRIMASK
 800d228:	60bb      	str	r3, [r7, #8]
  return(result);
 800d22a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d22e:	2301      	movs	r3, #1
 800d230:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f383 8810 	msr	PRIMASK, r3
}
 800d238:	46c0      	nop			@ (mov r8, r8)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2110      	movs	r1, #16
 800d246:	438a      	bics	r2, r1
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	f383 8810 	msr	PRIMASK, r3
}
 800d254:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	228c      	movs	r2, #140	@ 0x8c
 800d25a:	2120      	movs	r1, #32
 800d25c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d26a:	46c0      	nop			@ (mov r8, r8)
 800d26c:	46bd      	mov	sp, r7
 800d26e:	b00e      	add	sp, #56	@ 0x38
 800d270:	bd80      	pop	{r7, pc}
 800d272:	46c0      	nop			@ (mov r8, r8)
 800d274:	fffffedf 	.word	0xfffffedf
 800d278:	effffffe 	.word	0xeffffffe

0800d27c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b094      	sub	sp, #80	@ 0x50
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d288:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2220      	movs	r2, #32
 800d292:	4013      	ands	r3, r2
 800d294:	d16f      	bne.n	800d376 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800d296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d298:	225e      	movs	r2, #94	@ 0x5e
 800d29a:	2100      	movs	r1, #0
 800d29c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d29e:	f3ef 8310 	mrs	r3, PRIMASK
 800d2a2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d2a4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	f383 8810 	msr	PRIMASK, r3
}
 800d2b2:	46c0      	nop			@ (mov r8, r8)
 800d2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	493b      	ldr	r1, [pc, #236]	@ (800d3ac <UART_DMAReceiveCplt+0x130>)
 800d2c0:	400a      	ands	r2, r1
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2c8:	6a3b      	ldr	r3, [r7, #32]
 800d2ca:	f383 8810 	msr	PRIMASK, r3
}
 800d2ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d2d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2da:	2301      	movs	r3, #1
 800d2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e0:	f383 8810 	msr	PRIMASK, r3
}
 800d2e4:	46c0      	nop			@ (mov r8, r8)
 800d2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	689a      	ldr	r2, [r3, #8]
 800d2ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	438a      	bics	r2, r1
 800d2f4:	609a      	str	r2, [r3, #8]
 800d2f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fc:	f383 8810 	msr	PRIMASK, r3
}
 800d300:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d302:	f3ef 8310 	mrs	r3, PRIMASK
 800d306:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d30a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d30c:	2301      	movs	r3, #1
 800d30e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d312:	f383 8810 	msr	PRIMASK, r3
}
 800d316:	46c0      	nop			@ (mov r8, r8)
 800d318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	689a      	ldr	r2, [r3, #8]
 800d31e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2140      	movs	r1, #64	@ 0x40
 800d324:	438a      	bics	r2, r1
 800d326:	609a      	str	r2, [r3, #8]
 800d328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d32a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32e:	f383 8810 	msr	PRIMASK, r3
}
 800d332:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d336:	228c      	movs	r2, #140	@ 0x8c
 800d338:	2120      	movs	r1, #32
 800d33a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d340:	2b01      	cmp	r3, #1
 800d342:	d118      	bne.n	800d376 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d344:	f3ef 8310 	mrs	r3, PRIMASK
 800d348:	60fb      	str	r3, [r7, #12]
  return(result);
 800d34a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d34e:	2301      	movs	r3, #1
 800d350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	f383 8810 	msr	PRIMASK, r3
}
 800d358:	46c0      	nop			@ (mov r8, r8)
 800d35a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2110      	movs	r1, #16
 800d366:	438a      	bics	r2, r1
 800d368:	601a      	str	r2, [r3, #0]
 800d36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d36c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f383 8810 	msr	PRIMASK, r3
}
 800d374:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d378:	2200      	movs	r2, #0
 800d37a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d37c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d37e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d380:	2b01      	cmp	r3, #1
 800d382:	d109      	bne.n	800d398 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d386:	22c0      	movs	r2, #192	@ 0xc0
 800d388:	589b      	ldr	r3, [r3, r2]
 800d38a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d38c:	215c      	movs	r1, #92	@ 0x5c
 800d38e:	5a51      	ldrh	r1, [r2, r1]
 800d390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d392:	0010      	movs	r0, r2
 800d394:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d396:	e005      	b.n	800d3a4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800d398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d39a:	22a0      	movs	r2, #160	@ 0xa0
 800d39c:	589b      	ldr	r3, [r3, r2]
 800d39e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3a0:	0010      	movs	r0, r2
 800d3a2:	4798      	blx	r3
}
 800d3a4:	46c0      	nop			@ (mov r8, r8)
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	b014      	add	sp, #80	@ 0x50
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	fffffeff 	.word	0xfffffeff

0800d3b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d10b      	bne.n	800d3e4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	22c0      	movs	r2, #192	@ 0xc0
 800d3d0:	589b      	ldr	r3, [r3, r2]
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	215c      	movs	r1, #92	@ 0x5c
 800d3d6:	5a52      	ldrh	r2, [r2, r1]
 800d3d8:	0852      	lsrs	r2, r2, #1
 800d3da:	b291      	uxth	r1, r2
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	0010      	movs	r0, r2
 800d3e0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d3e2:	e005      	b.n	800d3f0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	229c      	movs	r2, #156	@ 0x9c
 800d3e8:	589b      	ldr	r3, [r3, r2]
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	0010      	movs	r0, r2
 800d3ee:	4798      	blx	r3
}
 800d3f0:	46c0      	nop			@ (mov r8, r8)
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	b004      	add	sp, #16
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d404:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2288      	movs	r2, #136	@ 0x88
 800d40a:	589b      	ldr	r3, [r3, r2]
 800d40c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	228c      	movs	r2, #140	@ 0x8c
 800d412:	589b      	ldr	r3, [r3, r2]
 800d414:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	2280      	movs	r2, #128	@ 0x80
 800d41e:	4013      	ands	r3, r2
 800d420:	2b80      	cmp	r3, #128	@ 0x80
 800d422:	d10a      	bne.n	800d43a <UART_DMAError+0x42>
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2b21      	cmp	r3, #33	@ 0x21
 800d428:	d107      	bne.n	800d43a <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2256      	movs	r2, #86	@ 0x56
 800d42e:	2100      	movs	r1, #0
 800d430:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	0018      	movs	r0, r3
 800d436:	f7ff fe7b 	bl	800d130 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	2240      	movs	r2, #64	@ 0x40
 800d442:	4013      	ands	r3, r2
 800d444:	2b40      	cmp	r3, #64	@ 0x40
 800d446:	d10a      	bne.n	800d45e <UART_DMAError+0x66>
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2b22      	cmp	r3, #34	@ 0x22
 800d44c:	d107      	bne.n	800d45e <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	225e      	movs	r2, #94	@ 0x5e
 800d452:	2100      	movs	r1, #0
 800d454:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	0018      	movs	r0, r3
 800d45a:	f7ff fea9 	bl	800d1b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	2290      	movs	r2, #144	@ 0x90
 800d462:	589b      	ldr	r3, [r3, r2]
 800d464:	2210      	movs	r2, #16
 800d466:	431a      	orrs	r2, r3
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2190      	movs	r1, #144	@ 0x90
 800d46c:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	22a4      	movs	r2, #164	@ 0xa4
 800d472:	589b      	ldr	r3, [r3, r2]
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	0010      	movs	r0, r2
 800d478:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d47a:	46c0      	nop			@ (mov r8, r8)
 800d47c:	46bd      	mov	sp, r7
 800d47e:	b006      	add	sp, #24
 800d480:	bd80      	pop	{r7, pc}

0800d482 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b084      	sub	sp, #16
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d48e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	225e      	movs	r2, #94	@ 0x5e
 800d494:	2100      	movs	r1, #0
 800d496:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2256      	movs	r2, #86	@ 0x56
 800d49c:	2100      	movs	r1, #0
 800d49e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	22a4      	movs	r2, #164	@ 0xa4
 800d4a4:	589b      	ldr	r3, [r3, r2]
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	0010      	movs	r0, r2
 800d4aa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4ac:	46c0      	nop			@ (mov r8, r8)
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	b004      	add	sp, #16
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800d4c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4c4:	617b      	str	r3, [r7, #20]
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f383 8810 	msr	PRIMASK, r3
}
 800d4d0:	46c0      	nop			@ (mov r8, r8)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2140      	movs	r1, #64	@ 0x40
 800d4de:	438a      	bics	r2, r1
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	f383 8810 	msr	PRIMASK, r3
}
 800d4ec:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2288      	movs	r2, #136	@ 0x88
 800d4f2:	2120      	movs	r1, #32
 800d4f4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2298      	movs	r2, #152	@ 0x98
 800d500:	589b      	ldr	r3, [r3, r2]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	0010      	movs	r0, r2
 800d506:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d508:	46c0      	nop			@ (mov r8, r8)
 800d50a:	46bd      	mov	sp, r7
 800d50c:	b006      	add	sp, #24
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d518:	46c0      	nop			@ (mov r8, r8)
 800d51a:	46bd      	mov	sp, r7
 800d51c:	b002      	add	sp, #8
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d528:	46c0      	nop			@ (mov r8, r8)
 800d52a:	46bd      	mov	sp, r7
 800d52c:	b002      	add	sp, #8
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d538:	46c0      	nop			@ (mov r8, r8)
 800d53a:	46bd      	mov	sp, r7
 800d53c:	b002      	add	sp, #8
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <memset>:
 800d540:	0003      	movs	r3, r0
 800d542:	1882      	adds	r2, r0, r2
 800d544:	4293      	cmp	r3, r2
 800d546:	d100      	bne.n	800d54a <memset+0xa>
 800d548:	4770      	bx	lr
 800d54a:	7019      	strb	r1, [r3, #0]
 800d54c:	3301      	adds	r3, #1
 800d54e:	e7f9      	b.n	800d544 <memset+0x4>

0800d550 <__libc_init_array>:
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	2600      	movs	r6, #0
 800d554:	4c0c      	ldr	r4, [pc, #48]	@ (800d588 <__libc_init_array+0x38>)
 800d556:	4d0d      	ldr	r5, [pc, #52]	@ (800d58c <__libc_init_array+0x3c>)
 800d558:	1b64      	subs	r4, r4, r5
 800d55a:	10a4      	asrs	r4, r4, #2
 800d55c:	42a6      	cmp	r6, r4
 800d55e:	d109      	bne.n	800d574 <__libc_init_array+0x24>
 800d560:	2600      	movs	r6, #0
 800d562:	f000 f823 	bl	800d5ac <_init>
 800d566:	4c0a      	ldr	r4, [pc, #40]	@ (800d590 <__libc_init_array+0x40>)
 800d568:	4d0a      	ldr	r5, [pc, #40]	@ (800d594 <__libc_init_array+0x44>)
 800d56a:	1b64      	subs	r4, r4, r5
 800d56c:	10a4      	asrs	r4, r4, #2
 800d56e:	42a6      	cmp	r6, r4
 800d570:	d105      	bne.n	800d57e <__libc_init_array+0x2e>
 800d572:	bd70      	pop	{r4, r5, r6, pc}
 800d574:	00b3      	lsls	r3, r6, #2
 800d576:	58eb      	ldr	r3, [r5, r3]
 800d578:	4798      	blx	r3
 800d57a:	3601      	adds	r6, #1
 800d57c:	e7ee      	b.n	800d55c <__libc_init_array+0xc>
 800d57e:	00b3      	lsls	r3, r6, #2
 800d580:	58eb      	ldr	r3, [r5, r3]
 800d582:	4798      	blx	r3
 800d584:	3601      	adds	r6, #1
 800d586:	e7f2      	b.n	800d56e <__libc_init_array+0x1e>
 800d588:	0800e03c 	.word	0x0800e03c
 800d58c:	0800e03c 	.word	0x0800e03c
 800d590:	0800e040 	.word	0x0800e040
 800d594:	0800e03c 	.word	0x0800e03c

0800d598 <memcpy>:
 800d598:	2300      	movs	r3, #0
 800d59a:	b510      	push	{r4, lr}
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d100      	bne.n	800d5a2 <memcpy+0xa>
 800d5a0:	bd10      	pop	{r4, pc}
 800d5a2:	5ccc      	ldrb	r4, [r1, r3]
 800d5a4:	54c4      	strb	r4, [r0, r3]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	e7f8      	b.n	800d59c <memcpy+0x4>
	...

0800d5ac <_init>:
 800d5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ae:	46c0      	nop			@ (mov r8, r8)
 800d5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5b2:	bc08      	pop	{r3}
 800d5b4:	469e      	mov	lr, r3
 800d5b6:	4770      	bx	lr

0800d5b8 <_fini>:
 800d5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ba:	46c0      	nop			@ (mov r8, r8)
 800d5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5be:	bc08      	pop	{r3}
 800d5c0:	469e      	mov	lr, r3
 800d5c2:	4770      	bx	lr
