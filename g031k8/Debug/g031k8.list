
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800466c  0800466c  0000566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004794  08004794  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004798  08004798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800479c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  2000000c  080047a8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080047a8  000063b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128c2  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002287  00000000  00000000  000188f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c83  00000000  00000000  0001bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001fb2  00000000  00000000  0001c7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012770  00000000  00000000  0001e795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099f7a  00000000  00000000  00030f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cae7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a20  00000000  00000000  000caec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ce8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004654 	.word	0x08004654

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004654 	.word	0x08004654

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
#include "config.h"

void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2410      	movs	r4, #16
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2338      	movs	r3, #56	@ 0x38
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f004 f8cf 	bl	80045fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f004 f8c8 	bl	80045fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fe5d 	bl	8002130 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2240      	movs	r2, #64	@ 0x40
 8000490:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2208      	movs	r2, #8
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22c0      	movs	r2, #192	@ 0xc0
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0592      	lsls	r2, r2, #22
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fe7f 	bl	80021c8 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ce:	f000 fb37 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 f984 	bl	80027fc <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004f8:	f000 fb22 	bl	8000b40 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f004 f872 	bl	80045fc <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b4a      	ldr	r3, [pc, #296]	@ (8000644 <MX_ADC1_Init+0x140>)
 800051a:	4a4b      	ldr	r2, [pc, #300]	@ (8000648 <MX_ADC1_Init+0x144>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b47      	ldr	r3, [pc, #284]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <MX_ADC1_Init+0x140>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000532:	4b44      	ldr	r3, [pc, #272]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0392      	lsls	r2, r2, #14
 8000538:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_ADC1_Init+0x140>)
 800053c:	2208      	movs	r2, #8
 800053e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000540:	4b40      	ldr	r3, [pc, #256]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000548:	2200      	movs	r2, #0
 800054a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054c:	4b3d      	ldr	r3, [pc, #244]	@ (8000644 <MX_ADC1_Init+0x140>)
 800054e:	2200      	movs	r2, #0
 8000550:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000552:	4b3c      	ldr	r3, [pc, #240]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000554:	2204      	movs	r2, #4
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <MX_ADC1_Init+0x140>)
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000560:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056c:	4b35      	ldr	r3, [pc, #212]	@ (8000644 <MX_ADC1_Init+0x140>)
 800056e:	222c      	movs	r2, #44	@ 0x2c
 8000570:	2100      	movs	r1, #0
 8000572:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000574:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800057a:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <MX_ADC1_Init+0x140>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000580:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000586:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000588:	223c      	movs	r2, #60	@ 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058e:	4b2d      	ldr	r3, [pc, #180]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fe5e 	bl	8001258 <HAL_ADC_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 face 	bl	8000b40 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fff3 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005c6:	f000 fabb 	bl	8000b40 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ADC1_Init+0x148>)
 80005ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2204      	movs	r2, #4
 80005d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 ffe0 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80005ec:	f000 faa8 	bl	8000b40 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0x14c>)
 80005f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2208      	movs	r2, #8
 80005fa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f000 ffcd 	bl	80015a8 <HAL_ADC_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000612:	f000 fa95 	bl	8000b40 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <MX_ADC1_Init+0x150>)
 800061a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	220c      	movs	r2, #12
 8000620:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_ADC1_Init+0x140>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 ffba 	bl	80015a8 <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000638:	f000 fa82 	bl	8000b40 <Error_Handler>
  }
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40012400 	.word	0x40012400
 800064c:	04000002 	.word	0x04000002
 8000650:	10000010 	.word	0x10000010
 8000654:	14000020 	.word	0x14000020

08000658 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	231c      	movs	r3, #28
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f003 ffc8 	bl	80045fc <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <MX_TIM14_Init+0x9c>)
 8000670:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <MX_TIM14_Init+0xa0>)
 8000682:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000694:	0018      	movs	r0, r3
 8000696:	f002 fa5b 	bl	8002b50 <HAL_TIM_Base_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fa4f 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fb27 	bl	8002cf8 <HAL_TIM_PWM_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80006ae:	f000 fa47 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2260      	movs	r2, #96	@ 0x60
 80006b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 45;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	222d      	movs	r2, #45	@ 0x2d
 80006bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ca:	1d39      	adds	r1, r7, #4
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 fd09 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80006da:	f000 fa31 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80006de:	4b04      	ldr	r3, [pc, #16]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fb3b 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b008      	add	sp, #32
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	200000e8 	.word	0x200000e8
 80006f4:	40002000 	.word	0x40002000
 80006f8:	000003ff 	.word	0x000003ff

080006fc <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	2334      	movs	r3, #52	@ 0x34
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	231c      	movs	r3, #28
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f003 ff75 	bl	80045fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2334      	movs	r3, #52	@ 0x34
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f003 ff6e 	bl	80045fc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000720:	4b3a      	ldr	r3, [pc, #232]	@ (800080c <MX_TIM16_Init+0x110>)
 8000722:	4a3b      	ldr	r2, [pc, #236]	@ (8000810 <MX_TIM16_Init+0x114>)
 8000724:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000726:	4b39      	ldr	r3, [pc, #228]	@ (800080c <MX_TIM16_Init+0x110>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b37      	ldr	r3, [pc, #220]	@ (800080c <MX_TIM16_Init+0x110>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000732:	4b36      	ldr	r3, [pc, #216]	@ (800080c <MX_TIM16_Init+0x110>)
 8000734:	22ff      	movs	r2, #255	@ 0xff
 8000736:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000738:	4b34      	ldr	r3, [pc, #208]	@ (800080c <MX_TIM16_Init+0x110>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000740:	4b32      	ldr	r3, [pc, #200]	@ (800080c <MX_TIM16_Init+0x110>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000746:	4b31      	ldr	r3, [pc, #196]	@ (800080c <MX_TIM16_Init+0x110>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800074c:	4b2f      	ldr	r3, [pc, #188]	@ (800080c <MX_TIM16_Init+0x110>)
 800074e:	0018      	movs	r0, r3
 8000750:	f002 f9fe 	bl	8002b50 <HAL_TIM_Base_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f9f2 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800075c:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_TIM16_Init+0x110>)
 800075e:	0018      	movs	r0, r3
 8000760:	f002 fa5c 	bl	8002c1c <HAL_TIM_OC_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f9ea 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800076c:	2134      	movs	r1, #52	@ 0x34
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	22ff      	movs	r2, #255	@ 0xff
 8000778:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1879      	adds	r1, r7, r1
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_TIM16_Init+0x110>)
 800079c:	2200      	movs	r2, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fc42 	bl	8003028 <HAL_TIM_OC_ConfigChannel>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80007a8:	f000 f9ca 	bl	8000b40 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_TIM16_Init+0x110>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_TIM16_Init+0x110>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2108      	movs	r1, #8
 80007b8:	430a      	orrs	r2, r1
 80007ba:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007da:	003b      	movs	r3, r7
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007ee:	003a      	movs	r2, r7
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_TIM16_Init+0x110>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f003 f943 	bl	8003a80 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80007fe:	f000 f99f 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b014      	add	sp, #80	@ 0x50
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	200001a4 	.word	0x200001a4
 8000810:	40014400 	.word	0x40014400

08000814 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	2334      	movs	r3, #52	@ 0x34
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	231c      	movs	r3, #28
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f003 fee9 	bl	80045fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2334      	movs	r3, #52	@ 0x34
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f003 fee2 	bl	80045fc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000838:	4b3a      	ldr	r3, [pc, #232]	@ (8000924 <MX_TIM17_Init+0x110>)
 800083a:	4a3b      	ldr	r2, [pc, #236]	@ (8000928 <MX_TIM17_Init+0x114>)
 800083c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800083e:	4b39      	ldr	r3, [pc, #228]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800084a:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <MX_TIM17_Init+0x110>)
 800084c:	4a37      	ldr	r2, [pc, #220]	@ (800092c <MX_TIM17_Init+0x118>)
 800084e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000850:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	0052      	lsls	r2, r2, #1
 8000856:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000858:	4b32      	ldr	r3, [pc, #200]	@ (8000924 <MX_TIM17_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000864:	4b2f      	ldr	r3, [pc, #188]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000866:	0018      	movs	r0, r3
 8000868:	f002 f972 	bl	8002b50 <HAL_TIM_Base_Init>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000870:	f000 f966 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000874:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000876:	0018      	movs	r0, r3
 8000878:	f002 f9d0 	bl	8002c1c <HAL_TIM_OC_Init>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f95e 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000884:	2134      	movs	r1, #52	@ 0x34
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 65535;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	4a27      	ldr	r2, [pc, #156]	@ (800092c <MX_TIM17_Init+0x118>)
 8000890:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b0:	1879      	adds	r1, r7, r1
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 fbb6 	bl	8003028 <HAL_TIM_OC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 80008c0:	f000 f93e 	bl	8000b40 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	699a      	ldr	r2, [r3, #24]
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2108      	movs	r1, #8
 80008d0:	430a      	orrs	r2, r1
 80008d2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d4:	003b      	movs	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008da:	003b      	movs	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e0:	003b      	movs	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008e6:	003b      	movs	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ec:	003b      	movs	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f2:	003b      	movs	r3, r7
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0192      	lsls	r2, r2, #6
 80008f8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000900:	003b      	movs	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000906:	003a      	movs	r2, r7
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_TIM17_Init+0x110>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f003 f8b7 	bl	8003a80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000916:	f000 f913 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b014      	add	sp, #80	@ 0x50
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	20000260 	.word	0x20000260
 8000928:	40014800 	.word	0x40014800
 800092c:	0000ffff 	.word	0x0000ffff

08000930 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000936:	4a17      	ldr	r2, [pc, #92]	@ (8000994 <MX_USART2_UART_Init+0x64>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800093c:	22e1      	movs	r2, #225	@ 0xe1
 800093e:	0252      	lsls	r2, r2, #9
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800097a:	0018      	movs	r0, r3
 800097c:	f003 f93c 	bl	8003bf8 <HAL_UART_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f8dc 	bl	8000b40 <Error_Handler>
  }
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	2000031c 	.word	0x2000031c
 8000994:	40004400 	.word	0x40004400

08000998 <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_DMA_Init+0x48>)
 80009a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_DMA_Init+0x48>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <MX_DMA_Init+0x48>)
 80009ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2009      	movs	r0, #9
 80009bc:	f001 f878 	bl	8001ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009c0:	2009      	movs	r0, #9
 80009c2:	f001 f88a 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */ //- i think to do with scan mode adc
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	200b      	movs	r0, #11
 80009cc:	f001 f870 	bl	8001ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 80009d0:	200b      	movs	r0, #11
 80009d2:	f001 f882 	bl	8001ada <HAL_NVIC_EnableIRQ>

}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b089      	sub	sp, #36	@ 0x24
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	240c      	movs	r4, #12
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	0018      	movs	r0, r3
 80009f0:	2314      	movs	r3, #20
 80009f2:	001a      	movs	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f003 fe01 	bl	80045fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000b34 <MX_GPIO_Init+0x150>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000b34 <MX_GPIO_Init+0x150>)
 8000a00:	2104      	movs	r1, #4
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a06:	4b4b      	ldr	r3, [pc, #300]	@ (8000b34 <MX_GPIO_Init+0x150>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	4b48      	ldr	r3, [pc, #288]	@ (8000b34 <MX_GPIO_Init+0x150>)
 8000a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a16:	4b47      	ldr	r3, [pc, #284]	@ (8000b34 <MX_GPIO_Init+0x150>)
 8000a18:	2120      	movs	r1, #32
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a1e:	4b45      	ldr	r3, [pc, #276]	@ (8000b34 <MX_GPIO_Init+0x150>)
 8000a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a22:	2220      	movs	r2, #32
 8000a24:	4013      	ands	r3, r2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b42      	ldr	r3, [pc, #264]	@ (8000b34 <MX_GPIO_Init+0x150>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2e:	4b41      	ldr	r3, [pc, #260]	@ (8000b34 <MX_GPIO_Init+0x150>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a36:	4b3f      	ldr	r3, [pc, #252]	@ (8000b34 <MX_GPIO_Init+0x150>)
 8000a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a42:	4b3d      	ldr	r3, [pc, #244]	@ (8000b38 <MX_GPIO_Init+0x154>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	@ 0x40
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 fb53 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2204      	movs	r2, #4
 8000a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2288      	movs	r2, #136	@ 0x88
 8000a58:	0352      	lsls	r2, r2, #13
 8000a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	4a35      	ldr	r2, [pc, #212]	@ (8000b3c <MX_GPIO_Init+0x158>)
 8000a66:	0019      	movs	r1, r3
 8000a68:	0010      	movs	r0, r2
 8000a6a:	f001 f9df 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */ // - on-board green LED
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2240      	movs	r2, #64	@ 0x40
 8000a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2201      	movs	r2, #1
 8000a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	4a2d      	ldr	r2, [pc, #180]	@ (8000b38 <MX_GPIO_Init+0x154>)
 8000a84:	0019      	movs	r1, r3
 8000a86:	0010      	movs	r0, r2
 8000a88:	f001 f9d0 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH0_Pin */
  GPIO_InitStruct.Pin = ADC_CH0_Pin;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2203      	movs	r2, #3
 8000a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH0_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	193a      	adds	r2, r7, r4
 8000aa0:	23a0      	movs	r3, #160	@ 0xa0
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 f9c0 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH1_Pin */
  GPIO_InitStruct.Pin = ADC_CH1_Pin;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2202      	movs	r2, #2
 8000ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000abe:	193a      	adds	r2, r7, r4
 8000ac0:	23a0      	movs	r3, #160	@ 0xa0
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f9b0 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH4_Pin */
  GPIO_InitStruct.Pin = ADC_CH4_Pin;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2210      	movs	r2, #16
 8000ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH4_GPIO_Port, &GPIO_InitStruct);
 8000ade:	193a      	adds	r2, r7, r4
 8000ae0:	23a0      	movs	r3, #160	@ 0xa0
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f9a0 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH5_Pin */
  GPIO_InitStruct.Pin = ADC_CH5_Pin;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2220      	movs	r2, #32
 8000af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2203      	movs	r2, #3
 8000af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH5_GPIO_Port, &GPIO_InitStruct);
 8000afe:	193a      	adds	r2, r7, r4
 8000b00:	23a0      	movs	r3, #160	@ 0xa0
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 f990 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM14_CH1_Pin */
  GPIO_InitStruct.Pin = TIM14_CH1_Pin;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2280      	movs	r2, #128	@ 0x80
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2201      	movs	r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIM14_CH1_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	193a      	adds	r2, r7, r4
 8000b20:	23a0      	movs	r3, #160	@ 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 f980 	bl	8001e2c <HAL_GPIO_Init>
}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b009      	add	sp, #36	@ 0x24
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	50000800 	.word	0x50000800
 8000b3c:	50001400 	.word	0x50001400

08000b40 <Error_Handler>:

void Error_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <main>:
TIM_HandleTypeDef htim17;

UART_HandleTypeDef huart2;

int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 f9fe 	bl	8000f50 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f7ff fc78 	bl	8000448 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f7ff ff44 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5c:	f7ff ff1c 	bl	8000998 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b60:	f7ff fee6 	bl	8000930 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b64:	f7ff fcce 	bl	8000504 <MX_ADC1_Init>
  MX_TIM14_Init();
 8000b68:	f7ff fd76 	bl	8000658 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000b6c:	f7ff fdc6 	bl	80006fc <MX_TIM16_Init>
  MX_TIM17_Init();
 8000b70:	f7ff fe50 	bl	8000814 <MX_TIM17_Init>

  while (1)
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	e7fd      	b.n	8000b74 <main+0x28>

08000b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	2180      	movs	r1, #128	@ 0x80
 8000b9e:	0549      	lsls	r1, r1, #21
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <HAL_MspInit+0x44>)
 8000ba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ba8:	2380      	movs	r3, #128	@ 0x80
 8000baa:	055b      	lsls	r3, r3, #21
 8000bac:	4013      	ands	r3, r2
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b08b      	sub	sp, #44	@ 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	2414      	movs	r4, #20
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f003 fd12 	bl	80045fc <memset>
  if(hadc->Instance==ADC1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8000c94 <HAL_ADC_MspInit+0xd4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d154      	bne.n	8000c8c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <HAL_ADC_MspInit+0xd8>)
 8000be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000be6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c98 <HAL_ADC_MspInit+0xd8>)
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0349      	lsls	r1, r1, #13
 8000bec:	430a      	orrs	r2, r1
 8000bee:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bf0:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <HAL_ADC_MspInit+0xd8>)
 8000bf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	035b      	lsls	r3, r3, #13
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <HAL_ADC_MspInit+0xd8>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c02:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <HAL_ADC_MspInit+0xd8>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <HAL_ADC_MspInit+0xd8>)
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2233      	movs	r2, #51	@ 0x33
 8000c1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2203      	movs	r2, #3
 8000c20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	193a      	adds	r2, r7, r4
 8000c2a:	23a0      	movs	r3, #160	@ 0xa0
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 f8fb 	bl	8001e2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c38:	4a19      	ldr	r2, [pc, #100]	@ (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c3e:	2205      	movs	r2, #5
 8000c40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c50:	2280      	movs	r2, #128	@ 0x80
 8000c52:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c56:	2280      	movs	r2, #128	@ 0x80
 8000c58:	0052      	lsls	r2, r2, #1
 8000c5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c64:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c70:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 ff4e 	bl	8001b14 <HAL_DMA_Init>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000c7c:	f7ff ff60 	bl	8000b40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c84:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b00b      	add	sp, #44	@ 0x2c
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	40012400 	.word	0x40012400
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	2000008c 	.word	0x2000008c
 8000ca0:	40020008 	.word	0x40020008

08000ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <HAL_TIM_Base_MspInit+0xa8>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000cb6:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cba:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	0209      	lsls	r1, r1, #8
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cc4:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	4013      	ands	r3, r2
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000cd2:	e036      	b.n	8000d42 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d54 <HAL_TIM_Base_MspInit+0xb0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d116      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	0289      	lsls	r1, r1, #10
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000cee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	029b      	lsls	r3, r3, #10
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2015      	movs	r0, #21
 8000d00:	f000 fed6 	bl	8001ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000d04:	2015      	movs	r0, #21
 8000d06:	f000 fee8 	bl	8001ada <HAL_NVIC_EnableIRQ>
}
 8000d0a:	e01a      	b.n	8000d42 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a11      	ldr	r2, [pc, #68]	@ (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d115      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000d18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000d1c:	2180      	movs	r1, #128	@ 0x80
 8000d1e:	02c9      	lsls	r1, r1, #11
 8000d20:	430a      	orrs	r2, r1
 8000d22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_TIM_Base_MspInit+0xac>)
 8000d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d28:	2380      	movs	r3, #128	@ 0x80
 8000d2a:	02db      	lsls	r3, r3, #11
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2016      	movs	r0, #22
 8000d38:	f000 feba 	bl	8001ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000d3c:	2016      	movs	r0, #22
 8000d3e:	f000 fecc 	bl	8001ada <HAL_NVIC_EnableIRQ>
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b006      	add	sp, #24
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	40002000 	.word	0x40002000
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40014400 	.word	0x40014400
 8000d58:	40014800 	.word	0x40014800

08000d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	240c      	movs	r4, #12
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	2314      	movs	r3, #20
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f003 fc44 	bl	80045fc <memset>
  if(htim->Instance==TIM14)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <HAL_TIM_MspPostInit+0x70>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d122      	bne.n	8000dc4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <HAL_TIM_MspPostInit+0x74>)
 8000d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <HAL_TIM_MspPostInit+0x74>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	430a      	orrs	r2, r1
 8000d88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_TIM_MspPostInit+0x74>)
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d96:	0021      	movs	r1, r4
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2280      	movs	r2, #128	@ 0x80
 8000d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2202      	movs	r2, #2
 8000da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2204      	movs	r2, #4
 8000db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	23a0      	movs	r3, #160	@ 0xa0
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f001 f834 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b009      	add	sp, #36	@ 0x24
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	40002000 	.word	0x40002000
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b08b      	sub	sp, #44	@ 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2414      	movs	r4, #20
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	0018      	movs	r0, r3
 8000de2:	2314      	movs	r3, #20
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f003 fc08 	bl	80045fc <memset>
  if(huart->Instance==USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d130      	bne.n	8000e58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000dfc:	2180      	movs	r1, #128	@ 0x80
 8000dfe:	0289      	lsls	r1, r1, #10
 8000e00:	430a      	orrs	r2, r1
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e04:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e22:	2201      	movs	r2, #1
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000e2a:	0021      	movs	r1, r4
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2202      	movs	r2, #2
 8000e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2201      	movs	r2, #1
 8000e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	187a      	adds	r2, r7, r1
 8000e4c:	23a0      	movs	r3, #160	@ 0xa0
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 ffea 	bl	8001e2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b00b      	add	sp, #44	@ 0x2c
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	40004400 	.word	0x40004400
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f8c8 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	46c0      	nop			@ (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <DMA1_Channel1_IRQHandler+0x14>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fec0 	bl	8001c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	2000008c 	.word	0x2000008c

08000eb4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <TIM16_IRQHandler+0x14>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f001 ff84 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	200001a4 	.word	0x200001a4

08000ed8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000edc:	4b03      	ldr	r3, [pc, #12]	@ (8000eec <TIM17_IRQHandler+0x14>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 ff78 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	20000260 	.word	0x20000260

08000ef0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000efe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f00:	f7ff fff6 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f48 <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f2a:	f003 fb6f 	bl	800460c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f2e:	f7ff fe0d 	bl	8000b4c <main>

08000f32 <LoopForever>:

LoopForever:
  b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
  ldr   r0, =_estack
 8000f34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f40:	0800479c 	.word	0x0800479c
  ldr r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f48:	200003b4 	.word	0x200003b4

08000f4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <HAL_Init+0x3c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_Init+0x3c>)
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0049      	lsls	r1, r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f810 	bl	8000f90 <HAL_InitTick>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e001      	b.n	8000f80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fdfc 	bl	8000b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <HAL_InitTick+0x88>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02b      	beq.n	8001000 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_InitTick+0x8c>)
 8000faa:	681c      	ldr	r4, [r3, #0]
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_InitTick+0x88>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	23fa      	movs	r3, #250	@ 0xfa
 8000fb4:	0098      	lsls	r0, r3, #2
 8000fb6:	f7ff f8a5 	bl	8000104 <__udivsi3>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	f7ff f8a0 	bl	8000104 <__udivsi3>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 fd97 	bl	8001afa <HAL_SYSTICK_Config>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d112      	bne.n	8000ff6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d80a      	bhi.n	8000fec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	425b      	negs	r3, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 fd66 	bl	8001ab0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <HAL_InitTick+0x90>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e00d      	b.n	8001008 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e008      	b.n	8001008 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e003      	b.n	8001008 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	781b      	ldrb	r3, [r3, #0]
}
 800100e:	0018      	movs	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	b005      	add	sp, #20
 8001014:	bd90      	pop	{r4, r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	20000008 	.word	0x20000008
 800101c:	20000000 	.word	0x20000000
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	001a      	movs	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	18d2      	adds	r2, r2, r3
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_IncTick+0x20>)
 8001036:	601a      	str	r2, [r3, #0]
}
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	20000008 	.word	0x20000008
 8001044:	200003b0 	.word	0x200003b0

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	@ (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	200003b0 	.word	0x200003b0

0800105c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800106c:	401a      	ands	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]
}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	fe3fffff 	.word	0xfe3fffff

08001084 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	23e0      	movs	r3, #224	@ 0xe0
 8001092:	045b      	lsls	r3, r3, #17
 8001094:	4013      	ands	r3, r2
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}

0800109e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	2104      	movs	r1, #4
 80010b2:	400a      	ands	r2, r1
 80010b4:	2107      	movs	r1, #7
 80010b6:	4091      	lsls	r1, r2
 80010b8:	000a      	movs	r2, r1
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	401a      	ands	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2104      	movs	r1, #4
 80010c2:	400b      	ands	r3, r1
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4099      	lsls	r1, r3
 80010c8:	000b      	movs	r3, r1
 80010ca:	431a      	orrs	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	2104      	movs	r1, #4
 80010ea:	400a      	ands	r2, r1
 80010ec:	2107      	movs	r1, #7
 80010ee:	4091      	lsls	r1, r2
 80010f0:	000a      	movs	r2, r1
 80010f2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2104      	movs	r1, #4
 80010f8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010fa:	40da      	lsrs	r2, r3
 80010fc:	0013      	movs	r3, r2
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}

08001106 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	211f      	movs	r1, #31
 800111a:	400a      	ands	r2, r1
 800111c:	210f      	movs	r1, #15
 800111e:	4091      	lsls	r1, r2
 8001120:	000a      	movs	r2, r1
 8001122:	43d2      	mvns	r2, r2
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0e9b      	lsrs	r3, r3, #26
 800112a:	210f      	movs	r1, #15
 800112c:	4019      	ands	r1, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	201f      	movs	r0, #31
 8001132:	4003      	ands	r3, r0
 8001134:	4099      	lsls	r1, r3
 8001136:	000b      	movs	r3, r1
 8001138:	431a      	orrs	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b004      	add	sp, #16
 8001144:	bd80      	pop	{r7, pc}

08001146 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	035b      	lsls	r3, r3, #13
 8001158:	0b5b      	lsrs	r3, r3, #13
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}

08001168 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	0352      	lsls	r2, r2, #13
 800117a:	0b52      	lsrs	r2, r2, #13
 800117c:	43d2      	mvns	r2, r2
 800117e:	401a      	ands	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	0212      	lsls	r2, r2, #8
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	401a      	ands	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	400b      	ands	r3, r1
 80011ac:	4904      	ldr	r1, [pc, #16]	@ (80011c0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80011ae:	400b      	ands	r3, r1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	07ffff00 	.word	0x07ffff00

080011c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	2280      	movs	r2, #128	@ 0x80
 80011d6:	0552      	lsls	r2, r2, #21
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	6fffffe8 	.word	0x6fffffe8

080011ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	055b      	lsls	r3, r3, #21
 80011fc:	401a      	ands	r2, r3
 80011fe:	2380      	movs	r3, #128	@ 0x80
 8001200:	055b      	lsls	r3, r3, #21
 8001202:	429a      	cmp	r2, r3
 8001204:	d101      	bne.n	800120a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800120a:	2300      	movs	r3, #0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2201      	movs	r2, #1
 8001222:	4013      	ands	r3, r2
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <LL_ADC_IsEnabled+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_ADC_IsEnabled+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}

08001236 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2204      	movs	r2, #4
 8001244:	4013      	ands	r3, r2
 8001246:	2b04      	cmp	r3, #4
 8001248:	d101      	bne.n	800124e <LL_ADC_REG_IsConversionOngoing+0x18>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800124e:	2300      	movs	r3, #0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	231f      	movs	r3, #31
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e17f      	b.n	800157e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10a      	bne.n	800129c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff fc99 	bl	8000bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2254      	movs	r2, #84	@ 0x54
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff ffa3 	bl	80011ec <LL_ADC_IsInternalRegulatorEnabled>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d115      	bne.n	80012d6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff ff88 	bl	80011c4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012b4:	4bb4      	ldr	r3, [pc, #720]	@ (8001588 <HAL_ADC_Init+0x330>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	49b4      	ldr	r1, [pc, #720]	@ (800158c <HAL_ADC_Init+0x334>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7fe ff22 	bl	8000104 <__udivsi3>
 80012c0:	0003      	movs	r3, r0
 80012c2:	3301      	adds	r3, #1
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012c8:	e002      	b.n	80012d0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff ff86 	bl	80011ec <LL_ADC_IsInternalRegulatorEnabled>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d10f      	bne.n	8001304 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e8:	2210      	movs	r2, #16
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f4:	2201      	movs	r2, #1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80012fc:	231f      	movs	r3, #31
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ff94 	bl	8001236 <LL_ADC_REG_IsConversionOngoing>
 800130e:	0003      	movs	r3, r0
 8001310:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	2210      	movs	r2, #16
 8001318:	4013      	ands	r3, r2
 800131a:	d000      	beq.n	800131e <HAL_ADC_Init+0xc6>
 800131c:	e122      	b.n	8001564 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d000      	beq.n	8001326 <HAL_ADC_Init+0xce>
 8001324:	e11e      	b.n	8001564 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	4a99      	ldr	r2, [pc, #612]	@ (8001590 <HAL_ADC_Init+0x338>)
 800132c:	4013      	ands	r3, r2
 800132e:	2202      	movs	r2, #2
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff ff6a 	bl	8001214 <LL_ADC_IsEnabled>
 8001340:	1e03      	subs	r3, r0, #0
 8001342:	d000      	beq.n	8001346 <HAL_ADC_Init+0xee>
 8001344:	e0ad      	b.n	80014a2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7e1b      	ldrb	r3, [r3, #24]
 800134e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001350:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e5b      	ldrb	r3, [r3, #25]
 8001356:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001358:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7e9b      	ldrb	r3, [r3, #26]
 800135e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001360:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <HAL_ADC_Init+0x118>
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	015b      	lsls	r3, r3, #5
 800136e:	e000      	b.n	8001372 <HAL_ADC_Init+0x11a>
 8001370:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001372:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001378:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	da04      	bge.n	800138c <HAL_ADC_Init+0x134>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	e001      	b.n	8001390 <HAL_ADC_Init+0x138>
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001390:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	212c      	movs	r1, #44	@ 0x2c
 8001396:	5c5b      	ldrb	r3, [r3, r1]
 8001398:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800139a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2220      	movs	r2, #32
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d115      	bne.n	80013d8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e9b      	ldrb	r3, [r3, #26]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	0252      	lsls	r2, r2, #9
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	e00b      	b.n	80013d8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c4:	2220      	movs	r2, #32
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d0:	2201      	movs	r2, #1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00a      	beq.n	80013f6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013e4:	23e0      	movs	r3, #224	@ 0xe0
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013ee:	4313      	orrs	r3, r2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a65      	ldr	r2, [pc, #404]	@ (8001594 <HAL_ADC_Init+0x33c>)
 80013fe:	4013      	ands	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	430a      	orrs	r2, r1
 800140a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	0f9b      	lsrs	r3, r3, #30
 8001412:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001418:	4313      	orrs	r3, r2
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	223c      	movs	r2, #60	@ 0x3c
 8001424:	5c9b      	ldrb	r3, [r3, r2]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d111      	bne.n	800144e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	0f9b      	lsrs	r3, r3, #30
 8001430:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001436:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800143c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001442:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	2201      	movs	r2, #1
 800144a:	4313      	orrs	r3, r2
 800144c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	4a50      	ldr	r2, [pc, #320]	@ (8001598 <HAL_ADC_Init+0x340>)
 8001456:	4013      	ands	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	430a      	orrs	r2, r1
 8001462:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	23c0      	movs	r3, #192	@ 0xc0
 800146a:	061b      	lsls	r3, r3, #24
 800146c:	429a      	cmp	r2, r3
 800146e:	d018      	beq.n	80014a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	429a      	cmp	r2, r3
 800147a:	d012      	beq.n	80014a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	061b      	lsls	r3, r3, #24
 8001484:	429a      	cmp	r2, r3
 8001486:	d00c      	beq.n	80014a2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001488:	4b44      	ldr	r3, [pc, #272]	@ (800159c <HAL_ADC_Init+0x344>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a44      	ldr	r2, [pc, #272]	@ (80015a0 <HAL_ADC_Init+0x348>)
 800148e:	4013      	ands	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	23f0      	movs	r3, #240	@ 0xf0
 8001498:	039b      	lsls	r3, r3, #14
 800149a:	401a      	ands	r2, r3
 800149c:	4b3f      	ldr	r3, [pc, #252]	@ (800159c <HAL_ADC_Init+0x344>)
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014aa:	001a      	movs	r2, r3
 80014ac:	2100      	movs	r1, #0
 80014ae:	f7ff fdf6 	bl	800109e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ba:	493a      	ldr	r1, [pc, #232]	@ (80015a4 <HAL_ADC_Init+0x34c>)
 80014bc:	001a      	movs	r2, r3
 80014be:	f7ff fdee 	bl	800109e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2110      	movs	r1, #16
 80014d6:	4249      	negs	r1, r1
 80014d8:	430a      	orrs	r2, r1
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
 80014dc:	e018      	b.n	8001510 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	039b      	lsls	r3, r3, #14
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d112      	bne.n	8001510 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	221c      	movs	r2, #28
 80014fa:	4013      	ands	r3, r2
 80014fc:	2210      	movs	r2, #16
 80014fe:	4252      	negs	r2, r2
 8001500:	409a      	lsls	r2, r3
 8001502:	0011      	movs	r1, r2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2100      	movs	r1, #0
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff fdde 	bl	80010d8 <LL_ADC_GetSamplingTimeCommonChannels>
 800151c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001522:	429a      	cmp	r2, r3
 8001524:	d10b      	bne.n	800153e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	2203      	movs	r2, #3
 8001532:	4393      	bics	r3, r2
 8001534:	2201      	movs	r2, #1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800153c:	e01c      	b.n	8001578 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	2212      	movs	r2, #18
 8001544:	4393      	bics	r3, r2
 8001546:	2210      	movs	r2, #16
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001552:	2201      	movs	r2, #1
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001562:	e009      	b.n	8001578 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001568:	2210      	movs	r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001570:	231f      	movs	r3, #31
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001578:	231f      	movs	r3, #31
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	781b      	ldrb	r3, [r3, #0]
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b008      	add	sp, #32
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	20000000 	.word	0x20000000
 800158c:	00030d40 	.word	0x00030d40
 8001590:	fffffefd 	.word	0xfffffefd
 8001594:	ffde0201 	.word	0xffde0201
 8001598:	1ffffc02 	.word	0x1ffffc02
 800159c:	40012708 	.word	0x40012708
 80015a0:	ffc3ffff 	.word	0xffc3ffff
 80015a4:	07ffff04 	.word	0x07ffff04

080015a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b2:	2317      	movs	r3, #23
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2254      	movs	r2, #84	@ 0x54
 80015c2:	5c9b      	ldrb	r3, [r3, r2]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x24>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e1c0      	b.n	800194e <HAL_ADC_ConfigChannel+0x3a6>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2254      	movs	r2, #84	@ 0x54
 80015d0:	2101      	movs	r1, #1
 80015d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fe2c 	bl	8001236 <LL_ADC_REG_IsConversionOngoing>
 80015de:	1e03      	subs	r3, r0, #0
 80015e0:	d000      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0x3c>
 80015e2:	e1a3      	b.n	800192c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d100      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x46>
 80015ec:	e143      	b.n	8001876 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d004      	beq.n	8001604 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015fe:	4ac1      	ldr	r2, [pc, #772]	@ (8001904 <HAL_ADC_ConfigChannel+0x35c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d108      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0019      	movs	r1, r3
 800160e:	0010      	movs	r0, r2
 8001610:	f7ff fd99 	bl	8001146 <LL_ADC_REG_SetSequencerChAdd>
 8001614:	e0c9      	b.n	80017aa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	211f      	movs	r1, #31
 8001620:	400b      	ands	r3, r1
 8001622:	210f      	movs	r1, #15
 8001624:	4099      	lsls	r1, r3
 8001626:	000b      	movs	r3, r1
 8001628:	43db      	mvns	r3, r3
 800162a:	4013      	ands	r3, r2
 800162c:	0019      	movs	r1, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	035b      	lsls	r3, r3, #13
 8001634:	0b5b      	lsrs	r3, r3, #13
 8001636:	d105      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x9c>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0e9b      	lsrs	r3, r3, #26
 800163e:	221f      	movs	r2, #31
 8001640:	4013      	ands	r3, r2
 8001642:	e098      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	d000      	beq.n	8001650 <HAL_ADC_ConfigChannel+0xa8>
 800164e:	e091      	b.n	8001774 <HAL_ADC_ConfigChannel+0x1cc>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2202      	movs	r2, #2
 8001656:	4013      	ands	r3, r2
 8001658:	d000      	beq.n	800165c <HAL_ADC_ConfigChannel+0xb4>
 800165a:	e089      	b.n	8001770 <HAL_ADC_ConfigChannel+0x1c8>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2204      	movs	r2, #4
 8001662:	4013      	ands	r3, r2
 8001664:	d000      	beq.n	8001668 <HAL_ADC_ConfigChannel+0xc0>
 8001666:	e081      	b.n	800176c <HAL_ADC_ConfigChannel+0x1c4>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2208      	movs	r2, #8
 800166e:	4013      	ands	r3, r2
 8001670:	d000      	beq.n	8001674 <HAL_ADC_ConfigChannel+0xcc>
 8001672:	e079      	b.n	8001768 <HAL_ADC_ConfigChannel+0x1c0>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2210      	movs	r2, #16
 800167a:	4013      	ands	r3, r2
 800167c:	d000      	beq.n	8001680 <HAL_ADC_ConfigChannel+0xd8>
 800167e:	e071      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1bc>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2220      	movs	r2, #32
 8001686:	4013      	ands	r3, r2
 8001688:	d000      	beq.n	800168c <HAL_ADC_ConfigChannel+0xe4>
 800168a:	e069      	b.n	8001760 <HAL_ADC_ConfigChannel+0x1b8>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2240      	movs	r2, #64	@ 0x40
 8001692:	4013      	ands	r3, r2
 8001694:	d000      	beq.n	8001698 <HAL_ADC_ConfigChannel+0xf0>
 8001696:	e061      	b.n	800175c <HAL_ADC_ConfigChannel+0x1b4>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2280      	movs	r2, #128	@ 0x80
 800169e:	4013      	ands	r3, r2
 80016a0:	d000      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0xfc>
 80016a2:	e059      	b.n	8001758 <HAL_ADC_ConfigChannel+0x1b0>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d151      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1ac>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4013      	ands	r3, r2
 80016ba:	d149      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1a8>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4013      	ands	r3, r2
 80016c6:	d141      	bne.n	800174c <HAL_ADC_ConfigChannel+0x1a4>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	d139      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1a0>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	4013      	ands	r3, r2
 80016de:	d131      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x19c>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	019b      	lsls	r3, r3, #6
 80016e8:	4013      	ands	r3, r2
 80016ea:	d129      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x198>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	01db      	lsls	r3, r3, #7
 80016f4:	4013      	ands	r3, r2
 80016f6:	d121      	bne.n	800173c <HAL_ADC_ConfigChannel+0x194>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	4013      	ands	r3, r2
 8001702:	d119      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x190>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	025b      	lsls	r3, r3, #9
 800170c:	4013      	ands	r3, r2
 800170e:	d111      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x18c>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	d109      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x188>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	4013      	ands	r3, r2
 8001726:	d001      	beq.n	800172c <HAL_ADC_ConfigChannel+0x184>
 8001728:	2312      	movs	r3, #18
 800172a:	e024      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800172c:	2300      	movs	r3, #0
 800172e:	e022      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001730:	2311      	movs	r3, #17
 8001732:	e020      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001734:	2310      	movs	r3, #16
 8001736:	e01e      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001738:	230f      	movs	r3, #15
 800173a:	e01c      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800173c:	230e      	movs	r3, #14
 800173e:	e01a      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001740:	230d      	movs	r3, #13
 8001742:	e018      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001744:	230c      	movs	r3, #12
 8001746:	e016      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001748:	230b      	movs	r3, #11
 800174a:	e014      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800174c:	230a      	movs	r3, #10
 800174e:	e012      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001750:	2309      	movs	r3, #9
 8001752:	e010      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001754:	2308      	movs	r3, #8
 8001756:	e00e      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001758:	2307      	movs	r3, #7
 800175a:	e00c      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800175c:	2306      	movs	r3, #6
 800175e:	e00a      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001760:	2305      	movs	r3, #5
 8001762:	e008      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001764:	2304      	movs	r3, #4
 8001766:	e006      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001768:	2303      	movs	r3, #3
 800176a:	e004      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800176c:	2302      	movs	r3, #2
 800176e:	e002      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001774:	2300      	movs	r3, #0
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	6852      	ldr	r2, [r2, #4]
 800177a:	201f      	movs	r0, #31
 800177c:	4002      	ands	r2, r0
 800177e:	4093      	lsls	r3, r2
 8001780:	000a      	movs	r2, r1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	d808      	bhi.n	80017aa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	001a      	movs	r2, r3
 80017a6:	f7ff fcae 	bl	8001106 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	001a      	movs	r2, r3
 80017b8:	f7ff fce8 	bl	800118c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db00      	blt.n	80017c6 <HAL_ADC_ConfigChannel+0x21e>
 80017c4:	e0bc      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017c6:	4b50      	ldr	r3, [pc, #320]	@ (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fc5b 	bl	8001084 <LL_ADC_GetCommonPathInternalCh>
 80017ce:	0003      	movs	r3, r0
 80017d0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a4d      	ldr	r2, [pc, #308]	@ (800190c <HAL_ADC_ConfigChannel+0x364>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d122      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	2380      	movs	r3, #128	@ 0x80
 80017e0:	041b      	lsls	r3, r3, #16
 80017e2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017e4:	d11d      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2280      	movs	r2, #128	@ 0x80
 80017ea:	0412      	lsls	r2, r2, #16
 80017ec:	4313      	orrs	r3, r2
 80017ee:	4a46      	ldr	r2, [pc, #280]	@ (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80017f0:	0019      	movs	r1, r3
 80017f2:	0010      	movs	r0, r2
 80017f4:	f7ff fc32 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017f8:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <HAL_ADC_ConfigChannel+0x368>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4945      	ldr	r1, [pc, #276]	@ (8001914 <HAL_ADC_ConfigChannel+0x36c>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f7fe fc80 	bl	8000104 <__udivsi3>
 8001804:	0003      	movs	r3, r0
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	0013      	movs	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	189b      	adds	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001812:	e002      	b.n	800181a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3b01      	subs	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f9      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001820:	e08e      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a3c      	ldr	r2, [pc, #240]	@ (8001918 <HAL_ADC_ConfigChannel+0x370>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d10e      	bne.n	800184a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	045b      	lsls	r3, r3, #17
 8001832:	4013      	ands	r3, r2
 8001834:	d109      	bne.n	800184a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	0452      	lsls	r2, r2, #17
 800183c:	4313      	orrs	r3, r2
 800183e:	4a32      	ldr	r2, [pc, #200]	@ (8001908 <HAL_ADC_ConfigChannel+0x360>)
 8001840:	0019      	movs	r1, r3
 8001842:	0010      	movs	r0, r2
 8001844:	f7ff fc0a 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 8001848:	e07a      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a33      	ldr	r2, [pc, #204]	@ (800191c <HAL_ADC_ConfigChannel+0x374>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d000      	beq.n	8001856 <HAL_ADC_ConfigChannel+0x2ae>
 8001854:	e074      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	03db      	lsls	r3, r3, #15
 800185c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800185e:	d000      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x2ba>
 8001860:	e06e      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	03d2      	lsls	r2, r2, #15
 8001868:	4313      	orrs	r3, r2
 800186a:	4a27      	ldr	r2, [pc, #156]	@ (8001908 <HAL_ADC_ConfigChannel+0x360>)
 800186c:	0019      	movs	r1, r3
 800186e:	0010      	movs	r0, r2
 8001870:	f7ff fbf4 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 8001874:	e064      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	429a      	cmp	r2, r3
 8001880:	d004      	beq.n	800188c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001886:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <HAL_ADC_ConfigChannel+0x35c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d107      	bne.n	800189c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0019      	movs	r1, r3
 8001896:	0010      	movs	r0, r2
 8001898:	f7ff fc66 	bl	8001168 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da4d      	bge.n	8001940 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018a4:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff fbec 	bl	8001084 <LL_ADC_GetCommonPathInternalCh>
 80018ac:	0003      	movs	r3, r0
 80018ae:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a15      	ldr	r2, [pc, #84]	@ (800190c <HAL_ADC_ConfigChannel+0x364>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d108      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4a18      	ldr	r2, [pc, #96]	@ (8001920 <HAL_ADC_ConfigChannel+0x378>)
 80018be:	4013      	ands	r3, r2
 80018c0:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80018c2:	0019      	movs	r1, r3
 80018c4:	0010      	movs	r0, r2
 80018c6:	f7ff fbc9 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 80018ca:	e039      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_ADC_ConfigChannel+0x370>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d108      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <HAL_ADC_ConfigChannel+0x37c>)
 80018da:	4013      	ands	r3, r2
 80018dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80018de:	0019      	movs	r1, r3
 80018e0:	0010      	movs	r0, r2
 80018e2:	f7ff fbbb 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 80018e6:	e02b      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <HAL_ADC_ConfigChannel+0x374>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d126      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001928 <HAL_ADC_ConfigChannel+0x380>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	@ (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80018fa:	0019      	movs	r1, r3
 80018fc:	0010      	movs	r0, r2
 80018fe:	f7ff fbad 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 8001902:	e01d      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
 8001904:	80000004 	.word	0x80000004
 8001908:	40012708 	.word	0x40012708
 800190c:	b0001000 	.word	0xb0001000
 8001910:	20000000 	.word	0x20000000
 8001914:	00030d40 	.word	0x00030d40
 8001918:	b8004000 	.word	0xb8004000
 800191c:	b4002000 	.word	0xb4002000
 8001920:	ff7fffff 	.word	0xff7fffff
 8001924:	feffffff 	.word	0xfeffffff
 8001928:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	2220      	movs	r2, #32
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001938:	2317      	movs	r3, #23
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2254      	movs	r2, #84	@ 0x54
 8001944:	2100      	movs	r1, #0
 8001946:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001948:	2317      	movs	r3, #23
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b006      	add	sp, #24
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	0002      	movs	r2, r0
 8001960:	1dfb      	adds	r3, r7, #7
 8001962:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001964:	1dfb      	adds	r3, r7, #7
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b7f      	cmp	r3, #127	@ 0x7f
 800196a:	d809      	bhi.n	8001980 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	001a      	movs	r2, r3
 8001972:	231f      	movs	r3, #31
 8001974:	401a      	ands	r2, r3
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <__NVIC_EnableIRQ+0x30>)
 8001978:	2101      	movs	r1, #1
 800197a:	4091      	lsls	r1, r2
 800197c:	000a      	movs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	0002      	movs	r2, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b7f      	cmp	r3, #127	@ 0x7f
 80019a0:	d828      	bhi.n	80019f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a60 <__NVIC_SetPriority+0xd4>)
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	33c0      	adds	r3, #192	@ 0xc0
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	589b      	ldr	r3, [r3, r2]
 80019b2:	1dfa      	adds	r2, r7, #7
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	0011      	movs	r1, r2
 80019b8:	2203      	movs	r2, #3
 80019ba:	400a      	ands	r2, r1
 80019bc:	00d2      	lsls	r2, r2, #3
 80019be:	21ff      	movs	r1, #255	@ 0xff
 80019c0:	4091      	lsls	r1, r2
 80019c2:	000a      	movs	r2, r1
 80019c4:	43d2      	mvns	r2, r2
 80019c6:	401a      	ands	r2, r3
 80019c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	22ff      	movs	r2, #255	@ 0xff
 80019d0:	401a      	ands	r2, r3
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	0018      	movs	r0, r3
 80019d8:	2303      	movs	r3, #3
 80019da:	4003      	ands	r3, r0
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e0:	481f      	ldr	r0, [pc, #124]	@ (8001a60 <__NVIC_SetPriority+0xd4>)
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	430a      	orrs	r2, r1
 80019ec:	33c0      	adds	r3, #192	@ 0xc0
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019f2:	e031      	b.n	8001a58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <__NVIC_SetPriority+0xd8>)
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	0019      	movs	r1, r3
 80019fc:	230f      	movs	r3, #15
 80019fe:	400b      	ands	r3, r1
 8001a00:	3b08      	subs	r3, #8
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3306      	adds	r3, #6
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1dfa      	adds	r2, r7, #7
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	0011      	movs	r1, r2
 8001a14:	2203      	movs	r2, #3
 8001a16:	400a      	ands	r2, r1
 8001a18:	00d2      	lsls	r2, r2, #3
 8001a1a:	21ff      	movs	r1, #255	@ 0xff
 8001a1c:	4091      	lsls	r1, r2
 8001a1e:	000a      	movs	r2, r1
 8001a20:	43d2      	mvns	r2, r2
 8001a22:	401a      	ands	r2, r3
 8001a24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	019b      	lsls	r3, r3, #6
 8001a2a:	22ff      	movs	r2, #255	@ 0xff
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	0018      	movs	r0, r3
 8001a34:	2303      	movs	r3, #3
 8001a36:	4003      	ands	r3, r0
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a3c:	4809      	ldr	r0, [pc, #36]	@ (8001a64 <__NVIC_SetPriority+0xd8>)
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	001c      	movs	r4, r3
 8001a44:	230f      	movs	r3, #15
 8001a46:	4023      	ands	r3, r4
 8001a48:	3b08      	subs	r3, #8
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	3306      	adds	r3, #6
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	18c3      	adds	r3, r0, r3
 8001a54:	3304      	adds	r3, #4
 8001a56:	601a      	str	r2, [r3, #0]
}
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b003      	add	sp, #12
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	2380      	movs	r3, #128	@ 0x80
 8001a76:	045b      	lsls	r3, r3, #17
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d301      	bcc.n	8001a80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e010      	b.n	8001aa2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <SysTick_Config+0x44>)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	3a01      	subs	r2, #1
 8001a86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a88:	2301      	movs	r3, #1
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff ff7c 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <SysTick_Config+0x44>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <SysTick_Config+0x44>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	210f      	movs	r1, #15
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	1c02      	adds	r2, r0, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	0011      	movs	r1, r2
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b004      	add	sp, #16
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff ff33 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff ffaf 	bl	8001a68 <SysTick_Config>
 8001b0a:	0003      	movs	r3, r0
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e077      	b.n	8001c16 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c20 <HAL_DMA_Init+0x10c>)
 8001b2c:	4694      	mov	ip, r2
 8001b2e:	4463      	add	r3, ip
 8001b30:	2114      	movs	r1, #20
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7fe fae6 	bl	8000104 <__udivsi3>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	009a      	lsls	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2225      	movs	r2, #37	@ 0x25
 8001b44:	2102      	movs	r1, #2
 8001b46:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4934      	ldr	r1, [pc, #208]	@ (8001c24 <HAL_DMA_Init+0x110>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 f8fb 	bl	8001d8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	2380      	movs	r3, #128	@ 0x80
 8001b9c:	01db      	lsls	r3, r3, #7
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d102      	bne.n	8001ba8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	213f      	movs	r1, #63	@ 0x3f
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bbe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d011      	beq.n	8001bec <HAL_DMA_Init+0xd8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d80d      	bhi.n	8001bec <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f906 	bl	8001de4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	e008      	b.n	8001bfe <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2225      	movs	r2, #37	@ 0x25
 8001c08:	2101      	movs	r1, #1
 8001c0a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	@ 0x24
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	bffdfff8 	.word	0xbffdfff8
 8001c24:	ffff800f 	.word	0xffff800f

08001c28 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001c30:	4b55      	ldr	r3, [pc, #340]	@ (8001d88 <HAL_DMA_IRQHandler+0x160>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	221c      	movs	r2, #28
 8001c44:	4013      	ands	r3, r2
 8001c46:	2204      	movs	r2, #4
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d027      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x7a>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2204      	movs	r2, #4
 8001c56:	4013      	ands	r3, r2
 8001c58:	d023      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2220      	movs	r2, #32
 8001c62:	4013      	ands	r3, r2
 8001c64:	d107      	bne.n	8001c76 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2104      	movs	r1, #4
 8001c72:	438a      	bics	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001c76:	4b44      	ldr	r3, [pc, #272]	@ (8001d88 <HAL_DMA_IRQHandler+0x160>)
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	221c      	movs	r2, #28
 8001c80:	4013      	ands	r3, r2
 8001c82:	2204      	movs	r2, #4
 8001c84:	409a      	lsls	r2, r3
 8001c86:	4b40      	ldr	r3, [pc, #256]	@ (8001d88 <HAL_DMA_IRQHandler+0x160>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d100      	bne.n	8001c96 <HAL_DMA_IRQHandler+0x6e>
 8001c94:	e073      	b.n	8001d7e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001ca0:	e06d      	b.n	8001d7e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	221c      	movs	r2, #28
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2202      	movs	r2, #2
 8001cac:	409a      	lsls	r2, r3
 8001cae:	0013      	movs	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d02e      	beq.n	8001d14 <HAL_DMA_IRQHandler+0xec>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d02a      	beq.n	8001d14 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	210a      	movs	r1, #10
 8001cd6:	438a      	bics	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2225      	movs	r2, #37	@ 0x25
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001ce2:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <HAL_DMA_IRQHandler+0x160>)
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	221c      	movs	r2, #28
 8001cec:	4013      	ands	r3, r2
 8001cee:	2202      	movs	r2, #2
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <HAL_DMA_IRQHandler+0x160>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	@ 0x24
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d03a      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	0010      	movs	r0, r2
 8001d10:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001d12:	e034      	b.n	8001d7e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	221c      	movs	r2, #28
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	d02b      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x158>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d027      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	210e      	movs	r1, #14
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_DMA_IRQHandler+0x160>)
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	221c      	movs	r2, #28
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_DMA_IRQHandler+0x160>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2225      	movs	r2, #37	@ 0x25
 8001d60:	2101      	movs	r1, #1
 8001d62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	@ 0x24
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	0010      	movs	r0, r2
 8001d7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	46c0      	nop			@ (mov r8, r8)
}
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b004      	add	sp, #16
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40020000 	.word	0x40020000

08001d8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001d9c:	4694      	mov	ip, r2
 8001d9e:	4463      	add	r3, ip
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	001a      	movs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	001a      	movs	r2, r3
 8001dae:	23ff      	movs	r3, #255	@ 0xff
 8001db0:	4013      	ands	r3, r2
 8001db2:	3b08      	subs	r3, #8
 8001db4:	2114      	movs	r1, #20
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7fe f9a4 	bl	8000104 <__udivsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001dc4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	221f      	movs	r2, #31
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2201      	movs	r2, #1
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001dd4:	46c0      	nop			@ (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b004      	add	sp, #16
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	10008200 	.word	0x10008200
 8001de0:	40020880 	.word	0x40020880

08001de4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	223f      	movs	r2, #63	@ 0x3f
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001dfa:	4694      	mov	ip, r2
 8001dfc:	4463      	add	r3, ip
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	001a      	movs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a07      	ldr	r2, [pc, #28]	@ (8001e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	4013      	ands	r3, r2
 8001e14:	2201      	movs	r2, #1
 8001e16:	409a      	lsls	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001e1c:	46c0      	nop			@ (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	1000823f 	.word	0x1000823f
 8001e28:	40020940 	.word	0x40020940

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	e147      	b.n	80020cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4091      	lsls	r1, r2
 8001e46:	000a      	movs	r2, r1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d100      	bne.n	8001e54 <HAL_GPIO_Init+0x28>
 8001e52:	e138      	b.n	80020c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d005      	beq.n	8001e6c <HAL_GPIO_Init+0x40>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2203      	movs	r2, #3
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d130      	bne.n	8001ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	0013      	movs	r3, r2
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	2201      	movs	r2, #1
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d017      	beq.n	8001f0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	43da      	mvns	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	409a      	lsls	r2, r3
 8001efc:	0013      	movs	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d123      	bne.n	8001f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	58d3      	ldr	r3, [r2, r3]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2207      	movs	r2, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	0013      	movs	r3, r2
 8001f32:	43da      	mvns	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2107      	movs	r1, #7
 8001f42:	400b      	ands	r3, r1
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	409a      	lsls	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	6939      	ldr	r1, [r7, #16]
 8001f5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	409a      	lsls	r2, r3
 8001f84:	0013      	movs	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	23c0      	movs	r3, #192	@ 0xc0
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d100      	bne.n	8001fa0 <HAL_GPIO_Init+0x174>
 8001f9e:	e092      	b.n	80020c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001fa0:	4a50      	ldr	r2, [pc, #320]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	589b      	ldr	r3, [r3, r2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	0013      	movs	r3, r2
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	23a0      	movs	r3, #160	@ 0xa0
 8001fc8:	05db      	lsls	r3, r3, #23
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x1ca>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a45      	ldr	r2, [pc, #276]	@ (80020e8 <HAL_GPIO_Init+0x2bc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x1c6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a44      	ldr	r2, [pc, #272]	@ (80020ec <HAL_GPIO_Init+0x2c0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x1c2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a43      	ldr	r2, [pc, #268]	@ (80020f0 <HAL_GPIO_Init+0x2c4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x1be>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001fea:	2305      	movs	r3, #5
 8001fec:	e004      	b.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	2103      	movs	r1, #3
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	00d2      	lsls	r2, r2, #3
 8002000:	4093      	lsls	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002008:	4936      	ldr	r1, [pc, #216]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3318      	adds	r3, #24
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002016:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43da      	mvns	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	035b      	lsls	r3, r3, #13
 800202e:	4013      	ands	r3, r2
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800203a:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002040:	4b28      	ldr	r3, [pc, #160]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43da      	mvns	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	039b      	lsls	r3, r3, #14
 8002058:	4013      	ands	r3, r2
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002064:	4b1f      	ldr	r3, [pc, #124]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800206a:	4a1e      	ldr	r2, [pc, #120]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 800206c:	2384      	movs	r3, #132	@ 0x84
 800206e:	58d3      	ldr	r3, [r2, r3]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43da      	mvns	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	2380      	movs	r3, #128	@ 0x80
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	4013      	ands	r3, r2
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002090:	4914      	ldr	r1, [pc, #80]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 8002092:	2284      	movs	r2, #132	@ 0x84
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002098:	4a12      	ldr	r2, [pc, #72]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	58d3      	ldr	r3, [r2, r3]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43da      	mvns	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	025b      	lsls	r3, r3, #9
 80020b2:	4013      	ands	r3, r2
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020be:	4909      	ldr	r1, [pc, #36]	@ (80020e4 <HAL_GPIO_Init+0x2b8>)
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	1e13      	subs	r3, r2, #0
 80020d6:	d000      	beq.n	80020da <HAL_GPIO_Init+0x2ae>
 80020d8:	e6b0      	b.n	8001e3c <HAL_GPIO_Init+0x10>
  }
}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021800 	.word	0x40021800
 80020e8:	50000400 	.word	0x50000400
 80020ec:	50000800 	.word	0x50000800
 80020f0:	50000c00 	.word	0x50000c00

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	0008      	movs	r0, r1
 80020fe:	0011      	movs	r1, r2
 8002100:	1cbb      	adds	r3, r7, #2
 8002102:	1c02      	adds	r2, r0, #0
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	1c7b      	adds	r3, r7, #1
 8002108:	1c0a      	adds	r2, r1, #0
 800210a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210c:	1c7b      	adds	r3, r7, #1
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002114:	1cbb      	adds	r3, r7, #2
 8002116:	881a      	ldrh	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211e:	1cbb      	adds	r3, r7, #2
 8002120:	881a      	ldrh	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a19      	ldr	r2, [pc, #100]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d11f      	bne.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	0013      	movs	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	189b      	adds	r3, r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4912      	ldr	r1, [pc, #72]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002162:	0018      	movs	r0, r3
 8002164:	f7fd ffce 	bl	8000104 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800216e:	e008      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3b01      	subs	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e001      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e009      	b.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	401a      	ands	r2, r3
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	429a      	cmp	r2, r3
 8002192:	d0ed      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	40007000 	.word	0x40007000
 80021a4:	fffff9ff 	.word	0xfffff9ff
 80021a8:	20000000 	.word	0x20000000
 80021ac:	000f4240 	.word	0x000f4240

080021b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	23e0      	movs	r3, #224	@ 0xe0
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	4013      	ands	r3, r2
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e2fe      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d100      	bne.n	80021e6 <HAL_RCC_OscConfig+0x1e>
 80021e4:	e07c      	b.n	80022e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e6:	4bc3      	ldr	r3, [pc, #780]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	@ 0x38
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f0:	4bc0      	ldr	r3, [pc, #768]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2203      	movs	r2, #3
 80021f6:	4013      	ands	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_OscConfig+0x3e>
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d002      	beq.n	800220c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d10b      	bne.n	8002224 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4bb9      	ldr	r3, [pc, #740]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	029b      	lsls	r3, r3, #10
 8002214:	4013      	ands	r3, r2
 8002216:	d062      	beq.n	80022de <HAL_RCC_OscConfig+0x116>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d15e      	bne.n	80022de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e2d9      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x78>
 8002230:	4bb0      	ldr	r3, [pc, #704]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4baf      	ldr	r3, [pc, #700]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002236:	2180      	movs	r1, #128	@ 0x80
 8002238:	0249      	lsls	r1, r1, #9
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e020      	b.n	8002282 <HAL_RCC_OscConfig+0xba>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	23a0      	movs	r3, #160	@ 0xa0
 8002246:	02db      	lsls	r3, r3, #11
 8002248:	429a      	cmp	r2, r3
 800224a:	d10e      	bne.n	800226a <HAL_RCC_OscConfig+0xa2>
 800224c:	4ba9      	ldr	r3, [pc, #676]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4ba8      	ldr	r3, [pc, #672]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	02c9      	lsls	r1, r1, #11
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4ba6      	ldr	r3, [pc, #664]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4ba5      	ldr	r3, [pc, #660]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002260:	2180      	movs	r1, #128	@ 0x80
 8002262:	0249      	lsls	r1, r1, #9
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e00b      	b.n	8002282 <HAL_RCC_OscConfig+0xba>
 800226a:	4ba2      	ldr	r3, [pc, #648]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4ba1      	ldr	r3, [pc, #644]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002270:	49a1      	ldr	r1, [pc, #644]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002272:	400a      	ands	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b9f      	ldr	r3, [pc, #636]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b9e      	ldr	r3, [pc, #632]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800227c:	499f      	ldr	r1, [pc, #636]	@ (80024fc <HAL_RCC_OscConfig+0x334>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d014      	beq.n	80022b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fedd 	bl	8001048 <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7fe fed8 	bl	8001048 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	@ 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e298      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a6:	4b93      	ldr	r3, [pc, #588]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	4013      	ands	r3, r2
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0xcc>
 80022b2:	e015      	b.n	80022e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fec8 	bl	8001048 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022be:	f7fe fec3 	bl	8001048 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b64      	cmp	r3, #100	@ 0x64
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e283      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d0:	4b88      	ldr	r3, [pc, #544]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	@ 0x80
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	4013      	ands	r3, r2
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0xf6>
 80022dc:	e000      	b.n	80022e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d100      	bne.n	80022ec <HAL_RCC_OscConfig+0x124>
 80022ea:	e099      	b.n	8002420 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ec:	4b81      	ldr	r3, [pc, #516]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2238      	movs	r2, #56	@ 0x38
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f6:	4b7f      	ldr	r3, [pc, #508]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2203      	movs	r2, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d102      	bne.n	800230c <HAL_RCC_OscConfig+0x144>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d002      	beq.n	8002312 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d135      	bne.n	800237e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002312:	4b78      	ldr	r3, [pc, #480]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4013      	ands	r3, r2
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x162>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e256      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b72      	ldr	r3, [pc, #456]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a74      	ldr	r2, [pc, #464]	@ (8002500 <HAL_RCC_OscConfig+0x338>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	021a      	lsls	r2, r3, #8
 800233a:	4b6e      	ldr	r3, [pc, #440]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002346:	4b6b      	ldr	r3, [pc, #428]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6e      	ldr	r2, [pc, #440]	@ (8002504 <HAL_RCC_OscConfig+0x33c>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	4b67      	ldr	r3, [pc, #412]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800235a:	4b66      	ldr	r3, [pc, #408]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0adb      	lsrs	r3, r3, #11
 8002360:	2207      	movs	r2, #7
 8002362:	4013      	ands	r3, r2
 8002364:	4a68      	ldr	r2, [pc, #416]	@ (8002508 <HAL_RCC_OscConfig+0x340>)
 8002366:	40da      	lsrs	r2, r3
 8002368:	4b68      	ldr	r3, [pc, #416]	@ (800250c <HAL_RCC_OscConfig+0x344>)
 800236a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800236c:	4b68      	ldr	r3, [pc, #416]	@ (8002510 <HAL_RCC_OscConfig+0x348>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f7fe fe0d 	bl	8000f90 <HAL_InitTick>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d051      	beq.n	800241e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e22c      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d030      	beq.n	80023e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002386:	4b5b      	ldr	r3, [pc, #364]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5e      	ldr	r2, [pc, #376]	@ (8002504 <HAL_RCC_OscConfig+0x33c>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	4b57      	ldr	r3, [pc, #348]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800239a:	4b56      	ldr	r3, [pc, #344]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b55      	ldr	r3, [pc, #340]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023a0:	2180      	movs	r1, #128	@ 0x80
 80023a2:	0049      	lsls	r1, r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fe4e 	bl	8001048 <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe fe49 	bl	8001048 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e209      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c4:	4b4b      	ldr	r3, [pc, #300]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b48      	ldr	r3, [pc, #288]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002500 <HAL_RCC_OscConfig+0x338>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	021a      	lsls	r2, r3, #8
 80023e0:	4b44      	ldr	r3, [pc, #272]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e01b      	b.n	8002420 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	4b42      	ldr	r3, [pc, #264]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b41      	ldr	r3, [pc, #260]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	4949      	ldr	r1, [pc, #292]	@ (8002514 <HAL_RCC_OscConfig+0x34c>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fe28 	bl	8001048 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7fe fe23 	bl	8001048 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1e3      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002410:	4b38      	ldr	r3, [pc, #224]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4013      	ands	r3, r2
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x236>
 800241c:	e000      	b.n	8002420 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2208      	movs	r2, #8
 8002426:	4013      	ands	r3, r2
 8002428:	d047      	beq.n	80024ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800242a:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2238      	movs	r2, #56	@ 0x38
 8002430:	4013      	ands	r3, r2
 8002432:	2b18      	cmp	r3, #24
 8002434:	d10a      	bne.n	800244c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002436:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	d03c      	beq.n	80024ba <HAL_RCC_OscConfig+0x2f2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d138      	bne.n	80024ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e1c5      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d019      	beq.n	8002488 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002456:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002458:	4b26      	ldr	r3, [pc, #152]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800245a:	2101      	movs	r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fdf2 	bl	8001048 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7fe fded 	bl	8001048 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1ad      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d0f1      	beq.n	800246a <HAL_RCC_OscConfig+0x2a2>
 8002486:	e018      	b.n	80024ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002488:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800248a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800248c:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fdd8 	bl	8001048 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249e:	f7fe fdd3 	bl	8001048 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e193      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2204      	movs	r2, #4
 80024c0:	4013      	ands	r3, r2
 80024c2:	d100      	bne.n	80024c6 <HAL_RCC_OscConfig+0x2fe>
 80024c4:	e0c6      	b.n	8002654 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2238      	movs	r2, #56	@ 0x38
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d11e      	bne.n	8002518 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	2202      	movs	r2, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d100      	bne.n	80024e6 <HAL_RCC_OscConfig+0x31e>
 80024e4:	e0b6      	b.n	8002654 <HAL_RCC_OscConfig+0x48c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d000      	beq.n	80024f0 <HAL_RCC_OscConfig+0x328>
 80024ee:	e0b1      	b.n	8002654 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e171      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
 80024f4:	40021000 	.word	0x40021000
 80024f8:	fffeffff 	.word	0xfffeffff
 80024fc:	fffbffff 	.word	0xfffbffff
 8002500:	ffff80ff 	.word	0xffff80ff
 8002504:	ffffc7ff 	.word	0xffffc7ff
 8002508:	00f42400 	.word	0x00f42400
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004
 8002514:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002518:	4bb1      	ldr	r3, [pc, #708]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800251a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	055b      	lsls	r3, r3, #21
 8002520:	4013      	ands	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x360>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x362>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d011      	beq.n	8002552 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4bac      	ldr	r3, [pc, #688]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002532:	4bab      	ldr	r3, [pc, #684]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002534:	2180      	movs	r1, #128	@ 0x80
 8002536:	0549      	lsls	r1, r1, #21
 8002538:	430a      	orrs	r2, r1
 800253a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800253c:	4ba8      	ldr	r3, [pc, #672]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800253e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800254a:	231f      	movs	r3, #31
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002552:	4ba4      	ldr	r3, [pc, #656]	@ (80027e4 <HAL_RCC_OscConfig+0x61c>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4013      	ands	r3, r2
 800255c:	d11a      	bne.n	8002594 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800255e:	4ba1      	ldr	r3, [pc, #644]	@ (80027e4 <HAL_RCC_OscConfig+0x61c>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4ba0      	ldr	r3, [pc, #640]	@ (80027e4 <HAL_RCC_OscConfig+0x61c>)
 8002564:	2180      	movs	r1, #128	@ 0x80
 8002566:	0049      	lsls	r1, r1, #1
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800256c:	f7fe fd6c 	bl	8001048 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe fd67 	bl	8001048 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e127      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002588:	4b96      	ldr	r3, [pc, #600]	@ (80027e4 <HAL_RCC_OscConfig+0x61c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x3e2>
 800259c:	4b90      	ldr	r3, [pc, #576]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800259e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025a0:	4b8f      	ldr	r3, [pc, #572]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025a2:	2101      	movs	r1, #1
 80025a4:	430a      	orrs	r2, r1
 80025a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x41c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x404>
 80025b2:	4b8b      	ldr	r3, [pc, #556]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025b6:	4b8a      	ldr	r3, [pc, #552]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025b8:	2104      	movs	r1, #4
 80025ba:	430a      	orrs	r2, r1
 80025bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025be:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025c2:	4b87      	ldr	r3, [pc, #540]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0x41c>
 80025cc:	4b84      	ldr	r3, [pc, #528]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025d0:	4b83      	ldr	r3, [pc, #524]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	438a      	bics	r2, r1
 80025d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025d8:	4b81      	ldr	r3, [pc, #516]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025dc:	4b80      	ldr	r3, [pc, #512]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80025de:	2104      	movs	r1, #4
 80025e0:	438a      	bics	r2, r1
 80025e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d014      	beq.n	8002616 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fd2c 	bl	8001048 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f4:	e009      	b.n	800260a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fd27 	bl	8001048 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	4a79      	ldr	r2, [pc, #484]	@ (80027e8 <HAL_RCC_OscConfig+0x620>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0e6      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260a:	4b75      	ldr	r3, [pc, #468]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x42e>
 8002614:	e013      	b.n	800263e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fd17 	bl	8001048 <HAL_GetTick>
 800261a:	0003      	movs	r3, r0
 800261c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261e:	e009      	b.n	8002634 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe fd12 	bl	8001048 <HAL_GetTick>
 8002624:	0002      	movs	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	4a6f      	ldr	r2, [pc, #444]	@ (80027e8 <HAL_RCC_OscConfig+0x620>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0d1      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	4b6a      	ldr	r3, [pc, #424]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800263e:	231f      	movs	r3, #31
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b65      	ldr	r3, [pc, #404]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800264a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800264c:	4b64      	ldr	r3, [pc, #400]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800264e:	4967      	ldr	r1, [pc, #412]	@ (80027ec <HAL_RCC_OscConfig+0x624>)
 8002650:	400a      	ands	r2, r1
 8002652:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d100      	bne.n	800265e <HAL_RCC_OscConfig+0x496>
 800265c:	e0bb      	b.n	80027d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800265e:	4b60      	ldr	r3, [pc, #384]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2238      	movs	r2, #56	@ 0x38
 8002664:	4013      	ands	r3, r2
 8002666:	2b10      	cmp	r3, #16
 8002668:	d100      	bne.n	800266c <HAL_RCC_OscConfig+0x4a4>
 800266a:	e07b      	b.n	8002764 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d156      	bne.n	8002722 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b5a      	ldr	r3, [pc, #360]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b59      	ldr	r3, [pc, #356]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800267a:	495d      	ldr	r1, [pc, #372]	@ (80027f0 <HAL_RCC_OscConfig+0x628>)
 800267c:	400a      	ands	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fce2 	bl	8001048 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fcdd 	bl	8001048 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e09d      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269c:	4b50      	ldr	r3, [pc, #320]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	049b      	lsls	r3, r3, #18
 80026a4:	4013      	ands	r3, r2
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a51      	ldr	r2, [pc, #324]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d4:	431a      	orrs	r2, r3
 80026d6:	4b42      	ldr	r3, [pc, #264]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b40      	ldr	r3, [pc, #256]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b3f      	ldr	r3, [pc, #252]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80026e2:	2180      	movs	r1, #128	@ 0x80
 80026e4:	0449      	lsls	r1, r1, #17
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026ea:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	4b3c      	ldr	r3, [pc, #240]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 80026f0:	2180      	movs	r1, #128	@ 0x80
 80026f2:	0549      	lsls	r1, r1, #21
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fca6 	bl	8001048 <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fca1 	bl	8001048 <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e061      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2380      	movs	r3, #128	@ 0x80
 800271a:	049b      	lsls	r3, r3, #18
 800271c:	4013      	ands	r3, r2
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x53a>
 8002720:	e059      	b.n	80027d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b2f      	ldr	r3, [pc, #188]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002728:	4931      	ldr	r1, [pc, #196]	@ (80027f0 <HAL_RCC_OscConfig+0x628>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fc8b 	bl	8001048 <HAL_GetTick>
 8002732:	0003      	movs	r3, r0
 8002734:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fc86 	bl	8001048 <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e046      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274a:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	049b      	lsls	r3, r3, #18
 8002752:	4013      	ands	r3, r2
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002756:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 800275c:	4926      	ldr	r1, [pc, #152]	@ (80027f8 <HAL_RCC_OscConfig+0x630>)
 800275e:	400a      	ands	r2, r1
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	e038      	b.n	80027d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e033      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002770:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x618>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2203      	movs	r2, #3
 800277a:	401a      	ands	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	429a      	cmp	r2, r3
 8002782:	d126      	bne.n	80027d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2270      	movs	r2, #112	@ 0x70
 8002788:	401a      	ands	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	23fe      	movs	r3, #254	@ 0xfe
 8002796:	01db      	lsls	r3, r3, #7
 8002798:	401a      	ands	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d116      	bne.n	80027d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	23f8      	movs	r3, #248	@ 0xf8
 80027a8:	039b      	lsls	r3, r3, #14
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10e      	bne.n	80027d2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	23e0      	movs	r3, #224	@ 0xe0
 80027b8:	051b      	lsls	r3, r3, #20
 80027ba:	401a      	ands	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	0f5b      	lsrs	r3, r3, #29
 80027c8:	075a      	lsls	r2, r3, #29
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b008      	add	sp, #32
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
 80027e8:	00001388 	.word	0x00001388
 80027ec:	efffffff 	.word	0xefffffff
 80027f0:	feffffff 	.word	0xfeffffff
 80027f4:	11c1808c 	.word	0x11c1808c
 80027f8:	eefefffc 	.word	0xeefefffc

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0e9      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b76      	ldr	r3, [pc, #472]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2207      	movs	r2, #7
 8002816:	4013      	ands	r3, r2
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d91e      	bls.n	800285c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b73      	ldr	r3, [pc, #460]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2207      	movs	r2, #7
 8002824:	4393      	bics	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	4b70      	ldr	r3, [pc, #448]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002830:	f7fe fc0a 	bl	8001048 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002838:	e009      	b.n	800284e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283a:	f7fe fc05 	bl	8001048 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	4a6a      	ldr	r2, [pc, #424]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0ca      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800284e:	4b67      	ldr	r3, [pc, #412]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2207      	movs	r2, #7
 8002854:	4013      	ands	r3, r2
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d1ee      	bne.n	800283a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d015      	beq.n	8002892 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2204      	movs	r2, #4
 800286c:	4013      	ands	r3, r2
 800286e:	d006      	beq.n	800287e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002870:	4b60      	ldr	r3, [pc, #384]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	4b5f      	ldr	r3, [pc, #380]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 8002876:	21e0      	movs	r1, #224	@ 0xe0
 8002878:	01c9      	lsls	r1, r1, #7
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287e:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4a5d      	ldr	r2, [pc, #372]	@ (80029f8 <HAL_RCC_ClockConfig+0x1fc>)
 8002884:	4013      	ands	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4b59      	ldr	r3, [pc, #356]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2201      	movs	r2, #1
 8002898:	4013      	ands	r3, r2
 800289a:	d057      	beq.n	800294c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a4:	4b53      	ldr	r3, [pc, #332]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	029b      	lsls	r3, r3, #10
 80028ac:	4013      	ands	r3, r2
 80028ae:	d12b      	bne.n	8002908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e097      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028bc:	4b4d      	ldr	r3, [pc, #308]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	049b      	lsls	r3, r3, #18
 80028c4:	4013      	ands	r3, r2
 80028c6:	d11f      	bne.n	8002908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e08b      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d4:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4013      	ands	r3, r2
 80028de:	d113      	bne.n	8002908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e07f      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ec:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80028ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f0:	2202      	movs	r2, #2
 80028f2:	4013      	ands	r3, r2
 80028f4:	d108      	bne.n	8002908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e074      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80028fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e06d      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002908:	4b3a      	ldr	r3, [pc, #232]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2207      	movs	r2, #7
 800290e:	4393      	bics	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fb94 	bl	8001048 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002924:	e009      	b.n	800293a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002926:	f7fe fb8f 	bl	8001048 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	4a2f      	ldr	r2, [pc, #188]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e054      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2238      	movs	r2, #56	@ 0x38
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	429a      	cmp	r2, r3
 800294a:	d1ec      	bne.n	8002926 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b27      	ldr	r3, [pc, #156]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2207      	movs	r2, #7
 8002952:	4013      	ands	r3, r2
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d21e      	bcs.n	8002998 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2207      	movs	r2, #7
 8002960:	4393      	bics	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800296c:	f7fe fb6c 	bl	8001048 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002974:	e009      	b.n	800298a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002976:	f7fe fb67 	bl	8001048 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	4a1b      	ldr	r2, [pc, #108]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e02c      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800298a:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2207      	movs	r2, #7
 8002990:	4013      	ands	r3, r2
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d1ee      	bne.n	8002976 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2204      	movs	r2, #4
 800299e:	4013      	ands	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	4a15      	ldr	r2, [pc, #84]	@ (80029fc <HAL_RCC_ClockConfig+0x200>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029b6:	f000 f829 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80029ba:	0001      	movs	r1, r0
 80029bc:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	220f      	movs	r2, #15
 80029c4:	401a      	ands	r2, r3
 80029c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <HAL_RCC_ClockConfig+0x204>)
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	58d3      	ldr	r3, [r2, r3]
 80029cc:	221f      	movs	r2, #31
 80029ce:	4013      	ands	r3, r2
 80029d0:	000a      	movs	r2, r1
 80029d2:	40da      	lsrs	r2, r3
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_ClockConfig+0x208>)
 80029d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_ClockConfig+0x20c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7fe fad7 	bl	8000f90 <HAL_InitTick>
 80029e2:	0003      	movs	r3, r0
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b004      	add	sp, #16
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40022000 	.word	0x40022000
 80029f0:	00001388 	.word	0x00001388
 80029f4:	40021000 	.word	0x40021000
 80029f8:	fffff0ff 	.word	0xfffff0ff
 80029fc:	ffff8fff 	.word	0xffff8fff
 8002a00:	0800466c 	.word	0x0800466c
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000004 	.word	0x20000004

08002a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a12:	4b3c      	ldr	r3, [pc, #240]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2238      	movs	r2, #56	@ 0x38
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d10f      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a1c:	4b39      	ldr	r3, [pc, #228]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0adb      	lsrs	r3, r3, #11
 8002a22:	2207      	movs	r2, #7
 8002a24:	4013      	ands	r3, r2
 8002a26:	2201      	movs	r2, #1
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a2e:	6839      	ldr	r1, [r7, #0]
 8002a30:	4835      	ldr	r0, [pc, #212]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a32:	f7fd fb67 	bl	8000104 <__udivsi3>
 8002a36:	0003      	movs	r3, r0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	e05d      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3c:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2238      	movs	r2, #56	@ 0x38
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a48:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x100>)
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	e054      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2238      	movs	r2, #56	@ 0x38
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d138      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	4824      	ldr	r0, [pc, #144]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x100>)
 8002a7c:	f7fd fb42 	bl	8000104 <__udivsi3>
 8002a80:	0003      	movs	r3, r0
 8002a82:	0019      	movs	r1, r3
 8002a84:	4b1f      	ldr	r3, [pc, #124]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	227f      	movs	r2, #127	@ 0x7f
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	434b      	muls	r3, r1
 8002a90:	617b      	str	r3, [r7, #20]
        break;
 8002a92:	e00d      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	481c      	ldr	r0, [pc, #112]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a98:	f7fd fb34 	bl	8000104 <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	227f      	movs	r2, #127	@ 0x7f
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	434b      	muls	r3, r1
 8002aac:	617b      	str	r3, [r7, #20]
        break;
 8002aae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ab0:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0f5b      	lsrs	r3, r3, #29
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	3301      	adds	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6978      	ldr	r0, [r7, #20]
 8002ac2:	f7fd fb1f 	bl	8000104 <__udivsi3>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e015      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002acc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2238      	movs	r2, #56	@ 0x38
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d103      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ae0:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2238      	movs	r2, #56	@ 0x38
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b18      	cmp	r3, #24
 8002aea:	d103      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002aec:	23fa      	movs	r3, #250	@ 0xfa
 8002aee:	01db      	lsls	r3, r3, #7
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	e001      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002af8:	693b      	ldr	r3, [r7, #16]
}
 8002afa:	0018      	movs	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b006      	add	sp, #24
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	40021000 	.word	0x40021000
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	007a1200 	.word	0x007a1200

08002b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b14:	4b02      	ldr	r3, [pc, #8]	@ (8002b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	20000000 	.word	0x20000000

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b28:	f7ff fff2 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b2c:	0004      	movs	r4, r0
 8002b2e:	f7ff fb3f 	bl	80021b0 <LL_RCC_GetAPB1Prescaler>
 8002b32:	0003      	movs	r3, r0
 8002b34:	0b1a      	lsrs	r2, r3, #12
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	58d3      	ldr	r3, [r2, r3]
 8002b3c:	221f      	movs	r2, #31
 8002b3e:	4013      	ands	r3, r2
 8002b40:	40dc      	lsrs	r4, r3
 8002b42:	0023      	movs	r3, r4
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bdb0      	pop	{r4, r5, r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	080046ac 	.word	0x080046ac

08002b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e056      	b.n	8002c10 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	223d      	movs	r2, #61	@ 0x3d
 8002b66:	5c9b      	ldrb	r3, [r3, r2]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d113      	bne.n	8002b96 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	223c      	movs	r2, #60	@ 0x3c
 8002b72:	2100      	movs	r1, #0
 8002b74:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 ff25 	bl	80039c8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a23      	ldr	r2, [pc, #140]	@ (8002c18 <HAL_TIM_Base_Init+0xc8>)
 8002b8a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	0010      	movs	r0, r2
 8002b94:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	223d      	movs	r2, #61	@ 0x3d
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	0010      	movs	r0, r2
 8002baa:	f000 fbed 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2248      	movs	r2, #72	@ 0x48
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	223e      	movs	r2, #62	@ 0x3e
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	223f      	movs	r2, #63	@ 0x3f
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2240      	movs	r2, #64	@ 0x40
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2241      	movs	r2, #65	@ 0x41
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2242      	movs	r2, #66	@ 0x42
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2243      	movs	r2, #67	@ 0x43
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2244      	movs	r2, #68	@ 0x44
 8002bea:	2101      	movs	r1, #1
 8002bec:	5499      	strb	r1, [r3, r2]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2245      	movs	r2, #69	@ 0x45
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5499      	strb	r1, [r3, r2]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2246      	movs	r2, #70	@ 0x46
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2247      	movs	r2, #71	@ 0x47
 8002c02:	2101      	movs	r1, #1
 8002c04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	223d      	movs	r2, #61	@ 0x3d
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	08000ca5 	.word	0x08000ca5

08002c1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e056      	b.n	8002cdc <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	223d      	movs	r2, #61	@ 0x3d
 8002c32:	5c9b      	ldrb	r3, [r3, r2]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d113      	bne.n	8002c62 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	223c      	movs	r2, #60	@ 0x3c
 8002c3e:	2100      	movs	r1, #0
 8002c40:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 febf 	bl	80039c8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a23      	ldr	r2, [pc, #140]	@ (8002ce4 <HAL_TIM_OC_Init+0xc8>)
 8002c56:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	0010      	movs	r0, r2
 8002c60:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223d      	movs	r2, #61	@ 0x3d
 8002c66:	2102      	movs	r1, #2
 8002c68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3304      	adds	r3, #4
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f000 fb87 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2248      	movs	r2, #72	@ 0x48
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	223e      	movs	r2, #62	@ 0x3e
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223f      	movs	r2, #63	@ 0x3f
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2240      	movs	r2, #64	@ 0x40
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2241      	movs	r2, #65	@ 0x41
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2242      	movs	r2, #66	@ 0x42
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2243      	movs	r2, #67	@ 0x43
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2244      	movs	r2, #68	@ 0x44
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2245      	movs	r2, #69	@ 0x45
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2246      	movs	r2, #70	@ 0x46
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2247      	movs	r2, #71	@ 0x47
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	223d      	movs	r2, #61	@ 0x3d
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	08002ce9 	.word	0x08002ce9

08002ce8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e056      	b.n	8002db8 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	223d      	movs	r2, #61	@ 0x3d
 8002d0e:	5c9b      	ldrb	r3, [r3, r2]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d113      	bne.n	8002d3e <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	223c      	movs	r2, #60	@ 0x3c
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 fe51 	bl	80039c8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a23      	ldr	r2, [pc, #140]	@ (8002dc0 <HAL_TIM_PWM_Init+0xc8>)
 8002d32:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	0010      	movs	r0, r2
 8002d3c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	223d      	movs	r2, #61	@ 0x3d
 8002d42:	2102      	movs	r1, #2
 8002d44:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	0019      	movs	r1, r3
 8002d50:	0010      	movs	r0, r2
 8002d52:	f000 fb19 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2248      	movs	r2, #72	@ 0x48
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	223e      	movs	r2, #62	@ 0x3e
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	223f      	movs	r2, #63	@ 0x3f
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2240      	movs	r2, #64	@ 0x40
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2241      	movs	r2, #65	@ 0x41
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2242      	movs	r2, #66	@ 0x42
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2243      	movs	r2, #67	@ 0x43
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2244      	movs	r2, #68	@ 0x44
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2245      	movs	r2, #69	@ 0x45
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2246      	movs	r2, #70	@ 0x46
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2247      	movs	r2, #71	@ 0x47
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223d      	movs	r2, #61	@ 0x3d
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	08002dc5 	.word	0x08002dc5

08002dc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d027      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2202      	movs	r2, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d023      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2203      	movs	r2, #3
 8002e02:	4252      	negs	r2, r2
 8002e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2203      	movs	r2, #3
 8002e14:	4013      	ands	r3, r2
 8002e16:	d006      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2294      	movs	r2, #148	@ 0x94
 8002e1c:	589b      	ldr	r3, [r3, r2]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	0010      	movs	r0, r2
 8002e22:	4798      	blx	r3
 8002e24:	e00b      	b.n	8002e3e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	229c      	movs	r2, #156	@ 0x9c
 8002e2a:	589b      	ldr	r3, [r3, r2]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	0010      	movs	r0, r2
 8002e30:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	22a0      	movs	r2, #160	@ 0xa0
 8002e36:	589b      	ldr	r3, [r3, r2]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	0010      	movs	r0, r2
 8002e3c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2204      	movs	r2, #4
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d028      	beq.n	8002e9e <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	4013      	ands	r3, r2
 8002e52:	d024      	beq.n	8002e9e <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2205      	movs	r2, #5
 8002e5a:	4252      	negs	r2, r2
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	23c0      	movs	r3, #192	@ 0xc0
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d006      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2294      	movs	r2, #148	@ 0x94
 8002e76:	589b      	ldr	r3, [r3, r2]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	0010      	movs	r0, r2
 8002e7c:	4798      	blx	r3
 8002e7e:	e00b      	b.n	8002e98 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	229c      	movs	r2, #156	@ 0x9c
 8002e84:	589b      	ldr	r3, [r3, r2]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	0010      	movs	r0, r2
 8002e8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	22a0      	movs	r2, #160	@ 0xa0
 8002e90:	589b      	ldr	r3, [r3, r2]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	0010      	movs	r0, r2
 8002e96:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d027      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d023      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2209      	movs	r2, #9
 8002eb4:	4252      	negs	r2, r2
 8002eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d006      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2294      	movs	r2, #148	@ 0x94
 8002ece:	589b      	ldr	r3, [r3, r2]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	4798      	blx	r3
 8002ed6:	e00b      	b.n	8002ef0 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	229c      	movs	r2, #156	@ 0x9c
 8002edc:	589b      	ldr	r3, [r3, r2]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	0010      	movs	r0, r2
 8002ee2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	22a0      	movs	r2, #160	@ 0xa0
 8002ee8:	589b      	ldr	r3, [r3, r2]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	0010      	movs	r0, r2
 8002eee:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	4013      	ands	r3, r2
 8002efc:	d028      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2210      	movs	r2, #16
 8002f02:	4013      	ands	r3, r2
 8002f04:	d024      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2211      	movs	r2, #17
 8002f0c:	4252      	negs	r2, r2
 8002f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2208      	movs	r2, #8
 8002f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	23c0      	movs	r3, #192	@ 0xc0
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	d006      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2294      	movs	r2, #148	@ 0x94
 8002f28:	589b      	ldr	r3, [r3, r2]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	0010      	movs	r0, r2
 8002f2e:	4798      	blx	r3
 8002f30:	e00b      	b.n	8002f4a <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	229c      	movs	r2, #156	@ 0x9c
 8002f36:	589b      	ldr	r3, [r3, r2]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	0010      	movs	r0, r2
 8002f3c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	22a0      	movs	r2, #160	@ 0xa0
 8002f42:	589b      	ldr	r3, [r3, r2]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	0010      	movs	r0, r2
 8002f48:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d00a      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2202      	movs	r2, #2
 8002f66:	4252      	negs	r2, r2
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2284      	movs	r2, #132	@ 0x84
 8002f6e:	589b      	ldr	r3, [r3, r2]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	0010      	movs	r0, r2
 8002f74:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2280      	movs	r2, #128	@ 0x80
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d104      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	019b      	lsls	r3, r3, #6
 8002f84:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f86:	d00d      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2280      	movs	r2, #128	@ 0x80
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a22      	ldr	r2, [pc, #136]	@ (8003020 <HAL_TIM_IRQHandler+0x24c>)
 8002f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	22b4      	movs	r2, #180	@ 0xb4
 8002f9c:	589b      	ldr	r3, [r3, r2]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	0010      	movs	r0, r2
 8002fa2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2280      	movs	r2, #128	@ 0x80
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1a      	ldr	r2, [pc, #104]	@ (8003024 <HAL_TIM_IRQHandler+0x250>)
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	22b8      	movs	r2, #184	@ 0xb8
 8002fc2:	589b      	ldr	r3, [r3, r2]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	0010      	movs	r0, r2
 8002fc8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2240      	movs	r2, #64	@ 0x40
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d00e      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2240      	movs	r2, #64	@ 0x40
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2241      	movs	r2, #65	@ 0x41
 8002fe0:	4252      	negs	r2, r2
 8002fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	228c      	movs	r2, #140	@ 0x8c
 8002fe8:	589b      	ldr	r3, [r3, r2]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	0010      	movs	r0, r2
 8002fee:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00a      	beq.n	8003016 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2221      	movs	r2, #33	@ 0x21
 8003006:	4252      	negs	r2, r2
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	22ac      	movs	r2, #172	@ 0xac
 800300e:	589b      	ldr	r3, [r3, r2]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	0010      	movs	r0, r2
 8003014:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	ffffdf7f 	.word	0xffffdf7f
 8003024:	fffffeff 	.word	0xfffffeff

08003028 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2317      	movs	r3, #23
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	223c      	movs	r2, #60	@ 0x3c
 8003040:	5c9b      	ldrb	r3, [r3, r2]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_TIM_OC_ConfigChannel+0x22>
 8003046:	2302      	movs	r3, #2
 8003048:	e048      	b.n	80030dc <HAL_TIM_OC_ConfigChannel+0xb4>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	223c      	movs	r2, #60	@ 0x3c
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b14      	cmp	r3, #20
 8003056:	d835      	bhi.n	80030c4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	4b21      	ldr	r3, [pc, #132]	@ (80030e4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800305e:	18d3      	adds	r3, r2, r3
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	0011      	movs	r1, r2
 800306c:	0018      	movs	r0, r3
 800306e:	f000 fa0f 	bl	8003490 <TIM_OC1_SetConfig>
      break;
 8003072:	e02c      	b.n	80030ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	0011      	movs	r1, r2
 800307c:	0018      	movs	r0, r3
 800307e:	f000 fa87 	bl	8003590 <TIM_OC2_SetConfig>
      break;
 8003082:	e024      	b.n	80030ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	0011      	movs	r1, r2
 800308c:	0018      	movs	r0, r3
 800308e:	f000 fafd 	bl	800368c <TIM_OC3_SetConfig>
      break;
 8003092:	e01c      	b.n	80030ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	0011      	movs	r1, r2
 800309c:	0018      	movs	r0, r3
 800309e:	f000 fb77 	bl	8003790 <TIM_OC4_SetConfig>
      break;
 80030a2:	e014      	b.n	80030ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	0011      	movs	r1, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 fbd3 	bl	8003858 <TIM_OC5_SetConfig>
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	0011      	movs	r1, r2
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 fc25 	bl	800390c <TIM_OC6_SetConfig>
      break;
 80030c2:	e004      	b.n	80030ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80030c4:	2317      	movs	r3, #23
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
      break;
 80030cc:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	223c      	movs	r2, #60	@ 0x3c
 80030d2:	2100      	movs	r1, #0
 80030d4:	5499      	strb	r1, [r3, r2]

  return status;
 80030d6:	2317      	movs	r3, #23
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	781b      	ldrb	r3, [r3, #0]
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b006      	add	sp, #24
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	080046cc 	.word	0x080046cc

080030e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2317      	movs	r3, #23
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	223c      	movs	r2, #60	@ 0x3c
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003106:	2302      	movs	r3, #2
 8003108:	e0e5      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	223c      	movs	r2, #60	@ 0x3c
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b14      	cmp	r3, #20
 8003116:	d900      	bls.n	800311a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003118:	e0d1      	b.n	80032be <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	009a      	lsls	r2, r3, #2
 800311e:	4b70      	ldr	r3, [pc, #448]	@ (80032e0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003120:	18d3      	adds	r3, r2, r3
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	0011      	movs	r1, r2
 800312e:	0018      	movs	r0, r3
 8003130:	f000 f9ae 	bl	8003490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2108      	movs	r1, #8
 8003140:	430a      	orrs	r2, r1
 8003142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2104      	movs	r1, #4
 8003150:	438a      	bics	r2, r1
 8003152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6999      	ldr	r1, [r3, #24]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	619a      	str	r2, [r3, #24]
      break;
 8003166:	e0af      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fa0d 	bl	8003590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	0109      	lsls	r1, r1, #4
 8003184:	430a      	orrs	r2, r1
 8003186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4954      	ldr	r1, [pc, #336]	@ (80032e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003194:	400a      	ands	r2, r1
 8003196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	021a      	lsls	r2, r3, #8
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	619a      	str	r2, [r3, #24]
      break;
 80031ac:	e08c      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	0011      	movs	r1, r2
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 fa68 	bl	800368c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2108      	movs	r1, #8
 80031c8:	430a      	orrs	r2, r1
 80031ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2104      	movs	r1, #4
 80031d8:	438a      	bics	r2, r1
 80031da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69d9      	ldr	r1, [r3, #28]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	61da      	str	r2, [r3, #28]
      break;
 80031ee:	e06b      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	0011      	movs	r1, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 fac9 	bl	8003790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2180      	movs	r1, #128	@ 0x80
 800320a:	0109      	lsls	r1, r1, #4
 800320c:	430a      	orrs	r2, r1
 800320e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4932      	ldr	r1, [pc, #200]	@ (80032e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800321c:	400a      	ands	r2, r1
 800321e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69d9      	ldr	r1, [r3, #28]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	021a      	lsls	r2, r3, #8
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	61da      	str	r2, [r3, #28]
      break;
 8003234:	e048      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	0011      	movs	r1, r2
 800323e:	0018      	movs	r0, r3
 8003240:	f000 fb0a 	bl	8003858 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2108      	movs	r1, #8
 8003250:	430a      	orrs	r2, r1
 8003252:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2104      	movs	r1, #4
 8003260:	438a      	bics	r2, r1
 8003262:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003276:	e027      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	0011      	movs	r1, r2
 8003280:	0018      	movs	r0, r3
 8003282:	f000 fb43 	bl	800390c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2180      	movs	r1, #128	@ 0x80
 8003292:	0109      	lsls	r1, r1, #4
 8003294:	430a      	orrs	r2, r1
 8003296:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4910      	ldr	r1, [pc, #64]	@ (80032e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80032a4:	400a      	ands	r2, r1
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	021a      	lsls	r2, r3, #8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80032bc:	e004      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80032be:	2317      	movs	r3, #23
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
      break;
 80032c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	223c      	movs	r2, #60	@ 0x3c
 80032cc:	2100      	movs	r1, #0
 80032ce:	5499      	strb	r1, [r3, r2]

  return status;
 80032d0:	2317      	movs	r3, #23
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781b      	ldrb	r3, [r3, #0]
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b006      	add	sp, #24
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	08004720 	.word	0x08004720
 80032e4:	fffffbff 	.word	0xfffffbff

080032e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003300:	46c0      	nop			@ (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003330:	46c0      	nop			@ (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003340:	46c0      	nop			@ (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003350:	46c0      	nop			@ (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003370:	46c0      	nop			@ (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003380:	46c0      	nop			@ (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a37      	ldr	r2, [pc, #220]	@ (8003478 <TIM_Base_SetConfig+0xf0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d008      	beq.n	80033b2 <TIM_Base_SetConfig+0x2a>
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	2380      	movs	r3, #128	@ 0x80
 80033a4:	05db      	lsls	r3, r3, #23
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d003      	beq.n	80033b2 <TIM_Base_SetConfig+0x2a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a33      	ldr	r2, [pc, #204]	@ (800347c <TIM_Base_SetConfig+0xf4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2270      	movs	r2, #112	@ 0x70
 80033b6:	4393      	bics	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003478 <TIM_Base_SetConfig+0xf0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d014      	beq.n	80033f6 <TIM_Base_SetConfig+0x6e>
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	05db      	lsls	r3, r3, #23
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d00f      	beq.n	80033f6 <TIM_Base_SetConfig+0x6e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a28      	ldr	r2, [pc, #160]	@ (800347c <TIM_Base_SetConfig+0xf4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <TIM_Base_SetConfig+0x6e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a27      	ldr	r2, [pc, #156]	@ (8003480 <TIM_Base_SetConfig+0xf8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <TIM_Base_SetConfig+0x6e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a26      	ldr	r2, [pc, #152]	@ (8003484 <TIM_Base_SetConfig+0xfc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d003      	beq.n	80033f6 <TIM_Base_SetConfig+0x6e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a25      	ldr	r2, [pc, #148]	@ (8003488 <TIM_Base_SetConfig+0x100>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d108      	bne.n	8003408 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a24      	ldr	r2, [pc, #144]	@ (800348c <TIM_Base_SetConfig+0x104>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2280      	movs	r2, #128	@ 0x80
 800340c:	4393      	bics	r3, r2
 800340e:	001a      	movs	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a11      	ldr	r2, [pc, #68]	@ (8003478 <TIM_Base_SetConfig+0xf0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_Base_SetConfig+0xbe>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <TIM_Base_SetConfig+0xfc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_Base_SetConfig+0xbe>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a11      	ldr	r2, [pc, #68]	@ (8003488 <TIM_Base_SetConfig+0x100>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d103      	bne.n	800344e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2201      	movs	r2, #1
 800345a:	4013      	ands	r3, r2
 800345c:	2b01      	cmp	r3, #1
 800345e:	d106      	bne.n	800346e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2201      	movs	r2, #1
 8003466:	4393      	bics	r3, r2
 8003468:	001a      	movs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	611a      	str	r2, [r3, #16]
  }
}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b004      	add	sp, #16
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40002000 	.word	0x40002000
 8003484:	40014400 	.word	0x40014400
 8003488:	40014800 	.word	0x40014800
 800348c:	fffffcff 	.word	0xfffffcff

08003490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	2201      	movs	r2, #1
 80034a6:	4393      	bics	r3, r2
 80034a8:	001a      	movs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003578 <TIM_OC1_SetConfig+0xe8>)
 80034be:	4013      	ands	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2203      	movs	r2, #3
 80034c6:	4393      	bics	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2202      	movs	r2, #2
 80034d8:	4393      	bics	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a24      	ldr	r2, [pc, #144]	@ (800357c <TIM_OC1_SetConfig+0xec>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <TIM_OC1_SetConfig+0x6e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a23      	ldr	r2, [pc, #140]	@ (8003580 <TIM_OC1_SetConfig+0xf0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_OC1_SetConfig+0x6e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a22      	ldr	r2, [pc, #136]	@ (8003584 <TIM_OC1_SetConfig+0xf4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10c      	bne.n	8003518 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2208      	movs	r2, #8
 8003502:	4393      	bics	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2204      	movs	r2, #4
 8003514:	4393      	bics	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a18      	ldr	r2, [pc, #96]	@ (800357c <TIM_OC1_SetConfig+0xec>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <TIM_OC1_SetConfig+0xa0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a17      	ldr	r2, [pc, #92]	@ (8003580 <TIM_OC1_SetConfig+0xf0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_OC1_SetConfig+0xa0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a16      	ldr	r2, [pc, #88]	@ (8003584 <TIM_OC1_SetConfig+0xf4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d111      	bne.n	8003554 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <TIM_OC1_SetConfig+0xf8>)
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4a14      	ldr	r2, [pc, #80]	@ (800358c <TIM_OC1_SetConfig+0xfc>)
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b006      	add	sp, #24
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	fffeff8f 	.word	0xfffeff8f
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800
 8003588:	fffffeff 	.word	0xfffffeff
 800358c:	fffffdff 	.word	0xfffffdff

08003590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	2210      	movs	r2, #16
 80035a6:	4393      	bics	r3, r2
 80035a8:	001a      	movs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003670 <TIM_OC2_SetConfig+0xe0>)
 80035be:	4013      	ands	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003674 <TIM_OC2_SetConfig+0xe4>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2220      	movs	r2, #32
 80035da:	4393      	bics	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <TIM_OC2_SetConfig+0xe8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10d      	bne.n	800360e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2280      	movs	r2, #128	@ 0x80
 80035f6:	4393      	bics	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2240      	movs	r2, #64	@ 0x40
 800360a:	4393      	bics	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <TIM_OC2_SetConfig+0xe8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <TIM_OC2_SetConfig+0x96>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a18      	ldr	r2, [pc, #96]	@ (800367c <TIM_OC2_SetConfig+0xec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_OC2_SetConfig+0x96>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <TIM_OC2_SetConfig+0xf0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d113      	bne.n	800364e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <TIM_OC2_SetConfig+0xf4>)
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4a15      	ldr	r2, [pc, #84]	@ (8003688 <TIM_OC2_SetConfig+0xf8>)
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	621a      	str	r2, [r3, #32]
}
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b006      	add	sp, #24
 800366e:	bd80      	pop	{r7, pc}
 8003670:	feff8fff 	.word	0xfeff8fff
 8003674:	fffffcff 	.word	0xfffffcff
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800
 8003684:	fffffbff 	.word	0xfffffbff
 8003688:	fffff7ff 	.word	0xfffff7ff

0800368c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a31      	ldr	r2, [pc, #196]	@ (8003768 <TIM_OC3_SetConfig+0xdc>)
 80036a2:	401a      	ands	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a2d      	ldr	r2, [pc, #180]	@ (800376c <TIM_OC3_SetConfig+0xe0>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2203      	movs	r2, #3
 80036c0:	4393      	bics	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4a27      	ldr	r2, [pc, #156]	@ (8003770 <TIM_OC3_SetConfig+0xe4>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a23      	ldr	r2, [pc, #140]	@ (8003774 <TIM_OC3_SetConfig+0xe8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10d      	bne.n	8003706 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4a22      	ldr	r2, [pc, #136]	@ (8003778 <TIM_OC3_SetConfig+0xec>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	4a1e      	ldr	r2, [pc, #120]	@ (800377c <TIM_OC3_SetConfig+0xf0>)
 8003702:	4013      	ands	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1a      	ldr	r2, [pc, #104]	@ (8003774 <TIM_OC3_SetConfig+0xe8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_OC3_SetConfig+0x92>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <TIM_OC3_SetConfig+0xf4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_OC3_SetConfig+0x92>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a1a      	ldr	r2, [pc, #104]	@ (8003784 <TIM_OC3_SetConfig+0xf8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d113      	bne.n	8003746 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4a19      	ldr	r2, [pc, #100]	@ (8003788 <TIM_OC3_SetConfig+0xfc>)
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4a18      	ldr	r2, [pc, #96]	@ (800378c <TIM_OC3_SetConfig+0x100>)
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	621a      	str	r2, [r3, #32]
}
 8003760:	46c0      	nop			@ (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b006      	add	sp, #24
 8003766:	bd80      	pop	{r7, pc}
 8003768:	fffffeff 	.word	0xfffffeff
 800376c:	fffeff8f 	.word	0xfffeff8f
 8003770:	fffffdff 	.word	0xfffffdff
 8003774:	40012c00 	.word	0x40012c00
 8003778:	fffff7ff 	.word	0xfffff7ff
 800377c:	fffffbff 	.word	0xfffffbff
 8003780:	40014400 	.word	0x40014400
 8003784:	40014800 	.word	0x40014800
 8003788:	ffffefff 	.word	0xffffefff
 800378c:	ffffdfff 	.word	0xffffdfff

08003790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4a24      	ldr	r2, [pc, #144]	@ (8003838 <TIM_OC4_SetConfig+0xa8>)
 80037a6:	401a      	ands	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a20      	ldr	r2, [pc, #128]	@ (800383c <TIM_OC4_SetConfig+0xac>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003840 <TIM_OC4_SetConfig+0xb0>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003844 <TIM_OC4_SetConfig+0xb4>)
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	031b      	lsls	r3, r3, #12
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <TIM_OC4_SetConfig+0xb8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_OC4_SetConfig+0x70>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a16      	ldr	r2, [pc, #88]	@ (800384c <TIM_OC4_SetConfig+0xbc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_OC4_SetConfig+0x70>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <TIM_OC4_SetConfig+0xc0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d109      	bne.n	8003814 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <TIM_OC4_SetConfig+0xc4>)
 8003804:	4013      	ands	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	019b      	lsls	r3, r3, #6
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b006      	add	sp, #24
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	ffffefff 	.word	0xffffefff
 800383c:	feff8fff 	.word	0xfeff8fff
 8003840:	fffffcff 	.word	0xfffffcff
 8003844:	ffffdfff 	.word	0xffffdfff
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800
 8003854:	ffffbfff 	.word	0xffffbfff

08003858 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4a21      	ldr	r2, [pc, #132]	@ (80038f4 <TIM_OC5_SetConfig+0x9c>)
 800386e:	401a      	ands	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <TIM_OC5_SetConfig+0xa0>)
 8003884:	4013      	ands	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <TIM_OC5_SetConfig+0xa4>)
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a15      	ldr	r2, [pc, #84]	@ (8003900 <TIM_OC5_SetConfig+0xa8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <TIM_OC5_SetConfig+0x66>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a14      	ldr	r2, [pc, #80]	@ (8003904 <TIM_OC5_SetConfig+0xac>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <TIM_OC5_SetConfig+0x66>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a13      	ldr	r2, [pc, #76]	@ (8003908 <TIM_OC5_SetConfig+0xb0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d109      	bne.n	80038d2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4a0c      	ldr	r2, [pc, #48]	@ (80038f4 <TIM_OC5_SetConfig+0x9c>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	46c0      	nop			@ (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b006      	add	sp, #24
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	fffeffff 	.word	0xfffeffff
 80038f8:	fffeff8f 	.word	0xfffeff8f
 80038fc:	fffdffff 	.word	0xfffdffff
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800

0800390c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4a22      	ldr	r2, [pc, #136]	@ (80039ac <TIM_OC6_SetConfig+0xa0>)
 8003922:	401a      	ands	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a1e      	ldr	r2, [pc, #120]	@ (80039b0 <TIM_OC6_SetConfig+0xa4>)
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4a1a      	ldr	r2, [pc, #104]	@ (80039b4 <TIM_OC6_SetConfig+0xa8>)
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	051b      	lsls	r3, r3, #20
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a16      	ldr	r2, [pc, #88]	@ (80039b8 <TIM_OC6_SetConfig+0xac>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_OC6_SetConfig+0x68>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a15      	ldr	r2, [pc, #84]	@ (80039bc <TIM_OC6_SetConfig+0xb0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC6_SetConfig+0x68>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a14      	ldr	r2, [pc, #80]	@ (80039c0 <TIM_OC6_SetConfig+0xb4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d109      	bne.n	8003988 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <TIM_OC6_SetConfig+0xb8>)
 8003978:	4013      	ands	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	029b      	lsls	r3, r3, #10
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b006      	add	sp, #24
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	ffefffff 	.word	0xffefffff
 80039b0:	feff8fff 	.word	0xfeff8fff
 80039b4:	ffdfffff 	.word	0xffdfffff
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800
 80039c4:	fffbffff 	.word	0xfffbffff

080039c8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2184      	movs	r1, #132	@ 0x84
 80039d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <TIM_ResetCallback+0x80>)
 80039d6:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2188      	movs	r1, #136	@ 0x88
 80039dc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <TIM_ResetCallback+0x84>)
 80039de:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	218c      	movs	r1, #140	@ 0x8c
 80039e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a50 <TIM_ResetCallback+0x88>)
 80039e6:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2190      	movs	r1, #144	@ 0x90
 80039ec:	4a19      	ldr	r2, [pc, #100]	@ (8003a54 <TIM_ResetCallback+0x8c>)
 80039ee:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2194      	movs	r1, #148	@ 0x94
 80039f4:	4a18      	ldr	r2, [pc, #96]	@ (8003a58 <TIM_ResetCallback+0x90>)
 80039f6:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2198      	movs	r1, #152	@ 0x98
 80039fc:	4a17      	ldr	r2, [pc, #92]	@ (8003a5c <TIM_ResetCallback+0x94>)
 80039fe:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	219c      	movs	r1, #156	@ 0x9c
 8003a04:	4a16      	ldr	r2, [pc, #88]	@ (8003a60 <TIM_ResetCallback+0x98>)
 8003a06:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	21a0      	movs	r1, #160	@ 0xa0
 8003a0c:	4a15      	ldr	r2, [pc, #84]	@ (8003a64 <TIM_ResetCallback+0x9c>)
 8003a0e:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	21a4      	movs	r1, #164	@ 0xa4
 8003a14:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <TIM_ResetCallback+0xa0>)
 8003a16:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	21a8      	movs	r1, #168	@ 0xa8
 8003a1c:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <TIM_ResetCallback+0xa4>)
 8003a1e:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	21ac      	movs	r1, #172	@ 0xac
 8003a24:	4a12      	ldr	r2, [pc, #72]	@ (8003a70 <TIM_ResetCallback+0xa8>)
 8003a26:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	21b0      	movs	r1, #176	@ 0xb0
 8003a2c:	4a11      	ldr	r2, [pc, #68]	@ (8003a74 <TIM_ResetCallback+0xac>)
 8003a2e:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	21b4      	movs	r1, #180	@ 0xb4
 8003a34:	4a10      	ldr	r2, [pc, #64]	@ (8003a78 <TIM_ResetCallback+0xb0>)
 8003a36:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	21b8      	movs	r1, #184	@ 0xb8
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a7c <TIM_ResetCallback+0xb4>)
 8003a3e:	505a      	str	r2, [r3, r1]
}
 8003a40:	46c0      	nop			@ (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b002      	add	sp, #8
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	080032e9 	.word	0x080032e9
 8003a4c:	080032f9 	.word	0x080032f9
 8003a50:	08003359 	.word	0x08003359
 8003a54:	08003369 	.word	0x08003369
 8003a58:	08003319 	.word	0x08003319
 8003a5c:	08003329 	.word	0x08003329
 8003a60:	08003309 	.word	0x08003309
 8003a64:	08003339 	.word	0x08003339
 8003a68:	08003349 	.word	0x08003349
 8003a6c:	08003379 	.word	0x08003379
 8003a70:	08003bb9 	.word	0x08003bb9
 8003a74:	08003bc9 	.word	0x08003bc9
 8003a78:	08003bd9 	.word	0x08003bd9
 8003a7c:	08003be9 	.word	0x08003be9

08003a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	223c      	movs	r2, #60	@ 0x3c
 8003a92:	5c9b      	ldrb	r3, [r3, r2]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e06f      	b.n	8003b7c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	223c      	movs	r2, #60	@ 0x3c
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	22ff      	movs	r2, #255	@ 0xff
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	001a      	movs	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a33      	ldr	r2, [pc, #204]	@ (8003b84 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003ab8:	401a      	ands	r2, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a30      	ldr	r2, [pc, #192]	@ (8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b8c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003ad4:	401a      	ands	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003af0:	401a      	ands	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a26      	ldr	r2, [pc, #152]	@ (8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003afe:	401a      	ands	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a24      	ldr	r2, [pc, #144]	@ (8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	041b      	lsls	r3, r3, #16
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003b1c:	401a      	ands	r2, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d11c      	bne.n	8003b6a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003b34:	401a      	ands	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	051b      	lsls	r3, r3, #20
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a1a      	ldr	r2, [pc, #104]	@ (8003bac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003b44:	401a      	ands	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a17      	ldr	r2, [pc, #92]	@ (8003bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003b52:	401a      	ands	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	@ (8003bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b60:	401a      	ands	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	223c      	movs	r2, #60	@ 0x3c
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b004      	add	sp, #16
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	fffffcff 	.word	0xfffffcff
 8003b88:	fffffbff 	.word	0xfffffbff
 8003b8c:	fffff7ff 	.word	0xfffff7ff
 8003b90:	ffffefff 	.word	0xffffefff
 8003b94:	ffffdfff 	.word	0xffffdfff
 8003b98:	ffffbfff 	.word	0xffffbfff
 8003b9c:	fff0ffff 	.word	0xfff0ffff
 8003ba0:	efffffff 	.word	0xefffffff
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	ff0fffff 	.word	0xff0fffff
 8003bac:	feffffff 	.word	0xfeffffff
 8003bb0:	fdffffff 	.word	0xfdffffff
 8003bb4:	dfffffff 	.word	0xdfffffff

08003bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc0:	46c0      	nop			@ (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b002      	add	sp, #8
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e046      	b.n	8003c98 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2288      	movs	r2, #136	@ 0x88
 8003c0e:	589b      	ldr	r3, [r3, r2]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d107      	bne.n	8003c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2284      	movs	r2, #132	@ 0x84
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7fd f8d8 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2288      	movs	r2, #136	@ 0x88
 8003c28:	2124      	movs	r1, #36	@ 0x24
 8003c2a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2101      	movs	r1, #1
 8003c38:	438a      	bics	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 faa4 	bl	8004194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f828 	bl	8003ca4 <UART_SetConfig>
 8003c54:	0003      	movs	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e01c      	b.n	8003c98 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	490d      	ldr	r1, [pc, #52]	@ (8003ca0 <HAL_UART_Init+0xa8>)
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	212a      	movs	r1, #42	@ 0x2a
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f000 fb33 	bl	80042fc <UART_CheckIdleState>
 8003c96:	0003      	movs	r3, r0
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	ffffb7ff 	.word	0xffffb7ff

08003ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b5b0      	push	{r4, r5, r7, lr}
 8003ca6:	b090      	sub	sp, #64	@ 0x40
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cac:	231a      	movs	r3, #26
 8003cae:	2220      	movs	r2, #32
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	19db      	adds	r3, r3, r7
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4ac4      	ldr	r2, [pc, #784]	@ (8003fe8 <UART_SetConfig+0x344>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	0019      	movs	r1, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4abf      	ldr	r2, [pc, #764]	@ (8003fec <UART_SetConfig+0x348>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	68d9      	ldr	r1, [r3, #12]
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4ab9      	ldr	r2, [pc, #740]	@ (8003ff0 <UART_SetConfig+0x34c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d16:	4313      	orrs	r3, r2
 8003d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4ab4      	ldr	r2, [pc, #720]	@ (8003ff4 <UART_SetConfig+0x350>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	220f      	movs	r2, #15
 8003d38:	4393      	bics	r3, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	0003      	movs	r3, r0
 8003d46:	430b      	orrs	r3, r1
 8003d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4aaa      	ldr	r2, [pc, #680]	@ (8003ff8 <UART_SetConfig+0x354>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d131      	bne.n	8003db8 <UART_SetConfig+0x114>
 8003d54:	4ba9      	ldr	r3, [pc, #676]	@ (8003ffc <UART_SetConfig+0x358>)
 8003d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d58:	2203      	movs	r2, #3
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d01d      	beq.n	8003d9c <UART_SetConfig+0xf8>
 8003d60:	d823      	bhi.n	8003daa <UART_SetConfig+0x106>
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d00c      	beq.n	8003d80 <UART_SetConfig+0xdc>
 8003d66:	d820      	bhi.n	8003daa <UART_SetConfig+0x106>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <UART_SetConfig+0xce>
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d00e      	beq.n	8003d8e <UART_SetConfig+0xea>
 8003d70:	e01b      	b.n	8003daa <UART_SetConfig+0x106>
 8003d72:	231b      	movs	r3, #27
 8003d74:	2220      	movs	r2, #32
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e071      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003d80:	231b      	movs	r3, #27
 8003d82:	2220      	movs	r2, #32
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	19db      	adds	r3, r3, r7
 8003d88:	2202      	movs	r2, #2
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e06a      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003d8e:	231b      	movs	r3, #27
 8003d90:	2220      	movs	r2, #32
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	19db      	adds	r3, r3, r7
 8003d96:	2204      	movs	r2, #4
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e063      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003d9c:	231b      	movs	r3, #27
 8003d9e:	2220      	movs	r2, #32
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	19db      	adds	r3, r3, r7
 8003da4:	2208      	movs	r2, #8
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e05c      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003daa:	231b      	movs	r3, #27
 8003dac:	2220      	movs	r2, #32
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	19db      	adds	r3, r3, r7
 8003db2:	2210      	movs	r2, #16
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e055      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a90      	ldr	r2, [pc, #576]	@ (8004000 <UART_SetConfig+0x35c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d106      	bne.n	8003dd0 <UART_SetConfig+0x12c>
 8003dc2:	231b      	movs	r3, #27
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	19db      	adds	r3, r3, r7
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e049      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a86      	ldr	r2, [pc, #536]	@ (8003ff0 <UART_SetConfig+0x34c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d13e      	bne.n	8003e58 <UART_SetConfig+0x1b4>
 8003dda:	4b88      	ldr	r3, [pc, #544]	@ (8003ffc <UART_SetConfig+0x358>)
 8003ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dde:	23c0      	movs	r3, #192	@ 0xc0
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4013      	ands	r3, r2
 8003de4:	22c0      	movs	r2, #192	@ 0xc0
 8003de6:	0112      	lsls	r2, r2, #4
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d027      	beq.n	8003e3c <UART_SetConfig+0x198>
 8003dec:	22c0      	movs	r2, #192	@ 0xc0
 8003dee:	0112      	lsls	r2, r2, #4
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d82a      	bhi.n	8003e4a <UART_SetConfig+0x1a6>
 8003df4:	2280      	movs	r2, #128	@ 0x80
 8003df6:	0112      	lsls	r2, r2, #4
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d011      	beq.n	8003e20 <UART_SetConfig+0x17c>
 8003dfc:	2280      	movs	r2, #128	@ 0x80
 8003dfe:	0112      	lsls	r2, r2, #4
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d822      	bhi.n	8003e4a <UART_SetConfig+0x1a6>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <UART_SetConfig+0x16e>
 8003e08:	2280      	movs	r2, #128	@ 0x80
 8003e0a:	00d2      	lsls	r2, r2, #3
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <UART_SetConfig+0x18a>
 8003e10:	e01b      	b.n	8003e4a <UART_SetConfig+0x1a6>
 8003e12:	231b      	movs	r3, #27
 8003e14:	2220      	movs	r2, #32
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	19db      	adds	r3, r3, r7
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e021      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003e20:	231b      	movs	r3, #27
 8003e22:	2220      	movs	r2, #32
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	2202      	movs	r2, #2
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e01a      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003e2e:	231b      	movs	r3, #27
 8003e30:	2220      	movs	r2, #32
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	19db      	adds	r3, r3, r7
 8003e36:	2204      	movs	r2, #4
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	e013      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003e3c:	231b      	movs	r3, #27
 8003e3e:	2220      	movs	r2, #32
 8003e40:	189b      	adds	r3, r3, r2
 8003e42:	19db      	adds	r3, r3, r7
 8003e44:	2208      	movs	r2, #8
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e00c      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003e4a:	231b      	movs	r3, #27
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	19db      	adds	r3, r3, r7
 8003e52:	2210      	movs	r2, #16
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	e005      	b.n	8003e64 <UART_SetConfig+0x1c0>
 8003e58:	231b      	movs	r3, #27
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	19db      	adds	r3, r3, r7
 8003e60:	2210      	movs	r2, #16
 8003e62:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a61      	ldr	r2, [pc, #388]	@ (8003ff0 <UART_SetConfig+0x34c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d000      	beq.n	8003e70 <UART_SetConfig+0x1cc>
 8003e6e:	e092      	b.n	8003f96 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e70:	231b      	movs	r3, #27
 8003e72:	2220      	movs	r2, #32
 8003e74:	189b      	adds	r3, r3, r2
 8003e76:	19db      	adds	r3, r3, r7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d015      	beq.n	8003eaa <UART_SetConfig+0x206>
 8003e7e:	dc18      	bgt.n	8003eb2 <UART_SetConfig+0x20e>
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d00d      	beq.n	8003ea0 <UART_SetConfig+0x1fc>
 8003e84:	dc15      	bgt.n	8003eb2 <UART_SetConfig+0x20e>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <UART_SetConfig+0x1ec>
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d005      	beq.n	8003e9a <UART_SetConfig+0x1f6>
 8003e8e:	e010      	b.n	8003eb2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe fe48 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8003e94:	0003      	movs	r3, r0
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e98:	e014      	b.n	8003ec4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8004004 <UART_SetConfig+0x360>)
 8003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e9e:	e011      	b.n	8003ec4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea0:	f7fe fdb4 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ea8:	e00c      	b.n	8003ec4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eaa:	2380      	movs	r3, #128	@ 0x80
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003eb0:	e008      	b.n	8003ec4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003eb6:	231a      	movs	r3, #26
 8003eb8:	2220      	movs	r2, #32
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
        break;
 8003ec2:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d100      	bne.n	8003ecc <UART_SetConfig+0x228>
 8003eca:	e147      	b.n	800415c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8004008 <UART_SetConfig+0x364>)
 8003ed2:	0052      	lsls	r2, r2, #1
 8003ed4:	5ad3      	ldrh	r3, [r2, r3]
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003eda:	f7fc f913 	bl	8000104 <__udivsi3>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	0013      	movs	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d305      	bcc.n	8003efe <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d906      	bls.n	8003f0c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003efe:	231a      	movs	r3, #26
 8003f00:	2220      	movs	r2, #32
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	19db      	adds	r3, r3, r7
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	e127      	b.n	800415c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f18:	4b3b      	ldr	r3, [pc, #236]	@ (8004008 <UART_SetConfig+0x364>)
 8003f1a:	0052      	lsls	r2, r2, #1
 8003f1c:	5ad3      	ldrh	r3, [r2, r3]
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	69b8      	ldr	r0, [r7, #24]
 8003f2a:	69f9      	ldr	r1, [r7, #28]
 8003f2c:	f7fc f976 	bl	800021c <__aeabi_uldivmod>
 8003f30:	0002      	movs	r2, r0
 8003f32:	000b      	movs	r3, r1
 8003f34:	0e11      	lsrs	r1, r2, #24
 8003f36:	021d      	lsls	r5, r3, #8
 8003f38:	430d      	orrs	r5, r1
 8003f3a:	0214      	lsls	r4, r2, #8
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68b8      	ldr	r0, [r7, #8]
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	1900      	adds	r0, r0, r4
 8003f4e:	4169      	adcs	r1, r5
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f7fc f95d 	bl	800021c <__aeabi_uldivmod>
 8003f62:	0002      	movs	r2, r0
 8003f64:	000b      	movs	r3, r1
 8003f66:	0013      	movs	r3, r2
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f6c:	23c0      	movs	r3, #192	@ 0xc0
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d309      	bcc.n	8003f88 <UART_SetConfig+0x2e4>
 8003f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	035b      	lsls	r3, r3, #13
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d204      	bcs.n	8003f88 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	e0e9      	b.n	800415c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f88:	231a      	movs	r3, #26
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e0e2      	b.n	800415c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d000      	beq.n	8003fa4 <UART_SetConfig+0x300>
 8003fa2:	e083      	b.n	80040ac <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003fa4:	231b      	movs	r3, #27
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	189b      	adds	r3, r3, r2
 8003faa:	19db      	adds	r3, r3, r7
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d015      	beq.n	8003fde <UART_SetConfig+0x33a>
 8003fb2:	dc2b      	bgt.n	800400c <UART_SetConfig+0x368>
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d00d      	beq.n	8003fd4 <UART_SetConfig+0x330>
 8003fb8:	dc28      	bgt.n	800400c <UART_SetConfig+0x368>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <UART_SetConfig+0x320>
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d005      	beq.n	8003fce <UART_SetConfig+0x32a>
 8003fc2:	e023      	b.n	800400c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7fe fdae 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fcc:	e027      	b.n	800401e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <UART_SetConfig+0x360>)
 8003fd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fd2:	e024      	b.n	800401e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd4:	f7fe fd1a 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fdc:	e01f      	b.n	800401e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fde:	2380      	movs	r3, #128	@ 0x80
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fe4:	e01b      	b.n	800401e <UART_SetConfig+0x37a>
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	cfff69f3 	.word	0xcfff69f3
 8003fec:	ffffcfff 	.word	0xffffcfff
 8003ff0:	40008000 	.word	0x40008000
 8003ff4:	11fff4ff 	.word	0x11fff4ff
 8003ff8:	40013800 	.word	0x40013800
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40004400 	.word	0x40004400
 8004004:	00f42400 	.word	0x00f42400
 8004008:	08004774 	.word	0x08004774
      default:
        pclk = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004010:	231a      	movs	r3, #26
 8004012:	2220      	movs	r2, #32
 8004014:	189b      	adds	r3, r3, r2
 8004016:	19db      	adds	r3, r3, r7
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
        break;
 800401c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	2b00      	cmp	r3, #0
 8004022:	d100      	bne.n	8004026 <UART_SetConfig+0x382>
 8004024:	e09a      	b.n	800415c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800402a:	4b58      	ldr	r3, [pc, #352]	@ (800418c <UART_SetConfig+0x4e8>)
 800402c:	0052      	lsls	r2, r2, #1
 800402e:	5ad3      	ldrh	r3, [r2, r3]
 8004030:	0019      	movs	r1, r3
 8004032:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004034:	f7fc f866 	bl	8000104 <__udivsi3>
 8004038:	0003      	movs	r3, r0
 800403a:	005a      	lsls	r2, r3, #1
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	18d2      	adds	r2, r2, r3
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	0019      	movs	r1, r3
 800404a:	0010      	movs	r0, r2
 800404c:	f7fc f85a 	bl	8000104 <__udivsi3>
 8004050:	0003      	movs	r3, r0
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	2b0f      	cmp	r3, #15
 8004058:	d921      	bls.n	800409e <UART_SetConfig+0x3fa>
 800405a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	025b      	lsls	r3, r3, #9
 8004060:	429a      	cmp	r2, r3
 8004062:	d21c      	bcs.n	800409e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	b29a      	uxth	r2, r3
 8004068:	200e      	movs	r0, #14
 800406a:	2420      	movs	r4, #32
 800406c:	1903      	adds	r3, r0, r4
 800406e:	19db      	adds	r3, r3, r7
 8004070:	210f      	movs	r1, #15
 8004072:	438a      	bics	r2, r1
 8004074:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	b29b      	uxth	r3, r3
 800407c:	2207      	movs	r2, #7
 800407e:	4013      	ands	r3, r2
 8004080:	b299      	uxth	r1, r3
 8004082:	1903      	adds	r3, r0, r4
 8004084:	19db      	adds	r3, r3, r7
 8004086:	1902      	adds	r2, r0, r4
 8004088:	19d2      	adds	r2, r2, r7
 800408a:	8812      	ldrh	r2, [r2, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	1902      	adds	r2, r0, r4
 8004096:	19d2      	adds	r2, r2, r7
 8004098:	8812      	ldrh	r2, [r2, #0]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	e05e      	b.n	800415c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800409e:	231a      	movs	r3, #26
 80040a0:	2220      	movs	r2, #32
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	19db      	adds	r3, r3, r7
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e057      	b.n	800415c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ac:	231b      	movs	r3, #27
 80040ae:	2220      	movs	r2, #32
 80040b0:	189b      	adds	r3, r3, r2
 80040b2:	19db      	adds	r3, r3, r7
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d015      	beq.n	80040e6 <UART_SetConfig+0x442>
 80040ba:	dc18      	bgt.n	80040ee <UART_SetConfig+0x44a>
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d00d      	beq.n	80040dc <UART_SetConfig+0x438>
 80040c0:	dc15      	bgt.n	80040ee <UART_SetConfig+0x44a>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <UART_SetConfig+0x428>
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d005      	beq.n	80040d6 <UART_SetConfig+0x432>
 80040ca:	e010      	b.n	80040ee <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7fe fd2a 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 80040d0:	0003      	movs	r3, r0
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040d4:	e014      	b.n	8004100 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004190 <UART_SetConfig+0x4ec>)
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040da:	e011      	b.n	8004100 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040dc:	f7fe fc96 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80040e0:	0003      	movs	r3, r0
 80040e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040e4:	e00c      	b.n	8004100 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e6:	2380      	movs	r3, #128	@ 0x80
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040ec:	e008      	b.n	8004100 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80040f2:	231a      	movs	r3, #26
 80040f4:	2220      	movs	r2, #32
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	19db      	adds	r3, r3, r7
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
        break;
 80040fe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02a      	beq.n	800415c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800410a:	4b20      	ldr	r3, [pc, #128]	@ (800418c <UART_SetConfig+0x4e8>)
 800410c:	0052      	lsls	r2, r2, #1
 800410e:	5ad3      	ldrh	r3, [r2, r3]
 8004110:	0019      	movs	r1, r3
 8004112:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004114:	f7fb fff6 	bl	8000104 <__udivsi3>
 8004118:	0003      	movs	r3, r0
 800411a:	001a      	movs	r2, r3
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	18d2      	adds	r2, r2, r3
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0019      	movs	r1, r3
 800412a:	0010      	movs	r0, r2
 800412c:	f7fb ffea 	bl	8000104 <__udivsi3>
 8004130:	0003      	movs	r3, r0
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	2b0f      	cmp	r3, #15
 8004138:	d90a      	bls.n	8004150 <UART_SetConfig+0x4ac>
 800413a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800413c:	2380      	movs	r3, #128	@ 0x80
 800413e:	025b      	lsls	r3, r3, #9
 8004140:	429a      	cmp	r2, r3
 8004142:	d205      	bcs.n	8004150 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	b29a      	uxth	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	e005      	b.n	800415c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004150:	231a      	movs	r3, #26
 8004152:	2220      	movs	r2, #32
 8004154:	189b      	adds	r3, r3, r2
 8004156:	19db      	adds	r3, r3, r7
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	226a      	movs	r2, #106	@ 0x6a
 8004160:	2101      	movs	r1, #1
 8004162:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	2268      	movs	r2, #104	@ 0x68
 8004168:	2101      	movs	r1, #1
 800416a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	2200      	movs	r2, #0
 8004170:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	2200      	movs	r2, #0
 8004176:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004178:	231a      	movs	r3, #26
 800417a:	2220      	movs	r2, #32
 800417c:	189b      	adds	r3, r3, r2
 800417e:	19db      	adds	r3, r3, r7
 8004180:	781b      	ldrb	r3, [r3, #0]
}
 8004182:	0018      	movs	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	b010      	add	sp, #64	@ 0x40
 8004188:	bdb0      	pop	{r4, r5, r7, pc}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	08004774 	.word	0x08004774
 8004190:	00f42400 	.word	0x00f42400

08004194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a0:	2208      	movs	r2, #8
 80041a2:	4013      	ands	r3, r2
 80041a4:	d00b      	beq.n	80041be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a4a      	ldr	r2, [pc, #296]	@ (80042d8 <UART_AdvFeatureConfig+0x144>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	2201      	movs	r2, #1
 80041c4:	4013      	ands	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4a43      	ldr	r2, [pc, #268]	@ (80042dc <UART_AdvFeatureConfig+0x148>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	2202      	movs	r2, #2
 80041e6:	4013      	ands	r3, r2
 80041e8:	d00b      	beq.n	8004202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a3b      	ldr	r2, [pc, #236]	@ (80042e0 <UART_AdvFeatureConfig+0x14c>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	0019      	movs	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	2204      	movs	r2, #4
 8004208:	4013      	ands	r3, r2
 800420a:	d00b      	beq.n	8004224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4a34      	ldr	r2, [pc, #208]	@ (80042e4 <UART_AdvFeatureConfig+0x150>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	2210      	movs	r2, #16
 800422a:	4013      	ands	r3, r2
 800422c:	d00b      	beq.n	8004246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a2c      	ldr	r2, [pc, #176]	@ (80042e8 <UART_AdvFeatureConfig+0x154>)
 8004236:	4013      	ands	r3, r2
 8004238:	0019      	movs	r1, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424a:	2220      	movs	r2, #32
 800424c:	4013      	ands	r3, r2
 800424e:	d00b      	beq.n	8004268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	4a25      	ldr	r2, [pc, #148]	@ (80042ec <UART_AdvFeatureConfig+0x158>)
 8004258:	4013      	ands	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426c:	2240      	movs	r2, #64	@ 0x40
 800426e:	4013      	ands	r3, r2
 8004270:	d01d      	beq.n	80042ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a1d      	ldr	r2, [pc, #116]	@ (80042f0 <UART_AdvFeatureConfig+0x15c>)
 800427a:	4013      	ands	r3, r2
 800427c:	0019      	movs	r1, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800428e:	2380      	movs	r3, #128	@ 0x80
 8004290:	035b      	lsls	r3, r3, #13
 8004292:	429a      	cmp	r2, r3
 8004294:	d10b      	bne.n	80042ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a15      	ldr	r2, [pc, #84]	@ (80042f4 <UART_AdvFeatureConfig+0x160>)
 800429e:	4013      	ands	r3, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	2280      	movs	r2, #128	@ 0x80
 80042b4:	4013      	ands	r3, r2
 80042b6:	d00b      	beq.n	80042d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a0e      	ldr	r2, [pc, #56]	@ (80042f8 <UART_AdvFeatureConfig+0x164>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	0019      	movs	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]
  }
}
 80042d0:	46c0      	nop			@ (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	ffff7fff 	.word	0xffff7fff
 80042dc:	fffdffff 	.word	0xfffdffff
 80042e0:	fffeffff 	.word	0xfffeffff
 80042e4:	fffbffff 	.word	0xfffbffff
 80042e8:	ffffefff 	.word	0xffffefff
 80042ec:	ffffdfff 	.word	0xffffdfff
 80042f0:	ffefffff 	.word	0xffefffff
 80042f4:	ff9fffff 	.word	0xff9fffff
 80042f8:	fff7ffff 	.word	0xfff7ffff

080042fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b092      	sub	sp, #72	@ 0x48
 8004300:	af02      	add	r7, sp, #8
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2290      	movs	r2, #144	@ 0x90
 8004308:	2100      	movs	r1, #0
 800430a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800430c:	f7fc fe9c 	bl	8001048 <HAL_GetTick>
 8004310:	0003      	movs	r3, r0
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2208      	movs	r2, #8
 800431c:	4013      	ands	r3, r2
 800431e:	2b08      	cmp	r3, #8
 8004320:	d12d      	bne.n	800437e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004324:	2280      	movs	r2, #128	@ 0x80
 8004326:	0391      	lsls	r1, r2, #14
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4a47      	ldr	r2, [pc, #284]	@ (8004448 <UART_CheckIdleState+0x14c>)
 800432c:	9200      	str	r2, [sp, #0]
 800432e:	2200      	movs	r2, #0
 8004330:	f000 f88e 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 8004334:	1e03      	subs	r3, r0, #0
 8004336:	d022      	beq.n	800437e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004338:	f3ef 8310 	mrs	r3, PRIMASK
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004340:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004342:	2301      	movs	r3, #1
 8004344:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			@ (mov r8, r8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2180      	movs	r1, #128	@ 0x80
 800435a:	438a      	bics	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2288      	movs	r2, #136	@ 0x88
 800436e:	2120      	movs	r1, #32
 8004370:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2284      	movs	r2, #132	@ 0x84
 8004376:	2100      	movs	r1, #0
 8004378:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e060      	b.n	8004440 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2204      	movs	r2, #4
 8004386:	4013      	ands	r3, r2
 8004388:	2b04      	cmp	r3, #4
 800438a:	d146      	bne.n	800441a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438e:	2280      	movs	r2, #128	@ 0x80
 8004390:	03d1      	lsls	r1, r2, #15
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4a2c      	ldr	r2, [pc, #176]	@ (8004448 <UART_CheckIdleState+0x14c>)
 8004396:	9200      	str	r2, [sp, #0]
 8004398:	2200      	movs	r2, #0
 800439a:	f000 f859 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 800439e:	1e03      	subs	r3, r0, #0
 80043a0:	d03b      	beq.n	800441a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a2:	f3ef 8310 	mrs	r3, PRIMASK
 80043a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80043a8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ac:	2301      	movs	r3, #1
 80043ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f383 8810 	msr	PRIMASK, r3
}
 80043b6:	46c0      	nop			@ (mov r8, r8)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4922      	ldr	r1, [pc, #136]	@ (800444c <UART_CheckIdleState+0x150>)
 80043c4:	400a      	ands	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f383 8810 	msr	PRIMASK, r3
}
 80043d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d4:	f3ef 8310 	mrs	r3, PRIMASK
 80043d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80043da:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043de:	2301      	movs	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f383 8810 	msr	PRIMASK, r3
}
 80043e8:	46c0      	nop			@ (mov r8, r8)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2101      	movs	r1, #1
 80043f6:	438a      	bics	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f383 8810 	msr	PRIMASK, r3
}
 8004404:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	228c      	movs	r2, #140	@ 0x8c
 800440a:	2120      	movs	r1, #32
 800440c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2284      	movs	r2, #132	@ 0x84
 8004412:	2100      	movs	r1, #0
 8004414:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e012      	b.n	8004440 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2288      	movs	r2, #136	@ 0x88
 800441e:	2120      	movs	r1, #32
 8004420:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	228c      	movs	r2, #140	@ 0x8c
 8004426:	2120      	movs	r1, #32
 8004428:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2284      	movs	r2, #132	@ 0x84
 800443a:	2100      	movs	r1, #0
 800443c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	b010      	add	sp, #64	@ 0x40
 8004446:	bd80      	pop	{r7, pc}
 8004448:	01ffffff 	.word	0x01ffffff
 800444c:	fffffedf 	.word	0xfffffedf

08004450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	1dfb      	adds	r3, r7, #7
 800445e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004460:	e051      	b.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	3301      	adds	r3, #1
 8004466:	d04e      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fc fdee 	bl	8001048 <HAL_GetTick>
 800446c:	0002      	movs	r2, r0
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e051      	b.n	8004526 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2204      	movs	r2, #4
 800448a:	4013      	ands	r3, r2
 800448c:	d03b      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb6>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b80      	cmp	r3, #128	@ 0x80
 8004492:	d038      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b40      	cmp	r3, #64	@ 0x40
 8004498:	d035      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	2208      	movs	r2, #8
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d111      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2208      	movs	r2, #8
 80044ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 f83c 	bl	8004530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2290      	movs	r2, #144	@ 0x90
 80044bc:	2108      	movs	r1, #8
 80044be:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2284      	movs	r2, #132	@ 0x84
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e02c      	b.n	8004526 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	2380      	movs	r3, #128	@ 0x80
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	401a      	ands	r2, r3
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	429a      	cmp	r2, r3
 80044de:	d112      	bne.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2280      	movs	r2, #128	@ 0x80
 80044e6:	0112      	lsls	r2, r2, #4
 80044e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 f81f 	bl	8004530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2290      	movs	r2, #144	@ 0x90
 80044f6:	2120      	movs	r1, #32
 80044f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2284      	movs	r2, #132	@ 0x84
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e00f      	b.n	8004526 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	425a      	negs	r2, r3
 8004516:	4153      	adcs	r3, r2
 8004518:	b2db      	uxtb	r3, r3
 800451a:	001a      	movs	r2, r3
 800451c:	1dfb      	adds	r3, r7, #7
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d09e      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	@ 0x38
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004538:	f3ef 8310 	mrs	r3, PRIMASK
 800453c:	617b      	str	r3, [r7, #20]
  return(result);
 800453e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
 8004542:	2301      	movs	r3, #1
 8004544:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f383 8810 	msr	PRIMASK, r3
}
 800454c:	46c0      	nop			@ (mov r8, r8)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4926      	ldr	r1, [pc, #152]	@ (80045f4 <UART_EndRxTransfer+0xc4>)
 800455a:	400a      	ands	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004560:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f383 8810 	msr	PRIMASK, r3
}
 8004568:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456a:	f3ef 8310 	mrs	r3, PRIMASK
 800456e:	623b      	str	r3, [r7, #32]
  return(result);
 8004570:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30
 8004574:	2301      	movs	r3, #1
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	f383 8810 	msr	PRIMASK, r3
}
 800457e:	46c0      	nop			@ (mov r8, r8)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	491b      	ldr	r1, [pc, #108]	@ (80045f8 <UART_EndRxTransfer+0xc8>)
 800458c:	400a      	ands	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	f383 8810 	msr	PRIMASK, r3
}
 800459a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d118      	bne.n	80045d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a4:	f3ef 8310 	mrs	r3, PRIMASK
 80045a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ae:	2301      	movs	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f383 8810 	msr	PRIMASK, r3
}
 80045b8:	46c0      	nop			@ (mov r8, r8)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2110      	movs	r1, #16
 80045c6:	438a      	bics	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f383 8810 	msr	PRIMASK, r3
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	228c      	movs	r2, #140	@ 0x8c
 80045da:	2120      	movs	r1, #32
 80045dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b00e      	add	sp, #56	@ 0x38
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	fffffedf 	.word	0xfffffedf
 80045f8:	effffffe 	.word	0xeffffffe

080045fc <memset>:
 80045fc:	0003      	movs	r3, r0
 80045fe:	1882      	adds	r2, r0, r2
 8004600:	4293      	cmp	r3, r2
 8004602:	d100      	bne.n	8004606 <memset+0xa>
 8004604:	4770      	bx	lr
 8004606:	7019      	strb	r1, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	e7f9      	b.n	8004600 <memset+0x4>

0800460c <__libc_init_array>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	2600      	movs	r6, #0
 8004610:	4c0c      	ldr	r4, [pc, #48]	@ (8004644 <__libc_init_array+0x38>)
 8004612:	4d0d      	ldr	r5, [pc, #52]	@ (8004648 <__libc_init_array+0x3c>)
 8004614:	1b64      	subs	r4, r4, r5
 8004616:	10a4      	asrs	r4, r4, #2
 8004618:	42a6      	cmp	r6, r4
 800461a:	d109      	bne.n	8004630 <__libc_init_array+0x24>
 800461c:	2600      	movs	r6, #0
 800461e:	f000 f819 	bl	8004654 <_init>
 8004622:	4c0a      	ldr	r4, [pc, #40]	@ (800464c <__libc_init_array+0x40>)
 8004624:	4d0a      	ldr	r5, [pc, #40]	@ (8004650 <__libc_init_array+0x44>)
 8004626:	1b64      	subs	r4, r4, r5
 8004628:	10a4      	asrs	r4, r4, #2
 800462a:	42a6      	cmp	r6, r4
 800462c:	d105      	bne.n	800463a <__libc_init_array+0x2e>
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	00b3      	lsls	r3, r6, #2
 8004632:	58eb      	ldr	r3, [r5, r3]
 8004634:	4798      	blx	r3
 8004636:	3601      	adds	r6, #1
 8004638:	e7ee      	b.n	8004618 <__libc_init_array+0xc>
 800463a:	00b3      	lsls	r3, r6, #2
 800463c:	58eb      	ldr	r3, [r5, r3]
 800463e:	4798      	blx	r3
 8004640:	3601      	adds	r6, #1
 8004642:	e7f2      	b.n	800462a <__libc_init_array+0x1e>
 8004644:	08004794 	.word	0x08004794
 8004648:	08004794 	.word	0x08004794
 800464c:	08004798 	.word	0x08004798
 8004650:	08004794 	.word	0x08004794

08004654 <_init>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	46c0      	nop			@ (mov r8, r8)
 8004658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465a:	bc08      	pop	{r3}
 800465c:	469e      	mov	lr, r3
 800465e:	4770      	bx	lr

08004660 <_fini>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr
