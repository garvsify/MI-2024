
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d280  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0800d340  0800d340  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddc8  0800ddc8  0000f4d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ddc8  0800ddc8  0000edc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddd0  0800ddd0  0000f4d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddd0  0800ddd0  0000edd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddd4  0800ddd4  0000edd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004d4  20000000  0800ddd8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000008a4  200004d4  0800e2ac  0000f4d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d78  0800e2ac  0000fd78  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f4d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002133b  00000000  00000000  0000f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004abe  00000000  00000000  00030837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  000352f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001359  00000000  00000000  00036c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016264  00000000  00000000  00037f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000087ed  00000000  00000000  0004e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000569aa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005930  00000000  00000000  000569f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004d4 	.word	0x200004d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d314 	.word	0x0800d314

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004d8 	.word	0x200004d8
 8000104:	0800d314 	.word	0x0800d314

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e047      	b.n	80004ea <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d10c      	bne.n	800047c <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb0>)
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	4925      	ldr	r1, [pc, #148]	@ (8000500 <Initialise_Preset_Arrays+0xb4>)
 800046c:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b24      	ldr	r3, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xb8>)
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	4924      	ldr	r1, [pc, #144]	@ (8000508 <Initialise_Preset_Arrays+0xbc>)
 8000478:	50d1      	str	r1, [r2, r3]
 800047a:	e031      	b.n	80004e0 <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d10c      	bne.n	800049e <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	4b1c      	ldr	r3, [pc, #112]	@ (80004fc <Initialise_Preset_Arrays+0xb0>)
 800048a:	0092      	lsls	r2, r2, #2
 800048c:	491f      	ldr	r1, [pc, #124]	@ (800050c <Initialise_Preset_Arrays+0xc0>)
 800048e:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <Initialise_Preset_Arrays+0xb8>)
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	491d      	ldr	r1, [pc, #116]	@ (8000510 <Initialise_Preset_Arrays+0xc4>)
 800049a:	50d1      	str	r1, [r2, r3]
 800049c:	e020      	b.n	80004e0 <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d10c      	bne.n	80004c0 <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	4b14      	ldr	r3, [pc, #80]	@ (80004fc <Initialise_Preset_Arrays+0xb0>)
 80004ac:	0092      	lsls	r2, r2, #2
 80004ae:	4919      	ldr	r1, [pc, #100]	@ (8000514 <Initialise_Preset_Arrays+0xc8>)
 80004b0:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <Initialise_Preset_Arrays+0xb8>)
 80004b8:	0092      	lsls	r2, r2, #2
 80004ba:	4917      	ldr	r1, [pc, #92]	@ (8000518 <Initialise_Preset_Arrays+0xcc>)
 80004bc:	50d1      	str	r1, [r2, r3]
 80004be:	e00f      	b.n	80004e0 <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d10b      	bne.n	80004e0 <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <Initialise_Preset_Arrays+0xb0>)
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	4912      	ldr	r1, [pc, #72]	@ (800051c <Initialise_Preset_Arrays+0xd0>)
 80004d2:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <Initialise_Preset_Arrays+0xb8>)
 80004da:	0092      	lsls	r2, r2, #2
 80004dc:	4910      	ldr	r1, [pc, #64]	@ (8000520 <Initialise_Preset_Arrays+0xd4>)
 80004de:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781a      	ldrb	r2, [r3, #0]
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	3201      	adds	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b0f      	cmp	r3, #15
 80004f0:	d9b3      	bls.n	800045a <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200004f0 	.word	0x200004f0
 8000500:	0800d350 	.word	0x0800d350
 8000504:	20000500 	.word	0x20000500
 8000508:	20000000 	.word	0x20000000
 800050c:	0800d358 	.word	0x0800d358
 8000510:	20000008 	.word	0x20000008
 8000514:	0800d360 	.word	0x0800d360
 8000518:	20000010 	.word	0x20000010
 800051c:	0800d368 	.word	0x0800d368
 8000520:	20000018 	.word	0x20000018

08000524 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000528:	4b68      	ldr	r3, [pc, #416]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b01      	cmp	r3, #1
 8000530:	d104      	bne.n	800053c <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 8000532:	4b67      	ldr	r3, [pc, #412]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000534:	799b      	ldrb	r3, [r3, #6]
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800053a:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 800053c:	4b66      	ldr	r3, [pc, #408]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b01      	cmp	r3, #1
 8000544:	d104      	bne.n	8000550 <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000546:	4b62      	ldr	r3, [pc, #392]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000548:	891b      	ldrh	r3, [r3, #8]
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b61      	ldr	r3, [pc, #388]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054e:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 8000550:	4b62      	ldr	r3, [pc, #392]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b01      	cmp	r3, #1
 8000558:	d104      	bne.n	8000564 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 800055a:	4b5d      	ldr	r3, [pc, #372]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800055c:	7a9b      	ldrb	r3, [r3, #10]
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b5c      	ldr	r3, [pc, #368]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000562:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000564:	4b5e      	ldr	r3, [pc, #376]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b01      	cmp	r3, #1
 800056c:	d104      	bne.n	8000578 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056e:	4b58      	ldr	r3, [pc, #352]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000570:	899b      	ldrh	r3, [r3, #12]
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b57      	ldr	r3, [pc, #348]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000576:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000578:	4b5a      	ldr	r3, [pc, #360]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b01      	cmp	r3, #1
 8000580:	d104      	bne.n	800058c <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 8000582:	4b53      	ldr	r3, [pc, #332]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000584:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b52      	ldr	r3, [pc, #328]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800058a:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 800058c:	4b4f      	ldr	r3, [pc, #316]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b03      	cmp	r3, #3
 8000594:	d10e      	bne.n	80005b4 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000596:	4b54      	ldr	r3, [pc, #336]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	0013      	movs	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	189b      	adds	r3, r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4a51      	ldr	r2, [pc, #324]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a8:	189b      	adds	r3, r3, r2
 80005aa:	4a4a      	ldr	r2, [pc, #296]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 f8d1 	bl	8000756 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b4:	4b48      	ldr	r3, [pc, #288]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d10e      	bne.n	80005dc <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005be:	4b4a      	ldr	r3, [pc, #296]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	1e5a      	subs	r2, r3, #1
 80005c6:	0013      	movs	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	189b      	adds	r3, r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005d0:	189b      	adds	r3, r3, r2
 80005d2:	4a40      	ldr	r2, [pc, #256]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 f8e6 	bl	80007a8 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005dc:	4b3f      	ldr	r3, [pc, #252]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d10e      	bne.n	8000604 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e6:	4b40      	ldr	r3, [pc, #256]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	1e5a      	subs	r2, r3, #1
 80005ee:	0013      	movs	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	189b      	adds	r3, r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4a3d      	ldr	r2, [pc, #244]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f8:	189b      	adds	r3, r3, r2
 80005fa:	4a36      	ldr	r2, [pc, #216]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f8e1 	bl	80007c6 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000604:	4b36      	ldr	r3, [pc, #216]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b03      	cmp	r3, #3
 800060c:	d10e      	bne.n	800062c <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060e:	4b36      	ldr	r3, [pc, #216]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	1e5a      	subs	r2, r3, #1
 8000616:	0013      	movs	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	189b      	adds	r3, r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000620:	189b      	adds	r3, r3, r2
 8000622:	4a2c      	ldr	r2, [pc, #176]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f000 f8dc 	bl	80007e4 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 800062c:	4b2d      	ldr	r3, [pc, #180]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b03      	cmp	r3, #3
 8000634:	d10e      	bne.n	8000654 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	0013      	movs	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	189b      	adds	r3, r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4a29      	ldr	r2, [pc, #164]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000648:	189b      	adds	r3, r3, r2
 800064a:	4a22      	ldr	r2, [pc, #136]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f000 f8d7 	bl	8000802 <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b02      	cmp	r3, #2
 800065c:	d105      	bne.n	800066a <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065e:	4a1d      	ldr	r2, [pc, #116]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1cc>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 faa3 	bl	8000bb0 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b02      	cmp	r3, #2
 8000672:	d105      	bne.n	8000680 <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000674:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fabd 	bl	8000bfa <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b02      	cmp	r3, #2
 8000688:	d105      	bne.n	8000696 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 facb 	bl	8000c2c <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b02      	cmp	r3, #2
 800069e:	d105      	bne.n	80006ac <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fad3 	bl	8000c52 <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d105      	bne.n	80006c2 <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b6:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fae1 	bl	8000c84 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	20000430 	.word	0x20000430
 80006d0:	20000ce8 	.word	0x20000ce8
 80006d4:	20000cc4 	.word	0x20000cc4
 80006d8:	20000428 	.word	0x20000428
 80006dc:	2000042c 	.word	0x2000042c
 80006e0:	20000434 	.word	0x20000434
 80006e4:	20000438 	.word	0x20000438
 80006e8:	20000538 	.word	0x20000538
 80006ec:	20000510 	.word	0x20000510
 80006f0:	20000540 	.word	0x20000540
 80006f4:	20000541 	.word	0x20000541
 80006f8:	20000542 	.word	0x20000542
 80006fc:	20000543 	.word	0x20000543
 8000700:	20000544 	.word	0x20000544

08000704 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	b29a      	uxth	r2, r3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	78db      	ldrb	r3, [r3, #3]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	18db      	adds	r3, r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	b29a      	uxth	r2, r3
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	811a      	strh	r2, [r3, #8]

	return 1;
 800074c:	2301      	movs	r3, #1
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}

08000756 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 8000760:	210f      	movs	r1, #15
 8000762:	187b      	adds	r3, r7, r1
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	7812      	ldrb	r2, [r2, #0]
 8000768:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 800076a:	187b      	adds	r3, r7, r1
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000770:	d803      	bhi.n	800077a <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2200      	movs	r2, #0
 8000776:	719a      	strb	r2, [r3, #6]
 8000778:	e011      	b.n	800079e <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 800077a:	230f      	movs	r3, #15
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b55      	cmp	r3, #85	@ 0x55
 8000782:	d803      	bhi.n	800078c <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2201      	movs	r2, #1
 8000788:	719a      	strb	r2, [r3, #6]
 800078a:	e008      	b.n	800079e <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	db02      	blt.n	800079e <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2202      	movs	r2, #2
 800079c:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b004      	add	sp, #16
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	885b      	ldrh	r3, [r3, #2]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	811a      	strh	r2, [r3, #8]

	return 1;
 80007bc:	2301      	movs	r3, #1
}
 80007be:	0018      	movs	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	729a      	strb	r2, [r3, #10]

	return 1;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	88db      	ldrh	r3, [r3, #6]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	819a      	strh	r2, [r3, #12]

	return 1;
 80007f8:	2301      	movs	r3, #1
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}

08000802 <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	891b      	ldrh	r3, [r3, #8]
 8000810:	b29a      	uxth	r2, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000816:	2301      	movs	r3, #1
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}

08000820 <Pack_Preset_Into_Doubleword>:
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit

	return 1;
}

uint8_t Pack_Preset_Into_Doubleword(struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	b089      	sub	sp, #36	@ 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]

	uint64_t packed = 0;
 800082a:	2000      	movs	r0, #0
 800082c:	2100      	movs	r1, #0
 800082e:	61b8      	str	r0, [r7, #24]
 8000830:	61f9      	str	r1, [r7, #28]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000832:	210f      	movs	r1, #15
 8000834:	2008      	movs	r0, #8
 8000836:	1809      	adds	r1, r1, r0
 8000838:	19c9      	adds	r1, r1, r7
 800083a:	2000      	movs	r0, #0
 800083c:	7008      	strb	r0, [r1, #0]
 800083e:	e032      	b.n	80008a6 <Pack_Preset_Into_Doubleword+0x86>

		packed |= ((uint64_t)*((uint8_t *)preset_ptr) << (i << 3)); //<< (i*8)
 8000840:	68f9      	ldr	r1, [r7, #12]
 8000842:	7809      	ldrb	r1, [r1, #0]
 8000844:	000c      	movs	r4, r1
 8000846:	2100      	movs	r1, #0
 8000848:	000d      	movs	r5, r1
 800084a:	210f      	movs	r1, #15
 800084c:	2008      	movs	r0, #8
 800084e:	1809      	adds	r1, r1, r0
 8000850:	19c9      	adds	r1, r1, r7
 8000852:	7809      	ldrb	r1, [r1, #0]
 8000854:	00c9      	lsls	r1, r1, #3
 8000856:	0008      	movs	r0, r1
 8000858:	3820      	subs	r0, #32
 800085a:	2800      	cmp	r0, #0
 800085c:	db03      	blt.n	8000866 <Pack_Preset_Into_Doubleword+0x46>
 800085e:	0026      	movs	r6, r4
 8000860:	4086      	lsls	r6, r0
 8000862:	0033      	movs	r3, r6
 8000864:	e008      	b.n	8000878 <Pack_Preset_Into_Doubleword+0x58>
 8000866:	2020      	movs	r0, #32
 8000868:	1a40      	subs	r0, r0, r1
 800086a:	0026      	movs	r6, r4
 800086c:	40c6      	lsrs	r6, r0
 800086e:	0030      	movs	r0, r6
 8000870:	002e      	movs	r6, r5
 8000872:	408e      	lsls	r6, r1
 8000874:	0033      	movs	r3, r6
 8000876:	4303      	orrs	r3, r0
 8000878:	0020      	movs	r0, r4
 800087a:	4088      	lsls	r0, r1
 800087c:	0002      	movs	r2, r0
 800087e:	69b9      	ldr	r1, [r7, #24]
 8000880:	4311      	orrs	r1, r2
 8000882:	6039      	str	r1, [r7, #0]
 8000884:	69f9      	ldr	r1, [r7, #28]
 8000886:	4319      	orrs	r1, r3
 8000888:	6079      	str	r1, [r7, #4]
 800088a:	6838      	ldr	r0, [r7, #0]
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	61b8      	str	r0, [r7, #24]
 8000890:	61f9      	str	r1, [r7, #28]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000892:	260f      	movs	r6, #15
 8000894:	2108      	movs	r1, #8
 8000896:	1870      	adds	r0, r6, r1
 8000898:	19c1      	adds	r1, r0, r7
 800089a:	7808      	ldrb	r0, [r1, #0]
 800089c:	2108      	movs	r1, #8
 800089e:	1871      	adds	r1, r6, r1
 80008a0:	19c9      	adds	r1, r1, r7
 80008a2:	3001      	adds	r0, #1
 80008a4:	7008      	strb	r0, [r1, #0]
 80008a6:	210f      	movs	r1, #15
 80008a8:	2008      	movs	r0, #8
 80008aa:	1809      	adds	r1, r1, r0
 80008ac:	19c9      	adds	r1, r1, r7
 80008ae:	7809      	ldrb	r1, [r1, #0]
 80008b0:	2904      	cmp	r1, #4
 80008b2:	d9c5      	bls.n	8000840 <Pack_Preset_Into_Doubleword+0x20>
	}

	*Doubleword_ptr = packed;
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	600a      	str	r2, [r1, #0]
 80008bc:	604b      	str	r3, [r1, #4]

	return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b009      	add	sp, #36	@ 0x24
 80008c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008c8 <Read_and_Interpret_Preset_From_Flash>:

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 80008da:	2317      	movs	r3, #23
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	e020      	b.n	8000926 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 80008e4:	2117      	movs	r1, #23
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da06      	bge.n	8000904 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	227f      	movs	r2, #127	@ 0x7f
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	e00a      	b.n	800091a <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000904:	2117      	movs	r1, #23
 8000906:	187b      	adds	r3, r7, r1
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	18d2      	adds	r2, r2, r3
 800090e:	187b      	adds	r3, r7, r1
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	68f9      	ldr	r1, [r7, #12]
 8000914:	18cb      	adds	r3, r1, r3
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800091a:	2117      	movs	r1, #23
 800091c:	187b      	adds	r3, r7, r1
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	187b      	adds	r3, r7, r1
 8000922:	3201      	adds	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	2317      	movs	r3, #23
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d9d9      	bls.n	80008e4 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b006      	add	sp, #24
 8000938:	bd80      	pop	{r7, pc}

0800093a <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 800093a:	b580      	push	{r7, lr}
 800093c:	b088      	sub	sp, #32
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 800094c:	2316      	movs	r3, #22
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000954:	231f      	movs	r3, #31
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e02c      	b.n	80009b8 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 800095e:	211f      	movs	r1, #31
 8000960:	187b      	adds	r3, r7, r1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	18d3      	adds	r3, r2, r3
 8000968:	781a      	ldrb	r2, [r3, #0]
 800096a:	2016      	movs	r0, #22
 800096c:	183b      	adds	r3, r7, r0
 800096e:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 8000970:	183b      	adds	r3, r7, r0
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b01      	cmp	r3, #1
 8000978:	d106      	bne.n	8000988 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	e011      	b.n	80009ac <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000988:	2216      	movs	r2, #22
 800098a:	18bb      	adds	r3, r7, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2bff      	cmp	r3, #255	@ 0xff
 8000992:	d004      	beq.n	800099e <Read_and_Interpret_Misc_From_Flash+0x64>
 8000994:	18bb      	adds	r3, r7, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d106      	bne.n	80009ac <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 800099e:	231f      	movs	r3, #31
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	18d3      	adds	r3, r2, r3
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 80009ac:	211f      	movs	r1, #31
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	3201      	adds	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	231f      	movs	r3, #31
 80009ba:	18fa      	adds	r2, r7, r3
 80009bc:	2128      	movs	r1, #40	@ 0x28
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d3ca      	bcc.n	800095e <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	18d3      	adds	r3, r2, r3
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	2116      	movs	r1, #22
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d105      	bne.n	80009ee <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2180      	movs	r1, #128	@ 0x80
 80009e6:	0018      	movs	r0, r3
 80009e8:	f005 f8ec 	bl	8005bc4 <Clear_Status_Bit>
 80009ec:	e00f      	b.n	8000a0e <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 80009ee:	2216      	movs	r2, #22
 80009f0:	18bb      	adds	r3, r7, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d004      	beq.n	8000a04 <Read_and_Interpret_Misc_From_Flash+0xca>
 80009fa:	18bb      	adds	r3, r7, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2bff      	cmp	r3, #255	@ 0xff
 8000a02:	d104      	bne.n	8000a0e <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2180      	movs	r1, #128	@ 0x80
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f005 f8c9 	bl	8005ba0 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000a0e:	2328      	movs	r3, #40	@ 0x28
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	18d3      	adds	r3, r2, r3
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	2116      	movs	r1, #22
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d107      	bne.n	8000a3c <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	00da      	lsls	r2, r3, #3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f005 f8b3 	bl	8005ba0 <Set_Status_Bit>
 8000a3a:	e011      	b.n	8000a60 <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 8000a3c:	2216      	movs	r2, #22
 8000a3e:	18bb      	adds	r3, r7, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d004      	beq.n	8000a52 <Read_and_Interpret_Misc_From_Flash+0x118>
 8000a48:	18bb      	adds	r3, r7, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2bff      	cmp	r3, #255	@ 0xff
 8000a50:	d106      	bne.n	8000a60 <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	00da      	lsls	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f005 f8b2 	bl	8005bc4 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000a60:	2328      	movs	r3, #40	@ 0x28
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	3302      	adds	r3, #2
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	18d3      	adds	r3, r2, r3
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	2116      	movs	r1, #22
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	d908      	bls.n	8000a90 <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000a7e:	2117      	movs	r1, #23
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	187a      	adds	r2, r7, r1
 8000a8a:	7812      	ldrb	r2, [r2, #0]
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	e005      	b.n	8000a9c <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000a90:	2316      	movs	r3, #22
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b008      	add	sp, #32
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000ab4:	2317      	movs	r3, #23
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e03c      	b.n	8000b38 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000abe:	2117      	movs	r1, #23
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d112      	bne.n	8000af6 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	189b      	adds	r3, r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	001a      	movs	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	189b      	adds	r3, r3, r2
 8000aee:	0019      	movs	r1, r3
 8000af0:	f7ff fe08 	bl	8000704 <Convert_All_Preset_Values>
 8000af4:	e01a      	b.n	8000b2c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000af6:	2117      	movs	r1, #23
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	18d3      	adds	r3, r2, r3
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d111      	bne.n	8000b2c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	18d3      	adds	r3, r2, r3
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	0013      	movs	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	189b      	adds	r3, r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	001a      	movs	r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	189b      	adds	r3, r3, r2
 8000b26:	0019      	movs	r1, r3
 8000b28:	f7ff fdec 	bl	8000704 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000b2c:	2117      	movs	r1, #23
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	3201      	adds	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	2317      	movs	r3, #23
 8000b3a:	18fa      	adds	r2, r7, r3
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3ba      	bcc.n	8000abe <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000b48:	2301      	movs	r3, #1
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b006      	add	sp, #24
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000b58:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b94 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	0010      	movs	r0, r2
 8000b60:	f7ff feb2 	bl	80008c8 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000b66:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0010      	movs	r0, r2
 8000b6c:	f7ff feac 	bl	80008c8 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000b70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000b72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba4 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000b74:	0019      	movs	r1, r3
 8000b76:	0010      	movs	r0, r2
 8000b78:	f7ff fea6 	bl	80008c8 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bac <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000b80:	0019      	movs	r1, r3
 8000b82:	0010      	movs	r0, r2
 8000b84:	f7ff fea0 	bl	80008c8 <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000
 8000b94:	0800f800 	.word	0x0800f800
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	0800f808 	.word	0x0800f808
 8000ba0:	20000010 	.word	0x20000010
 8000ba4:	0800f810 	.word	0x0800f810
 8000ba8:	20000018 	.word	0x20000018
 8000bac:	0800f818 	.word	0x0800f818

08000bb0 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bc2:	d803      	bhi.n	8000bcc <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	719a      	strb	r2, [r3, #6]
 8000bca:	e011      	b.n	8000bf0 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b55      	cmp	r3, #85	@ 0x55
 8000bd4:	d803      	bhi.n	8000bde <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	719a      	strb	r2, [r3, #6]
 8000bdc:	e008      	b.n	8000bf0 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db02      	blt.n	8000bf0 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2202      	movs	r2, #2
 8000bee:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	210e      	movs	r1, #14
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	8812      	ldrh	r2, [r2, #0]
 8000c16:	00d2      	lsls	r2, r2, #3
 8000c18:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	187a      	adds	r2, r7, r1
 8000c1e:	8812      	ldrh	r2, [r2, #0]
 8000c20:	811a      	strh	r2, [r3, #8]

	return 1;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b004      	add	sp, #16
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000c36:	210f      	movs	r1, #15
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	187a      	adds	r2, r7, r1
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	729a      	strb	r2, [r3, #10]

	return 1;
 8000c48:	2301      	movs	r3, #1
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000c66:	187a      	adds	r2, r7, r1
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	18db      	adds	r3, r3, r3
 8000c6e:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	819a      	strh	r2, [r3, #12]

	return 1;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b004      	add	sp, #16
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000c8e:	210f      	movs	r1, #15
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	187a      	adds	r2, r7, r1
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000cc8:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000cd6:	701a      	strb	r2, [r3, #0]

	return 1;
 8000cd8:	2301      	movs	r3, #1
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	20000430 	.word	0x20000430
 8000ce8:	20000540 	.word	0x20000540

08000cec <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000cfc:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000d0a:	705a      	strb	r2, [r3, #1]

	return 1;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	20000428 	.word	0x20000428
 8000d1c:	20000540 	.word	0x20000540

08000d20 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000d30:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000d3e:	709a      	strb	r2, [r3, #2]

	return 1;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	2000042c 	.word	0x2000042c
 8000d50:	20000540 	.word	0x20000540

08000d54 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d64:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000d72:	70da      	strb	r2, [r3, #3]

	return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	0018      	movs	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	20000434 	.word	0x20000434
 8000d84:	20000540 	.word	0x20000540

08000d88 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d98:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000da6:	711a      	strb	r2, [r3, #4]

	return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	20000438 	.word	0x20000438
 8000db8:	20000540 	.word	0x20000540

08000dbc <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000dc8:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000dca:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000dcc:	2203      	movs	r2, #3
 8000dce:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <Set_All_Pots_to_PC_Mode+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <Set_All_Pots_to_PC_Mode+0x60>)
 8000dd8:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <Set_All_Pots_to_PC_Mode+0x60>)
 8000ddc:	2203      	movs	r2, #3
 8000dde:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <Set_All_Pots_to_PC_Mode+0x64>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <Set_All_Pots_to_PC_Mode+0x64>)
 8000de8:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <Set_All_Pots_to_PC_Mode+0x64>)
 8000dec:	2203      	movs	r2, #3
 8000dee:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <Set_All_Pots_to_PC_Mode+0x68>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <Set_All_Pots_to_PC_Mode+0x68>)
 8000df8:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <Set_All_Pots_to_PC_Mode+0x68>)
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000e08:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	701a      	strb	r2, [r3, #0]

	return 1;
 8000e10:	2301      	movs	r3, #1
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000430 	.word	0x20000430
 8000e1c:	20000428 	.word	0x20000428
 8000e20:	2000042c 	.word	0x2000042c
 8000e24:	20000434 	.word	0x20000434
 8000e28:	20000438 	.word	0x20000438

08000e2c <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000e34:	210f      	movs	r1, #15
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	7812      	ldrb	r2, [r2, #0]
 8000e3c:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	187a      	adds	r2, r7, r1
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	09d2      	lsrs	r2, r2, #7
 8000e46:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000e54:	2300      	movs	r3, #0
	}
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000e66:	210f      	movs	r1, #15
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	187a      	adds	r2, r7, r1
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	09d2      	lsrs	r2, r2, #7
 8000e78:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000e86:	2301      	movs	r3, #1
	}
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b004      	add	sp, #16
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000e98:	210f      	movs	r1, #15
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	200e      	movs	r0, #14
 8000ea8:	183b      	adds	r3, r7, r0
 8000eaa:	0912      	lsrs	r2, r2, #4
 8000eac:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000eae:	183a      	adds	r2, r7, r0
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d101      	bne.n	8000ebe <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000ebe:	2300      	movs	r3, #0
	}
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b004      	add	sp, #16
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	220b      	movs	r2, #11
 8000ed6:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	200e      	movs	r0, #14
 8000ee0:	183b      	adds	r3, r7, r0
 8000ee2:	0912      	lsrs	r2, r2, #4
 8000ee4:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000ee6:	183a      	adds	r2, r7, r0
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d101      	bne.n	8000ef6 <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000ef6:	2300      	movs	r3, #0
	}
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b004      	add	sp, #16
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b77      	cmp	r3, #119	@ 0x77
 8000f10:	d91d      	bls.n	8000f4e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b79      	cmp	r3, #121	@ 0x79
 8000f1a:	d101      	bne.n	8000f20 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e017      	b.n	8000f50 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f28:	d101      	bne.n	8000f2e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e010      	b.n	8000f50 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f36:	d101      	bne.n	8000f3c <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e009      	b.n	8000f50 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f44:	d101      	bne.n	8000f4a <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e002      	b.n	8000f50 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000f4e:	2300      	movs	r3, #0
	}
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b77      	cmp	r3, #119	@ 0x77
 8000f68:	d901      	bls.n	8000f6e <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e023      	b.n	8000fb6 <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b14      	cmp	r3, #20
 8000f76:	d101      	bne.n	8000f7c <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e01c      	b.n	8000fb6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b15      	cmp	r3, #21
 8000f84:	d101      	bne.n	8000f8a <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e015      	b.n	8000fb6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b16      	cmp	r3, #22
 8000f92:	d101      	bne.n	8000f98 <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e00e      	b.n	8000fb6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b17      	cmp	r3, #23
 8000fa0:	d101      	bne.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e007      	b.n	8000fb6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b18      	cmp	r3, #24
 8000fae:	d101      	bne.n	8000fb4 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8000fb4:	2300      	movs	r3, #0
		}
	}
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b79      	cmp	r3, #121	@ 0x79
 8000fd0:	d108      	bne.n	8000fe4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e031      	b.n	8001044 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e02f      	b.n	8001044 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fec:	d10d      	bne.n	800100a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001000:	d101      	bne.n	8001006 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8001002:	2301      	movs	r3, #1
 8001004:	e01e      	b.n	8001044 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001006:	2300      	movs	r3, #0
 8001008:	e01c      	b.n	8001044 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b7c      	cmp	r3, #124	@ 0x7c
 8001012:	d108      	bne.n	8001026 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 800101e:	2301      	movs	r3, #1
 8001020:	e010      	b.n	8001044 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001022:	2300      	movs	r3, #0
 8001024:	e00e      	b.n	8001044 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b7d      	cmp	r3, #125	@ 0x7d
 800102e:	d108      	bne.n	8001042 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 800103a:	2301      	movs	r3, #1
 800103c:	e002      	b.n	8001044 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8001042:	2300      	movs	r3, #0
	}
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}

0800104c <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2bf0      	cmp	r3, #240	@ 0xf0
 800105c:	d101      	bne.n	8001062 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8001062:	2300      	movs	r3, #0
	}
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	000a      	movs	r2, r1
 8001076:	1cfb      	adds	r3, r7, #3
 8001078:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	200f      	movs	r0, #15
 8001082:	183b      	adds	r3, r7, r0
 8001084:	210f      	movs	r1, #15
 8001086:	400a      	ands	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 800108a:	210e      	movs	r1, #14
 800108c:	187b      	adds	r3, r7, r1
 800108e:	1cfa      	adds	r2, r7, #3
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8001094:	183a      	adds	r2, r7, r0
 8001096:	187b      	adds	r3, r7, r1
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d101      	bne.n	80010a4 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 80010a4:	2300      	movs	r3, #0
	}
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b004      	add	sp, #16
 80010ac:	bd80      	pop	{r7, pc}

080010ae <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 80010b6:	230e      	movs	r3, #14
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2200      	movs	r2, #0
 80010bc:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80010be:	230d      	movs	r3, #13
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e011      	b.n	80010ec <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 80010c8:	200d      	movs	r0, #13
 80010ca:	183b      	adds	r3, r7, r0
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	0019      	movs	r1, r3
 80010d6:	220e      	movs	r2, #14
 80010d8:	18bb      	adds	r3, r7, r2
 80010da:	18ba      	adds	r2, r7, r2
 80010dc:	8812      	ldrh	r2, [r2, #0]
 80010de:	188a      	adds	r2, r1, r2
 80010e0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80010e2:	183b      	adds	r3, r7, r0
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	183b      	adds	r3, r7, r0
 80010e8:	3201      	adds	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	230d      	movs	r3, #13
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b09      	cmp	r3, #9
 80010f4:	d9e8      	bls.n	80010c8 <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 80010f6:	230e      	movs	r3, #14
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 8001104:	2300      	movs	r3, #0
	}
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b004      	add	sp, #16
 800110c:	bd80      	pop	{r7, pc}

0800110e <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001116:	230f      	movs	r3, #15
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e00a      	b.n	8001136 <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001120:	200f      	movs	r0, #15
 8001122:	183b      	adds	r3, r7, r0
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	2100      	movs	r1, #0
 800112a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800112c:	183b      	adds	r3, r7, r0
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	183b      	adds	r3, r7, r0
 8001132:	3201      	adds	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	230f      	movs	r3, #15
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b09      	cmp	r3, #9
 800113e:	d9ef      	bls.n	8001120 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	0018      	movs	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}

0800114a <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	000a      	movs	r2, r1
 8001154:	1cfb      	adds	r3, r7, #3
 8001156:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	1cfa      	adds	r2, r7, #3
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d901      	bls.n	800116a <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 800116a:	2300      	movs	r3, #0
	}
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}

08001174 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2bf8      	cmp	r3, #248	@ 0xf8
 8001184:	d101      	bne.n	800118a <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 8001186:	2301      	movs	r3, #1
 8001188:	e023      	b.n	80011d2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2bfa      	cmp	r3, #250	@ 0xfa
 8001192:	d101      	bne.n	8001198 <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 8001194:	2301      	movs	r3, #1
 8001196:	e01c      	b.n	80011d2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2bfb      	cmp	r3, #251	@ 0xfb
 80011a0:	d101      	bne.n	80011a6 <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e015      	b.n	80011d2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2bfc      	cmp	r3, #252	@ 0xfc
 80011ae:	d101      	bne.n	80011b4 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e00e      	b.n	80011d2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80011bc:	d101      	bne.n	80011c2 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 80011be:	2301      	movs	r3, #1
 80011c0:	e007      	b.n	80011d2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2bff      	cmp	r3, #255	@ 0xff
 80011ca:	d101      	bne.n	80011d0 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 80011d0:	2300      	movs	r3, #0
	}
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}

080011da <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 80011da:	b5b0      	push	{r4, r5, r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80011e2:	250f      	movs	r5, #15
 80011e4:	197c      	adds	r4, r7, r5
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	00da      	lsls	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	0011      	movs	r1, r2
 80011ee:	0018      	movs	r0, r3
 80011f0:	f004 fcc2 	bl	8005b78 <Get_Status_Bit>
 80011f4:	0003      	movs	r3, r0
 80011f6:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 80011f8:	197b      	adds	r3, r7, r5
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 8001204:	2300      	movs	r3, #0
	}
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bdb0      	pop	{r4, r5, r7, pc}

0800120e <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	005a      	lsls	r2, r3, #1
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	0011      	movs	r1, r2
 8001220:	0018      	movs	r0, r3
 8001222:	f004 fccf 	bl	8005bc4 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	009a      	lsls	r2, r3, #2
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f004 fcc8 	bl	8005bc4 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]

	return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}

08001244 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800124e:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <Reset_All_Controllers+0x9c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <Reset_All_Controllers+0x9c>)
 8001256:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <Reset_All_Controllers+0xa0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <Reset_All_Controllers+0xa0>)
 8001260:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <Reset_All_Controllers+0xa4>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <Reset_All_Controllers+0xa4>)
 800126a:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <Reset_All_Controllers+0xa8>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <Reset_All_Controllers+0xa8>)
 8001274:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <Reset_All_Controllers+0xac>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <Reset_All_Controllers+0xac>)
 800127e:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <Reset_All_Controllers+0x9c>)
 8001282:	2202      	movs	r2, #2
 8001284:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <Reset_All_Controllers+0xa0>)
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <Reset_All_Controllers+0xa4>)
 800128e:	2202      	movs	r2, #2
 8001290:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 8001292:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <Reset_All_Controllers+0xa8>)
 8001294:	2202      	movs	r2, #2
 8001296:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <Reset_All_Controllers+0xac>)
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 800129e:	230e      	movs	r3, #14
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	223f      	movs	r2, #63	@ 0x3f
 80012a4:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80012a6:	230f      	movs	r3, #15
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e00c      	b.n	80012ca <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 80012b0:	200f      	movs	r0, #15
 80012b2:	183b      	adds	r3, r7, r0
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <Reset_All_Controllers+0xb0>)
 80012b8:	210e      	movs	r1, #14
 80012ba:	1879      	adds	r1, r7, r1
 80012bc:	7809      	ldrb	r1, [r1, #0]
 80012be:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 80012c0:	183b      	adds	r3, r7, r0
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	183b      	adds	r3, r7, r0
 80012c6:	3201      	adds	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	230f      	movs	r3, #15
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d9ed      	bls.n	80012b0 <Reset_All_Controllers+0x6c>
	}

	return 1;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	20000430 	.word	0x20000430
 80012e4:	20000428 	.word	0x20000428
 80012e8:	2000042c 	.word	0x2000042c
 80012ec:	20000434 	.word	0x20000434
 80012f0:	20000438 	.word	0x20000438
 80012f4:	20000540 	.word	0x20000540

080012f8 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <Set_Local_Control+0x5c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <Set_Local_Control+0x5c>)
 8001304:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <Set_Local_Control+0x60>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <Set_Local_Control+0x60>)
 800130e:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <Set_Local_Control+0x64>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <Set_Local_Control+0x64>)
 8001318:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <Set_Local_Control+0x68>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <Set_Local_Control+0x68>)
 8001322:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <Set_Local_Control+0x6c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <Set_Local_Control+0x6c>)
 800132c:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <Set_Local_Control+0x5c>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <Set_Local_Control+0x60>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <Set_Local_Control+0x64>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <Set_Local_Control+0x68>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <Set_Local_Control+0x6c>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]

	return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000430 	.word	0x20000430
 8001358:	20000428 	.word	0x20000428
 800135c:	2000042c 	.word	0x2000042c
 8001360:	20000434 	.word	0x20000434
 8001364:	20000438 	.word	0x20000438

08001368 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	00da      	lsls	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	0011      	movs	r1, r2
 8001378:	0018      	movs	r0, r3
 800137a:	f004 fc23 	bl	8005bc4 <Clear_Status_Bit>

	return 1;
 800137e:	2301      	movs	r3, #1
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	00da      	lsls	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f004 fc01 	bl	8005ba0 <Set_Status_Bit>

	return 1;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80013ac:	4904      	ldr	r1, [pc, #16]	@ (80013c0 <Start_UART_Receive+0x18>)
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <Start_UART_Receive+0x1c>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	0018      	movs	r0, r3
 80013b4:	f00a fc56 	bl	800bc64 <HAL_UART_Receive_DMA>

	return 1;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000554 	.word	0x20000554
 80013c4:	20000ac0 	.word	0x20000ac0

080013c8 <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	000a      	movs	r2, r1
 80013d2:	1cfb      	adds	r3, r7, #3
 80013d4:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 80013e6:	2117      	movs	r1, #23
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 80013f6:	1cfb      	adds	r3, r7, #3
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10d      	bne.n	800141a <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 80013fe:	4b6d      	ldr	r3, [pc, #436]	@ (80015b4 <Pot_Check+0x1ec>)
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001402:	4b6d      	ldr	r3, [pc, #436]	@ (80015b8 <Pot_Check+0x1f0>)
 8001404:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 8001406:	4b6d      	ldr	r3, [pc, #436]	@ (80015bc <Pot_Check+0x1f4>)
 8001408:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2246      	movs	r2, #70	@ 0x46
 8001412:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001414:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <Pot_Check+0x1f8>)
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	e04e      	b.n	80014b8 <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 800141a:	1cfb      	adds	r3, r7, #3
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10f      	bne.n	8001442 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001422:	4b68      	ldr	r3, [pc, #416]	@ (80015c4 <Pot_Check+0x1fc>)
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8001426:	4b68      	ldr	r3, [pc, #416]	@ (80015c8 <Pot_Check+0x200>)
 8001428:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 800142a:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <Pot_Check+0x204>)
 800142c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3302      	adds	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001434:	2317      	movs	r3, #23
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2246      	movs	r2, #70	@ 0x46
 800143a:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 800143c:	4b64      	ldr	r3, [pc, #400]	@ (80015d0 <Pot_Check+0x208>)
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e03a      	b.n	80014b8 <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d10f      	bne.n	800146a <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 800144a:	4b62      	ldr	r3, [pc, #392]	@ (80015d4 <Pot_Check+0x20c>)
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 800144e:	4b62      	ldr	r3, [pc, #392]	@ (80015d8 <Pot_Check+0x210>)
 8001450:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8001452:	4b62      	ldr	r3, [pc, #392]	@ (80015dc <Pot_Check+0x214>)
 8001454:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 800145c:	2317      	movs	r3, #23
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	2246      	movs	r2, #70	@ 0x46
 8001462:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001464:	4b5e      	ldr	r3, [pc, #376]	@ (80015e0 <Pot_Check+0x218>)
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	e026      	b.n	80014b8 <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 800146a:	1cfb      	adds	r3, r7, #3
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d10f      	bne.n	8001492 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001472:	4b5c      	ldr	r3, [pc, #368]	@ (80015e4 <Pot_Check+0x21c>)
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 8001476:	4b5c      	ldr	r3, [pc, #368]	@ (80015e8 <Pot_Check+0x220>)
 8001478:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 800147a:	4b5c      	ldr	r3, [pc, #368]	@ (80015ec <Pot_Check+0x224>)
 800147c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3306      	adds	r3, #6
 8001482:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001484:	2317      	movs	r3, #23
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	2246      	movs	r2, #70	@ 0x46
 800148a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 800148c:	4b58      	ldr	r3, [pc, #352]	@ (80015f0 <Pot_Check+0x228>)
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	e012      	b.n	80014b8 <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001492:	1cfb      	adds	r3, r7, #3
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d10e      	bne.n	80014b8 <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 800149a:	4b56      	ldr	r3, [pc, #344]	@ (80015f4 <Pot_Check+0x22c>)
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 800149e:	4b56      	ldr	r3, [pc, #344]	@ (80015f8 <Pot_Check+0x230>)
 80014a0:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 80014a2:	4b56      	ldr	r3, [pc, #344]	@ (80015fc <Pot_Check+0x234>)
 80014a4:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3308      	adds	r3, #8
 80014aa:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 80014ac:	2317      	movs	r3, #23
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2246      	movs	r2, #70	@ 0x46
 80014b2:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 80014b4:	4b52      	ldr	r3, [pc, #328]	@ (8001600 <Pot_Check+0x238>)
 80014b6:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10b      	bne.n	80014da <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e066      	b.n	80015a8 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10b      	bne.n	80014fc <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	881a      	ldrh	r2, [r3, #0]
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e055      	b.n	80015a8 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d150      	bne.n	80015a8 <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 800150c:	200a      	movs	r0, #10
 800150e:	183b      	adds	r3, r7, r0
 8001510:	2200      	movs	r2, #0
 8001512:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	881a      	ldrh	r2, [r3, #0]
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d907      	bls.n	8001530 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	8819      	ldrh	r1, [r3, #0]
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	881a      	ldrh	r2, [r3, #0]
 8001528:	183b      	adds	r3, r7, r0
 800152a:	1a8a      	subs	r2, r1, r2
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	e00d      	b.n	800154c <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d907      	bls.n	800154c <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	8819      	ldrh	r1, [r3, #0]
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	230a      	movs	r3, #10
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	1a8a      	subs	r2, r1, r2
 800154a:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 800154c:	2317      	movs	r3, #23
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	220a      	movs	r2, #10
 8001556:	18ba      	adds	r2, r7, r2
 8001558:	8812      	ldrh	r2, [r2, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d924      	bls.n	80015a8 <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e018      	b.n	80015a8 <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d015      	beq.n	80015a8 <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800158a:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <Pot_Check+0x23c>)
 800158c:	2120      	movs	r1, #32
 800158e:	0018      	movs	r0, r3
 8001590:	f004 fb18 	bl	8005bc4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <Pot_Check+0x23c>)
 8001596:	2140      	movs	r1, #64	@ 0x40
 8001598:	0018      	movs	r0, r3
 800159a:	f004 fb13 	bl	8005bc4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <Pot_Check+0x23c>)
 80015a0:	2108      	movs	r1, #8
 80015a2:	0018      	movs	r0, r3
 80015a4:	f004 fb0e 	bl	8005bc4 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b00a      	add	sp, #40	@ 0x28
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	2000055c 	.word	0x2000055c
 80015b8:	2000055e 	.word	0x2000055e
 80015bc:	20000555 	.word	0x20000555
 80015c0:	20000430 	.word	0x20000430
 80015c4:	20000560 	.word	0x20000560
 80015c8:	20000562 	.word	0x20000562
 80015cc:	20000556 	.word	0x20000556
 80015d0:	20000428 	.word	0x20000428
 80015d4:	20000564 	.word	0x20000564
 80015d8:	20000566 	.word	0x20000566
 80015dc:	20000557 	.word	0x20000557
 80015e0:	2000042c 	.word	0x2000042c
 80015e4:	20000568 	.word	0x20000568
 80015e8:	2000056a 	.word	0x2000056a
 80015ec:	20000558 	.word	0x20000558
 80015f0:	20000434 	.word	0x20000434
 80015f4:	2000056c 	.word	0x2000056c
 80015f8:	2000056e 	.word	0x2000056e
 80015fc:	20000559 	.word	0x20000559
 8001600:	20000438 	.word	0x20000438
 8001604:	20000cac 	.word	0x20000cac

08001608 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001610:	250f      	movs	r5, #15
 8001612:	197c      	adds	r4, r7, r5
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	00da      	lsls	r2, r3, #3
 8001618:	23a0      	movs	r3, #160	@ 0xa0
 800161a:	05db      	lsls	r3, r3, #23
 800161c:	0011      	movs	r1, r2
 800161e:	0018      	movs	r0, r3
 8001620:	f006 fcb0 	bl	8007f84 <HAL_GPIO_ReadPin>
 8001624:	0003      	movs	r3, r0
 8001626:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001628:	197b      	adds	r3, r7, r5
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10a      	bne.n	8001646 <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d01e      	beq.n	8001676 <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <Check_Tap_Tempo_Switch_State+0x98>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001642:	701a      	strb	r2, [r3, #0]
 8001644:	e017      	b.n	8001676 <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b0e      	cmp	r3, #14
 800164c:	d013      	beq.n	8001676 <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b04      	cmp	r3, #4
 8001654:	d109      	bne.n	800166a <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001660:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e005      	b.n	8001676 <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <Check_Tap_Tempo_Switch_State+0x9c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001674:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	e006      	b.n	8001694 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b0e      	cmp	r3, #14
 800168c:	d102      	bne.n	8001694 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001694:	2301      	movs	r3, #1
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	2000001d 	.word	0x2000001d
 80016a4:	20000570 	.word	0x20000570

080016a8 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b093      	sub	sp, #76	@ 0x4c
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	2410      	movs	r4, #16
 80016b0:	193b      	adds	r3, r7, r4
 80016b2:	0018      	movs	r0, r3
 80016b4:	2338      	movs	r3, #56	@ 0x38
 80016b6:	001a      	movs	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f00b fdf5 	bl	800d2a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016be:	003b      	movs	r3, r7
 80016c0:	0018      	movs	r0, r3
 80016c2:	2310      	movs	r3, #16
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f00b fdee 	bl	800d2a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	0018      	movs	r0, r3
 80016d2:	f007 f8c9 	bl	8008868 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2202      	movs	r2, #2
 80016da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2280      	movs	r2, #128	@ 0x80
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80016e4:	0021      	movs	r1, r4
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2240      	movs	r2, #64	@ 0x40
 80016f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2202      	movs	r2, #2
 80016f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2202      	movs	r2, #2
 80016fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2208      	movs	r2, #8
 8001708:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2280      	movs	r2, #128	@ 0x80
 800170e:	0292      	lsls	r2, r2, #10
 8001710:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	22c0      	movs	r2, #192	@ 0xc0
 8001716:	04d2      	lsls	r2, r2, #19
 8001718:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800171a:	187b      	adds	r3, r7, r1
 800171c:	2280      	movs	r2, #128	@ 0x80
 800171e:	0592      	lsls	r2, r2, #22
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001722:	187b      	adds	r3, r7, r1
 8001724:	0018      	movs	r0, r3
 8001726:	f007 f8eb 	bl	8008900 <HAL_RCC_OscConfig>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800172e:	f000 fdb1 	bl	8002294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001732:	003b      	movs	r3, r7
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001738:	003b      	movs	r3, r7
 800173a:	2202      	movs	r2, #2
 800173c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173e:	003b      	movs	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001744:	003b      	movs	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800174a:	003b      	movs	r3, r7
 800174c:	2102      	movs	r1, #2
 800174e:	0018      	movs	r0, r3
 8001750:	f007 fbf0 	bl	8008f34 <HAL_RCC_ClockConfig>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001758:	f000 fd9c 	bl	8002294 <Error_Handler>
  }
}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b013      	add	sp, #76	@ 0x4c
 8001762:	bd90      	pop	{r4, r7, pc}

08001764 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	0018      	movs	r0, r3
 800176e:	230c      	movs	r3, #12
 8001770:	001a      	movs	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	f00b fd98 	bl	800d2a8 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001778:	4b54      	ldr	r3, [pc, #336]	@ (80018cc <MX_ADC1_Init+0x168>)
 800177a:	4a55      	ldr	r2, [pc, #340]	@ (80018d0 <MX_ADC1_Init+0x16c>)
 800177c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800177e:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <MX_ADC1_Init+0x168>)
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	05d2      	lsls	r2, r2, #23
 8001784:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001786:	4b51      	ldr	r3, [pc, #324]	@ (80018cc <MX_ADC1_Init+0x168>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800178c:	4b4f      	ldr	r3, [pc, #316]	@ (80018cc <MX_ADC1_Init+0x168>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001792:	4b4e      	ldr	r3, [pc, #312]	@ (80018cc <MX_ADC1_Init+0x168>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	0392      	lsls	r2, r2, #14
 8001798:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800179a:	4b4c      	ldr	r3, [pc, #304]	@ (80018cc <MX_ADC1_Init+0x168>)
 800179c:	2208      	movs	r2, #8
 800179e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017a0:	4b4a      	ldr	r3, [pc, #296]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80017a6:	4b49      	ldr	r3, [pc, #292]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017ac:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 80017b2:	4b46      	ldr	r3, [pc, #280]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017b4:	2205      	movs	r2, #5
 80017b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b8:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017ba:	2220      	movs	r2, #32
 80017bc:	2100      	movs	r1, #0
 80017be:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c0:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017cc:	4b3f      	ldr	r3, [pc, #252]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017ce:	222c      	movs	r2, #44	@ 0x2c
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017d4:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80017da:	4b3c      	ldr	r3, [pc, #240]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017dc:	2200      	movs	r2, #0
 80017de:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80017e0:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80017e6:	4b39      	ldr	r3, [pc, #228]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017e8:	223c      	movs	r2, #60	@ 0x3c
 80017ea:	2100      	movs	r1, #0
 80017ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80017ee:	4b37      	ldr	r3, [pc, #220]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f4:	4b35      	ldr	r3, [pc, #212]	@ (80018cc <MX_ADC1_Init+0x168>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f004 fc12 	bl	8006020 <HAL_ADC_Init>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001800:	f000 fd48 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001816:	1d3a      	adds	r2, r7, #4
 8001818:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <MX_ADC1_Init+0x168>)
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f004 ff83 	bl	8006728 <HAL_ADC_ConfigChannel>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001826:	f000 fd35 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4a29      	ldr	r2, [pc, #164]	@ (80018d4 <MX_ADC1_Init+0x170>)
 800182e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2204      	movs	r2, #4
 8001834:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183c:	1d3a      	adds	r2, r7, #4
 800183e:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <MX_ADC1_Init+0x168>)
 8001840:	0011      	movs	r1, r2
 8001842:	0018      	movs	r0, r3
 8001844:	f004 ff70 	bl	8006728 <HAL_ADC_ConfigChannel>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800184c:	f000 fd22 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <MX_ADC1_Init+0x174>)
 8001854:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2208      	movs	r2, #8
 800185a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001862:	1d3a      	adds	r2, r7, #4
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <MX_ADC1_Init+0x168>)
 8001866:	0011      	movs	r1, r2
 8001868:	0018      	movs	r0, r3
 800186a:	f004 ff5d 	bl	8006728 <HAL_ADC_ConfigChannel>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001872:	f000 fd0f 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <MX_ADC1_Init+0x178>)
 800187a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	220c      	movs	r2, #12
 8001880:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001888:	1d3a      	adds	r2, r7, #4
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <MX_ADC1_Init+0x168>)
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f004 ff4a 	bl	8006728 <HAL_ADC_ConfigChannel>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001898:	f000 fcfc 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4a10      	ldr	r2, [pc, #64]	@ (80018e0 <MX_ADC1_Init+0x17c>)
 80018a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2210      	movs	r2, #16
 80018a6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ae:	1d3a      	adds	r2, r7, #4
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_ADC1_Init+0x168>)
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f004 ff37 	bl	8006728 <HAL_ADC_ConfigChannel>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d001      	beq.n	80018c2 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80018be:	f000 fce9 	bl	8002294 <Error_Handler>
  }
}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b004      	add	sp, #16
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	20000574 	.word	0x20000574
 80018d0:	40012400 	.word	0x40012400
 80018d4:	04000002 	.word	0x04000002
 80018d8:	10000010 	.word	0x10000010
 80018dc:	14000020 	.word	0x14000020
 80018e0:	18000040 	.word	0x18000040

080018e4 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	@ 0x50
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ea:	2334      	movs	r3, #52	@ 0x34
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	0018      	movs	r0, r3
 80018f0:	231c      	movs	r3, #28
 80018f2:	001a      	movs	r2, r3
 80018f4:	2100      	movs	r1, #0
 80018f6:	f00b fcd7 	bl	800d2a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fa:	003b      	movs	r3, r7
 80018fc:	0018      	movs	r0, r3
 80018fe:	2334      	movs	r3, #52	@ 0x34
 8001900:	001a      	movs	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	f00b fcd0 	bl	800d2a8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001908:	4b3a      	ldr	r3, [pc, #232]	@ (80019f4 <MX_TIM16_Init+0x110>)
 800190a:	4a3b      	ldr	r2, [pc, #236]	@ (80019f8 <MX_TIM16_Init+0x114>)
 800190c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800190e:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <MX_TIM16_Init+0x110>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b37      	ldr	r3, [pc, #220]	@ (80019f4 <MX_TIM16_Init+0x110>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800191a:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <MX_TIM16_Init+0x110>)
 800191c:	22ff      	movs	r2, #255	@ 0xff
 800191e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001920:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <MX_TIM16_Init+0x110>)
 8001922:	2280      	movs	r2, #128	@ 0x80
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001928:	4b32      	ldr	r3, [pc, #200]	@ (80019f4 <MX_TIM16_Init+0x110>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800192e:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <MX_TIM16_Init+0x110>)
 8001930:	2280      	movs	r2, #128	@ 0x80
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001934:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <MX_TIM16_Init+0x110>)
 8001936:	0018      	movs	r0, r3
 8001938:	f007 fe20 	bl	800957c <HAL_TIM_Base_Init>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001940:	f000 fca8 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001944:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <MX_TIM16_Init+0x110>)
 8001946:	0018      	movs	r0, r3
 8001948:	f007 ff1e 	bl	8009788 <HAL_TIM_OC_Init>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001950:	f000 fca0 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001954:	2134      	movs	r1, #52	@ 0x34
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 800195c:	187b      	adds	r3, r7, r1
 800195e:	22ff      	movs	r2, #255	@ 0xff
 8001960:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001980:	1879      	adds	r1, r7, r1
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <MX_TIM16_Init+0x110>)
 8001984:	2200      	movs	r2, #0
 8001986:	0018      	movs	r0, r3
 8001988:	f008 fd72 	bl	800a470 <HAL_TIM_OC_ConfigChannel>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001990:	f000 fc80 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_TIM16_Init+0x110>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <MX_TIM16_Init+0x110>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2108      	movs	r1, #8
 80019a0:	438a      	bics	r2, r1
 80019a2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a4:	003b      	movs	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019aa:	003b      	movs	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b0:	003b      	movs	r3, r7
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b6:	003b      	movs	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019bc:	003b      	movs	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c2:	003b      	movs	r3, r7
 80019c4:	2280      	movs	r2, #128	@ 0x80
 80019c6:	0192      	lsls	r2, r2, #6
 80019c8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019ca:	003b      	movs	r3, r7
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d0:	003b      	movs	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019d6:	003a      	movs	r2, r7
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_TIM16_Init+0x110>)
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f009 ff6d 	bl	800b8bc <HAL_TIMEx_ConfigBreakDeadTime>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80019e6:	f000 fc55 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b014      	add	sp, #80	@ 0x50
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	200007d0 	.word	0x200007d0
 80019f8:	40014400 	.word	0x40014400

080019fc <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	2320      	movs	r3, #32
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	0018      	movs	r0, r3
 8001a08:	2310      	movs	r3, #16
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f00b fc4b 	bl	800d2a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	2314      	movs	r3, #20
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	0018      	movs	r0, r3
 8001a18:	230c      	movs	r3, #12
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f00b fc43 	bl	800d2a8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	0018      	movs	r0, r3
 8001a26:	2310      	movs	r3, #16
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f00b fc3c 	bl	800d2a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a30:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	05d2      	lsls	r2, r2, #23
 8001a36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8001a38:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a3a:	223f      	movs	r2, #63	@ 0x3f
 8001a3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001a44:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a46:	4a2a      	ldr	r2, [pc, #168]	@ (8001af0 <MX_TIM2_Init+0xf4>)
 8001a48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a4a:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a4c:	2280      	movs	r2, #128	@ 0x80
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a54:	2280      	movs	r2, #128	@ 0x80
 8001a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a58:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f007 fd8e 	bl	800957c <HAL_TIM_Base_Init>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001a64:	f000 fc16 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a68:	2120      	movs	r1, #32
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	0152      	lsls	r2, r2, #5
 8001a70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a72:	187a      	adds	r2, r7, r1
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a76:	0011      	movs	r1, r2
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f008 fefd 	bl	800a878 <HAL_TIM_ConfigClockSource>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a82:	f000 fc07 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f008 fa29 	bl	8009ee0 <HAL_TIM_IC_Init>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a92:	f000 fbff 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a96:	2114      	movs	r1, #20
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa4:	187a      	adds	r2, r7, r1
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f009 fe9e 	bl	800b7ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ab0:	1e03      	subs	r3, r0, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001ab4:	f000 fbee 	bl	8002294 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2202      	movs	r2, #2
 8001abc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	220f      	movs	r2, #15
 8001ace:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ad0:	1d39      	adds	r1, r7, #4
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <MX_TIM2_Init+0xf0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f008 fd2a 	bl	800a530 <HAL_TIM_IC_ConfigChannel>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001ae0:	f000 fbd8 	bl	8002294 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b00c      	add	sp, #48	@ 0x30
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000088c 	.word	0x2000088c
 8001af0:	001fffff 	.word	0x001fffff

08001af4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	@ 0x38
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	2328      	movs	r3, #40	@ 0x28
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	0018      	movs	r0, r3
 8001b00:	2310      	movs	r3, #16
 8001b02:	001a      	movs	r2, r3
 8001b04:	2100      	movs	r1, #0
 8001b06:	f00b fbcf 	bl	800d2a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	231c      	movs	r3, #28
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	0018      	movs	r0, r3
 8001b10:	230c      	movs	r3, #12
 8001b12:	001a      	movs	r2, r3
 8001b14:	2100      	movs	r1, #0
 8001b16:	f00b fbc7 	bl	800d2a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1a:	003b      	movs	r3, r7
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	231c      	movs	r3, #28
 8001b20:	001a      	movs	r2, r3
 8001b22:	2100      	movs	r1, #0
 8001b24:	f00b fbc0 	bl	800d2a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b28:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b2a:	4a33      	ldr	r2, [pc, #204]	@ (8001bf8 <MX_TIM3_Init+0x104>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001b2e:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b30:	4a32      	ldr	r2, [pc, #200]	@ (8001bfc <MX_TIM3_Init+0x108>)
 8001b32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b3c:	4a30      	ldr	r2, [pc, #192]	@ (8001c00 <MX_TIM3_Init+0x10c>)
 8001b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b42:	2280      	movs	r2, #128	@ 0x80
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b48:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b50:	0018      	movs	r0, r3
 8001b52:	f007 fd13 	bl	800957c <HAL_TIM_Base_Init>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001b5a:	f000 fb9b 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	2128      	movs	r1, #40	@ 0x28
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2280      	movs	r2, #128	@ 0x80
 8001b64:	0152      	lsls	r2, r2, #5
 8001b66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b68:	187a      	adds	r2, r7, r1
 8001b6a:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b6c:	0011      	movs	r1, r2
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f008 fe82 	bl	800a878 <HAL_TIM_ConfigClockSource>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001b78:	f000 fb8c 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f007 fe02 	bl	8009788 <HAL_TIM_OC_Init>
 8001b84:	1e03      	subs	r3, r0, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b88:	f000 fb84 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	211c      	movs	r1, #28
 8001b8e:	187b      	adds	r3, r7, r1
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b9a:	187a      	adds	r2, r7, r1
 8001b9c:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f009 fe23 	bl	800b7ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ba6:	1e03      	subs	r3, r0, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001baa:	f000 fb73 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bae:	003b      	movs	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001bb4:	003b      	movs	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bba:	003b      	movs	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc0:	003b      	movs	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	0039      	movs	r1, r7
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f008 fc4f 	bl	800a470 <HAL_TIM_OC_ConfigChannel>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001bd6:	f000 fb5d 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <MX_TIM3_Init+0x100>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2108      	movs	r1, #8
 8001be6:	438a      	bics	r2, r1
 8001be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b00e      	add	sp, #56	@ 0x38
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	20000948 	.word	0x20000948
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	00007fff 	.word	0x00007fff
 8001c00:	00000fff 	.word	0x00000fff

08001c04 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09c      	sub	sp, #112	@ 0x70
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	2360      	movs	r3, #96	@ 0x60
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	0018      	movs	r0, r3
 8001c10:	2310      	movs	r3, #16
 8001c12:	001a      	movs	r2, r3
 8001c14:	2100      	movs	r1, #0
 8001c16:	f00b fb47 	bl	800d2a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1a:	2354      	movs	r3, #84	@ 0x54
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	0018      	movs	r0, r3
 8001c20:	230c      	movs	r3, #12
 8001c22:	001a      	movs	r2, r3
 8001c24:	2100      	movs	r1, #0
 8001c26:	f00b fb3f 	bl	800d2a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	2338      	movs	r3, #56	@ 0x38
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	0018      	movs	r0, r3
 8001c30:	231c      	movs	r3, #28
 8001c32:	001a      	movs	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	f00b fb37 	bl	800d2a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	2334      	movs	r3, #52	@ 0x34
 8001c40:	001a      	movs	r2, r3
 8001c42:	2100      	movs	r1, #0
 8001c44:	f00b fb30 	bl	800d2a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c48:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c4a:	4a60      	ldr	r2, [pc, #384]	@ (8001dcc <MX_TIM1_Init+0x1c8>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8001dd0 <MX_TIM1_Init+0x1cc>)
 8001c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c62:	2280      	movs	r2, #128	@ 0x80
 8001c64:	0052      	lsls	r2, r2, #1
 8001c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c68:	4b57      	ldr	r3, [pc, #348]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c6e:	4b56      	ldr	r3, [pc, #344]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c74:	4b54      	ldr	r3, [pc, #336]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c76:	0018      	movs	r0, r3
 8001c78:	f007 fc80 	bl	800957c <HAL_TIM_Base_Init>
 8001c7c:	1e03      	subs	r3, r0, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001c80:	f000 fb08 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	2160      	movs	r1, #96	@ 0x60
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	0152      	lsls	r2, r2, #5
 8001c8c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c8e:	187a      	adds	r2, r7, r1
 8001c90:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001c92:	0011      	movs	r1, r2
 8001c94:	0018      	movs	r0, r3
 8001c96:	f008 fdef 	bl	800a878 <HAL_TIM_ConfigClockSource>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c9e:	f000 faf9 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ca2:	4b49      	ldr	r3, [pc, #292]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f007 ffcf 	bl	8009c48 <HAL_TIM_PWM_Init>
 8001caa:	1e03      	subs	r3, r0, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001cae:	f000 faf1 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2154      	movs	r1, #84	@ 0x54
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc6:	187a      	adds	r2, r7, r1
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001cca:	0011      	movs	r1, r2
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f009 fd8d 	bl	800b7ec <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001cd6:	f000 fadd 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cda:	2138      	movs	r1, #56	@ 0x38
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	2260      	movs	r2, #96	@ 0x60
 8001ce0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d06:	1879      	adds	r1, r7, r1
 8001d08:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f008 fcb3 	bl	800a678 <HAL_TIM_PWM_ConfigChannel>
 8001d12:	1e03      	subs	r3, r0, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d16:	f000 fabd 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	4b29      	ldr	r3, [pc, #164]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	492b      	ldr	r1, [pc, #172]	@ (8001dd4 <MX_TIM1_Init+0x1d0>)
 8001d26:	400a      	ands	r2, r1
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d2a:	2338      	movs	r3, #56	@ 0x38
 8001d2c:	18f9      	adds	r1, r7, r3
 8001d2e:	4b26      	ldr	r3, [pc, #152]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001d30:	220c      	movs	r2, #12
 8001d32:	0018      	movs	r0, r3
 8001d34:	f008 fca0 	bl	800a678 <HAL_TIM_PWM_ConfigChannel>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001d3c:	f000 faaa 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4922      	ldr	r1, [pc, #136]	@ (8001dd4 <MX_TIM1_Init+0x1d0>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	0192      	lsls	r2, r2, #6
 8001d74:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	0492      	lsls	r2, r2, #18
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001da2:	1d3a      	adds	r2, r7, #4
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001da6:	0011      	movs	r1, r2
 8001da8:	0018      	movs	r0, r3
 8001daa:	f009 fd87 	bl	800b8bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001dae:	1e03      	subs	r3, r0, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001db2:	f000 fa6f 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001db6:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <MX_TIM1_Init+0x1c4>)
 8001db8:	0018      	movs	r0, r3
 8001dba:	f003 f889 	bl	8004ed0 <HAL_TIM_MspPostInit>

}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b01c      	add	sp, #112	@ 0x70
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	20000a04 	.word	0x20000a04
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	000003ff 	.word	0x000003ff
 8001dd4:	fffff7ff 	.word	0xfffff7ff

08001dd8 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b094      	sub	sp, #80	@ 0x50
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	2334      	movs	r3, #52	@ 0x34
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	0018      	movs	r0, r3
 8001de4:	231c      	movs	r3, #28
 8001de6:	001a      	movs	r2, r3
 8001de8:	2100      	movs	r1, #0
 8001dea:	f00b fa5d 	bl	800d2a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dee:	003b      	movs	r3, r7
 8001df0:	0018      	movs	r0, r3
 8001df2:	2334      	movs	r3, #52	@ 0x34
 8001df4:	001a      	movs	r2, r3
 8001df6:	2100      	movs	r1, #0
 8001df8:	f00b fa56 	bl	800d2a8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001dfe:	4a3b      	ldr	r2, [pc, #236]	@ (8001eec <MX_TIM17_Init+0x114>)
 8001e00:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001e02:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e04:	4a3a      	ldr	r2, [pc, #232]	@ (8001ef0 <MX_TIM17_Init+0x118>)
 8001e06:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b37      	ldr	r3, [pc, #220]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8001e0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001e14:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e16:	2280      	movs	r2, #128	@ 0x80
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e22:	4b31      	ldr	r3, [pc, #196]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e24:	2280      	movs	r2, #128	@ 0x80
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f007 fba6 	bl	800957c <HAL_TIM_Base_Init>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001e34:	f000 fa2e 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001e38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f007 fca4 	bl	8009788 <HAL_TIM_OC_Init>
 8001e40:	1e03      	subs	r3, r0, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001e44:	f000 fa26 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e48:	2134      	movs	r1, #52	@ 0x34
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2200      	movs	r2, #0
 8001e54:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e74:	1879      	adds	r1, r7, r1
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f008 faf8 	bl	800a470 <HAL_TIM_OC_ConfigChannel>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001e84:	f000 fa06 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2108      	movs	r1, #8
 8001e94:	430a      	orrs	r2, r1
 8001e96:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e98:	003b      	movs	r3, r7
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e9e:	003b      	movs	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ea4:	003b      	movs	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eaa:	003b      	movs	r3, r7
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb0:	003b      	movs	r3, r7
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb6:	003b      	movs	r3, r7
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	0192      	lsls	r2, r2, #6
 8001ebc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ebe:	003b      	movs	r3, r7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec4:	003b      	movs	r3, r7
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001eca:	003a      	movs	r2, r7
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <MX_TIM17_Init+0x110>)
 8001ece:	0011      	movs	r1, r2
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f009 fcf3 	bl	800b8bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ed6:	1e03      	subs	r3, r0, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001eda:	f000 f9db 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b014      	add	sp, #80	@ 0x50
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	20000714 	.word	0x20000714
 8001eec:	40014800 	.word	0x40014800
 8001ef0:	00007fff 	.word	0x00007fff

08001ef4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <MX_LPTIM1_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f06:	22e0      	movs	r2, #224	@ 0xe0
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f0e:	4a14      	ldr	r2, [pc, #80]	@ (8001f60 <MX_LPTIM1_Init+0x6c>)
 8001f10:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f1a:	2280      	movs	r2, #128	@ 0x80
 8001f1c:	03d2      	lsls	r2, r2, #15
 8001f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_LPTIM1_Init+0x64>)
 8001f34:	0018      	movs	r0, r3
 8001f36:	f006 f889 	bl	800804c <HAL_LPTIM_Init>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001f3e:	f000 f9a9 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001f42:	2202      	movs	r2, #2
 8001f44:	2102      	movs	r1, #2
 8001f46:	2011      	movs	r0, #17
 8001f48:	f005 f9f8 	bl	800733c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001f4c:	2011      	movs	r0, #17
 8001f4e:	f005 fa0a 	bl	8007366 <HAL_NVIC_EnableIRQ>
}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000c44 	.word	0x20000c44
 8001f5c:	40007c00 	.word	0x40007c00
 8001f60:	0000ffff 	.word	0x0000ffff

08001f64 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	231c      	movs	r3, #28
 8001f70:	001a      	movs	r2, r3
 8001f72:	2100      	movs	r1, #0
 8001f74:	f00b f998 	bl	800d2a8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001f78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <MX_TIM14_Init+0x94>)
 8001f7c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001f80:	4a1e      	ldr	r2, [pc, #120]	@ (8001ffc <MX_TIM14_Init+0x98>)
 8001f82:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f90:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001f92:	2280      	movs	r2, #128	@ 0x80
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f007 faeb 	bl	800957c <HAL_TIM_Base_Init>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8001faa:	f000 f973 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f007 fbe9 	bl	8009788 <HAL_TIM_OC_Init>
 8001fb6:	1e03      	subs	r3, r0, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8001fba:	f000 f96b 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd6:	1d39      	adds	r1, r7, #4
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <MX_TIM14_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f008 fa47 	bl	800a470 <HAL_TIM_OC_ConfigChannel>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8001fe6:	f000 f955 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b008      	add	sp, #32
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	20000658 	.word	0x20000658
 8001ff8:	40002000 	.word	0x40002000
 8001ffc:	00007fff 	.word	0x00007fff

08002000 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002006:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <MX_USART2_UART_Init+0x60>)
 8002008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800200c:	4a15      	ldr	r2, [pc, #84]	@ (8002064 <MX_USART2_UART_Init+0x64>)
 800200e:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002024:	220c      	movs	r2, #12
 8002026:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002042:	2200      	movs	r2, #0
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002048:	0018      	movs	r0, r3
 800204a:	f009 fcf3 	bl	800ba34 <HAL_UART_Init>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d001      	beq.n	8002056 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002052:	f000 f91f 	bl	8002294 <Error_Handler>
  }
}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000ac0 	.word	0x20000ac0
 8002060:	40004400 	.word	0x40004400
 8002064:	00007a12 	.word	0x00007a12

08002068 <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <MX_DMA_Init+0x48>)
 8002070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_DMA_Init+0x48>)
 8002074:	2101      	movs	r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	639a      	str	r2, [r3, #56]	@ 0x38
 800207a:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <MX_DMA_Init+0x48>)
 800207c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2009      	movs	r0, #9
 800208c:	f005 f956 	bl	800733c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002090:	2009      	movs	r0, #9
 8002092:	f005 f968 	bl	8007366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8002096:	2202      	movs	r2, #2
 8002098:	2102      	movs	r1, #2
 800209a:	200a      	movs	r0, #10
 800209c:	f005 f94e 	bl	800733c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f005 f960 	bl	8007366 <HAL_NVIC_EnableIRQ>

}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000

080020b4 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	@ 0x2c
 80020b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	2414      	movs	r4, #20
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	0018      	movs	r0, r3
 80020c0:	2314      	movs	r3, #20
 80020c2:	001a      	movs	r2, r3
 80020c4:	2100      	movs	r1, #0
 80020c6:	f00b f8ef 	bl	800d2a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020d0:	2104      	movs	r1, #4
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	2204      	movs	r2, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020e2:	4b68      	ldr	r3, [pc, #416]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e6:	4b67      	ldr	r3, [pc, #412]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020e8:	2120      	movs	r1, #32
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ee:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f2:	2220      	movs	r2, #32
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b62      	ldr	r3, [pc, #392]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020fe:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	635a      	str	r2, [r3, #52]	@ 0x34
 8002106:	4b5f      	ldr	r3, [pc, #380]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210a:	2201      	movs	r2, #1
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002116:	4b5b      	ldr	r3, [pc, #364]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002118:	2102      	movs	r1, #2
 800211a:	430a      	orrs	r2, r1
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34
 800211e:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800212a:	4b57      	ldr	r3, [pc, #348]	@ (8002288 <MX_GPIO_Init+0x1d4>)
 800212c:	2200      	movs	r2, #0
 800212e:	2140      	movs	r1, #64	@ 0x40
 8002130:	0018      	movs	r0, r3
 8002132:	f005 ff44 	bl	8007fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2204      	movs	r2, #4
 800213a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2288      	movs	r2, #136	@ 0x88
 8002140:	0352      	lsls	r2, r2, #13
 8002142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	193b      	adds	r3, r7, r4
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800214a:	193b      	adds	r3, r7, r4
 800214c:	4a4f      	ldr	r2, [pc, #316]	@ (800228c <MX_GPIO_Init+0x1d8>)
 800214e:	0019      	movs	r1, r3
 8002150:	0010      	movs	r0, r2
 8002152:	f005 fdb3 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8002156:	0021      	movs	r1, r4
 8002158:	193b      	adds	r3, r7, r4
 800215a:	2280      	movs	r2, #128	@ 0x80
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	000c      	movs	r4, r1
 8002162:	193b      	adds	r3, r7, r4
 8002164:	2201      	movs	r2, #1
 8002166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	193b      	adds	r3, r7, r4
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	193b      	adds	r3, r7, r4
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8002174:	193a      	adds	r2, r7, r4
 8002176:	23a0      	movs	r3, #160	@ 0xa0
 8002178:	05db      	lsls	r3, r3, #23
 800217a:	0011      	movs	r1, r2
 800217c:	0018      	movs	r0, r3
 800217e:	f005 fd9d 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002182:	193b      	adds	r3, r7, r4
 8002184:	2240      	movs	r2, #64	@ 0x40
 8002186:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	193b      	adds	r3, r7, r4
 800218a:	2201      	movs	r2, #1
 800218c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	193b      	adds	r3, r7, r4
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	193b      	adds	r3, r7, r4
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800219a:	193b      	adds	r3, r7, r4
 800219c:	4a3a      	ldr	r2, [pc, #232]	@ (8002288 <MX_GPIO_Init+0x1d4>)
 800219e:	0019      	movs	r1, r3
 80021a0:	0010      	movs	r0, r2
 80021a2:	f005 fd8b 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	2280      	movs	r2, #128	@ 0x80
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ae:	193b      	adds	r3, r7, r4
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	2201      	movs	r2, #1
 80021b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80021ba:	193a      	adds	r2, r7, r4
 80021bc:	23a0      	movs	r3, #160	@ 0xa0
 80021be:	05db      	lsls	r3, r3, #23
 80021c0:	0011      	movs	r1, r2
 80021c2:	0018      	movs	r0, r3
 80021c4:	f005 fd7a 	bl	8007cbc <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	2240      	movs	r2, #64	@ 0x40
 80021cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	2201      	movs	r2, #1
 80021d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002290 <MX_GPIO_Init+0x1dc>)
 80021e4:	0019      	movs	r1, r3
 80021e6:	0010      	movs	r0, r2
 80021e8:	f005 fd68 	bl	8007cbc <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80021ec:	0021      	movs	r1, r4
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2280      	movs	r2, #128	@ 0x80
 80021f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	22c4      	movs	r2, #196	@ 0xc4
 80021f8:	0392      	lsls	r2, r2, #14
 80021fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 80021fc:	000c      	movs	r4, r1
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	2202      	movs	r2, #2
 8002202:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	193b      	adds	r3, r7, r4
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800220a:	193b      	adds	r3, r7, r4
 800220c:	4a20      	ldr	r2, [pc, #128]	@ (8002290 <MX_GPIO_Init+0x1dc>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f005 fd53 	bl	8007cbc <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8002216:	0021      	movs	r1, r4
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2280      	movs	r2, #128	@ 0x80
 800221c:	0152      	lsls	r2, r2, #5
 800221e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	000c      	movs	r4, r1
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2201      	movs	r2, #1
 8002226:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8002234:	193a      	adds	r2, r7, r4
 8002236:	23a0      	movs	r3, #160	@ 0xa0
 8002238:	05db      	lsls	r3, r3, #23
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f005 fd3d 	bl	8007cbc <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8002242:	0021      	movs	r1, r4
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2280      	movs	r2, #128	@ 0x80
 8002248:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2201      	movs	r2, #1
 800224e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 800225c:	187a      	adds	r2, r7, r1
 800225e:	23a0      	movs	r3, #160	@ 0xa0
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f005 fd29 	bl	8007cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 800226a:	2202      	movs	r2, #2
 800226c:	2102      	movs	r1, #2
 800226e:	2007      	movs	r0, #7
 8002270:	f005 f864 	bl	800733c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002274:	2007      	movs	r0, #7
 8002276:	f005 f876 	bl	8007366 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b00b      	add	sp, #44	@ 0x2c
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	50000800 	.word	0x50000800
 800228c:	50001400 	.word	0x50001400
 8002290:	50000400 	.word	0x50000400

08002294 <Error_Handler>:

void Error_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002298:	b672      	cpsid	i
}
 800229a:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	e7fd      	b.n	800229c <Error_Handler+0x8>

080022a0 <System_Init>:
  {

  }
}

void System_Init(void){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022a4:	f003 fccc 	bl	8005c40 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80022a8:	f7ff f9fe 	bl	80016a8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022ac:	f7ff ff02 	bl	80020b4 <MX_GPIO_Init>
	MX_DMA_Init();
 80022b0:	f7ff feda 	bl	8002068 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80022b4:	f7ff fea4 	bl	8002000 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80022b8:	f7ff fa54 	bl	8001764 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 80022bc:	f7ff fb12 	bl	80018e4 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 80022c0:	f7ff fb9c 	bl	80019fc <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 80022c4:	f7ff fc16 	bl	8001af4 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 80022c8:	f7ff fc9c 	bl	8001c04 <MX_TIM1_Init>
	MX_TIM17_Init();
 80022cc:	f7ff fd84 	bl	8001dd8 <MX_TIM17_Init>
	MX_TIM14_Init();
 80022d0:	f7ff fe48 	bl	8001f64 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 80022d4:	f7ff fe0e 	bl	8001ef4 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80022d8:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <System_Init+0xc0>)
 80022da:	0018      	movs	r0, r3
 80022dc:	f004 fe4c 	bl	8006f78 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80022e0:	4a20      	ldr	r2, [pc, #128]	@ (8002364 <System_Init+0xc4>)
 80022e2:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <System_Init+0xc8>)
 80022e4:	210e      	movs	r1, #14
 80022e6:	0018      	movs	r0, r3
 80022e8:	f008 fc20 	bl	800ab2c <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80022ec:	4a1f      	ldr	r2, [pc, #124]	@ (800236c <System_Init+0xcc>)
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <System_Init+0xc0>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f004 f86c 	bl	80063d0 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 80022f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <System_Init+0xd0>)
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <System_Init+0xd4>)
 80022fc:	2112      	movs	r1, #18
 80022fe:	0018      	movs	r0, r3
 8002300:	f008 fc14 	bl	800ab2c <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <System_Init+0xd8>)
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <System_Init+0xd4>)
 8002308:	210e      	movs	r1, #14
 800230a:	0018      	movs	r0, r3
 800230c:	f008 fc0e 	bl	800ab2c <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002310:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <System_Init+0xdc>)
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <System_Init+0xe0>)
 8002314:	2114      	movs	r1, #20
 8002316:	0018      	movs	r0, r3
 8002318:	f008 fc08 	bl	800ab2c <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 800231c:	4a19      	ldr	r2, [pc, #100]	@ (8002384 <System_Init+0xe4>)
 800231e:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <System_Init+0xe8>)
 8002320:	2101      	movs	r1, #1
 8002322:	0018      	movs	r0, r3
 8002324:	f009 fbee 	bl	800bb04 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8002328:	4a18      	ldr	r2, [pc, #96]	@ (800238c <System_Init+0xec>)
 800232a:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <System_Init+0xe8>)
 800232c:	2103      	movs	r1, #3
 800232e:	0018      	movs	r0, r3
 8002330:	f009 fbe8 	bl	800bb04 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8002334:	4a16      	ldr	r2, [pc, #88]	@ (8002390 <System_Init+0xf0>)
 8002336:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <System_Init+0xf4>)
 8002338:	2102      	movs	r1, #2
 800233a:	0018      	movs	r0, r3
 800233c:	f006 f8ac 	bl	8008498 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002340:	4a15      	ldr	r2, [pc, #84]	@ (8002398 <System_Init+0xf8>)
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <System_Init+0xfc>)
 8002344:	2114      	movs	r1, #20
 8002346:	0018      	movs	r0, r3
 8002348:	f008 fbf0 	bl	800ab2c <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 800234c:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <System_Init+0x100>)
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <System_Init+0x104>)
 8002350:	2114      	movs	r1, #20
 8002352:	0018      	movs	r0, r3
 8002354:	f008 fbea 	bl	800ab2c <HAL_TIM_RegisterCallback>
}
 8002358:	46c0      	nop			@ (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	20000574 	.word	0x20000574
 8002364:	080023a9 	.word	0x080023a9
 8002368:	200007d0 	.word	0x200007d0
 800236c:	080023fd 	.word	0x080023fd
 8002370:	08002491 	.word	0x08002491
 8002374:	2000088c 	.word	0x2000088c
 8002378:	080025ad 	.word	0x080025ad
 800237c:	080026b9 	.word	0x080026b9
 8002380:	20000948 	.word	0x20000948
 8002384:	080027f5 	.word	0x080027f5
 8002388:	20000ac0 	.word	0x20000ac0
 800238c:	08002805 	.word	0x08002805
 8002390:	08003be5 	.word	0x08003be5
 8002394:	20000c44 	.word	0x20000c44
 8002398:	08003f85 	.word	0x08003f85
 800239c:	20000714 	.word	0x20000714
 80023a0:	08003f95 	.word	0x08003f95
 80023a4:	20000658 	.word	0x20000658

080023a8 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <TIM16_callback+0x40>)
 80023b2:	0018      	movs	r0, r3
 80023b4:	f001 fffe 	bl	80043b4 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <TIM16_callback+0x40>)
 80023ba:	2100      	movs	r1, #0
 80023bc:	0018      	movs	r0, r3
 80023be:	f002 f825 	bl	800440c <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <TIM16_callback+0x44>)
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <TIM16_callback+0x40>)
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f002 f915 	bl	80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <TIM16_callback+0x48>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	001a      	movs	r2, r3
 80023d4:	4907      	ldr	r1, [pc, #28]	@ (80023f4 <TIM16_callback+0x4c>)
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <TIM16_callback+0x50>)
 80023d8:	0018      	movs	r0, r3
 80023da:	f004 f885 	bl	80064e8 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	20000cc4 	.word	0x20000cc4
 80023ec:	20000020 	.word	0x20000020
 80023f0:	0800db78 	.word	0x0800db78
 80023f4:	20000cb8 	.word	0x20000cb8
 80023f8:	20000574 	.word	0x20000574

080023fc <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 80023fc:	b5b0      	push	{r4, r5, r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f004 f8fc 	bl	8006604 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 800240c:	4a1b      	ldr	r2, [pc, #108]	@ (800247c <ADC_DMA_conversion_complete_callback+0x80>)
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <ADC_DMA_conversion_complete_callback+0x84>)
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f002 f986 	bl	8004724 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002418:	f7fe f884 	bl	8000524 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 800241c:	250f      	movs	r5, #15
 800241e:	197c      	adds	r4, r7, r5
 8002420:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 8002422:	2108      	movs	r1, #8
 8002424:	0018      	movs	r0, r3
 8002426:	f003 fba7 	bl	8005b78 <Get_Status_Bit>
 800242a:	0003      	movs	r3, r0
 800242c:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10a      	bne.n	800244c <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002438:	8a5b      	ldrh	r3, [r3, #18]
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 800243e:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002442:	8b5b      	ldrh	r3, [r3, #26]
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 8002448:	835a      	strh	r2, [r3, #26]
 800244a:	e003      	b.n	8002454 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 800244c:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 800244e:	0018      	movs	r0, r3
 8002450:	f001 ff7a 	bl	8004348 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8002454:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 8002456:	0018      	movs	r0, r3
 8002458:	f002 ff00 	bl	800525c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 800245e:	2110      	movs	r1, #16
 8002460:	0018      	movs	r0, r3
 8002462:	f003 fb89 	bl	8005b78 <Get_Status_Bit>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d104      	bne.n	8002474 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 800246c:	2110      	movs	r1, #16
 800246e:	0018      	movs	r0, r3
 8002470:	f003 fb96 	bl	8005ba0 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bdb0      	pop	{r4, r5, r7, pc}
 800247c:	20000cb8 	.word	0x20000cb8
 8002480:	20000ce8 	.word	0x20000ce8
 8002484:	20000cac 	.word	0x20000cac
 8002488:	20000d30 	.word	0x20000d30
 800248c:	20000cc4 	.word	0x20000cc4

08002490 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2100      	movs	r1, #0
 800249c:	0018      	movs	r0, r3
 800249e:	f008 fac1 	bl	800aa24 <HAL_TIM_ReadCapturedValue>
 80024a2:	0002      	movs	r2, r0
 80024a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002590 <TIM2_ch1_IP_capture_callback+0x100>)
 80024a6:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80024a8:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <TIM2_ch1_IP_capture_callback+0x100>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0a5b      	lsrs	r3, r3, #9
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <TIM2_ch1_IP_capture_callback+0x104>)
 80024b2:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 80024b4:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 80024be:	f001 fe57 	bl	8004170 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 80024c2:	4b35      	ldr	r3, [pc, #212]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80024ce:	e05b      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80024d0:	4b31      	ldr	r3, [pc, #196]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d124      	bne.n	8002524 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 80024da:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <TIM2_ch1_IP_capture_callback+0x104>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b80      	cmp	r3, #128	@ 0x80
 80024e2:	d951      	bls.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 80024e4:	f001 fe26 	bl	8004134 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80024ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 80024f4:	4a29      	ldr	r2, [pc, #164]	@ (800259c <TIM2_ch1_IP_capture_callback+0x10c>)
 80024f6:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x110>)
 80024f8:	0011      	movs	r1, r2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f001 fe08 	bl	8004110 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b05      	cmp	r3, #5
 8002508:	d004      	beq.n	8002514 <TIM2_ch1_IP_capture_callback+0x84>
 800250a:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b07      	cmp	r3, #7
 8002512:	d101      	bne.n	8002518 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002514:	f002 fa78 	bl	8004a08 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <TIM2_ch1_IP_capture_callback+0x118>)
 800251a:	2104      	movs	r1, #4
 800251c:	0018      	movs	r0, r3
 800251e:	f003 fb3f 	bl	8005ba0 <Set_Status_Bit>
}
 8002522:	e031      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d108      	bne.n	8002540 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 800252e:	f001 fe1f 	bl	8004170 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002532:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002534:	2203      	movs	r2, #3
 8002536:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 800253a:	2202      	movs	r2, #2
 800253c:	705a      	strb	r2, [r3, #1]
}
 800253e:	e023      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002540:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d11e      	bne.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 800254a:	f001 fdf3 	bl	8004134 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002550:	2202      	movs	r2, #2
 8002552:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002554:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002556:	2203      	movs	r2, #3
 8002558:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <TIM2_ch1_IP_capture_callback+0x10c>)
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x110>)
 800255e:	0011      	movs	r1, r2
 8002560:	0018      	movs	r0, r3
 8002562:	f001 fdd5 	bl	8004110 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b05      	cmp	r3, #5
 800256e:	d004      	beq.n	800257a <TIM2_ch1_IP_capture_callback+0xea>
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b07      	cmp	r3, #7
 8002578:	d101      	bne.n	800257e <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 800257a:	f002 fa45 	bl	8004a08 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <TIM2_ch1_IP_capture_callback+0x118>)
 8002580:	2104      	movs	r1, #4
 8002582:	0018      	movs	r0, r3
 8002584:	f003 fb0c 	bl	8005ba0 <Set_Status_Bit>
}
 8002588:	46c0      	nop			@ (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000ca4 	.word	0x20000ca4
 8002594:	20000ca8 	.word	0x20000ca8
 8002598:	2000043c 	.word	0x2000043c
 800259c:	20000d0c 	.word	0x20000d0c
 80025a0:	20000cc4 	.word	0x20000cc4
 80025a4:	20000428 	.word	0x20000428
 80025a8:	20000cac 	.word	0x20000cac

080025ac <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 80025b4:	240c      	movs	r4, #12
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	4a3a      	ldr	r2, [pc, #232]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 80025ba:	7852      	ldrb	r2, [r2, #1]
 80025bc:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d131      	bne.n	800262c <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 80025c8:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80025ce:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 80025d4:	4b35      	ldr	r3, [pc, #212]	@ (80026ac <TIM2_ch1_overflow_callback+0x100>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80025da:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <TIM2_ch1_overflow_callback+0x104>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	0099      	lsls	r1, r3, #2
 80025e4:	23a0      	movs	r3, #160	@ 0xa0
 80025e6:	05db      	lsls	r3, r3, #23
 80025e8:	2201      	movs	r2, #1
 80025ea:	0018      	movs	r0, r3
 80025ec:	f005 fce7 	bl	8007fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025f0:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <TIM2_ch1_overflow_callback+0x108>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	2140      	movs	r1, #64	@ 0x40
 80025f6:	0018      	movs	r0, r3
 80025f8:	f005 fce1 	bl	8007fbe <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025fc:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b04      	cmp	r3, #4
 8002604:	d049      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002606:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b06      	cmp	r3, #6
 800260e:	d044      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002616:	2b08      	cmp	r3, #8
 8002618:	d03f      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 800261a:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800261c:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002624:	193a      	adds	r2, r7, r4
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 800262a:	e036      	b.n	800269a <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d131      	bne.n	800269a <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002636:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 800263e:	2203      	movs	r2, #3
 8002640:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002642:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <TIM2_ch1_overflow_callback+0x100>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <TIM2_ch1_overflow_callback+0x104>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	0099      	lsls	r1, r3, #2
 8002652:	23a0      	movs	r3, #160	@ 0xa0
 8002654:	05db      	lsls	r3, r3, #23
 8002656:	2201      	movs	r2, #1
 8002658:	0018      	movs	r0, r3
 800265a:	f005 fcb0 	bl	8007fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <TIM2_ch1_overflow_callback+0x108>)
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	@ 0x40
 8002664:	0018      	movs	r0, r3
 8002666:	f005 fcaa 	bl	8007fbe <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b04      	cmp	r3, #4
 8002672:	d012      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b06      	cmp	r3, #6
 800267c:	d00d      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
 800267e:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002684:	2b08      	cmp	r3, #8
 8002686:	d008      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800268a:	4a06      	ldr	r2, [pc, #24]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800268c:	7812      	ldrb	r2, [r2, #0]
 800268e:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002692:	220c      	movs	r2, #12
 8002694:	18ba      	adds	r2, r7, r2
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b005      	add	sp, #20
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	20000428 	.word	0x20000428
 80026a8:	2000043c 	.word	0x2000043c
 80026ac:	20000d54 	.word	0x20000d54
 80026b0:	20000caa 	.word	0x20000caa
 80026b4:	50000800 	.word	0x50000800

080026b8 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026c0:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b0b      	cmp	r3, #11
 80026c8:	d01c      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80026ca:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d017      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80026d4:	4b3c      	ldr	r3, [pc, #240]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b0d      	cmp	r3, #13
 80026dc:	d012      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80026de:	4b3a      	ldr	r3, [pc, #232]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d00d      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80026e8:	4b37      	ldr	r3, [pc, #220]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b11      	cmp	r3, #17
 80026f0:	d008      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80026f2:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026f8:	2b12      	cmp	r3, #18
 80026fa:	d003      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 80026fc:	4b33      	ldr	r3, [pc, #204]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026fe:	0018      	movs	r0, r3
 8002700:	f001 fe58 	bl	80043b4 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002704:	4b32      	ldr	r3, [pc, #200]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 8002706:	2100      	movs	r1, #0
 8002708:	0018      	movs	r0, r3
 800270a:	f003 f9ce 	bl	8005aaa <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 800270e:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d106      	bne.n	8002726 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8002718:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 800271e:	4b2d      	ldr	r3, [pc, #180]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002720:	2202      	movs	r2, #2
 8002722:	705a      	strb	r2, [r3, #1]
 8002724:	e00a      	b.n	800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002726:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b03      	cmp	r3, #3
 800272e:	d105      	bne.n	800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002730:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002738:	2203      	movs	r2, #3
 800273a:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800273c:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b0b      	cmp	r3, #11
 8002744:	d03c      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d037      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b0d      	cmp	r3, #13
 8002758:	d032      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b10      	cmp	r3, #16
 8002762:	d02d      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b11      	cmp	r3, #17
 800276c:	d028      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 800276e:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002774:	2b12      	cmp	r3, #18
 8002776:	d023      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002778:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 800277c:	0011      	movs	r1, r2
 800277e:	0018      	movs	r0, r3
 8002780:	f001 fcc6 	bl	8004110 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002784:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002788:	0011      	movs	r1, r2
 800278a:	0018      	movs	r0, r3
 800278c:	f001 fcc0 	bl	8004110 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002790:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002792:	2108      	movs	r1, #8
 8002794:	0018      	movs	r0, r3
 8002796:	f003 fa03 	bl	8005ba0 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800279c:	2100      	movs	r1, #0
 800279e:	0018      	movs	r0, r3
 80027a0:	f001 fe34 	bl	800440c <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80027a4:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 80027a6:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80027a8:	0011      	movs	r1, r2
 80027aa:	0018      	movs	r0, r3
 80027ac:	f001 ff24 	bl	80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	001a      	movs	r2, r3
 80027b6:	490d      	ldr	r1, [pc, #52]	@ (80027ec <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 80027b8:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 80027ba:	0018      	movs	r0, r3
 80027bc:	f003 fe94 	bl	80064e8 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80027c0:	46c0      	nop			@ (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000428 	.word	0x20000428
 80027cc:	20000d0c 	.word	0x20000d0c
 80027d0:	20000948 	.word	0x20000948
 80027d4:	2000043c 	.word	0x2000043c
 80027d8:	20000d30 	.word	0x20000d30
 80027dc:	20000cc4 	.word	0x20000cc4
 80027e0:	20000cac 	.word	0x20000cac
 80027e4:	20000020 	.word	0x20000020
 80027e8:	0800db78 	.word	0x0800db78
 80027ec:	20000cb8 	.word	0x20000cb8
 80027f0:	20000574 	.word	0x20000574

080027f4 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 800280c:	4bbe      	ldr	r3, [pc, #760]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800280e:	0018      	movs	r0, r3
 8002810:	f7fe fcb0 	bl	8001174 <Is_System_Real_Time_Status_Byte>
 8002814:	0003      	movs	r3, r0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <UART2_RX_transfer_complete_callback+0x1a>
 800281a:	f000 fc0c 	bl	8003036 <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 800281e:	4bbb      	ldr	r3, [pc, #748]	@ (8002b0c <UART2_RX_transfer_complete_callback+0x308>)
 8002820:	2180      	movs	r1, #128	@ 0x80
 8002822:	0018      	movs	r0, r3
 8002824:	f003 f9a8 	bl	8005b78 <Get_Status_Bit>
 8002828:	0003      	movs	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <UART2_RX_transfer_complete_callback+0x2e>
 800282e:	f001 f895 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002832:	4bb7      	ldr	r3, [pc, #732]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d159      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>
 800283c:	4bb5      	ldr	r3, [pc, #724]	@ (8002b14 <UART2_RX_transfer_complete_callback+0x310>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d154      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002846:	4bb4      	ldr	r3, [pc, #720]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b04      	cmp	r3, #4
 800284e:	d013      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002850:	4bb1      	ldr	r3, [pc, #708]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00e      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 800285a:	4baf      	ldr	r3, [pc, #700]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b06      	cmp	r3, #6
 8002862:	d009      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8002864:	4bac      	ldr	r3, [pc, #688]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b03      	cmp	r3, #3
 800286c:	d004      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 800286e:	4baa      	ldr	r3, [pc, #680]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d13b      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002878:	4ba3      	ldr	r3, [pc, #652]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002880:	d10b      	bne.n	800289a <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002882:	4ba5      	ldr	r3, [pc, #660]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002884:	4aa4      	ldr	r2, [pc, #656]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 800288a:	4ba3      	ldr	r3, [pc, #652]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800288c:	2209      	movs	r2, #9
 800288e:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002890:	4ba2      	ldr	r3, [pc, #648]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002896:	f001 f85e 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800289a:	4b9b      	ldr	r3, [pc, #620]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2bf8      	cmp	r3, #248	@ 0xf8
 80028a2:	d001      	beq.n	80028a8 <UART2_RX_transfer_complete_callback+0xa4>
 80028a4:	f001 f857 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 80028a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 80028b0:	4b99      	ldr	r3, [pc, #612]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028b2:	220b      	movs	r2, #11
 80028b4:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 80028b6:	4b99      	ldr	r3, [pc, #612]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	23a0      	movs	r3, #160	@ 0xa0
 80028c2:	05db      	lsls	r3, r3, #23
 80028c4:	2200      	movs	r2, #0
 80028c6:	0018      	movs	r0, r3
 80028c8:	f005 fb79 	bl	8007fbe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80028cc:	4b94      	ldr	r3, [pc, #592]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	2140      	movs	r1, #64	@ 0x40
 80028d2:	0018      	movs	r0, r3
 80028d4:	f005 fb73 	bl	8007fbe <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80028d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028de:	4b8f      	ldr	r3, [pc, #572]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028ea:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80028ec:	f001 f833 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 80028f0:	4b89      	ldr	r3, [pc, #548]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d123      	bne.n	8002942 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80028fa:	4b83      	ldr	r3, [pc, #524]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2bf8      	cmp	r3, #248	@ 0xf8
 8002902:	d001      	beq.n	8002908 <UART2_RX_transfer_complete_callback+0x104>
 8002904:	f001 f82a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	23a0      	movs	r3, #160	@ 0xa0
 800290e:	05db      	lsls	r3, r3, #23
 8002910:	2200      	movs	r2, #0
 8002912:	0018      	movs	r0, r3
 8002914:	f005 fb53 	bl	8007fbe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002918:	4b81      	ldr	r3, [pc, #516]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 800291a:	2201      	movs	r2, #1
 800291c:	2140      	movs	r1, #64	@ 0x40
 800291e:	0018      	movs	r0, r3
 8002920:	f005 fb4d 	bl	8007fbe <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002924:	4b7a      	ldr	r3, [pc, #488]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800292a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b79      	ldr	r3, [pc, #484]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002936:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002938:	4b77      	ldr	r3, [pc, #476]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800293a:	220a      	movs	r2, #10
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	f001 f80d 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002942:	4b75      	ldr	r3, [pc, #468]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d145      	bne.n	80029d8 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800294c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2bf8      	cmp	r3, #248	@ 0xf8
 8002954:	d001      	beq.n	800295a <UART2_RX_transfer_complete_callback+0x156>
 8002956:	f001 f801 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 800295a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002960:	4b6e      	ldr	r3, [pc, #440]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800296c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800296e:	4b6b      	ldr	r3, [pc, #428]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b0b      	cmp	r3, #11
 8002976:	d80f      	bhi.n	8002998 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	23a0      	movs	r3, #160	@ 0xa0
 800297e:	05db      	lsls	r3, r3, #23
 8002980:	2200      	movs	r2, #0
 8002982:	0018      	movs	r0, r3
 8002984:	f005 fb1b 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002988:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 800298a:	2201      	movs	r2, #1
 800298c:	2140      	movs	r1, #64	@ 0x40
 800298e:	0018      	movs	r0, r3
 8002990:	f005 fb15 	bl	8007fbe <HAL_GPIO_WritePin>
 8002994:	f000 ffe2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002998:	4b60      	ldr	r3, [pc, #384]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b18      	cmp	r3, #24
 80029a0:	d80f      	bhi.n	80029c2 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	0099      	lsls	r1, r3, #2
 80029a6:	23a0      	movs	r3, #160	@ 0xa0
 80029a8:	05db      	lsls	r3, r3, #23
 80029aa:	2201      	movs	r2, #1
 80029ac:	0018      	movs	r0, r3
 80029ae:	f005 fb06 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80029b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	2140      	movs	r1, #64	@ 0x40
 80029b8:	0018      	movs	r0, r3
 80029ba:	f005 fb00 	bl	8007fbe <HAL_GPIO_WritePin>
 80029be:	f000 ffcd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 80029c2:	4b55      	ldr	r3, [pc, #340]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029c4:	220a      	movs	r2, #10
 80029c6:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029ca:	2208      	movs	r2, #8
 80029cc:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 80029ce:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	f000 ffc2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 80029d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b0b      	cmp	r3, #11
 80029e0:	d142      	bne.n	8002a68 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029e2:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2bf8      	cmp	r3, #248	@ 0xf8
 80029ea:	d001      	beq.n	80029f0 <UART2_RX_transfer_complete_callback+0x1ec>
 80029ec:	f000 ffb6 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80029f0:	4b47      	ldr	r3, [pc, #284]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a02:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a04:	4b45      	ldr	r3, [pc, #276]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b0b      	cmp	r3, #11
 8002a0c:	d80f      	bhi.n	8002a2e <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	0099      	lsls	r1, r3, #2
 8002a12:	23a0      	movs	r3, #160	@ 0xa0
 8002a14:	05db      	lsls	r3, r3, #23
 8002a16:	2200      	movs	r2, #0
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f005 fad0 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a1e:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	2140      	movs	r1, #64	@ 0x40
 8002a24:	0018      	movs	r0, r3
 8002a26:	f005 faca 	bl	8007fbe <HAL_GPIO_WritePin>
 8002a2a:	f000 ff97 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b18      	cmp	r3, #24
 8002a36:	d80f      	bhi.n	8002a58 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	23a0      	movs	r3, #160	@ 0xa0
 8002a3e:	05db      	lsls	r3, r3, #23
 8002a40:	2201      	movs	r2, #1
 8002a42:	0018      	movs	r0, r3
 8002a44:	f005 fabb 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a48:	4b35      	ldr	r3, [pc, #212]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2140      	movs	r1, #64	@ 0x40
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f005 fab5 	bl	8007fbe <HAL_GPIO_WritePin>
 8002a54:	f000 ff82 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002a58:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002a60:	220c      	movs	r2, #12
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	f000 ff7a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002a68:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d158      	bne.n	8002b24 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a72:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a7a:	d138      	bne.n	8002aee <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a7c:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a82:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a8e:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a90:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b0b      	cmp	r3, #11
 8002a98:	d80f      	bhi.n	8002aba <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	0099      	lsls	r1, r3, #2
 8002a9e:	23a0      	movs	r3, #160	@ 0xa0
 8002aa0:	05db      	lsls	r3, r3, #23
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f005 fa8a 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	2140      	movs	r1, #64	@ 0x40
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f005 fa84 	bl	8007fbe <HAL_GPIO_WritePin>
 8002ab6:	f000 ff51 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002aba:	4b18      	ldr	r3, [pc, #96]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b18      	cmp	r3, #24
 8002ac2:	d80f      	bhi.n	8002ae4 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	0099      	lsls	r1, r3, #2
 8002ac8:	23a0      	movs	r3, #160	@ 0xa0
 8002aca:	05db      	lsls	r3, r3, #23
 8002acc:	2201      	movs	r2, #1
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f005 fa75 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2140      	movs	r1, #64	@ 0x40
 8002ada:	0018      	movs	r0, r3
 8002adc:	f005 fa6f 	bl	8007fbe <HAL_GPIO_WritePin>
 8002ae0:	f000 ff3c 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	f000 ff37 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2bfa      	cmp	r3, #250	@ 0xfa
 8002af6:	d001      	beq.n	8002afc <UART2_RX_transfer_complete_callback+0x2f8>
 8002af8:	f000 ff30 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002afe:	220d      	movs	r2, #13
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	f000 ff2b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	20000554 	.word	0x20000554
 8002b0c:	20000cac 	.word	0x20000cac
 8002b10:	20000d54 	.word	0x20000d54
 8002b14:	2000043c 	.word	0x2000043c
 8002b18:	20000428 	.word	0x20000428
 8002b1c:	20000caa 	.word	0x20000caa
 8002b20:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002b24:	4bdc      	ldr	r3, [pc, #880]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b0d      	cmp	r3, #13
 8002b2c:	d160      	bne.n	8002bf0 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b2e:	4bdb      	ldr	r3, [pc, #876]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b36:	d001      	beq.n	8002b3c <UART2_RX_transfer_complete_callback+0x338>
 8002b38:	f000 ff10 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002b3c:	4bd8      	ldr	r3, [pc, #864]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 fc38 	bl	80043b4 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	23a0      	movs	r3, #160	@ 0xa0
 8002b4a:	05db      	lsls	r3, r3, #23
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f005 fa35 	bl	8007fbe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b54:	4bd3      	ldr	r3, [pc, #844]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	2140      	movs	r1, #64	@ 0x40
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f005 fa2f 	bl	8007fbe <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	23a0      	movs	r3, #160	@ 0xa0
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	2200      	movs	r2, #0
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f005 fa27 	bl	8007fbe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b70:	4bcc      	ldr	r3, [pc, #816]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	2140      	movs	r1, #64	@ 0x40
 8002b76:	0018      	movs	r0, r3
 8002b78:	f005 fa21 	bl	8007fbe <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b7c:	4bca      	ldr	r3, [pc, #808]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002b82:	4bca      	ldr	r3, [pc, #808]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002b88:	4bc3      	ldr	r3, [pc, #780]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b8a:	220d      	movs	r2, #13
 8002b8c:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002b8e:	4bc2      	ldr	r3, [pc, #776]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b90:	2208      	movs	r2, #8
 8002b92:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002b94:	4bc6      	ldr	r3, [pc, #792]	@ (8002eb0 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f002 ff86 	bl	8005aaa <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002b9e:	4bc5      	ldr	r3, [pc, #788]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002ba4:	4ac4      	ldr	r2, [pc, #784]	@ (8002eb8 <UART2_RX_transfer_complete_callback+0x6b4>)
 8002ba6:	4bbe      	ldr	r3, [pc, #760]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002ba8:	0011      	movs	r1, r2
 8002baa:	0018      	movs	r0, r3
 8002bac:	f001 fab0 	bl	8004110 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002bb0:	4ac2      	ldr	r2, [pc, #776]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bb2:	4bbb      	ldr	r3, [pc, #748]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002bb4:	0011      	movs	r1, r2
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f001 faaa 	bl	8004110 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002bbc:	4bc0      	ldr	r3, [pc, #768]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bbe:	2108      	movs	r1, #8
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f002 ffed 	bl	8005ba0 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002bc6:	4bbd      	ldr	r3, [pc, #756]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f001 fc1e 	bl	800440c <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002bd0:	4abc      	ldr	r2, [pc, #752]	@ (8002ec4 <UART2_RX_transfer_complete_callback+0x6c0>)
 8002bd2:	4bba      	ldr	r3, [pc, #744]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 fd0e 	bl	80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002bdc:	4bba      	ldr	r3, [pc, #744]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6c4>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	001a      	movs	r2, r3
 8002be2:	49ba      	ldr	r1, [pc, #744]	@ (8002ecc <UART2_RX_transfer_complete_callback+0x6c8>)
 8002be4:	4bba      	ldr	r3, [pc, #744]	@ (8002ed0 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f003 fc7e 	bl	80064e8 <HAL_ADC_Start_DMA>
 8002bec:	f000 feb6 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002bf0:	4ba9      	ldr	r3, [pc, #676]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d146      	bne.n	8002c88 <UART2_RX_transfer_complete_callback+0x484>
 8002bfa:	4bb1      	ldr	r3, [pc, #708]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f002 ffba 	bl	8005b78 <Get_Status_Bit>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d13f      	bne.n	8002c88 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c08:	4ba4      	ldr	r3, [pc, #656]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c10:	d001      	beq.n	8002c16 <UART2_RX_transfer_complete_callback+0x412>
 8002c12:	f000 fea3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002c16:	4ba4      	ldr	r3, [pc, #656]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4ba1      	ldr	r3, [pc, #644]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c28:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002c2a:	4ba0      	ldr	r3, [pc, #640]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b0b      	cmp	r3, #11
 8002c32:	d80f      	bhi.n	8002c54 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	0099      	lsls	r1, r3, #2
 8002c38:	23a0      	movs	r3, #160	@ 0xa0
 8002c3a:	05db      	lsls	r3, r3, #23
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f005 f9bd 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002c44:	4b97      	ldr	r3, [pc, #604]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	2140      	movs	r1, #64	@ 0x40
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f005 f9b7 	bl	8007fbe <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c50:	f000 fe84 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002c54:	4b95      	ldr	r3, [pc, #596]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	d80f      	bhi.n	8002c7e <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	0099      	lsls	r1, r3, #2
 8002c62:	23a0      	movs	r3, #160	@ 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	2201      	movs	r2, #1
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f005 f9a8 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	2140      	movs	r1, #64	@ 0x40
 8002c74:	0018      	movs	r0, r3
 8002c76:	f005 f9a2 	bl	8007fbe <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c7a:	f000 fe6f 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c84:	f000 fe6a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002c88:	4b83      	ldr	r3, [pc, #524]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d14c      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>
 8002c92:	4b88      	ldr	r3, [pc, #544]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d147      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>
 8002c9c:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c9e:	2120      	movs	r1, #32
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f002 ff69 	bl	8005b78 <Get_Status_Bit>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d13f      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cac:	4b7b      	ldr	r3, [pc, #492]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2bf8      	cmp	r3, #248	@ 0xf8
 8002cb4:	d11e      	bne.n	8002cf4 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b79      	ldr	r3, [pc, #484]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cc8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002cca:	4b77      	ldr	r3, [pc, #476]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002cd0:	4b71      	ldr	r3, [pc, #452]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002cd6:	4b70      	ldr	r3, [pc, #448]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002cd8:	2208      	movs	r2, #8
 8002cda:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002cdc:	4b78      	ldr	r3, [pc, #480]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002cde:	2120      	movs	r1, #32
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f002 ff6f 	bl	8005bc4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002ce8:	2140      	movs	r1, #64	@ 0x40
 8002cea:	0018      	movs	r0, r3
 8002cec:	f002 ff6a 	bl	8005bc4 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cf0:	f000 fe33 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002cf4:	4b69      	ldr	r3, [pc, #420]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2bfa      	cmp	r3, #250	@ 0xfa
 8002cfc:	d001      	beq.n	8002d02 <UART2_RX_transfer_complete_callback+0x4fe>
 8002cfe:	f000 fe2c 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002d02:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002d08:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d0a:	220e      	movs	r2, #14
 8002d0c:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d0e:	4b62      	ldr	r3, [pc, #392]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d10:	2208      	movs	r2, #8
 8002d12:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002d14:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d16:	2120      	movs	r1, #32
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f002 ff53 	bl	8005bc4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002d1e:	4b68      	ldr	r3, [pc, #416]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	0018      	movs	r0, r3
 8002d24:	f002 ff4e 	bl	8005bc4 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d28:	f000 fe17 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b0e      	cmp	r3, #14
 8002d34:	d123      	bne.n	8002d7e <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d36:	4b59      	ldr	r3, [pc, #356]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d3e:	d001      	beq.n	8002d44 <UART2_RX_transfer_complete_callback+0x540>
 8002d40:	f000 fe0c 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	23a0      	movs	r3, #160	@ 0xa0
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f005 f935 	bl	8007fbe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d54:	4b53      	ldr	r3, [pc, #332]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	2140      	movs	r1, #64	@ 0x40
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f005 f92f 	bl	8007fbe <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002d60:	4b51      	ldr	r3, [pc, #324]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002d66:	4b51      	ldr	r3, [pc, #324]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	4b4e      	ldr	r3, [pc, #312]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d72:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002d74:	4b48      	ldr	r3, [pc, #288]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d76:	220f      	movs	r2, #15
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	f000 fdef 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002d7e:	4b46      	ldr	r3, [pc, #280]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d142      	bne.n	8002e0e <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d88:	4b44      	ldr	r3, [pc, #272]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d90:	d001      	beq.n	8002d96 <UART2_RX_transfer_complete_callback+0x592>
 8002d92:	f000 fde3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002d96:	4b45      	ldr	r3, [pc, #276]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b42      	ldr	r3, [pc, #264]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da2:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002da4:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b0b      	cmp	r3, #11
 8002dac:	d80f      	bhi.n	8002dce <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	0099      	lsls	r1, r3, #2
 8002db2:	23a0      	movs	r3, #160	@ 0xa0
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	2200      	movs	r2, #0
 8002db8:	0018      	movs	r0, r3
 8002dba:	f005 f900 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	2140      	movs	r1, #64	@ 0x40
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f005 f8fa 	bl	8007fbe <HAL_GPIO_WritePin>
 8002dca:	f000 fdc7 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002dce:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b18      	cmp	r3, #24
 8002dd6:	d80f      	bhi.n	8002df8 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	0099      	lsls	r1, r3, #2
 8002ddc:	23a0      	movs	r3, #160	@ 0xa0
 8002dde:	05db      	lsls	r3, r3, #23
 8002de0:	2201      	movs	r2, #1
 8002de2:	0018      	movs	r0, r3
 8002de4:	f005 f8eb 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002de8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	2140      	movs	r1, #64	@ 0x40
 8002dee:	0018      	movs	r0, r3
 8002df0:	f005 f8e5 	bl	8007fbe <HAL_GPIO_WritePin>
 8002df4:	f000 fdb2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002df8:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002dfe:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e00:	2208      	movs	r2, #8
 8002e02:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002e04:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	f000 fda7 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002e0e:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d15d      	bne.n	8002ed4 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e20:	d001      	beq.n	8002e26 <UART2_RX_transfer_complete_callback+0x622>
 8002e22:	f000 fd9b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002e26:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e32:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b0b      	cmp	r3, #11
 8002e3c:	d80f      	bhi.n	8002e5e <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	0099      	lsls	r1, r3, #2
 8002e42:	23a0      	movs	r3, #160	@ 0xa0
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	2200      	movs	r2, #0
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f005 f8b8 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	2140      	movs	r1, #64	@ 0x40
 8002e54:	0018      	movs	r0, r3
 8002e56:	f005 f8b2 	bl	8007fbe <HAL_GPIO_WritePin>
 8002e5a:	f000 fd7f 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002e5e:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b18      	cmp	r3, #24
 8002e66:	d80f      	bhi.n	8002e88 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	23a0      	movs	r3, #160	@ 0xa0
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	2201      	movs	r2, #1
 8002e72:	0018      	movs	r0, r3
 8002e74:	f005 f8a3 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2140      	movs	r1, #64	@ 0x40
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f005 f89d 	bl	8007fbe <HAL_GPIO_WritePin>
 8002e84:	f000 fd6a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e8a:	2211      	movs	r2, #17
 8002e8c:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	f000 fd62 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8002e98:	20000428 	.word	0x20000428
 8002e9c:	20000554 	.word	0x20000554
 8002ea0:	20000d0c 	.word	0x20000d0c
 8002ea4:	50000800 	.word	0x50000800
 8002ea8:	20000d54 	.word	0x20000d54
 8002eac:	20000caa 	.word	0x20000caa
 8002eb0:	20000948 	.word	0x20000948
 8002eb4:	2000043c 	.word	0x2000043c
 8002eb8:	20000d30 	.word	0x20000d30
 8002ebc:	20000cc4 	.word	0x20000cc4
 8002ec0:	20000cac 	.word	0x20000cac
 8002ec4:	20000020 	.word	0x20000020
 8002ec8:	0800db78 	.word	0x0800db78
 8002ecc:	20000cb8 	.word	0x20000cb8
 8002ed0:	20000574 	.word	0x20000574
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002ed4:	4bed      	ldr	r3, [pc, #948]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b11      	cmp	r3, #17
 8002edc:	d146      	bne.n	8002f6c <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ede:	4bec      	ldr	r3, [pc, #944]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ee6:	d135      	bne.n	8002f54 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002ee8:	4bea      	ldr	r3, [pc, #936]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4be8      	ldr	r3, [pc, #928]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002ef4:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002ef6:	4be7      	ldr	r3, [pc, #924]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b0b      	cmp	r3, #11
 8002efe:	d80f      	bhi.n	8002f20 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	23a0      	movs	r3, #160	@ 0xa0
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	2200      	movs	r2, #0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f005 f857 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f10:	4be1      	ldr	r3, [pc, #900]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	2140      	movs	r1, #64	@ 0x40
 8002f16:	0018      	movs	r0, r3
 8002f18:	f005 f851 	bl	8007fbe <HAL_GPIO_WritePin>
 8002f1c:	f000 fd1e 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002f20:	4bdc      	ldr	r3, [pc, #880]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b18      	cmp	r3, #24
 8002f28:	d80f      	bhi.n	8002f4a <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	0099      	lsls	r1, r3, #2
 8002f2e:	23a0      	movs	r3, #160	@ 0xa0
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	2201      	movs	r2, #1
 8002f34:	0018      	movs	r0, r3
 8002f36:	f005 f842 	bl	8007fbe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f3a:	4bd7      	ldr	r3, [pc, #860]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2140      	movs	r1, #64	@ 0x40
 8002f40:	0018      	movs	r0, r3
 8002f42:	f005 f83c 	bl	8007fbe <HAL_GPIO_WritePin>
 8002f46:	f000 fd09 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002f4a:	4bd2      	ldr	r3, [pc, #840]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	f000 fd04 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f54:	4bce      	ldr	r3, [pc, #824]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2bfa      	cmp	r3, #250	@ 0xfa
 8002f5c:	d001      	beq.n	8002f62 <UART2_RX_transfer_complete_callback+0x75e>
 8002f5e:	f000 fcfd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002f62:	4bca      	ldr	r3, [pc, #808]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002f64:	2212      	movs	r2, #18
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	f000 fcf8 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002f6c:	4bc7      	ldr	r3, [pc, #796]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b12      	cmp	r3, #18
 8002f74:	d001      	beq.n	8002f7a <UART2_RX_transfer_complete_callback+0x776>
 8002f76:	f000 fcf1 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f7a:	4bc5      	ldr	r3, [pc, #788]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f82:	d001      	beq.n	8002f88 <UART2_RX_transfer_complete_callback+0x784>
 8002f84:	f000 fcea 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002f88:	4bc4      	ldr	r3, [pc, #784]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f001 fa12 	bl	80043b4 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	23a0      	movs	r3, #160	@ 0xa0
 8002f96:	05db      	lsls	r3, r3, #23
 8002f98:	2201      	movs	r2, #1
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f005 f80f 	bl	8007fbe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002fa0:	4bbd      	ldr	r3, [pc, #756]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2140      	movs	r1, #64	@ 0x40
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f005 f809 	bl	8007fbe <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	0099      	lsls	r1, r3, #2
 8002fb0:	23a0      	movs	r3, #160	@ 0xa0
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f005 f801 	bl	8007fbe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fbc:	4bb6      	ldr	r3, [pc, #728]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	2140      	movs	r1, #64	@ 0x40
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f004 fffb 	bl	8007fbe <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002fc8:	4bb0      	ldr	r3, [pc, #704]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002fca:	2212      	movs	r2, #18
 8002fcc:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002fce:	4baf      	ldr	r3, [pc, #700]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8002fd4:	4baf      	ldr	r3, [pc, #700]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002fda:	4bb1      	ldr	r3, [pc, #708]	@ (80032a0 <UART2_RX_transfer_complete_callback+0xa9c>)
 8002fdc:	2100      	movs	r1, #0
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f002 fd63 	bl	8005aaa <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002fe4:	4baf      	ldr	r3, [pc, #700]	@ (80032a4 <UART2_RX_transfer_complete_callback+0xaa0>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002fea:	4aaf      	ldr	r2, [pc, #700]	@ (80032a8 <UART2_RX_transfer_complete_callback+0xaa4>)
 8002fec:	4bab      	ldr	r3, [pc, #684]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f001 f88d 	bl	8004110 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002ff6:	4aad      	ldr	r2, [pc, #692]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 8002ff8:	4ba8      	ldr	r3, [pc, #672]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f001 f887 	bl	8004110 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8003002:	4bab      	ldr	r3, [pc, #684]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003004:	2108      	movs	r1, #8
 8003006:	0018      	movs	r0, r3
 8003008:	f002 fdca 	bl	8005ba0 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800300c:	4ba7      	ldr	r3, [pc, #668]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 800300e:	2100      	movs	r1, #0
 8003010:	0018      	movs	r0, r3
 8003012:	f001 f9fb 	bl	800440c <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8003016:	4aa7      	ldr	r2, [pc, #668]	@ (80032b4 <UART2_RX_transfer_complete_callback+0xab0>)
 8003018:	4ba4      	ldr	r3, [pc, #656]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f001 faeb 	bl	80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8003022:	4ba5      	ldr	r3, [pc, #660]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xab4>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	001a      	movs	r2, r3
 8003028:	49a4      	ldr	r1, [pc, #656]	@ (80032bc <UART2_RX_transfer_complete_callback+0xab8>)
 800302a:	4ba5      	ldr	r3, [pc, #660]	@ (80032c0 <UART2_RX_transfer_complete_callback+0xabc>)
 800302c:	0018      	movs	r0, r3
 800302e:	f003 fa5b 	bl	80064e8 <HAL_ADC_Start_DMA>
 8003032:	f000 fc93 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8003036:	4ba3      	ldr	r3, [pc, #652]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d000      	beq.n	8003042 <UART2_RX_transfer_complete_callback+0x83e>
 8003040:	e29e      	b.n	8003580 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 8003042:	4ba1      	ldr	r3, [pc, #644]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d000      	beq.n	800304e <UART2_RX_transfer_complete_callback+0x84a>
 800304c:	e0a3      	b.n	8003196 <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800304e:	4b9f      	ldr	r3, [pc, #636]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 8003050:	0018      	movs	r0, r3
 8003052:	f7fe f82c 	bl	80010ae <Is_Data_Buffer_Empty>
 8003056:	0003      	movs	r3, r0
 8003058:	2b01      	cmp	r3, #1
 800305a:	d001      	beq.n	8003060 <UART2_RX_transfer_complete_callback+0x85c>
 800305c:	f000 fc7e 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003060:	4b8b      	ldr	r3, [pc, #556]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7fd fee2 	bl	8000e2c <Is_Status_Byte>
 8003068:	0003      	movs	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <UART2_RX_transfer_complete_callback+0x86e>
 800306e:	f000 fc75 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003072:	4b87      	ldr	r3, [pc, #540]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003074:	0018      	movs	r0, r3
 8003076:	f7fd ff0b 	bl	8000e90 <Is_PC_Status_Byte>
 800307a:	0003      	movs	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d134      	bne.n	80030ea <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003080:	4b83      	ldr	r3, [pc, #524]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4b90      	ldr	r3, [pc, #576]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003088:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800308a:	4b91      	ldr	r3, [pc, #580]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b7f      	ldr	r3, [pc, #508]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003092:	0011      	movs	r1, r2
 8003094:	0018      	movs	r0, r3
 8003096:	f7fd ffe9 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 800309a:	0003      	movs	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10d      	bne.n	80030bc <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 80030a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4b87      	ldr	r3, [pc, #540]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 80030a8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	4b80      	ldr	r3, [pc, #512]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f002 fd74 	bl	8005ba0 <Set_Status_Bit>
 80030b8:	f000 fc50 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80030bc:	4b7c      	ldr	r3, [pc, #496]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fe f88b 	bl	80011da <Is_OMNI_On>
 80030c4:	0003      	movs	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <UART2_RX_transfer_complete_callback+0x8ca>
 80030ca:	f000 fc47 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80030ce:	4b70      	ldr	r3, [pc, #448]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b7b      	ldr	r3, [pc, #492]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 80030d6:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	005a      	lsls	r2, r3, #1
 80030dc:	4b74      	ldr	r3, [pc, #464]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030de:	0011      	movs	r1, r2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f002 fd5d 	bl	8005ba0 <Set_Status_Bit>
 80030e6:	f000 fc39 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80030ea:	4b69      	ldr	r3, [pc, #420]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd feeb 	bl	8000ec8 <Is_CC_Status_Byte>
 80030f2:	0003      	movs	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d134      	bne.n	8003162 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 80030f8:	4b65      	ldr	r3, [pc, #404]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b72      	ldr	r3, [pc, #456]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003100:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003102:	4b73      	ldr	r3, [pc, #460]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b61      	ldr	r3, [pc, #388]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800310a:	0011      	movs	r1, r2
 800310c:	0018      	movs	r0, r3
 800310e:	f7fd ffad 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003112:	0003      	movs	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10d      	bne.n	8003134 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 8003118:	4b5d      	ldr	r3, [pc, #372]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b69      	ldr	r3, [pc, #420]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003120:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	005a      	lsls	r2, r3, #1
 8003126:	4b62      	ldr	r3, [pc, #392]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003128:	0011      	movs	r1, r2
 800312a:	0018      	movs	r0, r3
 800312c:	f002 fd38 	bl	8005ba0 <Set_Status_Bit>
 8003130:	f000 fc14 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003134:	4b5e      	ldr	r3, [pc, #376]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003136:	0018      	movs	r0, r3
 8003138:	f7fe f84f 	bl	80011da <Is_OMNI_On>
 800313c:	0003      	movs	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <UART2_RX_transfer_complete_callback+0x942>
 8003142:	f000 fc0b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8003146:	4b52      	ldr	r3, [pc, #328]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	4b5d      	ldr	r3, [pc, #372]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 800314e:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	005a      	lsls	r2, r3, #1
 8003154:	4b56      	ldr	r3, [pc, #344]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003156:	0011      	movs	r1, r2
 8003158:	0018      	movs	r0, r3
 800315a:	f002 fd21 	bl	8005ba0 <Set_Status_Bit>
 800315e:	f000 fbfd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003162:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003164:	0018      	movs	r0, r3
 8003166:	f7fd ff71 	bl	800104c <Is_Sysex_Start_Status_Byte>
 800316a:	0003      	movs	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <UART2_RX_transfer_complete_callback+0x970>
 8003170:	f000 fbf4 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 8003174:	4b46      	ldr	r3, [pc, #280]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 800317c:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 800317e:	4b52      	ldr	r3, [pc, #328]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	005a      	lsls	r2, r3, #1
 8003188:	4b49      	ldr	r3, [pc, #292]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 800318a:	0011      	movs	r1, r2
 800318c:	0018      	movs	r0, r3
 800318e:	f002 fd07 	bl	8005ba0 <Set_Status_Bit>
 8003192:	f000 fbe3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 8003196:	4b4c      	ldr	r3, [pc, #304]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <UART2_RX_transfer_complete_callback+0x9a0>
 80031a0:	f000 fbdc 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 80031a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fd fe59 	bl	8000e5e <Is_Data_Byte>
 80031ac:	0003      	movs	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d000      	beq.n	80031b4 <UART2_RX_transfer_complete_callback+0x9b0>
 80031b2:	e151      	b.n	8003458 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	005a      	lsls	r2, r3, #1
 80031b8:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80031ba:	0011      	movs	r1, r2
 80031bc:	0018      	movs	r0, r3
 80031be:	f002 fcef 	bl	8005ba0 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd fe63 	bl	8000e90 <Is_PC_Status_Byte>
 80031ca:	0003      	movs	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d143      	bne.n	8003258 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80031d0:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fd ff46 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80031e0:	0003      	movs	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d008      	beq.n	80031f8 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80031e6:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fd fff6 	bl	80011da <Is_OMNI_On>
 80031ee:	0003      	movs	r3, r0
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <UART2_RX_transfer_complete_callback+0x9f4>
 80031f4:	f000 fbb2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80031f8:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fd ff57 	bl	80010ae <Is_Data_Buffer_Empty>
 8003200:	0003      	movs	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <UART2_RX_transfer_complete_callback+0xa06>
 8003206:	f000 fba9 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800320a:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800320c:	2104      	movs	r1, #4
 800320e:	0018      	movs	r0, r3
 8003210:	f7fd ff9b 	bl	800114a <Is_Program_Change_Data_Byte_In_Range>
 8003214:	0003      	movs	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10f      	bne.n	800323a <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 800321a:	f7fd fdcf 	bl	8000dbc <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 800321e:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <UART2_RX_transfer_complete_callback+0xad0>)
 800322a:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800322c:	f7fd f97a 	bl	8000524 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003230:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003232:	2108      	movs	r1, #8
 8003234:	0018      	movs	r0, r3
 8003236:	f002 fcc5 	bl	8005bc4 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd ff66 	bl	800110e <Clear_Data_Buffer>
								active_status_byte = 0;
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003248:	4a19      	ldr	r2, [pc, #100]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 800324a:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xad4>)
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f7fd ffdd 	bl	800120e <Reset_and_Stop_MIDI_Software_Timer>
 8003254:	f000 fb82 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8003258:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 800325a:	0018      	movs	r0, r3
 800325c:	f7fd fe34 	bl	8000ec8 <Is_CC_Status_Byte>
 8003260:	0003      	movs	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d001      	beq.n	800326a <UART2_RX_transfer_complete_callback+0xa66>
 8003266:	f000 fb79 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800326a:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 800326c:	0018      	movs	r0, r3
 800326e:	f7fd ff1e 	bl	80010ae <Is_Data_Buffer_Empty>
 8003272:	0003      	movs	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d131      	bne.n	80032dc <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 8003280:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xad4>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e368      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	20000428 	.word	0x20000428
 8003290:	20000554 	.word	0x20000554
 8003294:	20000caa 	.word	0x20000caa
 8003298:	50000800 	.word	0x50000800
 800329c:	20000d0c 	.word	0x20000d0c
 80032a0:	20000948 	.word	0x20000948
 80032a4:	2000043c 	.word	0x2000043c
 80032a8:	20000d30 	.word	0x20000d30
 80032ac:	20000cc4 	.word	0x20000cc4
 80032b0:	20000cac 	.word	0x20000cac
 80032b4:	20000020 	.word	0x20000020
 80032b8:	0800db78 	.word	0x0800db78
 80032bc:	20000cb8 	.word	0x20000cb8
 80032c0:	20000574 	.word	0x20000574
 80032c4:	20000546 	.word	0x20000546
 80032c8:	20000547 	.word	0x20000547
 80032cc:	20000548 	.word	0x20000548
 80032d0:	20000545 	.word	0x20000545
 80032d4:	20000538 	.word	0x20000538
 80032d8:	20000cb4 	.word	0x20000cb4

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80032dc:	4bd6      	ldr	r3, [pc, #856]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4bd6      	ldr	r3, [pc, #856]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80032e4:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80032e6:	4ad6      	ldr	r2, [pc, #856]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80032e8:	4bd6      	ldr	r3, [pc, #856]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7fd ff8e 	bl	800120e <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80032f2:	4bd2      	ldr	r3, [pc, #840]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fd fe03 	bl	8000f00 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80032fa:	0003      	movs	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d14c      	bne.n	800339a <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 8003300:	4bd1      	ldr	r3, [pc, #836]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4bd1      	ldr	r3, [pc, #836]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 8003308:	0011      	movs	r1, r2
 800330a:	0018      	movs	r0, r3
 800330c:	f7fd feae 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003310:	0003      	movs	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d139      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8003316:	4ace      	ldr	r2, [pc, #824]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003318:	4bc8      	ldr	r3, [pc, #800]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f7fd fe4e 	bl	8000fbe <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003322:	0003      	movs	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d130      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003328:	4bc4      	ldr	r3, [pc, #784]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b79      	cmp	r3, #121	@ 0x79
 8003330:	d10b      	bne.n	800334a <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 8003332:	4ac8      	ldr	r2, [pc, #800]	@ (8003654 <UART2_RX_transfer_complete_callback+0xe50>)
 8003334:	4bc8      	ldr	r3, [pc, #800]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe54>)
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f7fd ff83 	bl	8001244 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800333e:	4bc0      	ldr	r3, [pc, #768]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003340:	2108      	movs	r1, #8
 8003342:	0018      	movs	r0, r3
 8003344:	f002 fc3e 	bl	8005bc4 <Clear_Status_Bit>
 8003348:	e01f      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800334a:	4bbc      	ldr	r3, [pc, #752]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b7a      	cmp	r3, #122	@ 0x7a
 8003352:	d107      	bne.n	8003364 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 8003354:	f7fd ffd0 	bl	80012f8 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003358:	4bb9      	ldr	r3, [pc, #740]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800335a:	2108      	movs	r1, #8
 800335c:	0018      	movs	r0, r3
 800335e:	f002 fc31 	bl	8005bc4 <Clear_Status_Bit>
 8003362:	e012      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003364:	4bb5      	ldr	r3, [pc, #724]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b7c      	cmp	r3, #124	@ 0x7c
 800336c:	d104      	bne.n	8003378 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 800336e:	4bb4      	ldr	r3, [pc, #720]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd fff9 	bl	8001368 <Set_OMNI_Off>
 8003376:	e008      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003378:	4bb0      	ldr	r3, [pc, #704]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b7d      	cmp	r3, #125	@ 0x7d
 8003380:	d103      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 8003382:	4baf      	ldr	r3, [pc, #700]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003384:	0018      	movs	r0, r3
 8003386:	f7fd ffff 	bl	8001388 <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 800338a:	4bb4      	ldr	r3, [pc, #720]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003390:	4baa      	ldr	r3, [pc, #680]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003392:	0018      	movs	r0, r3
 8003394:	f7fd febb 	bl	800110e <Clear_Data_Buffer>
 8003398:	e2e0      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800339a:	4ba8      	ldr	r3, [pc, #672]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800339c:	0018      	movs	r0, r3
 800339e:	f7fd fddb 	bl	8000f58 <Is_Utilised_CC_First_Data_Byte>
 80033a2:	0003      	movs	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d14f      	bne.n	8003448 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80033a8:	4ba7      	ldr	r3, [pc, #668]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4ba7      	ldr	r3, [pc, #668]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 80033b0:	0011      	movs	r1, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fd fe5a 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033b8:	0003      	movs	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d006      	beq.n	80033cc <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 80033be:	4ba0      	ldr	r3, [pc, #640]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fd ff0a 	bl	80011da <Is_OMNI_On>
 80033c6:	0003      	movs	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d135      	bne.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80033cc:	4b9b      	ldr	r3, [pc, #620]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b14      	cmp	r3, #20
 80033d4:	d104      	bne.n	80033e0 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80033d6:	4b9e      	ldr	r3, [pc, #632]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033d8:	0018      	movs	r0, r3
 80033da:	f7fd fc6d 	bl	8000cb8 <Set_Waveshape_to_CC_Mode_and_Value>
 80033de:	e02b      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80033e0:	4b96      	ldr	r3, [pc, #600]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b15      	cmp	r3, #21
 80033e8:	d109      	bne.n	80033fe <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80033ea:	4b99      	ldr	r3, [pc, #612]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fd fc7d 	bl	8000cec <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80033f2:	4b93      	ldr	r3, [pc, #588]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033f4:	2108      	movs	r1, #8
 80033f6:	0018      	movs	r0, r3
 80033f8:	f002 fbe4 	bl	8005bc4 <Clear_Status_Bit>
 80033fc:	e01c      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80033fe:	4b8f      	ldr	r3, [pc, #572]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b16      	cmp	r3, #22
 8003406:	d104      	bne.n	8003412 <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003408:	4b91      	ldr	r3, [pc, #580]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd fc88 	bl	8000d20 <Set_Depth_to_CC_Mode_and_Value>
 8003410:	e012      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003412:	4b8a      	ldr	r3, [pc, #552]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b17      	cmp	r3, #23
 800341a:	d104      	bne.n	8003426 <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800341c:	4b8c      	ldr	r3, [pc, #560]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 800341e:	0018      	movs	r0, r3
 8003420:	f7fd fc98 	bl	8000d54 <Set_Symmetry_to_CC_Mode_and_Value>
 8003424:	e008      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003426:	4b85      	ldr	r3, [pc, #532]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b18      	cmp	r3, #24
 800342e:	d103      	bne.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003430:	4b87      	ldr	r3, [pc, #540]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003432:	0018      	movs	r0, r3
 8003434:	f7fd fca8 	bl	8000d88 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003438:	4b88      	ldr	r3, [pc, #544]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800343e:	4b7f      	ldr	r3, [pc, #508]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd fe64 	bl	800110e <Clear_Data_Buffer>
 8003446:	e289      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003448:	4b84      	ldr	r3, [pc, #528]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800344e:	4b7b      	ldr	r3, [pc, #492]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003450:	0018      	movs	r0, r3
 8003452:	f7fd fe5c 	bl	800110e <Clear_Data_Buffer>
 8003456:	e281      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003458:	4b78      	ldr	r3, [pc, #480]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd fe57 	bl	800110e <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003460:	4a77      	ldr	r2, [pc, #476]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003462:	4b78      	ldr	r3, [pc, #480]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f7fd fed1 	bl	800120e <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 800346c:	4b72      	ldr	r3, [pc, #456]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800346e:	0018      	movs	r0, r3
 8003470:	f7fd fd0e 	bl	8000e90 <Is_PC_Status_Byte>
 8003474:	0003      	movs	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d131      	bne.n	80034de <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 800347a:	4b6f      	ldr	r3, [pc, #444]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b72      	ldr	r3, [pc, #456]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 8003482:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003484:	4b70      	ldr	r3, [pc, #448]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4b6b      	ldr	r3, [pc, #428]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800348c:	0011      	movs	r1, r2
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd fdec 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003494:	0003      	movs	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10c      	bne.n	80034b4 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 800349a:	4b67      	ldr	r3, [pc, #412]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	4b6e      	ldr	r3, [pc, #440]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80034a2:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	005a      	lsls	r2, r3, #1
 80034a8:	4b65      	ldr	r3, [pc, #404]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034aa:	0011      	movs	r1, r2
 80034ac:	0018      	movs	r0, r3
 80034ae:	f002 fb77 	bl	8005ba0 <Set_Status_Bit>
 80034b2:	e253      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80034b4:	4b62      	ldr	r3, [pc, #392]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7fd fe8f 	bl	80011da <Is_OMNI_On>
 80034bc:	0003      	movs	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d000      	beq.n	80034c4 <UART2_RX_transfer_complete_callback+0xcc0>
 80034c2:	e24b      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80034c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4b64      	ldr	r3, [pc, #400]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80034cc:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	005a      	lsls	r2, r3, #1
 80034d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034d4:	0011      	movs	r1, r2
 80034d6:	0018      	movs	r0, r3
 80034d8:	f002 fb62 	bl	8005ba0 <Set_Status_Bit>
 80034dc:	e23e      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80034de:	4b56      	ldr	r3, [pc, #344]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fd fcf1 	bl	8000ec8 <Is_CC_Status_Byte>
 80034e6:	0003      	movs	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d131      	bne.n	8003550 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 80034ec:	4b52      	ldr	r3, [pc, #328]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b56      	ldr	r3, [pc, #344]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 80034f4:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80034f6:	4b54      	ldr	r3, [pc, #336]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f7fd fdb3 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003506:	0003      	movs	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10c      	bne.n	8003526 <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 800350c:	4b4a      	ldr	r3, [pc, #296]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b52      	ldr	r3, [pc, #328]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003514:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	4b49      	ldr	r3, [pc, #292]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800351c:	0011      	movs	r1, r2
 800351e:	0018      	movs	r0, r3
 8003520:	f002 fb3e 	bl	8005ba0 <Set_Status_Bit>
 8003524:	e21a      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003526:	4b46      	ldr	r3, [pc, #280]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003528:	0018      	movs	r0, r3
 800352a:	f7fd fe56 	bl	80011da <Is_OMNI_On>
 800352e:	0003      	movs	r3, r0
 8003530:	2b01      	cmp	r3, #1
 8003532:	d000      	beq.n	8003536 <UART2_RX_transfer_complete_callback+0xd32>
 8003534:	e212      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003536:	4b40      	ldr	r3, [pc, #256]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b47      	ldr	r3, [pc, #284]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800353e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	005a      	lsls	r2, r3, #1
 8003544:	4b3e      	ldr	r3, [pc, #248]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003546:	0011      	movs	r1, r2
 8003548:	0018      	movs	r0, r3
 800354a:	f002 fb29 	bl	8005ba0 <Set_Status_Bit>
 800354e:	e205      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003550:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003552:	0018      	movs	r0, r3
 8003554:	f7fd fd7a 	bl	800104c <Is_Sysex_Start_Status_Byte>
 8003558:	0003      	movs	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d000      	beq.n	8003560 <UART2_RX_transfer_complete_callback+0xd5c>
 800355e:	e1fd      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003560:	4b35      	ldr	r3, [pc, #212]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003568:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003570:	2380      	movs	r3, #128	@ 0x80
 8003572:	005a      	lsls	r2, r3, #1
 8003574:	4b32      	ldr	r3, [pc, #200]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003576:	0011      	movs	r1, r2
 8003578:	0018      	movs	r0, r3
 800357a:	f002 fb11 	bl	8005ba0 <Set_Status_Bit>
 800357e:	e1ed      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003580:	4b36      	ldr	r3, [pc, #216]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d100      	bne.n	800358c <UART2_RX_transfer_complete_callback+0xd88>
 800358a:	e1e7      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f002 faef 	bl	8005b78 <Get_Status_Bit>
 800359a:	0003      	movs	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10d      	bne.n	80035bc <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 80035a0:	4b2e      	ldr	r3, [pc, #184]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80035a6:	4b25      	ldr	r3, [pc, #148]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7fd fdb0 	bl	800110e <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80035ae:	4a24      	ldr	r2, [pc, #144]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 80035b2:	0011      	movs	r1, r2
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7fd fe2a 	bl	800120e <Reset_and_Stop_MIDI_Software_Timer>
 80035ba:	e1cf      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 80035bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80035be:	0018      	movs	r0, r3
 80035c0:	f7fd fc4d 	bl	8000e5e <Is_Data_Byte>
 80035c4:	0003      	movs	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d000      	beq.n	80035cc <UART2_RX_transfer_complete_callback+0xdc8>
 80035ca:	e133      	b.n	8003834 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80035cc:	4b23      	ldr	r3, [pc, #140]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80035ce:	0018      	movs	r0, r3
 80035d0:	f7fd fc5e 	bl	8000e90 <Is_PC_Status_Byte>
 80035d4:	0003      	movs	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d144      	bne.n	8003664 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80035da:	4b18      	ldr	r3, [pc, #96]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fd fd66 	bl	80010ae <Is_Data_Buffer_Empty>
 80035e2:	0003      	movs	r3, r0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d000      	beq.n	80035ea <UART2_RX_transfer_complete_callback+0xde6>
 80035e8:	e1b8      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80035ea:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80035ec:	2104      	movs	r1, #4
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7fd fdab 	bl	800114a <Is_Program_Change_Data_Byte_In_Range>
 80035f4:	0003      	movs	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10f      	bne.n	800361a <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 80035fa:	f7fd fbdf 	bl	8000dbc <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80035fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <UART2_RX_transfer_complete_callback+0xe5c>)
 800360a:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800360c:	f7fc ff8a 	bl	8000524 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003612:	2108      	movs	r1, #8
 8003614:	0018      	movs	r0, r3
 8003616:	f002 fad5 	bl	8005bc4 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 800361a:	4b08      	ldr	r3, [pc, #32]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800361c:	0018      	movs	r0, r3
 800361e:	f7fd fd76 	bl	800110e <Clear_Data_Buffer>
							active_status_byte = 0;
 8003622:	4b0e      	ldr	r3, [pc, #56]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003628:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 800362c:	0011      	movs	r1, r2
 800362e:	0018      	movs	r0, r3
 8003630:	f7fd fded 	bl	800120e <Reset_and_Stop_MIDI_Software_Timer>
 8003634:	e192      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	20000554 	.word	0x20000554
 800363c:	20000548 	.word	0x20000548
 8003640:	20000cac 	.word	0x20000cac
 8003644:	20000cb4 	.word	0x20000cb4
 8003648:	20000545 	.word	0x20000545
 800364c:	20000547 	.word	0x20000547
 8003650:	20000549 	.word	0x20000549
 8003654:	20000020 	.word	0x20000020
 8003658:	20000cc4 	.word	0x20000cc4
 800365c:	20000546 	.word	0x20000546
 8003660:	20000538 	.word	0x20000538

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003664:	4bc4      	ldr	r3, [pc, #784]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003666:	0018      	movs	r0, r3
 8003668:	f7fd fc2e 	bl	8000ec8 <Is_CC_Status_Byte>
 800366c:	0003      	movs	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d000      	beq.n	8003674 <UART2_RX_transfer_complete_callback+0xe70>
 8003672:	e0d2      	b.n	800381a <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003674:	4bc1      	ldr	r3, [pc, #772]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003676:	0018      	movs	r0, r3
 8003678:	f7fd fd19 	bl	80010ae <Is_Data_Buffer_Empty>
 800367c:	0003      	movs	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003682:	4bbf      	ldr	r3, [pc, #764]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4bbc      	ldr	r3, [pc, #752]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800368a:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800368c:	4bbd      	ldr	r3, [pc, #756]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e163      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003694:	4bba      	ldr	r3, [pc, #744]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4bb8      	ldr	r3, [pc, #736]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800369c:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800369e:	4aba      	ldr	r2, [pc, #744]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80036a0:	4bb8      	ldr	r3, [pc, #736]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fd fdb2 	bl	800120e <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80036aa:	4bb7      	ldr	r3, [pc, #732]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80036ac:	2108      	movs	r1, #8
 80036ae:	0018      	movs	r0, r3
 80036b0:	f002 fa88 	bl	8005bc4 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80036b4:	4bb1      	ldr	r3, [pc, #708]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fd fc22 	bl	8000f00 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80036bc:	0003      	movs	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d14c      	bne.n	800375c <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 80036c2:	4bb2      	ldr	r3, [pc, #712]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4bab      	ldr	r3, [pc, #684]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fd fccd 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80036d2:	0003      	movs	r3, r0
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d139      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80036d8:	4aad      	ldr	r2, [pc, #692]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80036da:	4ba8      	ldr	r3, [pc, #672]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036dc:	0011      	movs	r1, r2
 80036de:	0018      	movs	r0, r3
 80036e0:	f7fd fc6d 	bl	8000fbe <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80036e4:	0003      	movs	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d130      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80036ea:	4ba4      	ldr	r3, [pc, #656]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b79      	cmp	r3, #121	@ 0x79
 80036f2:	d10b      	bne.n	800370c <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 80036f4:	4aa7      	ldr	r2, [pc, #668]	@ (8003994 <UART2_RX_transfer_complete_callback+0x1190>)
 80036f6:	4ba8      	ldr	r3, [pc, #672]	@ (8003998 <UART2_RX_transfer_complete_callback+0x1194>)
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7fd fda2 	bl	8001244 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003700:	4ba1      	ldr	r3, [pc, #644]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003702:	2108      	movs	r1, #8
 8003704:	0018      	movs	r0, r3
 8003706:	f002 fa5d 	bl	8005bc4 <Clear_Status_Bit>
 800370a:	e01f      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800370c:	4b9b      	ldr	r3, [pc, #620]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b7a      	cmp	r3, #122	@ 0x7a
 8003714:	d107      	bne.n	8003726 <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8003716:	f7fd fdef 	bl	80012f8 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800371a:	4b9b      	ldr	r3, [pc, #620]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800371c:	2108      	movs	r1, #8
 800371e:	0018      	movs	r0, r3
 8003720:	f002 fa50 	bl	8005bc4 <Clear_Status_Bit>
 8003724:	e012      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003726:	4b95      	ldr	r3, [pc, #596]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b7c      	cmp	r3, #124	@ 0x7c
 800372e:	d104      	bne.n	800373a <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003730:	4b95      	ldr	r3, [pc, #596]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003732:	0018      	movs	r0, r3
 8003734:	f7fd fe18 	bl	8001368 <Set_OMNI_Off>
 8003738:	e008      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 800373a:	4b90      	ldr	r3, [pc, #576]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800373c:	785b      	ldrb	r3, [r3, #1]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b7d      	cmp	r3, #125	@ 0x7d
 8003742:	d103      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8003744:	4b90      	ldr	r3, [pc, #576]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003746:	0018      	movs	r0, r3
 8003748:	f7fd fe1e 	bl	8001388 <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 800374c:	4b8a      	ldr	r3, [pc, #552]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003752:	4b8a      	ldr	r3, [pc, #552]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003754:	0018      	movs	r0, r3
 8003756:	f7fd fcda 	bl	800110e <Clear_Data_Buffer>
 800375a:	e0ff      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800375c:	4b87      	ldr	r3, [pc, #540]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800375e:	0018      	movs	r0, r3
 8003760:	f7fd fbfa 	bl	8000f58 <Is_Utilised_CC_First_Data_Byte>
 8003764:	0003      	movs	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d14f      	bne.n	800380a <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 800376a:	4b88      	ldr	r3, [pc, #544]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	4b81      	ldr	r3, [pc, #516]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003772:	0011      	movs	r1, r2
 8003774:	0018      	movs	r0, r3
 8003776:	f7fd fc79 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 800377a:	0003      	movs	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d006      	beq.n	800378e <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003780:	4b81      	ldr	r3, [pc, #516]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003782:	0018      	movs	r0, r3
 8003784:	f7fd fd29 	bl	80011da <Is_OMNI_On>
 8003788:	0003      	movs	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d135      	bne.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 800378e:	4b7b      	ldr	r3, [pc, #492]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b14      	cmp	r3, #20
 8003796:	d104      	bne.n	80037a2 <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003798:	4b7d      	ldr	r3, [pc, #500]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 800379a:	0018      	movs	r0, r3
 800379c:	f7fd fa8c 	bl	8000cb8 <Set_Waveshape_to_CC_Mode_and_Value>
 80037a0:	e02b      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80037a2:	4b76      	ldr	r3, [pc, #472]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b15      	cmp	r3, #21
 80037aa:	d109      	bne.n	80037c0 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037ac:	4b78      	ldr	r3, [pc, #480]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037ae:	0018      	movs	r0, r3
 80037b0:	f7fd fa9c 	bl	8000cec <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037b4:	4b74      	ldr	r3, [pc, #464]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80037b6:	2108      	movs	r1, #8
 80037b8:	0018      	movs	r0, r3
 80037ba:	f002 fa03 	bl	8005bc4 <Clear_Status_Bit>
 80037be:	e01c      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80037c0:	4b6e      	ldr	r3, [pc, #440]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b16      	cmp	r3, #22
 80037c8:	d104      	bne.n	80037d4 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037ca:	4b71      	ldr	r3, [pc, #452]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fd faa7 	bl	8000d20 <Set_Depth_to_CC_Mode_and_Value>
 80037d2:	e012      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80037d4:	4b69      	ldr	r3, [pc, #420]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b17      	cmp	r3, #23
 80037dc:	d104      	bne.n	80037e8 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037de:	4b6c      	ldr	r3, [pc, #432]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fd fab7 	bl	8000d54 <Set_Symmetry_to_CC_Mode_and_Value>
 80037e6:	e008      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80037e8:	4b64      	ldr	r3, [pc, #400]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b18      	cmp	r3, #24
 80037f0:	d103      	bne.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037f2:	4b67      	ldr	r3, [pc, #412]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fd fac7 	bl	8000d88 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80037fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003800:	4b5e      	ldr	r3, [pc, #376]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003802:	0018      	movs	r0, r3
 8003804:	f7fd fc83 	bl	800110e <Clear_Data_Buffer>
 8003808:	e0a8      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003810:	4b5a      	ldr	r3, [pc, #360]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003812:	0018      	movs	r0, r3
 8003814:	f7fd fc7b 	bl	800110e <Clear_Data_Buffer>
 8003818:	e0a0      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 800381a:	4b57      	ldr	r3, [pc, #348]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800381c:	0018      	movs	r0, r3
 800381e:	f7fd fc15 	bl	800104c <Is_Sysex_Start_Status_Byte>
 8003822:	0003      	movs	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d000      	beq.n	800382a <UART2_RX_transfer_complete_callback+0x1026>
 8003828:	e098      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800382a:	4b54      	ldr	r3, [pc, #336]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd fc3e 	bl	80010ae <Is_Data_Buffer_Empty>
 8003832:	e093      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003834:	4b51      	ldr	r3, [pc, #324]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fc69 	bl	800110e <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800383c:	4a52      	ldr	r2, [pc, #328]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800383e:	4b51      	ldr	r3, [pc, #324]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f7fd fce3 	bl	800120e <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003848:	4b4d      	ldr	r3, [pc, #308]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800384a:	0018      	movs	r0, r3
 800384c:	f7fd fb20 	bl	8000e90 <Is_PC_Status_Byte>
 8003850:	0003      	movs	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d130      	bne.n	80038b8 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8003856:	4b4a      	ldr	r3, [pc, #296]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b4f      	ldr	r3, [pc, #316]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 800385e:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003860:	4b4a      	ldr	r3, [pc, #296]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b46      	ldr	r3, [pc, #280]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f7fd fbfe 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003870:	0003      	movs	r3, r0
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10c      	bne.n	8003890 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8003876:	4b42      	ldr	r3, [pc, #264]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b3e      	ldr	r3, [pc, #248]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800387e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	005a      	lsls	r2, r3, #1
 8003884:	4b40      	ldr	r3, [pc, #256]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f002 f989 	bl	8005ba0 <Set_Status_Bit>
 800388e:	e065      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003890:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003892:	0018      	movs	r0, r3
 8003894:	f7fd fca1 	bl	80011da <Is_OMNI_On>
 8003898:	0003      	movs	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d15e      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800389e:	4b38      	ldr	r3, [pc, #224]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	4b34      	ldr	r3, [pc, #208]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80038a6:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	005a      	lsls	r2, r3, #1
 80038ac:	4b36      	ldr	r3, [pc, #216]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f002 f975 	bl	8005ba0 <Set_Status_Bit>
 80038b6:	e051      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80038b8:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7fd fb04 	bl	8000ec8 <Is_CC_Status_Byte>
 80038c0:	0003      	movs	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d130      	bne.n	8003928 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 80038c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b33      	ldr	r3, [pc, #204]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 80038ce:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80038d0:	4b2e      	ldr	r3, [pc, #184]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038d8:	0011      	movs	r1, r2
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd fbc6 	bl	800106c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80038e0:	0003      	movs	r3, r0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10c      	bne.n	8003900 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 80038e6:	4b26      	ldr	r3, [pc, #152]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80038ee:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	005a      	lsls	r2, r3, #1
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80038f6:	0011      	movs	r1, r2
 80038f8:	0018      	movs	r0, r3
 80038fa:	f002 f951 	bl	8005ba0 <Set_Status_Bit>
 80038fe:	e02d      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fd fc69 	bl	80011da <Is_OMNI_On>
 8003908:	0003      	movs	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d126      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800390e:	4b1c      	ldr	r3, [pc, #112]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003916:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	005a      	lsls	r2, r3, #1
 800391c:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f002 f93d 	bl	8005ba0 <Set_Status_Bit>
 8003926:	e019      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003928:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800392a:	0018      	movs	r0, r3
 800392c:	f7fd fb8e 	bl	800104c <Is_Sysex_Start_Status_Byte>
 8003930:	0003      	movs	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d112      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	4b0e      	ldr	r3, [pc, #56]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800393e:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003940:	4b16      	ldr	r3, [pc, #88]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	005a      	lsls	r2, r3, #1
 800394a:	4b0f      	ldr	r3, [pc, #60]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800394c:	0011      	movs	r1, r2
 800394e:	0018      	movs	r0, r3
 8003950:	f002 f926 	bl	8005ba0 <Set_Status_Bit>
 8003954:	e002      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	e000      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800395a:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 800395c:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003962:	4907      	ldr	r1, [pc, #28]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003964:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <UART2_RX_transfer_complete_callback+0x119c>)
 8003966:	2201      	movs	r2, #1
 8003968:	0018      	movs	r0, r3
 800396a:	f008 f97b 	bl	800bc64 <HAL_UART_Receive_DMA>
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b002      	add	sp, #8
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	20000546 	.word	0x20000546
 800397c:	20000548 	.word	0x20000548
 8003980:	20000554 	.word	0x20000554
 8003984:	20000cb4 	.word	0x20000cb4
 8003988:	20000cac 	.word	0x20000cac
 800398c:	20000545 	.word	0x20000545
 8003990:	20000549 	.word	0x20000549
 8003994:	20000020 	.word	0x20000020
 8003998:	20000cc4 	.word	0x20000cc4
 800399c:	20000547 	.word	0x20000547
 80039a0:	20000ac0 	.word	0x20000ac0

080039a4 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	0002      	movs	r2, r0
 80039ac:	1dbb      	adds	r3, r7, #6
 80039ae:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 80039b0:	1dbb      	adds	r3, r7, #6
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	2b80      	cmp	r3, #128	@ 0x80
 80039b6:	d117      	bne.n	80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80039b8:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d004      	beq.n	80039cc <HAL_GPIO_EXTI_Falling_Callback+0x28>
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	d10d      	bne.n	80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	0099      	lsls	r1, r3, #2
 80039d0:	23a0      	movs	r3, #160	@ 0xa0
 80039d2:	05db      	lsls	r3, r3, #23
 80039d4:	2201      	movs	r2, #1
 80039d6:	0018      	movs	r0, r3
 80039d8:	f004 faf1 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80039de:	2200      	movs	r2, #0
 80039e0:	2140      	movs	r1, #64	@ 0x40
 80039e2:	0018      	movs	r0, r3
 80039e4:	f004 faeb 	bl	8007fbe <HAL_GPIO_WritePin>
		}
	}
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000428 	.word	0x20000428
 80039f4:	50000800 	.word	0x50000800

080039f8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	0002      	movs	r2, r0
 8003a00:	1dbb      	adds	r3, r7, #6
 8003a02:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003a04:	1dbb      	adds	r3, r7, #6
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	2b80      	cmp	r3, #128	@ 0x80
 8003a0a:	d000      	beq.n	8003a0e <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003a0c:	e0dd      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003a0e:	4b71      	ldr	r3, [pc, #452]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d114      	bne.n	8003a42 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	23a0      	movs	r3, #160	@ 0xa0
 8003a1e:	05db      	lsls	r3, r3, #23
 8003a20:	2200      	movs	r2, #0
 8003a22:	0018      	movs	r0, r3
 8003a24:	f004 facb 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a28:	4b6b      	ldr	r3, [pc, #428]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2140      	movs	r1, #64	@ 0x40
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f004 fac5 	bl	8007fbe <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003a34:	4b67      	ldr	r3, [pc, #412]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a3a:	4b66      	ldr	r3, [pc, #408]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003a40:	e0c3      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003a42:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d114      	bne.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	0099      	lsls	r1, r3, #2
 8003a50:	23a0      	movs	r3, #160	@ 0xa0
 8003a52:	05db      	lsls	r3, r3, #23
 8003a54:	2200      	movs	r2, #0
 8003a56:	0018      	movs	r0, r3
 8003a58:	f004 fab1 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2140      	movs	r1, #64	@ 0x40
 8003a62:	0018      	movs	r0, r3
 8003a64:	f004 faab 	bl	8007fbe <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003a68:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a6e:	4b59      	ldr	r3, [pc, #356]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a70:	2207      	movs	r2, #7
 8003a72:	701a      	strb	r2, [r3, #0]
}
 8003a74:	e0a9      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003a76:	4b57      	ldr	r3, [pc, #348]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d114      	bne.n	8003aaa <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	0099      	lsls	r1, r3, #2
 8003a84:	23a0      	movs	r3, #160	@ 0xa0
 8003a86:	05db      	lsls	r3, r3, #23
 8003a88:	2200      	movs	r2, #0
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f004 fa97 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a90:	4b51      	ldr	r3, [pc, #324]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	2140      	movs	r1, #64	@ 0x40
 8003a96:	0018      	movs	r0, r3
 8003a98:	f004 fa91 	bl	8007fbe <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
}
 8003aa8:	e08f      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d12b      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003ab4:	4b49      	ldr	r3, [pc, #292]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d126      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003abe:	4b48      	ldr	r3, [pc, #288]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f002 f858 	bl	8005b78 <Get_Status_Bit>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d11e      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	0099      	lsls	r1, r3, #2
 8003ad2:	23a0      	movs	r3, #160	@ 0xa0
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f004 fa70 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003ade:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2140      	movs	r1, #64	@ 0x40
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f004 fa6a 	bl	8007fbe <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003aea:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aec:	2204      	movs	r2, #4
 8003aee:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003af0:	4b38      	ldr	r3, [pc, #224]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003af2:	2207      	movs	r2, #7
 8003af4:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003af6:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003af8:	2120      	movs	r1, #32
 8003afa:	0018      	movs	r0, r3
 8003afc:	f002 f862 	bl	8005bc4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b00:	4b37      	ldr	r3, [pc, #220]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b02:	2140      	movs	r1, #64	@ 0x40
 8003b04:	0018      	movs	r0, r3
 8003b06:	f002 f85d 	bl	8005bc4 <Clear_Status_Bit>
 8003b0a:	e05e      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b0c:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d12b      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d126      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003b20:	4b2f      	ldr	r3, [pc, #188]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b22:	2120      	movs	r1, #32
 8003b24:	0018      	movs	r0, r3
 8003b26:	f002 f827 	bl	8005b78 <Get_Status_Bit>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d11e      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	23a0      	movs	r3, #160	@ 0xa0
 8003b36:	05db      	lsls	r3, r3, #23
 8003b38:	2200      	movs	r2, #0
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f004 fa3f 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	2140      	movs	r1, #64	@ 0x40
 8003b46:	0018      	movs	r0, r3
 8003b48:	f004 fa39 	bl	8007fbe <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003b4c:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b4e:	2208      	movs	r2, #8
 8003b50:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b54:	2207      	movs	r2, #7
 8003b56:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f002 f831 	bl	8005bc4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b62:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b64:	2140      	movs	r1, #64	@ 0x40
 8003b66:	0018      	movs	r0, r3
 8003b68:	f002 f82c 	bl	8005bc4 <Clear_Status_Bit>
 8003b6c:	e02d      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	d114      	bne.n	8003ba2 <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	0099      	lsls	r1, r3, #2
 8003b7c:	23a0      	movs	r3, #160	@ 0xa0
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	2200      	movs	r2, #0
 8003b82:	0018      	movs	r0, r3
 8003b84:	f004 fa1b 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2140      	movs	r1, #64	@ 0x40
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f004 fa15 	bl	8007fbe <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b94:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b96:	2207      	movs	r2, #7
 8003b98:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b9c:	2206      	movs	r2, #6
 8003b9e:	701a      	strb	r2, [r3, #0]
}
 8003ba0:	e013      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d10e      	bne.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	0099      	lsls	r1, r3, #2
 8003bb0:	23a0      	movs	r3, #160	@ 0xa0
 8003bb2:	05db      	lsls	r3, r3, #23
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f004 fa01 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f004 f9fb 	bl	8007fbe <HAL_GPIO_WritePin>
}
 8003bc8:	e7ff      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	20000428 	.word	0x20000428
 8003bd8:	50000800 	.word	0x50000800
 8003bdc:	2000043c 	.word	0x2000043c
 8003be0:	20000cac 	.word	0x20000cac

08003be4 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TO TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003bec:	250f      	movs	r5, #15
 8003bee:	197c      	adds	r4, r7, r5
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	00da      	lsls	r2, r3, #3
 8003bf4:	23a0      	movs	r3, #160	@ 0xa0
 8003bf6:	05db      	lsls	r3, r3, #23
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f004 f9c2 	bl	8007f84 <HAL_GPIO_ReadPin>
 8003c00:	0003      	movs	r3, r0
 8003c02:	7023      	strb	r3, [r4, #0]

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003c04:	4bc7      	ldr	r3, [pc, #796]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d10a      	bne.n	8003c24 <LPTIM1_callback+0x40>
 8003c0e:	197b      	adds	r3, r7, r5
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <LPTIM1_callback+0x40>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c16:	4bc3      	ldr	r3, [pc, #780]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c18:	2205      	movs	r2, #5
 8003c1a:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003c1c:	4bc1      	ldr	r3, [pc, #772]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	705a      	strb	r2, [r3, #1]
 8003c22:	e070      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003c24:	4bbf      	ldr	r3, [pc, #764]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d10b      	bne.n	8003c46 <LPTIM1_callback+0x62>
 8003c2e:	230f      	movs	r3, #15
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <LPTIM1_callback+0x62>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c38:	4bba      	ldr	r3, [pc, #744]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 8003c3e:	4bb9      	ldr	r3, [pc, #740]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c40:	2202      	movs	r2, #2
 8003c42:	705a      	strb	r2, [r3, #1]
 8003c44:	e05f      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003c46:	4bb7      	ldr	r3, [pc, #732]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d10b      	bne.n	8003c68 <LPTIM1_callback+0x84>
 8003c50:	230f      	movs	r3, #15
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <LPTIM1_callback+0x84>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c5a:	4bb2      	ldr	r3, [pc, #712]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8003c60:	4bb0      	ldr	r3, [pc, #704]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c62:	2203      	movs	r2, #3
 8003c64:	705a      	strb	r2, [r3, #1]
 8003c66:	e04e      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003c68:	4bae      	ldr	r3, [pc, #696]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d122      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c72:	230f      	movs	r3, #15
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11d      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c7c:	4baa      	ldr	r3, [pc, #680]	@ (8003f28 <LPTIM1_callback+0x344>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c86:	4ba9      	ldr	r3, [pc, #676]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003c88:	2120      	movs	r1, #32
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f001 ff74 	bl	8005b78 <Get_Status_Bit>
 8003c90:	0003      	movs	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d110      	bne.n	8003cb8 <LPTIM1_callback+0xd4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c96:	4ba3      	ldr	r3, [pc, #652]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c98:	2205      	movs	r2, #5
 8003c9a:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003c9e:	2206      	movs	r2, #6
 8003ca0:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003ca2:	4ba2      	ldr	r3, [pc, #648]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f001 ff8c 	bl	8005bc4 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cac:	4b9f      	ldr	r3, [pc, #636]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003cae:	2140      	movs	r1, #64	@ 0x40
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f001 ff87 	bl	8005bc4 <Clear_Status_Bit>
 8003cb6:	e026      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003cb8:	4b9a      	ldr	r3, [pc, #616]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d121      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11c      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003ccc:	4b96      	ldr	r3, [pc, #600]	@ (8003f28 <LPTIM1_callback+0x344>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d117      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003cd6:	4b95      	ldr	r3, [pc, #596]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003cd8:	2120      	movs	r1, #32
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f001 ff4c 	bl	8005b78 <Get_Status_Bit>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10f      	bne.n	8003d06 <LPTIM1_callback+0x122>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003ce6:	4b8f      	ldr	r3, [pc, #572]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003ce8:	2205      	movs	r2, #5
 8003cea:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003cec:	4b8d      	ldr	r3, [pc, #564]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003cee:	2208      	movs	r2, #8
 8003cf0:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003cf2:	4b8e      	ldr	r3, [pc, #568]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003cf4:	2120      	movs	r1, #32
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f001 ff64 	bl	8005bc4 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cfc:	4b8b      	ldr	r3, [pc, #556]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003cfe:	2140      	movs	r1, #64	@ 0x40
 8003d00:	0018      	movs	r0, r3
 8003d02:	f001 ff5f 	bl	8005bc4 <Clear_Status_Bit>
	}

	//CHECK TAP TEMPO STATE
	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003d06:	4b87      	ldr	r3, [pc, #540]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d004      	beq.n	8003d1a <LPTIM1_callback+0x136>
 8003d10:	4b84      	ldr	r3, [pc, #528]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d12a      	bne.n	8003d70 <LPTIM1_callback+0x18c>

		Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003d1a:	4b85      	ldr	r3, [pc, #532]	@ (8003f30 <LPTIM1_callback+0x34c>)
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7fd fc73 	bl	8001608 <Check_Tap_Tempo_Switch_State>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003d22:	4b83      	ldr	r3, [pc, #524]	@ (8003f30 <LPTIM1_callback+0x34c>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10e      	bne.n	8003d4a <LPTIM1_callback+0x166>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	0099      	lsls	r1, r3, #2
 8003d30:	23a0      	movs	r3, #160	@ 0xa0
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	2200      	movs	r2, #0
 8003d36:	0018      	movs	r0, r3
 8003d38:	f004 f941 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003d3c:	4b7d      	ldr	r3, [pc, #500]	@ (8003f34 <LPTIM1_callback+0x350>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2140      	movs	r1, #64	@ 0x40
 8003d42:	0018      	movs	r0, r3
 8003d44:	f004 f93b 	bl	8007fbe <HAL_GPIO_WritePin>
 8003d48:	e012      	b.n	8003d70 <LPTIM1_callback+0x18c>

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003d4a:	4b79      	ldr	r3, [pc, #484]	@ (8003f30 <LPTIM1_callback+0x34c>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <LPTIM1_callback+0x18c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	23a0      	movs	r3, #160	@ 0xa0
 8003d5a:	05db      	lsls	r3, r3, #23
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f004 f92d 	bl	8007fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003d64:	4b73      	ldr	r3, [pc, #460]	@ (8003f34 <LPTIM1_callback+0x350>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	2140      	movs	r1, #64	@ 0x40
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f004 f927 	bl	8007fbe <HAL_GPIO_WritePin>
	}

	//SET PREVIOUS STATE TO CURRENT STATE
	//tap_tempo_switch_states.tap_tempo_switch_prev_state = tap_tempo_switch_states.tap_tempo_switch_state;

	if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	011a      	lsls	r2, r3, #4
 8003d74:	4b6d      	ldr	r3, [pc, #436]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003d76:	0011      	movs	r1, r2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f001 fefd 	bl	8005b78 <Get_Status_Bit>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d000      	beq.n	8003d86 <LPTIM1_callback+0x1a2>
 8003d84:	e0c0      	b.n	8003f08 <LPTIM1_callback+0x324>

		Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	011a      	lsls	r2, r3, #4
 8003d8a:	4b68      	ldr	r3, [pc, #416]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f001 ff18 	bl	8005bc4 <Clear_Status_Bit>

		pots_counter = 0;
 8003d94:	4b68      	ldr	r3, [pc, #416]	@ (8003f38 <LPTIM1_callback+0x354>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]

		//PERFORM SPEED POT CHECKING
		if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003d9a:	4b62      	ldr	r3, [pc, #392]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d004      	beq.n	8003dae <LPTIM1_callback+0x1ca>
 8003da4:	4b5f      	ldr	r3, [pc, #380]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d105      	bne.n	8003dba <LPTIM1_callback+0x1d6>

			Pot_Check(ADCResultsDMA, SPEED_POT);
 8003dae:	4b63      	ldr	r3, [pc, #396]	@ (8003f3c <LPTIM1_callback+0x358>)
 8003db0:	2101      	movs	r1, #1
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fd fb08 	bl	80013c8 <Pot_Check>
 8003db8:	e069      	b.n	8003e8e <LPTIM1_callback+0x2aa>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003dba:	4b5a      	ldr	r3, [pc, #360]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d117      	bne.n	8003df4 <LPTIM1_callback+0x210>
 8003dc4:	4b58      	ldr	r3, [pc, #352]	@ (8003f28 <LPTIM1_callback+0x344>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d112      	bne.n	8003df4 <LPTIM1_callback+0x210>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003dce:	4b57      	ldr	r3, [pc, #348]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003dd0:	2140      	movs	r1, #64	@ 0x40
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f001 fee4 	bl	8005ba0 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003dd8:	4b54      	ldr	r3, [pc, #336]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003dda:	2120      	movs	r1, #32
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f001 fecb 	bl	8005b78 <Get_Status_Bit>
 8003de2:	0003      	movs	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d152      	bne.n	8003e8e <LPTIM1_callback+0x2aa>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003de8:	4b54      	ldr	r3, [pc, #336]	@ (8003f3c <LPTIM1_callback+0x358>)
 8003dea:	2101      	movs	r1, #1
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7fd faeb 	bl	80013c8 <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003df2:	e04c      	b.n	8003e8e <LPTIM1_callback+0x2aa>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003df4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d12b      	bne.n	8003e56 <LPTIM1_callback+0x272>
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003f28 <LPTIM1_callback+0x344>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d126      	bne.n	8003e56 <LPTIM1_callback+0x272>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e08:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003e0a:	2140      	movs	r1, #64	@ 0x40
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f001 fec7 	bl	8005ba0 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e12:	4b46      	ldr	r3, [pc, #280]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003e14:	2120      	movs	r1, #32
 8003e16:	0018      	movs	r0, r3
 8003e18:	f001 feae 	bl	8005b78 <Get_Status_Bit>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d135      	bne.n	8003e8e <LPTIM1_callback+0x2aa>

				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	0099      	lsls	r1, r3, #2
 8003e26:	23a0      	movs	r3, #160	@ 0xa0
 8003e28:	05db      	lsls	r3, r3, #23
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f004 f8c6 	bl	8007fbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003e32:	4b40      	ldr	r3, [pc, #256]	@ (8003f34 <LPTIM1_callback+0x350>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	2140      	movs	r1, #64	@ 0x40
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f004 f8c0 	bl	8007fbe <HAL_GPIO_WritePin>

				MIDI_CLK_fsm = NOT_COMPILING;
 8003e3e:	4b40      	ldr	r3, [pc, #256]	@ (8003f40 <LPTIM1_callback+0x35c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
				MIDI_CLK_tag = 0;
 8003e44:	4b3f      	ldr	r3, [pc, #252]	@ (8003f44 <LPTIM1_callback+0x360>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f3c <LPTIM1_callback+0x358>)
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7fd faba 	bl	80013c8 <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e54:	e01b      	b.n	8003e8e <LPTIM1_callback+0x2aa>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e56:	4b33      	ldr	r3, [pc, #204]	@ (8003f24 <LPTIM1_callback+0x340>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d116      	bne.n	8003e8e <LPTIM1_callback+0x2aa>
 8003e60:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <LPTIM1_callback+0x344>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d111      	bne.n	8003e8e <LPTIM1_callback+0x2aa>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e6a:	4b30      	ldr	r3, [pc, #192]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003e6c:	2140      	movs	r1, #64	@ 0x40
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f001 fe96 	bl	8005ba0 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e74:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003e76:	2120      	movs	r1, #32
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f001 fe7d 	bl	8005b78 <Get_Status_Bit>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d104      	bne.n	8003e8e <LPTIM1_callback+0x2aa>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e84:	4b2d      	ldr	r3, [pc, #180]	@ (8003f3c <LPTIM1_callback+0x358>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7fd fa9d 	bl	80013c8 <Pot_Check>
			}
		}

		if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f48 <LPTIM1_callback+0x364>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d004      	beq.n	8003ea2 <LPTIM1_callback+0x2be>
 8003e98:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <LPTIM1_callback+0x364>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d104      	bne.n	8003eac <LPTIM1_callback+0x2c8>
			Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003ea2:	4b26      	ldr	r3, [pc, #152]	@ (8003f3c <LPTIM1_callback+0x358>)
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7fd fa8e 	bl	80013c8 <Pot_Check>
		}
		if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003eac:	4b27      	ldr	r3, [pc, #156]	@ (8003f4c <LPTIM1_callback+0x368>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d004      	beq.n	8003ec0 <LPTIM1_callback+0x2dc>
 8003eb6:	4b25      	ldr	r3, [pc, #148]	@ (8003f4c <LPTIM1_callback+0x368>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d104      	bne.n	8003eca <LPTIM1_callback+0x2e6>
			Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <LPTIM1_callback+0x358>)
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7fd fa7f 	bl	80013c8 <Pot_Check>
		}
		if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003eca:	4b21      	ldr	r3, [pc, #132]	@ (8003f50 <LPTIM1_callback+0x36c>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d004      	beq.n	8003ede <LPTIM1_callback+0x2fa>
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f50 <LPTIM1_callback+0x36c>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d104      	bne.n	8003ee8 <LPTIM1_callback+0x304>
			Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003ede:	4b17      	ldr	r3, [pc, #92]	@ (8003f3c <LPTIM1_callback+0x358>)
 8003ee0:	2103      	movs	r1, #3
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7fd fa70 	bl	80013c8 <Pot_Check>
		}
		if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <LPTIM1_callback+0x370>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d004      	beq.n	8003efc <LPTIM1_callback+0x318>
 8003ef2:	4b18      	ldr	r3, [pc, #96]	@ (8003f54 <LPTIM1_callback+0x370>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d134      	bne.n	8003f66 <LPTIM1_callback+0x382>
			Pot_Check(ADCResultsDMA, PHASE_POT);
 8003efc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <LPTIM1_callback+0x358>)
 8003efe:	2104      	movs	r1, #4
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fd fa61 	bl	80013c8 <Pot_Check>
 8003f06:	e02e      	b.n	8003f66 <LPTIM1_callback+0x382>
		}

	}
	else{
		if(pots_counter == POT_COUNTER_COUNT){
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <LPTIM1_callback+0x354>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b40      	cmp	r3, #64	@ 0x40
 8003f10:	d122      	bne.n	8003f58 <LPTIM1_callback+0x374>

			Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003f12:	2380      	movs	r3, #128	@ 0x80
 8003f14:	011a      	lsls	r2, r3, #4
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <LPTIM1_callback+0x348>)
 8003f18:	0011      	movs	r1, r2
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f001 fe40 	bl	8005ba0 <Set_Status_Bit>
 8003f20:	e021      	b.n	8003f66 <LPTIM1_callback+0x382>
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	20000428 	.word	0x20000428
 8003f28:	2000043c 	.word	0x2000043c
 8003f2c:	20000cac 	.word	0x20000cac
 8003f30:	20000ca0 	.word	0x20000ca0
 8003f34:	50000800 	.word	0x50000800
 8003f38:	2000055a 	.word	0x2000055a
 8003f3c:	20000cb8 	.word	0x20000cb8
 8003f40:	20000d54 	.word	0x20000d54
 8003f44:	20000caa 	.word	0x20000caa
 8003f48:	20000430 	.word	0x20000430
 8003f4c:	2000042c 	.word	0x2000042c
 8003f50:	20000434 	.word	0x20000434
 8003f54:	20000438 	.word	0x20000438
		}
		else{

			pots_counter++;
 8003f58:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <LPTIM1_callback+0x398>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <LPTIM1_callback+0x398>)
 8003f64:	701a      	strb	r2, [r3, #0]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8003f66:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <LPTIM1_callback+0x39c>)
 8003f68:	22fa      	movs	r2, #250	@ 0xfa
 8003f6a:	21fa      	movs	r1, #250	@ 0xfa
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f004 f91d 	bl	80081ac <HAL_LPTIM_SetOnce_Start_IT>

}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	2000055a 	.word	0x2000055a
 8003f80:	20000c44 	.word	0x20000c44

08003f84 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]


}
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b002      	add	sp, #8
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]


}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	0002      	movs	r2, r0
 8003fac:	6039      	str	r1, [r7, #0]
 8003fae:	1dbb      	adds	r3, r7, #6
 8003fb0:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003fb2:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <Input_Capture_Processing+0xe0>)
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f001 fe04 	bl	8005bc4 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8003fbc:	1dbb      	adds	r3, r7, #6
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f001 fd8d 	bl	8005ae2 <isPrime>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d106      	bne.n	8003fdc <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8003fce:	1dbb      	adds	r3, r7, #6
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	1dbb      	adds	r3, r7, #6
 8003fda:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8003fdc:	1dbb      	adds	r3, r7, #6
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	019b      	lsls	r3, r3, #6
 8003fe4:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003fe6:	2317      	movs	r3, #23
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	e02d      	b.n	800404c <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8003ff0:	2317      	movs	r3, #23
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2280      	movs	r2, #128	@ 0x80
 8003ffa:	0052      	lsls	r2, r2, #1
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	1dbb      	adds	r3, r7, #6
 8004002:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8004004:	1dbb      	adds	r3, r7, #6
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	001a      	movs	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	0011      	movs	r1, r2
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f8ff 	bl	8000214 <__aeabi_uidivmod>
 8004016:	000b      	movs	r3, r1
 8004018:	001a      	movs	r2, r3
 800401a:	210e      	movs	r1, #14
 800401c:	187b      	adds	r3, r7, r1
 800401e:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8004020:	187b      	adds	r3, r7, r1
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8004028:	1dbb      	adds	r3, r7, #6
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	0019      	movs	r1, r3
 8004030:	6938      	ldr	r0, [r7, #16]
 8004032:	f7fc f869 	bl	8000108 <__udivsi3>
 8004036:	0003      	movs	r3, r0
 8004038:	b29a      	uxth	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	835a      	strh	r2, [r3, #26]
			break;
 800403e:	e00a      	b.n	8004056 <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004040:	2117      	movs	r1, #23
 8004042:	187b      	adds	r3, r7, r1
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	187b      	adds	r3, r7, r1
 8004048:	3201      	adds	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	2317      	movs	r3, #23
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b80      	cmp	r3, #128	@ 0x80
 8004054:	d9cc      	bls.n	8003ff0 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8004056:	1dbb      	adds	r3, r7, #6
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	2280      	movs	r2, #128	@ 0x80
 800405e:	0052      	lsls	r2, r2, #1
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	b29a      	uxth	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2101      	movs	r1, #1
 800406c:	0018      	movs	r0, r3
 800406e:	f000 f9cd 	bl	800440c <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	0018      	movs	r0, r3
 8004076:	f001 f8f1 	bl	800525c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 800407a:	2301      	movs	r3, #1
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b006      	add	sp, #24
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000cac 	.word	0x20000cac

08004088 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 800408e:	1dfc      	adds	r4, r7, #7
 8004090:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <Start_Input_Capture_Timer+0x30>)
 8004092:	2100      	movs	r1, #0
 8004094:	0018      	movs	r0, r3
 8004096:	f000 f811 	bl	80040bc <Start_IC_TIM>
 800409a:	0003      	movs	r3, r0
 800409c:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800409e:	1dfb      	adds	r3, r7, #7
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 80040a6:	f7fe f8f5 	bl	8002294 <Error_Handler>
	}

	return ok;
 80040aa:	1dfb      	adds	r3, r7, #7
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b003      	add	sp, #12
 80040b4:	bd90      	pop	{r4, r7, pc}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	2000088c 	.word	0x2000088c

080040bc <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 80040bc:	b5b0      	push	{r4, r5, r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 80040c6:	250f      	movs	r5, #15
 80040c8:	197c      	adds	r4, r7, r5
 80040ca:	4b10      	ldr	r3, [pc, #64]	@ (800410c <Start_IC_TIM+0x50>)
 80040cc:	0018      	movs	r0, r3
 80040ce:	f005 fb07 	bl	80096e0 <HAL_TIM_Base_Start_IT>
 80040d2:	0003      	movs	r3, r0
 80040d4:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <Start_IC_TIM+0x50>)
 80040da:	0011      	movs	r1, r2
 80040dc:	0018      	movs	r0, r3
 80040de:	f005 ff6d 	bl	8009fbc <HAL_TIM_IC_Start_IT>
 80040e2:	0003      	movs	r3, r0
 80040e4:	0019      	movs	r1, r3
 80040e6:	197b      	adds	r3, r7, r5
 80040e8:	197a      	adds	r2, r7, r5
 80040ea:	7812      	ldrb	r2, [r2, #0]
 80040ec:	400a      	ands	r2, r1
 80040ee:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 80040f0:	197b      	adds	r3, r7, r5
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <Start_IC_TIM+0x40>

		Error_Handler();
 80040f8:	f7fe f8cc 	bl	8002294 <Error_Handler>
	}

	return ok_AND;
 80040fc:	230f      	movs	r3, #15
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	781b      	ldrb	r3, [r3, #0]
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b004      	add	sp, #16
 8004108:	bdb0      	pop	{r4, r5, r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	2000088c 	.word	0x2000088c

08004110 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	0010      	movs	r0, r2
 8004120:	0019      	movs	r1, r3
 8004122:	2324      	movs	r3, #36	@ 0x24
 8004124:	001a      	movs	r2, r3
 8004126:	f009 f8eb 	bl	800d300 <memcpy>

	return 1;
 800412a:	2301      	movs	r3, #1
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <Start_Measurement_Reelapse_Timer+0x34>)
 800413a:	2100      	movs	r1, #0
 800413c:	0018      	movs	r0, r3
 800413e:	f001 fcb4 	bl	8005aaa <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004142:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <Start_Measurement_Reelapse_Timer+0x34>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <Start_Measurement_Reelapse_Timer+0x38>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29a      	uxth	r2, r3
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <Start_Measurement_Reelapse_Timer+0x34>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004156:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <Start_Measurement_Reelapse_Timer+0x34>)
 8004158:	2100      	movs	r1, #0
 800415a:	0018      	movs	r0, r3
 800415c:	f001 fc89 	bl	8005a72 <Start_OC_TIM>

	return 1;
 8004160:	2301      	movs	r3, #1
}
 8004162:	0018      	movs	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000948 	.word	0x20000948
 800416c:	20000ca8 	.word	0x20000ca8

08004170 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <Begin_Input_Capture_Measurement+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2200      	movs	r2, #0
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 800417c:	2301      	movs	r3, #1
}
 800417e:	0018      	movs	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	2000088c 	.word	0x2000088c

08004188 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 800418c:	f7fe f888 	bl	80022a0 <System_Init>

	//STARTUP
	Startup();
 8004190:	f000 fb32 	bl	80047f8 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004194:	4b39      	ldr	r3, [pc, #228]	@ (800427c <main+0xf4>)
 8004196:	2104      	movs	r1, #4
 8004198:	0018      	movs	r0, r3
 800419a:	f001 fced 	bl	8005b78 <Get_Status_Bit>
 800419e:	0003      	movs	r3, r0
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 80041a4:	4b36      	ldr	r3, [pc, #216]	@ (8004280 <main+0xf8>)
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4a36      	ldr	r2, [pc, #216]	@ (8004284 <main+0xfc>)
 80041ac:	0011      	movs	r1, r2
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff fef8 	bl	8003fa4 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 80041b4:	4b31      	ldr	r3, [pc, #196]	@ (800427c <main+0xf4>)
 80041b6:	2140      	movs	r1, #64	@ 0x40
 80041b8:	0018      	movs	r0, r3
 80041ba:	f001 fcdd 	bl	8005b78 <Get_Status_Bit>
 80041be:	0003      	movs	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d12b      	bne.n	800421c <main+0x94>

			if(idle_counter < IDLE_COUNT){
 80041c4:	4b30      	ldr	r3, [pc, #192]	@ (8004288 <main+0x100>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	23fa      	movs	r3, #250	@ 0xfa
 80041ca:	01db      	lsls	r3, r3, #7
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d218      	bcs.n	8004202 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 80041d0:	4b2e      	ldr	r3, [pc, #184]	@ (800428c <main+0x104>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80041da:	4b28      	ldr	r3, [pc, #160]	@ (800427c <main+0xf4>)
 80041dc:	2140      	movs	r1, #64	@ 0x40
 80041de:	0018      	movs	r0, r3
 80041e0:	f001 fcf0 	bl	8005bc4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80041e4:	4b25      	ldr	r3, [pc, #148]	@ (800427c <main+0xf4>)
 80041e6:	2120      	movs	r1, #32
 80041e8:	0018      	movs	r0, r3
 80041ea:	f001 fceb 	bl	8005bc4 <Clear_Status_Bit>
					idle_counter = 0;
 80041ee:	4b26      	ldr	r3, [pc, #152]	@ (8004288 <main+0x100>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e012      	b.n	800421c <main+0x94>
				}
				else{

					idle_counter++;
 80041f6:	4b24      	ldr	r3, [pc, #144]	@ (8004288 <main+0x100>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	4b22      	ldr	r3, [pc, #136]	@ (8004288 <main+0x100>)
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e00c      	b.n	800421c <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004202:	4b1e      	ldr	r3, [pc, #120]	@ (800427c <main+0xf4>)
 8004204:	2140      	movs	r1, #64	@ 0x40
 8004206:	0018      	movs	r0, r3
 8004208:	f001 fcdc 	bl	8005bc4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800420c:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <main+0xf4>)
 800420e:	2120      	movs	r1, #32
 8004210:	0018      	movs	r0, r3
 8004212:	f001 fcc5 	bl	8005ba0 <Set_Status_Bit>
				idle_counter = 0;
 8004216:	4b1c      	ldr	r3, [pc, #112]	@ (8004288 <main+0x100>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 800421c:	2380      	movs	r3, #128	@ 0x80
 800421e:	005a      	lsls	r2, r3, #1
 8004220:	4b16      	ldr	r3, [pc, #88]	@ (800427c <main+0xf4>)
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f001 fca7 	bl	8005b78 <Get_Status_Bit>
 800422a:	0003      	movs	r3, r0
 800422c:	2b01      	cmp	r3, #1
 800422e:	d1b1      	bne.n	8004194 <main+0xc>

			if(midi_counter < MIDI_COUNT){
 8004230:	4b17      	ldr	r3, [pc, #92]	@ (8004290 <main+0x108>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	23fa      	movs	r3, #250	@ 0xfa
 8004236:	01db      	lsls	r3, r3, #7
 8004238:	429a      	cmp	r2, r3
 800423a:	d205      	bcs.n	8004248 <main+0xc0>

				midi_counter++;
 800423c:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <main+0x108>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <main+0x108>)
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e7a5      	b.n	8004194 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8004248:	2380      	movs	r3, #128	@ 0x80
 800424a:	005a      	lsls	r2, r3, #1
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <main+0xf4>)
 800424e:	0011      	movs	r1, r2
 8004250:	0018      	movs	r0, r3
 8004252:	f001 fcb7 	bl	8005bc4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8004256:	2380      	movs	r3, #128	@ 0x80
 8004258:	009a      	lsls	r2, r3, #2
 800425a:	4b08      	ldr	r3, [pc, #32]	@ (800427c <main+0xf4>)
 800425c:	0011      	movs	r1, r2
 800425e:	0018      	movs	r0, r3
 8004260:	f001 fc9e 	bl	8005ba0 <Set_Status_Bit>
				active_status_byte = 0;
 8004264:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <main+0x10c>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <main+0x110>)
 800426c:	0018      	movs	r0, r3
 800426e:	f7fc ff4e 	bl	800110e <Clear_Data_Buffer>
				midi_counter = 0;
 8004272:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <main+0x108>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004278:	e78c      	b.n	8004194 <main+0xc>
 800427a:	46c0      	nop			@ (mov r8, r8)
 800427c:	20000cac 	.word	0x20000cac
 8004280:	20000ca8 	.word	0x20000ca8
 8004284:	20000d0c 	.word	0x20000d0c
 8004288:	20000cb0 	.word	0x20000cb0
 800428c:	2000043c 	.word	0x2000043c
 8004290:	20000cb4 	.word	0x20000cb4
 8004294:	20000546 	.word	0x20000546
 8004298:	20000548 	.word	0x20000548

0800429c <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 800429c:	b590      	push	{r4, r7, lr}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 80042a8:	2417      	movs	r4, #23
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	0018      	movs	r0, r3
 80042b4:	f005 f9c8 	bl	8009648 <HAL_TIM_Base_Start>
 80042b8:	0003      	movs	r3, r0
 80042ba:	0019      	movs	r1, r3
 80042bc:	193b      	adds	r3, r7, r4
 80042be:	193a      	adds	r2, r7, r4
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f005 fd29 	bl	8009d24 <HAL_TIM_PWM_Start>
 80042d2:	0003      	movs	r3, r0
 80042d4:	0019      	movs	r1, r3
 80042d6:	193b      	adds	r3, r7, r4
 80042d8:	193a      	adds	r2, r7, r4
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	0011      	movs	r1, r2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f005 fd1c 	bl	8009d24 <HAL_TIM_PWM_Start>
 80042ec:	0003      	movs	r3, r0
 80042ee:	0019      	movs	r1, r3
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	193a      	adds	r2, r7, r4
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 80042fa:	193b      	adds	r3, r7, r4
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 8004302:	f7fd ffc7 	bl	8002294 <Error_Handler>
	}

	return ok_OR;
 8004306:	2317      	movs	r3, #23
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	781b      	ldrb	r3, [r3, #0]
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b007      	add	sp, #28
 8004312:	bd90      	pop	{r4, r7, pc}

08004314 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 800431a:	1dfc      	adds	r4, r7, #7
 800431c:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <Start_Freq_Gen_Timer+0x30>)
 800431e:	2100      	movs	r1, #0
 8004320:	0018      	movs	r0, r3
 8004322:	f001 fba6 	bl	8005a72 <Start_OC_TIM>
 8004326:	0003      	movs	r3, r0
 8004328:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004332:	f7fd ffaf 	bl	8002294 <Error_Handler>
	}

	return ok;
 8004336:	1dfb      	adds	r3, r7, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b003      	add	sp, #12
 8004340:	bd90      	pop	{r4, r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	200007d0 	.word	0x200007d0

08004348 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004354:	210b      	movs	r1, #11
 8004356:	187b      	adds	r3, r7, r1
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	891b      	ldrh	r3, [r3, #8]
 8004360:	b29b      	uxth	r3, r3
 8004362:	001a      	movs	r2, r3
 8004364:	0013      	movs	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	189b      	adds	r3, r3, r2
 800436a:	019b      	lsls	r3, r3, #6
 800436c:	189b      	adds	r3, r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	189b      	adds	r3, r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	0a9b      	lsrs	r3, r3, #10
 8004378:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	09da      	lsrs	r2, r3, #7
 800437e:	187b      	adds	r3, r7, r1
 8004380:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	b29a      	uxth	r2, r3
 8004386:	187b      	adds	r3, r7, r1
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	01db      	lsls	r3, r3, #7
 800438e:	b29b      	uxth	r3, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8004398:	187b      	adds	r3, r7, r1
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2280      	movs	r2, #128	@ 0x80
 800439e:	00d2      	lsls	r2, r2, #3
 80043a0:	411a      	asrs	r2, r3
 80043a2:	0013      	movs	r3, r2
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	835a      	strh	r2, [r3, #26]

    return 1;
 80043aa:	2301      	movs	r3, #1
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b004      	add	sp, #16
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8b1b      	ldrh	r3, [r3, #24]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <Set_Oscillator_Values+0x50>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8b1b      	ldrh	r3, [r3, #24]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	001a      	movs	r2, r3
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <Set_Oscillator_Values+0x50>)
 80043d2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8bdb      	ldrh	r3, [r3, #30]
 80043d8:	b29a      	uxth	r2, r3
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <Set_Oscillator_Values+0x50>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	885b      	ldrh	r3, [r3, #2]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <Set_Oscillator_Values+0x54>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	889b      	ldrh	r3, [r3, #4]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <Set_Oscillator_Values+0x54>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 80043f8:	2301      	movs	r3, #1
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b002      	add	sp, #8
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	200007d0 	.word	0x200007d0
 8004408:	20000a04 	.word	0x20000a04

0800440c <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	000a      	movs	r2, r1
 8004416:	1cfb      	adds	r3, r7, #3
 8004418:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 800441a:	1cfb      	adds	r3, r7, #3
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d144      	bne.n	80044ac <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	89db      	ldrh	r3, [r3, #14]
 8004426:	b29b      	uxth	r3, r3
 8004428:	3301      	adds	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	89db      	ldrh	r3, [r3, #14]
 8004434:	b29a      	uxth	r2, r3
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	429a      	cmp	r2, r3
 800443c:	d102      	bne.n	8004444 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	89db      	ldrh	r3, [r3, #14]
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	741a      	strb	r2, [r3, #16]
 800445a:	e05a      	b.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	89db      	ldrh	r3, [r3, #14]
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b80      	cmp	r3, #128	@ 0x80
 8004464:	d106      	bne.n	8004474 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	741a      	strb	r2, [r3, #16]
 8004472:	e04e      	b.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	89db      	ldrh	r3, [r3, #14]
 8004478:	b29a      	uxth	r2, r3
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	429a      	cmp	r2, r3
 8004480:	d106      	bne.n	8004490 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	741a      	strb	r2, [r3, #16]
 800448e:	e040      	b.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	89db      	ldrh	r3, [r3, #14]
 8004494:	b29a      	uxth	r2, r3
 8004496:	23c0      	movs	r3, #192	@ 0xc0
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	429a      	cmp	r2, r3
 800449c:	d139      	bne.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	741a      	strb	r2, [r3, #16]
 80044aa:	e032      	b.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 80044ac:	1cfb      	adds	r3, r7, #3
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d11f      	bne.n	80044f4 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	799b      	ldrb	r3, [r3, #6]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d004      	beq.n	80044c8 <Calculate_Next_Main_Oscillator_Values+0xbc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	799b      	ldrb	r3, [r3, #6]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	22a7      	movs	r2, #167	@ 0xa7
 80044cc:	0052      	lsls	r2, r2, #1
 80044ce:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	741a      	strb	r2, [r3, #16]
 80044dc:	e019      	b.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	0052      	lsls	r2, r2, #1
 80044e4:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	741a      	strb	r2, [r3, #16]
 80044f2:	e00e      	b.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 80044f4:	1cfb      	adds	r3, r7, #3
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d10a      	bne.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	89db      	ldrh	r3, [r3, #14]
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d105      	bne.n	8004512 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	799b      	ldrb	r3, [r3, #6]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	89db      	ldrh	r3, [r3, #14]
 8004520:	b29b      	uxth	r3, r3
 8004522:	001a      	movs	r2, r3
 8004524:	4b31      	ldr	r3, [pc, #196]	@ (80045ec <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8004526:	0052      	lsls	r2, r2, #1
 8004528:	5ad2      	ldrh	r2, [r2, r3]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	e029      	b.n	8004584 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	799b      	ldrb	r3, [r3, #6]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d109      	bne.n	800454e <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	89db      	ldrh	r3, [r3, #14]
 800453e:	b29b      	uxth	r3, r3
 8004540:	001a      	movs	r2, r3
 8004542:	4b2b      	ldr	r3, [pc, #172]	@ (80045f0 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004544:	0052      	lsls	r2, r2, #1
 8004546:	5ad2      	ldrh	r2, [r2, r3]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e01a      	b.n	8004584 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	799b      	ldrb	r3, [r3, #6]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d108      	bne.n	800456a <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	89db      	ldrh	r3, [r3, #14]
 800455c:	b29b      	uxth	r3, r3
 800455e:	2bff      	cmp	r3, #255	@ 0xff
 8004560:	d803      	bhi.n	800456a <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a23      	ldr	r2, [pc, #140]	@ (80045f4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	e00c      	b.n	8004584 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	799b      	ldrb	r3, [r3, #6]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d107      	bne.n	8004584 <Calculate_Next_Main_Oscillator_Values+0x178>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	89db      	ldrh	r3, [r3, #14]
 8004578:	b29b      	uxth	r3, r3
 800457a:	2bff      	cmp	r3, #255	@ 0xff
 800457c:	d902      	bls.n	8004584 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7a9b      	ldrb	r3, [r3, #10]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b7f      	cmp	r3, #127	@ 0x7f
 800458c:	d108      	bne.n	80045a0 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	4a17      	ldr	r2, [pc, #92]	@ (80045f4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	e01b      	b.n	80045d8 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7a9b      	ldrb	r3, [r3, #10]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d013      	beq.n	80045d2 <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	001a      	movs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	7a9b      	ldrb	r3, [r3, #10]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4353      	muls	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	09db      	lsrs	r3, r3, #7
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4a0b      	ldr	r2, [pc, #44]	@ (80045f4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	e002      	b.n	80045d8 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a07      	ldr	r2, [pc, #28]	@ (80045f4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80045d6:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	805a      	strh	r2, [r3, #2]

	return 1;
 80045e2:	2301      	movs	r3, #1
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b004      	add	sp, #16
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	0800d778 	.word	0x0800d778
 80045f0:	0800d378 	.word	0x0800d378
 80045f4:	000003ff 	.word	0x000003ff

080045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4a44      	ldr	r2, [pc, #272]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004606:	5a9b      	ldrh	r3, [r3, r2]
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	4a41      	ldr	r2, [pc, #260]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004612:	5a9b      	ldrh	r3, [r3, r2]
 8004614:	b29b      	uxth	r3, r3
 8004616:	1e5a      	subs	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b299      	uxth	r1, r3
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	0052      	lsls	r2, r2, #1
 8004622:	52d1      	strh	r1, [r2, r3]
 8004624:	e006      	b.n	8004634 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b299      	uxth	r1, r3
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4a38      	ldr	r2, [pc, #224]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004638:	5a9b      	ldrh	r3, [r3, r2]
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10e      	bne.n	800465e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	4a35      	ldr	r2, [pc, #212]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004644:	2180      	movs	r1, #128	@ 0x80
 8004646:	0089      	lsls	r1, r1, #2
 8004648:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	4a33      	ldr	r2, [pc, #204]	@ (800471c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800464e:	5a9b      	ldrh	r3, [r3, r2]
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b299      	uxth	r1, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4a30      	ldr	r2, [pc, #192]	@ (800471c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800465a:	5299      	strh	r1, [r3, r2]
 800465c:	e026      	b.n	80046ac <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4a2e      	ldr	r2, [pc, #184]	@ (800471c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004662:	5a9b      	ldrh	r3, [r3, r2]
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10e      	bne.n	8004688 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	4a2b      	ldr	r2, [pc, #172]	@ (800471c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800466e:	2180      	movs	r1, #128	@ 0x80
 8004670:	0089      	lsls	r1, r1, #2
 8004672:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4a28      	ldr	r2, [pc, #160]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004678:	5a9b      	ldrh	r3, [r3, r2]
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b299      	uxth	r1, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4a25      	ldr	r2, [pc, #148]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004684:	5299      	strh	r1, [r3, r2]
 8004686:	e011      	b.n	80046ac <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4a23      	ldr	r2, [pc, #140]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800468c:	5a9b      	ldrh	r3, [r3, r2]
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b299      	uxth	r1, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4a20      	ldr	r2, [pc, #128]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004698:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	4a1f      	ldr	r2, [pc, #124]	@ (800471c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800469e:	5a9b      	ldrh	r3, [r3, r2]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b299      	uxth	r1, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	4a1c      	ldr	r2, [pc, #112]	@ (800471c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80046aa:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80046b0:	5a9b      	ldrh	r3, [r3, r2]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	001a      	movs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	18d2      	adds	r2, r2, r3
 80046be:	2380      	movs	r3, #128	@ 0x80
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	429a      	cmp	r2, r3
 80046c4:	dd13      	ble.n	80046ee <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4913      	ldr	r1, [pc, #76]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80046cc:	5a5b      	ldrh	r3, [r3, r1]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	0019      	movs	r1, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	18cb      	adds	r3, r1, r3
 80046da:	4911      	ldr	r1, [pc, #68]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 80046dc:	468c      	mov	ip, r1
 80046de:	4463      	add	r3, ip
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	18d3      	adds	r3, r2, r3
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	809a      	strh	r2, [r3, #4]
 80046ec:	e00f      	b.n	800470e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4909      	ldr	r1, [pc, #36]	@ (8004718 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80046f4:	5a5b      	ldrh	r3, [r3, r1]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80046fe:	b29b      	uxth	r3, r3
 8004700:	18cb      	adds	r3, r1, r3
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	18d3      	adds	r3, r2, r3
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 800470e:	2301      	movs	r3, #1
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}
 8004718:	00000402 	.word	0x00000402
 800471c:	00000404 	.word	0x00000404
 8004720:	7ffffe00 	.word	0x7ffffe00

08004724 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	2116      	movs	r1, #22
 8004736:	187b      	adds	r3, r7, r1
 8004738:	0952      	lsrs	r2, r2, #5
 800473a:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 800473c:	187b      	adds	r3, r7, r1
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	2b2a      	cmp	r3, #42	@ 0x2a
 8004742:	d803      	bhi.n	800474c <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	719a      	strb	r2, [r3, #6]
 800474a:	e010      	b.n	800476e <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 800474c:	2316      	movs	r3, #22
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	2b55      	cmp	r3, #85	@ 0x55
 8004754:	d803      	bhi.n	800475e <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	719a      	strb	r2, [r3, #6]
 800475c:	e007      	b.n	800476e <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 800475e:	2316      	movs	r3, #22
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	2b7f      	cmp	r3, #127	@ 0x7f
 8004766:	d802      	bhi.n	800476e <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	3302      	adds	r3, #2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29a      	uxth	r2, r3
 8004776:	2114      	movs	r1, #20
 8004778:	187b      	adds	r3, r7, r1
 800477a:	0952      	lsrs	r2, r2, #5
 800477c:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 800477e:	187b      	adds	r3, r7, r1
 8004780:	187a      	adds	r2, r7, r1
 8004782:	8812      	ldrh	r2, [r2, #0]
 8004784:	00d2      	lsls	r2, r2, #3
 8004786:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	187a      	adds	r2, r7, r1
 800478c:	8812      	ldrh	r2, [r2, #0]
 800478e:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	3304      	adds	r3, #4
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	b29a      	uxth	r2, r3
 800479c:	2113      	movs	r1, #19
 800479e:	187b      	adds	r3, r7, r1
 80047a0:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	187a      	adds	r2, r7, r1
 80047a6:	7812      	ldrb	r2, [r2, #0]
 80047a8:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	3306      	adds	r3, #6
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	2110      	movs	r1, #16
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	0952      	lsrs	r2, r2, #5
 80047b8:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 80047ba:	187a      	adds	r2, r7, r1
 80047bc:	187b      	adds	r3, r7, r1
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	18db      	adds	r3, r3, r3
 80047c2:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	187a      	adds	r2, r7, r1
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	210e      	movs	r1, #14
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	0952      	lsrs	r2, r2, #5
 80047da:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 80047dc:	187b      	adds	r3, r7, r1
 80047de:	187a      	adds	r2, r7, r1
 80047e0:	8812      	ldrh	r2, [r2, #0]
 80047e2:	0092      	lsls	r2, r2, #2
 80047e4:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	187a      	adds	r2, r7, r1
 80047ea:	8812      	ldrh	r2, [r2, #0]
 80047ec:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80047ee:	2301      	movs	r3, #1
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b006      	add	sp, #24
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b08f      	sub	sp, #60	@ 0x3c
 80047fc:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80047fe:	2007      	movs	r0, #7
 8004800:	f002 fdc1 	bl	8007386 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8004804:	4b6c      	ldr	r3, [pc, #432]	@ (80049b8 <Startup+0x1c0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	4b6b      	ldr	r3, [pc, #428]	@ (80049b8 <Startup+0x1c0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	430a      	orrs	r2, r1
 8004812:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8004814:	4b69      	ldr	r3, [pc, #420]	@ (80049bc <Startup+0x1c4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b68      	ldr	r3, [pc, #416]	@ (80049bc <Startup+0x1c4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2101      	movs	r1, #1
 8004820:	430a      	orrs	r2, r1
 8004822:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	0099      	lsls	r1, r3, #2
 8004828:	23a0      	movs	r3, #160	@ 0xa0
 800482a:	05db      	lsls	r3, r3, #23
 800482c:	2201      	movs	r2, #1
 800482e:	0018      	movs	r0, r3
 8004830:	f003 fbc5 	bl	8007fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	0159      	lsls	r1, r3, #5
 8004838:	23a0      	movs	r3, #160	@ 0xa0
 800483a:	05db      	lsls	r3, r3, #23
 800483c:	2201      	movs	r2, #1
 800483e:	0018      	movs	r0, r3
 8004840:	f003 fbbd 	bl	8007fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004844:	23a0      	movs	r3, #160	@ 0xa0
 8004846:	05db      	lsls	r3, r3, #23
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	@ 0x80
 800484c:	0018      	movs	r0, r3
 800484e:	f003 fbb6 	bl	8007fbe <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004852:	f7fb fdfb 	bl	800044c <Initialise_Preset_Arrays>

	//TEST
	uint64_t preset_packed = 0;
 8004856:	2200      	movs	r2, #0
 8004858:	2300      	movs	r3, #0
 800485a:	61ba      	str	r2, [r7, #24]
 800485c:	61fb      	str	r3, [r7, #28]
	Pack_Preset_Into_Doubleword((struct Preset*)&test_preset, &preset_packed);
 800485e:	2318      	movs	r3, #24
 8004860:	18fa      	adds	r2, r7, r3
 8004862:	4b57      	ldr	r3, [pc, #348]	@ (80049c0 <Startup+0x1c8>)
 8004864:	0011      	movs	r1, r2
 8004866:	0018      	movs	r0, r3
 8004868:	f7fb ffda 	bl	8000820 <Pack_Preset_Into_Doubleword>

	uint32_t errors = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef erase_config = {.TypeErase = FLASH_CR_PER, .Banks = FLASH_CR_MER1, .Page = 31, .NbPages = 1};
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	4a54      	ldr	r2, [pc, #336]	@ (80049c4 <Startup+0x1cc>)
 8004874:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004876:	c313      	stmia	r3!, {r0, r1, r4}
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	601a      	str	r2, [r3, #0]
	HAL_FLASHEx_Erase(&erase_config, &errors);
 800487c:	2314      	movs	r3, #20
 800487e:	18fa      	adds	r2, r7, r3
 8004880:	1d3b      	adds	r3, r7, #4
 8004882:	0011      	movs	r1, r2
 8004884:	0018      	movs	r0, r3
 8004886:	f003 f975 	bl	8007b74 <HAL_FLASHEx_Erase>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	494e      	ldr	r1, [pc, #312]	@ (80049c8 <Startup+0x1d0>)
 8004890:	2001      	movs	r0, #1
 8004892:	f003 f8b3 	bl	80079fc <HAL_FLASH_Program>
	uint8_t *first_value_of_test_preset = (uint8_t*)0x0800F800;
 8004896:	4b4c      	ldr	r3, [pc, #304]	@ (80049c8 <Startup+0x1d0>)
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t value = *first_value_of_test_preset;
 800489a:	2327      	movs	r3, #39	@ 0x27
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	701a      	strb	r2, [r3, #0]
	//TEST

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 80048a4:	f7fc f956 	bl	8000b54 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 80048a8:	4b48      	ldr	r3, [pc, #288]	@ (80049cc <Startup+0x1d4>)
 80048aa:	4a49      	ldr	r2, [pc, #292]	@ (80049d0 <Startup+0x1d8>)
 80048ac:	4949      	ldr	r1, [pc, #292]	@ (80049d4 <Startup+0x1dc>)
 80048ae:	4c4a      	ldr	r4, [pc, #296]	@ (80049d8 <Startup+0x1e0>)
 80048b0:	2004      	movs	r0, #4
 80048b2:	9000      	str	r0, [sp, #0]
 80048b4:	0020      	movs	r0, r4
 80048b6:	f7fc f840 	bl	800093a <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 80048ba:	4b48      	ldr	r3, [pc, #288]	@ (80049dc <Startup+0x1e4>)
 80048bc:	4a48      	ldr	r2, [pc, #288]	@ (80049e0 <Startup+0x1e8>)
 80048be:	4945      	ldr	r1, [pc, #276]	@ (80049d4 <Startup+0x1dc>)
 80048c0:	4848      	ldr	r0, [pc, #288]	@ (80049e4 <Startup+0x1ec>)
 80048c2:	2404      	movs	r4, #4
 80048c4:	9400      	str	r4, [sp, #0]
 80048c6:	f7fc f8ee 	bl	8000aa6 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80048ca:	4b47      	ldr	r3, [pc, #284]	@ (80049e8 <Startup+0x1f0>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	001a      	movs	r2, r3
 80048d0:	4946      	ldr	r1, [pc, #280]	@ (80049ec <Startup+0x1f4>)
 80048d2:	4b47      	ldr	r3, [pc, #284]	@ (80049f0 <Startup+0x1f8>)
 80048d4:	0018      	movs	r0, r3
 80048d6:	f001 fe07 	bl	80064e8 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 80048da:	46c0      	nop			@ (mov r8, r8)
 80048dc:	4b3c      	ldr	r3, [pc, #240]	@ (80049d0 <Startup+0x1d8>)
 80048de:	2110      	movs	r1, #16
 80048e0:	0018      	movs	r0, r3
 80048e2:	f001 f949 	bl	8005b78 <Get_Status_Bit>
 80048e6:	1e03      	subs	r3, r0, #0
 80048e8:	d0f8      	beq.n	80048dc <Startup+0xe4>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80048ea:	232e      	movs	r3, #46	@ 0x2e
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	2200      	movs	r2, #0
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	e02f      	b.n	8004954 <Startup+0x15c>

		if(params.waveshape == SQUARE_MODE){
 80048f4:	4b3f      	ldr	r3, [pc, #252]	@ (80049f4 <Startup+0x1fc>)
 80048f6:	799b      	ldrb	r3, [r3, #6]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d112      	bne.n	8004924 <Startup+0x12c>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 80048fe:	4b3d      	ldr	r3, [pc, #244]	@ (80049f4 <Startup+0x1fc>)
 8004900:	7a9b      	ldrb	r3, [r3, #10]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	001a      	movs	r2, r3
 8004906:	0013      	movs	r3, r2
 8004908:	029b      	lsls	r3, r3, #10
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	11db      	asrs	r3, r3, #7
 800490e:	b29b      	uxth	r3, r3
 8004910:	222e      	movs	r2, #46	@ 0x2e
 8004912:	18ba      	adds	r2, r7, r2
 8004914:	8812      	ldrh	r2, [r2, #0]
 8004916:	4938      	ldr	r1, [pc, #224]	@ (80049f8 <Startup+0x200>)
 8004918:	1acb      	subs	r3, r1, r3
 800491a:	b299      	uxth	r1, r3
 800491c:	4b37      	ldr	r3, [pc, #220]	@ (80049fc <Startup+0x204>)
 800491e:	0052      	lsls	r2, r2, #1
 8004920:	52d1      	strh	r1, [r2, r3]
 8004922:	e011      	b.n	8004948 <Startup+0x150>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8004924:	4b33      	ldr	r3, [pc, #204]	@ (80049f4 <Startup+0x1fc>)
 8004926:	7a9b      	ldrb	r3, [r3, #10]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	001a      	movs	r2, r3
 800492c:	0013      	movs	r3, r2
 800492e:	029b      	lsls	r3, r3, #10
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	121b      	asrs	r3, r3, #8
 8004934:	b29b      	uxth	r3, r3
 8004936:	222e      	movs	r2, #46	@ 0x2e
 8004938:	18ba      	adds	r2, r7, r2
 800493a:	8812      	ldrh	r2, [r2, #0]
 800493c:	492e      	ldr	r1, [pc, #184]	@ (80049f8 <Startup+0x200>)
 800493e:	1acb      	subs	r3, r1, r3
 8004940:	b299      	uxth	r1, r3
 8004942:	4b2e      	ldr	r3, [pc, #184]	@ (80049fc <Startup+0x204>)
 8004944:	0052      	lsls	r2, r2, #1
 8004946:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004948:	212e      	movs	r1, #46	@ 0x2e
 800494a:	187b      	adds	r3, r7, r1
 800494c:	881a      	ldrh	r2, [r3, #0]
 800494e:	187b      	adds	r3, r7, r1
 8004950:	3201      	adds	r2, #1
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	232e      	movs	r3, #46	@ 0x2e
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	2380      	movs	r3, #128	@ 0x80
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	429a      	cmp	r2, r3
 8004960:	d9c8      	bls.n	80048f4 <Startup+0xfc>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8004962:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <Startup+0x1fc>)
 8004964:	2102      	movs	r1, #2
 8004966:	0018      	movs	r0, r3
 8004968:	f7ff fd50 	bl	800440c <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800496c:	4a23      	ldr	r2, [pc, #140]	@ (80049fc <Startup+0x204>)
 800496e:	4b21      	ldr	r3, [pc, #132]	@ (80049f4 <Startup+0x1fc>)
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f7ff fe40 	bl	80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8004978:	4b1e      	ldr	r3, [pc, #120]	@ (80049f4 <Startup+0x1fc>)
 800497a:	0018      	movs	r0, r3
 800497c:	f7ff fd1a 	bl	80043b4 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8004980:	4b1f      	ldr	r3, [pc, #124]	@ (8004a00 <Startup+0x208>)
 8004982:	220c      	movs	r2, #12
 8004984:	2104      	movs	r1, #4
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff fc88 	bl	800429c <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 800498c:	f7ff fcc2 	bl	8004314 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 8004990:	f7fc fd0a 	bl	80013a8 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8004994:	f7ff fb78 	bl	8004088 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8004998:	f001 f8e6 	bl	8005b68 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <Startup+0x20c>)
 800499e:	22fa      	movs	r2, #250	@ 0xfa
 80049a0:	21fa      	movs	r1, #250	@ 0xfa
 80049a2:	0018      	movs	r0, r3
 80049a4:	f003 fc02 	bl	80081ac <HAL_LPTIM_SetOnce_Start_IT>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80049a8:	2007      	movs	r0, #7
 80049aa:	f002 fcdc 	bl	8007366 <HAL_NVIC_EnableIRQ>

	return 1;
 80049ae:	2301      	movs	r3, #1
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b00d      	add	sp, #52	@ 0x34
 80049b6:	bd90      	pop	{r4, r7, pc}
 80049b8:	2000088c 	.word	0x2000088c
 80049bc:	200007d0 	.word	0x200007d0
 80049c0:	0800d370 	.word	0x0800d370
 80049c4:	0800d340 	.word	0x0800d340
 80049c8:	0800f800 	.word	0x0800f800
 80049cc:	20000545 	.word	0x20000545
 80049d0:	20000cac 	.word	0x20000cac
 80049d4:	2000053c 	.word	0x2000053c
 80049d8:	0800f820 	.word	0x0800f820
 80049dc:	20000500 	.word	0x20000500
 80049e0:	200004f0 	.word	0x200004f0
 80049e4:	20000510 	.word	0x20000510
 80049e8:	0800db78 	.word	0x0800db78
 80049ec:	20000cb8 	.word	0x20000cb8
 80049f0:	20000574 	.word	0x20000574
 80049f4:	20000cc4 	.word	0x20000cc4
 80049f8:	000003ff 	.word	0x000003ff
 80049fc:	20000020 	.word	0x20000020
 8004a00:	20000a04 	.word	0x20000a04
 8004a04:	20000c44 	.word	0x20000c44

08004a08 <Advance_Pending_States>:
volatile struct Normal_FSM phase_fsm = {.current_state = MANUAL_MODE, .prev_state = NONE};
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004a0e:	1d3b      	adds	r3, r7, #4
 8004a10:	4a12      	ldr	r2, [pc, #72]	@ (8004a5c <Advance_Pending_States+0x54>)
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004a16:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <Advance_Pending_States+0x54>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	d103      	bne.n	8004a28 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004a20:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <Advance_Pending_States+0x54>)
 8004a22:	2204      	movs	r2, #4
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e007      	b.n	8004a38 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004a28:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <Advance_Pending_States+0x54>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b07      	cmp	r3, #7
 8004a30:	d102      	bne.n	8004a38 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <Advance_Pending_States+0x54>)
 8004a34:	2206      	movs	r2, #6
 8004a36:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d007      	beq.n	8004a50 <Advance_Pending_States+0x48>
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d003      	beq.n	8004a50 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8004a48:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <Advance_Pending_States+0x54>)
 8004a4a:	1d3a      	adds	r2, r7, #4
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8004a50:	2301      	movs	r3, #1
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	20000428 	.word	0x20000428

08004a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a66:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a72:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	2201      	movs	r2, #1
 8004a78:	4013      	ands	r3, r2
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a82:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a84:	2180      	movs	r1, #128	@ 0x80
 8004a86:	0549      	lsls	r1, r1, #21
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a90:	2380      	movs	r3, #128	@ 0x80
 8004a92:	055b      	lsls	r3, r3, #21
 8004a94:	4013      	ands	r3, r2
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	40021000 	.word	0x40021000

08004aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b08b      	sub	sp, #44	@ 0x2c
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	2414      	movs	r4, #20
 8004ab2:	193b      	adds	r3, r7, r4
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	2314      	movs	r3, #20
 8004ab8:	001a      	movs	r2, r3
 8004aba:	2100      	movs	r1, #0
 8004abc:	f008 fbf4 	bl	800d2a8 <memset>
  if(hadc->Instance==ADC1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b80 <HAL_ADC_MspInit+0xd8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d155      	bne.n	8004b76 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004aca:	4b2e      	ldr	r3, [pc, #184]	@ (8004b84 <HAL_ADC_MspInit+0xdc>)
 8004acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ace:	4b2d      	ldr	r3, [pc, #180]	@ (8004b84 <HAL_ADC_MspInit+0xdc>)
 8004ad0:	2180      	movs	r1, #128	@ 0x80
 8004ad2:	0349      	lsls	r1, r1, #13
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b84 <HAL_ADC_MspInit+0xdc>)
 8004ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	035b      	lsls	r3, r3, #13
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae6:	4b27      	ldr	r3, [pc, #156]	@ (8004b84 <HAL_ADC_MspInit+0xdc>)
 8004ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aea:	4b26      	ldr	r3, [pc, #152]	@ (8004b84 <HAL_ADC_MspInit+0xdc>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	430a      	orrs	r2, r1
 8004af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004af2:	4b24      	ldr	r3, [pc, #144]	@ (8004b84 <HAL_ADC_MspInit+0xdc>)
 8004af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af6:	2201      	movs	r2, #1
 8004af8:	4013      	ands	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	2273      	movs	r2, #115	@ 0x73
 8004b02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b04:	193b      	adds	r3, r7, r4
 8004b06:	2203      	movs	r2, #3
 8004b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b10:	193a      	adds	r2, r7, r4
 8004b12:	23a0      	movs	r3, #160	@ 0xa0
 8004b14:	05db      	lsls	r3, r3, #23
 8004b16:	0011      	movs	r1, r2
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f003 f8cf 	bl	8007cbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b20:	4a1a      	ldr	r2, [pc, #104]	@ (8004b8c <HAL_ADC_MspInit+0xe4>)
 8004b22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004b24:	4b18      	ldr	r3, [pc, #96]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b26:	2205      	movs	r2, #5
 8004b28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b2a:	4b17      	ldr	r3, [pc, #92]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b30:	4b15      	ldr	r3, [pc, #84]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b36:	4b14      	ldr	r3, [pc, #80]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b38:	2280      	movs	r2, #128	@ 0x80
 8004b3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b3e:	2280      	movs	r2, #128	@ 0x80
 8004b40:	0052      	lsls	r2, r2, #1
 8004b42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b44:	4b10      	ldr	r3, [pc, #64]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b46:	2280      	movs	r2, #128	@ 0x80
 8004b48:	00d2      	lsls	r2, r2, #3
 8004b4a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004b52:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b54:	2280      	movs	r2, #128	@ 0x80
 8004b56:	0192      	lsls	r2, r2, #6
 8004b58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f002 fc2f 	bl	80073c0 <HAL_DMA_Init>
 8004b62:	1e03      	subs	r3, r0, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8004b66:	f7fd fb95 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a06      	ldr	r2, [pc, #24]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <HAL_ADC_MspInit+0xe0>)
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b00b      	add	sp, #44	@ 0x2c
 8004b7c:	bd90      	pop	{r4, r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	40012400 	.word	0x40012400
 8004b84:	40021000 	.word	0x40021000
 8004b88:	200005fc 	.word	0x200005fc
 8004b8c:	40020008 	.word	0x40020008

08004b90 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b097      	sub	sp, #92	@ 0x5c
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b98:	2344      	movs	r3, #68	@ 0x44
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	2314      	movs	r3, #20
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	f008 fb80 	bl	800d2a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ba8:	241c      	movs	r4, #28
 8004baa:	193b      	adds	r3, r7, r4
 8004bac:	0018      	movs	r0, r3
 8004bae:	2328      	movs	r3, #40	@ 0x28
 8004bb0:	001a      	movs	r2, r3
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	f008 fb78 	bl	800d2a8 <memset>
  if(hlptim->Instance==LPTIM1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a46      	ldr	r2, [pc, #280]	@ (8004cd8 <HAL_LPTIM_MspInit+0x148>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d13e      	bne.n	8004c40 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004bc2:	193b      	adds	r3, r7, r4
 8004bc4:	2280      	movs	r2, #128	@ 0x80
 8004bc6:	0092      	lsls	r2, r2, #2
 8004bc8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8004bca:	193b      	adds	r3, r7, r4
 8004bcc:	2200      	movs	r2, #0
 8004bce:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bd0:	193b      	adds	r3, r7, r4
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f004 fb58 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 8004bd8:	1e03      	subs	r3, r0, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8004bdc:	f7fd fb5a 	bl	8002294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004be0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004be6:	2180      	movs	r1, #128	@ 0x80
 8004be8:	0609      	lsls	r1, r1, #24
 8004bea:	430a      	orrs	r2, r1
 8004bec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004bee:	4b3b      	ldr	r3, [pc, #236]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf2:	0fdb      	lsrs	r3, r3, #31
 8004bf4:	07db      	lsls	r3, r3, #31
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bfa:	4b38      	ldr	r3, [pc, #224]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bfe:	4b37      	ldr	r3, [pc, #220]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004c00:	2102      	movs	r1, #2
 8004c02:	430a      	orrs	r2, r1
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c06:	4b35      	ldr	r3, [pc, #212]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c12:	2144      	movs	r1, #68	@ 0x44
 8004c14:	187b      	adds	r3, r7, r1
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1a:	187b      	adds	r3, r7, r1
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c26:	187b      	adds	r3, r7, r1
 8004c28:	2200      	movs	r2, #0
 8004c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	2205      	movs	r2, #5
 8004c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce0 <HAL_LPTIM_MspInit+0x150>)
 8004c36:	0019      	movs	r1, r3
 8004c38:	0010      	movs	r0, r2
 8004c3a:	f003 f83f 	bl	8007cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8004c3e:	e046      	b.n	8004cce <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a27      	ldr	r2, [pc, #156]	@ (8004ce4 <HAL_LPTIM_MspInit+0x154>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d141      	bne.n	8004cce <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8004c4a:	211c      	movs	r1, #28
 8004c4c:	187b      	adds	r3, r7, r1
 8004c4e:	2280      	movs	r2, #128	@ 0x80
 8004c50:	00d2      	lsls	r2, r2, #3
 8004c52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	2200      	movs	r2, #0
 8004c58:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c5a:	187b      	adds	r3, r7, r1
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f004 fb13 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 8004c62:	1e03      	subs	r3, r0, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 8004c66:	f7fd fb15 	bl	8002294 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8004c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004c6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004c70:	2180      	movs	r1, #128	@ 0x80
 8004c72:	05c9      	lsls	r1, r1, #23
 8004c74:	430a      	orrs	r2, r1
 8004c76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c78:	4b18      	ldr	r3, [pc, #96]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	05db      	lsls	r3, r3, #23
 8004c80:	4013      	ands	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c86:	4b15      	ldr	r3, [pc, #84]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c8a:	4b14      	ldr	r3, [pc, #80]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <HAL_LPTIM_MspInit+0x14c>)
 8004c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c96:	2201      	movs	r2, #1
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c9e:	2144      	movs	r1, #68	@ 0x44
 8004ca0:	187b      	adds	r3, r7, r1
 8004ca2:	2280      	movs	r2, #128	@ 0x80
 8004ca4:	0052      	lsls	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	2202      	movs	r2, #2
 8004cac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cae:	187b      	adds	r3, r7, r1
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb4:	187b      	adds	r3, r7, r1
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc0:	187a      	adds	r2, r7, r1
 8004cc2:	23a0      	movs	r3, #160	@ 0xa0
 8004cc4:	05db      	lsls	r3, r3, #23
 8004cc6:	0011      	movs	r1, r2
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f002 fff7 	bl	8007cbc <HAL_GPIO_Init>
}
 8004cce:	46c0      	nop			@ (mov r8, r8)
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b017      	add	sp, #92	@ 0x5c
 8004cd4:	bd90      	pop	{r4, r7, pc}
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	40007c00 	.word	0x40007c00
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	50000400 	.word	0x50000400
 8004ce4:	40009400 	.word	0x40009400

08004ce8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b099      	sub	sp, #100	@ 0x64
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf0:	234c      	movs	r3, #76	@ 0x4c
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	2314      	movs	r3, #20
 8004cf8:	001a      	movs	r2, r3
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	f008 fad4 	bl	800d2a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d00:	2424      	movs	r4, #36	@ 0x24
 8004d02:	193b      	adds	r3, r7, r4
 8004d04:	0018      	movs	r0, r3
 8004d06:	2328      	movs	r3, #40	@ 0x28
 8004d08:	001a      	movs	r2, r3
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	f008 facc 	bl	800d2a8 <memset>
  if(htim_base->Instance==TIM1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a68      	ldr	r2, [pc, #416]	@ (8004eb8 <HAL_TIM_Base_MspInit+0x1d0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d11d      	bne.n	8004d56 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004d1a:	193b      	adds	r3, r7, r4
 8004d1c:	2280      	movs	r2, #128	@ 0x80
 8004d1e:	0392      	lsls	r2, r2, #14
 8004d20:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d28:	193b      	adds	r3, r7, r4
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f004 faac 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 8004d30:	1e03      	subs	r3, r0, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8004d34:	f7fd faae 	bl	8002294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d38:	4b60      	ldr	r3, [pc, #384]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d3e:	2180      	movs	r1, #128	@ 0x80
 8004d40:	0109      	lsls	r1, r1, #4
 8004d42:	430a      	orrs	r2, r1
 8004d44:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d46:	4b5d      	ldr	r3, [pc, #372]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	4013      	ands	r3, r2
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8004d54:	e0ab      	b.n	8004eae <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	05db      	lsls	r3, r3, #23
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d138      	bne.n	8004dd4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d62:	4b56      	ldr	r3, [pc, #344]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d66:	4b55      	ldr	r3, [pc, #340]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d68:	2101      	movs	r1, #1
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d6e:	4b53      	ldr	r3, [pc, #332]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d72:	2201      	movs	r2, #1
 8004d74:	4013      	ands	r3, r2
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7a:	4b50      	ldr	r3, [pc, #320]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d80:	2101      	movs	r1, #1
 8004d82:	430a      	orrs	r2, r1
 8004d84:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d86:	4b4d      	ldr	r3, [pc, #308]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8004d92:	214c      	movs	r1, #76	@ 0x4c
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	2280      	movs	r2, #128	@ 0x80
 8004d98:	0212      	lsls	r2, r2, #8
 8004d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	2202      	movs	r2, #2
 8004da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8004da2:	187b      	adds	r3, r7, r1
 8004da4:	2201      	movs	r2, #1
 8004da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	2200      	movs	r2, #0
 8004dac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004dae:	187b      	adds	r3, r7, r1
 8004db0:	2202      	movs	r2, #2
 8004db2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8004db4:	187a      	adds	r2, r7, r1
 8004db6:	23a0      	movs	r3, #160	@ 0xa0
 8004db8:	05db      	lsls	r3, r3, #23
 8004dba:	0011      	movs	r1, r2
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f002 ff7d 	bl	8007cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	2102      	movs	r1, #2
 8004dc6:	200f      	movs	r0, #15
 8004dc8:	f002 fab8 	bl	800733c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004dcc:	200f      	movs	r0, #15
 8004dce:	f002 faca 	bl	8007366 <HAL_NVIC_EnableIRQ>
}
 8004dd2:	e06c      	b.n	8004eae <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a39      	ldr	r2, [pc, #228]	@ (8004ec0 <HAL_TIM_Base_MspInit+0x1d8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d114      	bne.n	8004e08 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dde:	4b37      	ldr	r3, [pc, #220]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004de0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004de2:	4b36      	ldr	r3, [pc, #216]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004de4:	2102      	movs	r1, #2
 8004de6:	430a      	orrs	r2, r1
 8004de8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004dea:	4b34      	ldr	r3, [pc, #208]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dee:	2202      	movs	r2, #2
 8004df0:	4013      	ands	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004df6:	2200      	movs	r2, #0
 8004df8:	2100      	movs	r1, #0
 8004dfa:	2010      	movs	r0, #16
 8004dfc:	f002 fa9e 	bl	800733c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e00:	2010      	movs	r0, #16
 8004e02:	f002 fab0 	bl	8007366 <HAL_NVIC_EnableIRQ>
}
 8004e06:	e052      	b.n	8004eae <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec4 <HAL_TIM_Base_MspInit+0x1dc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d116      	bne.n	8004e40 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004e12:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e16:	4b29      	ldr	r3, [pc, #164]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e18:	2180      	movs	r1, #128	@ 0x80
 8004e1a:	0289      	lsls	r1, r1, #10
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e20:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e24:	2380      	movs	r3, #128	@ 0x80
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2100      	movs	r1, #0
 8004e32:	2015      	movs	r0, #21
 8004e34:	f002 fa82 	bl	800733c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004e38:	2015      	movs	r0, #21
 8004e3a:	f002 fa94 	bl	8007366 <HAL_NVIC_EnableIRQ>
}
 8004e3e:	e036      	b.n	8004eae <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a20      	ldr	r2, [pc, #128]	@ (8004ec8 <HAL_TIM_Base_MspInit+0x1e0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d116      	bne.n	8004e78 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e50:	2180      	movs	r1, #128	@ 0x80
 8004e52:	02c9      	lsls	r1, r1, #11
 8004e54:	430a      	orrs	r2, r1
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e58:	4b18      	ldr	r3, [pc, #96]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e5c:	2380      	movs	r3, #128	@ 0x80
 8004e5e:	02db      	lsls	r3, r3, #11
 8004e60:	4013      	ands	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8004e66:	2203      	movs	r2, #3
 8004e68:	2103      	movs	r1, #3
 8004e6a:	2016      	movs	r0, #22
 8004e6c:	f002 fa66 	bl	800733c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004e70:	2016      	movs	r0, #22
 8004e72:	f002 fa78 	bl	8007366 <HAL_NVIC_EnableIRQ>
}
 8004e76:	e01a      	b.n	8004eae <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <HAL_TIM_Base_MspInit+0x1e4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d115      	bne.n	8004eae <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004e82:	4b0e      	ldr	r3, [pc, #56]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e86:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e88:	2180      	movs	r1, #128	@ 0x80
 8004e8a:	0209      	lsls	r1, r1, #8
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e90:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <HAL_TIM_Base_MspInit+0x1d4>)
 8004e92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e94:	2380      	movs	r3, #128	@ 0x80
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	2103      	movs	r1, #3
 8004ea2:	2013      	movs	r0, #19
 8004ea4:	f002 fa4a 	bl	800733c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004ea8:	2013      	movs	r0, #19
 8004eaa:	f002 fa5c 	bl	8007366 <HAL_NVIC_EnableIRQ>
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b019      	add	sp, #100	@ 0x64
 8004eb4:	bd90      	pop	{r4, r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800
 8004ecc:	40002000 	.word	0x40002000

08004ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b08b      	sub	sp, #44	@ 0x2c
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed8:	2414      	movs	r4, #20
 8004eda:	193b      	adds	r3, r7, r4
 8004edc:	0018      	movs	r0, r3
 8004ede:	2314      	movs	r3, #20
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	f008 f9e0 	bl	800d2a8 <memset>
  if(htim->Instance==TIM1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a25      	ldr	r2, [pc, #148]	@ (8004f84 <HAL_TIM_MspPostInit+0xb4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d144      	bne.n	8004f7c <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef2:	4b25      	ldr	r3, [pc, #148]	@ (8004f88 <HAL_TIM_MspPostInit+0xb8>)
 8004ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <HAL_TIM_MspPostInit+0xb8>)
 8004ef8:	2101      	movs	r1, #1
 8004efa:	430a      	orrs	r2, r1
 8004efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004efe:	4b22      	ldr	r3, [pc, #136]	@ (8004f88 <HAL_TIM_MspPostInit+0xb8>)
 8004f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f02:	2201      	movs	r2, #1
 8004f04:	4013      	ands	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f88 <HAL_TIM_MspPostInit+0xb8>)
 8004f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <HAL_TIM_MspPostInit+0xb8>)
 8004f10:	2102      	movs	r1, #2
 8004f12:	430a      	orrs	r2, r1
 8004f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f16:	4b1c      	ldr	r3, [pc, #112]	@ (8004f88 <HAL_TIM_MspPostInit+0xb8>)
 8004f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8004f22:	193b      	adds	r3, r7, r4
 8004f24:	2280      	movs	r2, #128	@ 0x80
 8004f26:	0112      	lsls	r2, r2, #4
 8004f28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2a:	193b      	adds	r3, r7, r4
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	193b      	adds	r3, r7, r4
 8004f32:	2200      	movs	r2, #0
 8004f34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f36:	193b      	adds	r3, r7, r4
 8004f38:	2200      	movs	r2, #0
 8004f3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004f3c:	193b      	adds	r3, r7, r4
 8004f3e:	2202      	movs	r2, #2
 8004f40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004f42:	193a      	adds	r2, r7, r4
 8004f44:	23a0      	movs	r3, #160	@ 0xa0
 8004f46:	05db      	lsls	r3, r3, #23
 8004f48:	0011      	movs	r1, r2
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f002 feb6 	bl	8007cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8004f50:	0021      	movs	r1, r4
 8004f52:	187b      	adds	r3, r7, r1
 8004f54:	2208      	movs	r2, #8
 8004f56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f58:	187b      	adds	r3, r7, r1
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	2200      	movs	r2, #0
 8004f62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f64:	187b      	adds	r3, r7, r1
 8004f66:	2200      	movs	r2, #0
 8004f68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f6a:	187b      	adds	r3, r7, r1
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	4a06      	ldr	r2, [pc, #24]	@ (8004f8c <HAL_TIM_MspPostInit+0xbc>)
 8004f74:	0019      	movs	r1, r3
 8004f76:	0010      	movs	r0, r2
 8004f78:	f002 fea0 	bl	8007cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004f7c:	46c0      	nop			@ (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b00b      	add	sp, #44	@ 0x2c
 8004f82:	bd90      	pop	{r4, r7, pc}
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	50000400 	.word	0x50000400

08004f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b08b      	sub	sp, #44	@ 0x2c
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f98:	2414      	movs	r4, #20
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	2314      	movs	r3, #20
 8004fa0:	001a      	movs	r2, r3
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	f008 f980 	bl	800d2a8 <memset>
  if(huart->Instance==USART2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a4a      	ldr	r2, [pc, #296]	@ (80050d8 <HAL_UART_MspInit+0x148>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d000      	beq.n	8004fb4 <HAL_UART_MspInit+0x24>
 8004fb2:	e08d      	b.n	80050d0 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004fb4:	4b49      	ldr	r3, [pc, #292]	@ (80050dc <HAL_UART_MspInit+0x14c>)
 8004fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb8:	4b48      	ldr	r3, [pc, #288]	@ (80050dc <HAL_UART_MspInit+0x14c>)
 8004fba:	2180      	movs	r1, #128	@ 0x80
 8004fbc:	0289      	lsls	r1, r1, #10
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fc2:	4b46      	ldr	r3, [pc, #280]	@ (80050dc <HAL_UART_MspInit+0x14c>)
 8004fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	029b      	lsls	r3, r3, #10
 8004fca:	4013      	ands	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd0:	4b42      	ldr	r3, [pc, #264]	@ (80050dc <HAL_UART_MspInit+0x14c>)
 8004fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fd4:	4b41      	ldr	r3, [pc, #260]	@ (80050dc <HAL_UART_MspInit+0x14c>)
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80050dc <HAL_UART_MspInit+0x14c>)
 8004fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004fe8:	0021      	movs	r1, r4
 8004fea:	187b      	adds	r3, r7, r1
 8004fec:	220c      	movs	r2, #12
 8004fee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff0:	187b      	adds	r3, r7, r1
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ff6:	187b      	adds	r3, r7, r1
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ffc:	187b      	adds	r3, r7, r1
 8004ffe:	2200      	movs	r2, #0
 8005000:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005002:	187b      	adds	r3, r7, r1
 8005004:	2201      	movs	r2, #1
 8005006:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005008:	187a      	adds	r2, r7, r1
 800500a:	23a0      	movs	r3, #160	@ 0xa0
 800500c:	05db      	lsls	r3, r3, #23
 800500e:	0011      	movs	r1, r2
 8005010:	0018      	movs	r0, r3
 8005012:	f002 fe53 	bl	8007cbc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005016:	4b32      	ldr	r3, [pc, #200]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005018:	4a32      	ldr	r2, [pc, #200]	@ (80050e4 <HAL_UART_MspInit+0x154>)
 800501a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800501c:	4b30      	ldr	r3, [pc, #192]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 800501e:	2234      	movs	r2, #52	@ 0x34
 8005020:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005022:	4b2f      	ldr	r3, [pc, #188]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005024:	2200      	movs	r2, #0
 8005026:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005028:	4b2d      	ldr	r3, [pc, #180]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 800502a:	2200      	movs	r2, #0
 800502c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800502e:	4b2c      	ldr	r3, [pc, #176]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005030:	2280      	movs	r2, #128	@ 0x80
 8005032:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005034:	4b2a      	ldr	r3, [pc, #168]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005036:	2200      	movs	r2, #0
 8005038:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 800503c:	2200      	movs	r2, #0
 800503e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005040:	4b27      	ldr	r3, [pc, #156]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005042:	2200      	movs	r2, #0
 8005044:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005046:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005048:	2280      	movs	r2, #128	@ 0x80
 800504a:	0152      	lsls	r2, r2, #5
 800504c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800504e:	4b24      	ldr	r3, [pc, #144]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005050:	0018      	movs	r0, r3
 8005052:	f002 f9b5 	bl	80073c0 <HAL_DMA_Init>
 8005056:	1e03      	subs	r3, r0, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800505a:	f7fd f91b 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2180      	movs	r1, #128	@ 0x80
 8005062:	4a1f      	ldr	r2, [pc, #124]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005064:	505a      	str	r2, [r3, r1]
 8005066:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <HAL_UART_MspInit+0x150>)
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800506c:	4b1e      	ldr	r3, [pc, #120]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 800506e:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <HAL_UART_MspInit+0x15c>)
 8005070:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005072:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 8005074:	2235      	movs	r2, #53	@ 0x35
 8005076:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005078:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 800507a:	2210      	movs	r2, #16
 800507c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800507e:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 8005080:	2200      	movs	r2, #0
 8005082:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005084:	4b18      	ldr	r3, [pc, #96]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 8005086:	2280      	movs	r2, #128	@ 0x80
 8005088:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800508a:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 800508c:	2200      	movs	r2, #0
 800508e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005090:	4b15      	ldr	r3, [pc, #84]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 8005092:	2200      	movs	r2, #0
 8005094:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005096:	4b14      	ldr	r3, [pc, #80]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 8005098:	2200      	movs	r2, #0
 800509a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800509c:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 800509e:	2280      	movs	r2, #128	@ 0x80
 80050a0:	0152      	lsls	r2, r2, #5
 80050a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80050a4:	4b10      	ldr	r3, [pc, #64]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 80050a6:	0018      	movs	r0, r3
 80050a8:	f002 f98a 	bl	80073c0 <HAL_DMA_Init>
 80050ac:	1e03      	subs	r3, r0, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 80050b0:	f7fd f8f0 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a0c      	ldr	r2, [pc, #48]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 80050b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_UART_MspInit+0x158>)
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80050c0:	2201      	movs	r2, #1
 80050c2:	2101      	movs	r1, #1
 80050c4:	201c      	movs	r0, #28
 80050c6:	f002 f939 	bl	800733c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80050ca:	201c      	movs	r0, #28
 80050cc:	f002 f94b 	bl	8007366 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b00b      	add	sp, #44	@ 0x2c
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	40004400 	.word	0x40004400
 80050dc:	40021000 	.word	0x40021000
 80050e0:	20000b8c 	.word	0x20000b8c
 80050e4:	4002001c 	.word	0x4002001c
 80050e8:	20000be8 	.word	0x20000be8
 80050ec:	40020030 	.word	0x40020030

080050f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050f4:	46c0      	nop			@ (mov r8, r8)
 80050f6:	e7fd      	b.n	80050f4 <NMI_Handler+0x4>

080050f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050fc:	46c0      	nop			@ (mov r8, r8)
 80050fe:	e7fd      	b.n	80050fc <HardFault_Handler+0x4>

08005100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005118:	f000 fdfc 	bl	8005d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800511c:	46c0      	nop			@ (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8005126:	2080      	movs	r0, #128	@ 0x80
 8005128:	f002 ff66 	bl	8007ff8 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005138:	4b03      	ldr	r3, [pc, #12]	@ (8005148 <DMA1_Channel1_IRQHandler+0x14>)
 800513a:	0018      	movs	r0, r3
 800513c:	f002 fb1c 	bl	8007778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005140:	46c0      	nop			@ (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	200005fc 	.word	0x200005fc

0800514c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005152:	0018      	movs	r0, r3
 8005154:	f002 fb10 	bl	8007778 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005158:	4b04      	ldr	r3, [pc, #16]	@ (800516c <DMA1_Channel2_3_IRQHandler+0x20>)
 800515a:	0018      	movs	r0, r3
 800515c:	f002 fb0c 	bl	8007778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005160:	46c0      	nop			@ (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	20000b8c 	.word	0x20000b8c
 800516c:	20000be8 	.word	0x20000be8

08005170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005174:	4b03      	ldr	r3, [pc, #12]	@ (8005184 <TIM2_IRQHandler+0x14>)
 8005176:	0018      	movs	r0, r3
 8005178:	f005 f850 	bl	800a21c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800517c:	46c0      	nop			@ (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	46c0      	nop			@ (mov r8, r8)
 8005184:	2000088c 	.word	0x2000088c

08005188 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800518c:	4b03      	ldr	r3, [pc, #12]	@ (800519c <TIM3_IRQHandler+0x14>)
 800518e:	0018      	movs	r0, r3
 8005190:	f005 f844 	bl	800a21c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005194:	46c0      	nop			@ (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	20000948 	.word	0x20000948

080051a0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80051a4:	4b03      	ldr	r3, [pc, #12]	@ (80051b4 <TIM16_IRQHandler+0x14>)
 80051a6:	0018      	movs	r0, r3
 80051a8:	f005 f838 	bl	800a21c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80051ac:	46c0      	nop			@ (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	200007d0 	.word	0x200007d0

080051b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051bc:	4b03      	ldr	r3, [pc, #12]	@ (80051cc <USART2_IRQHandler+0x14>)
 80051be:	0018      	movs	r0, r3
 80051c0:	f006 fdae 	bl	800bd20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	20000ac0 	.word	0x20000ac0

080051d0 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 80051d4:	4b03      	ldr	r3, [pc, #12]	@ (80051e4 <LPTIM1_IRQHandler+0x14>)
 80051d6:	0018      	movs	r0, r3
 80051d8:	f003 f87c 	bl	80082d4 <HAL_LPTIM_IRQHandler>
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			@ (mov r8, r8)
 80051e4:	20000c44 	.word	0x20000c44

080051e8 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80051ec:	4b03      	ldr	r3, [pc, #12]	@ (80051fc <TIM17_IRQHandler+0x14>)
 80051ee:	0018      	movs	r0, r3
 80051f0:	f005 f814 	bl	800a21c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80051f4:	46c0      	nop			@ (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	20000714 	.word	0x20000714

08005200 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005204:	4b03      	ldr	r3, [pc, #12]	@ (8005214 <TIM14_IRQHandler+0x14>)
 8005206:	0018      	movs	r0, r3
 8005208:	f005 f808 	bl	800a21c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800520c:	46c0      	nop			@ (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			@ (mov r8, r8)
 8005214:	20000658 	.word	0x20000658

08005218 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	5c9b      	ldrb	r3, [r3, r2]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	d107      	bne.n	800523c <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8b5b      	ldrh	r3, [r3, #26]
 8005230:	b29b      	uxth	r3, r3
 8005232:	18db      	adds	r3, r3, r3
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	839a      	strh	r2, [r3, #28]
 800523a:	e00a      	b.n	8005252 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	5c9b      	ldrb	r3, [r3, r2]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8b5b      	ldrh	r3, [r3, #26]
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8005252:	2301      	movs	r3, #1
}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b002      	add	sp, #8
 800525a:	bd80      	pop	{r7, pc}

0800525c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005264:	2317      	movs	r3, #23
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 800526c:	2316      	movs	r3, #22
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 8005274:	2315      	movs	r3, #21
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 800527c:	2114      	movs	r1, #20
 800527e:	187b      	adds	r3, r7, r1
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	899b      	ldrh	r3, [r3, #12]
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b7f      	cmp	r3, #127	@ 0x7f
 800528c:	d803      	bhi.n	8005296 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 800528e:	187b      	adds	r3, r7, r1
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e003      	b.n	800529e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 8005296:	2314      	movs	r3, #20
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	799b      	ldrb	r3, [r3, #6]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d004      	beq.n	80052b2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	799b      	ldrb	r3, [r3, #6]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d146      	bne.n	8005340 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7c1b      	ldrb	r3, [r3, #16]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7c5b      	ldrb	r3, [r3, #17]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7c1b      	ldrb	r3, [r3, #16]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d113      	bne.n	80052f8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7c5b      	ldrb	r3, [r3, #17]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d10e      	bne.n	80052f8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 80052da:	2314      	movs	r3, #20
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 80052e4:	2316      	movs	r3, #22
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 80052ec:	e027      	b.n	800533e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80052ee:	2316      	movs	r3, #22
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 80052f6:	e022      	b.n	800533e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	7c1b      	ldrb	r3, [r3, #16]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	7c5b      	ldrb	r3, [r3, #17]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d009      	beq.n	8005320 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7c1b      	ldrb	r3, [r3, #16]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	d13c      	bne.n	8005390 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	7c5b      	ldrb	r3, [r3, #17]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d137      	bne.n	8005390 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8005320:	2314      	movs	r3, #20
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d104      	bne.n	8005334 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 800532a:	2316      	movs	r3, #22
 800532c:	18fb      	adds	r3, r7, r3
 800532e:	2200      	movs	r2, #0
 8005330:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005332:	e02d      	b.n	8005390 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005334:	2316      	movs	r3, #22
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 800533c:	e028      	b.n	8005390 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800533e:	e027      	b.n	8005390 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	799b      	ldrb	r3, [r3, #6]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d123      	bne.n	8005392 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7c1b      	ldrb	r3, [r3, #16]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10e      	bne.n	8005372 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8005354:	2314      	movs	r3, #20
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 800535e:	2316      	movs	r3, #22
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	2201      	movs	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e014      	b.n	8005392 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005368:	2316      	movs	r3, #22
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e00f      	b.n	8005392 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 8005372:	2314      	movs	r3, #20
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 800537c:	2316      	movs	r3, #22
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e005      	b.n	8005392 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005386:	2316      	movs	r3, #22
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e000      	b.n	8005392 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005390:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8005392:	2314      	movs	r3, #20
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	899b      	ldrh	r3, [r3, #12]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	2315      	movs	r3, #21
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	217f      	movs	r1, #127	@ 0x7f
 80053aa:	1a8a      	subs	r2, r1, r2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e007      	b.n	80053c0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	899b      	ldrh	r3, [r3, #12]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	2315      	movs	r3, #21
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	3a80      	subs	r2, #128	@ 0x80
 80053be:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8a5b      	ldrh	r3, [r3, #18]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	200e      	movs	r0, #14
 80053c8:	183b      	adds	r3, r7, r0
 80053ca:	2180      	movs	r1, #128	@ 0x80
 80053cc:	0049      	lsls	r1, r1, #1
 80053ce:	1a8a      	subs	r2, r1, r2
 80053d0:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 80053d2:	0001      	movs	r1, r0
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	2215      	movs	r2, #21
 80053da:	18ba      	adds	r2, r7, r2
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	435a      	muls	r2, r3
 80053e0:	0013      	movs	r3, r2
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	189b      	adds	r3, r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	10da      	asrs	r2, r3, #3
 80053ea:	240c      	movs	r4, #12
 80053ec:	193b      	adds	r3, r7, r4
 80053ee:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 80053f0:	250a      	movs	r5, #10
 80053f2:	197b      	adds	r3, r7, r5
 80053f4:	193a      	adds	r2, r7, r4
 80053f6:	8812      	ldrh	r2, [r2, #0]
 80053f8:	0a12      	lsrs	r2, r2, #8
 80053fa:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 80053fc:	2312      	movs	r3, #18
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	0008      	movs	r0, r1
 8005402:	1879      	adds	r1, r7, r1
 8005404:	197a      	adds	r2, r7, r5
 8005406:	8809      	ldrh	r1, [r1, #0]
 8005408:	8812      	ldrh	r2, [r2, #0]
 800540a:	1a8a      	subs	r2, r1, r2
 800540c:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 800540e:	2610      	movs	r6, #16
 8005410:	19bb      	adds	r3, r7, r6
 8005412:	1839      	adds	r1, r7, r0
 8005414:	197a      	adds	r2, r7, r5
 8005416:	8809      	ldrh	r1, [r1, #0]
 8005418:	8812      	ldrh	r2, [r2, #0]
 800541a:	188a      	adds	r2, r1, r2
 800541c:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 800541e:	19bb      	adds	r3, r7, r6
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	2bff      	cmp	r3, #255	@ 0xff
 8005424:	d90f      	bls.n	8005446 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005426:	19bb      	adds	r3, r7, r6
 8005428:	881a      	ldrh	r2, [r3, #0]
 800542a:	2380      	movs	r3, #128	@ 0x80
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	429a      	cmp	r2, r3
 8005430:	d000      	beq.n	8005434 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 8005432:	e0b0      	b.n	8005596 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8005434:	193b      	adds	r3, r7, r4
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	2108      	movs	r1, #8
 800543a:	0018      	movs	r0, r3
 800543c:	f000 fb80 	bl	8005b40 <unsigned_bitwise_modulo>
 8005440:	1e03      	subs	r3, r0, #0
 8005442:	d000      	beq.n	8005446 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005444:	e0a7      	b.n	8005596 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005446:	230c      	movs	r3, #12
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	2108      	movs	r1, #8
 800544e:	0018      	movs	r0, r3
 8005450:	f000 fb76 	bl	8005b40 <unsigned_bitwise_modulo>
 8005454:	0003      	movs	r3, r0
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d117      	bne.n	800548a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800545a:	2316      	movs	r3, #22
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8005464:	2317      	movs	r3, #23
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	2202      	movs	r2, #2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e008      	b.n	8005480 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800546e:	2316      	movs	r3, #22
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d103      	bne.n	8005480 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005478:	2317      	movs	r3, #23
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	2100      	movs	r1, #0
 8005486:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005488:	e21f      	b.n	80058ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800548a:	230c      	movs	r3, #12
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	2108      	movs	r1, #8
 8005492:	0018      	movs	r0, r3
 8005494:	f000 fb54 	bl	8005b40 <unsigned_bitwise_modulo>
 8005498:	1e03      	subs	r3, r0, #0
 800549a:	d121      	bne.n	80054e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 800549c:	2212      	movs	r2, #18
 800549e:	18bb      	adds	r3, r7, r2
 80054a0:	18ba      	adds	r2, r7, r2
 80054a2:	8812      	ldrh	r2, [r2, #0]
 80054a4:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80054a6:	2210      	movs	r2, #16
 80054a8:	18bb      	adds	r3, r7, r2
 80054aa:	18ba      	adds	r2, r7, r2
 80054ac:	8812      	ldrh	r2, [r2, #0]
 80054ae:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80054b0:	2316      	movs	r3, #22
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054ba:	2317      	movs	r3, #23
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e008      	b.n	80054d6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80054c4:	2316      	movs	r3, #22
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d103      	bne.n	80054d6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054ce:	2317      	movs	r3, #23
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	2100      	movs	r1, #0
 80054dc:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80054de:	e1f4      	b.n	80058ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80054e0:	230c      	movs	r3, #12
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	2108      	movs	r1, #8
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 fb29 	bl	8005b40 <unsigned_bitwise_modulo>
 80054ee:	0003      	movs	r3, r0
 80054f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80054f2:	d821      	bhi.n	8005538 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80054f4:	2212      	movs	r2, #18
 80054f6:	18bb      	adds	r3, r7, r2
 80054f8:	18ba      	adds	r2, r7, r2
 80054fa:	8812      	ldrh	r2, [r2, #0]
 80054fc:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80054fe:	2210      	movs	r2, #16
 8005500:	18bb      	adds	r3, r7, r2
 8005502:	18ba      	adds	r2, r7, r2
 8005504:	8812      	ldrh	r2, [r2, #0]
 8005506:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005508:	2316      	movs	r3, #22
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005512:	2317      	movs	r3, #23
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	e008      	b.n	800552e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800551c:	2316      	movs	r3, #22
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d103      	bne.n	800552e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005526:	2317      	movs	r3, #23
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	2100      	movs	r1, #0
 8005534:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005536:	e1c8      	b.n	80058ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005538:	230c      	movs	r3, #12
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	2108      	movs	r1, #8
 8005540:	0018      	movs	r0, r3
 8005542:	f000 fafd 	bl	8005b40 <unsigned_bitwise_modulo>
 8005546:	0003      	movs	r3, r0
 8005548:	2b80      	cmp	r3, #128	@ 0x80
 800554a:	d800      	bhi.n	800554e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 800554c:	e1bd      	b.n	80058ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800554e:	2212      	movs	r2, #18
 8005550:	18bb      	adds	r3, r7, r2
 8005552:	18ba      	adds	r2, r7, r2
 8005554:	8812      	ldrh	r2, [r2, #0]
 8005556:	3a01      	subs	r2, #1
 8005558:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800555a:	2210      	movs	r2, #16
 800555c:	18bb      	adds	r3, r7, r2
 800555e:	18ba      	adds	r2, r7, r2
 8005560:	8812      	ldrh	r2, [r2, #0]
 8005562:	3201      	adds	r2, #1
 8005564:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005566:	2316      	movs	r3, #22
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005570:	2317      	movs	r3, #23
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	e008      	b.n	800558c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800557a:	2316      	movs	r3, #22
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d103      	bne.n	800558c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005584:	2317      	movs	r3, #23
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	2100      	movs	r1, #0
 8005592:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005594:	e199      	b.n	80058ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8005596:	2110      	movs	r1, #16
 8005598:	187b      	adds	r3, r7, r1
 800559a:	881a      	ldrh	r2, [r3, #0]
 800559c:	2380      	movs	r3, #128	@ 0x80
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d810      	bhi.n	80055c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	@ 0x80
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d000      	beq.n	80055b2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 80055b0:	e18c      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80055b2:	230c      	movs	r3, #12
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	2108      	movs	r1, #8
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 fac0 	bl	8005b40 <unsigned_bitwise_modulo>
 80055c0:	1e03      	subs	r3, r0, #0
 80055c2:	d100      	bne.n	80055c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 80055c4:	e182      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80055c6:	230c      	movs	r3, #12
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	2108      	movs	r1, #8
 80055ce:	0018      	movs	r0, r3
 80055d0:	f000 fab6 	bl	8005b40 <unsigned_bitwise_modulo>
 80055d4:	0003      	movs	r3, r0
 80055d6:	2b80      	cmp	r3, #128	@ 0x80
 80055d8:	d159      	bne.n	800568e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80055da:	2212      	movs	r2, #18
 80055dc:	18bb      	adds	r3, r7, r2
 80055de:	18ba      	adds	r2, r7, r2
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	3a01      	subs	r2, #1
 80055e4:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80055e6:	2110      	movs	r1, #16
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	187a      	adds	r2, r7, r1
 80055ec:	8812      	ldrh	r2, [r2, #0]
 80055ee:	3201      	adds	r2, #1
 80055f0:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80055f2:	000c      	movs	r4, r1
 80055f4:	187b      	adds	r3, r7, r1
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	2101      	movs	r1, #1
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 faa0 	bl	8005b40 <unsigned_bitwise_modulo>
 8005600:	1e03      	subs	r3, r0, #0
 8005602:	d121      	bne.n	8005648 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005604:	193b      	adds	r3, r7, r4
 8005606:	193a      	adds	r2, r7, r4
 8005608:	8812      	ldrh	r2, [r2, #0]
 800560a:	0852      	lsrs	r2, r2, #1
 800560c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800560e:	2316      	movs	r3, #22
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005618:	2317      	movs	r3, #23
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	2100      	movs	r1, #0
 8005626:	5499      	strb	r1, [r3, r2]
 8005628:	e150      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800562a:	2316      	movs	r3, #22
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d000      	beq.n	8005636 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8005634:	e14a      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005636:	2317      	movs	r3, #23
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]
 8005646:	e141      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005648:	2210      	movs	r2, #16
 800564a:	18bb      	adds	r3, r7, r2
 800564c:	18ba      	adds	r2, r7, r2
 800564e:	8812      	ldrh	r2, [r2, #0]
 8005650:	0852      	lsrs	r2, r2, #1
 8005652:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005654:	2316      	movs	r3, #22
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d108      	bne.n	8005670 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800565e:	2317      	movs	r3, #23
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	2100      	movs	r1, #0
 800566c:	5499      	strb	r1, [r3, r2]
 800566e:	e12d      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005670:	2316      	movs	r3, #22
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d000      	beq.n	800567c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 800567a:	e127      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800567c:	2317      	movs	r3, #23
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	2101      	movs	r1, #1
 800568a:	5499      	strb	r1, [r3, r2]
 800568c:	e11e      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800568e:	230c      	movs	r3, #12
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	2108      	movs	r1, #8
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fa52 	bl	8005b40 <unsigned_bitwise_modulo>
 800569c:	1e03      	subs	r3, r0, #0
 800569e:	d152      	bne.n	8005746 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80056a0:	2212      	movs	r2, #18
 80056a2:	18bb      	adds	r3, r7, r2
 80056a4:	18ba      	adds	r2, r7, r2
 80056a6:	8812      	ldrh	r2, [r2, #0]
 80056a8:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80056aa:	2410      	movs	r4, #16
 80056ac:	193b      	adds	r3, r7, r4
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	2101      	movs	r1, #1
 80056b2:	0018      	movs	r0, r3
 80056b4:	f000 fa44 	bl	8005b40 <unsigned_bitwise_modulo>
 80056b8:	1e03      	subs	r3, r0, #0
 80056ba:	d121      	bne.n	8005700 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80056bc:	193b      	adds	r3, r7, r4
 80056be:	193a      	adds	r2, r7, r4
 80056c0:	8812      	ldrh	r2, [r2, #0]
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80056c6:	2316      	movs	r3, #22
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d108      	bne.n	80056e2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80056d0:	2317      	movs	r3, #23
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	2100      	movs	r1, #0
 80056de:	5499      	strb	r1, [r3, r2]
 80056e0:	e0f4      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80056e2:	2316      	movs	r3, #22
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d000      	beq.n	80056ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 80056ec:	e0ee      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80056ee:	2317      	movs	r3, #23
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]
 80056fe:	e0e5      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005700:	2210      	movs	r2, #16
 8005702:	18bb      	adds	r3, r7, r2
 8005704:	18ba      	adds	r2, r7, r2
 8005706:	8812      	ldrh	r2, [r2, #0]
 8005708:	0852      	lsrs	r2, r2, #1
 800570a:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800570c:	2316      	movs	r3, #22
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d108      	bne.n	8005728 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005716:	2317      	movs	r3, #23
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	2100      	movs	r1, #0
 8005724:	5499      	strb	r1, [r3, r2]
 8005726:	e0d1      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005728:	2316      	movs	r3, #22
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d000      	beq.n	8005734 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8005732:	e0cb      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005734:	2317      	movs	r3, #23
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	2101      	movs	r1, #1
 8005742:	5499      	strb	r1, [r3, r2]
 8005744:	e0c2      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005746:	230c      	movs	r3, #12
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	2108      	movs	r1, #8
 800574e:	0018      	movs	r0, r3
 8005750:	f000 f9f6 	bl	8005b40 <unsigned_bitwise_modulo>
 8005754:	0003      	movs	r3, r0
 8005756:	2b7f      	cmp	r3, #127	@ 0x7f
 8005758:	d856      	bhi.n	8005808 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 800575a:	2212      	movs	r2, #18
 800575c:	18bb      	adds	r3, r7, r2
 800575e:	18ba      	adds	r2, r7, r2
 8005760:	8812      	ldrh	r2, [r2, #0]
 8005762:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005764:	2410      	movs	r4, #16
 8005766:	193b      	adds	r3, r7, r4
 8005768:	193a      	adds	r2, r7, r4
 800576a:	8812      	ldrh	r2, [r2, #0]
 800576c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800576e:	193b      	adds	r3, r7, r4
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	2101      	movs	r1, #1
 8005774:	0018      	movs	r0, r3
 8005776:	f000 f9e3 	bl	8005b40 <unsigned_bitwise_modulo>
 800577a:	1e03      	subs	r3, r0, #0
 800577c:	d121      	bne.n	80057c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800577e:	193b      	adds	r3, r7, r4
 8005780:	193a      	adds	r2, r7, r4
 8005782:	8812      	ldrh	r2, [r2, #0]
 8005784:	0852      	lsrs	r2, r2, #1
 8005786:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005788:	2316      	movs	r3, #22
 800578a:	18fb      	adds	r3, r7, r3
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d108      	bne.n	80057a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005792:	2317      	movs	r3, #23
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	2100      	movs	r1, #0
 80057a0:	5499      	strb	r1, [r3, r2]
 80057a2:	e093      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80057a4:	2316      	movs	r3, #22
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d000      	beq.n	80057b0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 80057ae:	e08d      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80057b0:	2317      	movs	r3, #23
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	2101      	movs	r1, #1
 80057be:	5499      	strb	r1, [r3, r2]
 80057c0:	e084      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80057c2:	2210      	movs	r2, #16
 80057c4:	18bb      	adds	r3, r7, r2
 80057c6:	18ba      	adds	r2, r7, r2
 80057c8:	8812      	ldrh	r2, [r2, #0]
 80057ca:	0852      	lsrs	r2, r2, #1
 80057cc:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80057ce:	2316      	movs	r3, #22
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d108      	bne.n	80057ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80057d8:	2317      	movs	r3, #23
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	2100      	movs	r1, #0
 80057e6:	5499      	strb	r1, [r3, r2]
 80057e8:	e070      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80057ea:	2316      	movs	r3, #22
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d000      	beq.n	80057f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 80057f4:	e06a      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80057f6:	2317      	movs	r3, #23
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	2101      	movs	r1, #1
 8005804:	5499      	strb	r1, [r3, r2]
 8005806:	e061      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005808:	230c      	movs	r3, #12
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	2108      	movs	r1, #8
 8005810:	0018      	movs	r0, r3
 8005812:	f000 f995 	bl	8005b40 <unsigned_bitwise_modulo>
 8005816:	0003      	movs	r3, r0
 8005818:	2b80      	cmp	r3, #128	@ 0x80
 800581a:	d957      	bls.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800581c:	2212      	movs	r2, #18
 800581e:	18bb      	adds	r3, r7, r2
 8005820:	18ba      	adds	r2, r7, r2
 8005822:	8812      	ldrh	r2, [r2, #0]
 8005824:	3a01      	subs	r2, #1
 8005826:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005828:	2410      	movs	r4, #16
 800582a:	193b      	adds	r3, r7, r4
 800582c:	193a      	adds	r2, r7, r4
 800582e:	8812      	ldrh	r2, [r2, #0]
 8005830:	3201      	adds	r2, #1
 8005832:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005834:	193b      	adds	r3, r7, r4
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	2101      	movs	r1, #1
 800583a:	0018      	movs	r0, r3
 800583c:	f000 f980 	bl	8005b40 <unsigned_bitwise_modulo>
 8005840:	1e03      	subs	r3, r0, #0
 8005842:	d120      	bne.n	8005886 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005844:	193b      	adds	r3, r7, r4
 8005846:	193a      	adds	r2, r7, r4
 8005848:	8812      	ldrh	r2, [r2, #0]
 800584a:	0852      	lsrs	r2, r2, #1
 800584c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800584e:	2316      	movs	r3, #22
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005858:	2317      	movs	r3, #23
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	2100      	movs	r1, #0
 8005866:	5499      	strb	r1, [r3, r2]
 8005868:	e030      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800586a:	2316      	movs	r3, #22
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d12b      	bne.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005874:	2317      	movs	r3, #23
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	2101      	movs	r1, #1
 8005882:	5499      	strb	r1, [r3, r2]
 8005884:	e022      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005886:	2210      	movs	r2, #16
 8005888:	18bb      	adds	r3, r7, r2
 800588a:	18ba      	adds	r2, r7, r2
 800588c:	8812      	ldrh	r2, [r2, #0]
 800588e:	0852      	lsrs	r2, r2, #1
 8005890:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005892:	2316      	movs	r3, #22
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d108      	bne.n	80058ae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800589c:	2317      	movs	r3, #23
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	2200      	movs	r2, #0
 80058a2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	2100      	movs	r1, #0
 80058aa:	5499      	strb	r1, [r3, r2]
 80058ac:	e00e      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80058ae:	2316      	movs	r3, #22
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d109      	bne.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80058b8:	2317      	movs	r3, #23
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	2101      	movs	r1, #1
 80058c6:	5499      	strb	r1, [r3, r2]
 80058c8:	e000      	b.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80058ca:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 80058cc:	2316      	movs	r3, #22
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d152      	bne.n	800597c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80058d6:	2317      	movs	r3, #23
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 80058e0:	2312      	movs	r3, #18
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	2280      	movs	r2, #128	@ 0x80
 80058e8:	0052      	lsls	r2, r2, #1
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	829a      	strh	r2, [r3, #20]
 80058f2:	e099      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80058f4:	2317      	movs	r3, #23
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d11b      	bne.n	8005936 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	89db      	ldrh	r3, [r3, #14]
 8005902:	b29b      	uxth	r3, r3
 8005904:	2101      	movs	r1, #1
 8005906:	0018      	movs	r0, r3
 8005908:	f000 f91a 	bl	8005b40 <unsigned_bitwise_modulo>
 800590c:	1e03      	subs	r3, r0, #0
 800590e:	d109      	bne.n	8005924 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005910:	2312      	movs	r3, #18
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	2280      	movs	r2, #128	@ 0x80
 8005918:	0052      	lsls	r2, r2, #1
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	829a      	strh	r2, [r3, #20]
 8005922:	e081      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8005924:	2312      	movs	r3, #18
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	22ff      	movs	r2, #255	@ 0xff
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	b29a      	uxth	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	829a      	strh	r2, [r3, #20]
 8005934:	e078      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005936:	2317      	movs	r3, #23
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d000      	beq.n	8005942 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8005940:	e072      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	89db      	ldrh	r3, [r3, #14]
 8005946:	b29b      	uxth	r3, r3
 8005948:	2101      	movs	r1, #1
 800594a:	0018      	movs	r0, r3
 800594c:	f000 f8f8 	bl	8005b40 <unsigned_bitwise_modulo>
 8005950:	1e03      	subs	r3, r0, #0
 8005952:	d109      	bne.n	8005968 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005954:	2312      	movs	r3, #18
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	2280      	movs	r2, #128	@ 0x80
 800595c:	0052      	lsls	r2, r2, #1
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	829a      	strh	r2, [r3, #20]
 8005966:	e05f      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8005968:	2312      	movs	r3, #18
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	2202      	movs	r2, #2
 8005970:	32ff      	adds	r2, #255	@ 0xff
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	829a      	strh	r2, [r3, #20]
 800597a:	e055      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 800597c:	2316      	movs	r3, #22
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d150      	bne.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005986:	2317      	movs	r3, #23
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d109      	bne.n	80059a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005990:	2310      	movs	r3, #16
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	2280      	movs	r2, #128	@ 0x80
 8005998:	0052      	lsls	r2, r2, #1
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	829a      	strh	r2, [r3, #20]
 80059a2:	e041      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80059a4:	2317      	movs	r3, #23
 80059a6:	18fb      	adds	r3, r7, r3
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d11b      	bne.n	80059e6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	89db      	ldrh	r3, [r3, #14]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2101      	movs	r1, #1
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 f8c2 	bl	8005b40 <unsigned_bitwise_modulo>
 80059bc:	1e03      	subs	r3, r0, #0
 80059be:	d109      	bne.n	80059d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80059c0:	2310      	movs	r3, #16
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	2280      	movs	r2, #128	@ 0x80
 80059c8:	0052      	lsls	r2, r2, #1
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	829a      	strh	r2, [r3, #20]
 80059d2:	e029      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 80059d4:	2310      	movs	r3, #16
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	22ff      	movs	r2, #255	@ 0xff
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	b29a      	uxth	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	829a      	strh	r2, [r3, #20]
 80059e4:	e020      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 80059e6:	2317      	movs	r3, #23
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d11b      	bne.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	89db      	ldrh	r3, [r3, #14]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2101      	movs	r1, #1
 80059f8:	0018      	movs	r0, r3
 80059fa:	f000 f8a1 	bl	8005b40 <unsigned_bitwise_modulo>
 80059fe:	1e03      	subs	r3, r0, #0
 8005a00:	d109      	bne.n	8005a16 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005a02:	2310      	movs	r3, #16
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	2280      	movs	r2, #128	@ 0x80
 8005a0a:	0052      	lsls	r2, r2, #1
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	829a      	strh	r2, [r3, #20]
 8005a14:	e008      	b.n	8005a28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8005a16:	2310      	movs	r3, #16
 8005a18:	18fb      	adds	r3, r7, r3
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	32ff      	adds	r2, #255	@ 0xff
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff fbf4 	bl	8005218 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8a9b      	ldrh	r3, [r3, #20]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2280      	movs	r2, #128	@ 0x80
 8005a38:	0052      	lsls	r2, r2, #1
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8adb      	ldrh	r3, [r3, #22]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8b9b      	ldrh	r3, [r3, #28]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	83da      	strh	r2, [r3, #30]

    return 1;
 8005a5e:	2301      	movs	r3, #1
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b007      	add	sp, #28
 8005a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a6c:	46c0      	nop			@ (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005a72:	b5b0      	push	{r4, r5, r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8005a7c:	250f      	movs	r5, #15
 8005a7e:	197c      	adds	r4, r7, r5
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f003 feec 	bl	8009864 <HAL_TIM_OC_Start_IT>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8005a90:	197b      	adds	r3, r7, r5
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <Start_OC_TIM+0x2a>

		Error_Handler();
 8005a98:	f7fc fbfc 	bl	8002294 <Error_Handler>
	}

	return ok;
 8005a9c:	230f      	movs	r3, #15
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	781b      	ldrb	r3, [r3, #0]
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b004      	add	sp, #16
 8005aa8:	bdb0      	pop	{r4, r5, r7, pc}

08005aaa <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005aaa:	b5b0      	push	{r4, r5, r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8005ab4:	250f      	movs	r5, #15
 8005ab6:	197c      	adds	r4, r7, r5
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0011      	movs	r1, r2
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f003 fff4 	bl	8009aac <HAL_TIM_OC_Stop_IT>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8005ac8:	197b      	adds	r3, r7, r5
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <Stop_OC_TIM+0x2a>

		Error_Handler();
 8005ad0:	f7fc fbe0 	bl	8002294 <Error_Handler>
	}

	return ok;
 8005ad4:	230f      	movs	r3, #15
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	781b      	ldrb	r3, [r3, #0]
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b004      	add	sp, #16
 8005ae0:	bdb0      	pop	{r4, r5, r7, pc}

08005ae2 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	0002      	movs	r2, r0
 8005aea:	1dbb      	adds	r3, r7, #6
 8005aec:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 8005aee:	230e      	movs	r3, #14
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	2202      	movs	r2, #2
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	e014      	b.n	8005b22 <isPrime+0x40>
        if (x % d == 0)
 8005af8:	1dba      	adds	r2, r7, #6
 8005afa:	230e      	movs	r3, #14
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	8812      	ldrh	r2, [r2, #0]
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	0019      	movs	r1, r3
 8005b04:	0010      	movs	r0, r2
 8005b06:	f7fa fb85 	bl	8000214 <__aeabi_uidivmod>
 8005b0a:	000b      	movs	r3, r1
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <isPrime+0x34>
            return NO;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e010      	b.n	8005b38 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8005b16:	210e      	movs	r1, #14
 8005b18:	187b      	adds	r3, r7, r1
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	187b      	adds	r3, r7, r1
 8005b1e:	3201      	adds	r2, #1
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	220e      	movs	r2, #14
 8005b24:	18bb      	adds	r3, r7, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	18ba      	adds	r2, r7, r2
 8005b2a:	8812      	ldrh	r2, [r2, #0]
 8005b2c:	435a      	muls	r2, r3
 8005b2e:	1dbb      	adds	r3, r7, #6
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	dde0      	ble.n	8005af8 <isPrime+0x16>
    }
    return YES;
 8005b36:	2301      	movs	r3, #1
}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b004      	add	sp, #16
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	000a      	movs	r2, r1
 8005b4a:	1cfb      	adds	r3, r7, #3
 8005b4c:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 8005b4e:	1cfb      	adds	r3, r7, #3
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2201      	movs	r2, #1
 8005b54:	409a      	lsls	r2, r3
 8005b56:	0013      	movs	r3, r2
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	001a      	movs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4013      	ands	r3, r2
}
 8005b60:	0018      	movs	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b002      	add	sp, #8
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8005b6c:	b662      	cpsie	i
}
 8005b6e:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8005b70:	2301      	movs	r3, #1
}
 8005b72:	0018      	movs	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	000a      	movs	r2, r1
 8005b82:	1cbb      	adds	r3, r7, #2
 8005b84:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	1cba      	adds	r2, r7, #2
 8005b8c:	8812      	ldrh	r2, [r2, #0]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d001      	beq.n	8005b96 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8005b96:	2300      	movs	r3, #0
    }
}
 8005b98:	0018      	movs	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	000a      	movs	r2, r1
 8005baa:	1cbb      	adds	r3, r7, #2
 8005bac:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	1cbb      	adds	r3, r7, #2
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	601a      	str	r2, [r3, #0]
}
 8005bbc:	46c0      	nop			@ (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b002      	add	sp, #8
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	000a      	movs	r2, r1
 8005bce:	1cbb      	adds	r3, r7, #2
 8005bd0:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	1cba      	adds	r2, r7, #2
 8005bd8:	8812      	ldrh	r2, [r2, #0]
 8005bda:	43d2      	mvns	r2, r2
 8005bdc:	401a      	ands	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	46c0      	nop			@ (mov r8, r8)
 8005be4:	46bd      	mov	sp, r7
 8005be6:	b002      	add	sp, #8
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005bec:	480d      	ldr	r0, [pc, #52]	@ (8005c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005bee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005bf0:	f7ff ff3a 	bl	8005a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005bf4:	480c      	ldr	r0, [pc, #48]	@ (8005c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8005bf6:	490d      	ldr	r1, [pc, #52]	@ (8005c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8005c30 <LoopForever+0xe>)
  movs r3, #0
 8005bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005bfc:	e002      	b.n	8005c04 <LoopCopyDataInit>

08005bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c02:	3304      	adds	r3, #4

08005c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c08:	d3f9      	bcc.n	8005bfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8005c38 <LoopForever+0x16>)
  movs r3, #0
 8005c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c10:	e001      	b.n	8005c16 <LoopFillZerobss>

08005c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c14:	3204      	adds	r2, #4

08005c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c18:	d3fb      	bcc.n	8005c12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005c1a:	f007 fb4d 	bl	800d2b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005c1e:	f7fe fab3 	bl	8004188 <main>

08005c22 <LoopForever>:

LoopForever:
  b LoopForever
 8005c22:	e7fe      	b.n	8005c22 <LoopForever>
  ldr   r0, =_estack
 8005c24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c2c:	200004d4 	.word	0x200004d4
  ldr r2, =_sidata
 8005c30:	0800ddd8 	.word	0x0800ddd8
  ldr r2, =_sbss
 8005c34:	200004d4 	.word	0x200004d4
  ldr r4, =_ebss
 8005c38:	20000d78 	.word	0x20000d78

08005c3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c3c:	e7fe      	b.n	8005c3c <ADC1_IRQHandler>
	...

08005c40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c46:	1dfb      	adds	r3, r7, #7
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <HAL_Init+0x3c>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <HAL_Init+0x3c>)
 8005c52:	2180      	movs	r1, #128	@ 0x80
 8005c54:	0049      	lsls	r1, r1, #1
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	f000 f810 	bl	8005c80 <HAL_InitTick>
 8005c60:	1e03      	subs	r3, r0, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e001      	b.n	8005c70 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005c6c:	f7fe fef8 	bl	8004a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c70:	1dfb      	adds	r3, r7, #7
 8005c72:	781b      	ldrb	r3, [r3, #0]
}
 8005c74:	0018      	movs	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b002      	add	sp, #8
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40022000 	.word	0x40022000

08005c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c88:	230f      	movs	r3, #15
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005c90:	4b1d      	ldr	r3, [pc, #116]	@ (8005d08 <HAL_InitTick+0x88>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d02b      	beq.n	8005cf0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005c98:	4b1c      	ldr	r3, [pc, #112]	@ (8005d0c <HAL_InitTick+0x8c>)
 8005c9a:	681c      	ldr	r4, [r3, #0]
 8005c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d08 <HAL_InitTick+0x88>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	0019      	movs	r1, r3
 8005ca2:	23fa      	movs	r3, #250	@ 0xfa
 8005ca4:	0098      	lsls	r0, r3, #2
 8005ca6:	f7fa fa2f 	bl	8000108 <__udivsi3>
 8005caa:	0003      	movs	r3, r0
 8005cac:	0019      	movs	r1, r3
 8005cae:	0020      	movs	r0, r4
 8005cb0:	f7fa fa2a 	bl	8000108 <__udivsi3>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f001 fb75 	bl	80073a6 <HAL_SYSTICK_Config>
 8005cbc:	1e03      	subs	r3, r0, #0
 8005cbe:	d112      	bne.n	8005ce6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d80a      	bhi.n	8005cdc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	2301      	movs	r3, #1
 8005cca:	425b      	negs	r3, r3
 8005ccc:	2200      	movs	r2, #0
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f001 fb34 	bl	800733c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d10 <HAL_InitTick+0x90>)
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	e00d      	b.n	8005cf8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005cdc:	230f      	movs	r3, #15
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	e008      	b.n	8005cf8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ce6:	230f      	movs	r3, #15
 8005ce8:	18fb      	adds	r3, r7, r3
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e003      	b.n	8005cf8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005cf0:	230f      	movs	r3, #15
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005cf8:	230f      	movs	r3, #15
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	781b      	ldrb	r3, [r3, #0]
}
 8005cfe:	0018      	movs	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b005      	add	sp, #20
 8005d04:	bd90      	pop	{r4, r7, pc}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	20000448 	.word	0x20000448
 8005d0c:	20000440 	.word	0x20000440
 8005d10:	20000444 	.word	0x20000444

08005d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d18:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <HAL_IncTick+0x1c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	001a      	movs	r2, r3
 8005d1e:	4b05      	ldr	r3, [pc, #20]	@ (8005d34 <HAL_IncTick+0x20>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	18d2      	adds	r2, r2, r3
 8005d24:	4b03      	ldr	r3, [pc, #12]	@ (8005d34 <HAL_IncTick+0x20>)
 8005d26:	601a      	str	r2, [r3, #0]
}
 8005d28:	46c0      	nop			@ (mov r8, r8)
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	46c0      	nop			@ (mov r8, r8)
 8005d30:	20000448 	.word	0x20000448
 8005d34:	20000d58 	.word	0x20000d58

08005d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8005d3c:	4b02      	ldr	r3, [pc, #8]	@ (8005d48 <HAL_GetTick+0x10>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
}
 8005d40:	0018      	movs	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	20000d58 	.word	0x20000d58

08005d4c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a05      	ldr	r2, [pc, #20]	@ (8005d70 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005d5c:	401a      	ands	r2, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	601a      	str	r2, [r3, #0]
}
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	b002      	add	sp, #8
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	fe3fffff 	.word	0xfe3fffff

08005d74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	23e0      	movs	r3, #224	@ 0xe0
 8005d82:	045b      	lsls	r3, r3, #17
 8005d84:	4013      	ands	r3, r2
}
 8005d86:	0018      	movs	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b002      	add	sp, #8
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	2104      	movs	r1, #4
 8005da2:	400a      	ands	r2, r1
 8005da4:	2107      	movs	r1, #7
 8005da6:	4091      	lsls	r1, r2
 8005da8:	000a      	movs	r2, r1
 8005daa:	43d2      	mvns	r2, r2
 8005dac:	401a      	ands	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2104      	movs	r1, #4
 8005db2:	400b      	ands	r3, r1
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4099      	lsls	r1, r3
 8005db8:	000b      	movs	r3, r1
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b004      	add	sp, #16
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	2104      	movs	r1, #4
 8005dda:	400a      	ands	r2, r1
 8005ddc:	2107      	movs	r1, #7
 8005dde:	4091      	lsls	r1, r2
 8005de0:	000a      	movs	r2, r1
 8005de2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2104      	movs	r1, #4
 8005de8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005dea:	40da      	lsrs	r2, r3
 8005dec:	0013      	movs	r3, r2
}
 8005dee:	0018      	movs	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b002      	add	sp, #8
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	23c0      	movs	r3, #192	@ 0xc0
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	4013      	ands	r3, r2
 8005e08:	d101      	bne.n	8005e0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	0018      	movs	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b002      	add	sp, #8
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	211f      	movs	r1, #31
 8005e2c:	400a      	ands	r2, r1
 8005e2e:	210f      	movs	r1, #15
 8005e30:	4091      	lsls	r1, r2
 8005e32:	000a      	movs	r2, r1
 8005e34:	43d2      	mvns	r2, r2
 8005e36:	401a      	ands	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	0e9b      	lsrs	r3, r3, #26
 8005e3c:	210f      	movs	r1, #15
 8005e3e:	4019      	ands	r1, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	201f      	movs	r0, #31
 8005e44:	4003      	ands	r3, r0
 8005e46:	4099      	lsls	r1, r3
 8005e48:	000b      	movs	r3, r1
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e50:	46c0      	nop			@ (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b004      	add	sp, #16
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	035b      	lsls	r3, r3, #13
 8005e6a:	0b5b      	lsrs	r3, r3, #13
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b002      	add	sp, #8
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	0352      	lsls	r2, r2, #13
 8005e8c:	0b52      	lsrs	r2, r2, #13
 8005e8e:	43d2      	mvns	r2, r2
 8005e90:	401a      	ands	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e96:	46c0      	nop			@ (mov r8, r8)
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b002      	add	sp, #8
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	0212      	lsls	r2, r2, #8
 8005eb4:	43d2      	mvns	r2, r2
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	400b      	ands	r3, r1
 8005ec0:	4904      	ldr	r1, [pc, #16]	@ (8005ed4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005ec2:	400b      	ands	r3, r1
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b004      	add	sp, #16
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	07ffff00 	.word	0x07ffff00

08005ed8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4a05      	ldr	r2, [pc, #20]	@ (8005efc <LL_ADC_EnableInternalRegulator+0x24>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2280      	movs	r2, #128	@ 0x80
 8005eea:	0552      	lsls	r2, r2, #21
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ef2:	46c0      	nop			@ (mov r8, r8)
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b002      	add	sp, #8
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	6fffffe8 	.word	0x6fffffe8

08005f00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	2380      	movs	r3, #128	@ 0x80
 8005f0e:	055b      	lsls	r3, r3, #21
 8005f10:	401a      	ands	r2, r3
 8005f12:	2380      	movs	r3, #128	@ 0x80
 8005f14:	055b      	lsls	r3, r3, #21
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d101      	bne.n	8005f1e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b002      	add	sp, #8
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4a04      	ldr	r2, [pc, #16]	@ (8005f48 <LL_ADC_Enable+0x20>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	2201      	movs	r2, #1
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005f40:	46c0      	nop			@ (mov r8, r8)
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b002      	add	sp, #8
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	7fffffe8 	.word	0x7fffffe8

08005f4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4a04      	ldr	r2, [pc, #16]	@ (8005f6c <LL_ADC_Disable+0x20>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005f64:	46c0      	nop			@ (mov r8, r8)
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	7fffffe8 	.word	0x7fffffe8

08005f70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <LL_ADC_IsEnabled+0x18>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <LL_ADC_IsEnabled+0x1a>
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b002      	add	sp, #8
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d101      	bne.n	8005faa <LL_ADC_IsDisableOngoing+0x18>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <LL_ADC_IsDisableOngoing+0x1a>
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	0018      	movs	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4a04      	ldr	r2, [pc, #16]	@ (8005fd4 <LL_ADC_REG_StartConversion+0x20>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005fcc:	46c0      	nop			@ (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b002      	add	sp, #8
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	7fffffe8 	.word	0x7fffffe8

08005fd8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	4a04      	ldr	r2, [pc, #16]	@ (8005ff8 <LL_ADC_REG_StopConversion+0x20>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2210      	movs	r2, #16
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005ff0:	46c0      	nop			@ (mov r8, r8)
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b002      	add	sp, #8
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	7fffffe8 	.word	0x7fffffe8

08005ffc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2204      	movs	r2, #4
 800600a:	4013      	ands	r3, r2
 800600c:	2b04      	cmp	r3, #4
 800600e:	d101      	bne.n	8006014 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006014:	2300      	movs	r3, #0
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b002      	add	sp, #8
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006028:	231f      	movs	r3, #31
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006030:	2300      	movs	r3, #0
 8006032:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e19f      	b.n	8006386 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604a:	2b00      	cmp	r3, #0
 800604c:	d12a      	bne.n	80060a4 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4acf      	ldr	r2, [pc, #828]	@ (8006390 <HAL_ADC_Init+0x370>)
 8006052:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4acf      	ldr	r2, [pc, #828]	@ (8006394 <HAL_ADC_Init+0x374>)
 8006058:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4ace      	ldr	r2, [pc, #824]	@ (8006398 <HAL_ADC_Init+0x378>)
 800605e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4ace      	ldr	r2, [pc, #824]	@ (800639c <HAL_ADC_Init+0x37c>)
 8006064:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4acd      	ldr	r2, [pc, #820]	@ (80063a0 <HAL_ADC_Init+0x380>)
 800606a:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4acd      	ldr	r2, [pc, #820]	@ (80063a4 <HAL_ADC_Init+0x384>)
 8006070:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4acc      	ldr	r2, [pc, #816]	@ (80063a8 <HAL_ADC_Init+0x388>)
 8006076:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2280      	movs	r2, #128	@ 0x80
 800607c:	589b      	ldr	r3, [r3, r2]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2180      	movs	r1, #128	@ 0x80
 8006086:	4ac9      	ldr	r2, [pc, #804]	@ (80063ac <HAL_ADC_Init+0x38c>)
 8006088:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2280      	movs	r2, #128	@ 0x80
 800608e:	589b      	ldr	r3, [r3, r2]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	0010      	movs	r0, r2
 8006094:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2254      	movs	r2, #84	@ 0x54
 80060a0:	2100      	movs	r1, #0
 80060a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f7ff ff29 	bl	8005f00 <LL_ADC_IsInternalRegulatorEnabled>
 80060ae:	1e03      	subs	r3, r0, #0
 80060b0:	d115      	bne.n	80060de <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	0018      	movs	r0, r3
 80060b8:	f7ff ff0e 	bl	8005ed8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060bc:	4bbc      	ldr	r3, [pc, #752]	@ (80063b0 <HAL_ADC_Init+0x390>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	49bc      	ldr	r1, [pc, #752]	@ (80063b4 <HAL_ADC_Init+0x394>)
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7fa f820 	bl	8000108 <__udivsi3>
 80060c8:	0003      	movs	r3, r0
 80060ca:	3301      	adds	r3, #1
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80060d0:	e002      	b.n	80060d8 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f9      	bne.n	80060d2 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	0018      	movs	r0, r3
 80060e4:	f7ff ff0c 	bl	8005f00 <LL_ADC_IsInternalRegulatorEnabled>
 80060e8:	1e03      	subs	r3, r0, #0
 80060ea:	d10f      	bne.n	800610c <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f0:	2210      	movs	r2, #16
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fc:	2201      	movs	r2, #1
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006104:	231f      	movs	r3, #31
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	2201      	movs	r2, #1
 800610a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	0018      	movs	r0, r3
 8006112:	f7ff ff73 	bl	8005ffc <LL_ADC_REG_IsConversionOngoing>
 8006116:	0003      	movs	r3, r0
 8006118:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611e:	2210      	movs	r2, #16
 8006120:	4013      	ands	r3, r2
 8006122:	d000      	beq.n	8006126 <HAL_ADC_Init+0x106>
 8006124:	e122      	b.n	800636c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d000      	beq.n	800612e <HAL_ADC_Init+0x10e>
 800612c:	e11e      	b.n	800636c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006132:	4aa1      	ldr	r2, [pc, #644]	@ (80063b8 <HAL_ADC_Init+0x398>)
 8006134:	4013      	ands	r3, r2
 8006136:	2202      	movs	r2, #2
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	0018      	movs	r0, r3
 8006144:	f7ff ff14 	bl	8005f70 <LL_ADC_IsEnabled>
 8006148:	1e03      	subs	r3, r0, #0
 800614a:	d000      	beq.n	800614e <HAL_ADC_Init+0x12e>
 800614c:	e0ad      	b.n	80062aa <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	7e1b      	ldrb	r3, [r3, #24]
 8006156:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006158:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7e5b      	ldrb	r3, [r3, #25]
 800615e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006160:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7e9b      	ldrb	r3, [r3, #26]
 8006166:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006168:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_ADC_Init+0x158>
 8006172:	2380      	movs	r3, #128	@ 0x80
 8006174:	015b      	lsls	r3, r3, #5
 8006176:	e000      	b.n	800617a <HAL_ADC_Init+0x15a>
 8006178:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800617a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006180:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	da04      	bge.n	8006194 <HAL_ADC_Init+0x174>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	085b      	lsrs	r3, r3, #1
 8006192:	e001      	b.n	8006198 <HAL_ADC_Init+0x178>
 8006194:	2380      	movs	r3, #128	@ 0x80
 8006196:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8006198:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	212c      	movs	r1, #44	@ 0x2c
 800619e:	5c5b      	ldrb	r3, [r3, r1]
 80061a0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80061a2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	5c9b      	ldrb	r3, [r3, r2]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d115      	bne.n	80061e0 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7e9b      	ldrb	r3, [r3, #26]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d105      	bne.n	80061c8 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2280      	movs	r2, #128	@ 0x80
 80061c0:	0252      	lsls	r2, r2, #9
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	e00b      	b.n	80061e0 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061cc:	2220      	movs	r2, #32
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d8:	2201      	movs	r2, #1
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061ec:	23e0      	movs	r3, #224	@ 0xe0
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80061f6:	4313      	orrs	r3, r2
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4a6d      	ldr	r2, [pc, #436]	@ (80063bc <HAL_ADC_Init+0x39c>)
 8006206:	4013      	ands	r3, r2
 8006208:	0019      	movs	r1, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	430a      	orrs	r2, r1
 8006212:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	0f9b      	lsrs	r3, r3, #30
 800621a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006220:	4313      	orrs	r3, r2
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	223c      	movs	r2, #60	@ 0x3c
 800622c:	5c9b      	ldrb	r3, [r3, r2]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d111      	bne.n	8006256 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	0f9b      	lsrs	r3, r3, #30
 8006238:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800623e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006244:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800624a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	2201      	movs	r2, #1
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	4a58      	ldr	r2, [pc, #352]	@ (80063c0 <HAL_ADC_Init+0x3a0>)
 800625e:	4013      	ands	r3, r2
 8006260:	0019      	movs	r1, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	430a      	orrs	r2, r1
 800626a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	23c0      	movs	r3, #192	@ 0xc0
 8006272:	061b      	lsls	r3, r3, #24
 8006274:	429a      	cmp	r2, r3
 8006276:	d018      	beq.n	80062aa <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800627c:	2380      	movs	r3, #128	@ 0x80
 800627e:	05db      	lsls	r3, r3, #23
 8006280:	429a      	cmp	r2, r3
 8006282:	d012      	beq.n	80062aa <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006288:	2380      	movs	r3, #128	@ 0x80
 800628a:	061b      	lsls	r3, r3, #24
 800628c:	429a      	cmp	r2, r3
 800628e:	d00c      	beq.n	80062aa <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006290:	4b4c      	ldr	r3, [pc, #304]	@ (80063c4 <HAL_ADC_Init+0x3a4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a4c      	ldr	r2, [pc, #304]	@ (80063c8 <HAL_ADC_Init+0x3a8>)
 8006296:	4013      	ands	r3, r2
 8006298:	0019      	movs	r1, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	23f0      	movs	r3, #240	@ 0xf0
 80062a0:	039b      	lsls	r3, r3, #14
 80062a2:	401a      	ands	r2, r3
 80062a4:	4b47      	ldr	r3, [pc, #284]	@ (80063c4 <HAL_ADC_Init+0x3a4>)
 80062a6:	430a      	orrs	r2, r1
 80062a8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b2:	001a      	movs	r2, r3
 80062b4:	2100      	movs	r1, #0
 80062b6:	f7ff fd6a 	bl	8005d8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c2:	4942      	ldr	r1, [pc, #264]	@ (80063cc <HAL_ADC_Init+0x3ac>)
 80062c4:	001a      	movs	r2, r3
 80062c6:	f7ff fd62 	bl	8005d8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2110      	movs	r1, #16
 80062de:	4249      	negs	r1, r1
 80062e0:	430a      	orrs	r2, r1
 80062e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80062e4:	e018      	b.n	8006318 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	2380      	movs	r3, #128	@ 0x80
 80062ec:	039b      	lsls	r3, r3, #14
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d112      	bne.n	8006318 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	221c      	movs	r2, #28
 8006302:	4013      	ands	r3, r2
 8006304:	2210      	movs	r2, #16
 8006306:	4252      	negs	r2, r2
 8006308:	409a      	lsls	r2, r3
 800630a:	0011      	movs	r1, r2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2100      	movs	r1, #0
 800631e:	0018      	movs	r0, r3
 8006320:	f7ff fd52 	bl	8005dc8 <LL_ADC_GetSamplingTimeCommonChannels>
 8006324:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800632a:	429a      	cmp	r2, r3
 800632c:	d10b      	bne.n	8006346 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006338:	2203      	movs	r2, #3
 800633a:	4393      	bics	r3, r2
 800633c:	2201      	movs	r2, #1
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006344:	e01c      	b.n	8006380 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634a:	2212      	movs	r2, #18
 800634c:	4393      	bics	r3, r2
 800634e:	2210      	movs	r2, #16
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800635a:	2201      	movs	r2, #1
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006362:	231f      	movs	r3, #31
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800636a:	e009      	b.n	8006380 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006370:	2210      	movs	r2, #16
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006378:	231f      	movs	r3, #31
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	2201      	movs	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006380:	231f      	movs	r3, #31
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	781b      	ldrb	r3, [r3, #0]
}
 8006386:	0018      	movs	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	b008      	add	sp, #32
 800638c:	bd80      	pop	{r7, pc}
 800638e:	46c0      	nop			@ (mov r8, r8)
 8006390:	080066e9 	.word	0x080066e9
 8006394:	080066f9 	.word	0x080066f9
 8006398:	08006709 	.word	0x08006709
 800639c:	08006719 	.word	0x08006719
 80063a0:	08007171 	.word	0x08007171
 80063a4:	08007181 	.word	0x08007181
 80063a8:	08007191 	.word	0x08007191
 80063ac:	08004aa9 	.word	0x08004aa9
 80063b0:	20000440 	.word	0x20000440
 80063b4:	00030d40 	.word	0x00030d40
 80063b8:	fffffefd 	.word	0xfffffefd
 80063bc:	ffde0201 	.word	0xffde0201
 80063c0:	1ffffc02 	.word	0x1ffffc02
 80063c4:	40012708 	.word	0x40012708
 80063c8:	ffc3ffff 	.word	0xffc3ffff
 80063cc:	07ffff04 	.word	0x07ffff04

080063d0 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	230b      	movs	r3, #11
 80063dc:	18fb      	adds	r3, r7, r3
 80063de:	1c0a      	adds	r2, r1, #0
 80063e0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2317      	movs	r3, #23
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d107      	bne.n	8006400 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063f4:	2210      	movs	r2, #16
 80063f6:	431a      	orrs	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e06d      	b.n	80064dc <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006404:	2201      	movs	r2, #1
 8006406:	4013      	ands	r3, r2
 8006408:	d03a      	beq.n	8006480 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 800640a:	230b      	movs	r3, #11
 800640c:	18fb      	adds	r3, r7, r3
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b0a      	cmp	r3, #10
 8006412:	d82a      	bhi.n	800646a <HAL_ADC_RegisterCallback+0x9a>
 8006414:	009a      	lsls	r2, r3, #2
 8006416:	4b33      	ldr	r3, [pc, #204]	@ (80064e4 <HAL_ADC_RegisterCallback+0x114>)
 8006418:	18d3      	adds	r3, r2, r3
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006424:	e057      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800642c:	e053      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006434:	e04f      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800643c:	e04b      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006444:	e047      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800644c:	e043      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006454:	e03f      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2180      	movs	r1, #128	@ 0x80
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	505a      	str	r2, [r3, r1]
        break;
 800645e:	e03a      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2184      	movs	r1, #132	@ 0x84
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	505a      	str	r2, [r3, r1]
        break;
 8006468:	e035      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646e:	2210      	movs	r2, #16
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006476:	2317      	movs	r3, #23
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
        break;
 800647e:	e02a      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11c      	bne.n	80064c2 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8006488:	230b      	movs	r3, #11
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b09      	cmp	r3, #9
 8006490:	d002      	beq.n	8006498 <HAL_ADC_RegisterCallback+0xc8>
 8006492:	2b0a      	cmp	r3, #10
 8006494:	d005      	beq.n	80064a2 <HAL_ADC_RegisterCallback+0xd2>
 8006496:	e009      	b.n	80064ac <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2180      	movs	r1, #128	@ 0x80
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	505a      	str	r2, [r3, r1]
        break;
 80064a0:	e019      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2184      	movs	r1, #132	@ 0x84
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	505a      	str	r2, [r3, r1]
        break;
 80064aa:	e014      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b0:	2210      	movs	r2, #16
 80064b2:	431a      	orrs	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80064b8:	2317      	movs	r3, #23
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	2201      	movs	r2, #1
 80064be:	701a      	strb	r2, [r3, #0]
        break;
 80064c0:	e009      	b.n	80064d6 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c6:	2210      	movs	r2, #16
 80064c8:	431a      	orrs	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 80064ce:	2317      	movs	r3, #23
 80064d0:	18fb      	adds	r3, r7, r3
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80064d6:	2317      	movs	r3, #23
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	781b      	ldrb	r3, [r3, #0]
}
 80064dc:	0018      	movs	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	b006      	add	sp, #24
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	0800dbdc 	.word	0x0800dbdc

080064e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80064e8:	b5b0      	push	{r4, r5, r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	0018      	movs	r0, r3
 80064fa:	f7ff fd7f 	bl	8005ffc <LL_ADC_REG_IsConversionOngoing>
 80064fe:	1e03      	subs	r3, r0, #0
 8006500:	d16c      	bne.n	80065dc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2254      	movs	r2, #84	@ 0x54
 8006506:	5c9b      	ldrb	r3, [r3, r2]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_ADC_Start_DMA+0x28>
 800650c:	2302      	movs	r3, #2
 800650e:	e06c      	b.n	80065ea <HAL_ADC_Start_DMA+0x102>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2254      	movs	r2, #84	@ 0x54
 8006514:	2101      	movs	r1, #1
 8006516:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	4013      	ands	r3, r2
 8006522:	d113      	bne.n	800654c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	0018      	movs	r0, r3
 800652a:	f7ff fd21 	bl	8005f70 <LL_ADC_IsEnabled>
 800652e:	1e03      	subs	r3, r0, #0
 8006530:	d004      	beq.n	800653c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	0018      	movs	r0, r3
 8006538:	f7ff fd08 	bl	8005f4c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2101      	movs	r1, #1
 8006548:	430a      	orrs	r2, r1
 800654a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800654c:	2517      	movs	r5, #23
 800654e:	197c      	adds	r4, r7, r5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	0018      	movs	r0, r3
 8006554:	f000 fb02 	bl	8006b5c <ADC_Enable>
 8006558:	0003      	movs	r3, r0
 800655a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800655c:	002c      	movs	r4, r5
 800655e:	193b      	adds	r3, r7, r4
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d13e      	bne.n	80065e4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	4a22      	ldr	r2, [pc, #136]	@ (80065f4 <HAL_ADC_Start_DMA+0x10c>)
 800656c:	4013      	ands	r3, r2
 800656e:	2280      	movs	r2, #128	@ 0x80
 8006570:	0052      	lsls	r2, r2, #1
 8006572:	431a      	orrs	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006582:	4a1d      	ldr	r2, [pc, #116]	@ (80065f8 <HAL_ADC_Start_DMA+0x110>)
 8006584:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800658a:	4a1c      	ldr	r2, [pc, #112]	@ (80065fc <HAL_ADC_Start_DMA+0x114>)
 800658c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006592:	4a1b      	ldr	r2, [pc, #108]	@ (8006600 <HAL_ADC_Start_DMA+0x118>)
 8006594:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	221c      	movs	r2, #28
 800659c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2254      	movs	r2, #84	@ 0x54
 80065a2:	2100      	movs	r1, #0
 80065a4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2110      	movs	r1, #16
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3340      	adds	r3, #64	@ 0x40
 80065c0:	0019      	movs	r1, r3
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	193c      	adds	r4, r7, r4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f000 ff84 	bl	80074d4 <HAL_DMA_Start_IT>
 80065cc:	0003      	movs	r3, r0
 80065ce:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f7ff fced 	bl	8005fb4 <LL_ADC_REG_StartConversion>
 80065da:	e003      	b.n	80065e4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80065dc:	2317      	movs	r3, #23
 80065de:	18fb      	adds	r3, r7, r3
 80065e0:	2202      	movs	r2, #2
 80065e2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80065e4:	2317      	movs	r3, #23
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	781b      	ldrb	r3, [r3, #0]
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b006      	add	sp, #24
 80065f0:	bdb0      	pop	{r4, r5, r7, pc}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	fffff0fe 	.word	0xfffff0fe
 80065f8:	08006d25 	.word	0x08006d25
 80065fc:	08006df1 	.word	0x08006df1
 8006600:	08006e11 	.word	0x08006e11

08006604 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006604:	b5b0      	push	{r4, r5, r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2254      	movs	r2, #84	@ 0x54
 8006610:	5c9b      	ldrb	r3, [r3, r2]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_ADC_Stop_DMA+0x16>
 8006616:	2302      	movs	r3, #2
 8006618:	e05f      	b.n	80066da <HAL_ADC_Stop_DMA+0xd6>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2254      	movs	r2, #84	@ 0x54
 800661e:	2101      	movs	r1, #1
 8006620:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006622:	250f      	movs	r5, #15
 8006624:	197c      	adds	r4, r7, r5
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	0018      	movs	r0, r3
 800662a:	f000 fa55 	bl	8006ad8 <ADC_ConversionStop>
 800662e:	0003      	movs	r3, r0
 8006630:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006632:	0029      	movs	r1, r5
 8006634:	187b      	adds	r3, r7, r1
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d147      	bne.n	80066cc <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006640:	2225      	movs	r2, #37	@ 0x25
 8006642:	5c9b      	ldrb	r3, [r3, r2]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d112      	bne.n	8006670 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664e:	000d      	movs	r5, r1
 8006650:	187c      	adds	r4, r7, r1
 8006652:	0018      	movs	r0, r3
 8006654:	f000 ffc4 	bl	80075e0 <HAL_DMA_Abort>
 8006658:	0003      	movs	r3, r0
 800665a:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800665c:	197b      	adds	r3, r7, r5
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006668:	2240      	movs	r2, #64	@ 0x40
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2110      	movs	r1, #16
 800667c:	438a      	bics	r2, r1
 800667e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006680:	220f      	movs	r2, #15
 8006682:	18bb      	adds	r3, r7, r2
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d107      	bne.n	800669a <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800668a:	18bc      	adds	r4, r7, r2
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	0018      	movs	r0, r3
 8006690:	f000 faea 	bl	8006c68 <ADC_Disable>
 8006694:	0003      	movs	r3, r0
 8006696:	7023      	strb	r3, [r4, #0]
 8006698:	e003      	b.n	80066a2 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	0018      	movs	r0, r3
 800669e:	f000 fae3 	bl	8006c68 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80066a2:	230f      	movs	r3, #15
 80066a4:	18fb      	adds	r3, r7, r3
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d107      	bne.n	80066bc <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b0:	4a0c      	ldr	r2, [pc, #48]	@ (80066e4 <HAL_ADC_Stop_DMA+0xe0>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	2201      	movs	r2, #1
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2101      	movs	r1, #1
 80066c8:	438a      	bics	r2, r1
 80066ca:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2254      	movs	r2, #84	@ 0x54
 80066d0:	2100      	movs	r1, #0
 80066d2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80066d4:	230f      	movs	r3, #15
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	781b      	ldrb	r3, [r3, #0]
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b004      	add	sp, #16
 80066e0:	bdb0      	pop	{r4, r5, r7, pc}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	fffffefe 	.word	0xfffffefe

080066e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80066f0:	46c0      	nop			@ (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b002      	add	sp, #8
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006700:	46c0      	nop			@ (mov r8, r8)
 8006702:	46bd      	mov	sp, r7
 8006704:	b002      	add	sp, #8
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006710:	46c0      	nop			@ (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b002      	add	sp, #8
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006720:	46c0      	nop			@ (mov r8, r8)
 8006722:	46bd      	mov	sp, r7
 8006724:	b002      	add	sp, #8
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006732:	2317      	movs	r3, #23
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2254      	movs	r2, #84	@ 0x54
 8006742:	5c9b      	ldrb	r3, [r3, r2]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_ADC_ConfigChannel+0x24>
 8006748:	2302      	movs	r3, #2
 800674a:	e1c0      	b.n	8006ace <HAL_ADC_ConfigChannel+0x3a6>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2254      	movs	r2, #84	@ 0x54
 8006750:	2101      	movs	r1, #1
 8006752:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	0018      	movs	r0, r3
 800675a:	f7ff fc4f 	bl	8005ffc <LL_ADC_REG_IsConversionOngoing>
 800675e:	1e03      	subs	r3, r0, #0
 8006760:	d000      	beq.n	8006764 <HAL_ADC_ConfigChannel+0x3c>
 8006762:	e1a3      	b.n	8006aac <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d100      	bne.n	800676e <HAL_ADC_ConfigChannel+0x46>
 800676c:	e143      	b.n	80069f6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	2380      	movs	r3, #128	@ 0x80
 8006774:	061b      	lsls	r3, r3, #24
 8006776:	429a      	cmp	r2, r3
 8006778:	d004      	beq.n	8006784 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800677e:	4ac1      	ldr	r2, [pc, #772]	@ (8006a84 <HAL_ADC_ConfigChannel+0x35c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d108      	bne.n	8006796 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	0019      	movs	r1, r3
 800678e:	0010      	movs	r0, r2
 8006790:	f7ff fb62 	bl	8005e58 <LL_ADC_REG_SetSequencerChAdd>
 8006794:	e0c9      	b.n	800692a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	211f      	movs	r1, #31
 80067a0:	400b      	ands	r3, r1
 80067a2:	210f      	movs	r1, #15
 80067a4:	4099      	lsls	r1, r3
 80067a6:	000b      	movs	r3, r1
 80067a8:	43db      	mvns	r3, r3
 80067aa:	4013      	ands	r3, r2
 80067ac:	0019      	movs	r1, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	035b      	lsls	r3, r3, #13
 80067b4:	0b5b      	lsrs	r3, r3, #13
 80067b6:	d105      	bne.n	80067c4 <HAL_ADC_ConfigChannel+0x9c>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	0e9b      	lsrs	r3, r3, #26
 80067be:	221f      	movs	r2, #31
 80067c0:	4013      	ands	r3, r2
 80067c2:	e098      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2201      	movs	r2, #1
 80067ca:	4013      	ands	r3, r2
 80067cc:	d000      	beq.n	80067d0 <HAL_ADC_ConfigChannel+0xa8>
 80067ce:	e091      	b.n	80068f4 <HAL_ADC_ConfigChannel+0x1cc>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2202      	movs	r2, #2
 80067d6:	4013      	ands	r3, r2
 80067d8:	d000      	beq.n	80067dc <HAL_ADC_ConfigChannel+0xb4>
 80067da:	e089      	b.n	80068f0 <HAL_ADC_ConfigChannel+0x1c8>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2204      	movs	r2, #4
 80067e2:	4013      	ands	r3, r2
 80067e4:	d000      	beq.n	80067e8 <HAL_ADC_ConfigChannel+0xc0>
 80067e6:	e081      	b.n	80068ec <HAL_ADC_ConfigChannel+0x1c4>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2208      	movs	r2, #8
 80067ee:	4013      	ands	r3, r2
 80067f0:	d000      	beq.n	80067f4 <HAL_ADC_ConfigChannel+0xcc>
 80067f2:	e079      	b.n	80068e8 <HAL_ADC_ConfigChannel+0x1c0>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2210      	movs	r2, #16
 80067fa:	4013      	ands	r3, r2
 80067fc:	d000      	beq.n	8006800 <HAL_ADC_ConfigChannel+0xd8>
 80067fe:	e071      	b.n	80068e4 <HAL_ADC_ConfigChannel+0x1bc>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2220      	movs	r2, #32
 8006806:	4013      	ands	r3, r2
 8006808:	d000      	beq.n	800680c <HAL_ADC_ConfigChannel+0xe4>
 800680a:	e069      	b.n	80068e0 <HAL_ADC_ConfigChannel+0x1b8>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2240      	movs	r2, #64	@ 0x40
 8006812:	4013      	ands	r3, r2
 8006814:	d000      	beq.n	8006818 <HAL_ADC_ConfigChannel+0xf0>
 8006816:	e061      	b.n	80068dc <HAL_ADC_ConfigChannel+0x1b4>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2280      	movs	r2, #128	@ 0x80
 800681e:	4013      	ands	r3, r2
 8006820:	d000      	beq.n	8006824 <HAL_ADC_ConfigChannel+0xfc>
 8006822:	e059      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x1b0>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	2380      	movs	r3, #128	@ 0x80
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	4013      	ands	r3, r2
 800682e:	d151      	bne.n	80068d4 <HAL_ADC_ConfigChannel+0x1ac>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	2380      	movs	r3, #128	@ 0x80
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4013      	ands	r3, r2
 800683a:	d149      	bne.n	80068d0 <HAL_ADC_ConfigChannel+0x1a8>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	2380      	movs	r3, #128	@ 0x80
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4013      	ands	r3, r2
 8006846:	d141      	bne.n	80068cc <HAL_ADC_ConfigChannel+0x1a4>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	2380      	movs	r3, #128	@ 0x80
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	4013      	ands	r3, r2
 8006852:	d139      	bne.n	80068c8 <HAL_ADC_ConfigChannel+0x1a0>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	2380      	movs	r3, #128	@ 0x80
 800685a:	015b      	lsls	r3, r3, #5
 800685c:	4013      	ands	r3, r2
 800685e:	d131      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x19c>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	2380      	movs	r3, #128	@ 0x80
 8006866:	019b      	lsls	r3, r3, #6
 8006868:	4013      	ands	r3, r2
 800686a:	d129      	bne.n	80068c0 <HAL_ADC_ConfigChannel+0x198>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	2380      	movs	r3, #128	@ 0x80
 8006872:	01db      	lsls	r3, r3, #7
 8006874:	4013      	ands	r3, r2
 8006876:	d121      	bne.n	80068bc <HAL_ADC_ConfigChannel+0x194>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	2380      	movs	r3, #128	@ 0x80
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	4013      	ands	r3, r2
 8006882:	d119      	bne.n	80068b8 <HAL_ADC_ConfigChannel+0x190>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	2380      	movs	r3, #128	@ 0x80
 800688a:	025b      	lsls	r3, r3, #9
 800688c:	4013      	ands	r3, r2
 800688e:	d111      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x18c>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	2380      	movs	r3, #128	@ 0x80
 8006896:	029b      	lsls	r3, r3, #10
 8006898:	4013      	ands	r3, r2
 800689a:	d109      	bne.n	80068b0 <HAL_ADC_ConfigChannel+0x188>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	2380      	movs	r3, #128	@ 0x80
 80068a2:	02db      	lsls	r3, r3, #11
 80068a4:	4013      	ands	r3, r2
 80068a6:	d001      	beq.n	80068ac <HAL_ADC_ConfigChannel+0x184>
 80068a8:	2312      	movs	r3, #18
 80068aa:	e024      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068ac:	2300      	movs	r3, #0
 80068ae:	e022      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068b0:	2311      	movs	r3, #17
 80068b2:	e020      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068b4:	2310      	movs	r3, #16
 80068b6:	e01e      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068b8:	230f      	movs	r3, #15
 80068ba:	e01c      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068bc:	230e      	movs	r3, #14
 80068be:	e01a      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068c0:	230d      	movs	r3, #13
 80068c2:	e018      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068c4:	230c      	movs	r3, #12
 80068c6:	e016      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068c8:	230b      	movs	r3, #11
 80068ca:	e014      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068cc:	230a      	movs	r3, #10
 80068ce:	e012      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068d0:	2309      	movs	r3, #9
 80068d2:	e010      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068d4:	2308      	movs	r3, #8
 80068d6:	e00e      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068d8:	2307      	movs	r3, #7
 80068da:	e00c      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068dc:	2306      	movs	r3, #6
 80068de:	e00a      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068e0:	2305      	movs	r3, #5
 80068e2:	e008      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068e4:	2304      	movs	r3, #4
 80068e6:	e006      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068e8:	2303      	movs	r3, #3
 80068ea:	e004      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e002      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x1ce>
 80068f4:	2300      	movs	r3, #0
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	6852      	ldr	r2, [r2, #4]
 80068fa:	201f      	movs	r0, #31
 80068fc:	4002      	ands	r2, r0
 80068fe:	4093      	lsls	r3, r2
 8006900:	000a      	movs	r2, r1
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	089b      	lsrs	r3, r3, #2
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	429a      	cmp	r2, r3
 8006916:	d808      	bhi.n	800692a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6859      	ldr	r1, [r3, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	001a      	movs	r2, r3
 8006926:	f7ff fa77 	bl	8005e18 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	001a      	movs	r2, r3
 8006938:	f7ff fab2 	bl	8005ea0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	db00      	blt.n	8006946 <HAL_ADC_ConfigChannel+0x21e>
 8006944:	e0bc      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006946:	4b50      	ldr	r3, [pc, #320]	@ (8006a88 <HAL_ADC_ConfigChannel+0x360>)
 8006948:	0018      	movs	r0, r3
 800694a:	f7ff fa13 	bl	8005d74 <LL_ADC_GetCommonPathInternalCh>
 800694e:	0003      	movs	r3, r0
 8006950:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a4d      	ldr	r2, [pc, #308]	@ (8006a8c <HAL_ADC_ConfigChannel+0x364>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d122      	bne.n	80069a2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	2380      	movs	r3, #128	@ 0x80
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006964:	d11d      	bne.n	80069a2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2280      	movs	r2, #128	@ 0x80
 800696a:	0412      	lsls	r2, r2, #16
 800696c:	4313      	orrs	r3, r2
 800696e:	4a46      	ldr	r2, [pc, #280]	@ (8006a88 <HAL_ADC_ConfigChannel+0x360>)
 8006970:	0019      	movs	r1, r3
 8006972:	0010      	movs	r0, r2
 8006974:	f7ff f9ea 	bl	8005d4c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006978:	4b45      	ldr	r3, [pc, #276]	@ (8006a90 <HAL_ADC_ConfigChannel+0x368>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4945      	ldr	r1, [pc, #276]	@ (8006a94 <HAL_ADC_ConfigChannel+0x36c>)
 800697e:	0018      	movs	r0, r3
 8006980:	f7f9 fbc2 	bl	8000108 <__udivsi3>
 8006984:	0003      	movs	r3, r0
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	0013      	movs	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	189b      	adds	r3, r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006992:	e002      	b.n	800699a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3b01      	subs	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f9      	bne.n	8006994 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80069a0:	e08e      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a3c      	ldr	r2, [pc, #240]	@ (8006a98 <HAL_ADC_ConfigChannel+0x370>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10e      	bne.n	80069ca <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	2380      	movs	r3, #128	@ 0x80
 80069b0:	045b      	lsls	r3, r3, #17
 80069b2:	4013      	ands	r3, r2
 80069b4:	d109      	bne.n	80069ca <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2280      	movs	r2, #128	@ 0x80
 80069ba:	0452      	lsls	r2, r2, #17
 80069bc:	4313      	orrs	r3, r2
 80069be:	4a32      	ldr	r2, [pc, #200]	@ (8006a88 <HAL_ADC_ConfigChannel+0x360>)
 80069c0:	0019      	movs	r1, r3
 80069c2:	0010      	movs	r0, r2
 80069c4:	f7ff f9c2 	bl	8005d4c <LL_ADC_SetCommonPathInternalCh>
 80069c8:	e07a      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a33      	ldr	r2, [pc, #204]	@ (8006a9c <HAL_ADC_ConfigChannel+0x374>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d000      	beq.n	80069d6 <HAL_ADC_ConfigChannel+0x2ae>
 80069d4:	e074      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	2380      	movs	r3, #128	@ 0x80
 80069da:	03db      	lsls	r3, r3, #15
 80069dc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80069de:	d000      	beq.n	80069e2 <HAL_ADC_ConfigChannel+0x2ba>
 80069e0:	e06e      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2280      	movs	r2, #128	@ 0x80
 80069e6:	03d2      	lsls	r2, r2, #15
 80069e8:	4313      	orrs	r3, r2
 80069ea:	4a27      	ldr	r2, [pc, #156]	@ (8006a88 <HAL_ADC_ConfigChannel+0x360>)
 80069ec:	0019      	movs	r1, r3
 80069ee:	0010      	movs	r0, r2
 80069f0:	f7ff f9ac 	bl	8005d4c <LL_ADC_SetCommonPathInternalCh>
 80069f4:	e064      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	2380      	movs	r3, #128	@ 0x80
 80069fc:	061b      	lsls	r3, r3, #24
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d004      	beq.n	8006a0c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006a06:	4a1f      	ldr	r2, [pc, #124]	@ (8006a84 <HAL_ADC_ConfigChannel+0x35c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d107      	bne.n	8006a1c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	0019      	movs	r1, r3
 8006a16:	0010      	movs	r0, r2
 8006a18:	f7ff fa2f 	bl	8005e7a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	da4d      	bge.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a24:	4b18      	ldr	r3, [pc, #96]	@ (8006a88 <HAL_ADC_ConfigChannel+0x360>)
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7ff f9a4 	bl	8005d74 <LL_ADC_GetCommonPathInternalCh>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a15      	ldr	r2, [pc, #84]	@ (8006a8c <HAL_ADC_ConfigChannel+0x364>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d108      	bne.n	8006a4c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4a18      	ldr	r2, [pc, #96]	@ (8006aa0 <HAL_ADC_ConfigChannel+0x378>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	4a11      	ldr	r2, [pc, #68]	@ (8006a88 <HAL_ADC_ConfigChannel+0x360>)
 8006a42:	0019      	movs	r1, r3
 8006a44:	0010      	movs	r0, r2
 8006a46:	f7ff f981 	bl	8005d4c <LL_ADC_SetCommonPathInternalCh>
 8006a4a:	e039      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a11      	ldr	r2, [pc, #68]	@ (8006a98 <HAL_ADC_ConfigChannel+0x370>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d108      	bne.n	8006a68 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4a12      	ldr	r2, [pc, #72]	@ (8006aa4 <HAL_ADC_ConfigChannel+0x37c>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a88 <HAL_ADC_ConfigChannel+0x360>)
 8006a5e:	0019      	movs	r1, r3
 8006a60:	0010      	movs	r0, r2
 8006a62:	f7ff f973 	bl	8005d4c <LL_ADC_SetCommonPathInternalCh>
 8006a66:	e02b      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006a9c <HAL_ADC_ConfigChannel+0x374>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d126      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	4a0c      	ldr	r2, [pc, #48]	@ (8006aa8 <HAL_ADC_ConfigChannel+0x380>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	4a03      	ldr	r2, [pc, #12]	@ (8006a88 <HAL_ADC_ConfigChannel+0x360>)
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	0010      	movs	r0, r2
 8006a7e:	f7ff f965 	bl	8005d4c <LL_ADC_SetCommonPathInternalCh>
 8006a82:	e01d      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x398>
 8006a84:	80000004 	.word	0x80000004
 8006a88:	40012708 	.word	0x40012708
 8006a8c:	b0001000 	.word	0xb0001000
 8006a90:	20000440 	.word	0x20000440
 8006a94:	00030d40 	.word	0x00030d40
 8006a98:	b8004000 	.word	0xb8004000
 8006a9c:	b4002000 	.word	0xb4002000
 8006aa0:	ff7fffff 	.word	0xff7fffff
 8006aa4:	feffffff 	.word	0xfeffffff
 8006aa8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006ab8:	2317      	movs	r3, #23
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	2201      	movs	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2254      	movs	r2, #84	@ 0x54
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006ac8:	2317      	movs	r3, #23
 8006aca:	18fb      	adds	r3, r7, r3
 8006acc:	781b      	ldrb	r3, [r3, #0]
}
 8006ace:	0018      	movs	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b006      	add	sp, #24
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	46c0      	nop			@ (mov r8, r8)

08006ad8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f7ff fa89 	bl	8005ffc <LL_ADC_REG_IsConversionOngoing>
 8006aea:	1e03      	subs	r3, r0, #0
 8006aec:	d031      	beq.n	8006b52 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	0018      	movs	r0, r3
 8006af4:	f7ff fa4d 	bl	8005f92 <LL_ADC_IsDisableOngoing>
 8006af8:	1e03      	subs	r3, r0, #0
 8006afa:	d104      	bne.n	8006b06 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	0018      	movs	r0, r3
 8006b02:	f7ff fa69 	bl	8005fd8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b06:	f7ff f917 	bl	8005d38 <HAL_GetTick>
 8006b0a:	0003      	movs	r3, r0
 8006b0c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006b0e:	e01a      	b.n	8006b46 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006b10:	f7ff f912 	bl	8005d38 <HAL_GetTick>
 8006b14:	0002      	movs	r2, r0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d913      	bls.n	8006b46 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2204      	movs	r2, #4
 8006b26:	4013      	ands	r3, r2
 8006b28:	d00d      	beq.n	8006b46 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2e:	2210      	movs	r2, #16
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e006      	b.n	8006b54 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d1de      	bne.n	8006b10 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	0018      	movs	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b004      	add	sp, #16
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7ff f9ff 	bl	8005f70 <LL_ADC_IsEnabled>
 8006b72:	1e03      	subs	r3, r0, #0
 8006b74:	d000      	beq.n	8006b78 <ADC_Enable+0x1c>
 8006b76:	e069      	b.n	8006c4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	4a36      	ldr	r2, [pc, #216]	@ (8006c58 <ADC_Enable+0xfc>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	d00d      	beq.n	8006ba0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b88:	2210      	movs	r2, #16
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b94:	2201      	movs	r2, #1
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e056      	b.n	8006c4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f7ff f9bf 	bl	8005f28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8006baa:	4b2c      	ldr	r3, [pc, #176]	@ (8006c5c <ADC_Enable+0x100>)
 8006bac:	0018      	movs	r0, r3
 8006bae:	f7ff f8e1 	bl	8005d74 <LL_ADC_GetCommonPathInternalCh>
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	2380      	movs	r3, #128	@ 0x80
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d00f      	beq.n	8006bdc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006bbc:	4b28      	ldr	r3, [pc, #160]	@ (8006c60 <ADC_Enable+0x104>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4928      	ldr	r1, [pc, #160]	@ (8006c64 <ADC_Enable+0x108>)
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7f9 faa0 	bl	8000108 <__udivsi3>
 8006bc8:	0003      	movs	r3, r0
 8006bca:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8006bcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006bce:	e002      	b.n	8006bd6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f9      	bne.n	8006bd0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7e5b      	ldrb	r3, [r3, #25]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d033      	beq.n	8006c4c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006be4:	f7ff f8a8 	bl	8005d38 <HAL_GetTick>
 8006be8:	0003      	movs	r3, r0
 8006bea:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bec:	e027      	b.n	8006c3e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f7ff f9bc 	bl	8005f70 <LL_ADC_IsEnabled>
 8006bf8:	1e03      	subs	r3, r0, #0
 8006bfa:	d104      	bne.n	8006c06 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f7ff f991 	bl	8005f28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c06:	f7ff f897 	bl	8005d38 <HAL_GetTick>
 8006c0a:	0002      	movs	r2, r0
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d914      	bls.n	8006c3e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d00d      	beq.n	8006c3e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c26:	2210      	movs	r2, #16
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c32:	2201      	movs	r2, #1
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e007      	b.n	8006c4e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2201      	movs	r2, #1
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d1d0      	bne.n	8006bee <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	0018      	movs	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	b004      	add	sp, #16
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	46c0      	nop			@ (mov r8, r8)
 8006c58:	80000017 	.word	0x80000017
 8006c5c:	40012708 	.word	0x40012708
 8006c60:	20000440 	.word	0x20000440
 8006c64:	00030d40 	.word	0x00030d40

08006c68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f7ff f98c 	bl	8005f92 <LL_ADC_IsDisableOngoing>
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	0018      	movs	r0, r3
 8006c84:	f7ff f974 	bl	8005f70 <LL_ADC_IsEnabled>
 8006c88:	1e03      	subs	r3, r0, #0
 8006c8a:	d046      	beq.n	8006d1a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d143      	bne.n	8006d1a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2205      	movs	r2, #5
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10d      	bne.n	8006cbc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f7ff f951 	bl	8005f4c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2203      	movs	r2, #3
 8006cb0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006cb2:	f7ff f841 	bl	8005d38 <HAL_GetTick>
 8006cb6:	0003      	movs	r3, r0
 8006cb8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006cba:	e028      	b.n	8006d0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc0:	2210      	movs	r2, #16
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ccc:	2201      	movs	r2, #1
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e021      	b.n	8006d1c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006cd8:	f7ff f82e 	bl	8005d38 <HAL_GetTick>
 8006cdc:	0002      	movs	r2, r0
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d913      	bls.n	8006d0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2201      	movs	r2, #1
 8006cee:	4013      	ands	r3, r2
 8006cf0:	d00d      	beq.n	8006d0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf6:	2210      	movs	r2, #16
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d02:	2201      	movs	r2, #1
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e006      	b.n	8006d1c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2201      	movs	r2, #1
 8006d16:	4013      	ands	r3, r2
 8006d18:	d1de      	bne.n	8006cd8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	b004      	add	sp, #16
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d36:	2250      	movs	r2, #80	@ 0x50
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d142      	bne.n	8006dc2 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d40:	2280      	movs	r2, #128	@ 0x80
 8006d42:	0092      	lsls	r2, r2, #2
 8006d44:	431a      	orrs	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7ff f851 	bl	8005df6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d54:	1e03      	subs	r3, r0, #0
 8006d56:	d02e      	beq.n	8006db6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	7e9b      	ldrb	r3, [r3, #26]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d12a      	bne.n	8006db6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2208      	movs	r2, #8
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d123      	bne.n	8006db6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	0018      	movs	r0, r3
 8006d74:	f7ff f942 	bl	8005ffc <LL_ADC_REG_IsConversionOngoing>
 8006d78:	1e03      	subs	r3, r0, #0
 8006d7a:	d110      	bne.n	8006d9e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	210c      	movs	r1, #12
 8006d88:	438a      	bics	r2, r1
 8006d8a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d90:	4a16      	ldr	r2, [pc, #88]	@ (8006dec <ADC_DMAConvCplt+0xc8>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	2201      	movs	r2, #1
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d9c:	e00b      	b.n	8006db6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da2:	2220      	movs	r2, #32
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dae:	2201      	movs	r2, #1
 8006db0:	431a      	orrs	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	0010      	movs	r0, r2
 8006dbe:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006dc0:	e010      	b.n	8006de4 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d005      	beq.n	8006dd8 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	0010      	movs	r0, r2
 8006dd4:	4798      	blx	r3
}
 8006dd6:	e005      	b.n	8006de4 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	0010      	movs	r0, r2
 8006de2:	4798      	blx	r3
}
 8006de4:	46c0      	nop			@ (mov r8, r8)
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b004      	add	sp, #16
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	fffffefe 	.word	0xfffffefe

08006df0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	0010      	movs	r0, r2
 8006e06:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e08:	46c0      	nop			@ (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b004      	add	sp, #16
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e22:	2240      	movs	r2, #64	@ 0x40
 8006e24:	431a      	orrs	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2e:	2204      	movs	r2, #4
 8006e30:	431a      	orrs	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	0010      	movs	r0, r2
 8006e3e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e40:	46c0      	nop			@ (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b004      	add	sp, #16
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <LL_ADC_GetCommonClock>:
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	23f0      	movs	r3, #240	@ 0xf0
 8006e56:	039b      	lsls	r3, r3, #14
 8006e58:	4013      	ands	r3, r2
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b002      	add	sp, #8
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <LL_ADC_GetClock>:
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	0f9b      	lsrs	r3, r3, #30
 8006e70:	079b      	lsls	r3, r3, #30
}
 8006e72:	0018      	movs	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b002      	add	sp, #8
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <LL_ADC_SetCalibrationFactor>:
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	22b4      	movs	r2, #180	@ 0xb4
 8006e88:	589b      	ldr	r3, [r3, r2]
 8006e8a:	227f      	movs	r2, #127	@ 0x7f
 8006e8c:	4393      	bics	r3, r2
 8006e8e:	001a      	movs	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	21b4      	movs	r1, #180	@ 0xb4
 8006e98:	505a      	str	r2, [r3, r1]
}
 8006e9a:	46c0      	nop			@ (mov r8, r8)
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b002      	add	sp, #8
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <LL_ADC_GetCalibrationFactor>:
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	22b4      	movs	r2, #180	@ 0xb4
 8006eae:	589b      	ldr	r3, [r3, r2]
 8006eb0:	227f      	movs	r2, #127	@ 0x7f
 8006eb2:	4013      	ands	r3, r2
}
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b002      	add	sp, #8
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <LL_ADC_Enable>:
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4a04      	ldr	r2, [pc, #16]	@ (8006edc <LL_ADC_Enable+0x20>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2201      	movs	r2, #1
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	609a      	str	r2, [r3, #8]
}
 8006ed4:	46c0      	nop			@ (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b002      	add	sp, #8
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	7fffffe8 	.word	0x7fffffe8

08006ee0 <LL_ADC_Disable>:
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4a04      	ldr	r2, [pc, #16]	@ (8006f00 <LL_ADC_Disable+0x20>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	609a      	str	r2, [r3, #8]
}
 8006ef8:	46c0      	nop			@ (mov r8, r8)
 8006efa:	46bd      	mov	sp, r7
 8006efc:	b002      	add	sp, #8
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	7fffffe8 	.word	0x7fffffe8

08006f04 <LL_ADC_IsEnabled>:
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2201      	movs	r2, #1
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <LL_ADC_IsEnabled+0x18>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <LL_ADC_IsEnabled+0x1a>
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	0018      	movs	r0, r3
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b002      	add	sp, #8
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <LL_ADC_StartCalibration>:
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	4a05      	ldr	r2, [pc, #20]	@ (8006f4c <LL_ADC_StartCalibration+0x24>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	2280      	movs	r2, #128	@ 0x80
 8006f3a:	0612      	lsls	r2, r2, #24
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
}
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	46bd      	mov	sp, r7
 8006f46:	b002      	add	sp, #8
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	46c0      	nop			@ (mov r8, r8)
 8006f4c:	7fffffe8 	.word	0x7fffffe8

08006f50 <LL_ADC_IsCalibrationOnGoing>:
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	0fdb      	lsrs	r3, r3, #31
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	2380      	movs	r3, #128	@ 0x80
 8006f62:	061b      	lsls	r3, r3, #24
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d101      	bne.n	8006f6c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <LL_ADC_IsCalibrationOnGoing+0x1e>
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	0018      	movs	r0, r3
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b002      	add	sp, #8
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006f78:	b590      	push	{r4, r7, lr}
 8006f7a:	b08b      	sub	sp, #44	@ 0x2c
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2254      	movs	r2, #84	@ 0x54
 8006f8c:	5c9b      	ldrb	r3, [r3, r2]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_ADCEx_Calibration_Start+0x1e>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e0dd      	b.n	8007152 <HAL_ADCEx_Calibration_Start+0x1da>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2254      	movs	r2, #84	@ 0x54
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006f9e:	231f      	movs	r3, #31
 8006fa0:	18fc      	adds	r4, r7, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f7ff fe5f 	bl	8006c68 <ADC_Disable>
 8006faa:	0003      	movs	r3, r0
 8006fac:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f7ff ffa6 	bl	8006f04 <LL_ADC_IsEnabled>
 8006fb8:	1e03      	subs	r3, r0, #0
 8006fba:	d000      	beq.n	8006fbe <HAL_ADCEx_Calibration_Start+0x46>
 8006fbc:	e0bc      	b.n	8007138 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc2:	4a66      	ldr	r2, [pc, #408]	@ (800715c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	4a62      	ldr	r2, [pc, #392]	@ (8007160 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	495f      	ldr	r1, [pc, #380]	@ (8007164 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8006fe6:	400a      	ands	r2, r1
 8006fe8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006fea:	2300      	movs	r3, #0
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fee:	e02d      	b.n	800704c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f7ff ff97 	bl	8006f28 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ffa:	e014      	b.n	8007026 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4a58      	ldr	r2, [pc, #352]	@ (8007168 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d90d      	bls.n	8007026 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700e:	2212      	movs	r2, #18
 8007010:	4393      	bics	r3, r2
 8007012:	2210      	movs	r2, #16
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2254      	movs	r2, #84	@ 0x54
 800701e:	2100      	movs	r1, #0
 8007020:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e095      	b.n	8007152 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	0018      	movs	r0, r3
 800702c:	f7ff ff90 	bl	8006f50 <LL_ADC_IsCalibrationOnGoing>
 8007030:	1e03      	subs	r3, r0, #0
 8007032:	d1e3      	bne.n	8006ffc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	0018      	movs	r0, r3
 800703a:	f7ff ff32 	bl	8006ea2 <LL_ADC_GetCalibrationFactor>
 800703e:	0002      	movs	r2, r0
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	189b      	adds	r3, r3, r2
 8007044:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	3301      	adds	r3, #1
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	2b07      	cmp	r3, #7
 8007050:	d9ce      	bls.n	8006ff0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007052:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007054:	6a38      	ldr	r0, [r7, #32]
 8007056:	f7f9 f857 	bl	8000108 <__udivsi3>
 800705a:	0003      	movs	r3, r0
 800705c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	0018      	movs	r0, r3
 8007064:	f7ff ff2a 	bl	8006ebc <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	0018      	movs	r0, r3
 800706e:	f7ff fef8 	bl	8006e62 <LL_ADC_GetClock>
 8007072:	1e03      	subs	r3, r0, #0
 8007074:	d11b      	bne.n	80070ae <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007076:	4b3d      	ldr	r3, [pc, #244]	@ (800716c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8007078:	0018      	movs	r0, r3
 800707a:	f7ff fee5 	bl	8006e48 <LL_ADC_GetCommonClock>
 800707e:	0003      	movs	r3, r0
 8007080:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	23e0      	movs	r3, #224	@ 0xe0
 8007086:	035b      	lsls	r3, r3, #13
 8007088:	429a      	cmp	r2, r3
 800708a:	d310      	bcc.n	80070ae <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	0c9b      	lsrs	r3, r3, #18
 8007090:	3b03      	subs	r3, #3
 8007092:	2201      	movs	r2, #1
 8007094:	409a      	lsls	r2, r3
 8007096:	0013      	movs	r3, r2
 8007098:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80070a0:	e002      	b.n	80070a8 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f9      	bne.n	80070a2 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6a3a      	ldr	r2, [r7, #32]
 80070b4:	0011      	movs	r1, r2
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7ff fedf 	bl	8006e7a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f7ff ff0d 	bl	8006ee0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80070c6:	f7fe fe37 	bl	8005d38 <HAL_GetTick>
 80070ca:	0003      	movs	r3, r0
 80070cc:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80070ce:	e01b      	b.n	8007108 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80070d0:	f7fe fe32 	bl	8005d38 <HAL_GetTick>
 80070d4:	0002      	movs	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d914      	bls.n	8007108 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	0018      	movs	r0, r3
 80070e4:	f7ff ff0e 	bl	8006f04 <LL_ADC_IsEnabled>
 80070e8:	1e03      	subs	r3, r0, #0
 80070ea:	d00d      	beq.n	8007108 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f0:	2210      	movs	r2, #16
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fc:	2201      	movs	r2, #1
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e024      	b.n	8007152 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	0018      	movs	r0, r3
 800710e:	f7ff fef9 	bl	8006f04 <LL_ADC_IsEnabled>
 8007112:	1e03      	subs	r3, r0, #0
 8007114:	d1dc      	bne.n	80070d0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68d9      	ldr	r1, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	430a      	orrs	r2, r1
 8007124:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	2203      	movs	r2, #3
 800712c:	4393      	bics	r3, r2
 800712e:	2201      	movs	r2, #1
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	659a      	str	r2, [r3, #88]	@ 0x58
 8007136:	e005      	b.n	8007144 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713c:	2210      	movs	r2, #16
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2254      	movs	r2, #84	@ 0x54
 8007148:	2100      	movs	r1, #0
 800714a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800714c:	231f      	movs	r3, #31
 800714e:	18fb      	adds	r3, r7, r3
 8007150:	781b      	ldrb	r3, [r3, #0]
}
 8007152:	0018      	movs	r0, r3
 8007154:	46bd      	mov	sp, r7
 8007156:	b00b      	add	sp, #44	@ 0x2c
 8007158:	bd90      	pop	{r4, r7, pc}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	fffffefd 	.word	0xfffffefd
 8007160:	00008003 	.word	0x00008003
 8007164:	ffff7ffc 	.word	0xffff7ffc
 8007168:	0002f1ff 	.word	0x0002f1ff
 800716c:	40012708 	.word	0x40012708

08007170 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007178:	46c0      	nop			@ (mov r8, r8)
 800717a:	46bd      	mov	sp, r7
 800717c:	b002      	add	sp, #8
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007188:	46c0      	nop			@ (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b002      	add	sp, #8
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007198:	46c0      	nop			@ (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	b002      	add	sp, #8
 800719e:	bd80      	pop	{r7, pc}

080071a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	0002      	movs	r2, r0
 80071a8:	1dfb      	adds	r3, r7, #7
 80071aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80071ac:	1dfb      	adds	r3, r7, #7
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80071b2:	d809      	bhi.n	80071c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071b4:	1dfb      	adds	r3, r7, #7
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	001a      	movs	r2, r3
 80071ba:	231f      	movs	r3, #31
 80071bc:	401a      	ands	r2, r3
 80071be:	4b04      	ldr	r3, [pc, #16]	@ (80071d0 <__NVIC_EnableIRQ+0x30>)
 80071c0:	2101      	movs	r1, #1
 80071c2:	4091      	lsls	r1, r2
 80071c4:	000a      	movs	r2, r1
 80071c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80071c8:	46c0      	nop			@ (mov r8, r8)
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b002      	add	sp, #8
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	e000e100 	.word	0xe000e100

080071d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	0002      	movs	r2, r0
 80071dc:	1dfb      	adds	r3, r7, #7
 80071de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80071e0:	1dfb      	adds	r3, r7, #7
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80071e6:	d810      	bhi.n	800720a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071e8:	1dfb      	adds	r3, r7, #7
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	001a      	movs	r2, r3
 80071ee:	231f      	movs	r3, #31
 80071f0:	4013      	ands	r3, r2
 80071f2:	4908      	ldr	r1, [pc, #32]	@ (8007214 <__NVIC_DisableIRQ+0x40>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	0013      	movs	r3, r2
 80071fa:	2280      	movs	r2, #128	@ 0x80
 80071fc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80071fe:	f3bf 8f4f 	dsb	sy
}
 8007202:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007204:	f3bf 8f6f 	isb	sy
}
 8007208:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800720a:	46c0      	nop			@ (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	b002      	add	sp, #8
 8007210:	bd80      	pop	{r7, pc}
 8007212:	46c0      	nop			@ (mov r8, r8)
 8007214:	e000e100 	.word	0xe000e100

08007218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007218:	b590      	push	{r4, r7, lr}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	0002      	movs	r2, r0
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	1dfb      	adds	r3, r7, #7
 8007224:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007226:	1dfb      	adds	r3, r7, #7
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b7f      	cmp	r3, #127	@ 0x7f
 800722c:	d828      	bhi.n	8007280 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800722e:	4a2f      	ldr	r2, [pc, #188]	@ (80072ec <__NVIC_SetPriority+0xd4>)
 8007230:	1dfb      	adds	r3, r7, #7
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b25b      	sxtb	r3, r3
 8007236:	089b      	lsrs	r3, r3, #2
 8007238:	33c0      	adds	r3, #192	@ 0xc0
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	589b      	ldr	r3, [r3, r2]
 800723e:	1dfa      	adds	r2, r7, #7
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	0011      	movs	r1, r2
 8007244:	2203      	movs	r2, #3
 8007246:	400a      	ands	r2, r1
 8007248:	00d2      	lsls	r2, r2, #3
 800724a:	21ff      	movs	r1, #255	@ 0xff
 800724c:	4091      	lsls	r1, r2
 800724e:	000a      	movs	r2, r1
 8007250:	43d2      	mvns	r2, r2
 8007252:	401a      	ands	r2, r3
 8007254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	019b      	lsls	r3, r3, #6
 800725a:	22ff      	movs	r2, #255	@ 0xff
 800725c:	401a      	ands	r2, r3
 800725e:	1dfb      	adds	r3, r7, #7
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	0018      	movs	r0, r3
 8007264:	2303      	movs	r3, #3
 8007266:	4003      	ands	r3, r0
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800726c:	481f      	ldr	r0, [pc, #124]	@ (80072ec <__NVIC_SetPriority+0xd4>)
 800726e:	1dfb      	adds	r3, r7, #7
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b25b      	sxtb	r3, r3
 8007274:	089b      	lsrs	r3, r3, #2
 8007276:	430a      	orrs	r2, r1
 8007278:	33c0      	adds	r3, #192	@ 0xc0
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800727e:	e031      	b.n	80072e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007280:	4a1b      	ldr	r2, [pc, #108]	@ (80072f0 <__NVIC_SetPriority+0xd8>)
 8007282:	1dfb      	adds	r3, r7, #7
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	0019      	movs	r1, r3
 8007288:	230f      	movs	r3, #15
 800728a:	400b      	ands	r3, r1
 800728c:	3b08      	subs	r3, #8
 800728e:	089b      	lsrs	r3, r3, #2
 8007290:	3306      	adds	r3, #6
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	18d3      	adds	r3, r2, r3
 8007296:	3304      	adds	r3, #4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	1dfa      	adds	r2, r7, #7
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	0011      	movs	r1, r2
 80072a0:	2203      	movs	r2, #3
 80072a2:	400a      	ands	r2, r1
 80072a4:	00d2      	lsls	r2, r2, #3
 80072a6:	21ff      	movs	r1, #255	@ 0xff
 80072a8:	4091      	lsls	r1, r2
 80072aa:	000a      	movs	r2, r1
 80072ac:	43d2      	mvns	r2, r2
 80072ae:	401a      	ands	r2, r3
 80072b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	019b      	lsls	r3, r3, #6
 80072b6:	22ff      	movs	r2, #255	@ 0xff
 80072b8:	401a      	ands	r2, r3
 80072ba:	1dfb      	adds	r3, r7, #7
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	0018      	movs	r0, r3
 80072c0:	2303      	movs	r3, #3
 80072c2:	4003      	ands	r3, r0
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072c8:	4809      	ldr	r0, [pc, #36]	@ (80072f0 <__NVIC_SetPriority+0xd8>)
 80072ca:	1dfb      	adds	r3, r7, #7
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	001c      	movs	r4, r3
 80072d0:	230f      	movs	r3, #15
 80072d2:	4023      	ands	r3, r4
 80072d4:	3b08      	subs	r3, #8
 80072d6:	089b      	lsrs	r3, r3, #2
 80072d8:	430a      	orrs	r2, r1
 80072da:	3306      	adds	r3, #6
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	18c3      	adds	r3, r0, r3
 80072e0:	3304      	adds	r3, #4
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	46c0      	nop			@ (mov r8, r8)
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b003      	add	sp, #12
 80072ea:	bd90      	pop	{r4, r7, pc}
 80072ec:	e000e100 	.word	0xe000e100
 80072f0:	e000ed00 	.word	0xe000ed00

080072f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	1e5a      	subs	r2, r3, #1
 8007300:	2380      	movs	r3, #128	@ 0x80
 8007302:	045b      	lsls	r3, r3, #17
 8007304:	429a      	cmp	r2, r3
 8007306:	d301      	bcc.n	800730c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007308:	2301      	movs	r3, #1
 800730a:	e010      	b.n	800732e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800730c:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <SysTick_Config+0x44>)
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	3a01      	subs	r2, #1
 8007312:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007314:	2301      	movs	r3, #1
 8007316:	425b      	negs	r3, r3
 8007318:	2103      	movs	r1, #3
 800731a:	0018      	movs	r0, r3
 800731c:	f7ff ff7c 	bl	8007218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007320:	4b05      	ldr	r3, [pc, #20]	@ (8007338 <SysTick_Config+0x44>)
 8007322:	2200      	movs	r2, #0
 8007324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007326:	4b04      	ldr	r3, [pc, #16]	@ (8007338 <SysTick_Config+0x44>)
 8007328:	2207      	movs	r2, #7
 800732a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800732c:	2300      	movs	r3, #0
}
 800732e:	0018      	movs	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	b002      	add	sp, #8
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			@ (mov r8, r8)
 8007338:	e000e010 	.word	0xe000e010

0800733c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	210f      	movs	r1, #15
 8007348:	187b      	adds	r3, r7, r1
 800734a:	1c02      	adds	r2, r0, #0
 800734c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	187b      	adds	r3, r7, r1
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	b25b      	sxtb	r3, r3
 8007356:	0011      	movs	r1, r2
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff ff5d 	bl	8007218 <__NVIC_SetPriority>
}
 800735e:	46c0      	nop			@ (mov r8, r8)
 8007360:	46bd      	mov	sp, r7
 8007362:	b004      	add	sp, #16
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	0002      	movs	r2, r0
 800736e:	1dfb      	adds	r3, r7, #7
 8007370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007372:	1dfb      	adds	r3, r7, #7
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b25b      	sxtb	r3, r3
 8007378:	0018      	movs	r0, r3
 800737a:	f7ff ff11 	bl	80071a0 <__NVIC_EnableIRQ>
}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	46bd      	mov	sp, r7
 8007382:	b002      	add	sp, #8
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	0002      	movs	r2, r0
 800738e:	1dfb      	adds	r3, r7, #7
 8007390:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007392:	1dfb      	adds	r3, r7, #7
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	b25b      	sxtb	r3, r3
 8007398:	0018      	movs	r0, r3
 800739a:	f7ff ff1b 	bl	80071d4 <__NVIC_DisableIRQ>
}
 800739e:	46c0      	nop			@ (mov r8, r8)
 80073a0:	46bd      	mov	sp, r7
 80073a2:	b002      	add	sp, #8
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	0018      	movs	r0, r3
 80073b2:	f7ff ff9f 	bl	80072f4 <SysTick_Config>
 80073b6:	0003      	movs	r3, r0
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b002      	add	sp, #8
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e077      	b.n	80074c2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a3d      	ldr	r2, [pc, #244]	@ (80074cc <HAL_DMA_Init+0x10c>)
 80073d8:	4694      	mov	ip, r2
 80073da:	4463      	add	r3, ip
 80073dc:	2114      	movs	r1, #20
 80073de:	0018      	movs	r0, r3
 80073e0:	f7f8 fe92 	bl	8000108 <__udivsi3>
 80073e4:	0003      	movs	r3, r0
 80073e6:	009a      	lsls	r2, r3, #2
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2225      	movs	r2, #37	@ 0x25
 80073f0:	2102      	movs	r1, #2
 80073f2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4934      	ldr	r1, [pc, #208]	@ (80074d0 <HAL_DMA_Init+0x110>)
 8007400:	400a      	ands	r2, r1
 8007402:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0018      	movs	r0, r3
 800743e:	f000 fa8d 	bl	800795c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	2380      	movs	r3, #128	@ 0x80
 8007448:	01db      	lsls	r3, r3, #7
 800744a:	429a      	cmp	r2, r3
 800744c:	d102      	bne.n	8007454 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745c:	213f      	movs	r1, #63	@ 0x3f
 800745e:	400a      	ands	r2, r1
 8007460:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800746a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d011      	beq.n	8007498 <HAL_DMA_Init+0xd8>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2b04      	cmp	r3, #4
 800747a:	d80d      	bhi.n	8007498 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	0018      	movs	r0, r3
 8007480:	f000 fa98 	bl	80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007494:	605a      	str	r2, [r3, #4]
 8007496:	e008      	b.n	80074aa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2225      	movs	r2, #37	@ 0x25
 80074b4:	2101      	movs	r1, #1
 80074b6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2224      	movs	r2, #36	@ 0x24
 80074bc:	2100      	movs	r1, #0
 80074be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	0018      	movs	r0, r3
 80074c4:	46bd      	mov	sp, r7
 80074c6:	b002      	add	sp, #8
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	46c0      	nop			@ (mov r8, r8)
 80074cc:	bffdfff8 	.word	0xbffdfff8
 80074d0:	ffff800f 	.word	0xffff800f

080074d4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e2:	2317      	movs	r3, #23
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2224      	movs	r2, #36	@ 0x24
 80074ee:	5c9b      	ldrb	r3, [r3, r2]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_DMA_Start_IT+0x24>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e06f      	b.n	80075d8 <HAL_DMA_Start_IT+0x104>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2224      	movs	r2, #36	@ 0x24
 80074fc:	2101      	movs	r1, #1
 80074fe:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2225      	movs	r2, #37	@ 0x25
 8007504:	5c9b      	ldrb	r3, [r3, r2]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d157      	bne.n	80075bc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2225      	movs	r2, #37	@ 0x25
 8007510:	2102      	movs	r1, #2
 8007512:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2101      	movs	r1, #1
 8007526:	438a      	bics	r2, r1
 8007528:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f9d3 	bl	80078dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	210e      	movs	r1, #14
 800754a:	430a      	orrs	r2, r1
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e00f      	b.n	8007570 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2104      	movs	r1, #4
 800755c:	438a      	bics	r2, r1
 800755e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	210a      	movs	r1, #10
 800756c:	430a      	orrs	r2, r1
 800756e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	2380      	movs	r3, #128	@ 0x80
 8007578:	025b      	lsls	r3, r3, #9
 800757a:	4013      	ands	r3, r2
 800757c:	d008      	beq.n	8007590 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007588:	2180      	movs	r1, #128	@ 0x80
 800758a:	0049      	lsls	r1, r1, #1
 800758c:	430a      	orrs	r2, r1
 800758e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007594:	2b00      	cmp	r3, #0
 8007596:	d008      	beq.n	80075aa <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a2:	2180      	movs	r1, #128	@ 0x80
 80075a4:	0049      	lsls	r1, r1, #1
 80075a6:	430a      	orrs	r2, r1
 80075a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2101      	movs	r1, #1
 80075b6:	430a      	orrs	r2, r1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	e00a      	b.n	80075d2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2280      	movs	r2, #128	@ 0x80
 80075c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2224      	movs	r2, #36	@ 0x24
 80075c6:	2100      	movs	r1, #0
 80075c8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80075ca:	2317      	movs	r3, #23
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	2201      	movs	r2, #1
 80075d0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80075d2:	2317      	movs	r3, #23
 80075d4:	18fb      	adds	r3, r7, r3
 80075d6:	781b      	ldrb	r3, [r3, #0]
}
 80075d8:	0018      	movs	r0, r3
 80075da:	46bd      	mov	sp, r7
 80075dc:	b006      	add	sp, #24
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e050      	b.n	8007694 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2225      	movs	r2, #37	@ 0x25
 80075f6:	5c9b      	ldrb	r3, [r3, r2]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d008      	beq.n	8007610 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2204      	movs	r2, #4
 8007602:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2224      	movs	r2, #36	@ 0x24
 8007608:	2100      	movs	r1, #0
 800760a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e041      	b.n	8007694 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	210e      	movs	r1, #14
 800761c:	438a      	bics	r2, r1
 800761e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762a:	491c      	ldr	r1, [pc, #112]	@ (800769c <HAL_DMA_Abort+0xbc>)
 800762c:	400a      	ands	r2, r1
 800762e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2101      	movs	r1, #1
 800763c:	438a      	bics	r2, r1
 800763e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007640:	4b17      	ldr	r3, [pc, #92]	@ (80076a0 <HAL_DMA_Abort+0xc0>)
 8007642:	6859      	ldr	r1, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007648:	221c      	movs	r2, #28
 800764a:	4013      	ands	r3, r2
 800764c:	2201      	movs	r2, #1
 800764e:	409a      	lsls	r2, r3
 8007650:	4b13      	ldr	r3, [pc, #76]	@ (80076a0 <HAL_DMA_Abort+0xc0>)
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800765e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00c      	beq.n	8007682 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007672:	490a      	ldr	r1, [pc, #40]	@ (800769c <HAL_DMA_Abort+0xbc>)
 8007674:	400a      	ands	r2, r1
 8007676:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007680:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2225      	movs	r2, #37	@ 0x25
 8007686:	2101      	movs	r1, #1
 8007688:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2224      	movs	r2, #36	@ 0x24
 800768e:	2100      	movs	r1, #0
 8007690:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	0018      	movs	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	b002      	add	sp, #8
 800769a:	bd80      	pop	{r7, pc}
 800769c:	fffffeff 	.word	0xfffffeff
 80076a0:	40020000 	.word	0x40020000

080076a4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ac:	210f      	movs	r1, #15
 80076ae:	187b      	adds	r3, r7, r1
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2225      	movs	r2, #37	@ 0x25
 80076b8:	5c9b      	ldrb	r3, [r3, r2]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d006      	beq.n	80076ce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2204      	movs	r2, #4
 80076c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80076c6:	187b      	adds	r3, r7, r1
 80076c8:	2201      	movs	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]
 80076cc:	e049      	b.n	8007762 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	210e      	movs	r1, #14
 80076da:	438a      	bics	r2, r1
 80076dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2101      	movs	r1, #1
 80076ea:	438a      	bics	r2, r1
 80076ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f8:	491d      	ldr	r1, [pc, #116]	@ (8007770 <HAL_DMA_Abort_IT+0xcc>)
 80076fa:	400a      	ands	r2, r1
 80076fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80076fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007774 <HAL_DMA_Abort_IT+0xd0>)
 8007700:	6859      	ldr	r1, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	221c      	movs	r2, #28
 8007708:	4013      	ands	r3, r2
 800770a:	2201      	movs	r2, #1
 800770c:	409a      	lsls	r2, r3
 800770e:	4b19      	ldr	r3, [pc, #100]	@ (8007774 <HAL_DMA_Abort_IT+0xd0>)
 8007710:	430a      	orrs	r2, r1
 8007712:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800771c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00c      	beq.n	8007740 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007730:	490f      	ldr	r1, [pc, #60]	@ (8007770 <HAL_DMA_Abort_IT+0xcc>)
 8007732:	400a      	ands	r2, r1
 8007734:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800773e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2225      	movs	r2, #37	@ 0x25
 8007744:	2101      	movs	r1, #1
 8007746:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2224      	movs	r2, #36	@ 0x24
 800774c:	2100      	movs	r1, #0
 800774e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	2b00      	cmp	r3, #0
 8007756:	d004      	beq.n	8007762 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	0010      	movs	r0, r2
 8007760:	4798      	blx	r3
    }
  }
  return status;
 8007762:	230f      	movs	r3, #15
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	781b      	ldrb	r3, [r3, #0]
}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	b004      	add	sp, #16
 800776e:	bd80      	pop	{r7, pc}
 8007770:	fffffeff 	.word	0xfffffeff
 8007774:	40020000 	.word	0x40020000

08007778 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007780:	4b55      	ldr	r3, [pc, #340]	@ (80078d8 <HAL_DMA_IRQHandler+0x160>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007792:	221c      	movs	r2, #28
 8007794:	4013      	ands	r3, r2
 8007796:	2204      	movs	r2, #4
 8007798:	409a      	lsls	r2, r3
 800779a:	0013      	movs	r3, r2
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4013      	ands	r3, r2
 80077a0:	d027      	beq.n	80077f2 <HAL_DMA_IRQHandler+0x7a>
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2204      	movs	r2, #4
 80077a6:	4013      	ands	r3, r2
 80077a8:	d023      	beq.n	80077f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2220      	movs	r2, #32
 80077b2:	4013      	ands	r3, r2
 80077b4:	d107      	bne.n	80077c6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2104      	movs	r1, #4
 80077c2:	438a      	bics	r2, r1
 80077c4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80077c6:	4b44      	ldr	r3, [pc, #272]	@ (80078d8 <HAL_DMA_IRQHandler+0x160>)
 80077c8:	6859      	ldr	r1, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	221c      	movs	r2, #28
 80077d0:	4013      	ands	r3, r2
 80077d2:	2204      	movs	r2, #4
 80077d4:	409a      	lsls	r2, r3
 80077d6:	4b40      	ldr	r3, [pc, #256]	@ (80078d8 <HAL_DMA_IRQHandler+0x160>)
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d100      	bne.n	80077e6 <HAL_DMA_IRQHandler+0x6e>
 80077e4:	e073      	b.n	80078ce <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	0010      	movs	r0, r2
 80077ee:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80077f0:	e06d      	b.n	80078ce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f6:	221c      	movs	r2, #28
 80077f8:	4013      	ands	r3, r2
 80077fa:	2202      	movs	r2, #2
 80077fc:	409a      	lsls	r2, r3
 80077fe:	0013      	movs	r3, r2
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4013      	ands	r3, r2
 8007804:	d02e      	beq.n	8007864 <HAL_DMA_IRQHandler+0xec>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2202      	movs	r2, #2
 800780a:	4013      	ands	r3, r2
 800780c:	d02a      	beq.n	8007864 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2220      	movs	r2, #32
 8007816:	4013      	ands	r3, r2
 8007818:	d10b      	bne.n	8007832 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	210a      	movs	r1, #10
 8007826:	438a      	bics	r2, r1
 8007828:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2225      	movs	r2, #37	@ 0x25
 800782e:	2101      	movs	r1, #1
 8007830:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007832:	4b29      	ldr	r3, [pc, #164]	@ (80078d8 <HAL_DMA_IRQHandler+0x160>)
 8007834:	6859      	ldr	r1, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783a:	221c      	movs	r2, #28
 800783c:	4013      	ands	r3, r2
 800783e:	2202      	movs	r2, #2
 8007840:	409a      	lsls	r2, r3
 8007842:	4b25      	ldr	r3, [pc, #148]	@ (80078d8 <HAL_DMA_IRQHandler+0x160>)
 8007844:	430a      	orrs	r2, r1
 8007846:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2224      	movs	r2, #36	@ 0x24
 800784c:	2100      	movs	r1, #0
 800784e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d03a      	beq.n	80078ce <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	0010      	movs	r0, r2
 8007860:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007862:	e034      	b.n	80078ce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007868:	221c      	movs	r2, #28
 800786a:	4013      	ands	r3, r2
 800786c:	2208      	movs	r2, #8
 800786e:	409a      	lsls	r2, r3
 8007870:	0013      	movs	r3, r2
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4013      	ands	r3, r2
 8007876:	d02b      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x158>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2208      	movs	r2, #8
 800787c:	4013      	ands	r3, r2
 800787e:	d027      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	210e      	movs	r1, #14
 800788c:	438a      	bics	r2, r1
 800788e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007890:	4b11      	ldr	r3, [pc, #68]	@ (80078d8 <HAL_DMA_IRQHandler+0x160>)
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007898:	221c      	movs	r2, #28
 800789a:	4013      	ands	r3, r2
 800789c:	2201      	movs	r2, #1
 800789e:	409a      	lsls	r2, r3
 80078a0:	4b0d      	ldr	r3, [pc, #52]	@ (80078d8 <HAL_DMA_IRQHandler+0x160>)
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2225      	movs	r2, #37	@ 0x25
 80078b0:	2101      	movs	r1, #1
 80078b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2224      	movs	r2, #36	@ 0x24
 80078b8:	2100      	movs	r1, #0
 80078ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	0010      	movs	r0, r2
 80078cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80078ce:	46c0      	nop			@ (mov r8, r8)
 80078d0:	46c0      	nop			@ (mov r8, r8)
}
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b004      	add	sp, #16
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40020000 	.word	0x40020000

080078dc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80078f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007904:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007906:	4b14      	ldr	r3, [pc, #80]	@ (8007958 <DMA_SetConfig+0x7c>)
 8007908:	6859      	ldr	r1, [r3, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790e:	221c      	movs	r2, #28
 8007910:	4013      	ands	r3, r2
 8007912:	2201      	movs	r2, #1
 8007914:	409a      	lsls	r2, r3
 8007916:	4b10      	ldr	r3, [pc, #64]	@ (8007958 <DMA_SetConfig+0x7c>)
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b10      	cmp	r3, #16
 800792a:	d108      	bne.n	800793e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800793c:	e007      	b.n	800794e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	60da      	str	r2, [r3, #12]
}
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	46bd      	mov	sp, r7
 8007952:	b004      	add	sp, #16
 8007954:	bd80      	pop	{r7, pc}
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	40020000 	.word	0x40020000

0800795c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007968:	089b      	lsrs	r3, r3, #2
 800796a:	4a10      	ldr	r2, [pc, #64]	@ (80079ac <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800796c:	4694      	mov	ip, r2
 800796e:	4463      	add	r3, ip
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	001a      	movs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	001a      	movs	r2, r3
 800797e:	23ff      	movs	r3, #255	@ 0xff
 8007980:	4013      	ands	r3, r2
 8007982:	3b08      	subs	r3, #8
 8007984:	2114      	movs	r1, #20
 8007986:	0018      	movs	r0, r3
 8007988:	f7f8 fbbe 	bl	8000108 <__udivsi3>
 800798c:	0003      	movs	r3, r0
 800798e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a07      	ldr	r2, [pc, #28]	@ (80079b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007994:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	221f      	movs	r2, #31
 800799a:	4013      	ands	r3, r2
 800799c:	2201      	movs	r2, #1
 800799e:	409a      	lsls	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80079a4:	46c0      	nop			@ (mov r8, r8)
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b004      	add	sp, #16
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	10008200 	.word	0x10008200
 80079b0:	40020880 	.word	0x40020880

080079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	223f      	movs	r2, #63	@ 0x3f
 80079c2:	4013      	ands	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4a0a      	ldr	r2, [pc, #40]	@ (80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80079ca:	4694      	mov	ip, r2
 80079cc:	4463      	add	r3, ip
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	001a      	movs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a07      	ldr	r2, [pc, #28]	@ (80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80079da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3b01      	subs	r3, #1
 80079e0:	2203      	movs	r2, #3
 80079e2:	4013      	ands	r3, r2
 80079e4:	2201      	movs	r2, #1
 80079e6:	409a      	lsls	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80079ec:	46c0      	nop			@ (mov r8, r8)
 80079ee:	46bd      	mov	sp, r7
 80079f0:	b004      	add	sp, #16
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	1000823f 	.word	0x1000823f
 80079f8:	40020940 	.word	0x40020940

080079fc <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80079fc:	b5b0      	push	{r4, r5, r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	603a      	str	r2, [r7, #0]
 8007a08:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a0a:	4b21      	ldr	r3, [pc, #132]	@ (8007a90 <HAL_FLASH_Program+0x94>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_FLASH_Program+0x1a>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e038      	b.n	8007a88 <HAL_FLASH_Program+0x8c>
 8007a16:	4b1e      	ldr	r3, [pc, #120]	@ (8007a90 <HAL_FLASH_Program+0x94>)
 8007a18:	2201      	movs	r2, #1
 8007a1a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a90 <HAL_FLASH_Program+0x94>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007a22:	2517      	movs	r5, #23
 8007a24:	197c      	adds	r4, r7, r5
 8007a26:	23fa      	movs	r3, #250	@ 0xfa
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f000 f834 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007a30:	0003      	movs	r3, r0
 8007a32:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8007a34:	197b      	adds	r3, r7, r5
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d11f      	bne.n	8007a7c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d106      	bne.n	8007a50 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	0008      	movs	r0, r1
 8007a4a:	f000 f873 	bl	8007b34 <FLASH_Program_DoubleWord>
 8007a4e:	e005      	b.n	8007a5c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	0011      	movs	r1, r2
 8007a56:	0018      	movs	r0, r3
 8007a58:	f005 fc6a 	bl	800d330 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007a5c:	2317      	movs	r3, #23
 8007a5e:	18fc      	adds	r4, r7, r3
 8007a60:	23fa      	movs	r3, #250	@ 0xfa
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	0018      	movs	r0, r3
 8007a66:	f000 f817 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8007a6e:	4b09      	ldr	r3, [pc, #36]	@ (8007a94 <HAL_FLASH_Program+0x98>)
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	43d9      	mvns	r1, r3
 8007a76:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <HAL_FLASH_Program+0x98>)
 8007a78:	400a      	ands	r2, r1
 8007a7a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a7c:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <HAL_FLASH_Program+0x94>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007a82:	2317      	movs	r3, #23
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	781b      	ldrb	r3, [r3, #0]
}
 8007a88:	0018      	movs	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	b006      	add	sp, #24
 8007a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8007a90:	20000d5c 	.word	0x20000d5c
 8007a94:	40022000 	.word	0x40022000

08007a98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8007aa0:	f7fe f94a 	bl	8005d38 <HAL_GetTick>
 8007aa4:	0003      	movs	r3, r0
 8007aa6:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8007aa8:	2380      	movs	r3, #128	@ 0x80
 8007aaa:	025b      	lsls	r3, r3, #9
 8007aac:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8007aae:	e00c      	b.n	8007aca <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	d009      	beq.n	8007aca <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8007ab6:	f7fe f93f 	bl	8005d38 <HAL_GetTick>
 8007aba:	0002      	movs	r2, r0
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d801      	bhi.n	8007aca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e028      	b.n	8007b1c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8007aca:	4b16      	ldr	r3, [pc, #88]	@ (8007b24 <FLASH_WaitForLastOperation+0x8c>)
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	d1ed      	bne.n	8007ab0 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8007ad4:	4b13      	ldr	r3, [pc, #76]	@ (8007b24 <FLASH_WaitForLastOperation+0x8c>)
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	4a13      	ldr	r2, [pc, #76]	@ (8007b28 <FLASH_WaitForLastOperation+0x90>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8007ade:	4b11      	ldr	r3, [pc, #68]	@ (8007b24 <FLASH_WaitForLastOperation+0x8c>)
 8007ae0:	4a12      	ldr	r2, [pc, #72]	@ (8007b2c <FLASH_WaitForLastOperation+0x94>)
 8007ae2:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d011      	beq.n	8007b0e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8007aea:	4b11      	ldr	r3, [pc, #68]	@ (8007b30 <FLASH_WaitForLastOperation+0x98>)
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e013      	b.n	8007b1c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3301      	adds	r3, #1
 8007af8:	d009      	beq.n	8007b0e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8007afa:	f7fe f91d 	bl	8005d38 <HAL_GetTick>
 8007afe:	0002      	movs	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d801      	bhi.n	8007b0e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e006      	b.n	8007b1c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8007b0e:	4b05      	ldr	r3, [pc, #20]	@ (8007b24 <FLASH_WaitForLastOperation+0x8c>)
 8007b10:	691a      	ldr	r2, [r3, #16]
 8007b12:	2380      	movs	r3, #128	@ 0x80
 8007b14:	02db      	lsls	r3, r3, #11
 8007b16:	4013      	ands	r3, r2
 8007b18:	d1ec      	bne.n	8007af4 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b004      	add	sp, #16
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40022000 	.word	0x40022000
 8007b28:	0000c3fa 	.word	0x0000c3fa
 8007b2c:	0000c3fb 	.word	0x0000c3fb
 8007b30:	20000d5c 	.word	0x20000d5c

08007b34 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007b34:	b5b0      	push	{r4, r5, r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	603a      	str	r2, [r7, #0]
 8007b3e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007b40:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <FLASH_Program_DoubleWord+0x3c>)
 8007b42:	695a      	ldr	r2, [r3, #20]
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <FLASH_Program_DoubleWord+0x3c>)
 8007b46:	2101      	movs	r1, #1
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007b52:	f3bf 8f6f 	isb	sy
}
 8007b56:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	001c      	movs	r4, r3
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	001d      	movs	r5, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3304      	adds	r3, #4
 8007b64:	0022      	movs	r2, r4
 8007b66:	601a      	str	r2, [r3, #0]
}
 8007b68:	46c0      	nop			@ (mov r8, r8)
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b004      	add	sp, #16
 8007b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b70:	40022000 	.word	0x40022000

08007b74 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007b74:	b5b0      	push	{r4, r5, r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007b7e:	4b35      	ldr	r3, [pc, #212]	@ (8007c54 <HAL_FLASHEx_Erase+0xe0>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_FLASHEx_Erase+0x16>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e05f      	b.n	8007c4a <HAL_FLASHEx_Erase+0xd6>
 8007b8a:	4b32      	ldr	r3, [pc, #200]	@ (8007c54 <HAL_FLASHEx_Erase+0xe0>)
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b90:	4b30      	ldr	r3, [pc, #192]	@ (8007c54 <HAL_FLASHEx_Erase+0xe0>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007b96:	250f      	movs	r5, #15
 8007b98:	197c      	adds	r4, r7, r5
 8007b9a:	23fa      	movs	r3, #250	@ 0xfa
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f7ff ff7a 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8007ba8:	002c      	movs	r4, r5
 8007baa:	193b      	adds	r3, r7, r4
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d145      	bne.n	8007c3e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d10d      	bne.n	8007bdc <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	f000 f849 	bl	8007c5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007bca:	193c      	adds	r4, r7, r4
 8007bcc:	23fa      	movs	r3, #250	@ 0xfa
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f7ff ff61 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	7023      	strb	r3, [r4, #0]
 8007bda:	e030      	b.n	8007c3e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2201      	movs	r2, #1
 8007be0:	4252      	negs	r2, r2
 8007be2:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	60bb      	str	r3, [r7, #8]
 8007bea:	e01a      	b.n	8007c22 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	0011      	movs	r1, r2
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f000 f845 	bl	8007c84 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007bfa:	250f      	movs	r5, #15
 8007bfc:	197c      	adds	r4, r7, r5
 8007bfe:	23fa      	movs	r3, #250	@ 0xfa
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	0018      	movs	r0, r3
 8007c04:	f7ff ff48 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007c08:	0003      	movs	r3, r0
 8007c0a:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8007c0c:	197b      	adds	r3, r7, r5
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	601a      	str	r2, [r3, #0]
          break;
 8007c1a:	e00a      	b.n	8007c32 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	18d3      	adds	r3, r2, r3
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d3dc      	bcc.n	8007bec <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c32:	4b09      	ldr	r3, [pc, #36]	@ (8007c58 <HAL_FLASHEx_Erase+0xe4>)
 8007c34:	695a      	ldr	r2, [r3, #20]
 8007c36:	4b08      	ldr	r3, [pc, #32]	@ (8007c58 <HAL_FLASHEx_Erase+0xe4>)
 8007c38:	2102      	movs	r1, #2
 8007c3a:	438a      	bics	r2, r1
 8007c3c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007c3e:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <HAL_FLASHEx_Erase+0xe0>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007c44:	230f      	movs	r3, #15
 8007c46:	18fb      	adds	r3, r7, r3
 8007c48:	781b      	ldrb	r3, [r3, #0]
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b004      	add	sp, #16
 8007c50:	bdb0      	pop	{r4, r5, r7, pc}
 8007c52:	46c0      	nop			@ (mov r8, r8)
 8007c54:	20000d5c 	.word	0x20000d5c
 8007c58:	40022000 	.word	0x40022000

08007c5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8007c64:	4b06      	ldr	r3, [pc, #24]	@ (8007c80 <FLASH_MassErase+0x24>)
 8007c66:	695a      	ldr	r2, [r3, #20]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	4b04      	ldr	r3, [pc, #16]	@ (8007c80 <FLASH_MassErase+0x24>)
 8007c6e:	2180      	movs	r1, #128	@ 0x80
 8007c70:	0249      	lsls	r1, r1, #9
 8007c72:	430a      	orrs	r2, r1
 8007c74:	615a      	str	r2, [r3, #20]
}
 8007c76:	46c0      	nop			@ (mov r8, r8)
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	b002      	add	sp, #8
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	46c0      	nop			@ (mov r8, r8)
 8007c80:	40022000 	.word	0x40022000

08007c84 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8007c8e:	4b08      	ldr	r3, [pc, #32]	@ (8007cb0 <FLASH_PageErase+0x2c>)
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	4a08      	ldr	r2, [pc, #32]	@ (8007cb4 <FLASH_PageErase+0x30>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	00da      	lsls	r2, r3, #3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	4b03      	ldr	r3, [pc, #12]	@ (8007cb0 <FLASH_PageErase+0x2c>)
 8007ca2:	4905      	ldr	r1, [pc, #20]	@ (8007cb8 <FLASH_PageErase+0x34>)
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	615a      	str	r2, [r3, #20]
}
 8007ca8:	46c0      	nop			@ (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b004      	add	sp, #16
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	40022000 	.word	0x40022000
 8007cb4:	ffffe007 	.word	0xffffe007
 8007cb8:	00010002 	.word	0x00010002

08007cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007cca:	e147      	b.n	8007f5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4091      	lsls	r1, r2
 8007cd6:	000a      	movs	r2, r1
 8007cd8:	4013      	ands	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d100      	bne.n	8007ce4 <HAL_GPIO_Init+0x28>
 8007ce2:	e138      	b.n	8007f56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2203      	movs	r2, #3
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d005      	beq.n	8007cfc <HAL_GPIO_Init+0x40>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d130      	bne.n	8007d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	2203      	movs	r2, #3
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	0013      	movs	r3, r2
 8007d0c:	43da      	mvns	r2, r3
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4013      	ands	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	409a      	lsls	r2, r3
 8007d1e:	0013      	movs	r3, r2
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d32:	2201      	movs	r2, #1
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	409a      	lsls	r2, r3
 8007d38:	0013      	movs	r3, r2
 8007d3a:	43da      	mvns	r2, r3
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	091b      	lsrs	r3, r3, #4
 8007d48:	2201      	movs	r2, #1
 8007d4a:	401a      	ands	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	409a      	lsls	r2, r3
 8007d50:	0013      	movs	r3, r2
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2203      	movs	r2, #3
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d017      	beq.n	8007d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	2203      	movs	r2, #3
 8007d76:	409a      	lsls	r2, r3
 8007d78:	0013      	movs	r3, r2
 8007d7a:	43da      	mvns	r2, r3
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	0013      	movs	r3, r2
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	2203      	movs	r2, #3
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d123      	bne.n	8007dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	08da      	lsrs	r2, r3, #3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3208      	adds	r2, #8
 8007dae:	0092      	lsls	r2, r2, #2
 8007db0:	58d3      	ldr	r3, [r2, r3]
 8007db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2207      	movs	r2, #7
 8007db8:	4013      	ands	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	220f      	movs	r2, #15
 8007dbe:	409a      	lsls	r2, r3
 8007dc0:	0013      	movs	r3, r2
 8007dc2:	43da      	mvns	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2107      	movs	r1, #7
 8007dd2:	400b      	ands	r3, r1
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	409a      	lsls	r2, r3
 8007dd8:	0013      	movs	r3, r2
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	08da      	lsrs	r2, r3, #3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3208      	adds	r2, #8
 8007de8:	0092      	lsls	r2, r2, #2
 8007dea:	6939      	ldr	r1, [r7, #16]
 8007dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	2203      	movs	r2, #3
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	0013      	movs	r3, r2
 8007dfe:	43da      	mvns	r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	4013      	ands	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	401a      	ands	r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	409a      	lsls	r2, r3
 8007e14:	0013      	movs	r3, r2
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	23c0      	movs	r3, #192	@ 0xc0
 8007e28:	029b      	lsls	r3, r3, #10
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	d100      	bne.n	8007e30 <HAL_GPIO_Init+0x174>
 8007e2e:	e092      	b.n	8007f56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007e30:	4a50      	ldr	r2, [pc, #320]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	089b      	lsrs	r3, r3, #2
 8007e36:	3318      	adds	r3, #24
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	589b      	ldr	r3, [r3, r2]
 8007e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2203      	movs	r2, #3
 8007e42:	4013      	ands	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	220f      	movs	r2, #15
 8007e48:	409a      	lsls	r2, r3
 8007e4a:	0013      	movs	r3, r2
 8007e4c:	43da      	mvns	r2, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	4013      	ands	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	23a0      	movs	r3, #160	@ 0xa0
 8007e58:	05db      	lsls	r3, r3, #23
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d013      	beq.n	8007e86 <HAL_GPIO_Init+0x1ca>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a45      	ldr	r2, [pc, #276]	@ (8007f78 <HAL_GPIO_Init+0x2bc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00d      	beq.n	8007e82 <HAL_GPIO_Init+0x1c6>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a44      	ldr	r2, [pc, #272]	@ (8007f7c <HAL_GPIO_Init+0x2c0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d007      	beq.n	8007e7e <HAL_GPIO_Init+0x1c2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a43      	ldr	r2, [pc, #268]	@ (8007f80 <HAL_GPIO_Init+0x2c4>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d101      	bne.n	8007e7a <HAL_GPIO_Init+0x1be>
 8007e76:	2303      	movs	r3, #3
 8007e78:	e006      	b.n	8007e88 <HAL_GPIO_Init+0x1cc>
 8007e7a:	2305      	movs	r3, #5
 8007e7c:	e004      	b.n	8007e88 <HAL_GPIO_Init+0x1cc>
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e002      	b.n	8007e88 <HAL_GPIO_Init+0x1cc>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e000      	b.n	8007e88 <HAL_GPIO_Init+0x1cc>
 8007e86:	2300      	movs	r3, #0
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	2103      	movs	r1, #3
 8007e8c:	400a      	ands	r2, r1
 8007e8e:	00d2      	lsls	r2, r2, #3
 8007e90:	4093      	lsls	r3, r2
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007e98:	4936      	ldr	r1, [pc, #216]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	089b      	lsrs	r3, r3, #2
 8007e9e:	3318      	adds	r3, #24
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ea6:	4b33      	ldr	r3, [pc, #204]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	43da      	mvns	r2, r3
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	2380      	movs	r3, #128	@ 0x80
 8007ebc:	035b      	lsls	r3, r3, #13
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	d003      	beq.n	8007eca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007eca:	4b2a      	ldr	r3, [pc, #168]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007ed0:	4b28      	ldr	r3, [pc, #160]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	43da      	mvns	r2, r3
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4013      	ands	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	2380      	movs	r3, #128	@ 0x80
 8007ee6:	039b      	lsls	r3, r3, #14
 8007ee8:	4013      	ands	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007efa:	4a1e      	ldr	r2, [pc, #120]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007efc:	2384      	movs	r3, #132	@ 0x84
 8007efe:	58d3      	ldr	r3, [r2, r3]
 8007f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	43da      	mvns	r2, r3
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	2380      	movs	r3, #128	@ 0x80
 8007f12:	029b      	lsls	r3, r3, #10
 8007f14:	4013      	ands	r3, r2
 8007f16:	d003      	beq.n	8007f20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007f20:	4914      	ldr	r1, [pc, #80]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007f22:	2284      	movs	r2, #132	@ 0x84
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007f28:	4a12      	ldr	r2, [pc, #72]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007f2a:	2380      	movs	r3, #128	@ 0x80
 8007f2c:	58d3      	ldr	r3, [r2, r3]
 8007f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	43da      	mvns	r2, r3
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4013      	ands	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	2380      	movs	r3, #128	@ 0x80
 8007f40:	025b      	lsls	r3, r3, #9
 8007f42:	4013      	ands	r3, r2
 8007f44:	d003      	beq.n	8007f4e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007f4e:	4909      	ldr	r1, [pc, #36]	@ (8007f74 <HAL_GPIO_Init+0x2b8>)
 8007f50:	2280      	movs	r2, #128	@ 0x80
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	40da      	lsrs	r2, r3
 8007f64:	1e13      	subs	r3, r2, #0
 8007f66:	d000      	beq.n	8007f6a <HAL_GPIO_Init+0x2ae>
 8007f68:	e6b0      	b.n	8007ccc <HAL_GPIO_Init+0x10>
  }
}
 8007f6a:	46c0      	nop			@ (mov r8, r8)
 8007f6c:	46c0      	nop			@ (mov r8, r8)
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b006      	add	sp, #24
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40021800 	.word	0x40021800
 8007f78:	50000400 	.word	0x50000400
 8007f7c:	50000800 	.word	0x50000800
 8007f80:	50000c00 	.word	0x50000c00

08007f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	000a      	movs	r2, r1
 8007f8e:	1cbb      	adds	r3, r7, #2
 8007f90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	1cba      	adds	r2, r7, #2
 8007f98:	8812      	ldrh	r2, [r2, #0]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007f9e:	230f      	movs	r3, #15
 8007fa0:	18fb      	adds	r3, r7, r3
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e003      	b.n	8007fb0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fa8:	230f      	movs	r3, #15
 8007faa:	18fb      	adds	r3, r7, r3
 8007fac:	2200      	movs	r2, #0
 8007fae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007fb0:	230f      	movs	r3, #15
 8007fb2:	18fb      	adds	r3, r7, r3
 8007fb4:	781b      	ldrb	r3, [r3, #0]
}
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b004      	add	sp, #16
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	0008      	movs	r0, r1
 8007fc8:	0011      	movs	r1, r2
 8007fca:	1cbb      	adds	r3, r7, #2
 8007fcc:	1c02      	adds	r2, r0, #0
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	1c7b      	adds	r3, r7, #1
 8007fd2:	1c0a      	adds	r2, r1, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fd6:	1c7b      	adds	r3, r7, #1
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007fde:	1cbb      	adds	r3, r7, #2
 8007fe0:	881a      	ldrh	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007fe6:	e003      	b.n	8007ff0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007fe8:	1cbb      	adds	r3, r7, #2
 8007fea:	881a      	ldrh	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ff0:	46c0      	nop			@ (mov r8, r8)
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	b002      	add	sp, #8
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	0002      	movs	r2, r0
 8008000:	1dbb      	adds	r3, r7, #6
 8008002:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008004:	4b10      	ldr	r3, [pc, #64]	@ (8008048 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	1dba      	adds	r2, r7, #6
 800800a:	8812      	ldrh	r2, [r2, #0]
 800800c:	4013      	ands	r3, r2
 800800e:	d008      	beq.n	8008022 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008010:	4b0d      	ldr	r3, [pc, #52]	@ (8008048 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008012:	1dba      	adds	r2, r7, #6
 8008014:	8812      	ldrh	r2, [r2, #0]
 8008016:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008018:	1dbb      	adds	r3, r7, #6
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	0018      	movs	r0, r3
 800801e:	f7fb fceb 	bl	80039f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8008022:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	1dba      	adds	r2, r7, #6
 8008028:	8812      	ldrh	r2, [r2, #0]
 800802a:	4013      	ands	r3, r2
 800802c:	d008      	beq.n	8008040 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800802e:	4b06      	ldr	r3, [pc, #24]	@ (8008048 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008030:	1dba      	adds	r2, r7, #6
 8008032:	8812      	ldrh	r2, [r2, #0]
 8008034:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008036:	1dbb      	adds	r3, r7, #6
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	0018      	movs	r0, r3
 800803c:	f7fb fcb2 	bl	80039a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008040:	46c0      	nop			@ (mov r8, r8)
 8008042:	46bd      	mov	sp, r7
 8008044:	b002      	add	sp, #8
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40021800 	.word	0x40021800

0800804c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e097      	b.n	800818e <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2236      	movs	r2, #54	@ 0x36
 8008062:	5c9b      	ldrb	r3, [r3, r2]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d113      	bne.n	8008092 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2235      	movs	r2, #53	@ 0x35
 800806e:	2100      	movs	r1, #0
 8008070:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	0018      	movs	r0, r3
 8008076:	f000 fa8f 	bl	8008598 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a44      	ldr	r2, [pc, #272]	@ (8008198 <HAL_LPTIM_Init+0x14c>)
 8008086:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	0010      	movs	r0, r2
 8008090:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2236      	movs	r2, #54	@ 0x36
 8008096:	2102      	movs	r1, #2
 8008098:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d005      	beq.n	80080b6 <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080ae:	2380      	movs	r3, #128	@ 0x80
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d103      	bne.n	80080be <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	221e      	movs	r2, #30
 80080ba:	4393      	bics	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	4a36      	ldr	r2, [pc, #216]	@ (800819c <HAL_LPTIM_Init+0x150>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4a35      	ldr	r2, [pc, #212]	@ (80081a0 <HAL_LPTIM_Init+0x154>)
 80080cc:	4013      	ands	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4a34      	ldr	r2, [pc, #208]	@ (80081a4 <HAL_LPTIM_Init+0x158>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80080e0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80080e6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80080ec:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80080f2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d107      	bne.n	8008112 <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800810a:	4313      	orrs	r3, r2
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d005      	beq.n	8008126 <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800811e:	2380      	movs	r3, #128	@ 0x80
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	429a      	cmp	r2, r3
 8008124:	d107      	bne.n	8008136 <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800812e:	4313      	orrs	r3, r2
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	4a18      	ldr	r2, [pc, #96]	@ (800819c <HAL_LPTIM_Init+0x150>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00a      	beq.n	8008156 <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008148:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800814e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a11      	ldr	r2, [pc, #68]	@ (80081a8 <HAL_LPTIM_Init+0x15c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	625a      	str	r2, [r3, #36]	@ 0x24
 8008178:	e004      	b.n	8008184 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008182:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2236      	movs	r2, #54	@ 0x36
 8008188:	2101      	movs	r1, #1
 800818a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	0018      	movs	r0, r3
 8008190:	46bd      	mov	sp, r7
 8008192:	b004      	add	sp, #16
 8008194:	bd80      	pop	{r7, pc}
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	08004b91 	.word	0x08004b91
 800819c:	0000ffff 	.word	0x0000ffff
 80081a0:	ffff1f3f 	.word	0xffff1f3f
 80081a4:	ff19f1fe 	.word	0xff19f1fe
 80081a8:	40007c00 	.word	0x40007c00

080081ac <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2236      	movs	r2, #54	@ 0x36
 80081bc:	2102      	movs	r1, #2
 80081be:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2180      	movs	r1, #128	@ 0x80
 80081cc:	0349      	lsls	r1, r1, #13
 80081ce:	430a      	orrs	r2, r1
 80081d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2101      	movs	r1, #1
 80081de:	430a      	orrs	r2, r1
 80081e0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2210      	movs	r2, #16
 80081e8:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2110      	movs	r1, #16
 80081f6:	0018      	movs	r0, r3
 80081f8:	f000 f9fa 	bl	80085f0 <LPTIM_WaitForFlag>
 80081fc:	0003      	movs	r3, r0
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d101      	bne.n	8008206 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e060      	b.n	80082c8 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2208      	movs	r2, #8
 800820c:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2108      	movs	r1, #8
 800821a:	0018      	movs	r0, r3
 800821c:	f000 f9e8 	bl	80085f0 <LPTIM_WaitForFlag>
 8008220:	0003      	movs	r3, r0
 8008222:	2b03      	cmp	r3, #3
 8008224:	d101      	bne.n	800822a <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e04e      	b.n	80082c8 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	0018      	movs	r0, r3
 800822e:	f000 fa17 	bl	8008660 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	0018      	movs	r0, r3
 8008236:	f000 f9a3 	bl	8008580 <HAL_LPTIM_GetState>
 800823a:	0003      	movs	r3, r0
 800823c:	2b03      	cmp	r3, #3
 800823e:	d101      	bne.n	8008244 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e041      	b.n	80082c8 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2110      	movs	r1, #16
 8008250:	430a      	orrs	r2, r1
 8008252:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2108      	movs	r1, #8
 8008260:	430a      	orrs	r2, r1
 8008262:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2102      	movs	r1, #2
 8008270:	430a      	orrs	r2, r1
 8008272:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2101      	movs	r1, #1
 8008280:	430a      	orrs	r2, r1
 8008282:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	4a11      	ldr	r2, [pc, #68]	@ (80082d0 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d007      	beq.n	800829e <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2104      	movs	r1, #4
 800829a:	430a      	orrs	r2, r1
 800829c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691a      	ldr	r2, [r3, #16]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2101      	movs	r1, #1
 80082aa:	430a      	orrs	r2, r1
 80082ac:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2102      	movs	r1, #2
 80082ba:	430a      	orrs	r2, r1
 80082bc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2236      	movs	r2, #54	@ 0x36
 80082c2:	2101      	movs	r1, #1
 80082c4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	0018      	movs	r0, r3
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b004      	add	sp, #16
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	0000ffff 	.word	0x0000ffff

080082d4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2201      	movs	r2, #1
 80082e4:	4013      	ands	r3, r2
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d10f      	bne.n	800830a <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2201      	movs	r2, #1
 80082f2:	4013      	ands	r3, r2
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d108      	bne.n	800830a <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2201      	movs	r2, #1
 80082fe:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	0010      	movs	r0, r2
 8008308:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2202      	movs	r2, #2
 8008312:	4013      	ands	r3, r2
 8008314:	2b02      	cmp	r3, #2
 8008316:	d10f      	bne.n	8008338 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2202      	movs	r2, #2
 8008320:	4013      	ands	r3, r2
 8008322:	2b02      	cmp	r3, #2
 8008324:	d108      	bne.n	8008338 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2202      	movs	r2, #2
 800832c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	0010      	movs	r0, r2
 8008336:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2204      	movs	r2, #4
 8008340:	4013      	ands	r3, r2
 8008342:	2b04      	cmp	r3, #4
 8008344:	d10f      	bne.n	8008366 <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2204      	movs	r2, #4
 800834e:	4013      	ands	r3, r2
 8008350:	2b04      	cmp	r3, #4
 8008352:	d108      	bne.n	8008366 <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2204      	movs	r2, #4
 800835a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	0010      	movs	r0, r2
 8008364:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2208      	movs	r2, #8
 800836e:	4013      	ands	r3, r2
 8008370:	2b08      	cmp	r3, #8
 8008372:	d10f      	bne.n	8008394 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	2208      	movs	r2, #8
 800837c:	4013      	ands	r3, r2
 800837e:	2b08      	cmp	r3, #8
 8008380:	d108      	bne.n	8008394 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2208      	movs	r2, #8
 8008388:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	0010      	movs	r0, r2
 8008392:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2210      	movs	r2, #16
 800839c:	4013      	ands	r3, r2
 800839e:	2b10      	cmp	r3, #16
 80083a0:	d10f      	bne.n	80083c2 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2210      	movs	r2, #16
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b10      	cmp	r3, #16
 80083ae:	d108      	bne.n	80083c2 <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2210      	movs	r2, #16
 80083b6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	0010      	movs	r0, r2
 80083c0:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2220      	movs	r2, #32
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d10f      	bne.n	80083f0 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2220      	movs	r2, #32
 80083d8:	4013      	ands	r3, r2
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d108      	bne.n	80083f0 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2220      	movs	r2, #32
 80083e4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	0010      	movs	r0, r2
 80083ee:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2240      	movs	r2, #64	@ 0x40
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b40      	cmp	r3, #64	@ 0x40
 80083fc:	d10f      	bne.n	800841e <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	2240      	movs	r2, #64	@ 0x40
 8008406:	4013      	ands	r3, r2
 8008408:	2b40      	cmp	r3, #64	@ 0x40
 800840a:	d108      	bne.n	800841e <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2240      	movs	r2, #64	@ 0x40
 8008412:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	0010      	movs	r0, r2
 800841c:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800841e:	46c0      	nop			@ (mov r8, r8)
 8008420:	46bd      	mov	sp, r7
 8008422:	b002      	add	sp, #8
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	46bd      	mov	sp, r7
 8008432:	b002      	add	sp, #8
 8008434:	bd80      	pop	{r7, pc}

08008436 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b082      	sub	sp, #8
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800843e:	46c0      	nop			@ (mov r8, r8)
 8008440:	46bd      	mov	sp, r7
 8008442:	b002      	add	sp, #8
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800844e:	46c0      	nop			@ (mov r8, r8)
 8008450:	46bd      	mov	sp, r7
 8008452:	b002      	add	sp, #8
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800845e:	46c0      	nop			@ (mov r8, r8)
 8008460:	46bd      	mov	sp, r7
 8008462:	b002      	add	sp, #8
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800846e:	46c0      	nop			@ (mov r8, r8)
 8008470:	46bd      	mov	sp, r7
 8008472:	b002      	add	sp, #8
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800847e:	46c0      	nop			@ (mov r8, r8)
 8008480:	46bd      	mov	sp, r7
 8008482:	b002      	add	sp, #8
 8008484:	bd80      	pop	{r7, pc}

08008486 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800848e:	46c0      	nop			@ (mov r8, r8)
 8008490:	46bd      	mov	sp, r7
 8008492:	b002      	add	sp, #8
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	607a      	str	r2, [r7, #4]
 80084a2:	230b      	movs	r3, #11
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	1c0a      	adds	r2, r1, #0
 80084a8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084aa:	2317      	movs	r3, #23
 80084ac:	18fb      	adds	r3, r7, r3
 80084ae:	2200      	movs	r2, #0
 80084b0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e05a      	b.n	8008572 <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2236      	movs	r2, #54	@ 0x36
 80084c0:	5c9b      	ldrb	r3, [r3, r2]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d132      	bne.n	800852e <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 80084c8:	230b      	movs	r3, #11
 80084ca:	18fb      	adds	r3, r7, r3
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d828      	bhi.n	8008524 <HAL_LPTIM_RegisterCallback+0x8c>
 80084d2:	009a      	lsls	r2, r3, #2
 80084d4:	4b29      	ldr	r3, [pc, #164]	@ (800857c <HAL_LPTIM_RegisterCallback+0xe4>)
 80084d6:	18d3      	adds	r3, r2, r3
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80084e2:	e043      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80084ea:	e03f      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80084f2:	e03b      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 80084fa:	e037      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8008502:	e033      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800850a:	e02f      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008512:	e02b      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800851a:	e027      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008522:	e023      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8008524:	2317      	movs	r3, #23
 8008526:	18fb      	adds	r3, r7, r3
 8008528:	2201      	movs	r2, #1
 800852a:	701a      	strb	r2, [r3, #0]
        break;
 800852c:	e01e      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2236      	movs	r2, #54	@ 0x36
 8008532:	5c9b      	ldrb	r3, [r3, r2]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d114      	bne.n	8008564 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 800853a:	230b      	movs	r3, #11
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <HAL_LPTIM_RegisterCallback+0xb2>
 8008544:	2b01      	cmp	r3, #1
 8008546:	d004      	beq.n	8008552 <HAL_LPTIM_RegisterCallback+0xba>
 8008548:	e007      	b.n	800855a <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008550:	e00c      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008558:	e008      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800855a:	2317      	movs	r3, #23
 800855c:	18fb      	adds	r3, r7, r3
 800855e:	2201      	movs	r2, #1
 8008560:	701a      	strb	r2, [r3, #0]
        break;
 8008562:	e003      	b.n	800856c <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008564:	2317      	movs	r3, #23
 8008566:	18fb      	adds	r3, r7, r3
 8008568:	2201      	movs	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800856c:	2317      	movs	r3, #23
 800856e:	18fb      	adds	r3, r7, r3
 8008570:	781b      	ldrb	r3, [r3, #0]
}
 8008572:	0018      	movs	r0, r3
 8008574:	46bd      	mov	sp, r7
 8008576:	b006      	add	sp, #24
 8008578:	bd80      	pop	{r7, pc}
 800857a:	46c0      	nop			@ (mov r8, r8)
 800857c:	0800dc08 	.word	0x0800dc08

08008580 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2236      	movs	r2, #54	@ 0x36
 800858c:	5c9b      	ldrb	r3, [r3, r2]
 800858e:	b2db      	uxtb	r3, r3
}
 8008590:	0018      	movs	r0, r3
 8008592:	46bd      	mov	sp, r7
 8008594:	b002      	add	sp, #8
 8008596:	bd80      	pop	{r7, pc}

08008598 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a0c      	ldr	r2, [pc, #48]	@ (80085d4 <LPTIM_ResetCallback+0x3c>)
 80085a4:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a0b      	ldr	r2, [pc, #44]	@ (80085d8 <LPTIM_ResetCallback+0x40>)
 80085aa:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a0b      	ldr	r2, [pc, #44]	@ (80085dc <LPTIM_ResetCallback+0x44>)
 80085b0:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a0a      	ldr	r2, [pc, #40]	@ (80085e0 <LPTIM_ResetCallback+0x48>)
 80085b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a0a      	ldr	r2, [pc, #40]	@ (80085e4 <LPTIM_ResetCallback+0x4c>)
 80085bc:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a09      	ldr	r2, [pc, #36]	@ (80085e8 <LPTIM_ResetCallback+0x50>)
 80085c2:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a09      	ldr	r2, [pc, #36]	@ (80085ec <LPTIM_ResetCallback+0x54>)
 80085c8:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80085ca:	46c0      	nop			@ (mov r8, r8)
 80085cc:	46bd      	mov	sp, r7
 80085ce:	b002      	add	sp, #8
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	46c0      	nop			@ (mov r8, r8)
 80085d4:	08008427 	.word	0x08008427
 80085d8:	08008437 	.word	0x08008437
 80085dc:	08008447 	.word	0x08008447
 80085e0:	08008457 	.word	0x08008457
 80085e4:	08008467 	.word	0x08008467
 80085e8:	08008477 	.word	0x08008477
 80085ec:	08008487 	.word	0x08008487

080085f0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80085fa:	230f      	movs	r3, #15
 80085fc:	18fb      	adds	r3, r7, r3
 80085fe:	2200      	movs	r2, #0
 8008600:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008602:	4b15      	ldr	r3, [pc, #84]	@ (8008658 <LPTIM_WaitForFlag+0x68>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4915      	ldr	r1, [pc, #84]	@ (800865c <LPTIM_WaitForFlag+0x6c>)
 8008608:	0018      	movs	r0, r3
 800860a:	f7f7 fd7d 	bl	8000108 <__udivsi3>
 800860e:	0003      	movs	r3, r0
 8008610:	001a      	movs	r2, r3
 8008612:	0013      	movs	r3, r2
 8008614:	015b      	lsls	r3, r3, #5
 8008616:	1a9b      	subs	r3, r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	189b      	adds	r3, r3, r2
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	3b01      	subs	r3, #1
 8008624:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 800862c:	230f      	movs	r3, #15
 800862e:	18fb      	adds	r3, r7, r3
 8008630:	2203      	movs	r2, #3
 8008632:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	4013      	ands	r3, r2
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d002      	beq.n	800864a <LPTIM_WaitForFlag+0x5a>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1ea      	bne.n	8008620 <LPTIM_WaitForFlag+0x30>

  return result;
 800864a:	230f      	movs	r3, #15
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	781b      	ldrb	r3, [r3, #0]
}
 8008650:	0018      	movs	r0, r3
 8008652:	46bd      	mov	sp, r7
 8008654:	b004      	add	sp, #16
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20000440 	.word	0x20000440
 800865c:	00004e20 	.word	0x00004e20

08008660 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08c      	sub	sp, #48	@ 0x30
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866c:	f3ef 8310 	mrs	r3, PRIMASK
 8008670:	60fb      	str	r3, [r7, #12]
  return(result);
 8008672:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008676:	2301      	movs	r3, #1
 8008678:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f383 8810 	msr	PRIMASK, r3
}
 8008680:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a72      	ldr	r2, [pc, #456]	@ (8008850 <LPTIM_Disable+0x1f0>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <LPTIM_Disable+0x34>
 800868c:	4a71      	ldr	r2, [pc, #452]	@ (8008854 <LPTIM_Disable+0x1f4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008692:	e00d      	b.n	80086b0 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008694:	4b70      	ldr	r3, [pc, #448]	@ (8008858 <LPTIM_Disable+0x1f8>)
 8008696:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008698:	23c0      	movs	r3, #192	@ 0xc0
 800869a:	031b      	lsls	r3, r3, #12
 800869c:	4013      	ands	r3, r2
 800869e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80086a0:	e006      	b.n	80086b0 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80086a2:	4b6d      	ldr	r3, [pc, #436]	@ (8008858 <LPTIM_Disable+0x1f8>)
 80086a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086a6:	23c0      	movs	r3, #192	@ 0xc0
 80086a8:	039b      	lsls	r3, r3, #14
 80086aa:	4013      	ands	r3, r2
 80086ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80086ae:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a5c      	ldr	r2, [pc, #368]	@ (8008850 <LPTIM_Disable+0x1f0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d003      	beq.n	80086ea <LPTIM_Disable+0x8a>
 80086e2:	4a5c      	ldr	r2, [pc, #368]	@ (8008854 <LPTIM_Disable+0x1f4>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d00e      	beq.n	8008706 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80086e8:	e01b      	b.n	8008722 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80086ea:	4b5b      	ldr	r3, [pc, #364]	@ (8008858 <LPTIM_Disable+0x1f8>)
 80086ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ee:	4b5a      	ldr	r3, [pc, #360]	@ (8008858 <LPTIM_Disable+0x1f8>)
 80086f0:	2180      	movs	r1, #128	@ 0x80
 80086f2:	0609      	lsls	r1, r1, #24
 80086f4:	430a      	orrs	r2, r1
 80086f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80086f8:	4b57      	ldr	r3, [pc, #348]	@ (8008858 <LPTIM_Disable+0x1f8>)
 80086fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086fc:	4b56      	ldr	r3, [pc, #344]	@ (8008858 <LPTIM_Disable+0x1f8>)
 80086fe:	0052      	lsls	r2, r2, #1
 8008700:	0852      	lsrs	r2, r2, #1
 8008702:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008704:	e00d      	b.n	8008722 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008706:	4b54      	ldr	r3, [pc, #336]	@ (8008858 <LPTIM_Disable+0x1f8>)
 8008708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800870a:	4b53      	ldr	r3, [pc, #332]	@ (8008858 <LPTIM_Disable+0x1f8>)
 800870c:	2180      	movs	r1, #128	@ 0x80
 800870e:	05c9      	lsls	r1, r1, #23
 8008710:	430a      	orrs	r2, r1
 8008712:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008714:	4b50      	ldr	r3, [pc, #320]	@ (8008858 <LPTIM_Disable+0x1f8>)
 8008716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008718:	4b4f      	ldr	r3, [pc, #316]	@ (8008858 <LPTIM_Disable+0x1f8>)
 800871a:	4950      	ldr	r1, [pc, #320]	@ (800885c <LPTIM_Disable+0x1fc>)
 800871c:	400a      	ands	r2, r1
 800871e:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008720:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d103      	bne.n	8008730 <LPTIM_Disable+0xd0>
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d100      	bne.n	8008730 <LPTIM_Disable+0xd0>
 800872e:	e071      	b.n	8008814 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a46      	ldr	r2, [pc, #280]	@ (8008850 <LPTIM_Disable+0x1f0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d003      	beq.n	8008742 <LPTIM_Disable+0xe2>
 800873a:	4a46      	ldr	r2, [pc, #280]	@ (8008854 <LPTIM_Disable+0x1f4>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d007      	beq.n	8008750 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008740:	e00d      	b.n	800875e <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008742:	4b45      	ldr	r3, [pc, #276]	@ (8008858 <LPTIM_Disable+0x1f8>)
 8008744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008746:	4b44      	ldr	r3, [pc, #272]	@ (8008858 <LPTIM_Disable+0x1f8>)
 8008748:	4945      	ldr	r1, [pc, #276]	@ (8008860 <LPTIM_Disable+0x200>)
 800874a:	400a      	ands	r2, r1
 800874c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800874e:	e006      	b.n	800875e <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008750:	4b41      	ldr	r3, [pc, #260]	@ (8008858 <LPTIM_Disable+0x1f8>)
 8008752:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008754:	4b40      	ldr	r3, [pc, #256]	@ (8008858 <LPTIM_Disable+0x1f8>)
 8008756:	4943      	ldr	r1, [pc, #268]	@ (8008864 <LPTIM_Disable+0x204>)
 8008758:	400a      	ands	r2, r1
 800875a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800875c:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01b      	beq.n	800879c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2101      	movs	r1, #1
 8008770:	430a      	orrs	r2, r1
 8008772:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2108      	movs	r1, #8
 8008780:	0018      	movs	r0, r3
 8008782:	f7ff ff35 	bl	80085f0 <LPTIM_WaitForFlag>
 8008786:	0003      	movs	r3, r0
 8008788:	2b03      	cmp	r3, #3
 800878a:	d103      	bne.n	8008794 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2236      	movs	r2, #54	@ 0x36
 8008790:	2103      	movs	r1, #3
 8008792:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2208      	movs	r2, #8
 800879a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d01b      	beq.n	80087da <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2101      	movs	r1, #1
 80087ae:	430a      	orrs	r2, r1
 80087b0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2110      	movs	r1, #16
 80087be:	0018      	movs	r0, r3
 80087c0:	f7ff ff16 	bl	80085f0 <LPTIM_WaitForFlag>
 80087c4:	0003      	movs	r3, r0
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d103      	bne.n	80087d2 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2236      	movs	r2, #54	@ 0x36
 80087ce:	2103      	movs	r1, #3
 80087d0:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2210      	movs	r2, #16
 80087d8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1c      	ldr	r2, [pc, #112]	@ (8008850 <LPTIM_Disable+0x1f0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d003      	beq.n	80087ec <LPTIM_Disable+0x18c>
 80087e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008854 <LPTIM_Disable+0x1f4>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00a      	beq.n	8008800 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80087ea:	e013      	b.n	8008814 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80087ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008858 <LPTIM_Disable+0x1f8>)
 80087ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008860 <LPTIM_Disable+0x200>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	0019      	movs	r1, r3
 80087f6:	4b18      	ldr	r3, [pc, #96]	@ (8008858 <LPTIM_Disable+0x1f8>)
 80087f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087fa:	430a      	orrs	r2, r1
 80087fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80087fe:	e009      	b.n	8008814 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008800:	4b15      	ldr	r3, [pc, #84]	@ (8008858 <LPTIM_Disable+0x1f8>)
 8008802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008804:	4a17      	ldr	r2, [pc, #92]	@ (8008864 <LPTIM_Disable+0x204>)
 8008806:	4013      	ands	r3, r2
 8008808:	0019      	movs	r1, r3
 800880a:	4b13      	ldr	r3, [pc, #76]	@ (8008858 <LPTIM_Disable+0x1f8>)
 800880c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800880e:	430a      	orrs	r2, r1
 8008810:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008812:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2101      	movs	r1, #1
 8008820:	438a      	bics	r2, r1
 8008822:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a3a      	ldr	r2, [r7, #32]
 8008832:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	625a      	str	r2, [r3, #36]	@ 0x24
 800883c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f383 8810 	msr	PRIMASK, r3
}
 8008846:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008848:	46c0      	nop			@ (mov r8, r8)
 800884a:	46bd      	mov	sp, r7
 800884c:	b00c      	add	sp, #48	@ 0x30
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40007c00 	.word	0x40007c00
 8008854:	40009400 	.word	0x40009400
 8008858:	40021000 	.word	0x40021000
 800885c:	bfffffff 	.word	0xbfffffff
 8008860:	fff3ffff 	.word	0xfff3ffff
 8008864:	ffcfffff 	.word	0xffcfffff

08008868 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008870:	4b19      	ldr	r3, [pc, #100]	@ (80088d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a19      	ldr	r2, [pc, #100]	@ (80088dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008876:	4013      	ands	r3, r2
 8008878:	0019      	movs	r1, r3
 800887a:	4b17      	ldr	r3, [pc, #92]	@ (80088d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	430a      	orrs	r2, r1
 8008880:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	2380      	movs	r3, #128	@ 0x80
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	429a      	cmp	r2, r3
 800888a:	d11f      	bne.n	80088cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800888c:	4b14      	ldr	r3, [pc, #80]	@ (80088e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	0013      	movs	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	189b      	adds	r3, r3, r2
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	4912      	ldr	r1, [pc, #72]	@ (80088e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800889a:	0018      	movs	r0, r3
 800889c:	f7f7 fc34 	bl	8000108 <__udivsi3>
 80088a0:	0003      	movs	r3, r0
 80088a2:	3301      	adds	r3, #1
 80088a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80088a6:	e008      	b.n	80088ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e001      	b.n	80088ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e009      	b.n	80088ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80088ba:	4b07      	ldr	r3, [pc, #28]	@ (80088d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80088bc:	695a      	ldr	r2, [r3, #20]
 80088be:	2380      	movs	r3, #128	@ 0x80
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	401a      	ands	r2, r3
 80088c4:	2380      	movs	r3, #128	@ 0x80
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d0ed      	beq.n	80088a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	0018      	movs	r0, r3
 80088d0:	46bd      	mov	sp, r7
 80088d2:	b004      	add	sp, #16
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	46c0      	nop			@ (mov r8, r8)
 80088d8:	40007000 	.word	0x40007000
 80088dc:	fffff9ff 	.word	0xfffff9ff
 80088e0:	20000440 	.word	0x20000440
 80088e4:	000f4240 	.word	0x000f4240

080088e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80088ec:	4b03      	ldr	r3, [pc, #12]	@ (80088fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	23e0      	movs	r3, #224	@ 0xe0
 80088f2:	01db      	lsls	r3, r3, #7
 80088f4:	4013      	ands	r3, r2
}
 80088f6:	0018      	movs	r0, r3
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	40021000 	.word	0x40021000

08008900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e2fe      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	4013      	ands	r3, r2
 800891a:	d100      	bne.n	800891e <HAL_RCC_OscConfig+0x1e>
 800891c:	e07c      	b.n	8008a18 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800891e:	4bc3      	ldr	r3, [pc, #780]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2238      	movs	r2, #56	@ 0x38
 8008924:	4013      	ands	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008928:	4bc0      	ldr	r3, [pc, #768]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	2203      	movs	r2, #3
 800892e:	4013      	ands	r3, r2
 8008930:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b10      	cmp	r3, #16
 8008936:	d102      	bne.n	800893e <HAL_RCC_OscConfig+0x3e>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b03      	cmp	r3, #3
 800893c:	d002      	beq.n	8008944 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b08      	cmp	r3, #8
 8008942:	d10b      	bne.n	800895c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008944:	4bb9      	ldr	r3, [pc, #740]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	2380      	movs	r3, #128	@ 0x80
 800894a:	029b      	lsls	r3, r3, #10
 800894c:	4013      	ands	r3, r2
 800894e:	d062      	beq.n	8008a16 <HAL_RCC_OscConfig+0x116>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d15e      	bne.n	8008a16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e2d9      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	2380      	movs	r3, #128	@ 0x80
 8008962:	025b      	lsls	r3, r3, #9
 8008964:	429a      	cmp	r2, r3
 8008966:	d107      	bne.n	8008978 <HAL_RCC_OscConfig+0x78>
 8008968:	4bb0      	ldr	r3, [pc, #704]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	4baf      	ldr	r3, [pc, #700]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 800896e:	2180      	movs	r1, #128	@ 0x80
 8008970:	0249      	lsls	r1, r1, #9
 8008972:	430a      	orrs	r2, r1
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	e020      	b.n	80089ba <HAL_RCC_OscConfig+0xba>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	23a0      	movs	r3, #160	@ 0xa0
 800897e:	02db      	lsls	r3, r3, #11
 8008980:	429a      	cmp	r2, r3
 8008982:	d10e      	bne.n	80089a2 <HAL_RCC_OscConfig+0xa2>
 8008984:	4ba9      	ldr	r3, [pc, #676]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	4ba8      	ldr	r3, [pc, #672]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 800898a:	2180      	movs	r1, #128	@ 0x80
 800898c:	02c9      	lsls	r1, r1, #11
 800898e:	430a      	orrs	r2, r1
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	4ba6      	ldr	r3, [pc, #664]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	4ba5      	ldr	r3, [pc, #660]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008998:	2180      	movs	r1, #128	@ 0x80
 800899a:	0249      	lsls	r1, r1, #9
 800899c:	430a      	orrs	r2, r1
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e00b      	b.n	80089ba <HAL_RCC_OscConfig+0xba>
 80089a2:	4ba2      	ldr	r3, [pc, #648]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4ba1      	ldr	r3, [pc, #644]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 80089a8:	49a1      	ldr	r1, [pc, #644]	@ (8008c30 <HAL_RCC_OscConfig+0x330>)
 80089aa:	400a      	ands	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	4b9f      	ldr	r3, [pc, #636]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b9e      	ldr	r3, [pc, #632]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 80089b4:	499f      	ldr	r1, [pc, #636]	@ (8008c34 <HAL_RCC_OscConfig+0x334>)
 80089b6:	400a      	ands	r2, r1
 80089b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d014      	beq.n	80089ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c2:	f7fd f9b9 	bl	8005d38 <HAL_GetTick>
 80089c6:	0003      	movs	r3, r0
 80089c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089cc:	f7fd f9b4 	bl	8005d38 <HAL_GetTick>
 80089d0:	0002      	movs	r2, r0
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b64      	cmp	r3, #100	@ 0x64
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e298      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089de:	4b93      	ldr	r3, [pc, #588]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	2380      	movs	r3, #128	@ 0x80
 80089e4:	029b      	lsls	r3, r3, #10
 80089e6:	4013      	ands	r3, r2
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCC_OscConfig+0xcc>
 80089ea:	e015      	b.n	8008a18 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ec:	f7fd f9a4 	bl	8005d38 <HAL_GetTick>
 80089f0:	0003      	movs	r3, r0
 80089f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089f4:	e008      	b.n	8008a08 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089f6:	f7fd f99f 	bl	8005d38 <HAL_GetTick>
 80089fa:	0002      	movs	r2, r0
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	2b64      	cmp	r3, #100	@ 0x64
 8008a02:	d901      	bls.n	8008a08 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e283      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a08:	4b88      	ldr	r3, [pc, #544]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	2380      	movs	r3, #128	@ 0x80
 8008a0e:	029b      	lsls	r3, r3, #10
 8008a10:	4013      	ands	r3, r2
 8008a12:	d1f0      	bne.n	80089f6 <HAL_RCC_OscConfig+0xf6>
 8008a14:	e000      	b.n	8008a18 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a16:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	4013      	ands	r3, r2
 8008a20:	d100      	bne.n	8008a24 <HAL_RCC_OscConfig+0x124>
 8008a22:	e099      	b.n	8008b58 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a24:	4b81      	ldr	r3, [pc, #516]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	2238      	movs	r2, #56	@ 0x38
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	2203      	movs	r2, #3
 8008a34:	4013      	ands	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2b10      	cmp	r3, #16
 8008a3c:	d102      	bne.n	8008a44 <HAL_RCC_OscConfig+0x144>
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d002      	beq.n	8008a4a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d135      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a4a:	4b78      	ldr	r3, [pc, #480]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	2380      	movs	r3, #128	@ 0x80
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	4013      	ands	r3, r2
 8008a54:	d005      	beq.n	8008a62 <HAL_RCC_OscConfig+0x162>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e256      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a62:	4b72      	ldr	r3, [pc, #456]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	4a74      	ldr	r2, [pc, #464]	@ (8008c38 <HAL_RCC_OscConfig+0x338>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	021a      	lsls	r2, r3, #8
 8008a72:	4b6e      	ldr	r3, [pc, #440]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a74:	430a      	orrs	r2, r1
 8008a76:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d112      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008a7e:	4b6b      	ldr	r3, [pc, #428]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a6e      	ldr	r2, [pc, #440]	@ (8008c3c <HAL_RCC_OscConfig+0x33c>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	0019      	movs	r1, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	4b67      	ldr	r3, [pc, #412]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008a92:	4b66      	ldr	r3, [pc, #408]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	0adb      	lsrs	r3, r3, #11
 8008a98:	2207      	movs	r2, #7
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	4a68      	ldr	r2, [pc, #416]	@ (8008c40 <HAL_RCC_OscConfig+0x340>)
 8008a9e:	40da      	lsrs	r2, r3
 8008aa0:	4b68      	ldr	r3, [pc, #416]	@ (8008c44 <HAL_RCC_OscConfig+0x344>)
 8008aa2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008aa4:	4b68      	ldr	r3, [pc, #416]	@ (8008c48 <HAL_RCC_OscConfig+0x348>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f7fd f8e9 	bl	8005c80 <HAL_InitTick>
 8008aae:	1e03      	subs	r3, r0, #0
 8008ab0:	d051      	beq.n	8008b56 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e22c      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d030      	beq.n	8008b20 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008abe:	4b5b      	ldr	r3, [pc, #364]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8008c3c <HAL_RCC_OscConfig+0x33c>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	4b57      	ldr	r3, [pc, #348]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008ad2:	4b56      	ldr	r3, [pc, #344]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	4b55      	ldr	r3, [pc, #340]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008ad8:	2180      	movs	r1, #128	@ 0x80
 8008ada:	0049      	lsls	r1, r1, #1
 8008adc:	430a      	orrs	r2, r1
 8008ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae0:	f7fd f92a 	bl	8005d38 <HAL_GetTick>
 8008ae4:	0003      	movs	r3, r0
 8008ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ae8:	e008      	b.n	8008afc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aea:	f7fd f925 	bl	8005d38 <HAL_GetTick>
 8008aee:	0002      	movs	r2, r0
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d901      	bls.n	8008afc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e209      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008afc:	4b4b      	ldr	r3, [pc, #300]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	2380      	movs	r3, #128	@ 0x80
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	4013      	ands	r3, r2
 8008b06:	d0f0      	beq.n	8008aea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b08:	4b48      	ldr	r3, [pc, #288]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8008c38 <HAL_RCC_OscConfig+0x338>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	0019      	movs	r1, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	021a      	lsls	r2, r3, #8
 8008b18:	4b44      	ldr	r3, [pc, #272]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
 8008b1e:	e01b      	b.n	8008b58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008b20:	4b42      	ldr	r3, [pc, #264]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	4b41      	ldr	r3, [pc, #260]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b26:	4949      	ldr	r1, [pc, #292]	@ (8008c4c <HAL_RCC_OscConfig+0x34c>)
 8008b28:	400a      	ands	r2, r1
 8008b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2c:	f7fd f904 	bl	8005d38 <HAL_GetTick>
 8008b30:	0003      	movs	r3, r0
 8008b32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b34:	e008      	b.n	8008b48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b36:	f7fd f8ff 	bl	8005d38 <HAL_GetTick>
 8008b3a:	0002      	movs	r2, r0
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e1e3      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b48:	4b38      	ldr	r3, [pc, #224]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	2380      	movs	r3, #128	@ 0x80
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	4013      	ands	r3, r2
 8008b52:	d1f0      	bne.n	8008b36 <HAL_RCC_OscConfig+0x236>
 8008b54:	e000      	b.n	8008b58 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	4013      	ands	r3, r2
 8008b60:	d047      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008b62:	4b32      	ldr	r3, [pc, #200]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	2238      	movs	r2, #56	@ 0x38
 8008b68:	4013      	ands	r3, r2
 8008b6a:	2b18      	cmp	r3, #24
 8008b6c:	d10a      	bne.n	8008b84 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b72:	2202      	movs	r2, #2
 8008b74:	4013      	ands	r3, r2
 8008b76:	d03c      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x2f2>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d138      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e1c5      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d019      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008b8c:	4b27      	ldr	r3, [pc, #156]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008b90:	4b26      	ldr	r3, [pc, #152]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008b92:	2101      	movs	r1, #1
 8008b94:	430a      	orrs	r2, r1
 8008b96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b98:	f7fd f8ce 	bl	8005d38 <HAL_GetTick>
 8008b9c:	0003      	movs	r3, r0
 8008b9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ba2:	f7fd f8c9 	bl	8005d38 <HAL_GetTick>
 8008ba6:	0002      	movs	r2, r0
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e1ad      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bb8:	2202      	movs	r2, #2
 8008bba:	4013      	ands	r3, r2
 8008bbc:	d0f1      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x2a2>
 8008bbe:	e018      	b.n	8008bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008bc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008bc4:	4b19      	ldr	r3, [pc, #100]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	438a      	bics	r2, r1
 8008bca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bcc:	f7fd f8b4 	bl	8005d38 <HAL_GetTick>
 8008bd0:	0003      	movs	r3, r0
 8008bd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008bd4:	e008      	b.n	8008be8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bd6:	f7fd f8af 	bl	8005d38 <HAL_GetTick>
 8008bda:	0002      	movs	r2, r0
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d901      	bls.n	8008be8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e193      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008be8:	4b10      	ldr	r3, [pc, #64]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bec:	2202      	movs	r2, #2
 8008bee:	4013      	ands	r3, r2
 8008bf0:	d1f1      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	d100      	bne.n	8008bfe <HAL_RCC_OscConfig+0x2fe>
 8008bfc:	e0c6      	b.n	8008d8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bfe:	231f      	movs	r3, #31
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008c06:	4b09      	ldr	r3, [pc, #36]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2238      	movs	r2, #56	@ 0x38
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d11e      	bne.n	8008c50 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008c12:	4b06      	ldr	r3, [pc, #24]	@ (8008c2c <HAL_RCC_OscConfig+0x32c>)
 8008c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c16:	2202      	movs	r2, #2
 8008c18:	4013      	ands	r3, r2
 8008c1a:	d100      	bne.n	8008c1e <HAL_RCC_OscConfig+0x31e>
 8008c1c:	e0b6      	b.n	8008d8c <HAL_RCC_OscConfig+0x48c>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d000      	beq.n	8008c28 <HAL_RCC_OscConfig+0x328>
 8008c26:	e0b1      	b.n	8008d8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e171      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
 8008c2c:	40021000 	.word	0x40021000
 8008c30:	fffeffff 	.word	0xfffeffff
 8008c34:	fffbffff 	.word	0xfffbffff
 8008c38:	ffff80ff 	.word	0xffff80ff
 8008c3c:	ffffc7ff 	.word	0xffffc7ff
 8008c40:	00f42400 	.word	0x00f42400
 8008c44:	20000440 	.word	0x20000440
 8008c48:	20000444 	.word	0x20000444
 8008c4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c50:	4bb1      	ldr	r3, [pc, #708]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c54:	2380      	movs	r3, #128	@ 0x80
 8008c56:	055b      	lsls	r3, r3, #21
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d101      	bne.n	8008c60 <HAL_RCC_OscConfig+0x360>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e000      	b.n	8008c62 <HAL_RCC_OscConfig+0x362>
 8008c60:	2300      	movs	r3, #0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d011      	beq.n	8008c8a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008c66:	4bac      	ldr	r3, [pc, #688]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c6a:	4bab      	ldr	r3, [pc, #684]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008c6c:	2180      	movs	r1, #128	@ 0x80
 8008c6e:	0549      	lsls	r1, r1, #21
 8008c70:	430a      	orrs	r2, r1
 8008c72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008c74:	4ba8      	ldr	r3, [pc, #672]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008c76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c78:	2380      	movs	r3, #128	@ 0x80
 8008c7a:	055b      	lsls	r3, r3, #21
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008c82:	231f      	movs	r3, #31
 8008c84:	18fb      	adds	r3, r7, r3
 8008c86:	2201      	movs	r2, #1
 8008c88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c8a:	4ba4      	ldr	r3, [pc, #656]	@ (8008f1c <HAL_RCC_OscConfig+0x61c>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	2380      	movs	r3, #128	@ 0x80
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	4013      	ands	r3, r2
 8008c94:	d11a      	bne.n	8008ccc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c96:	4ba1      	ldr	r3, [pc, #644]	@ (8008f1c <HAL_RCC_OscConfig+0x61c>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	4ba0      	ldr	r3, [pc, #640]	@ (8008f1c <HAL_RCC_OscConfig+0x61c>)
 8008c9c:	2180      	movs	r1, #128	@ 0x80
 8008c9e:	0049      	lsls	r1, r1, #1
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008ca4:	f7fd f848 	bl	8005d38 <HAL_GetTick>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cac:	e008      	b.n	8008cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cae:	f7fd f843 	bl	8005d38 <HAL_GetTick>
 8008cb2:	0002      	movs	r2, r0
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d901      	bls.n	8008cc0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e127      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cc0:	4b96      	ldr	r3, [pc, #600]	@ (8008f1c <HAL_RCC_OscConfig+0x61c>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	2380      	movs	r3, #128	@ 0x80
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	4013      	ands	r3, r2
 8008cca:	d0f0      	beq.n	8008cae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d106      	bne.n	8008ce2 <HAL_RCC_OscConfig+0x3e2>
 8008cd4:	4b90      	ldr	r3, [pc, #576]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008cd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008cda:	2101      	movs	r1, #1
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ce0:	e01c      	b.n	8008d1c <HAL_RCC_OscConfig+0x41c>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	d10c      	bne.n	8008d04 <HAL_RCC_OscConfig+0x404>
 8008cea:	4b8b      	ldr	r3, [pc, #556]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008cec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cee:	4b8a      	ldr	r3, [pc, #552]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008cf0:	2104      	movs	r1, #4
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cf6:	4b88      	ldr	r3, [pc, #544]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008cf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cfa:	4b87      	ldr	r3, [pc, #540]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d02:	e00b      	b.n	8008d1c <HAL_RCC_OscConfig+0x41c>
 8008d04:	4b84      	ldr	r3, [pc, #528]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d08:	4b83      	ldr	r3, [pc, #524]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	438a      	bics	r2, r1
 8008d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d10:	4b81      	ldr	r3, [pc, #516]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d14:	4b80      	ldr	r3, [pc, #512]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d16:	2104      	movs	r1, #4
 8008d18:	438a      	bics	r2, r1
 8008d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d014      	beq.n	8008d4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d24:	f7fd f808 	bl	8005d38 <HAL_GetTick>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d2c:	e009      	b.n	8008d42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d2e:	f7fd f803 	bl	8005d38 <HAL_GetTick>
 8008d32:	0002      	movs	r2, r0
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	4a79      	ldr	r2, [pc, #484]	@ (8008f20 <HAL_RCC_OscConfig+0x620>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e0e6      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d42:	4b75      	ldr	r3, [pc, #468]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d46:	2202      	movs	r2, #2
 8008d48:	4013      	ands	r3, r2
 8008d4a:	d0f0      	beq.n	8008d2e <HAL_RCC_OscConfig+0x42e>
 8008d4c:	e013      	b.n	8008d76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4e:	f7fc fff3 	bl	8005d38 <HAL_GetTick>
 8008d52:	0003      	movs	r3, r0
 8008d54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d56:	e009      	b.n	8008d6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d58:	f7fc ffee 	bl	8005d38 <HAL_GetTick>
 8008d5c:	0002      	movs	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	4a6f      	ldr	r2, [pc, #444]	@ (8008f20 <HAL_RCC_OscConfig+0x620>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d901      	bls.n	8008d6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e0d1      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d70:	2202      	movs	r2, #2
 8008d72:	4013      	ands	r3, r2
 8008d74:	d1f0      	bne.n	8008d58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008d76:	231f      	movs	r3, #31
 8008d78:	18fb      	adds	r3, r7, r3
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d105      	bne.n	8008d8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008d80:	4b65      	ldr	r3, [pc, #404]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d84:	4b64      	ldr	r3, [pc, #400]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d86:	4967      	ldr	r1, [pc, #412]	@ (8008f24 <HAL_RCC_OscConfig+0x624>)
 8008d88:	400a      	ands	r2, r1
 8008d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d100      	bne.n	8008d96 <HAL_RCC_OscConfig+0x496>
 8008d94:	e0bb      	b.n	8008f0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d96:	4b60      	ldr	r3, [pc, #384]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	2238      	movs	r2, #56	@ 0x38
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	2b10      	cmp	r3, #16
 8008da0:	d100      	bne.n	8008da4 <HAL_RCC_OscConfig+0x4a4>
 8008da2:	e07b      	b.n	8008e9c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d156      	bne.n	8008e5a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dac:	4b5a      	ldr	r3, [pc, #360]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	4b59      	ldr	r3, [pc, #356]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008db2:	495d      	ldr	r1, [pc, #372]	@ (8008f28 <HAL_RCC_OscConfig+0x628>)
 8008db4:	400a      	ands	r2, r1
 8008db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db8:	f7fc ffbe 	bl	8005d38 <HAL_GetTick>
 8008dbc:	0003      	movs	r3, r0
 8008dbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dc0:	e008      	b.n	8008dd4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc2:	f7fc ffb9 	bl	8005d38 <HAL_GetTick>
 8008dc6:	0002      	movs	r2, r0
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e09d      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dd4:	4b50      	ldr	r3, [pc, #320]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	2380      	movs	r3, #128	@ 0x80
 8008dda:	049b      	lsls	r3, r3, #18
 8008ddc:	4013      	ands	r3, r2
 8008dde:	d1f0      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008de0:	4b4d      	ldr	r3, [pc, #308]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	4a51      	ldr	r2, [pc, #324]	@ (8008f2c <HAL_RCC_OscConfig+0x62c>)
 8008de6:	4013      	ands	r3, r2
 8008de8:	0019      	movs	r1, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1a      	ldr	r2, [r3, #32]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	431a      	orrs	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	4b42      	ldr	r3, [pc, #264]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e10:	430a      	orrs	r2, r1
 8008e12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e14:	4b40      	ldr	r3, [pc, #256]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	4b3f      	ldr	r3, [pc, #252]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e1a:	2180      	movs	r1, #128	@ 0x80
 8008e1c:	0449      	lsls	r1, r1, #17
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008e22:	4b3d      	ldr	r3, [pc, #244]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	4b3c      	ldr	r3, [pc, #240]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e28:	2180      	movs	r1, #128	@ 0x80
 8008e2a:	0549      	lsls	r1, r1, #21
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e30:	f7fc ff82 	bl	8005d38 <HAL_GetTick>
 8008e34:	0003      	movs	r3, r0
 8008e36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e38:	e008      	b.n	8008e4c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e3a:	f7fc ff7d 	bl	8005d38 <HAL_GetTick>
 8008e3e:	0002      	movs	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e061      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e4c:	4b32      	ldr	r3, [pc, #200]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	2380      	movs	r3, #128	@ 0x80
 8008e52:	049b      	lsls	r3, r3, #18
 8008e54:	4013      	ands	r3, r2
 8008e56:	d0f0      	beq.n	8008e3a <HAL_RCC_OscConfig+0x53a>
 8008e58:	e059      	b.n	8008f0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e60:	4931      	ldr	r1, [pc, #196]	@ (8008f28 <HAL_RCC_OscConfig+0x628>)
 8008e62:	400a      	ands	r2, r1
 8008e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e66:	f7fc ff67 	bl	8005d38 <HAL_GetTick>
 8008e6a:	0003      	movs	r3, r0
 8008e6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e6e:	e008      	b.n	8008e82 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e70:	f7fc ff62 	bl	8005d38 <HAL_GetTick>
 8008e74:	0002      	movs	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e046      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e82:	4b25      	ldr	r3, [pc, #148]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	2380      	movs	r3, #128	@ 0x80
 8008e88:	049b      	lsls	r3, r3, #18
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	d1f0      	bne.n	8008e70 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008e8e:	4b22      	ldr	r3, [pc, #136]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	4b21      	ldr	r3, [pc, #132]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e94:	4926      	ldr	r1, [pc, #152]	@ (8008f30 <HAL_RCC_OscConfig+0x630>)
 8008e96:	400a      	ands	r2, r1
 8008e98:	60da      	str	r2, [r3, #12]
 8008e9a:	e038      	b.n	8008f0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d101      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e033      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2203      	movs	r2, #3
 8008eb2:	401a      	ands	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d126      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2270      	movs	r2, #112	@ 0x70
 8008ec0:	401a      	ands	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d11f      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	23fe      	movs	r3, #254	@ 0xfe
 8008ece:	01db      	lsls	r3, r3, #7
 8008ed0:	401a      	ands	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d116      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	23f8      	movs	r3, #248	@ 0xf8
 8008ee0:	039b      	lsls	r3, r3, #14
 8008ee2:	401a      	ands	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d10e      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	23e0      	movs	r3, #224	@ 0xe0
 8008ef0:	051b      	lsls	r3, r3, #20
 8008ef2:	401a      	ands	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d106      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	0f5b      	lsrs	r3, r3, #29
 8008f00:	075a      	lsls	r2, r3, #29
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d001      	beq.n	8008f0e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	b008      	add	sp, #32
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	40007000 	.word	0x40007000
 8008f20:	00001388 	.word	0x00001388
 8008f24:	efffffff 	.word	0xefffffff
 8008f28:	feffffff 	.word	0xfeffffff
 8008f2c:	11c1808c 	.word	0x11c1808c
 8008f30:	eefefffc 	.word	0xeefefffc

08008f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e0e9      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f48:	4b76      	ldr	r3, [pc, #472]	@ (8009124 <HAL_RCC_ClockConfig+0x1f0>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2207      	movs	r2, #7
 8008f4e:	4013      	ands	r3, r2
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d91e      	bls.n	8008f94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f56:	4b73      	ldr	r3, [pc, #460]	@ (8009124 <HAL_RCC_ClockConfig+0x1f0>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2207      	movs	r2, #7
 8008f5c:	4393      	bics	r3, r2
 8008f5e:	0019      	movs	r1, r3
 8008f60:	4b70      	ldr	r3, [pc, #448]	@ (8009124 <HAL_RCC_ClockConfig+0x1f0>)
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008f68:	f7fc fee6 	bl	8005d38 <HAL_GetTick>
 8008f6c:	0003      	movs	r3, r0
 8008f6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008f70:	e009      	b.n	8008f86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f72:	f7fc fee1 	bl	8005d38 <HAL_GetTick>
 8008f76:	0002      	movs	r2, r0
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8009128 <HAL_RCC_ClockConfig+0x1f4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e0ca      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008f86:	4b67      	ldr	r3, [pc, #412]	@ (8009124 <HAL_RCC_ClockConfig+0x1f0>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2207      	movs	r2, #7
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d1ee      	bne.n	8008f72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2202      	movs	r2, #2
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	d015      	beq.n	8008fca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	d006      	beq.n	8008fb6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008fa8:	4b60      	ldr	r3, [pc, #384]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	4b5f      	ldr	r3, [pc, #380]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8008fae:	21e0      	movs	r1, #224	@ 0xe0
 8008fb0:	01c9      	lsls	r1, r1, #7
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	4a5d      	ldr	r2, [pc, #372]	@ (8009130 <HAL_RCC_ClockConfig+0x1fc>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	0019      	movs	r1, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689a      	ldr	r2, [r3, #8]
 8008fc4:	4b59      	ldr	r3, [pc, #356]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	d057      	beq.n	8009084 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d107      	bne.n	8008fec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fdc:	4b53      	ldr	r3, [pc, #332]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	2380      	movs	r3, #128	@ 0x80
 8008fe2:	029b      	lsls	r3, r3, #10
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	d12b      	bne.n	8009040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e097      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d107      	bne.n	8009004 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	2380      	movs	r3, #128	@ 0x80
 8008ffa:	049b      	lsls	r3, r3, #18
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	d11f      	bne.n	8009040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e08b      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d107      	bne.n	800901c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800900c:	4b47      	ldr	r3, [pc, #284]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	2380      	movs	r3, #128	@ 0x80
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	4013      	ands	r3, r2
 8009016:	d113      	bne.n	8009040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e07f      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2b03      	cmp	r3, #3
 8009022:	d106      	bne.n	8009032 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009024:	4b41      	ldr	r3, [pc, #260]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8009026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009028:	2202      	movs	r2, #2
 800902a:	4013      	ands	r3, r2
 800902c:	d108      	bne.n	8009040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e074      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009032:	4b3e      	ldr	r3, [pc, #248]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8009034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009036:	2202      	movs	r2, #2
 8009038:	4013      	ands	r3, r2
 800903a:	d101      	bne.n	8009040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e06d      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009040:	4b3a      	ldr	r3, [pc, #232]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	2207      	movs	r2, #7
 8009046:	4393      	bics	r3, r2
 8009048:	0019      	movs	r1, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	4b37      	ldr	r3, [pc, #220]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8009050:	430a      	orrs	r2, r1
 8009052:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009054:	f7fc fe70 	bl	8005d38 <HAL_GetTick>
 8009058:	0003      	movs	r3, r0
 800905a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800905c:	e009      	b.n	8009072 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800905e:	f7fc fe6b 	bl	8005d38 <HAL_GetTick>
 8009062:	0002      	movs	r2, r0
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	4a2f      	ldr	r2, [pc, #188]	@ (8009128 <HAL_RCC_ClockConfig+0x1f4>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d901      	bls.n	8009072 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e054      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009072:	4b2e      	ldr	r3, [pc, #184]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2238      	movs	r2, #56	@ 0x38
 8009078:	401a      	ands	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	429a      	cmp	r2, r3
 8009082:	d1ec      	bne.n	800905e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009084:	4b27      	ldr	r3, [pc, #156]	@ (8009124 <HAL_RCC_ClockConfig+0x1f0>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2207      	movs	r2, #7
 800908a:	4013      	ands	r3, r2
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	d21e      	bcs.n	80090d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009092:	4b24      	ldr	r3, [pc, #144]	@ (8009124 <HAL_RCC_ClockConfig+0x1f0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2207      	movs	r2, #7
 8009098:	4393      	bics	r3, r2
 800909a:	0019      	movs	r1, r3
 800909c:	4b21      	ldr	r3, [pc, #132]	@ (8009124 <HAL_RCC_ClockConfig+0x1f0>)
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80090a4:	f7fc fe48 	bl	8005d38 <HAL_GetTick>
 80090a8:	0003      	movs	r3, r0
 80090aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80090ac:	e009      	b.n	80090c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ae:	f7fc fe43 	bl	8005d38 <HAL_GetTick>
 80090b2:	0002      	movs	r2, r0
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009128 <HAL_RCC_ClockConfig+0x1f4>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d901      	bls.n	80090c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e02c      	b.n	800911c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80090c2:	4b18      	ldr	r3, [pc, #96]	@ (8009124 <HAL_RCC_ClockConfig+0x1f0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2207      	movs	r2, #7
 80090c8:	4013      	ands	r3, r2
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d1ee      	bne.n	80090ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2204      	movs	r2, #4
 80090d6:	4013      	ands	r3, r2
 80090d8:	d009      	beq.n	80090ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80090da:	4b14      	ldr	r3, [pc, #80]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	4a15      	ldr	r2, [pc, #84]	@ (8009134 <HAL_RCC_ClockConfig+0x200>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	0019      	movs	r1, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	4b10      	ldr	r3, [pc, #64]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 80090ea:	430a      	orrs	r2, r1
 80090ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80090ee:	f000 f829 	bl	8009144 <HAL_RCC_GetSysClockFreq>
 80090f2:	0001      	movs	r1, r0
 80090f4:	4b0d      	ldr	r3, [pc, #52]	@ (800912c <HAL_RCC_ClockConfig+0x1f8>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	0a1b      	lsrs	r3, r3, #8
 80090fa:	220f      	movs	r2, #15
 80090fc:	401a      	ands	r2, r3
 80090fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009138 <HAL_RCC_ClockConfig+0x204>)
 8009100:	0092      	lsls	r2, r2, #2
 8009102:	58d3      	ldr	r3, [r2, r3]
 8009104:	221f      	movs	r2, #31
 8009106:	4013      	ands	r3, r2
 8009108:	000a      	movs	r2, r1
 800910a:	40da      	lsrs	r2, r3
 800910c:	4b0b      	ldr	r3, [pc, #44]	@ (800913c <HAL_RCC_ClockConfig+0x208>)
 800910e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009110:	4b0b      	ldr	r3, [pc, #44]	@ (8009140 <HAL_RCC_ClockConfig+0x20c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	0018      	movs	r0, r3
 8009116:	f7fc fdb3 	bl	8005c80 <HAL_InitTick>
 800911a:	0003      	movs	r3, r0
}
 800911c:	0018      	movs	r0, r3
 800911e:	46bd      	mov	sp, r7
 8009120:	b004      	add	sp, #16
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40022000 	.word	0x40022000
 8009128:	00001388 	.word	0x00001388
 800912c:	40021000 	.word	0x40021000
 8009130:	fffff0ff 	.word	0xfffff0ff
 8009134:	ffff8fff 	.word	0xffff8fff
 8009138:	0800db7c 	.word	0x0800db7c
 800913c:	20000440 	.word	0x20000440
 8009140:	20000444 	.word	0x20000444

08009144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800914a:	4b3c      	ldr	r3, [pc, #240]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2238      	movs	r2, #56	@ 0x38
 8009150:	4013      	ands	r3, r2
 8009152:	d10f      	bne.n	8009174 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009154:	4b39      	ldr	r3, [pc, #228]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	0adb      	lsrs	r3, r3, #11
 800915a:	2207      	movs	r2, #7
 800915c:	4013      	ands	r3, r2
 800915e:	2201      	movs	r2, #1
 8009160:	409a      	lsls	r2, r3
 8009162:	0013      	movs	r3, r2
 8009164:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	4835      	ldr	r0, [pc, #212]	@ (8009240 <HAL_RCC_GetSysClockFreq+0xfc>)
 800916a:	f7f6 ffcd 	bl	8000108 <__udivsi3>
 800916e:	0003      	movs	r3, r0
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	e05d      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009174:	4b31      	ldr	r3, [pc, #196]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	2238      	movs	r2, #56	@ 0x38
 800917a:	4013      	ands	r3, r2
 800917c:	2b08      	cmp	r3, #8
 800917e:	d102      	bne.n	8009186 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009180:	4b30      	ldr	r3, [pc, #192]	@ (8009244 <HAL_RCC_GetSysClockFreq+0x100>)
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	e054      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009186:	4b2d      	ldr	r3, [pc, #180]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	2238      	movs	r2, #56	@ 0x38
 800918c:	4013      	ands	r3, r2
 800918e:	2b10      	cmp	r3, #16
 8009190:	d138      	bne.n	8009204 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009192:	4b2a      	ldr	r3, [pc, #168]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	2203      	movs	r2, #3
 8009198:	4013      	ands	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800919c:	4b27      	ldr	r3, [pc, #156]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	091b      	lsrs	r3, r3, #4
 80091a2:	2207      	movs	r2, #7
 80091a4:	4013      	ands	r3, r2
 80091a6:	3301      	adds	r3, #1
 80091a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d10d      	bne.n	80091cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091b0:	68b9      	ldr	r1, [r7, #8]
 80091b2:	4824      	ldr	r0, [pc, #144]	@ (8009244 <HAL_RCC_GetSysClockFreq+0x100>)
 80091b4:	f7f6 ffa8 	bl	8000108 <__udivsi3>
 80091b8:	0003      	movs	r3, r0
 80091ba:	0019      	movs	r1, r3
 80091bc:	4b1f      	ldr	r3, [pc, #124]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	227f      	movs	r2, #127	@ 0x7f
 80091c4:	4013      	ands	r3, r2
 80091c6:	434b      	muls	r3, r1
 80091c8:	617b      	str	r3, [r7, #20]
        break;
 80091ca:	e00d      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	481c      	ldr	r0, [pc, #112]	@ (8009240 <HAL_RCC_GetSysClockFreq+0xfc>)
 80091d0:	f7f6 ff9a 	bl	8000108 <__udivsi3>
 80091d4:	0003      	movs	r3, r0
 80091d6:	0019      	movs	r1, r3
 80091d8:	4b18      	ldr	r3, [pc, #96]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	0a1b      	lsrs	r3, r3, #8
 80091de:	227f      	movs	r2, #127	@ 0x7f
 80091e0:	4013      	ands	r3, r2
 80091e2:	434b      	muls	r3, r1
 80091e4:	617b      	str	r3, [r7, #20]
        break;
 80091e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80091e8:	4b14      	ldr	r3, [pc, #80]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	0f5b      	lsrs	r3, r3, #29
 80091ee:	2207      	movs	r2, #7
 80091f0:	4013      	ands	r3, r2
 80091f2:	3301      	adds	r3, #1
 80091f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	6978      	ldr	r0, [r7, #20]
 80091fa:	f7f6 ff85 	bl	8000108 <__udivsi3>
 80091fe:	0003      	movs	r3, r0
 8009200:	613b      	str	r3, [r7, #16]
 8009202:	e015      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009204:	4b0d      	ldr	r3, [pc, #52]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	2238      	movs	r2, #56	@ 0x38
 800920a:	4013      	ands	r3, r2
 800920c:	2b20      	cmp	r3, #32
 800920e:	d103      	bne.n	8009218 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009210:	2380      	movs	r3, #128	@ 0x80
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	e00b      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009218:	4b08      	ldr	r3, [pc, #32]	@ (800923c <HAL_RCC_GetSysClockFreq+0xf8>)
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2238      	movs	r2, #56	@ 0x38
 800921e:	4013      	ands	r3, r2
 8009220:	2b18      	cmp	r3, #24
 8009222:	d103      	bne.n	800922c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009224:	23fa      	movs	r3, #250	@ 0xfa
 8009226:	01db      	lsls	r3, r3, #7
 8009228:	613b      	str	r3, [r7, #16]
 800922a:	e001      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009230:	693b      	ldr	r3, [r7, #16]
}
 8009232:	0018      	movs	r0, r3
 8009234:	46bd      	mov	sp, r7
 8009236:	b006      	add	sp, #24
 8009238:	bd80      	pop	{r7, pc}
 800923a:	46c0      	nop			@ (mov r8, r8)
 800923c:	40021000 	.word	0x40021000
 8009240:	00f42400 	.word	0x00f42400
 8009244:	007a1200 	.word	0x007a1200

08009248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800924c:	4b02      	ldr	r3, [pc, #8]	@ (8009258 <HAL_RCC_GetHCLKFreq+0x10>)
 800924e:	681b      	ldr	r3, [r3, #0]
}
 8009250:	0018      	movs	r0, r3
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	46c0      	nop			@ (mov r8, r8)
 8009258:	20000440 	.word	0x20000440

0800925c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800925c:	b5b0      	push	{r4, r5, r7, lr}
 800925e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009260:	f7ff fff2 	bl	8009248 <HAL_RCC_GetHCLKFreq>
 8009264:	0004      	movs	r4, r0
 8009266:	f7ff fb3f 	bl	80088e8 <LL_RCC_GetAPB1Prescaler>
 800926a:	0003      	movs	r3, r0
 800926c:	0b1a      	lsrs	r2, r3, #12
 800926e:	4b05      	ldr	r3, [pc, #20]	@ (8009284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	58d3      	ldr	r3, [r2, r3]
 8009274:	221f      	movs	r2, #31
 8009276:	4013      	ands	r3, r2
 8009278:	40dc      	lsrs	r4, r3
 800927a:	0023      	movs	r3, r4
}
 800927c:	0018      	movs	r0, r3
 800927e:	46bd      	mov	sp, r7
 8009280:	bdb0      	pop	{r4, r5, r7, pc}
 8009282:	46c0      	nop			@ (mov r8, r8)
 8009284:	0800dbbc 	.word	0x0800dbbc

08009288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009290:	2313      	movs	r3, #19
 8009292:	18fb      	adds	r3, r7, r3
 8009294:	2200      	movs	r2, #0
 8009296:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009298:	2312      	movs	r3, #18
 800929a:	18fb      	adds	r3, r7, r3
 800929c:	2200      	movs	r2, #0
 800929e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	2380      	movs	r3, #128	@ 0x80
 80092a6:	029b      	lsls	r3, r3, #10
 80092a8:	4013      	ands	r3, r2
 80092aa:	d100      	bne.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80092ac:	e0a3      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092ae:	2011      	movs	r0, #17
 80092b0:	183b      	adds	r3, r7, r0
 80092b2:	2200      	movs	r2, #0
 80092b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092b6:	4ba5      	ldr	r3, [pc, #660]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80092b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ba:	2380      	movs	r3, #128	@ 0x80
 80092bc:	055b      	lsls	r3, r3, #21
 80092be:	4013      	ands	r3, r2
 80092c0:	d110      	bne.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092c2:	4ba2      	ldr	r3, [pc, #648]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80092c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092c6:	4ba1      	ldr	r3, [pc, #644]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80092c8:	2180      	movs	r1, #128	@ 0x80
 80092ca:	0549      	lsls	r1, r1, #21
 80092cc:	430a      	orrs	r2, r1
 80092ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80092d0:	4b9e      	ldr	r3, [pc, #632]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80092d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092d4:	2380      	movs	r3, #128	@ 0x80
 80092d6:	055b      	lsls	r3, r3, #21
 80092d8:	4013      	ands	r3, r2
 80092da:	60bb      	str	r3, [r7, #8]
 80092dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092de:	183b      	adds	r3, r7, r0
 80092e0:	2201      	movs	r2, #1
 80092e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092e4:	4b9a      	ldr	r3, [pc, #616]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	4b99      	ldr	r3, [pc, #612]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80092ea:	2180      	movs	r1, #128	@ 0x80
 80092ec:	0049      	lsls	r1, r1, #1
 80092ee:	430a      	orrs	r2, r1
 80092f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092f2:	f7fc fd21 	bl	8005d38 <HAL_GetTick>
 80092f6:	0003      	movs	r3, r0
 80092f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092fa:	e00b      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092fc:	f7fc fd1c 	bl	8005d38 <HAL_GetTick>
 8009300:	0002      	movs	r2, r0
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	2b02      	cmp	r3, #2
 8009308:	d904      	bls.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800930a:	2313      	movs	r3, #19
 800930c:	18fb      	adds	r3, r7, r3
 800930e:	2203      	movs	r2, #3
 8009310:	701a      	strb	r2, [r3, #0]
        break;
 8009312:	e005      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009314:	4b8e      	ldr	r3, [pc, #568]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	2380      	movs	r3, #128	@ 0x80
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	4013      	ands	r3, r2
 800931e:	d0ed      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009320:	2313      	movs	r3, #19
 8009322:	18fb      	adds	r3, r7, r3
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d154      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800932a:	4b88      	ldr	r3, [pc, #544]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800932c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800932e:	23c0      	movs	r3, #192	@ 0xc0
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4013      	ands	r3, r2
 8009334:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d019      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	429a      	cmp	r2, r3
 8009344:	d014      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009346:	4b81      	ldr	r3, [pc, #516]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800934a:	4a82      	ldr	r2, [pc, #520]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800934c:	4013      	ands	r3, r2
 800934e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009350:	4b7e      	ldr	r3, [pc, #504]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009352:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009354:	4b7d      	ldr	r3, [pc, #500]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009356:	2180      	movs	r1, #128	@ 0x80
 8009358:	0249      	lsls	r1, r1, #9
 800935a:	430a      	orrs	r2, r1
 800935c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800935e:	4b7b      	ldr	r3, [pc, #492]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009360:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009362:	4b7a      	ldr	r3, [pc, #488]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009364:	497c      	ldr	r1, [pc, #496]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009366:	400a      	ands	r2, r1
 8009368:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800936a:	4b78      	ldr	r3, [pc, #480]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2201      	movs	r2, #1
 8009374:	4013      	ands	r3, r2
 8009376:	d016      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009378:	f7fc fcde 	bl	8005d38 <HAL_GetTick>
 800937c:	0003      	movs	r3, r0
 800937e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009380:	e00c      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009382:	f7fc fcd9 	bl	8005d38 <HAL_GetTick>
 8009386:	0002      	movs	r2, r0
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	4a73      	ldr	r2, [pc, #460]	@ (800955c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d904      	bls.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009392:	2313      	movs	r3, #19
 8009394:	18fb      	adds	r3, r7, r3
 8009396:	2203      	movs	r2, #3
 8009398:	701a      	strb	r2, [r3, #0]
            break;
 800939a:	e004      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800939c:	4b6b      	ldr	r3, [pc, #428]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800939e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093a0:	2202      	movs	r2, #2
 80093a2:	4013      	ands	r3, r2
 80093a4:	d0ed      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80093a6:	2313      	movs	r3, #19
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093b0:	4b66      	ldr	r3, [pc, #408]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80093b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093b4:	4a67      	ldr	r2, [pc, #412]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80093b6:	4013      	ands	r3, r2
 80093b8:	0019      	movs	r1, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093be:	4b63      	ldr	r3, [pc, #396]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80093c0:	430a      	orrs	r2, r1
 80093c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80093c4:	e00c      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093c6:	2312      	movs	r3, #18
 80093c8:	18fb      	adds	r3, r7, r3
 80093ca:	2213      	movs	r2, #19
 80093cc:	18ba      	adds	r2, r7, r2
 80093ce:	7812      	ldrb	r2, [r2, #0]
 80093d0:	701a      	strb	r2, [r3, #0]
 80093d2:	e005      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d4:	2312      	movs	r3, #18
 80093d6:	18fb      	adds	r3, r7, r3
 80093d8:	2213      	movs	r2, #19
 80093da:	18ba      	adds	r2, r7, r2
 80093dc:	7812      	ldrb	r2, [r2, #0]
 80093de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093e0:	2311      	movs	r3, #17
 80093e2:	18fb      	adds	r3, r7, r3
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d105      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ea:	4b58      	ldr	r3, [pc, #352]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80093ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093ee:	4b57      	ldr	r3, [pc, #348]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80093f0:	495b      	ldr	r1, [pc, #364]	@ (8009560 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093f2:	400a      	ands	r2, r1
 80093f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2201      	movs	r2, #1
 80093fc:	4013      	ands	r3, r2
 80093fe:	d009      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009400:	4b52      	ldr	r3, [pc, #328]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009404:	2203      	movs	r2, #3
 8009406:	4393      	bics	r3, r2
 8009408:	0019      	movs	r1, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	4b4f      	ldr	r3, [pc, #316]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009410:	430a      	orrs	r2, r1
 8009412:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2210      	movs	r2, #16
 800941a:	4013      	ands	r3, r2
 800941c:	d009      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800941e:	4b4b      	ldr	r3, [pc, #300]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009422:	4a50      	ldr	r2, [pc, #320]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8009424:	4013      	ands	r3, r2
 8009426:	0019      	movs	r1, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	4b47      	ldr	r3, [pc, #284]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800942e:	430a      	orrs	r2, r1
 8009430:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	2380      	movs	r3, #128	@ 0x80
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4013      	ands	r3, r2
 800943c:	d009      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800943e:	4b43      	ldr	r3, [pc, #268]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009442:	4a49      	ldr	r2, [pc, #292]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009444:	4013      	ands	r3, r2
 8009446:	0019      	movs	r1, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	695a      	ldr	r2, [r3, #20]
 800944c:	4b3f      	ldr	r3, [pc, #252]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800944e:	430a      	orrs	r2, r1
 8009450:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	2380      	movs	r3, #128	@ 0x80
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	4013      	ands	r3, r2
 800945c:	d009      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800945e:	4b3b      	ldr	r3, [pc, #236]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009462:	4a42      	ldr	r2, [pc, #264]	@ (800956c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8009464:	4013      	ands	r3, r2
 8009466:	0019      	movs	r1, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	699a      	ldr	r2, [r3, #24]
 800946c:	4b37      	ldr	r3, [pc, #220]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800946e:	430a      	orrs	r2, r1
 8009470:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2220      	movs	r2, #32
 8009478:	4013      	ands	r3, r2
 800947a:	d009      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800947c:	4b33      	ldr	r3, [pc, #204]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800947e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009480:	4a3b      	ldr	r2, [pc, #236]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009482:	4013      	ands	r3, r2
 8009484:	0019      	movs	r1, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	4b30      	ldr	r3, [pc, #192]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800948c:	430a      	orrs	r2, r1
 800948e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	2380      	movs	r3, #128	@ 0x80
 8009496:	01db      	lsls	r3, r3, #7
 8009498:	4013      	ands	r3, r2
 800949a:	d015      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800949c:	4b2b      	ldr	r3, [pc, #172]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800949e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	0899      	lsrs	r1, r3, #2
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	69da      	ldr	r2, [r3, #28]
 80094a8:	4b28      	ldr	r3, [pc, #160]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094aa:	430a      	orrs	r2, r1
 80094ac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	69da      	ldr	r2, [r3, #28]
 80094b2:	2380      	movs	r3, #128	@ 0x80
 80094b4:	05db      	lsls	r3, r3, #23
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d106      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80094ba:	4b24      	ldr	r3, [pc, #144]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	4b23      	ldr	r3, [pc, #140]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094c0:	2180      	movs	r1, #128	@ 0x80
 80094c2:	0249      	lsls	r1, r1, #9
 80094c4:	430a      	orrs	r2, r1
 80094c6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	2380      	movs	r3, #128	@ 0x80
 80094ce:	039b      	lsls	r3, r3, #14
 80094d0:	4013      	ands	r3, r2
 80094d2:	d016      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80094d4:	4b1d      	ldr	r3, [pc, #116]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d8:	4a26      	ldr	r2, [pc, #152]	@ (8009574 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80094da:	4013      	ands	r3, r2
 80094dc:	0019      	movs	r1, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1a      	ldr	r2, [r3, #32]
 80094e2:	4b1a      	ldr	r3, [pc, #104]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094e4:	430a      	orrs	r2, r1
 80094e6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1a      	ldr	r2, [r3, #32]
 80094ec:	2380      	movs	r3, #128	@ 0x80
 80094ee:	03db      	lsls	r3, r3, #15
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d106      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80094f4:	4b15      	ldr	r3, [pc, #84]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094f6:	68da      	ldr	r2, [r3, #12]
 80094f8:	4b14      	ldr	r3, [pc, #80]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094fa:	2180      	movs	r1, #128	@ 0x80
 80094fc:	0449      	lsls	r1, r1, #17
 80094fe:	430a      	orrs	r2, r1
 8009500:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	2380      	movs	r3, #128	@ 0x80
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	4013      	ands	r3, r2
 800950c:	d016      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800950e:	4b0f      	ldr	r3, [pc, #60]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009512:	4a19      	ldr	r2, [pc, #100]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009514:	4013      	ands	r3, r2
 8009516:	0019      	movs	r1, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	4b0b      	ldr	r3, [pc, #44]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800951e:	430a      	orrs	r2, r1
 8009520:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	2380      	movs	r3, #128	@ 0x80
 8009528:	01db      	lsls	r3, r3, #7
 800952a:	429a      	cmp	r2, r3
 800952c:	d106      	bne.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800952e:	4b07      	ldr	r3, [pc, #28]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	4b06      	ldr	r3, [pc, #24]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009534:	2180      	movs	r1, #128	@ 0x80
 8009536:	0249      	lsls	r1, r1, #9
 8009538:	430a      	orrs	r2, r1
 800953a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800953c:	2312      	movs	r3, #18
 800953e:	18fb      	adds	r3, r7, r3
 8009540:	781b      	ldrb	r3, [r3, #0]
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	b006      	add	sp, #24
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	40021000 	.word	0x40021000
 8009550:	40007000 	.word	0x40007000
 8009554:	fffffcff 	.word	0xfffffcff
 8009558:	fffeffff 	.word	0xfffeffff
 800955c:	00001388 	.word	0x00001388
 8009560:	efffffff 	.word	0xefffffff
 8009564:	fffff3ff 	.word	0xfffff3ff
 8009568:	fff3ffff 	.word	0xfff3ffff
 800956c:	ffcfffff 	.word	0xffcfffff
 8009570:	ffffcfff 	.word	0xffffcfff
 8009574:	ffbfffff 	.word	0xffbfffff
 8009578:	ffff3fff 	.word	0xffff3fff

0800957c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e056      	b.n	800963c <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	223d      	movs	r2, #61	@ 0x3d
 8009592:	5c9b      	ldrb	r3, [r3, r2]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d113      	bne.n	80095c2 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	223c      	movs	r2, #60	@ 0x3c
 800959e:	2100      	movs	r1, #0
 80095a0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	0018      	movs	r0, r3
 80095a6:	f002 f8c5 	bl	800b734 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a23      	ldr	r2, [pc, #140]	@ (8009644 <HAL_TIM_Base_Init+0xc8>)
 80095b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	0010      	movs	r0, r2
 80095c0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	223d      	movs	r2, #61	@ 0x3d
 80095c6:	2102      	movs	r1, #2
 80095c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3304      	adds	r3, #4
 80095d2:	0019      	movs	r1, r3
 80095d4:	0010      	movs	r0, r2
 80095d6:	f001 fbaf 	bl	800ad38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2248      	movs	r2, #72	@ 0x48
 80095de:	2101      	movs	r1, #1
 80095e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	223e      	movs	r2, #62	@ 0x3e
 80095e6:	2101      	movs	r1, #1
 80095e8:	5499      	strb	r1, [r3, r2]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	223f      	movs	r2, #63	@ 0x3f
 80095ee:	2101      	movs	r1, #1
 80095f0:	5499      	strb	r1, [r3, r2]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2240      	movs	r2, #64	@ 0x40
 80095f6:	2101      	movs	r1, #1
 80095f8:	5499      	strb	r1, [r3, r2]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2241      	movs	r2, #65	@ 0x41
 80095fe:	2101      	movs	r1, #1
 8009600:	5499      	strb	r1, [r3, r2]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2242      	movs	r2, #66	@ 0x42
 8009606:	2101      	movs	r1, #1
 8009608:	5499      	strb	r1, [r3, r2]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2243      	movs	r2, #67	@ 0x43
 800960e:	2101      	movs	r1, #1
 8009610:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2244      	movs	r2, #68	@ 0x44
 8009616:	2101      	movs	r1, #1
 8009618:	5499      	strb	r1, [r3, r2]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2245      	movs	r2, #69	@ 0x45
 800961e:	2101      	movs	r1, #1
 8009620:	5499      	strb	r1, [r3, r2]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2246      	movs	r2, #70	@ 0x46
 8009626:	2101      	movs	r1, #1
 8009628:	5499      	strb	r1, [r3, r2]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2247      	movs	r2, #71	@ 0x47
 800962e:	2101      	movs	r1, #1
 8009630:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	223d      	movs	r2, #61	@ 0x3d
 8009636:	2101      	movs	r1, #1
 8009638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	0018      	movs	r0, r3
 800963e:	46bd      	mov	sp, r7
 8009640:	b002      	add	sp, #8
 8009642:	bd80      	pop	{r7, pc}
 8009644:	08004ce9 	.word	0x08004ce9

08009648 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	223d      	movs	r2, #61	@ 0x3d
 8009654:	5c9b      	ldrb	r3, [r3, r2]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b01      	cmp	r3, #1
 800965a:	d001      	beq.n	8009660 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e035      	b.n	80096cc <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	223d      	movs	r2, #61	@ 0x3d
 8009664:	2102      	movs	r1, #2
 8009666:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a19      	ldr	r2, [pc, #100]	@ (80096d4 <HAL_TIM_Base_Start+0x8c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00a      	beq.n	8009688 <HAL_TIM_Base_Start+0x40>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	2380      	movs	r3, #128	@ 0x80
 8009678:	05db      	lsls	r3, r3, #23
 800967a:	429a      	cmp	r2, r3
 800967c:	d004      	beq.n	8009688 <HAL_TIM_Base_Start+0x40>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a15      	ldr	r2, [pc, #84]	@ (80096d8 <HAL_TIM_Base_Start+0x90>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d116      	bne.n	80096b6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	4a13      	ldr	r2, [pc, #76]	@ (80096dc <HAL_TIM_Base_Start+0x94>)
 8009690:	4013      	ands	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b06      	cmp	r3, #6
 8009698:	d016      	beq.n	80096c8 <HAL_TIM_Base_Start+0x80>
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	2380      	movs	r3, #128	@ 0x80
 800969e:	025b      	lsls	r3, r3, #9
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d011      	beq.n	80096c8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2101      	movs	r1, #1
 80096b0:	430a      	orrs	r2, r1
 80096b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b4:	e008      	b.n	80096c8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2101      	movs	r1, #1
 80096c2:	430a      	orrs	r2, r1
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	e000      	b.n	80096ca <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	0018      	movs	r0, r3
 80096ce:	46bd      	mov	sp, r7
 80096d0:	b004      	add	sp, #16
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	40012c00 	.word	0x40012c00
 80096d8:	40000400 	.word	0x40000400
 80096dc:	00010007 	.word	0x00010007

080096e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	223d      	movs	r2, #61	@ 0x3d
 80096ec:	5c9b      	ldrb	r3, [r3, r2]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d001      	beq.n	80096f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e03d      	b.n	8009774 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	223d      	movs	r2, #61	@ 0x3d
 80096fc:	2102      	movs	r1, #2
 80096fe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2101      	movs	r1, #1
 800970c:	430a      	orrs	r2, r1
 800970e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a19      	ldr	r2, [pc, #100]	@ (800977c <HAL_TIM_Base_Start_IT+0x9c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00a      	beq.n	8009730 <HAL_TIM_Base_Start_IT+0x50>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	2380      	movs	r3, #128	@ 0x80
 8009720:	05db      	lsls	r3, r3, #23
 8009722:	429a      	cmp	r2, r3
 8009724:	d004      	beq.n	8009730 <HAL_TIM_Base_Start_IT+0x50>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a15      	ldr	r2, [pc, #84]	@ (8009780 <HAL_TIM_Base_Start_IT+0xa0>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d116      	bne.n	800975e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	4a13      	ldr	r2, [pc, #76]	@ (8009784 <HAL_TIM_Base_Start_IT+0xa4>)
 8009738:	4013      	ands	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b06      	cmp	r3, #6
 8009740:	d016      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x90>
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	2380      	movs	r3, #128	@ 0x80
 8009746:	025b      	lsls	r3, r3, #9
 8009748:	429a      	cmp	r2, r3
 800974a:	d011      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2101      	movs	r1, #1
 8009758:	430a      	orrs	r2, r1
 800975a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975c:	e008      	b.n	8009770 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2101      	movs	r1, #1
 800976a:	430a      	orrs	r2, r1
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e000      	b.n	8009772 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009770:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	0018      	movs	r0, r3
 8009776:	46bd      	mov	sp, r7
 8009778:	b004      	add	sp, #16
 800977a:	bd80      	pop	{r7, pc}
 800977c:	40012c00 	.word	0x40012c00
 8009780:	40000400 	.word	0x40000400
 8009784:	00010007 	.word	0x00010007

08009788 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e056      	b.n	8009848 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	223d      	movs	r2, #61	@ 0x3d
 800979e:	5c9b      	ldrb	r3, [r3, r2]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d113      	bne.n	80097ce <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	223c      	movs	r2, #60	@ 0x3c
 80097aa:	2100      	movs	r1, #0
 80097ac:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	0018      	movs	r0, r3
 80097b2:	f001 ffbf 	bl	800b734 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d102      	bne.n	80097c4 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a23      	ldr	r2, [pc, #140]	@ (8009850 <HAL_TIM_OC_Init+0xc8>)
 80097c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	0010      	movs	r0, r2
 80097cc:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	223d      	movs	r2, #61	@ 0x3d
 80097d2:	2102      	movs	r1, #2
 80097d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3304      	adds	r3, #4
 80097de:	0019      	movs	r1, r3
 80097e0:	0010      	movs	r0, r2
 80097e2:	f001 faa9 	bl	800ad38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2248      	movs	r2, #72	@ 0x48
 80097ea:	2101      	movs	r1, #1
 80097ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	223e      	movs	r2, #62	@ 0x3e
 80097f2:	2101      	movs	r1, #1
 80097f4:	5499      	strb	r1, [r3, r2]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	223f      	movs	r2, #63	@ 0x3f
 80097fa:	2101      	movs	r1, #1
 80097fc:	5499      	strb	r1, [r3, r2]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2240      	movs	r2, #64	@ 0x40
 8009802:	2101      	movs	r1, #1
 8009804:	5499      	strb	r1, [r3, r2]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2241      	movs	r2, #65	@ 0x41
 800980a:	2101      	movs	r1, #1
 800980c:	5499      	strb	r1, [r3, r2]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2242      	movs	r2, #66	@ 0x42
 8009812:	2101      	movs	r1, #1
 8009814:	5499      	strb	r1, [r3, r2]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2243      	movs	r2, #67	@ 0x43
 800981a:	2101      	movs	r1, #1
 800981c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2244      	movs	r2, #68	@ 0x44
 8009822:	2101      	movs	r1, #1
 8009824:	5499      	strb	r1, [r3, r2]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2245      	movs	r2, #69	@ 0x45
 800982a:	2101      	movs	r1, #1
 800982c:	5499      	strb	r1, [r3, r2]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2246      	movs	r2, #70	@ 0x46
 8009832:	2101      	movs	r1, #1
 8009834:	5499      	strb	r1, [r3, r2]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2247      	movs	r2, #71	@ 0x47
 800983a:	2101      	movs	r1, #1
 800983c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	223d      	movs	r2, #61	@ 0x3d
 8009842:	2101      	movs	r1, #1
 8009844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	0018      	movs	r0, r3
 800984a:	46bd      	mov	sp, r7
 800984c:	b002      	add	sp, #8
 800984e:	bd80      	pop	{r7, pc}
 8009850:	08009855 	.word	0x08009855

08009854 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800985c:	46c0      	nop			@ (mov r8, r8)
 800985e:	46bd      	mov	sp, r7
 8009860:	b002      	add	sp, #8
 8009862:	bd80      	pop	{r7, pc}

08009864 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800986e:	230f      	movs	r3, #15
 8009870:	18fb      	adds	r3, r7, r3
 8009872:	2200      	movs	r2, #0
 8009874:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d108      	bne.n	800988e <HAL_TIM_OC_Start_IT+0x2a>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	223e      	movs	r2, #62	@ 0x3e
 8009880:	5c9b      	ldrb	r3, [r3, r2]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	3b01      	subs	r3, #1
 8009886:	1e5a      	subs	r2, r3, #1
 8009888:	4193      	sbcs	r3, r2
 800988a:	b2db      	uxtb	r3, r3
 800988c:	e037      	b.n	80098fe <HAL_TIM_OC_Start_IT+0x9a>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b04      	cmp	r3, #4
 8009892:	d108      	bne.n	80098a6 <HAL_TIM_OC_Start_IT+0x42>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	223f      	movs	r2, #63	@ 0x3f
 8009898:	5c9b      	ldrb	r3, [r3, r2]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	3b01      	subs	r3, #1
 800989e:	1e5a      	subs	r2, r3, #1
 80098a0:	4193      	sbcs	r3, r2
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	e02b      	b.n	80098fe <HAL_TIM_OC_Start_IT+0x9a>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d108      	bne.n	80098be <HAL_TIM_OC_Start_IT+0x5a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2240      	movs	r2, #64	@ 0x40
 80098b0:	5c9b      	ldrb	r3, [r3, r2]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	3b01      	subs	r3, #1
 80098b6:	1e5a      	subs	r2, r3, #1
 80098b8:	4193      	sbcs	r3, r2
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	e01f      	b.n	80098fe <HAL_TIM_OC_Start_IT+0x9a>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b0c      	cmp	r3, #12
 80098c2:	d108      	bne.n	80098d6 <HAL_TIM_OC_Start_IT+0x72>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2241      	movs	r2, #65	@ 0x41
 80098c8:	5c9b      	ldrb	r3, [r3, r2]
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	3b01      	subs	r3, #1
 80098ce:	1e5a      	subs	r2, r3, #1
 80098d0:	4193      	sbcs	r3, r2
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	e013      	b.n	80098fe <HAL_TIM_OC_Start_IT+0x9a>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d108      	bne.n	80098ee <HAL_TIM_OC_Start_IT+0x8a>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2242      	movs	r2, #66	@ 0x42
 80098e0:	5c9b      	ldrb	r3, [r3, r2]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	3b01      	subs	r3, #1
 80098e6:	1e5a      	subs	r2, r3, #1
 80098e8:	4193      	sbcs	r3, r2
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	e007      	b.n	80098fe <HAL_TIM_OC_Start_IT+0x9a>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2243      	movs	r2, #67	@ 0x43
 80098f2:	5c9b      	ldrb	r3, [r3, r2]
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	1e5a      	subs	r2, r3, #1
 80098fa:	4193      	sbcs	r3, r2
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e0c4      	b.n	8009a90 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d104      	bne.n	8009916 <HAL_TIM_OC_Start_IT+0xb2>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	223e      	movs	r2, #62	@ 0x3e
 8009910:	2102      	movs	r1, #2
 8009912:	5499      	strb	r1, [r3, r2]
 8009914:	e023      	b.n	800995e <HAL_TIM_OC_Start_IT+0xfa>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b04      	cmp	r3, #4
 800991a:	d104      	bne.n	8009926 <HAL_TIM_OC_Start_IT+0xc2>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	223f      	movs	r2, #63	@ 0x3f
 8009920:	2102      	movs	r1, #2
 8009922:	5499      	strb	r1, [r3, r2]
 8009924:	e01b      	b.n	800995e <HAL_TIM_OC_Start_IT+0xfa>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b08      	cmp	r3, #8
 800992a:	d104      	bne.n	8009936 <HAL_TIM_OC_Start_IT+0xd2>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2240      	movs	r2, #64	@ 0x40
 8009930:	2102      	movs	r1, #2
 8009932:	5499      	strb	r1, [r3, r2]
 8009934:	e013      	b.n	800995e <HAL_TIM_OC_Start_IT+0xfa>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b0c      	cmp	r3, #12
 800993a:	d104      	bne.n	8009946 <HAL_TIM_OC_Start_IT+0xe2>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2241      	movs	r2, #65	@ 0x41
 8009940:	2102      	movs	r1, #2
 8009942:	5499      	strb	r1, [r3, r2]
 8009944:	e00b      	b.n	800995e <HAL_TIM_OC_Start_IT+0xfa>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b10      	cmp	r3, #16
 800994a:	d104      	bne.n	8009956 <HAL_TIM_OC_Start_IT+0xf2>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2242      	movs	r2, #66	@ 0x42
 8009950:	2102      	movs	r1, #2
 8009952:	5499      	strb	r1, [r3, r2]
 8009954:	e003      	b.n	800995e <HAL_TIM_OC_Start_IT+0xfa>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2243      	movs	r2, #67	@ 0x43
 800995a:	2102      	movs	r1, #2
 800995c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b0c      	cmp	r3, #12
 8009962:	d02a      	beq.n	80099ba <HAL_TIM_OC_Start_IT+0x156>
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b0c      	cmp	r3, #12
 8009968:	d830      	bhi.n	80099cc <HAL_TIM_OC_Start_IT+0x168>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b08      	cmp	r3, #8
 800996e:	d01b      	beq.n	80099a8 <HAL_TIM_OC_Start_IT+0x144>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b08      	cmp	r3, #8
 8009974:	d82a      	bhi.n	80099cc <HAL_TIM_OC_Start_IT+0x168>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_TIM_OC_Start_IT+0x120>
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b04      	cmp	r3, #4
 8009980:	d009      	beq.n	8009996 <HAL_TIM_OC_Start_IT+0x132>
 8009982:	e023      	b.n	80099cc <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68da      	ldr	r2, [r3, #12]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2102      	movs	r1, #2
 8009990:	430a      	orrs	r2, r1
 8009992:	60da      	str	r2, [r3, #12]
      break;
 8009994:	e01f      	b.n	80099d6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68da      	ldr	r2, [r3, #12]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2104      	movs	r1, #4
 80099a2:	430a      	orrs	r2, r1
 80099a4:	60da      	str	r2, [r3, #12]
      break;
 80099a6:	e016      	b.n	80099d6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2108      	movs	r1, #8
 80099b4:	430a      	orrs	r2, r1
 80099b6:	60da      	str	r2, [r3, #12]
      break;
 80099b8:	e00d      	b.n	80099d6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2110      	movs	r1, #16
 80099c6:	430a      	orrs	r2, r1
 80099c8:	60da      	str	r2, [r3, #12]
      break;
 80099ca:	e004      	b.n	80099d6 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 80099cc:	230f      	movs	r3, #15
 80099ce:	18fb      	adds	r3, r7, r3
 80099d0:	2201      	movs	r2, #1
 80099d2:	701a      	strb	r2, [r3, #0]
      break;
 80099d4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80099d6:	230f      	movs	r3, #15
 80099d8:	18fb      	adds	r3, r7, r3
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d154      	bne.n	8009a8a <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	2201      	movs	r2, #1
 80099e8:	0018      	movs	r0, r3
 80099ea:	f001 fe7f 	bl	800b6ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a29      	ldr	r2, [pc, #164]	@ (8009a98 <HAL_TIM_OC_Start_IT+0x234>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d009      	beq.n	8009a0c <HAL_TIM_OC_Start_IT+0x1a8>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a27      	ldr	r2, [pc, #156]	@ (8009a9c <HAL_TIM_OC_Start_IT+0x238>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d004      	beq.n	8009a0c <HAL_TIM_OC_Start_IT+0x1a8>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a26      	ldr	r2, [pc, #152]	@ (8009aa0 <HAL_TIM_OC_Start_IT+0x23c>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d101      	bne.n	8009a10 <HAL_TIM_OC_Start_IT+0x1ac>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e000      	b.n	8009a12 <HAL_TIM_OC_Start_IT+0x1ae>
 8009a10:	2300      	movs	r3, #0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d008      	beq.n	8009a28 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2180      	movs	r1, #128	@ 0x80
 8009a22:	0209      	lsls	r1, r1, #8
 8009a24:	430a      	orrs	r2, r1
 8009a26:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8009a98 <HAL_TIM_OC_Start_IT+0x234>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00a      	beq.n	8009a48 <HAL_TIM_OC_Start_IT+0x1e4>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	2380      	movs	r3, #128	@ 0x80
 8009a38:	05db      	lsls	r3, r3, #23
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d004      	beq.n	8009a48 <HAL_TIM_OC_Start_IT+0x1e4>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a18      	ldr	r2, [pc, #96]	@ (8009aa4 <HAL_TIM_OC_Start_IT+0x240>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d116      	bne.n	8009a76 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	4a16      	ldr	r2, [pc, #88]	@ (8009aa8 <HAL_TIM_OC_Start_IT+0x244>)
 8009a50:	4013      	ands	r3, r2
 8009a52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b06      	cmp	r3, #6
 8009a58:	d016      	beq.n	8009a88 <HAL_TIM_OC_Start_IT+0x224>
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	2380      	movs	r3, #128	@ 0x80
 8009a5e:	025b      	lsls	r3, r3, #9
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d011      	beq.n	8009a88 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2101      	movs	r1, #1
 8009a70:	430a      	orrs	r2, r1
 8009a72:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a74:	e008      	b.n	8009a88 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2101      	movs	r1, #1
 8009a82:	430a      	orrs	r2, r1
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	e000      	b.n	8009a8a <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a88:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009a8a:	230f      	movs	r3, #15
 8009a8c:	18fb      	adds	r3, r7, r3
 8009a8e:	781b      	ldrb	r3, [r3, #0]
}
 8009a90:	0018      	movs	r0, r3
 8009a92:	46bd      	mov	sp, r7
 8009a94:	b004      	add	sp, #16
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	40012c00 	.word	0x40012c00
 8009a9c:	40014400 	.word	0x40014400
 8009aa0:	40014800 	.word	0x40014800
 8009aa4:	40000400 	.word	0x40000400
 8009aa8:	00010007 	.word	0x00010007

08009aac <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab6:	230f      	movs	r3, #15
 8009ab8:	18fb      	adds	r3, r7, r3
 8009aba:	2200      	movs	r2, #0
 8009abc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b0c      	cmp	r3, #12
 8009ac2:	d02a      	beq.n	8009b1a <HAL_TIM_OC_Stop_IT+0x6e>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b0c      	cmp	r3, #12
 8009ac8:	d830      	bhi.n	8009b2c <HAL_TIM_OC_Stop_IT+0x80>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d01b      	beq.n	8009b08 <HAL_TIM_OC_Stop_IT+0x5c>
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	2b08      	cmp	r3, #8
 8009ad4:	d82a      	bhi.n	8009b2c <HAL_TIM_OC_Stop_IT+0x80>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <HAL_TIM_OC_Stop_IT+0x38>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d009      	beq.n	8009af6 <HAL_TIM_OC_Stop_IT+0x4a>
 8009ae2:	e023      	b.n	8009b2c <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2102      	movs	r1, #2
 8009af0:	438a      	bics	r2, r1
 8009af2:	60da      	str	r2, [r3, #12]
      break;
 8009af4:	e01f      	b.n	8009b36 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2104      	movs	r1, #4
 8009b02:	438a      	bics	r2, r1
 8009b04:	60da      	str	r2, [r3, #12]
      break;
 8009b06:	e016      	b.n	8009b36 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2108      	movs	r1, #8
 8009b14:	438a      	bics	r2, r1
 8009b16:	60da      	str	r2, [r3, #12]
      break;
 8009b18:	e00d      	b.n	8009b36 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2110      	movs	r1, #16
 8009b26:	438a      	bics	r2, r1
 8009b28:	60da      	str	r2, [r3, #12]
      break;
 8009b2a:	e004      	b.n	8009b36 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8009b2c:	230f      	movs	r3, #15
 8009b2e:	18fb      	adds	r3, r7, r3
 8009b30:	2201      	movs	r2, #1
 8009b32:	701a      	strb	r2, [r3, #0]
      break;
 8009b34:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009b36:	230f      	movs	r3, #15
 8009b38:	18fb      	adds	r3, r7, r3
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d000      	beq.n	8009b42 <HAL_TIM_OC_Stop_IT+0x96>
 8009b40:	e06e      	b.n	8009c20 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f001 fdce 	bl	800b6ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a36      	ldr	r2, [pc, #216]	@ (8009c30 <HAL_TIM_OC_Stop_IT+0x184>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d009      	beq.n	8009b6e <HAL_TIM_OC_Stop_IT+0xc2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a35      	ldr	r2, [pc, #212]	@ (8009c34 <HAL_TIM_OC_Stop_IT+0x188>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d004      	beq.n	8009b6e <HAL_TIM_OC_Stop_IT+0xc2>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a33      	ldr	r2, [pc, #204]	@ (8009c38 <HAL_TIM_OC_Stop_IT+0x18c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d101      	bne.n	8009b72 <HAL_TIM_OC_Stop_IT+0xc6>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <HAL_TIM_OC_Stop_IT+0xc8>
 8009b72:	2300      	movs	r3, #0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d013      	beq.n	8009ba0 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8009c3c <HAL_TIM_OC_Stop_IT+0x190>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	d10d      	bne.n	8009ba0 <HAL_TIM_OC_Stop_IT+0xf4>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8009c40 <HAL_TIM_OC_Stop_IT+0x194>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	d107      	bne.n	8009ba0 <HAL_TIM_OC_Stop_IT+0xf4>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	492a      	ldr	r1, [pc, #168]	@ (8009c44 <HAL_TIM_OC_Stop_IT+0x198>)
 8009b9c:	400a      	ands	r2, r1
 8009b9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	4a25      	ldr	r2, [pc, #148]	@ (8009c3c <HAL_TIM_OC_Stop_IT+0x190>)
 8009ba8:	4013      	ands	r3, r2
 8009baa:	d10d      	bne.n	8009bc8 <HAL_TIM_OC_Stop_IT+0x11c>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	4a23      	ldr	r2, [pc, #140]	@ (8009c40 <HAL_TIM_OC_Stop_IT+0x194>)
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	d107      	bne.n	8009bc8 <HAL_TIM_OC_Stop_IT+0x11c>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	438a      	bics	r2, r1
 8009bc6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d104      	bne.n	8009bd8 <HAL_TIM_OC_Stop_IT+0x12c>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	223e      	movs	r2, #62	@ 0x3e
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	5499      	strb	r1, [r3, r2]
 8009bd6:	e023      	b.n	8009c20 <HAL_TIM_OC_Stop_IT+0x174>
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	d104      	bne.n	8009be8 <HAL_TIM_OC_Stop_IT+0x13c>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	223f      	movs	r2, #63	@ 0x3f
 8009be2:	2101      	movs	r1, #1
 8009be4:	5499      	strb	r1, [r3, r2]
 8009be6:	e01b      	b.n	8009c20 <HAL_TIM_OC_Stop_IT+0x174>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b08      	cmp	r3, #8
 8009bec:	d104      	bne.n	8009bf8 <HAL_TIM_OC_Stop_IT+0x14c>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2240      	movs	r2, #64	@ 0x40
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	5499      	strb	r1, [r3, r2]
 8009bf6:	e013      	b.n	8009c20 <HAL_TIM_OC_Stop_IT+0x174>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b0c      	cmp	r3, #12
 8009bfc:	d104      	bne.n	8009c08 <HAL_TIM_OC_Stop_IT+0x15c>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2241      	movs	r2, #65	@ 0x41
 8009c02:	2101      	movs	r1, #1
 8009c04:	5499      	strb	r1, [r3, r2]
 8009c06:	e00b      	b.n	8009c20 <HAL_TIM_OC_Stop_IT+0x174>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b10      	cmp	r3, #16
 8009c0c:	d104      	bne.n	8009c18 <HAL_TIM_OC_Stop_IT+0x16c>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2242      	movs	r2, #66	@ 0x42
 8009c12:	2101      	movs	r1, #1
 8009c14:	5499      	strb	r1, [r3, r2]
 8009c16:	e003      	b.n	8009c20 <HAL_TIM_OC_Stop_IT+0x174>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2243      	movs	r2, #67	@ 0x43
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8009c20:	230f      	movs	r3, #15
 8009c22:	18fb      	adds	r3, r7, r3
 8009c24:	781b      	ldrb	r3, [r3, #0]
}
 8009c26:	0018      	movs	r0, r3
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	b004      	add	sp, #16
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	46c0      	nop			@ (mov r8, r8)
 8009c30:	40012c00 	.word	0x40012c00
 8009c34:	40014400 	.word	0x40014400
 8009c38:	40014800 	.word	0x40014800
 8009c3c:	00001111 	.word	0x00001111
 8009c40:	00000444 	.word	0x00000444
 8009c44:	ffff7fff 	.word	0xffff7fff

08009c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e056      	b.n	8009d08 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	223d      	movs	r2, #61	@ 0x3d
 8009c5e:	5c9b      	ldrb	r3, [r3, r2]
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d113      	bne.n	8009c8e <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	223c      	movs	r2, #60	@ 0x3c
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	0018      	movs	r0, r3
 8009c72:	f001 fd5f 	bl	800b734 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a23      	ldr	r2, [pc, #140]	@ (8009d10 <HAL_TIM_PWM_Init+0xc8>)
 8009c82:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	0010      	movs	r0, r2
 8009c8c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	223d      	movs	r2, #61	@ 0x3d
 8009c92:	2102      	movs	r1, #2
 8009c94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	0019      	movs	r1, r3
 8009ca0:	0010      	movs	r0, r2
 8009ca2:	f001 f849 	bl	800ad38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2248      	movs	r2, #72	@ 0x48
 8009caa:	2101      	movs	r1, #1
 8009cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	223e      	movs	r2, #62	@ 0x3e
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	5499      	strb	r1, [r3, r2]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	223f      	movs	r2, #63	@ 0x3f
 8009cba:	2101      	movs	r1, #1
 8009cbc:	5499      	strb	r1, [r3, r2]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2240      	movs	r2, #64	@ 0x40
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	5499      	strb	r1, [r3, r2]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2241      	movs	r2, #65	@ 0x41
 8009cca:	2101      	movs	r1, #1
 8009ccc:	5499      	strb	r1, [r3, r2]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2242      	movs	r2, #66	@ 0x42
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	5499      	strb	r1, [r3, r2]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2243      	movs	r2, #67	@ 0x43
 8009cda:	2101      	movs	r1, #1
 8009cdc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2244      	movs	r2, #68	@ 0x44
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	5499      	strb	r1, [r3, r2]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2245      	movs	r2, #69	@ 0x45
 8009cea:	2101      	movs	r1, #1
 8009cec:	5499      	strb	r1, [r3, r2]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2246      	movs	r2, #70	@ 0x46
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	5499      	strb	r1, [r3, r2]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2247      	movs	r2, #71	@ 0x47
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	223d      	movs	r2, #61	@ 0x3d
 8009d02:	2101      	movs	r1, #1
 8009d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	0018      	movs	r0, r3
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	b002      	add	sp, #8
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	08009d15 	.word	0x08009d15

08009d14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d1c:	46c0      	nop			@ (mov r8, r8)
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	b002      	add	sp, #8
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d108      	bne.n	8009d46 <HAL_TIM_PWM_Start+0x22>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	223e      	movs	r2, #62	@ 0x3e
 8009d38:	5c9b      	ldrb	r3, [r3, r2]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	1e5a      	subs	r2, r3, #1
 8009d40:	4193      	sbcs	r3, r2
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	e037      	b.n	8009db6 <HAL_TIM_PWM_Start+0x92>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d108      	bne.n	8009d5e <HAL_TIM_PWM_Start+0x3a>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	223f      	movs	r2, #63	@ 0x3f
 8009d50:	5c9b      	ldrb	r3, [r3, r2]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	3b01      	subs	r3, #1
 8009d56:	1e5a      	subs	r2, r3, #1
 8009d58:	4193      	sbcs	r3, r2
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	e02b      	b.n	8009db6 <HAL_TIM_PWM_Start+0x92>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	d108      	bne.n	8009d76 <HAL_TIM_PWM_Start+0x52>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2240      	movs	r2, #64	@ 0x40
 8009d68:	5c9b      	ldrb	r3, [r3, r2]
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	1e5a      	subs	r2, r3, #1
 8009d70:	4193      	sbcs	r3, r2
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	e01f      	b.n	8009db6 <HAL_TIM_PWM_Start+0x92>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b0c      	cmp	r3, #12
 8009d7a:	d108      	bne.n	8009d8e <HAL_TIM_PWM_Start+0x6a>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2241      	movs	r2, #65	@ 0x41
 8009d80:	5c9b      	ldrb	r3, [r3, r2]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	1e5a      	subs	r2, r3, #1
 8009d88:	4193      	sbcs	r3, r2
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	e013      	b.n	8009db6 <HAL_TIM_PWM_Start+0x92>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b10      	cmp	r3, #16
 8009d92:	d108      	bne.n	8009da6 <HAL_TIM_PWM_Start+0x82>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2242      	movs	r2, #66	@ 0x42
 8009d98:	5c9b      	ldrb	r3, [r3, r2]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	1e5a      	subs	r2, r3, #1
 8009da0:	4193      	sbcs	r3, r2
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	e007      	b.n	8009db6 <HAL_TIM_PWM_Start+0x92>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2243      	movs	r2, #67	@ 0x43
 8009daa:	5c9b      	ldrb	r3, [r3, r2]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	3b01      	subs	r3, #1
 8009db0:	1e5a      	subs	r2, r3, #1
 8009db2:	4193      	sbcs	r3, r2
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e081      	b.n	8009ec2 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d104      	bne.n	8009dce <HAL_TIM_PWM_Start+0xaa>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	223e      	movs	r2, #62	@ 0x3e
 8009dc8:	2102      	movs	r1, #2
 8009dca:	5499      	strb	r1, [r3, r2]
 8009dcc:	e023      	b.n	8009e16 <HAL_TIM_PWM_Start+0xf2>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d104      	bne.n	8009dde <HAL_TIM_PWM_Start+0xba>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	223f      	movs	r2, #63	@ 0x3f
 8009dd8:	2102      	movs	r1, #2
 8009dda:	5499      	strb	r1, [r3, r2]
 8009ddc:	e01b      	b.n	8009e16 <HAL_TIM_PWM_Start+0xf2>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2b08      	cmp	r3, #8
 8009de2:	d104      	bne.n	8009dee <HAL_TIM_PWM_Start+0xca>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2240      	movs	r2, #64	@ 0x40
 8009de8:	2102      	movs	r1, #2
 8009dea:	5499      	strb	r1, [r3, r2]
 8009dec:	e013      	b.n	8009e16 <HAL_TIM_PWM_Start+0xf2>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b0c      	cmp	r3, #12
 8009df2:	d104      	bne.n	8009dfe <HAL_TIM_PWM_Start+0xda>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2241      	movs	r2, #65	@ 0x41
 8009df8:	2102      	movs	r1, #2
 8009dfa:	5499      	strb	r1, [r3, r2]
 8009dfc:	e00b      	b.n	8009e16 <HAL_TIM_PWM_Start+0xf2>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b10      	cmp	r3, #16
 8009e02:	d104      	bne.n	8009e0e <HAL_TIM_PWM_Start+0xea>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2242      	movs	r2, #66	@ 0x42
 8009e08:	2102      	movs	r1, #2
 8009e0a:	5499      	strb	r1, [r3, r2]
 8009e0c:	e003      	b.n	8009e16 <HAL_TIM_PWM_Start+0xf2>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2243      	movs	r2, #67	@ 0x43
 8009e12:	2102      	movs	r1, #2
 8009e14:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f001 fc64 	bl	800b6ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a28      	ldr	r2, [pc, #160]	@ (8009ecc <HAL_TIM_PWM_Start+0x1a8>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d009      	beq.n	8009e42 <HAL_TIM_PWM_Start+0x11e>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a27      	ldr	r2, [pc, #156]	@ (8009ed0 <HAL_TIM_PWM_Start+0x1ac>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d004      	beq.n	8009e42 <HAL_TIM_PWM_Start+0x11e>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a25      	ldr	r2, [pc, #148]	@ (8009ed4 <HAL_TIM_PWM_Start+0x1b0>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d101      	bne.n	8009e46 <HAL_TIM_PWM_Start+0x122>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <HAL_TIM_PWM_Start+0x124>
 8009e46:	2300      	movs	r3, #0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d008      	beq.n	8009e5e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2180      	movs	r1, #128	@ 0x80
 8009e58:	0209      	lsls	r1, r1, #8
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1a      	ldr	r2, [pc, #104]	@ (8009ecc <HAL_TIM_PWM_Start+0x1a8>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d00a      	beq.n	8009e7e <HAL_TIM_PWM_Start+0x15a>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	2380      	movs	r3, #128	@ 0x80
 8009e6e:	05db      	lsls	r3, r3, #23
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d004      	beq.n	8009e7e <HAL_TIM_PWM_Start+0x15a>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a17      	ldr	r2, [pc, #92]	@ (8009ed8 <HAL_TIM_PWM_Start+0x1b4>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d116      	bne.n	8009eac <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	4a15      	ldr	r2, [pc, #84]	@ (8009edc <HAL_TIM_PWM_Start+0x1b8>)
 8009e86:	4013      	ands	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b06      	cmp	r3, #6
 8009e8e:	d016      	beq.n	8009ebe <HAL_TIM_PWM_Start+0x19a>
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	2380      	movs	r3, #128	@ 0x80
 8009e94:	025b      	lsls	r3, r3, #9
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d011      	beq.n	8009ebe <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eaa:	e008      	b.n	8009ebe <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	e000      	b.n	8009ec0 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ebe:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	b004      	add	sp, #16
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	46c0      	nop			@ (mov r8, r8)
 8009ecc:	40012c00 	.word	0x40012c00
 8009ed0:	40014400 	.word	0x40014400
 8009ed4:	40014800 	.word	0x40014800
 8009ed8:	40000400 	.word	0x40000400
 8009edc:	00010007 	.word	0x00010007

08009ee0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e056      	b.n	8009fa0 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	223d      	movs	r2, #61	@ 0x3d
 8009ef6:	5c9b      	ldrb	r3, [r3, r2]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d113      	bne.n	8009f26 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	223c      	movs	r2, #60	@ 0x3c
 8009f02:	2100      	movs	r1, #0
 8009f04:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	0018      	movs	r0, r3
 8009f0a:	f001 fc13 	bl	800b734 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d102      	bne.n	8009f1c <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a23      	ldr	r2, [pc, #140]	@ (8009fa8 <HAL_TIM_IC_Init+0xc8>)
 8009f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	0010      	movs	r0, r2
 8009f24:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	223d      	movs	r2, #61	@ 0x3d
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3304      	adds	r3, #4
 8009f36:	0019      	movs	r1, r3
 8009f38:	0010      	movs	r0, r2
 8009f3a:	f000 fefd 	bl	800ad38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2248      	movs	r2, #72	@ 0x48
 8009f42:	2101      	movs	r1, #1
 8009f44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	223e      	movs	r2, #62	@ 0x3e
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	5499      	strb	r1, [r3, r2]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	223f      	movs	r2, #63	@ 0x3f
 8009f52:	2101      	movs	r1, #1
 8009f54:	5499      	strb	r1, [r3, r2]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2240      	movs	r2, #64	@ 0x40
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	5499      	strb	r1, [r3, r2]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2241      	movs	r2, #65	@ 0x41
 8009f62:	2101      	movs	r1, #1
 8009f64:	5499      	strb	r1, [r3, r2]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2242      	movs	r2, #66	@ 0x42
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	5499      	strb	r1, [r3, r2]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2243      	movs	r2, #67	@ 0x43
 8009f72:	2101      	movs	r1, #1
 8009f74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2244      	movs	r2, #68	@ 0x44
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	5499      	strb	r1, [r3, r2]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2245      	movs	r2, #69	@ 0x45
 8009f82:	2101      	movs	r1, #1
 8009f84:	5499      	strb	r1, [r3, r2]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2246      	movs	r2, #70	@ 0x46
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	5499      	strb	r1, [r3, r2]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2247      	movs	r2, #71	@ 0x47
 8009f92:	2101      	movs	r1, #1
 8009f94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	223d      	movs	r2, #61	@ 0x3d
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	b002      	add	sp, #8
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	08009fad 	.word	0x08009fad

08009fac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009fb4:	46c0      	nop			@ (mov r8, r8)
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	b002      	add	sp, #8
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fc6:	230f      	movs	r3, #15
 8009fc8:	18fb      	adds	r3, r7, r3
 8009fca:	2200      	movs	r2, #0
 8009fcc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d104      	bne.n	8009fde <HAL_TIM_IC_Start_IT+0x22>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	223e      	movs	r2, #62	@ 0x3e
 8009fd8:	5c9b      	ldrb	r3, [r3, r2]
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	e023      	b.n	800a026 <HAL_TIM_IC_Start_IT+0x6a>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d104      	bne.n	8009fee <HAL_TIM_IC_Start_IT+0x32>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	223f      	movs	r2, #63	@ 0x3f
 8009fe8:	5c9b      	ldrb	r3, [r3, r2]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	e01b      	b.n	800a026 <HAL_TIM_IC_Start_IT+0x6a>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b08      	cmp	r3, #8
 8009ff2:	d104      	bne.n	8009ffe <HAL_TIM_IC_Start_IT+0x42>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2240      	movs	r2, #64	@ 0x40
 8009ff8:	5c9b      	ldrb	r3, [r3, r2]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	e013      	b.n	800a026 <HAL_TIM_IC_Start_IT+0x6a>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b0c      	cmp	r3, #12
 800a002:	d104      	bne.n	800a00e <HAL_TIM_IC_Start_IT+0x52>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2241      	movs	r2, #65	@ 0x41
 800a008:	5c9b      	ldrb	r3, [r3, r2]
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	e00b      	b.n	800a026 <HAL_TIM_IC_Start_IT+0x6a>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b10      	cmp	r3, #16
 800a012:	d104      	bne.n	800a01e <HAL_TIM_IC_Start_IT+0x62>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2242      	movs	r2, #66	@ 0x42
 800a018:	5c9b      	ldrb	r3, [r3, r2]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	e003      	b.n	800a026 <HAL_TIM_IC_Start_IT+0x6a>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2243      	movs	r2, #67	@ 0x43
 800a022:	5c9b      	ldrb	r3, [r3, r2]
 800a024:	b2db      	uxtb	r3, r3
 800a026:	220e      	movs	r2, #14
 800a028:	18ba      	adds	r2, r7, r2
 800a02a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d104      	bne.n	800a03c <HAL_TIM_IC_Start_IT+0x80>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2244      	movs	r2, #68	@ 0x44
 800a036:	5c9b      	ldrb	r3, [r3, r2]
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	e013      	b.n	800a064 <HAL_TIM_IC_Start_IT+0xa8>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d104      	bne.n	800a04c <HAL_TIM_IC_Start_IT+0x90>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2245      	movs	r2, #69	@ 0x45
 800a046:	5c9b      	ldrb	r3, [r3, r2]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	e00b      	b.n	800a064 <HAL_TIM_IC_Start_IT+0xa8>
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b08      	cmp	r3, #8
 800a050:	d104      	bne.n	800a05c <HAL_TIM_IC_Start_IT+0xa0>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2246      	movs	r2, #70	@ 0x46
 800a056:	5c9b      	ldrb	r3, [r3, r2]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	e003      	b.n	800a064 <HAL_TIM_IC_Start_IT+0xa8>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2247      	movs	r2, #71	@ 0x47
 800a060:	5c9b      	ldrb	r3, [r3, r2]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	210d      	movs	r1, #13
 800a066:	187a      	adds	r2, r7, r1
 800a068:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a06a:	230e      	movs	r3, #14
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d103      	bne.n	800a07c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a074:	187b      	adds	r3, r7, r1
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d001      	beq.n	800a080 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e0c3      	b.n	800a208 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d104      	bne.n	800a090 <HAL_TIM_IC_Start_IT+0xd4>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	223e      	movs	r2, #62	@ 0x3e
 800a08a:	2102      	movs	r1, #2
 800a08c:	5499      	strb	r1, [r3, r2]
 800a08e:	e023      	b.n	800a0d8 <HAL_TIM_IC_Start_IT+0x11c>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b04      	cmp	r3, #4
 800a094:	d104      	bne.n	800a0a0 <HAL_TIM_IC_Start_IT+0xe4>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	223f      	movs	r2, #63	@ 0x3f
 800a09a:	2102      	movs	r1, #2
 800a09c:	5499      	strb	r1, [r3, r2]
 800a09e:	e01b      	b.n	800a0d8 <HAL_TIM_IC_Start_IT+0x11c>
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	d104      	bne.n	800a0b0 <HAL_TIM_IC_Start_IT+0xf4>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2240      	movs	r2, #64	@ 0x40
 800a0aa:	2102      	movs	r1, #2
 800a0ac:	5499      	strb	r1, [r3, r2]
 800a0ae:	e013      	b.n	800a0d8 <HAL_TIM_IC_Start_IT+0x11c>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b0c      	cmp	r3, #12
 800a0b4:	d104      	bne.n	800a0c0 <HAL_TIM_IC_Start_IT+0x104>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2241      	movs	r2, #65	@ 0x41
 800a0ba:	2102      	movs	r1, #2
 800a0bc:	5499      	strb	r1, [r3, r2]
 800a0be:	e00b      	b.n	800a0d8 <HAL_TIM_IC_Start_IT+0x11c>
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2b10      	cmp	r3, #16
 800a0c4:	d104      	bne.n	800a0d0 <HAL_TIM_IC_Start_IT+0x114>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2242      	movs	r2, #66	@ 0x42
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	5499      	strb	r1, [r3, r2]
 800a0ce:	e003      	b.n	800a0d8 <HAL_TIM_IC_Start_IT+0x11c>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2243      	movs	r2, #67	@ 0x43
 800a0d4:	2102      	movs	r1, #2
 800a0d6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d104      	bne.n	800a0e8 <HAL_TIM_IC_Start_IT+0x12c>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2244      	movs	r2, #68	@ 0x44
 800a0e2:	2102      	movs	r1, #2
 800a0e4:	5499      	strb	r1, [r3, r2]
 800a0e6:	e013      	b.n	800a110 <HAL_TIM_IC_Start_IT+0x154>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d104      	bne.n	800a0f8 <HAL_TIM_IC_Start_IT+0x13c>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2245      	movs	r2, #69	@ 0x45
 800a0f2:	2102      	movs	r1, #2
 800a0f4:	5499      	strb	r1, [r3, r2]
 800a0f6:	e00b      	b.n	800a110 <HAL_TIM_IC_Start_IT+0x154>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b08      	cmp	r3, #8
 800a0fc:	d104      	bne.n	800a108 <HAL_TIM_IC_Start_IT+0x14c>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2246      	movs	r2, #70	@ 0x46
 800a102:	2102      	movs	r1, #2
 800a104:	5499      	strb	r1, [r3, r2]
 800a106:	e003      	b.n	800a110 <HAL_TIM_IC_Start_IT+0x154>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2247      	movs	r2, #71	@ 0x47
 800a10c:	2102      	movs	r1, #2
 800a10e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2b0c      	cmp	r3, #12
 800a114:	d02a      	beq.n	800a16c <HAL_TIM_IC_Start_IT+0x1b0>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b0c      	cmp	r3, #12
 800a11a:	d830      	bhi.n	800a17e <HAL_TIM_IC_Start_IT+0x1c2>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b08      	cmp	r3, #8
 800a120:	d01b      	beq.n	800a15a <HAL_TIM_IC_Start_IT+0x19e>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b08      	cmp	r3, #8
 800a126:	d82a      	bhi.n	800a17e <HAL_TIM_IC_Start_IT+0x1c2>
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <HAL_TIM_IC_Start_IT+0x17a>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b04      	cmp	r3, #4
 800a132:	d009      	beq.n	800a148 <HAL_TIM_IC_Start_IT+0x18c>
 800a134:	e023      	b.n	800a17e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2102      	movs	r1, #2
 800a142:	430a      	orrs	r2, r1
 800a144:	60da      	str	r2, [r3, #12]
      break;
 800a146:	e01f      	b.n	800a188 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2104      	movs	r1, #4
 800a154:	430a      	orrs	r2, r1
 800a156:	60da      	str	r2, [r3, #12]
      break;
 800a158:	e016      	b.n	800a188 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68da      	ldr	r2, [r3, #12]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2108      	movs	r1, #8
 800a166:	430a      	orrs	r2, r1
 800a168:	60da      	str	r2, [r3, #12]
      break;
 800a16a:	e00d      	b.n	800a188 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68da      	ldr	r2, [r3, #12]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2110      	movs	r1, #16
 800a178:	430a      	orrs	r2, r1
 800a17a:	60da      	str	r2, [r3, #12]
      break;
 800a17c:	e004      	b.n	800a188 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800a17e:	230f      	movs	r3, #15
 800a180:	18fb      	adds	r3, r7, r3
 800a182:	2201      	movs	r2, #1
 800a184:	701a      	strb	r2, [r3, #0]
      break;
 800a186:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a188:	230f      	movs	r3, #15
 800a18a:	18fb      	adds	r3, r7, r3
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d137      	bne.n	800a202 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	2201      	movs	r2, #1
 800a19a:	0018      	movs	r0, r3
 800a19c:	f001 faa6 	bl	800b6ec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1a      	ldr	r2, [pc, #104]	@ (800a210 <HAL_TIM_IC_Start_IT+0x254>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d00a      	beq.n	800a1c0 <HAL_TIM_IC_Start_IT+0x204>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	2380      	movs	r3, #128	@ 0x80
 800a1b0:	05db      	lsls	r3, r3, #23
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d004      	beq.n	800a1c0 <HAL_TIM_IC_Start_IT+0x204>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a16      	ldr	r2, [pc, #88]	@ (800a214 <HAL_TIM_IC_Start_IT+0x258>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d116      	bne.n	800a1ee <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	4a14      	ldr	r2, [pc, #80]	@ (800a218 <HAL_TIM_IC_Start_IT+0x25c>)
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b06      	cmp	r3, #6
 800a1d0:	d016      	beq.n	800a200 <HAL_TIM_IC_Start_IT+0x244>
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	2380      	movs	r3, #128	@ 0x80
 800a1d6:	025b      	lsls	r3, r3, #9
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d011      	beq.n	800a200 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ec:	e008      	b.n	800a200 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	e000      	b.n	800a202 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a200:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a202:	230f      	movs	r3, #15
 800a204:	18fb      	adds	r3, r7, r3
 800a206:	781b      	ldrb	r3, [r3, #0]
}
 800a208:	0018      	movs	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	b004      	add	sp, #16
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	40012c00 	.word	0x40012c00
 800a214:	40000400 	.word	0x40000400
 800a218:	00010007 	.word	0x00010007

0800a21c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2202      	movs	r2, #2
 800a238:	4013      	ands	r3, r2
 800a23a:	d027      	beq.n	800a28c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2202      	movs	r2, #2
 800a240:	4013      	ands	r3, r2
 800a242:	d023      	beq.n	800a28c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2203      	movs	r2, #3
 800a24a:	4252      	negs	r2, r2
 800a24c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	2203      	movs	r2, #3
 800a25c:	4013      	ands	r3, r2
 800a25e:	d006      	beq.n	800a26e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2294      	movs	r2, #148	@ 0x94
 800a264:	589b      	ldr	r3, [r3, r2]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	0010      	movs	r0, r2
 800a26a:	4798      	blx	r3
 800a26c:	e00b      	b.n	800a286 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	229c      	movs	r2, #156	@ 0x9c
 800a272:	589b      	ldr	r3, [r3, r2]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	0010      	movs	r0, r2
 800a278:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	22a0      	movs	r2, #160	@ 0xa0
 800a27e:	589b      	ldr	r3, [r3, r2]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	0010      	movs	r0, r2
 800a284:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2204      	movs	r2, #4
 800a290:	4013      	ands	r3, r2
 800a292:	d028      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2204      	movs	r2, #4
 800a298:	4013      	ands	r3, r2
 800a29a:	d024      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2205      	movs	r2, #5
 800a2a2:	4252      	negs	r2, r2
 800a2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	699a      	ldr	r2, [r3, #24]
 800a2b2:	23c0      	movs	r3, #192	@ 0xc0
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	d006      	beq.n	800a2c8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2294      	movs	r2, #148	@ 0x94
 800a2be:	589b      	ldr	r3, [r3, r2]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	0010      	movs	r0, r2
 800a2c4:	4798      	blx	r3
 800a2c6:	e00b      	b.n	800a2e0 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	229c      	movs	r2, #156	@ 0x9c
 800a2cc:	589b      	ldr	r3, [r3, r2]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	0010      	movs	r0, r2
 800a2d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	22a0      	movs	r2, #160	@ 0xa0
 800a2d8:	589b      	ldr	r3, [r3, r2]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	0010      	movs	r0, r2
 800a2de:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2208      	movs	r2, #8
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	d027      	beq.n	800a33e <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2208      	movs	r2, #8
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	d023      	beq.n	800a33e <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2209      	movs	r2, #9
 800a2fc:	4252      	negs	r2, r2
 800a2fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2204      	movs	r2, #4
 800a304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	2203      	movs	r2, #3
 800a30e:	4013      	ands	r3, r2
 800a310:	d006      	beq.n	800a320 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2294      	movs	r2, #148	@ 0x94
 800a316:	589b      	ldr	r3, [r3, r2]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	0010      	movs	r0, r2
 800a31c:	4798      	blx	r3
 800a31e:	e00b      	b.n	800a338 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	229c      	movs	r2, #156	@ 0x9c
 800a324:	589b      	ldr	r3, [r3, r2]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	0010      	movs	r0, r2
 800a32a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	22a0      	movs	r2, #160	@ 0xa0
 800a330:	589b      	ldr	r3, [r3, r2]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	0010      	movs	r0, r2
 800a336:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2210      	movs	r2, #16
 800a342:	4013      	ands	r3, r2
 800a344:	d028      	beq.n	800a398 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2210      	movs	r2, #16
 800a34a:	4013      	ands	r3, r2
 800a34c:	d024      	beq.n	800a398 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2211      	movs	r2, #17
 800a354:	4252      	negs	r2, r2
 800a356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2208      	movs	r2, #8
 800a35c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	23c0      	movs	r3, #192	@ 0xc0
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4013      	ands	r3, r2
 800a36a:	d006      	beq.n	800a37a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2294      	movs	r2, #148	@ 0x94
 800a370:	589b      	ldr	r3, [r3, r2]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	0010      	movs	r0, r2
 800a376:	4798      	blx	r3
 800a378:	e00b      	b.n	800a392 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	229c      	movs	r2, #156	@ 0x9c
 800a37e:	589b      	ldr	r3, [r3, r2]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	0010      	movs	r0, r2
 800a384:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	22a0      	movs	r2, #160	@ 0xa0
 800a38a:	589b      	ldr	r3, [r3, r2]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	0010      	movs	r0, r2
 800a390:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2201      	movs	r2, #1
 800a39c:	4013      	ands	r3, r2
 800a39e:	d00e      	beq.n	800a3be <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d00a      	beq.n	800a3be <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	4252      	negs	r2, r2
 800a3b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2284      	movs	r2, #132	@ 0x84
 800a3b6:	589b      	ldr	r3, [r3, r2]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	0010      	movs	r0, r2
 800a3bc:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2280      	movs	r2, #128	@ 0x80
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	d104      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	2380      	movs	r3, #128	@ 0x80
 800a3ca:	019b      	lsls	r3, r3, #6
 800a3cc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a3ce:	d00d      	beq.n	800a3ec <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2280      	movs	r2, #128	@ 0x80
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	d009      	beq.n	800a3ec <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a22      	ldr	r2, [pc, #136]	@ (800a468 <HAL_TIM_IRQHandler+0x24c>)
 800a3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	22b4      	movs	r2, #180	@ 0xb4
 800a3e4:	589b      	ldr	r3, [r3, r2]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	0010      	movs	r0, r2
 800a3ea:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	2380      	movs	r3, #128	@ 0x80
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	d00d      	beq.n	800a412 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2280      	movs	r2, #128	@ 0x80
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	d009      	beq.n	800a412 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a1a      	ldr	r2, [pc, #104]	@ (800a46c <HAL_TIM_IRQHandler+0x250>)
 800a404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	22b8      	movs	r2, #184	@ 0xb8
 800a40a:	589b      	ldr	r3, [r3, r2]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	0010      	movs	r0, r2
 800a410:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	2240      	movs	r2, #64	@ 0x40
 800a416:	4013      	ands	r3, r2
 800a418:	d00e      	beq.n	800a438 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2240      	movs	r2, #64	@ 0x40
 800a41e:	4013      	ands	r3, r2
 800a420:	d00a      	beq.n	800a438 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2241      	movs	r2, #65	@ 0x41
 800a428:	4252      	negs	r2, r2
 800a42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	228c      	movs	r2, #140	@ 0x8c
 800a430:	589b      	ldr	r3, [r3, r2]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	0010      	movs	r0, r2
 800a436:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2220      	movs	r2, #32
 800a43c:	4013      	ands	r3, r2
 800a43e:	d00e      	beq.n	800a45e <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2220      	movs	r2, #32
 800a444:	4013      	ands	r3, r2
 800a446:	d00a      	beq.n	800a45e <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2221      	movs	r2, #33	@ 0x21
 800a44e:	4252      	negs	r2, r2
 800a450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	22ac      	movs	r2, #172	@ 0xac
 800a456:	589b      	ldr	r3, [r3, r2]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	0010      	movs	r0, r2
 800a45c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a45e:	46c0      	nop			@ (mov r8, r8)
 800a460:	46bd      	mov	sp, r7
 800a462:	b004      	add	sp, #16
 800a464:	bd80      	pop	{r7, pc}
 800a466:	46c0      	nop			@ (mov r8, r8)
 800a468:	ffffdf7f 	.word	0xffffdf7f
 800a46c:	fffffeff 	.word	0xfffffeff

0800a470 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a47c:	2317      	movs	r3, #23
 800a47e:	18fb      	adds	r3, r7, r3
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	223c      	movs	r2, #60	@ 0x3c
 800a488:	5c9b      	ldrb	r3, [r3, r2]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d101      	bne.n	800a492 <HAL_TIM_OC_ConfigChannel+0x22>
 800a48e:	2302      	movs	r3, #2
 800a490:	e048      	b.n	800a524 <HAL_TIM_OC_ConfigChannel+0xb4>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	223c      	movs	r2, #60	@ 0x3c
 800a496:	2101      	movs	r1, #1
 800a498:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b14      	cmp	r3, #20
 800a49e:	d835      	bhi.n	800a50c <HAL_TIM_OC_ConfigChannel+0x9c>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	009a      	lsls	r2, r3, #2
 800a4a4:	4b21      	ldr	r3, [pc, #132]	@ (800a52c <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a4a6:	18d3      	adds	r3, r2, r3
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	0011      	movs	r1, r2
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	f000 fcc3 	bl	800ae40 <TIM_OC1_SetConfig>
      break;
 800a4ba:	e02c      	b.n	800a516 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	0011      	movs	r1, r2
 800a4c4:	0018      	movs	r0, r3
 800a4c6:	f000 fd3b 	bl	800af40 <TIM_OC2_SetConfig>
      break;
 800a4ca:	e024      	b.n	800a516 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	0011      	movs	r1, r2
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f000 fdb1 	bl	800b03c <TIM_OC3_SetConfig>
      break;
 800a4da:	e01c      	b.n	800a516 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	0011      	movs	r1, r2
 800a4e4:	0018      	movs	r0, r3
 800a4e6:	f000 fe2b 	bl	800b140 <TIM_OC4_SetConfig>
      break;
 800a4ea:	e014      	b.n	800a516 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	0011      	movs	r1, r2
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	f000 fe87 	bl	800b208 <TIM_OC5_SetConfig>
      break;
 800a4fa:	e00c      	b.n	800a516 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	0011      	movs	r1, r2
 800a504:	0018      	movs	r0, r3
 800a506:	f000 fed9 	bl	800b2bc <TIM_OC6_SetConfig>
      break;
 800a50a:	e004      	b.n	800a516 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a50c:	2317      	movs	r3, #23
 800a50e:	18fb      	adds	r3, r7, r3
 800a510:	2201      	movs	r2, #1
 800a512:	701a      	strb	r2, [r3, #0]
      break;
 800a514:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	223c      	movs	r2, #60	@ 0x3c
 800a51a:	2100      	movs	r1, #0
 800a51c:	5499      	strb	r1, [r3, r2]

  return status;
 800a51e:	2317      	movs	r3, #23
 800a520:	18fb      	adds	r3, r7, r3
 800a522:	781b      	ldrb	r3, [r3, #0]
}
 800a524:	0018      	movs	r0, r3
 800a526:	46bd      	mov	sp, r7
 800a528:	b006      	add	sp, #24
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	0800dc2c 	.word	0x0800dc2c

0800a530 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a53c:	2317      	movs	r3, #23
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	2200      	movs	r2, #0
 800a542:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	223c      	movs	r2, #60	@ 0x3c
 800a548:	5c9b      	ldrb	r3, [r3, r2]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d101      	bne.n	800a552 <HAL_TIM_IC_ConfigChannel+0x22>
 800a54e:	2302      	movs	r3, #2
 800a550:	e08c      	b.n	800a66c <HAL_TIM_IC_ConfigChannel+0x13c>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	223c      	movs	r2, #60	@ 0x3c
 800a556:	2101      	movs	r1, #1
 800a558:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d11b      	bne.n	800a598 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a570:	f000 ff02 	bl	800b378 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699a      	ldr	r2, [r3, #24]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	210c      	movs	r1, #12
 800a580:	438a      	bics	r2, r1
 800a582:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6999      	ldr	r1, [r3, #24]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	619a      	str	r2, [r3, #24]
 800a596:	e062      	b.n	800a65e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d11c      	bne.n	800a5d8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a5ae:	f000 ff67 	bl	800b480 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	699a      	ldr	r2, [r3, #24]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	492d      	ldr	r1, [pc, #180]	@ (800a674 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a5be:	400a      	ands	r2, r1
 800a5c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6999      	ldr	r1, [r3, #24]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	021a      	lsls	r2, r3, #8
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	619a      	str	r2, [r3, #24]
 800a5d6:	e042      	b.n	800a65e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b08      	cmp	r3, #8
 800a5dc:	d11b      	bne.n	800a616 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a5ee:	f000 ffbb 	bl	800b568 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69da      	ldr	r2, [r3, #28]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	210c      	movs	r1, #12
 800a5fe:	438a      	bics	r2, r1
 800a600:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69d9      	ldr	r1, [r3, #28]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	61da      	str	r2, [r3, #28]
 800a614:	e023      	b.n	800a65e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b0c      	cmp	r3, #12
 800a61a:	d11c      	bne.n	800a656 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a62c:	f000 ffdc 	bl	800b5e8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	69da      	ldr	r2, [r3, #28]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	490e      	ldr	r1, [pc, #56]	@ (800a674 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a63c:	400a      	ands	r2, r1
 800a63e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	69d9      	ldr	r1, [r3, #28]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	021a      	lsls	r2, r3, #8
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	430a      	orrs	r2, r1
 800a652:	61da      	str	r2, [r3, #28]
 800a654:	e003      	b.n	800a65e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a656:	2317      	movs	r3, #23
 800a658:	18fb      	adds	r3, r7, r3
 800a65a:	2201      	movs	r2, #1
 800a65c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	223c      	movs	r2, #60	@ 0x3c
 800a662:	2100      	movs	r1, #0
 800a664:	5499      	strb	r1, [r3, r2]

  return status;
 800a666:	2317      	movs	r3, #23
 800a668:	18fb      	adds	r3, r7, r3
 800a66a:	781b      	ldrb	r3, [r3, #0]
}
 800a66c:	0018      	movs	r0, r3
 800a66e:	46bd      	mov	sp, r7
 800a670:	b006      	add	sp, #24
 800a672:	bd80      	pop	{r7, pc}
 800a674:	fffff3ff 	.word	0xfffff3ff

0800a678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a684:	2317      	movs	r3, #23
 800a686:	18fb      	adds	r3, r7, r3
 800a688:	2200      	movs	r2, #0
 800a68a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	223c      	movs	r2, #60	@ 0x3c
 800a690:	5c9b      	ldrb	r3, [r3, r2]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <HAL_TIM_PWM_ConfigChannel+0x22>
 800a696:	2302      	movs	r3, #2
 800a698:	e0e5      	b.n	800a866 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	223c      	movs	r2, #60	@ 0x3c
 800a69e:	2101      	movs	r1, #1
 800a6a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b14      	cmp	r3, #20
 800a6a6:	d900      	bls.n	800a6aa <HAL_TIM_PWM_ConfigChannel+0x32>
 800a6a8:	e0d1      	b.n	800a84e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	009a      	lsls	r2, r3, #2
 800a6ae:	4b70      	ldr	r3, [pc, #448]	@ (800a870 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a6b0:	18d3      	adds	r3, r2, r3
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	0011      	movs	r1, r2
 800a6be:	0018      	movs	r0, r3
 800a6c0:	f000 fbbe 	bl	800ae40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	699a      	ldr	r2, [r3, #24]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2108      	movs	r1, #8
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699a      	ldr	r2, [r3, #24]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2104      	movs	r1, #4
 800a6e0:	438a      	bics	r2, r1
 800a6e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6999      	ldr	r1, [r3, #24]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	691a      	ldr	r2, [r3, #16]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	619a      	str	r2, [r3, #24]
      break;
 800a6f6:	e0af      	b.n	800a858 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	0011      	movs	r1, r2
 800a700:	0018      	movs	r0, r3
 800a702:	f000 fc1d 	bl	800af40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	699a      	ldr	r2, [r3, #24]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2180      	movs	r1, #128	@ 0x80
 800a712:	0109      	lsls	r1, r1, #4
 800a714:	430a      	orrs	r2, r1
 800a716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	699a      	ldr	r2, [r3, #24]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4954      	ldr	r1, [pc, #336]	@ (800a874 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a724:	400a      	ands	r2, r1
 800a726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6999      	ldr	r1, [r3, #24]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	021a      	lsls	r2, r3, #8
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	619a      	str	r2, [r3, #24]
      break;
 800a73c:	e08c      	b.n	800a858 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	0011      	movs	r1, r2
 800a746:	0018      	movs	r0, r3
 800a748:	f000 fc78 	bl	800b03c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	69da      	ldr	r2, [r3, #28]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2108      	movs	r1, #8
 800a758:	430a      	orrs	r2, r1
 800a75a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	69da      	ldr	r2, [r3, #28]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2104      	movs	r1, #4
 800a768:	438a      	bics	r2, r1
 800a76a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	69d9      	ldr	r1, [r3, #28]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	691a      	ldr	r2, [r3, #16]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	61da      	str	r2, [r3, #28]
      break;
 800a77e:	e06b      	b.n	800a858 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	0011      	movs	r1, r2
 800a788:	0018      	movs	r0, r3
 800a78a:	f000 fcd9 	bl	800b140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69da      	ldr	r2, [r3, #28]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2180      	movs	r1, #128	@ 0x80
 800a79a:	0109      	lsls	r1, r1, #4
 800a79c:	430a      	orrs	r2, r1
 800a79e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	69da      	ldr	r2, [r3, #28]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4932      	ldr	r1, [pc, #200]	@ (800a874 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a7ac:	400a      	ands	r2, r1
 800a7ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	69d9      	ldr	r1, [r3, #28]
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	021a      	lsls	r2, r3, #8
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	430a      	orrs	r2, r1
 800a7c2:	61da      	str	r2, [r3, #28]
      break;
 800a7c4:	e048      	b.n	800a858 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	0011      	movs	r1, r2
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f000 fd1a 	bl	800b208 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2108      	movs	r1, #8
 800a7e0:	430a      	orrs	r2, r1
 800a7e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2104      	movs	r1, #4
 800a7f0:	438a      	bics	r2, r1
 800a7f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	691a      	ldr	r2, [r3, #16]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	430a      	orrs	r2, r1
 800a804:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a806:	e027      	b.n	800a858 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	0011      	movs	r1, r2
 800a810:	0018      	movs	r0, r3
 800a812:	f000 fd53 	bl	800b2bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2180      	movs	r1, #128	@ 0x80
 800a822:	0109      	lsls	r1, r1, #4
 800a824:	430a      	orrs	r2, r1
 800a826:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4910      	ldr	r1, [pc, #64]	@ (800a874 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a834:	400a      	ands	r2, r1
 800a836:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	021a      	lsls	r2, r3, #8
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a84c:	e004      	b.n	800a858 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a84e:	2317      	movs	r3, #23
 800a850:	18fb      	adds	r3, r7, r3
 800a852:	2201      	movs	r2, #1
 800a854:	701a      	strb	r2, [r3, #0]
      break;
 800a856:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	223c      	movs	r2, #60	@ 0x3c
 800a85c:	2100      	movs	r1, #0
 800a85e:	5499      	strb	r1, [r3, r2]

  return status;
 800a860:	2317      	movs	r3, #23
 800a862:	18fb      	adds	r3, r7, r3
 800a864:	781b      	ldrb	r3, [r3, #0]
}
 800a866:	0018      	movs	r0, r3
 800a868:	46bd      	mov	sp, r7
 800a86a:	b006      	add	sp, #24
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	46c0      	nop			@ (mov r8, r8)
 800a870:	0800dc80 	.word	0x0800dc80
 800a874:	fffffbff 	.word	0xfffffbff

0800a878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a882:	230f      	movs	r3, #15
 800a884:	18fb      	adds	r3, r7, r3
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	223c      	movs	r2, #60	@ 0x3c
 800a88e:	5c9b      	ldrb	r3, [r3, r2]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d101      	bne.n	800a898 <HAL_TIM_ConfigClockSource+0x20>
 800a894:	2302      	movs	r3, #2
 800a896:	e0bc      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x19a>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	223c      	movs	r2, #60	@ 0x3c
 800a89c:	2101      	movs	r1, #1
 800a89e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	223d      	movs	r2, #61	@ 0x3d
 800a8a4:	2102      	movs	r1, #2
 800a8a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	4a5a      	ldr	r2, [pc, #360]	@ (800aa1c <HAL_TIM_ConfigClockSource+0x1a4>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	4a59      	ldr	r2, [pc, #356]	@ (800aa20 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a8bc:	4013      	ands	r3, r2
 800a8be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2280      	movs	r2, #128	@ 0x80
 800a8ce:	0192      	lsls	r2, r2, #6
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d040      	beq.n	800a956 <HAL_TIM_ConfigClockSource+0xde>
 800a8d4:	2280      	movs	r2, #128	@ 0x80
 800a8d6:	0192      	lsls	r2, r2, #6
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d900      	bls.n	800a8de <HAL_TIM_ConfigClockSource+0x66>
 800a8dc:	e088      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
 800a8de:	2280      	movs	r2, #128	@ 0x80
 800a8e0:	0152      	lsls	r2, r2, #5
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d100      	bne.n	800a8e8 <HAL_TIM_ConfigClockSource+0x70>
 800a8e6:	e088      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x182>
 800a8e8:	2280      	movs	r2, #128	@ 0x80
 800a8ea:	0152      	lsls	r2, r2, #5
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d900      	bls.n	800a8f2 <HAL_TIM_ConfigClockSource+0x7a>
 800a8f0:	e07e      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
 800a8f2:	2b70      	cmp	r3, #112	@ 0x70
 800a8f4:	d018      	beq.n	800a928 <HAL_TIM_ConfigClockSource+0xb0>
 800a8f6:	d900      	bls.n	800a8fa <HAL_TIM_ConfigClockSource+0x82>
 800a8f8:	e07a      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
 800a8fa:	2b60      	cmp	r3, #96	@ 0x60
 800a8fc:	d04f      	beq.n	800a99e <HAL_TIM_ConfigClockSource+0x126>
 800a8fe:	d900      	bls.n	800a902 <HAL_TIM_ConfigClockSource+0x8a>
 800a900:	e076      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
 800a902:	2b50      	cmp	r3, #80	@ 0x50
 800a904:	d03b      	beq.n	800a97e <HAL_TIM_ConfigClockSource+0x106>
 800a906:	d900      	bls.n	800a90a <HAL_TIM_ConfigClockSource+0x92>
 800a908:	e072      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
 800a90a:	2b40      	cmp	r3, #64	@ 0x40
 800a90c:	d057      	beq.n	800a9be <HAL_TIM_ConfigClockSource+0x146>
 800a90e:	d900      	bls.n	800a912 <HAL_TIM_ConfigClockSource+0x9a>
 800a910:	e06e      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
 800a912:	2b30      	cmp	r3, #48	@ 0x30
 800a914:	d063      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x166>
 800a916:	d86b      	bhi.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
 800a918:	2b20      	cmp	r3, #32
 800a91a:	d060      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x166>
 800a91c:	d868      	bhi.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d05d      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x166>
 800a922:	2b10      	cmp	r3, #16
 800a924:	d05b      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x166>
 800a926:	e063      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a938:	f000 feb8 	bl	800b6ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2277      	movs	r2, #119	@ 0x77
 800a948:	4313      	orrs	r3, r2
 800a94a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	609a      	str	r2, [r3, #8]
      break;
 800a954:	e052      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a966:	f000 fea1 	bl	800b6ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	689a      	ldr	r2, [r3, #8]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2180      	movs	r1, #128	@ 0x80
 800a976:	01c9      	lsls	r1, r1, #7
 800a978:	430a      	orrs	r2, r1
 800a97a:	609a      	str	r2, [r3, #8]
      break;
 800a97c:	e03e      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a98a:	001a      	movs	r2, r3
 800a98c:	f000 fd4a 	bl	800b424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2150      	movs	r1, #80	@ 0x50
 800a996:	0018      	movs	r0, r3
 800a998:	f000 fe6c 	bl	800b674 <TIM_ITRx_SetConfig>
      break;
 800a99c:	e02e      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9aa:	001a      	movs	r2, r3
 800a9ac:	f000 fdaa 	bl	800b504 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2160      	movs	r1, #96	@ 0x60
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	f000 fe5c 	bl	800b674 <TIM_ITRx_SetConfig>
      break;
 800a9bc:	e01e      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ca:	001a      	movs	r2, r3
 800a9cc:	f000 fd2a 	bl	800b424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2140      	movs	r1, #64	@ 0x40
 800a9d6:	0018      	movs	r0, r3
 800a9d8:	f000 fe4c 	bl	800b674 <TIM_ITRx_SetConfig>
      break;
 800a9dc:	e00e      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	0019      	movs	r1, r3
 800a9e8:	0010      	movs	r0, r2
 800a9ea:	f000 fe43 	bl	800b674 <TIM_ITRx_SetConfig>
      break;
 800a9ee:	e005      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a9f0:	230f      	movs	r3, #15
 800a9f2:	18fb      	adds	r3, r7, r3
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	701a      	strb	r2, [r3, #0]
      break;
 800a9f8:	e000      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a9fa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	223d      	movs	r2, #61	@ 0x3d
 800aa00:	2101      	movs	r1, #1
 800aa02:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	223c      	movs	r2, #60	@ 0x3c
 800aa08:	2100      	movs	r1, #0
 800aa0a:	5499      	strb	r1, [r3, r2]

  return status;
 800aa0c:	230f      	movs	r3, #15
 800aa0e:	18fb      	adds	r3, r7, r3
 800aa10:	781b      	ldrb	r3, [r3, #0]
}
 800aa12:	0018      	movs	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b004      	add	sp, #16
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	46c0      	nop			@ (mov r8, r8)
 800aa1c:	ffceff88 	.word	0xffceff88
 800aa20:	ffff00ff 	.word	0xffff00ff

0800aa24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b0c      	cmp	r3, #12
 800aa36:	d01e      	beq.n	800aa76 <HAL_TIM_ReadCapturedValue+0x52>
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2b0c      	cmp	r3, #12
 800aa3c:	d820      	bhi.n	800aa80 <HAL_TIM_ReadCapturedValue+0x5c>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b08      	cmp	r3, #8
 800aa42:	d013      	beq.n	800aa6c <HAL_TIM_ReadCapturedValue+0x48>
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b08      	cmp	r3, #8
 800aa48:	d81a      	bhi.n	800aa80 <HAL_TIM_ReadCapturedValue+0x5c>
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <HAL_TIM_ReadCapturedValue+0x34>
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d005      	beq.n	800aa62 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800aa56:	e013      	b.n	800aa80 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa5e:	60fb      	str	r3, [r7, #12]
      break;
 800aa60:	e00f      	b.n	800aa82 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa68:	60fb      	str	r3, [r7, #12]
      break;
 800aa6a:	e00a      	b.n	800aa82 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa72:	60fb      	str	r3, [r7, #12]
      break;
 800aa74:	e005      	b.n	800aa82 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7c:	60fb      	str	r3, [r7, #12]
      break;
 800aa7e:	e000      	b.n	800aa82 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800aa80:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800aa82:	68fb      	ldr	r3, [r7, #12]
}
 800aa84:	0018      	movs	r0, r3
 800aa86:	46bd      	mov	sp, r7
 800aa88:	b004      	add	sp, #16
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa94:	46c0      	nop			@ (mov r8, r8)
 800aa96:	46bd      	mov	sp, r7
 800aa98:	b002      	add	sp, #8
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800aaa4:	46c0      	nop			@ (mov r8, r8)
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	b002      	add	sp, #8
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aab4:	46c0      	nop			@ (mov r8, r8)
 800aab6:	46bd      	mov	sp, r7
 800aab8:	b002      	add	sp, #8
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aac4:	46c0      	nop			@ (mov r8, r8)
 800aac6:	46bd      	mov	sp, r7
 800aac8:	b002      	add	sp, #8
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800aad4:	46c0      	nop			@ (mov r8, r8)
 800aad6:	46bd      	mov	sp, r7
 800aad8:	b002      	add	sp, #8
 800aada:	bd80      	pop	{r7, pc}

0800aadc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aae4:	46c0      	nop			@ (mov r8, r8)
 800aae6:	46bd      	mov	sp, r7
 800aae8:	b002      	add	sp, #8
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800aaf4:	46c0      	nop			@ (mov r8, r8)
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	b002      	add	sp, #8
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab04:	46c0      	nop			@ (mov r8, r8)
 800ab06:	46bd      	mov	sp, r7
 800ab08:	b002      	add	sp, #8
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ab14:	46c0      	nop			@ (mov r8, r8)
 800ab16:	46bd      	mov	sp, r7
 800ab18:	b002      	add	sp, #8
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ab24:	46c0      	nop			@ (mov r8, r8)
 800ab26:	46bd      	mov	sp, r7
 800ab28:	b002      	add	sp, #8
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	607a      	str	r2, [r7, #4]
 800ab36:	230b      	movs	r3, #11
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	1c0a      	adds	r2, r1, #0
 800ab3c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab3e:	2317      	movs	r3, #23
 800ab40:	18fb      	adds	r3, r7, r3
 800ab42:	2200      	movs	r2, #0
 800ab44:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e0ea      	b.n	800ad26 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	223d      	movs	r2, #61	@ 0x3d
 800ab54:	5c9b      	ldrb	r3, [r3, r2]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d000      	beq.n	800ab5e <HAL_TIM_RegisterCallback+0x32>
 800ab5c:	e08e      	b.n	800ac7c <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ab5e:	230b      	movs	r3, #11
 800ab60:	18fb      	adds	r3, r7, r3
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b1b      	cmp	r3, #27
 800ab66:	d900      	bls.n	800ab6a <HAL_TIM_RegisterCallback+0x3e>
 800ab68:	e083      	b.n	800ac72 <HAL_TIM_RegisterCallback+0x146>
 800ab6a:	009a      	lsls	r2, r3, #2
 800ab6c:	4b70      	ldr	r3, [pc, #448]	@ (800ad30 <HAL_TIM_RegisterCallback+0x204>)
 800ab6e:	18d3      	adds	r3, r2, r3
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ab7a:	e0d1      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ab82:	e0cd      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ab8a:	e0c9      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ab92:	e0c5      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ab9a:	e0c1      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800aba2:	e0bd      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800abaa:	e0b9      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800abb2:	e0b5      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800abba:	e0b1      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800abc2:	e0ad      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800abca:	e0a9      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800abd2:	e0a5      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800abda:	e0a1      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2180      	movs	r1, #128	@ 0x80
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	505a      	str	r2, [r3, r1]
        break;
 800abe4:	e09c      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2184      	movs	r1, #132	@ 0x84
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	505a      	str	r2, [r3, r1]
        break;
 800abee:	e097      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2188      	movs	r1, #136	@ 0x88
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	505a      	str	r2, [r3, r1]
        break;
 800abf8:	e092      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	218c      	movs	r1, #140	@ 0x8c
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	505a      	str	r2, [r3, r1]
        break;
 800ac02:	e08d      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2190      	movs	r1, #144	@ 0x90
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	505a      	str	r2, [r3, r1]
        break;
 800ac0c:	e088      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2194      	movs	r1, #148	@ 0x94
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	505a      	str	r2, [r3, r1]
        break;
 800ac16:	e083      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2198      	movs	r1, #152	@ 0x98
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	505a      	str	r2, [r3, r1]
        break;
 800ac20:	e07e      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	219c      	movs	r1, #156	@ 0x9c
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	505a      	str	r2, [r3, r1]
        break;
 800ac2a:	e079      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	21a0      	movs	r1, #160	@ 0xa0
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	505a      	str	r2, [r3, r1]
        break;
 800ac34:	e074      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	21a4      	movs	r1, #164	@ 0xa4
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	505a      	str	r2, [r3, r1]
        break;
 800ac3e:	e06f      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	21a8      	movs	r1, #168	@ 0xa8
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	505a      	str	r2, [r3, r1]
        break;
 800ac48:	e06a      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	21ac      	movs	r1, #172	@ 0xac
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	505a      	str	r2, [r3, r1]
        break;
 800ac52:	e065      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	21b0      	movs	r1, #176	@ 0xb0
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	505a      	str	r2, [r3, r1]
        break;
 800ac5c:	e060      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	21b4      	movs	r1, #180	@ 0xb4
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	505a      	str	r2, [r3, r1]
        break;
 800ac66:	e05b      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	21b8      	movs	r1, #184	@ 0xb8
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	505a      	str	r2, [r3, r1]
        break;
 800ac70:	e056      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ac72:	2317      	movs	r3, #23
 800ac74:	18fb      	adds	r3, r7, r3
 800ac76:	2201      	movs	r2, #1
 800ac78:	701a      	strb	r2, [r3, #0]
        break;
 800ac7a:	e051      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	223d      	movs	r2, #61	@ 0x3d
 800ac80:	5c9b      	ldrb	r3, [r3, r2]
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d147      	bne.n	800ad18 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800ac88:	230b      	movs	r3, #11
 800ac8a:	18fb      	adds	r3, r7, r3
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b0d      	cmp	r3, #13
 800ac90:	d83d      	bhi.n	800ad0e <HAL_TIM_RegisterCallback+0x1e2>
 800ac92:	009a      	lsls	r2, r3, #2
 800ac94:	4b27      	ldr	r3, [pc, #156]	@ (800ad34 <HAL_TIM_RegisterCallback+0x208>)
 800ac96:	18d3      	adds	r3, r2, r3
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800aca2:	e03d      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800acaa:	e039      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800acb2:	e035      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800acba:	e031      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800acc2:	e02d      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800acca:	e029      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800acd2:	e025      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800acda:	e021      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ace2:	e01d      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800acea:	e019      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800acf2:	e015      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800acfa:	e011      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ad02:	e00d      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2180      	movs	r1, #128	@ 0x80
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	505a      	str	r2, [r3, r1]
        break;
 800ad0c:	e008      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ad0e:	2317      	movs	r3, #23
 800ad10:	18fb      	adds	r3, r7, r3
 800ad12:	2201      	movs	r2, #1
 800ad14:	701a      	strb	r2, [r3, #0]
        break;
 800ad16:	e003      	b.n	800ad20 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800ad18:	2317      	movs	r3, #23
 800ad1a:	18fb      	adds	r3, r7, r3
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ad20:	2317      	movs	r3, #23
 800ad22:	18fb      	adds	r3, r7, r3
 800ad24:	781b      	ldrb	r3, [r3, #0]
}
 800ad26:	0018      	movs	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b006      	add	sp, #24
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	46c0      	nop			@ (mov r8, r8)
 800ad30:	0800dcd4 	.word	0x0800dcd4
 800ad34:	0800dd44 	.word	0x0800dd44

0800ad38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a37      	ldr	r2, [pc, #220]	@ (800ae28 <TIM_Base_SetConfig+0xf0>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d008      	beq.n	800ad62 <TIM_Base_SetConfig+0x2a>
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	2380      	movs	r3, #128	@ 0x80
 800ad54:	05db      	lsls	r3, r3, #23
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d003      	beq.n	800ad62 <TIM_Base_SetConfig+0x2a>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a33      	ldr	r2, [pc, #204]	@ (800ae2c <TIM_Base_SetConfig+0xf4>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d108      	bne.n	800ad74 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2270      	movs	r2, #112	@ 0x70
 800ad66:	4393      	bics	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a2c      	ldr	r2, [pc, #176]	@ (800ae28 <TIM_Base_SetConfig+0xf0>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d014      	beq.n	800ada6 <TIM_Base_SetConfig+0x6e>
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	2380      	movs	r3, #128	@ 0x80
 800ad80:	05db      	lsls	r3, r3, #23
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d00f      	beq.n	800ada6 <TIM_Base_SetConfig+0x6e>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a28      	ldr	r2, [pc, #160]	@ (800ae2c <TIM_Base_SetConfig+0xf4>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00b      	beq.n	800ada6 <TIM_Base_SetConfig+0x6e>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a27      	ldr	r2, [pc, #156]	@ (800ae30 <TIM_Base_SetConfig+0xf8>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d007      	beq.n	800ada6 <TIM_Base_SetConfig+0x6e>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a26      	ldr	r2, [pc, #152]	@ (800ae34 <TIM_Base_SetConfig+0xfc>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d003      	beq.n	800ada6 <TIM_Base_SetConfig+0x6e>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a25      	ldr	r2, [pc, #148]	@ (800ae38 <TIM_Base_SetConfig+0x100>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d108      	bne.n	800adb8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	4a24      	ldr	r2, [pc, #144]	@ (800ae3c <TIM_Base_SetConfig+0x104>)
 800adaa:	4013      	ands	r3, r2
 800adac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2280      	movs	r2, #128	@ 0x80
 800adbc:	4393      	bics	r3, r2
 800adbe:	001a      	movs	r2, r3
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a11      	ldr	r2, [pc, #68]	@ (800ae28 <TIM_Base_SetConfig+0xf0>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d007      	beq.n	800adf6 <TIM_Base_SetConfig+0xbe>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a12      	ldr	r2, [pc, #72]	@ (800ae34 <TIM_Base_SetConfig+0xfc>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d003      	beq.n	800adf6 <TIM_Base_SetConfig+0xbe>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a11      	ldr	r2, [pc, #68]	@ (800ae38 <TIM_Base_SetConfig+0x100>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d103      	bne.n	800adfe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	691a      	ldr	r2, [r3, #16]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d106      	bne.n	800ae1e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	2201      	movs	r2, #1
 800ae16:	4393      	bics	r3, r2
 800ae18:	001a      	movs	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	611a      	str	r2, [r3, #16]
  }
}
 800ae1e:	46c0      	nop			@ (mov r8, r8)
 800ae20:	46bd      	mov	sp, r7
 800ae22:	b004      	add	sp, #16
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	46c0      	nop			@ (mov r8, r8)
 800ae28:	40012c00 	.word	0x40012c00
 800ae2c:	40000400 	.word	0x40000400
 800ae30:	40002000 	.word	0x40002000
 800ae34:	40014400 	.word	0x40014400
 800ae38:	40014800 	.word	0x40014800
 800ae3c:	fffffcff 	.word	0xfffffcff

0800ae40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	2201      	movs	r2, #1
 800ae56:	4393      	bics	r3, r2
 800ae58:	001a      	movs	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4a2e      	ldr	r2, [pc, #184]	@ (800af28 <TIM_OC1_SetConfig+0xe8>)
 800ae6e:	4013      	ands	r3, r2
 800ae70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2203      	movs	r2, #3
 800ae76:	4393      	bics	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2202      	movs	r2, #2
 800ae88:	4393      	bics	r3, r2
 800ae8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a24      	ldr	r2, [pc, #144]	@ (800af2c <TIM_OC1_SetConfig+0xec>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d007      	beq.n	800aeae <TIM_OC1_SetConfig+0x6e>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a23      	ldr	r2, [pc, #140]	@ (800af30 <TIM_OC1_SetConfig+0xf0>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d003      	beq.n	800aeae <TIM_OC1_SetConfig+0x6e>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a22      	ldr	r2, [pc, #136]	@ (800af34 <TIM_OC1_SetConfig+0xf4>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d10c      	bne.n	800aec8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2208      	movs	r2, #8
 800aeb2:	4393      	bics	r3, r2
 800aeb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2204      	movs	r2, #4
 800aec4:	4393      	bics	r3, r2
 800aec6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a18      	ldr	r2, [pc, #96]	@ (800af2c <TIM_OC1_SetConfig+0xec>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d007      	beq.n	800aee0 <TIM_OC1_SetConfig+0xa0>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a17      	ldr	r2, [pc, #92]	@ (800af30 <TIM_OC1_SetConfig+0xf0>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d003      	beq.n	800aee0 <TIM_OC1_SetConfig+0xa0>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a16      	ldr	r2, [pc, #88]	@ (800af34 <TIM_OC1_SetConfig+0xf4>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d111      	bne.n	800af04 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	4a15      	ldr	r2, [pc, #84]	@ (800af38 <TIM_OC1_SetConfig+0xf8>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	4a14      	ldr	r2, [pc, #80]	@ (800af3c <TIM_OC1_SetConfig+0xfc>)
 800aeec:	4013      	ands	r3, r2
 800aeee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	4313      	orrs	r3, r2
 800af02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	621a      	str	r2, [r3, #32]
}
 800af1e:	46c0      	nop			@ (mov r8, r8)
 800af20:	46bd      	mov	sp, r7
 800af22:	b006      	add	sp, #24
 800af24:	bd80      	pop	{r7, pc}
 800af26:	46c0      	nop			@ (mov r8, r8)
 800af28:	fffeff8f 	.word	0xfffeff8f
 800af2c:	40012c00 	.word	0x40012c00
 800af30:	40014400 	.word	0x40014400
 800af34:	40014800 	.word	0x40014800
 800af38:	fffffeff 	.word	0xfffffeff
 800af3c:	fffffdff 	.word	0xfffffdff

0800af40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	2210      	movs	r2, #16
 800af56:	4393      	bics	r3, r2
 800af58:	001a      	movs	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	4a2c      	ldr	r2, [pc, #176]	@ (800b020 <TIM_OC2_SetConfig+0xe0>)
 800af6e:	4013      	ands	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	4a2b      	ldr	r2, [pc, #172]	@ (800b024 <TIM_OC2_SetConfig+0xe4>)
 800af76:	4013      	ands	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2220      	movs	r2, #32
 800af8a:	4393      	bics	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	4313      	orrs	r3, r2
 800af98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a22      	ldr	r2, [pc, #136]	@ (800b028 <TIM_OC2_SetConfig+0xe8>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d10d      	bne.n	800afbe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2280      	movs	r2, #128	@ 0x80
 800afa6:	4393      	bics	r3, r2
 800afa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2240      	movs	r2, #64	@ 0x40
 800afba:	4393      	bics	r3, r2
 800afbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a19      	ldr	r2, [pc, #100]	@ (800b028 <TIM_OC2_SetConfig+0xe8>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d007      	beq.n	800afd6 <TIM_OC2_SetConfig+0x96>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a18      	ldr	r2, [pc, #96]	@ (800b02c <TIM_OC2_SetConfig+0xec>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d003      	beq.n	800afd6 <TIM_OC2_SetConfig+0x96>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a17      	ldr	r2, [pc, #92]	@ (800b030 <TIM_OC2_SetConfig+0xf0>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d113      	bne.n	800affe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	4a16      	ldr	r2, [pc, #88]	@ (800b034 <TIM_OC2_SetConfig+0xf4>)
 800afda:	4013      	ands	r3, r2
 800afdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	4a15      	ldr	r2, [pc, #84]	@ (800b038 <TIM_OC2_SetConfig+0xf8>)
 800afe2:	4013      	ands	r3, r2
 800afe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	4313      	orrs	r3, r2
 800aff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	4313      	orrs	r3, r2
 800affc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	621a      	str	r2, [r3, #32]
}
 800b018:	46c0      	nop			@ (mov r8, r8)
 800b01a:	46bd      	mov	sp, r7
 800b01c:	b006      	add	sp, #24
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	feff8fff 	.word	0xfeff8fff
 800b024:	fffffcff 	.word	0xfffffcff
 800b028:	40012c00 	.word	0x40012c00
 800b02c:	40014400 	.word	0x40014400
 800b030:	40014800 	.word	0x40014800
 800b034:	fffffbff 	.word	0xfffffbff
 800b038:	fffff7ff 	.word	0xfffff7ff

0800b03c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a1b      	ldr	r3, [r3, #32]
 800b050:	4a31      	ldr	r2, [pc, #196]	@ (800b118 <TIM_OC3_SetConfig+0xdc>)
 800b052:	401a      	ands	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	69db      	ldr	r3, [r3, #28]
 800b062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4a2d      	ldr	r2, [pc, #180]	@ (800b11c <TIM_OC3_SetConfig+0xe0>)
 800b068:	4013      	ands	r3, r2
 800b06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2203      	movs	r2, #3
 800b070:	4393      	bics	r3, r2
 800b072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	4a27      	ldr	r2, [pc, #156]	@ (800b120 <TIM_OC3_SetConfig+0xe4>)
 800b082:	4013      	ands	r3, r2
 800b084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	021b      	lsls	r3, r3, #8
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	4313      	orrs	r3, r2
 800b090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a23      	ldr	r2, [pc, #140]	@ (800b124 <TIM_OC3_SetConfig+0xe8>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d10d      	bne.n	800b0b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	4a22      	ldr	r2, [pc, #136]	@ (800b128 <TIM_OC3_SetConfig+0xec>)
 800b09e:	4013      	ands	r3, r2
 800b0a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	021b      	lsls	r3, r3, #8
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	4a1e      	ldr	r2, [pc, #120]	@ (800b12c <TIM_OC3_SetConfig+0xf0>)
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a1a      	ldr	r2, [pc, #104]	@ (800b124 <TIM_OC3_SetConfig+0xe8>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d007      	beq.n	800b0ce <TIM_OC3_SetConfig+0x92>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a1b      	ldr	r2, [pc, #108]	@ (800b130 <TIM_OC3_SetConfig+0xf4>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d003      	beq.n	800b0ce <TIM_OC3_SetConfig+0x92>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a1a      	ldr	r2, [pc, #104]	@ (800b134 <TIM_OC3_SetConfig+0xf8>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d113      	bne.n	800b0f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	4a19      	ldr	r2, [pc, #100]	@ (800b138 <TIM_OC3_SetConfig+0xfc>)
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	4a18      	ldr	r2, [pc, #96]	@ (800b13c <TIM_OC3_SetConfig+0x100>)
 800b0da:	4013      	ands	r3, r2
 800b0dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	621a      	str	r2, [r3, #32]
}
 800b110:	46c0      	nop			@ (mov r8, r8)
 800b112:	46bd      	mov	sp, r7
 800b114:	b006      	add	sp, #24
 800b116:	bd80      	pop	{r7, pc}
 800b118:	fffffeff 	.word	0xfffffeff
 800b11c:	fffeff8f 	.word	0xfffeff8f
 800b120:	fffffdff 	.word	0xfffffdff
 800b124:	40012c00 	.word	0x40012c00
 800b128:	fffff7ff 	.word	0xfffff7ff
 800b12c:	fffffbff 	.word	0xfffffbff
 800b130:	40014400 	.word	0x40014400
 800b134:	40014800 	.word	0x40014800
 800b138:	ffffefff 	.word	0xffffefff
 800b13c:	ffffdfff 	.word	0xffffdfff

0800b140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	4a24      	ldr	r2, [pc, #144]	@ (800b1e8 <TIM_OC4_SetConfig+0xa8>)
 800b156:	401a      	ands	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4a20      	ldr	r2, [pc, #128]	@ (800b1ec <TIM_OC4_SetConfig+0xac>)
 800b16c:	4013      	ands	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4a1f      	ldr	r2, [pc, #124]	@ (800b1f0 <TIM_OC4_SetConfig+0xb0>)
 800b174:	4013      	ands	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	4a1b      	ldr	r2, [pc, #108]	@ (800b1f4 <TIM_OC4_SetConfig+0xb4>)
 800b188:	4013      	ands	r3, r2
 800b18a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	031b      	lsls	r3, r3, #12
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	4313      	orrs	r3, r2
 800b196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a17      	ldr	r2, [pc, #92]	@ (800b1f8 <TIM_OC4_SetConfig+0xb8>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d007      	beq.n	800b1b0 <TIM_OC4_SetConfig+0x70>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a16      	ldr	r2, [pc, #88]	@ (800b1fc <TIM_OC4_SetConfig+0xbc>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d003      	beq.n	800b1b0 <TIM_OC4_SetConfig+0x70>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a15      	ldr	r2, [pc, #84]	@ (800b200 <TIM_OC4_SetConfig+0xc0>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d109      	bne.n	800b1c4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	4a14      	ldr	r2, [pc, #80]	@ (800b204 <TIM_OC4_SetConfig+0xc4>)
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	019b      	lsls	r3, r3, #6
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	621a      	str	r2, [r3, #32]
}
 800b1de:	46c0      	nop			@ (mov r8, r8)
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	b006      	add	sp, #24
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	46c0      	nop			@ (mov r8, r8)
 800b1e8:	ffffefff 	.word	0xffffefff
 800b1ec:	feff8fff 	.word	0xfeff8fff
 800b1f0:	fffffcff 	.word	0xfffffcff
 800b1f4:	ffffdfff 	.word	0xffffdfff
 800b1f8:	40012c00 	.word	0x40012c00
 800b1fc:	40014400 	.word	0x40014400
 800b200:	40014800 	.word	0x40014800
 800b204:	ffffbfff 	.word	0xffffbfff

0800b208 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a1b      	ldr	r3, [r3, #32]
 800b21c:	4a21      	ldr	r2, [pc, #132]	@ (800b2a4 <TIM_OC5_SetConfig+0x9c>)
 800b21e:	401a      	ands	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4a1d      	ldr	r2, [pc, #116]	@ (800b2a8 <TIM_OC5_SetConfig+0xa0>)
 800b234:	4013      	ands	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	4a19      	ldr	r2, [pc, #100]	@ (800b2ac <TIM_OC5_SetConfig+0xa4>)
 800b246:	4013      	ands	r3, r2
 800b248:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	041b      	lsls	r3, r3, #16
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a15      	ldr	r2, [pc, #84]	@ (800b2b0 <TIM_OC5_SetConfig+0xa8>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d007      	beq.n	800b26e <TIM_OC5_SetConfig+0x66>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a14      	ldr	r2, [pc, #80]	@ (800b2b4 <TIM_OC5_SetConfig+0xac>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d003      	beq.n	800b26e <TIM_OC5_SetConfig+0x66>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a13      	ldr	r2, [pc, #76]	@ (800b2b8 <TIM_OC5_SetConfig+0xb0>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d109      	bne.n	800b282 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	4a0c      	ldr	r2, [pc, #48]	@ (800b2a4 <TIM_OC5_SetConfig+0x9c>)
 800b272:	4013      	ands	r3, r2
 800b274:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	021b      	lsls	r3, r3, #8
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	4313      	orrs	r3, r2
 800b280:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	697a      	ldr	r2, [r7, #20]
 800b286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	621a      	str	r2, [r3, #32]
}
 800b29c:	46c0      	nop			@ (mov r8, r8)
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	b006      	add	sp, #24
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	fffeffff 	.word	0xfffeffff
 800b2a8:	fffeff8f 	.word	0xfffeff8f
 800b2ac:	fffdffff 	.word	0xfffdffff
 800b2b0:	40012c00 	.word	0x40012c00
 800b2b4:	40014400 	.word	0x40014400
 800b2b8:	40014800 	.word	0x40014800

0800b2bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	4a22      	ldr	r2, [pc, #136]	@ (800b35c <TIM_OC6_SetConfig+0xa0>)
 800b2d2:	401a      	ands	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4a1e      	ldr	r2, [pc, #120]	@ (800b360 <TIM_OC6_SetConfig+0xa4>)
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	021b      	lsls	r3, r3, #8
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	4a1a      	ldr	r2, [pc, #104]	@ (800b364 <TIM_OC6_SetConfig+0xa8>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	051b      	lsls	r3, r3, #20
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	4313      	orrs	r3, r2
 800b30a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a16      	ldr	r2, [pc, #88]	@ (800b368 <TIM_OC6_SetConfig+0xac>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d007      	beq.n	800b324 <TIM_OC6_SetConfig+0x68>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a15      	ldr	r2, [pc, #84]	@ (800b36c <TIM_OC6_SetConfig+0xb0>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d003      	beq.n	800b324 <TIM_OC6_SetConfig+0x68>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a14      	ldr	r2, [pc, #80]	@ (800b370 <TIM_OC6_SetConfig+0xb4>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d109      	bne.n	800b338 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	4a13      	ldr	r2, [pc, #76]	@ (800b374 <TIM_OC6_SetConfig+0xb8>)
 800b328:	4013      	ands	r3, r2
 800b32a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	029b      	lsls	r3, r3, #10
 800b332:	697a      	ldr	r2, [r7, #20]
 800b334:	4313      	orrs	r3, r2
 800b336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	621a      	str	r2, [r3, #32]
}
 800b352:	46c0      	nop			@ (mov r8, r8)
 800b354:	46bd      	mov	sp, r7
 800b356:	b006      	add	sp, #24
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	46c0      	nop			@ (mov r8, r8)
 800b35c:	ffefffff 	.word	0xffefffff
 800b360:	feff8fff 	.word	0xfeff8fff
 800b364:	ffdfffff 	.word	0xffdfffff
 800b368:	40012c00 	.word	0x40012c00
 800b36c:	40014400 	.word	0x40014400
 800b370:	40014800 	.word	0x40014800
 800b374:	fffbffff 	.word	0xfffbffff

0800b378 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	2201      	movs	r2, #1
 800b392:	4393      	bics	r3, r2
 800b394:	001a      	movs	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b41c <TIM_TI1_SetConfig+0xa4>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d008      	beq.n	800b3ba <TIM_TI1_SetConfig+0x42>
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	2380      	movs	r3, #128	@ 0x80
 800b3ac:	05db      	lsls	r3, r3, #23
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d003      	beq.n	800b3ba <TIM_TI1_SetConfig+0x42>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	4a1a      	ldr	r2, [pc, #104]	@ (800b420 <TIM_TI1_SetConfig+0xa8>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d101      	bne.n	800b3be <TIM_TI1_SetConfig+0x46>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e000      	b.n	800b3c0 <TIM_TI1_SetConfig+0x48>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d008      	beq.n	800b3d6 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2203      	movs	r2, #3
 800b3c8:	4393      	bics	r3, r2
 800b3ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	617b      	str	r3, [r7, #20]
 800b3d4:	e003      	b.n	800b3de <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	22f0      	movs	r2, #240	@ 0xf0
 800b3e2:	4393      	bics	r3, r2
 800b3e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	011b      	lsls	r3, r3, #4
 800b3ea:	22ff      	movs	r2, #255	@ 0xff
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	220a      	movs	r2, #10
 800b3f8:	4393      	bics	r3, r2
 800b3fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	220a      	movs	r2, #10
 800b400:	4013      	ands	r3, r2
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	4313      	orrs	r3, r2
 800b406:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	621a      	str	r2, [r3, #32]
}
 800b414:	46c0      	nop			@ (mov r8, r8)
 800b416:	46bd      	mov	sp, r7
 800b418:	b006      	add	sp, #24
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	40012c00 	.word	0x40012c00
 800b420:	40000400 	.word	0x40000400

0800b424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	2201      	movs	r2, #1
 800b43c:	4393      	bics	r3, r2
 800b43e:	001a      	movs	r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	699b      	ldr	r3, [r3, #24]
 800b448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	22f0      	movs	r2, #240	@ 0xf0
 800b44e:	4393      	bics	r3, r2
 800b450:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	011b      	lsls	r3, r3, #4
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	4313      	orrs	r3, r2
 800b45a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	220a      	movs	r2, #10
 800b460:	4393      	bics	r3, r2
 800b462:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b464:	697a      	ldr	r2, [r7, #20]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	621a      	str	r2, [r3, #32]
}
 800b478:	46c0      	nop			@ (mov r8, r8)
 800b47a:	46bd      	mov	sp, r7
 800b47c:	b006      	add	sp, #24
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
 800b48c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6a1b      	ldr	r3, [r3, #32]
 800b498:	2210      	movs	r2, #16
 800b49a:	4393      	bics	r3, r2
 800b49c:	001a      	movs	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	4a14      	ldr	r2, [pc, #80]	@ (800b4fc <TIM_TI2_SetConfig+0x7c>)
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	4a10      	ldr	r2, [pc, #64]	@ (800b500 <TIM_TI2_SetConfig+0x80>)
 800b4be:	4013      	ands	r3, r2
 800b4c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	031b      	lsls	r3, r3, #12
 800b4c6:	041b      	lsls	r3, r3, #16
 800b4c8:	0c1b      	lsrs	r3, r3, #16
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	22a0      	movs	r2, #160	@ 0xa0
 800b4d4:	4393      	bics	r3, r2
 800b4d6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	011b      	lsls	r3, r3, #4
 800b4dc:	22a0      	movs	r2, #160	@ 0xa0
 800b4de:	4013      	ands	r3, r2
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	621a      	str	r2, [r3, #32]
}
 800b4f2:	46c0      	nop			@ (mov r8, r8)
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	b006      	add	sp, #24
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	46c0      	nop			@ (mov r8, r8)
 800b4fc:	fffffcff 	.word	0xfffffcff
 800b500:	ffff0fff 	.word	0xffff0fff

0800b504 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6a1b      	ldr	r3, [r3, #32]
 800b514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	2210      	movs	r2, #16
 800b51c:	4393      	bics	r3, r2
 800b51e:	001a      	movs	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	4a0d      	ldr	r2, [pc, #52]	@ (800b564 <TIM_TI2_ConfigInputStage+0x60>)
 800b52e:	4013      	ands	r3, r2
 800b530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	031b      	lsls	r3, r3, #12
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	4313      	orrs	r3, r2
 800b53a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	22a0      	movs	r2, #160	@ 0xa0
 800b540:	4393      	bics	r3, r2
 800b542:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	621a      	str	r2, [r3, #32]
}
 800b55a:	46c0      	nop			@ (mov r8, r8)
 800b55c:	46bd      	mov	sp, r7
 800b55e:	b006      	add	sp, #24
 800b560:	bd80      	pop	{r7, pc}
 800b562:	46c0      	nop			@ (mov r8, r8)
 800b564:	ffff0fff 	.word	0xffff0fff

0800b568 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6a1b      	ldr	r3, [r3, #32]
 800b580:	4a17      	ldr	r2, [pc, #92]	@ (800b5e0 <TIM_TI3_SetConfig+0x78>)
 800b582:	401a      	ands	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	69db      	ldr	r3, [r3, #28]
 800b58c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	2203      	movs	r2, #3
 800b592:	4393      	bics	r3, r2
 800b594:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	22f0      	movs	r2, #240	@ 0xf0
 800b5a2:	4393      	bics	r3, r2
 800b5a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	011b      	lsls	r3, r3, #4
 800b5aa:	22ff      	movs	r2, #255	@ 0xff
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	4a0b      	ldr	r2, [pc, #44]	@ (800b5e4 <TIM_TI3_SetConfig+0x7c>)
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	021a      	lsls	r2, r3, #8
 800b5c0:	23a0      	movs	r3, #160	@ 0xa0
 800b5c2:	011b      	lsls	r3, r3, #4
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	621a      	str	r2, [r3, #32]
}
 800b5d8:	46c0      	nop			@ (mov r8, r8)
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	b006      	add	sp, #24
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	fffffeff 	.word	0xfffffeff
 800b5e4:	fffff5ff 	.word	0xfffff5ff

0800b5e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6a1b      	ldr	r3, [r3, #32]
 800b600:	4a18      	ldr	r2, [pc, #96]	@ (800b664 <TIM_TI4_SetConfig+0x7c>)
 800b602:	401a      	ands	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	4a15      	ldr	r2, [pc, #84]	@ (800b668 <TIM_TI4_SetConfig+0x80>)
 800b612:	4013      	ands	r3, r2
 800b614:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	021b      	lsls	r3, r3, #8
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	4a12      	ldr	r2, [pc, #72]	@ (800b66c <TIM_TI4_SetConfig+0x84>)
 800b624:	4013      	ands	r3, r2
 800b626:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	031b      	lsls	r3, r3, #12
 800b62c:	041b      	lsls	r3, r3, #16
 800b62e:	0c1b      	lsrs	r3, r3, #16
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	4313      	orrs	r3, r2
 800b634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	4a0d      	ldr	r2, [pc, #52]	@ (800b670 <TIM_TI4_SetConfig+0x88>)
 800b63a:	4013      	ands	r3, r2
 800b63c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	031a      	lsls	r2, r3, #12
 800b642:	23a0      	movs	r3, #160	@ 0xa0
 800b644:	021b      	lsls	r3, r3, #8
 800b646:	4013      	ands	r3, r2
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	621a      	str	r2, [r3, #32]
}
 800b65a:	46c0      	nop			@ (mov r8, r8)
 800b65c:	46bd      	mov	sp, r7
 800b65e:	b006      	add	sp, #24
 800b660:	bd80      	pop	{r7, pc}
 800b662:	46c0      	nop			@ (mov r8, r8)
 800b664:	ffffefff 	.word	0xffffefff
 800b668:	fffffcff 	.word	0xfffffcff
 800b66c:	ffff0fff 	.word	0xffff0fff
 800b670:	ffff5fff 	.word	0xffff5fff

0800b674 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4a08      	ldr	r2, [pc, #32]	@ (800b6a8 <TIM_ITRx_SetConfig+0x34>)
 800b688:	4013      	ands	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	4313      	orrs	r3, r2
 800b692:	2207      	movs	r2, #7
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	609a      	str	r2, [r3, #8]
}
 800b69e:	46c0      	nop			@ (mov r8, r8)
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	b004      	add	sp, #16
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	46c0      	nop			@ (mov r8, r8)
 800b6a8:	ffcfff8f 	.word	0xffcfff8f

0800b6ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
 800b6b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	4a09      	ldr	r2, [pc, #36]	@ (800b6e8 <TIM_ETR_SetConfig+0x3c>)
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	021a      	lsls	r2, r3, #8
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	609a      	str	r2, [r3, #8]
}
 800b6e0:	46c0      	nop			@ (mov r8, r8)
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	b006      	add	sp, #24
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	ffff00ff 	.word	0xffff00ff

0800b6ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	221f      	movs	r2, #31
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	2201      	movs	r2, #1
 800b700:	409a      	lsls	r2, r3
 800b702:	0013      	movs	r3, r2
 800b704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	43d2      	mvns	r2, r2
 800b70e:	401a      	ands	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6a1a      	ldr	r2, [r3, #32]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	211f      	movs	r1, #31
 800b71c:	400b      	ands	r3, r1
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	4099      	lsls	r1, r3
 800b722:	000b      	movs	r3, r1
 800b724:	431a      	orrs	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	621a      	str	r2, [r3, #32]
}
 800b72a:	46c0      	nop			@ (mov r8, r8)
 800b72c:	46bd      	mov	sp, r7
 800b72e:	b006      	add	sp, #24
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2184      	movs	r1, #132	@ 0x84
 800b740:	4a1c      	ldr	r2, [pc, #112]	@ (800b7b4 <TIM_ResetCallback+0x80>)
 800b742:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2188      	movs	r1, #136	@ 0x88
 800b748:	4a1b      	ldr	r2, [pc, #108]	@ (800b7b8 <TIM_ResetCallback+0x84>)
 800b74a:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	218c      	movs	r1, #140	@ 0x8c
 800b750:	4a1a      	ldr	r2, [pc, #104]	@ (800b7bc <TIM_ResetCallback+0x88>)
 800b752:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2190      	movs	r1, #144	@ 0x90
 800b758:	4a19      	ldr	r2, [pc, #100]	@ (800b7c0 <TIM_ResetCallback+0x8c>)
 800b75a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2194      	movs	r1, #148	@ 0x94
 800b760:	4a18      	ldr	r2, [pc, #96]	@ (800b7c4 <TIM_ResetCallback+0x90>)
 800b762:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2198      	movs	r1, #152	@ 0x98
 800b768:	4a17      	ldr	r2, [pc, #92]	@ (800b7c8 <TIM_ResetCallback+0x94>)
 800b76a:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	219c      	movs	r1, #156	@ 0x9c
 800b770:	4a16      	ldr	r2, [pc, #88]	@ (800b7cc <TIM_ResetCallback+0x98>)
 800b772:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	21a0      	movs	r1, #160	@ 0xa0
 800b778:	4a15      	ldr	r2, [pc, #84]	@ (800b7d0 <TIM_ResetCallback+0x9c>)
 800b77a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	21a4      	movs	r1, #164	@ 0xa4
 800b780:	4a14      	ldr	r2, [pc, #80]	@ (800b7d4 <TIM_ResetCallback+0xa0>)
 800b782:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	21a8      	movs	r1, #168	@ 0xa8
 800b788:	4a13      	ldr	r2, [pc, #76]	@ (800b7d8 <TIM_ResetCallback+0xa4>)
 800b78a:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	21ac      	movs	r1, #172	@ 0xac
 800b790:	4a12      	ldr	r2, [pc, #72]	@ (800b7dc <TIM_ResetCallback+0xa8>)
 800b792:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	21b0      	movs	r1, #176	@ 0xb0
 800b798:	4a11      	ldr	r2, [pc, #68]	@ (800b7e0 <TIM_ResetCallback+0xac>)
 800b79a:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	21b4      	movs	r1, #180	@ 0xb4
 800b7a0:	4a10      	ldr	r2, [pc, #64]	@ (800b7e4 <TIM_ResetCallback+0xb0>)
 800b7a2:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	21b8      	movs	r1, #184	@ 0xb8
 800b7a8:	4a0f      	ldr	r2, [pc, #60]	@ (800b7e8 <TIM_ResetCallback+0xb4>)
 800b7aa:	505a      	str	r2, [r3, r1]
}
 800b7ac:	46c0      	nop			@ (mov r8, r8)
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	b002      	add	sp, #8
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	0800aa8d 	.word	0x0800aa8d
 800b7b8:	0800aa9d 	.word	0x0800aa9d
 800b7bc:	0800aafd 	.word	0x0800aafd
 800b7c0:	0800ab0d 	.word	0x0800ab0d
 800b7c4:	0800aabd 	.word	0x0800aabd
 800b7c8:	0800aacd 	.word	0x0800aacd
 800b7cc:	0800aaad 	.word	0x0800aaad
 800b7d0:	0800aadd 	.word	0x0800aadd
 800b7d4:	0800aaed 	.word	0x0800aaed
 800b7d8:	0800ab1d 	.word	0x0800ab1d
 800b7dc:	0800b9f5 	.word	0x0800b9f5
 800b7e0:	0800ba05 	.word	0x0800ba05
 800b7e4:	0800ba15 	.word	0x0800ba15
 800b7e8:	0800ba25 	.word	0x0800ba25

0800b7ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	223c      	movs	r2, #60	@ 0x3c
 800b7fa:	5c9b      	ldrb	r3, [r3, r2]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d101      	bne.n	800b804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b800:	2302      	movs	r3, #2
 800b802:	e050      	b.n	800b8a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	223c      	movs	r2, #60	@ 0x3c
 800b808:	2101      	movs	r1, #1
 800b80a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	223d      	movs	r2, #61	@ 0x3d
 800b810:	2102      	movs	r1, #2
 800b812:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a21      	ldr	r2, [pc, #132]	@ (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d108      	bne.n	800b840 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	4a20      	ldr	r2, [pc, #128]	@ (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b832:	4013      	ands	r3, r2
 800b834:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2270      	movs	r2, #112	@ 0x70
 800b844:	4393      	bics	r3, r2
 800b846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	4313      	orrs	r3, r2
 800b850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a14      	ldr	r2, [pc, #80]	@ (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d00a      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	2380      	movs	r3, #128	@ 0x80
 800b86a:	05db      	lsls	r3, r3, #23
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d004      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a10      	ldr	r2, [pc, #64]	@ (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d10c      	bne.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	2280      	movs	r2, #128	@ 0x80
 800b87e:	4393      	bics	r3, r2
 800b880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	223d      	movs	r2, #61	@ 0x3d
 800b898:	2101      	movs	r1, #1
 800b89a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	223c      	movs	r2, #60	@ 0x3c
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	b004      	add	sp, #16
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	46c0      	nop			@ (mov r8, r8)
 800b8b0:	40012c00 	.word	0x40012c00
 800b8b4:	ff0fffff 	.word	0xff0fffff
 800b8b8:	40000400 	.word	0x40000400

0800b8bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	223c      	movs	r2, #60	@ 0x3c
 800b8ce:	5c9b      	ldrb	r3, [r3, r2]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d101      	bne.n	800b8d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	e06f      	b.n	800b9b8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	223c      	movs	r2, #60	@ 0x3c
 800b8dc:	2101      	movs	r1, #1
 800b8de:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	22ff      	movs	r2, #255	@ 0xff
 800b8e4:	4393      	bics	r3, r2
 800b8e6:	001a      	movs	r2, r3
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4a33      	ldr	r2, [pc, #204]	@ (800b9c0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b8f4:	401a      	ands	r2, r3
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	4a30      	ldr	r2, [pc, #192]	@ (800b9c4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b902:	401a      	ands	r2, r3
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	4313      	orrs	r3, r2
 800b90a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4a2e      	ldr	r2, [pc, #184]	@ (800b9c8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b910:	401a      	ands	r2, r3
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4313      	orrs	r3, r2
 800b918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	4a2b      	ldr	r2, [pc, #172]	@ (800b9cc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b91e:	401a      	ands	r2, r3
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	4313      	orrs	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	4a29      	ldr	r2, [pc, #164]	@ (800b9d0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b92c:	401a      	ands	r2, r3
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	4313      	orrs	r3, r2
 800b934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	4a26      	ldr	r2, [pc, #152]	@ (800b9d4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b93a:	401a      	ands	r2, r3
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b940:	4313      	orrs	r3, r2
 800b942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4a24      	ldr	r2, [pc, #144]	@ (800b9d8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b948:	401a      	ands	r2, r3
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	041b      	lsls	r3, r3, #16
 800b950:	4313      	orrs	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	4a21      	ldr	r2, [pc, #132]	@ (800b9dc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b958:	401a      	ands	r2, r3
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	69db      	ldr	r3, [r3, #28]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a1e      	ldr	r2, [pc, #120]	@ (800b9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d11c      	bne.n	800b9a6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4a1d      	ldr	r2, [pc, #116]	@ (800b9e4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b970:	401a      	ands	r2, r3
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b976:	051b      	lsls	r3, r3, #20
 800b978:	4313      	orrs	r3, r2
 800b97a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4a1a      	ldr	r2, [pc, #104]	@ (800b9e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b980:	401a      	ands	r2, r3
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	4313      	orrs	r3, r2
 800b988:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4a17      	ldr	r2, [pc, #92]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b98e:	401a      	ands	r2, r3
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b994:	4313      	orrs	r3, r2
 800b996:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	4a15      	ldr	r2, [pc, #84]	@ (800b9f0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b99c:	401a      	ands	r2, r3
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	223c      	movs	r2, #60	@ 0x3c
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	0018      	movs	r0, r3
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	b004      	add	sp, #16
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	fffffcff 	.word	0xfffffcff
 800b9c4:	fffffbff 	.word	0xfffffbff
 800b9c8:	fffff7ff 	.word	0xfffff7ff
 800b9cc:	ffffefff 	.word	0xffffefff
 800b9d0:	ffffdfff 	.word	0xffffdfff
 800b9d4:	ffffbfff 	.word	0xffffbfff
 800b9d8:	fff0ffff 	.word	0xfff0ffff
 800b9dc:	efffffff 	.word	0xefffffff
 800b9e0:	40012c00 	.word	0x40012c00
 800b9e4:	ff0fffff 	.word	0xff0fffff
 800b9e8:	feffffff 	.word	0xfeffffff
 800b9ec:	fdffffff 	.word	0xfdffffff
 800b9f0:	dfffffff 	.word	0xdfffffff

0800b9f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9fc:	46c0      	nop			@ (mov r8, r8)
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	b002      	add	sp, #8
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ba0c:	46c0      	nop			@ (mov r8, r8)
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	b002      	add	sp, #8
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba1c:	46c0      	nop			@ (mov r8, r8)
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	b002      	add	sp, #8
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba2c:	46c0      	nop			@ (mov r8, r8)
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	b002      	add	sp, #8
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e055      	b.n	800baf2 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2288      	movs	r2, #136	@ 0x88
 800ba4a:	589b      	ldr	r3, [r3, r2]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d116      	bne.n	800ba7e <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2284      	movs	r2, #132	@ 0x84
 800ba54:	2100      	movs	r1, #0
 800ba56:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	0018      	movs	r0, r3
 800ba5c:	f000 fce0 	bl	800c420 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	22c4      	movs	r2, #196	@ 0xc4
 800ba64:	589b      	ldr	r3, [r3, r2]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d103      	bne.n	800ba72 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	21c4      	movs	r1, #196	@ 0xc4
 800ba6e:	4a23      	ldr	r2, [pc, #140]	@ (800bafc <HAL_UART_Init+0xc8>)
 800ba70:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	22c4      	movs	r2, #196	@ 0xc4
 800ba76:	589b      	ldr	r3, [r3, r2]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	0010      	movs	r0, r2
 800ba7c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2288      	movs	r2, #136	@ 0x88
 800ba82:	2124      	movs	r1, #36	@ 0x24
 800ba84:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2101      	movs	r1, #1
 800ba92:	438a      	bics	r2, r1
 800ba94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	0018      	movs	r0, r3
 800baa2:	f000 ff85 	bl	800c9b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	0018      	movs	r0, r3
 800baaa:	f000 fd09 	bl	800c4c0 <UART_SetConfig>
 800baae:	0003      	movs	r3, r0
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d101      	bne.n	800bab8 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e01c      	b.n	800baf2 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	490f      	ldr	r1, [pc, #60]	@ (800bb00 <HAL_UART_Init+0xcc>)
 800bac4:	400a      	ands	r2, r1
 800bac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	212a      	movs	r1, #42	@ 0x2a
 800bad4:	438a      	bics	r2, r1
 800bad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2101      	movs	r1, #1
 800bae4:	430a      	orrs	r2, r1
 800bae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	0018      	movs	r0, r3
 800baec:	f001 f814 	bl	800cb18 <UART_CheckIdleState>
 800baf0:	0003      	movs	r3, r0
}
 800baf2:	0018      	movs	r0, r3
 800baf4:	46bd      	mov	sp, r7
 800baf6:	b002      	add	sp, #8
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	08004f91 	.word	0x08004f91
 800bb00:	ffffb7ff 	.word	0xffffb7ff

0800bb04 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	607a      	str	r2, [r7, #4]
 800bb0e:	230b      	movs	r3, #11
 800bb10:	18fb      	adds	r3, r7, r3
 800bb12:	1c0a      	adds	r2, r1, #0
 800bb14:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb16:	2317      	movs	r3, #23
 800bb18:	18fb      	adds	r3, r7, r3
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d109      	bne.n	800bb38 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2290      	movs	r2, #144	@ 0x90
 800bb28:	589b      	ldr	r3, [r3, r2]
 800bb2a:	2240      	movs	r2, #64	@ 0x40
 800bb2c:	431a      	orrs	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2190      	movs	r1, #144	@ 0x90
 800bb32:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e08f      	b.n	800bc58 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2288      	movs	r2, #136	@ 0x88
 800bb3c:	589b      	ldr	r3, [r3, r2]
 800bb3e:	2b20      	cmp	r3, #32
 800bb40:	d157      	bne.n	800bbf2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800bb42:	230b      	movs	r3, #11
 800bb44:	18fb      	adds	r3, r7, r3
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b0c      	cmp	r3, #12
 800bb4a:	d845      	bhi.n	800bbd8 <HAL_UART_RegisterCallback+0xd4>
 800bb4c:	009a      	lsls	r2, r3, #2
 800bb4e:	4b44      	ldr	r3, [pc, #272]	@ (800bc60 <HAL_UART_RegisterCallback+0x15c>)
 800bb50:	18d3      	adds	r3, r2, r3
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2194      	movs	r1, #148	@ 0x94
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	505a      	str	r2, [r3, r1]
        break;
 800bb5e:	e078      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2198      	movs	r1, #152	@ 0x98
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	505a      	str	r2, [r3, r1]
        break;
 800bb68:	e073      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	219c      	movs	r1, #156	@ 0x9c
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	505a      	str	r2, [r3, r1]
        break;
 800bb72:	e06e      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	21a0      	movs	r1, #160	@ 0xa0
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	505a      	str	r2, [r3, r1]
        break;
 800bb7c:	e069      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	21a4      	movs	r1, #164	@ 0xa4
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	505a      	str	r2, [r3, r1]
        break;
 800bb86:	e064      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	21a8      	movs	r1, #168	@ 0xa8
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	505a      	str	r2, [r3, r1]
        break;
 800bb90:	e05f      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	21ac      	movs	r1, #172	@ 0xac
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	505a      	str	r2, [r3, r1]
        break;
 800bb9a:	e05a      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	21b0      	movs	r1, #176	@ 0xb0
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	505a      	str	r2, [r3, r1]
        break;
 800bba4:	e055      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	21b4      	movs	r1, #180	@ 0xb4
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	505a      	str	r2, [r3, r1]
        break;
 800bbae:	e050      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	21b8      	movs	r1, #184	@ 0xb8
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	505a      	str	r2, [r3, r1]
        break;
 800bbb8:	e04b      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	21bc      	movs	r1, #188	@ 0xbc
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	505a      	str	r2, [r3, r1]
        break;
 800bbc2:	e046      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	21c4      	movs	r1, #196	@ 0xc4
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	505a      	str	r2, [r3, r1]
        break;
 800bbcc:	e041      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	21c8      	movs	r1, #200	@ 0xc8
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	505a      	str	r2, [r3, r1]
        break;
 800bbd6:	e03c      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2290      	movs	r2, #144	@ 0x90
 800bbdc:	589b      	ldr	r3, [r3, r2]
 800bbde:	2240      	movs	r2, #64	@ 0x40
 800bbe0:	431a      	orrs	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2190      	movs	r1, #144	@ 0x90
 800bbe6:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800bbe8:	2317      	movs	r3, #23
 800bbea:	18fb      	adds	r3, r7, r3
 800bbec:	2201      	movs	r2, #1
 800bbee:	701a      	strb	r2, [r3, #0]
        break;
 800bbf0:	e02f      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2288      	movs	r2, #136	@ 0x88
 800bbf6:	589b      	ldr	r3, [r3, r2]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d11e      	bne.n	800bc3a <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800bbfc:	230b      	movs	r3, #11
 800bbfe:	18fb      	adds	r3, r7, r3
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	2b0b      	cmp	r3, #11
 800bc04:	d002      	beq.n	800bc0c <HAL_UART_RegisterCallback+0x108>
 800bc06:	2b0c      	cmp	r3, #12
 800bc08:	d005      	beq.n	800bc16 <HAL_UART_RegisterCallback+0x112>
 800bc0a:	e009      	b.n	800bc20 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	21c4      	movs	r1, #196	@ 0xc4
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	505a      	str	r2, [r3, r1]
        break;
 800bc14:	e01d      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	21c8      	movs	r1, #200	@ 0xc8
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	505a      	str	r2, [r3, r1]
        break;
 800bc1e:	e018      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2290      	movs	r2, #144	@ 0x90
 800bc24:	589b      	ldr	r3, [r3, r2]
 800bc26:	2240      	movs	r2, #64	@ 0x40
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2190      	movs	r1, #144	@ 0x90
 800bc2e:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800bc30:	2317      	movs	r3, #23
 800bc32:	18fb      	adds	r3, r7, r3
 800bc34:	2201      	movs	r2, #1
 800bc36:	701a      	strb	r2, [r3, #0]
        break;
 800bc38:	e00b      	b.n	800bc52 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2290      	movs	r2, #144	@ 0x90
 800bc3e:	589b      	ldr	r3, [r3, r2]
 800bc40:	2240      	movs	r2, #64	@ 0x40
 800bc42:	431a      	orrs	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2190      	movs	r1, #144	@ 0x90
 800bc48:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800bc4a:	2317      	movs	r3, #23
 800bc4c:	18fb      	adds	r3, r7, r3
 800bc4e:	2201      	movs	r2, #1
 800bc50:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bc52:	2317      	movs	r3, #23
 800bc54:	18fb      	adds	r3, r7, r3
 800bc56:	781b      	ldrb	r3, [r3, #0]
}
 800bc58:	0018      	movs	r0, r3
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	b006      	add	sp, #24
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	0800dd94 	.word	0x0800dd94

0800bc64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	1dbb      	adds	r3, r7, #6
 800bc70:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	228c      	movs	r2, #140	@ 0x8c
 800bc76:	589b      	ldr	r3, [r3, r2]
 800bc78:	2b20      	cmp	r3, #32
 800bc7a:	d14a      	bne.n	800bd12 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <HAL_UART_Receive_DMA+0x26>
 800bc82:	1dbb      	adds	r3, r7, #6
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e042      	b.n	800bd14 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	2380      	movs	r3, #128	@ 0x80
 800bc94:	015b      	lsls	r3, r3, #5
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d109      	bne.n	800bcae <HAL_UART_Receive_DMA+0x4a>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d105      	bne.n	800bcae <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2201      	movs	r2, #1
 800bca6:	4013      	ands	r3, r2
 800bca8:	d001      	beq.n	800bcae <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e032      	b.n	800bd14 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a18      	ldr	r2, [pc, #96]	@ (800bd1c <HAL_UART_Receive_DMA+0xb8>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d020      	beq.n	800bd00 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	2380      	movs	r3, #128	@ 0x80
 800bcc6:	041b      	lsls	r3, r3, #16
 800bcc8:	4013      	ands	r3, r2
 800bcca:	d019      	beq.n	800bd00 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bccc:	f3ef 8310 	mrs	r3, PRIMASK
 800bcd0:	613b      	str	r3, [r7, #16]
  return(result);
 800bcd2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bcd4:	61fb      	str	r3, [r7, #28]
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	f383 8810 	msr	PRIMASK, r3
}
 800bce0:	46c0      	nop			@ (mov r8, r8)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2180      	movs	r1, #128	@ 0x80
 800bcee:	04c9      	lsls	r1, r1, #19
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	f383 8810 	msr	PRIMASK, r3
}
 800bcfe:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd00:	1dbb      	adds	r3, r7, #6
 800bd02:	881a      	ldrh	r2, [r3, #0]
 800bd04:	68b9      	ldr	r1, [r7, #8]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	0018      	movs	r0, r3
 800bd0a:	f001 f81f 	bl	800cd4c <UART_Start_Receive_DMA>
 800bd0e:	0003      	movs	r3, r0
 800bd10:	e000      	b.n	800bd14 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800bd12:	2302      	movs	r3, #2
  }
}
 800bd14:	0018      	movs	r0, r3
 800bd16:	46bd      	mov	sp, r7
 800bd18:	b008      	add	sp, #32
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	40008000 	.word	0x40008000

0800bd20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd20:	b5b0      	push	{r4, r5, r7, lr}
 800bd22:	b0aa      	sub	sp, #168	@ 0xa8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	22a4      	movs	r2, #164	@ 0xa4
 800bd30:	18b9      	adds	r1, r7, r2
 800bd32:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	20a0      	movs	r0, #160	@ 0xa0
 800bd3c:	1839      	adds	r1, r7, r0
 800bd3e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	249c      	movs	r4, #156	@ 0x9c
 800bd48:	1939      	adds	r1, r7, r4
 800bd4a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd4c:	0011      	movs	r1, r2
 800bd4e:	18bb      	adds	r3, r7, r2
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4aa5      	ldr	r2, [pc, #660]	@ (800bfe8 <HAL_UART_IRQHandler+0x2c8>)
 800bd54:	4013      	ands	r3, r2
 800bd56:	2298      	movs	r2, #152	@ 0x98
 800bd58:	18bd      	adds	r5, r7, r2
 800bd5a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800bd5c:	18bb      	adds	r3, r7, r2
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d11a      	bne.n	800bd9a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd64:	187b      	adds	r3, r7, r1
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2220      	movs	r2, #32
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	d015      	beq.n	800bd9a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd6e:	183b      	adds	r3, r7, r0
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2220      	movs	r2, #32
 800bd74:	4013      	ands	r3, r2
 800bd76:	d105      	bne.n	800bd84 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd78:	193b      	adds	r3, r7, r4
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	2380      	movs	r3, #128	@ 0x80
 800bd7e:	055b      	lsls	r3, r3, #21
 800bd80:	4013      	ands	r3, r2
 800bd82:	d00a      	beq.n	800bd9a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d100      	bne.n	800bd8e <HAL_UART_IRQHandler+0x6e>
 800bd8c:	e2ea      	b.n	800c364 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	0010      	movs	r0, r2
 800bd96:	4798      	blx	r3
      }
      return;
 800bd98:	e2e4      	b.n	800c364 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bd9a:	2398      	movs	r3, #152	@ 0x98
 800bd9c:	18fb      	adds	r3, r7, r3
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d100      	bne.n	800bda6 <HAL_UART_IRQHandler+0x86>
 800bda4:	e128      	b.n	800bff8 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bda6:	239c      	movs	r3, #156	@ 0x9c
 800bda8:	18fb      	adds	r3, r7, r3
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a8f      	ldr	r2, [pc, #572]	@ (800bfec <HAL_UART_IRQHandler+0x2cc>)
 800bdae:	4013      	ands	r3, r2
 800bdb0:	d106      	bne.n	800bdc0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bdb2:	23a0      	movs	r3, #160	@ 0xa0
 800bdb4:	18fb      	adds	r3, r7, r3
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a8d      	ldr	r2, [pc, #564]	@ (800bff0 <HAL_UART_IRQHandler+0x2d0>)
 800bdba:	4013      	ands	r3, r2
 800bdbc:	d100      	bne.n	800bdc0 <HAL_UART_IRQHandler+0xa0>
 800bdbe:	e11b      	b.n	800bff8 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bdc0:	23a4      	movs	r3, #164	@ 0xa4
 800bdc2:	18fb      	adds	r3, r7, r3
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	4013      	ands	r3, r2
 800bdca:	d012      	beq.n	800bdf2 <HAL_UART_IRQHandler+0xd2>
 800bdcc:	23a0      	movs	r3, #160	@ 0xa0
 800bdce:	18fb      	adds	r3, r7, r3
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	2380      	movs	r3, #128	@ 0x80
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	d00b      	beq.n	800bdf2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2201      	movs	r2, #1
 800bde0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2290      	movs	r2, #144	@ 0x90
 800bde6:	589b      	ldr	r3, [r3, r2]
 800bde8:	2201      	movs	r2, #1
 800bdea:	431a      	orrs	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2190      	movs	r1, #144	@ 0x90
 800bdf0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdf2:	23a4      	movs	r3, #164	@ 0xa4
 800bdf4:	18fb      	adds	r3, r7, r3
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	d011      	beq.n	800be22 <HAL_UART_IRQHandler+0x102>
 800bdfe:	239c      	movs	r3, #156	@ 0x9c
 800be00:	18fb      	adds	r3, r7, r3
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2201      	movs	r2, #1
 800be06:	4013      	ands	r3, r2
 800be08:	d00b      	beq.n	800be22 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2202      	movs	r2, #2
 800be10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2290      	movs	r2, #144	@ 0x90
 800be16:	589b      	ldr	r3, [r3, r2]
 800be18:	2204      	movs	r2, #4
 800be1a:	431a      	orrs	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2190      	movs	r1, #144	@ 0x90
 800be20:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be22:	23a4      	movs	r3, #164	@ 0xa4
 800be24:	18fb      	adds	r3, r7, r3
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2204      	movs	r2, #4
 800be2a:	4013      	ands	r3, r2
 800be2c:	d011      	beq.n	800be52 <HAL_UART_IRQHandler+0x132>
 800be2e:	239c      	movs	r3, #156	@ 0x9c
 800be30:	18fb      	adds	r3, r7, r3
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2201      	movs	r2, #1
 800be36:	4013      	ands	r3, r2
 800be38:	d00b      	beq.n	800be52 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2204      	movs	r2, #4
 800be40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2290      	movs	r2, #144	@ 0x90
 800be46:	589b      	ldr	r3, [r3, r2]
 800be48:	2202      	movs	r2, #2
 800be4a:	431a      	orrs	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2190      	movs	r1, #144	@ 0x90
 800be50:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be52:	23a4      	movs	r3, #164	@ 0xa4
 800be54:	18fb      	adds	r3, r7, r3
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2208      	movs	r2, #8
 800be5a:	4013      	ands	r3, r2
 800be5c:	d017      	beq.n	800be8e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be5e:	23a0      	movs	r3, #160	@ 0xa0
 800be60:	18fb      	adds	r3, r7, r3
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2220      	movs	r2, #32
 800be66:	4013      	ands	r3, r2
 800be68:	d105      	bne.n	800be76 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800be6a:	239c      	movs	r3, #156	@ 0x9c
 800be6c:	18fb      	adds	r3, r7, r3
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a5e      	ldr	r2, [pc, #376]	@ (800bfec <HAL_UART_IRQHandler+0x2cc>)
 800be72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be74:	d00b      	beq.n	800be8e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2208      	movs	r2, #8
 800be7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2290      	movs	r2, #144	@ 0x90
 800be82:	589b      	ldr	r3, [r3, r2]
 800be84:	2208      	movs	r2, #8
 800be86:	431a      	orrs	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2190      	movs	r1, #144	@ 0x90
 800be8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800be8e:	23a4      	movs	r3, #164	@ 0xa4
 800be90:	18fb      	adds	r3, r7, r3
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	2380      	movs	r3, #128	@ 0x80
 800be96:	011b      	lsls	r3, r3, #4
 800be98:	4013      	ands	r3, r2
 800be9a:	d013      	beq.n	800bec4 <HAL_UART_IRQHandler+0x1a4>
 800be9c:	23a0      	movs	r3, #160	@ 0xa0
 800be9e:	18fb      	adds	r3, r7, r3
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	2380      	movs	r3, #128	@ 0x80
 800bea4:	04db      	lsls	r3, r3, #19
 800bea6:	4013      	ands	r3, r2
 800bea8:	d00c      	beq.n	800bec4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2280      	movs	r2, #128	@ 0x80
 800beb0:	0112      	lsls	r2, r2, #4
 800beb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2290      	movs	r2, #144	@ 0x90
 800beb8:	589b      	ldr	r3, [r3, r2]
 800beba:	2220      	movs	r2, #32
 800bebc:	431a      	orrs	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2190      	movs	r1, #144	@ 0x90
 800bec2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2290      	movs	r2, #144	@ 0x90
 800bec8:	589b      	ldr	r3, [r3, r2]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d100      	bne.n	800bed0 <HAL_UART_IRQHandler+0x1b0>
 800bece:	e24b      	b.n	800c368 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bed0:	23a4      	movs	r3, #164	@ 0xa4
 800bed2:	18fb      	adds	r3, r7, r3
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2220      	movs	r2, #32
 800bed8:	4013      	ands	r3, r2
 800beda:	d015      	beq.n	800bf08 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bedc:	23a0      	movs	r3, #160	@ 0xa0
 800bede:	18fb      	adds	r3, r7, r3
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2220      	movs	r2, #32
 800bee4:	4013      	ands	r3, r2
 800bee6:	d106      	bne.n	800bef6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bee8:	239c      	movs	r3, #156	@ 0x9c
 800beea:	18fb      	adds	r3, r7, r3
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	2380      	movs	r3, #128	@ 0x80
 800bef0:	055b      	lsls	r3, r3, #21
 800bef2:	4013      	ands	r3, r2
 800bef4:	d008      	beq.n	800bf08 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800befa:	2b00      	cmp	r3, #0
 800befc:	d004      	beq.n	800bf08 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	0010      	movs	r0, r2
 800bf06:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2290      	movs	r2, #144	@ 0x90
 800bf0c:	589b      	ldr	r3, [r3, r2]
 800bf0e:	2194      	movs	r1, #148	@ 0x94
 800bf10:	187a      	adds	r2, r7, r1
 800bf12:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	2240      	movs	r2, #64	@ 0x40
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	2b40      	cmp	r3, #64	@ 0x40
 800bf20:	d004      	beq.n	800bf2c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf22:	187b      	adds	r3, r7, r1
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2228      	movs	r2, #40	@ 0x28
 800bf28:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf2a:	d050      	beq.n	800bfce <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	0018      	movs	r0, r3
 800bf30:	f000 fff2 	bl	800cf18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	2240      	movs	r2, #64	@ 0x40
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	2b40      	cmp	r3, #64	@ 0x40
 800bf40:	d13e      	bne.n	800bfc0 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf42:	f3ef 8310 	mrs	r3, PRIMASK
 800bf46:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800bf48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf4a:	2090      	movs	r0, #144	@ 0x90
 800bf4c:	183a      	adds	r2, r7, r0
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	2301      	movs	r3, #1
 800bf52:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf56:	f383 8810 	msr	PRIMASK, r3
}
 800bf5a:	46c0      	nop			@ (mov r8, r8)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689a      	ldr	r2, [r3, #8]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2140      	movs	r1, #64	@ 0x40
 800bf68:	438a      	bics	r2, r1
 800bf6a:	609a      	str	r2, [r3, #8]
 800bf6c:	183b      	adds	r3, r7, r0
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf74:	f383 8810 	msr	PRIMASK, r3
}
 800bf78:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2280      	movs	r2, #128	@ 0x80
 800bf7e:	589b      	ldr	r3, [r3, r2]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d016      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2280      	movs	r2, #128	@ 0x80
 800bf88:	589b      	ldr	r3, [r3, r2]
 800bf8a:	4a1a      	ldr	r2, [pc, #104]	@ (800bff4 <HAL_UART_IRQHandler+0x2d4>)
 800bf8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2280      	movs	r2, #128	@ 0x80
 800bf92:	589b      	ldr	r3, [r3, r2]
 800bf94:	0018      	movs	r0, r3
 800bf96:	f7fb fb85 	bl	80076a4 <HAL_DMA_Abort_IT>
 800bf9a:	1e03      	subs	r3, r0, #0
 800bf9c:	d022      	beq.n	800bfe4 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2280      	movs	r2, #128	@ 0x80
 800bfa2:	589b      	ldr	r3, [r3, r2]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	2180      	movs	r1, #128	@ 0x80
 800bfaa:	5852      	ldr	r2, [r2, r1]
 800bfac:	0010      	movs	r0, r2
 800bfae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfb0:	e018      	b.n	800bfe4 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	22a4      	movs	r2, #164	@ 0xa4
 800bfb6:	589b      	ldr	r3, [r3, r2]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	0010      	movs	r0, r2
 800bfbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfbe:	e011      	b.n	800bfe4 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	22a4      	movs	r2, #164	@ 0xa4
 800bfc4:	589b      	ldr	r3, [r3, r2]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	0010      	movs	r0, r2
 800bfca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfcc:	e00a      	b.n	800bfe4 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	22a4      	movs	r2, #164	@ 0xa4
 800bfd2:	589b      	ldr	r3, [r3, r2]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	0010      	movs	r0, r2
 800bfd8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2290      	movs	r2, #144	@ 0x90
 800bfde:	2100      	movs	r1, #0
 800bfe0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800bfe2:	e1c1      	b.n	800c368 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfe4:	46c0      	nop			@ (mov r8, r8)
    return;
 800bfe6:	e1bf      	b.n	800c368 <HAL_UART_IRQHandler+0x648>
 800bfe8:	0000080f 	.word	0x0000080f
 800bfec:	10000001 	.word	0x10000001
 800bff0:	04000120 	.word	0x04000120
 800bff4:	0800d1eb 	.word	0x0800d1eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d000      	beq.n	800c002 <HAL_UART_IRQHandler+0x2e2>
 800c000:	e140      	b.n	800c284 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c002:	23a4      	movs	r3, #164	@ 0xa4
 800c004:	18fb      	adds	r3, r7, r3
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2210      	movs	r2, #16
 800c00a:	4013      	ands	r3, r2
 800c00c:	d100      	bne.n	800c010 <HAL_UART_IRQHandler+0x2f0>
 800c00e:	e139      	b.n	800c284 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c010:	23a0      	movs	r3, #160	@ 0xa0
 800c012:	18fb      	adds	r3, r7, r3
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2210      	movs	r2, #16
 800c018:	4013      	ands	r3, r2
 800c01a:	d100      	bne.n	800c01e <HAL_UART_IRQHandler+0x2fe>
 800c01c:	e132      	b.n	800c284 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2210      	movs	r2, #16
 800c024:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	2240      	movs	r2, #64	@ 0x40
 800c02e:	4013      	ands	r3, r2
 800c030:	2b40      	cmp	r3, #64	@ 0x40
 800c032:	d000      	beq.n	800c036 <HAL_UART_IRQHandler+0x316>
 800c034:	e0a5      	b.n	800c182 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2280      	movs	r2, #128	@ 0x80
 800c03a:	589b      	ldr	r3, [r3, r2]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	685a      	ldr	r2, [r3, #4]
 800c040:	217e      	movs	r1, #126	@ 0x7e
 800c042:	187b      	adds	r3, r7, r1
 800c044:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c046:	187b      	adds	r3, r7, r1
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d100      	bne.n	800c050 <HAL_UART_IRQHandler+0x330>
 800c04e:	e18d      	b.n	800c36c <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	225c      	movs	r2, #92	@ 0x5c
 800c054:	5a9b      	ldrh	r3, [r3, r2]
 800c056:	187a      	adds	r2, r7, r1
 800c058:	8812      	ldrh	r2, [r2, #0]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d300      	bcc.n	800c060 <HAL_UART_IRQHandler+0x340>
 800c05e:	e185      	b.n	800c36c <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	187a      	adds	r2, r7, r1
 800c064:	215e      	movs	r1, #94	@ 0x5e
 800c066:	8812      	ldrh	r2, [r2, #0]
 800c068:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2280      	movs	r2, #128	@ 0x80
 800c06e:	589b      	ldr	r3, [r3, r2]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2220      	movs	r2, #32
 800c076:	4013      	ands	r3, r2
 800c078:	d170      	bne.n	800c15c <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c07a:	f3ef 8310 	mrs	r3, PRIMASK
 800c07e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c082:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c084:	2301      	movs	r3, #1
 800c086:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c08a:	f383 8810 	msr	PRIMASK, r3
}
 800c08e:	46c0      	nop			@ (mov r8, r8)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	49b8      	ldr	r1, [pc, #736]	@ (800c37c <HAL_UART_IRQHandler+0x65c>)
 800c09c:	400a      	ands	r2, r1
 800c09e:	601a      	str	r2, [r3, #0]
 800c0a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a6:	f383 8810 	msr	PRIMASK, r3
}
 800c0aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800c0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0b4:	677b      	str	r3, [r7, #116]	@ 0x74
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0bc:	f383 8810 	msr	PRIMASK, r3
}
 800c0c0:	46c0      	nop			@ (mov r8, r8)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	689a      	ldr	r2, [r3, #8]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	438a      	bics	r2, r1
 800c0d0:	609a      	str	r2, [r3, #8]
 800c0d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0d4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0d8:	f383 8810 	msr	PRIMASK, r3
}
 800c0dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0de:	f3ef 8310 	mrs	r3, PRIMASK
 800c0e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c0e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0e6:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ee:	f383 8810 	msr	PRIMASK, r3
}
 800c0f2:	46c0      	nop			@ (mov r8, r8)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689a      	ldr	r2, [r3, #8]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2140      	movs	r1, #64	@ 0x40
 800c100:	438a      	bics	r2, r1
 800c102:	609a      	str	r2, [r3, #8]
 800c104:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c106:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c10a:	f383 8810 	msr	PRIMASK, r3
}
 800c10e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	228c      	movs	r2, #140	@ 0x8c
 800c114:	2120      	movs	r1, #32
 800c116:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c11e:	f3ef 8310 	mrs	r3, PRIMASK
 800c122:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c126:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c128:	2301      	movs	r3, #1
 800c12a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c12c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c12e:	f383 8810 	msr	PRIMASK, r3
}
 800c132:	46c0      	nop			@ (mov r8, r8)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2110      	movs	r1, #16
 800c140:	438a      	bics	r2, r1
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c146:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c14a:	f383 8810 	msr	PRIMASK, r3
}
 800c14e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2280      	movs	r2, #128	@ 0x80
 800c154:	589b      	ldr	r3, [r3, r2]
 800c156:	0018      	movs	r0, r3
 800c158:	f7fb fa42 	bl	80075e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	22c0      	movs	r2, #192	@ 0xc0
 800c166:	589b      	ldr	r3, [r3, r2]
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	215c      	movs	r1, #92	@ 0x5c
 800c16c:	5a51      	ldrh	r1, [r2, r1]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	205e      	movs	r0, #94	@ 0x5e
 800c172:	5a12      	ldrh	r2, [r2, r0]
 800c174:	b292      	uxth	r2, r2
 800c176:	1a8a      	subs	r2, r1, r2
 800c178:	b291      	uxth	r1, r2
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	0010      	movs	r0, r2
 800c17e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c180:	e0f4      	b.n	800c36c <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	225c      	movs	r2, #92	@ 0x5c
 800c186:	5a99      	ldrh	r1, [r3, r2]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	225e      	movs	r2, #94	@ 0x5e
 800c18c:	5a9b      	ldrh	r3, [r3, r2]
 800c18e:	b29a      	uxth	r2, r3
 800c190:	208e      	movs	r0, #142	@ 0x8e
 800c192:	183b      	adds	r3, r7, r0
 800c194:	1a8a      	subs	r2, r1, r2
 800c196:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	225e      	movs	r2, #94	@ 0x5e
 800c19c:	5a9b      	ldrh	r3, [r3, r2]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d100      	bne.n	800c1a6 <HAL_UART_IRQHandler+0x486>
 800c1a4:	e0e4      	b.n	800c370 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800c1a6:	183b      	adds	r3, r7, r0
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d100      	bne.n	800c1b0 <HAL_UART_IRQHandler+0x490>
 800c1ae:	e0df      	b.n	800c370 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1b0:	f3ef 8310 	mrs	r3, PRIMASK
 800c1b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1b8:	2488      	movs	r4, #136	@ 0x88
 800c1ba:	193a      	adds	r2, r7, r4
 800c1bc:	6013      	str	r3, [r2, #0]
 800c1be:	2301      	movs	r3, #1
 800c1c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f383 8810 	msr	PRIMASK, r3
}
 800c1c8:	46c0      	nop			@ (mov r8, r8)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	496a      	ldr	r1, [pc, #424]	@ (800c380 <HAL_UART_IRQHandler+0x660>)
 800c1d6:	400a      	ands	r2, r1
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	193b      	adds	r3, r7, r4
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f383 8810 	msr	PRIMASK, r3
}
 800c1e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c1ec:	61bb      	str	r3, [r7, #24]
  return(result);
 800c1ee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1f0:	2484      	movs	r4, #132	@ 0x84
 800c1f2:	193a      	adds	r2, r7, r4
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	f383 8810 	msr	PRIMASK, r3
}
 800c200:	46c0      	nop			@ (mov r8, r8)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	689a      	ldr	r2, [r3, #8]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	495d      	ldr	r1, [pc, #372]	@ (800c384 <HAL_UART_IRQHandler+0x664>)
 800c20e:	400a      	ands	r2, r1
 800c210:	609a      	str	r2, [r3, #8]
 800c212:	193b      	adds	r3, r7, r4
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c218:	6a3b      	ldr	r3, [r7, #32]
 800c21a:	f383 8810 	msr	PRIMASK, r3
}
 800c21e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	228c      	movs	r2, #140	@ 0x8c
 800c224:	2120      	movs	r1, #32
 800c226:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c234:	f3ef 8310 	mrs	r3, PRIMASK
 800c238:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c23c:	2480      	movs	r4, #128	@ 0x80
 800c23e:	193a      	adds	r2, r7, r4
 800c240:	6013      	str	r3, [r2, #0]
 800c242:	2301      	movs	r3, #1
 800c244:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c248:	f383 8810 	msr	PRIMASK, r3
}
 800c24c:	46c0      	nop			@ (mov r8, r8)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2110      	movs	r1, #16
 800c25a:	438a      	bics	r2, r1
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	193b      	adds	r3, r7, r4
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c266:	f383 8810 	msr	PRIMASK, r3
}
 800c26a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2202      	movs	r2, #2
 800c270:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	22c0      	movs	r2, #192	@ 0xc0
 800c276:	589b      	ldr	r3, [r3, r2]
 800c278:	183a      	adds	r2, r7, r0
 800c27a:	8811      	ldrh	r1, [r2, #0]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	0010      	movs	r0, r2
 800c280:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c282:	e075      	b.n	800c370 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c284:	23a4      	movs	r3, #164	@ 0xa4
 800c286:	18fb      	adds	r3, r7, r3
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	2380      	movs	r3, #128	@ 0x80
 800c28c:	035b      	lsls	r3, r3, #13
 800c28e:	4013      	ands	r3, r2
 800c290:	d012      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x598>
 800c292:	239c      	movs	r3, #156	@ 0x9c
 800c294:	18fb      	adds	r3, r7, r3
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	2380      	movs	r3, #128	@ 0x80
 800c29a:	03db      	lsls	r3, r3, #15
 800c29c:	4013      	ands	r3, r2
 800c29e:	d00b      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2280      	movs	r2, #128	@ 0x80
 800c2a6:	0352      	lsls	r2, r2, #13
 800c2a8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	22b4      	movs	r2, #180	@ 0xb4
 800c2ae:	589b      	ldr	r3, [r3, r2]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	0010      	movs	r0, r2
 800c2b4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2b6:	e05e      	b.n	800c376 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c2b8:	23a4      	movs	r3, #164	@ 0xa4
 800c2ba:	18fb      	adds	r3, r7, r3
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2280      	movs	r2, #128	@ 0x80
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	d016      	beq.n	800c2f2 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c2c4:	23a0      	movs	r3, #160	@ 0xa0
 800c2c6:	18fb      	adds	r3, r7, r3
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2280      	movs	r2, #128	@ 0x80
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	d106      	bne.n	800c2de <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2d0:	239c      	movs	r3, #156	@ 0x9c
 800c2d2:	18fb      	adds	r3, r7, r3
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	2380      	movs	r3, #128	@ 0x80
 800c2d8:	041b      	lsls	r3, r3, #16
 800c2da:	4013      	ands	r3, r2
 800c2dc:	d009      	beq.n	800c2f2 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d046      	beq.n	800c374 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	0010      	movs	r0, r2
 800c2ee:	4798      	blx	r3
    }
    return;
 800c2f0:	e040      	b.n	800c374 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2f2:	23a4      	movs	r3, #164	@ 0xa4
 800c2f4:	18fb      	adds	r3, r7, r3
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2240      	movs	r2, #64	@ 0x40
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	d00a      	beq.n	800c314 <HAL_UART_IRQHandler+0x5f4>
 800c2fe:	23a0      	movs	r3, #160	@ 0xa0
 800c300:	18fb      	adds	r3, r7, r3
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2240      	movs	r2, #64	@ 0x40
 800c306:	4013      	ands	r3, r2
 800c308:	d004      	beq.n	800c314 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	0018      	movs	r0, r3
 800c30e:	f000 ff85 	bl	800d21c <UART_EndTransmit_IT>
    return;
 800c312:	e030      	b.n	800c376 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c314:	23a4      	movs	r3, #164	@ 0xa4
 800c316:	18fb      	adds	r3, r7, r3
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	2380      	movs	r3, #128	@ 0x80
 800c31c:	041b      	lsls	r3, r3, #16
 800c31e:	4013      	ands	r3, r2
 800c320:	d00d      	beq.n	800c33e <HAL_UART_IRQHandler+0x61e>
 800c322:	23a0      	movs	r3, #160	@ 0xa0
 800c324:	18fb      	adds	r3, r7, r3
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	2380      	movs	r3, #128	@ 0x80
 800c32a:	05db      	lsls	r3, r3, #23
 800c32c:	4013      	ands	r3, r2
 800c32e:	d006      	beq.n	800c33e <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	22bc      	movs	r2, #188	@ 0xbc
 800c334:	589b      	ldr	r3, [r3, r2]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	0010      	movs	r0, r2
 800c33a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c33c:	e01b      	b.n	800c376 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c33e:	23a4      	movs	r3, #164	@ 0xa4
 800c340:	18fb      	adds	r3, r7, r3
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	2380      	movs	r3, #128	@ 0x80
 800c346:	045b      	lsls	r3, r3, #17
 800c348:	4013      	ands	r3, r2
 800c34a:	d014      	beq.n	800c376 <HAL_UART_IRQHandler+0x656>
 800c34c:	23a0      	movs	r3, #160	@ 0xa0
 800c34e:	18fb      	adds	r3, r7, r3
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	da0f      	bge.n	800c376 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	22b8      	movs	r2, #184	@ 0xb8
 800c35a:	589b      	ldr	r3, [r3, r2]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	0010      	movs	r0, r2
 800c360:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c362:	e008      	b.n	800c376 <HAL_UART_IRQHandler+0x656>
      return;
 800c364:	46c0      	nop			@ (mov r8, r8)
 800c366:	e006      	b.n	800c376 <HAL_UART_IRQHandler+0x656>
    return;
 800c368:	46c0      	nop			@ (mov r8, r8)
 800c36a:	e004      	b.n	800c376 <HAL_UART_IRQHandler+0x656>
      return;
 800c36c:	46c0      	nop			@ (mov r8, r8)
 800c36e:	e002      	b.n	800c376 <HAL_UART_IRQHandler+0x656>
      return;
 800c370:	46c0      	nop			@ (mov r8, r8)
 800c372:	e000      	b.n	800c376 <HAL_UART_IRQHandler+0x656>
    return;
 800c374:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c376:	46bd      	mov	sp, r7
 800c378:	b02a      	add	sp, #168	@ 0xa8
 800c37a:	bdb0      	pop	{r4, r5, r7, pc}
 800c37c:	fffffeff 	.word	0xfffffeff
 800c380:	fffffedf 	.word	0xfffffedf
 800c384:	effffffe 	.word	0xeffffffe

0800c388 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c390:	46c0      	nop			@ (mov r8, r8)
 800c392:	46bd      	mov	sp, r7
 800c394:	b002      	add	sp, #8
 800c396:	bd80      	pop	{r7, pc}

0800c398 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c3a0:	46c0      	nop			@ (mov r8, r8)
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	b002      	add	sp, #8
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c3b0:	46c0      	nop			@ (mov r8, r8)
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	b002      	add	sp, #8
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c3c0:	46c0      	nop			@ (mov r8, r8)
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	b002      	add	sp, #8
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3d0:	46c0      	nop			@ (mov r8, r8)
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	b002      	add	sp, #8
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c3e0:	46c0      	nop			@ (mov r8, r8)
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	b002      	add	sp, #8
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c3f0:	46c0      	nop			@ (mov r8, r8)
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	b002      	add	sp, #8
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c400:	46c0      	nop			@ (mov r8, r8)
 800c402:	46bd      	mov	sp, r7
 800c404:	b002      	add	sp, #8
 800c406:	bd80      	pop	{r7, pc}

0800c408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	000a      	movs	r2, r1
 800c412:	1cbb      	adds	r3, r7, #2
 800c414:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c416:	46c0      	nop			@ (mov r8, r8)
 800c418:	46bd      	mov	sp, r7
 800c41a:	b002      	add	sp, #8
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2194      	movs	r1, #148	@ 0x94
 800c42c:	4a18      	ldr	r2, [pc, #96]	@ (800c490 <UART_InitCallbacksToDefault+0x70>)
 800c42e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2198      	movs	r1, #152	@ 0x98
 800c434:	4a17      	ldr	r2, [pc, #92]	@ (800c494 <UART_InitCallbacksToDefault+0x74>)
 800c436:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	219c      	movs	r1, #156	@ 0x9c
 800c43c:	4a16      	ldr	r2, [pc, #88]	@ (800c498 <UART_InitCallbacksToDefault+0x78>)
 800c43e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	21a0      	movs	r1, #160	@ 0xa0
 800c444:	4a15      	ldr	r2, [pc, #84]	@ (800c49c <UART_InitCallbacksToDefault+0x7c>)
 800c446:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	21a4      	movs	r1, #164	@ 0xa4
 800c44c:	4a14      	ldr	r2, [pc, #80]	@ (800c4a0 <UART_InitCallbacksToDefault+0x80>)
 800c44e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	21a8      	movs	r1, #168	@ 0xa8
 800c454:	4a13      	ldr	r2, [pc, #76]	@ (800c4a4 <UART_InitCallbacksToDefault+0x84>)
 800c456:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	21ac      	movs	r1, #172	@ 0xac
 800c45c:	4a12      	ldr	r2, [pc, #72]	@ (800c4a8 <UART_InitCallbacksToDefault+0x88>)
 800c45e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	21b0      	movs	r1, #176	@ 0xb0
 800c464:	4a11      	ldr	r2, [pc, #68]	@ (800c4ac <UART_InitCallbacksToDefault+0x8c>)
 800c466:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	21b4      	movs	r1, #180	@ 0xb4
 800c46c:	4a10      	ldr	r2, [pc, #64]	@ (800c4b0 <UART_InitCallbacksToDefault+0x90>)
 800c46e:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	21b8      	movs	r1, #184	@ 0xb8
 800c474:	4a0f      	ldr	r2, [pc, #60]	@ (800c4b4 <UART_InitCallbacksToDefault+0x94>)
 800c476:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	21bc      	movs	r1, #188	@ 0xbc
 800c47c:	4a0e      	ldr	r2, [pc, #56]	@ (800c4b8 <UART_InitCallbacksToDefault+0x98>)
 800c47e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	21c0      	movs	r1, #192	@ 0xc0
 800c484:	4a0d      	ldr	r2, [pc, #52]	@ (800c4bc <UART_InitCallbacksToDefault+0x9c>)
 800c486:	505a      	str	r2, [r3, r1]

}
 800c488:	46c0      	nop			@ (mov r8, r8)
 800c48a:	46bd      	mov	sp, r7
 800c48c:	b002      	add	sp, #8
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	0800c399 	.word	0x0800c399
 800c494:	0800c389 	.word	0x0800c389
 800c498:	0800c3b9 	.word	0x0800c3b9
 800c49c:	0800c3a9 	.word	0x0800c3a9
 800c4a0:	0800c3c9 	.word	0x0800c3c9
 800c4a4:	0800c3d9 	.word	0x0800c3d9
 800c4a8:	0800c3e9 	.word	0x0800c3e9
 800c4ac:	0800c3f9 	.word	0x0800c3f9
 800c4b0:	0800d279 	.word	0x0800d279
 800c4b4:	0800d289 	.word	0x0800d289
 800c4b8:	0800d299 	.word	0x0800d299
 800c4bc:	0800c409 	.word	0x0800c409

0800c4c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4c0:	b5b0      	push	{r4, r5, r7, lr}
 800c4c2:	b090      	sub	sp, #64	@ 0x40
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c4c8:	231a      	movs	r3, #26
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	189b      	adds	r3, r3, r2
 800c4ce:	19db      	adds	r3, r3, r7
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d6:	689a      	ldr	r2, [r3, #8]
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	431a      	orrs	r2, r3
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	69db      	ldr	r3, [r3, #28]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4ac4      	ldr	r2, [pc, #784]	@ (800c804 <UART_SetConfig+0x344>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	0019      	movs	r1, r3
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4fe:	430b      	orrs	r3, r1
 800c500:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	4abf      	ldr	r2, [pc, #764]	@ (800c808 <UART_SetConfig+0x348>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	0018      	movs	r0, r3
 800c50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c510:	68d9      	ldr	r1, [r3, #12]
 800c512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	0003      	movs	r3, r0
 800c518:	430b      	orrs	r3, r1
 800c51a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4ab9      	ldr	r2, [pc, #740]	@ (800c80c <UART_SetConfig+0x34c>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d004      	beq.n	800c536 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52e:	6a1b      	ldr	r3, [r3, #32]
 800c530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c532:	4313      	orrs	r3, r2
 800c534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	4ab4      	ldr	r2, [pc, #720]	@ (800c810 <UART_SetConfig+0x350>)
 800c53e:	4013      	ands	r3, r2
 800c540:	0019      	movs	r1, r3
 800c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c548:	430b      	orrs	r3, r1
 800c54a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c552:	220f      	movs	r2, #15
 800c554:	4393      	bics	r3, r2
 800c556:	0018      	movs	r0, r3
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	0003      	movs	r3, r0
 800c562:	430b      	orrs	r3, r1
 800c564:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4aaa      	ldr	r2, [pc, #680]	@ (800c814 <UART_SetConfig+0x354>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d131      	bne.n	800c5d4 <UART_SetConfig+0x114>
 800c570:	4ba9      	ldr	r3, [pc, #676]	@ (800c818 <UART_SetConfig+0x358>)
 800c572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c574:	2203      	movs	r2, #3
 800c576:	4013      	ands	r3, r2
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d01d      	beq.n	800c5b8 <UART_SetConfig+0xf8>
 800c57c:	d823      	bhi.n	800c5c6 <UART_SetConfig+0x106>
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d00c      	beq.n	800c59c <UART_SetConfig+0xdc>
 800c582:	d820      	bhi.n	800c5c6 <UART_SetConfig+0x106>
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <UART_SetConfig+0xce>
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d00e      	beq.n	800c5aa <UART_SetConfig+0xea>
 800c58c:	e01b      	b.n	800c5c6 <UART_SetConfig+0x106>
 800c58e:	231b      	movs	r3, #27
 800c590:	2220      	movs	r2, #32
 800c592:	189b      	adds	r3, r3, r2
 800c594:	19db      	adds	r3, r3, r7
 800c596:	2200      	movs	r2, #0
 800c598:	701a      	strb	r2, [r3, #0]
 800c59a:	e071      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c59c:	231b      	movs	r3, #27
 800c59e:	2220      	movs	r2, #32
 800c5a0:	189b      	adds	r3, r3, r2
 800c5a2:	19db      	adds	r3, r3, r7
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	701a      	strb	r2, [r3, #0]
 800c5a8:	e06a      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c5aa:	231b      	movs	r3, #27
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	189b      	adds	r3, r3, r2
 800c5b0:	19db      	adds	r3, r3, r7
 800c5b2:	2204      	movs	r2, #4
 800c5b4:	701a      	strb	r2, [r3, #0]
 800c5b6:	e063      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c5b8:	231b      	movs	r3, #27
 800c5ba:	2220      	movs	r2, #32
 800c5bc:	189b      	adds	r3, r3, r2
 800c5be:	19db      	adds	r3, r3, r7
 800c5c0:	2208      	movs	r2, #8
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	e05c      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c5c6:	231b      	movs	r3, #27
 800c5c8:	2220      	movs	r2, #32
 800c5ca:	189b      	adds	r3, r3, r2
 800c5cc:	19db      	adds	r3, r3, r7
 800c5ce:	2210      	movs	r2, #16
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	e055      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a90      	ldr	r2, [pc, #576]	@ (800c81c <UART_SetConfig+0x35c>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d106      	bne.n	800c5ec <UART_SetConfig+0x12c>
 800c5de:	231b      	movs	r3, #27
 800c5e0:	2220      	movs	r2, #32
 800c5e2:	189b      	adds	r3, r3, r2
 800c5e4:	19db      	adds	r3, r3, r7
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	701a      	strb	r2, [r3, #0]
 800c5ea:	e049      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a86      	ldr	r2, [pc, #536]	@ (800c80c <UART_SetConfig+0x34c>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d13e      	bne.n	800c674 <UART_SetConfig+0x1b4>
 800c5f6:	4b88      	ldr	r3, [pc, #544]	@ (800c818 <UART_SetConfig+0x358>)
 800c5f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5fa:	23c0      	movs	r3, #192	@ 0xc0
 800c5fc:	011b      	lsls	r3, r3, #4
 800c5fe:	4013      	ands	r3, r2
 800c600:	22c0      	movs	r2, #192	@ 0xc0
 800c602:	0112      	lsls	r2, r2, #4
 800c604:	4293      	cmp	r3, r2
 800c606:	d027      	beq.n	800c658 <UART_SetConfig+0x198>
 800c608:	22c0      	movs	r2, #192	@ 0xc0
 800c60a:	0112      	lsls	r2, r2, #4
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d82a      	bhi.n	800c666 <UART_SetConfig+0x1a6>
 800c610:	2280      	movs	r2, #128	@ 0x80
 800c612:	0112      	lsls	r2, r2, #4
 800c614:	4293      	cmp	r3, r2
 800c616:	d011      	beq.n	800c63c <UART_SetConfig+0x17c>
 800c618:	2280      	movs	r2, #128	@ 0x80
 800c61a:	0112      	lsls	r2, r2, #4
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d822      	bhi.n	800c666 <UART_SetConfig+0x1a6>
 800c620:	2b00      	cmp	r3, #0
 800c622:	d004      	beq.n	800c62e <UART_SetConfig+0x16e>
 800c624:	2280      	movs	r2, #128	@ 0x80
 800c626:	00d2      	lsls	r2, r2, #3
 800c628:	4293      	cmp	r3, r2
 800c62a:	d00e      	beq.n	800c64a <UART_SetConfig+0x18a>
 800c62c:	e01b      	b.n	800c666 <UART_SetConfig+0x1a6>
 800c62e:	231b      	movs	r3, #27
 800c630:	2220      	movs	r2, #32
 800c632:	189b      	adds	r3, r3, r2
 800c634:	19db      	adds	r3, r3, r7
 800c636:	2200      	movs	r2, #0
 800c638:	701a      	strb	r2, [r3, #0]
 800c63a:	e021      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c63c:	231b      	movs	r3, #27
 800c63e:	2220      	movs	r2, #32
 800c640:	189b      	adds	r3, r3, r2
 800c642:	19db      	adds	r3, r3, r7
 800c644:	2202      	movs	r2, #2
 800c646:	701a      	strb	r2, [r3, #0]
 800c648:	e01a      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c64a:	231b      	movs	r3, #27
 800c64c:	2220      	movs	r2, #32
 800c64e:	189b      	adds	r3, r3, r2
 800c650:	19db      	adds	r3, r3, r7
 800c652:	2204      	movs	r2, #4
 800c654:	701a      	strb	r2, [r3, #0]
 800c656:	e013      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c658:	231b      	movs	r3, #27
 800c65a:	2220      	movs	r2, #32
 800c65c:	189b      	adds	r3, r3, r2
 800c65e:	19db      	adds	r3, r3, r7
 800c660:	2208      	movs	r2, #8
 800c662:	701a      	strb	r2, [r3, #0]
 800c664:	e00c      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c666:	231b      	movs	r3, #27
 800c668:	2220      	movs	r2, #32
 800c66a:	189b      	adds	r3, r3, r2
 800c66c:	19db      	adds	r3, r3, r7
 800c66e:	2210      	movs	r2, #16
 800c670:	701a      	strb	r2, [r3, #0]
 800c672:	e005      	b.n	800c680 <UART_SetConfig+0x1c0>
 800c674:	231b      	movs	r3, #27
 800c676:	2220      	movs	r2, #32
 800c678:	189b      	adds	r3, r3, r2
 800c67a:	19db      	adds	r3, r3, r7
 800c67c:	2210      	movs	r2, #16
 800c67e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a61      	ldr	r2, [pc, #388]	@ (800c80c <UART_SetConfig+0x34c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d000      	beq.n	800c68c <UART_SetConfig+0x1cc>
 800c68a:	e092      	b.n	800c7b2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c68c:	231b      	movs	r3, #27
 800c68e:	2220      	movs	r2, #32
 800c690:	189b      	adds	r3, r3, r2
 800c692:	19db      	adds	r3, r3, r7
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	2b08      	cmp	r3, #8
 800c698:	d015      	beq.n	800c6c6 <UART_SetConfig+0x206>
 800c69a:	dc18      	bgt.n	800c6ce <UART_SetConfig+0x20e>
 800c69c:	2b04      	cmp	r3, #4
 800c69e:	d00d      	beq.n	800c6bc <UART_SetConfig+0x1fc>
 800c6a0:	dc15      	bgt.n	800c6ce <UART_SetConfig+0x20e>
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d002      	beq.n	800c6ac <UART_SetConfig+0x1ec>
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d005      	beq.n	800c6b6 <UART_SetConfig+0x1f6>
 800c6aa:	e010      	b.n	800c6ce <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6ac:	f7fc fdd6 	bl	800925c <HAL_RCC_GetPCLK1Freq>
 800c6b0:	0003      	movs	r3, r0
 800c6b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6b4:	e014      	b.n	800c6e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6b6:	4b5a      	ldr	r3, [pc, #360]	@ (800c820 <UART_SetConfig+0x360>)
 800c6b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6ba:	e011      	b.n	800c6e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6bc:	f7fc fd42 	bl	8009144 <HAL_RCC_GetSysClockFreq>
 800c6c0:	0003      	movs	r3, r0
 800c6c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6c4:	e00c      	b.n	800c6e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6c6:	2380      	movs	r3, #128	@ 0x80
 800c6c8:	021b      	lsls	r3, r3, #8
 800c6ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6cc:	e008      	b.n	800c6e0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c6d2:	231a      	movs	r3, #26
 800c6d4:	2220      	movs	r2, #32
 800c6d6:	189b      	adds	r3, r3, r2
 800c6d8:	19db      	adds	r3, r3, r7
 800c6da:	2201      	movs	r2, #1
 800c6dc:	701a      	strb	r2, [r3, #0]
        break;
 800c6de:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d100      	bne.n	800c6e8 <UART_SetConfig+0x228>
 800c6e6:	e147      	b.n	800c978 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6ec:	4b4d      	ldr	r3, [pc, #308]	@ (800c824 <UART_SetConfig+0x364>)
 800c6ee:	0052      	lsls	r2, r2, #1
 800c6f0:	5ad3      	ldrh	r3, [r2, r3]
 800c6f2:	0019      	movs	r1, r3
 800c6f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c6f6:	f7f3 fd07 	bl	8000108 <__udivsi3>
 800c6fa:	0003      	movs	r3, r0
 800c6fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c700:	685a      	ldr	r2, [r3, #4]
 800c702:	0013      	movs	r3, r2
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	189b      	adds	r3, r3, r2
 800c708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d305      	bcc.n	800c71a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c716:	429a      	cmp	r2, r3
 800c718:	d906      	bls.n	800c728 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c71a:	231a      	movs	r3, #26
 800c71c:	2220      	movs	r2, #32
 800c71e:	189b      	adds	r3, r3, r2
 800c720:	19db      	adds	r3, r3, r7
 800c722:	2201      	movs	r2, #1
 800c724:	701a      	strb	r2, [r3, #0]
 800c726:	e127      	b.n	800c978 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	2300      	movs	r3, #0
 800c72e:	61fb      	str	r3, [r7, #28]
 800c730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c732:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c734:	4b3b      	ldr	r3, [pc, #236]	@ (800c824 <UART_SetConfig+0x364>)
 800c736:	0052      	lsls	r2, r2, #1
 800c738:	5ad3      	ldrh	r3, [r2, r3]
 800c73a:	613b      	str	r3, [r7, #16]
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	69b8      	ldr	r0, [r7, #24]
 800c746:	69f9      	ldr	r1, [r7, #28]
 800c748:	f7f3 fd6a 	bl	8000220 <__aeabi_uldivmod>
 800c74c:	0002      	movs	r2, r0
 800c74e:	000b      	movs	r3, r1
 800c750:	0e11      	lsrs	r1, r2, #24
 800c752:	021d      	lsls	r5, r3, #8
 800c754:	430d      	orrs	r5, r1
 800c756:	0214      	lsls	r4, r2, #8
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	085b      	lsrs	r3, r3, #1
 800c75e:	60bb      	str	r3, [r7, #8]
 800c760:	2300      	movs	r3, #0
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	68b8      	ldr	r0, [r7, #8]
 800c766:	68f9      	ldr	r1, [r7, #12]
 800c768:	1900      	adds	r0, r0, r4
 800c76a:	4169      	adcs	r1, r5
 800c76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	603b      	str	r3, [r7, #0]
 800c772:	2300      	movs	r3, #0
 800c774:	607b      	str	r3, [r7, #4]
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f7f3 fd51 	bl	8000220 <__aeabi_uldivmod>
 800c77e:	0002      	movs	r2, r0
 800c780:	000b      	movs	r3, r1
 800c782:	0013      	movs	r3, r2
 800c784:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c788:	23c0      	movs	r3, #192	@ 0xc0
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d309      	bcc.n	800c7a4 <UART_SetConfig+0x2e4>
 800c790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c792:	2380      	movs	r3, #128	@ 0x80
 800c794:	035b      	lsls	r3, r3, #13
 800c796:	429a      	cmp	r2, r3
 800c798:	d204      	bcs.n	800c7a4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7a0:	60da      	str	r2, [r3, #12]
 800c7a2:	e0e9      	b.n	800c978 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800c7a4:	231a      	movs	r3, #26
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	189b      	adds	r3, r3, r2
 800c7aa:	19db      	adds	r3, r3, r7
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	701a      	strb	r2, [r3, #0]
 800c7b0:	e0e2      	b.n	800c978 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b4:	69da      	ldr	r2, [r3, #28]
 800c7b6:	2380      	movs	r3, #128	@ 0x80
 800c7b8:	021b      	lsls	r3, r3, #8
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d000      	beq.n	800c7c0 <UART_SetConfig+0x300>
 800c7be:	e083      	b.n	800c8c8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c7c0:	231b      	movs	r3, #27
 800c7c2:	2220      	movs	r2, #32
 800c7c4:	189b      	adds	r3, r3, r2
 800c7c6:	19db      	adds	r3, r3, r7
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b08      	cmp	r3, #8
 800c7cc:	d015      	beq.n	800c7fa <UART_SetConfig+0x33a>
 800c7ce:	dc2b      	bgt.n	800c828 <UART_SetConfig+0x368>
 800c7d0:	2b04      	cmp	r3, #4
 800c7d2:	d00d      	beq.n	800c7f0 <UART_SetConfig+0x330>
 800c7d4:	dc28      	bgt.n	800c828 <UART_SetConfig+0x368>
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <UART_SetConfig+0x320>
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d005      	beq.n	800c7ea <UART_SetConfig+0x32a>
 800c7de:	e023      	b.n	800c828 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7e0:	f7fc fd3c 	bl	800925c <HAL_RCC_GetPCLK1Freq>
 800c7e4:	0003      	movs	r3, r0
 800c7e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7e8:	e027      	b.n	800c83a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c820 <UART_SetConfig+0x360>)
 800c7ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7ee:	e024      	b.n	800c83a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7f0:	f7fc fca8 	bl	8009144 <HAL_RCC_GetSysClockFreq>
 800c7f4:	0003      	movs	r3, r0
 800c7f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7f8:	e01f      	b.n	800c83a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7fa:	2380      	movs	r3, #128	@ 0x80
 800c7fc:	021b      	lsls	r3, r3, #8
 800c7fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c800:	e01b      	b.n	800c83a <UART_SetConfig+0x37a>
 800c802:	46c0      	nop			@ (mov r8, r8)
 800c804:	cfff69f3 	.word	0xcfff69f3
 800c808:	ffffcfff 	.word	0xffffcfff
 800c80c:	40008000 	.word	0x40008000
 800c810:	11fff4ff 	.word	0x11fff4ff
 800c814:	40013800 	.word	0x40013800
 800c818:	40021000 	.word	0x40021000
 800c81c:	40004400 	.word	0x40004400
 800c820:	00f42400 	.word	0x00f42400
 800c824:	0800dd7c 	.word	0x0800dd7c
      default:
        pclk = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c82c:	231a      	movs	r3, #26
 800c82e:	2220      	movs	r2, #32
 800c830:	189b      	adds	r3, r3, r2
 800c832:	19db      	adds	r3, r3, r7
 800c834:	2201      	movs	r2, #1
 800c836:	701a      	strb	r2, [r3, #0]
        break;
 800c838:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d100      	bne.n	800c842 <UART_SetConfig+0x382>
 800c840:	e09a      	b.n	800c978 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c844:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c846:	4b58      	ldr	r3, [pc, #352]	@ (800c9a8 <UART_SetConfig+0x4e8>)
 800c848:	0052      	lsls	r2, r2, #1
 800c84a:	5ad3      	ldrh	r3, [r2, r3]
 800c84c:	0019      	movs	r1, r3
 800c84e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c850:	f7f3 fc5a 	bl	8000108 <__udivsi3>
 800c854:	0003      	movs	r3, r0
 800c856:	005a      	lsls	r2, r3, #1
 800c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	085b      	lsrs	r3, r3, #1
 800c85e:	18d2      	adds	r2, r2, r3
 800c860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	0019      	movs	r1, r3
 800c866:	0010      	movs	r0, r2
 800c868:	f7f3 fc4e 	bl	8000108 <__udivsi3>
 800c86c:	0003      	movs	r3, r0
 800c86e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c872:	2b0f      	cmp	r3, #15
 800c874:	d921      	bls.n	800c8ba <UART_SetConfig+0x3fa>
 800c876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c878:	2380      	movs	r3, #128	@ 0x80
 800c87a:	025b      	lsls	r3, r3, #9
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d21c      	bcs.n	800c8ba <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c882:	b29a      	uxth	r2, r3
 800c884:	200e      	movs	r0, #14
 800c886:	2420      	movs	r4, #32
 800c888:	1903      	adds	r3, r0, r4
 800c88a:	19db      	adds	r3, r3, r7
 800c88c:	210f      	movs	r1, #15
 800c88e:	438a      	bics	r2, r1
 800c890:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c894:	085b      	lsrs	r3, r3, #1
 800c896:	b29b      	uxth	r3, r3
 800c898:	2207      	movs	r2, #7
 800c89a:	4013      	ands	r3, r2
 800c89c:	b299      	uxth	r1, r3
 800c89e:	1903      	adds	r3, r0, r4
 800c8a0:	19db      	adds	r3, r3, r7
 800c8a2:	1902      	adds	r2, r0, r4
 800c8a4:	19d2      	adds	r2, r2, r7
 800c8a6:	8812      	ldrh	r2, [r2, #0]
 800c8a8:	430a      	orrs	r2, r1
 800c8aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	1902      	adds	r2, r0, r4
 800c8b2:	19d2      	adds	r2, r2, r7
 800c8b4:	8812      	ldrh	r2, [r2, #0]
 800c8b6:	60da      	str	r2, [r3, #12]
 800c8b8:	e05e      	b.n	800c978 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c8ba:	231a      	movs	r3, #26
 800c8bc:	2220      	movs	r2, #32
 800c8be:	189b      	adds	r3, r3, r2
 800c8c0:	19db      	adds	r3, r3, r7
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	701a      	strb	r2, [r3, #0]
 800c8c6:	e057      	b.n	800c978 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c8c8:	231b      	movs	r3, #27
 800c8ca:	2220      	movs	r2, #32
 800c8cc:	189b      	adds	r3, r3, r2
 800c8ce:	19db      	adds	r3, r3, r7
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	2b08      	cmp	r3, #8
 800c8d4:	d015      	beq.n	800c902 <UART_SetConfig+0x442>
 800c8d6:	dc18      	bgt.n	800c90a <UART_SetConfig+0x44a>
 800c8d8:	2b04      	cmp	r3, #4
 800c8da:	d00d      	beq.n	800c8f8 <UART_SetConfig+0x438>
 800c8dc:	dc15      	bgt.n	800c90a <UART_SetConfig+0x44a>
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d002      	beq.n	800c8e8 <UART_SetConfig+0x428>
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d005      	beq.n	800c8f2 <UART_SetConfig+0x432>
 800c8e6:	e010      	b.n	800c90a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8e8:	f7fc fcb8 	bl	800925c <HAL_RCC_GetPCLK1Freq>
 800c8ec:	0003      	movs	r3, r0
 800c8ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8f0:	e014      	b.n	800c91c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8f2:	4b2e      	ldr	r3, [pc, #184]	@ (800c9ac <UART_SetConfig+0x4ec>)
 800c8f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8f6:	e011      	b.n	800c91c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8f8:	f7fc fc24 	bl	8009144 <HAL_RCC_GetSysClockFreq>
 800c8fc:	0003      	movs	r3, r0
 800c8fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c900:	e00c      	b.n	800c91c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c902:	2380      	movs	r3, #128	@ 0x80
 800c904:	021b      	lsls	r3, r3, #8
 800c906:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c908:	e008      	b.n	800c91c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800c90a:	2300      	movs	r3, #0
 800c90c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c90e:	231a      	movs	r3, #26
 800c910:	2220      	movs	r2, #32
 800c912:	189b      	adds	r3, r3, r2
 800c914:	19db      	adds	r3, r3, r7
 800c916:	2201      	movs	r2, #1
 800c918:	701a      	strb	r2, [r3, #0]
        break;
 800c91a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800c91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d02a      	beq.n	800c978 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c926:	4b20      	ldr	r3, [pc, #128]	@ (800c9a8 <UART_SetConfig+0x4e8>)
 800c928:	0052      	lsls	r2, r2, #1
 800c92a:	5ad3      	ldrh	r3, [r2, r3]
 800c92c:	0019      	movs	r1, r3
 800c92e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c930:	f7f3 fbea 	bl	8000108 <__udivsi3>
 800c934:	0003      	movs	r3, r0
 800c936:	001a      	movs	r2, r3
 800c938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	085b      	lsrs	r3, r3, #1
 800c93e:	18d2      	adds	r2, r2, r3
 800c940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	0019      	movs	r1, r3
 800c946:	0010      	movs	r0, r2
 800c948:	f7f3 fbde 	bl	8000108 <__udivsi3>
 800c94c:	0003      	movs	r3, r0
 800c94e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c952:	2b0f      	cmp	r3, #15
 800c954:	d90a      	bls.n	800c96c <UART_SetConfig+0x4ac>
 800c956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c958:	2380      	movs	r3, #128	@ 0x80
 800c95a:	025b      	lsls	r3, r3, #9
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d205      	bcs.n	800c96c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c962:	b29a      	uxth	r2, r3
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	60da      	str	r2, [r3, #12]
 800c96a:	e005      	b.n	800c978 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c96c:	231a      	movs	r3, #26
 800c96e:	2220      	movs	r2, #32
 800c970:	189b      	adds	r3, r3, r2
 800c972:	19db      	adds	r3, r3, r7
 800c974:	2201      	movs	r2, #1
 800c976:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97a:	226a      	movs	r2, #106	@ 0x6a
 800c97c:	2101      	movs	r1, #1
 800c97e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c982:	2268      	movs	r2, #104	@ 0x68
 800c984:	2101      	movs	r1, #1
 800c986:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98a:	2200      	movs	r2, #0
 800c98c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	2200      	movs	r2, #0
 800c992:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c994:	231a      	movs	r3, #26
 800c996:	2220      	movs	r2, #32
 800c998:	189b      	adds	r3, r3, r2
 800c99a:	19db      	adds	r3, r3, r7
 800c99c:	781b      	ldrb	r3, [r3, #0]
}
 800c99e:	0018      	movs	r0, r3
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	b010      	add	sp, #64	@ 0x40
 800c9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c9a6:	46c0      	nop			@ (mov r8, r8)
 800c9a8:	0800dd7c 	.word	0x0800dd7c
 800c9ac:	00f42400 	.word	0x00f42400

0800c9b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9bc:	2208      	movs	r2, #8
 800c9be:	4013      	ands	r3, r2
 800c9c0:	d00b      	beq.n	800c9da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	4a4a      	ldr	r2, [pc, #296]	@ (800caf4 <UART_AdvFeatureConfig+0x144>)
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	0019      	movs	r1, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9de:	2201      	movs	r2, #1
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	d00b      	beq.n	800c9fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	4a43      	ldr	r2, [pc, #268]	@ (800caf8 <UART_AdvFeatureConfig+0x148>)
 800c9ec:	4013      	ands	r3, r2
 800c9ee:	0019      	movs	r1, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	430a      	orrs	r2, r1
 800c9fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca00:	2202      	movs	r2, #2
 800ca02:	4013      	ands	r3, r2
 800ca04:	d00b      	beq.n	800ca1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	4a3b      	ldr	r2, [pc, #236]	@ (800cafc <UART_AdvFeatureConfig+0x14c>)
 800ca0e:	4013      	ands	r3, r2
 800ca10:	0019      	movs	r1, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	430a      	orrs	r2, r1
 800ca1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca22:	2204      	movs	r2, #4
 800ca24:	4013      	ands	r3, r2
 800ca26:	d00b      	beq.n	800ca40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	4a34      	ldr	r2, [pc, #208]	@ (800cb00 <UART_AdvFeatureConfig+0x150>)
 800ca30:	4013      	ands	r3, r2
 800ca32:	0019      	movs	r1, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	430a      	orrs	r2, r1
 800ca3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca44:	2210      	movs	r2, #16
 800ca46:	4013      	ands	r3, r2
 800ca48:	d00b      	beq.n	800ca62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	4a2c      	ldr	r2, [pc, #176]	@ (800cb04 <UART_AdvFeatureConfig+0x154>)
 800ca52:	4013      	ands	r3, r2
 800ca54:	0019      	movs	r1, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca66:	2220      	movs	r2, #32
 800ca68:	4013      	ands	r3, r2
 800ca6a:	d00b      	beq.n	800ca84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	4a25      	ldr	r2, [pc, #148]	@ (800cb08 <UART_AdvFeatureConfig+0x158>)
 800ca74:	4013      	ands	r3, r2
 800ca76:	0019      	movs	r1, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	430a      	orrs	r2, r1
 800ca82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca88:	2240      	movs	r2, #64	@ 0x40
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	d01d      	beq.n	800caca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	4a1d      	ldr	r2, [pc, #116]	@ (800cb0c <UART_AdvFeatureConfig+0x15c>)
 800ca96:	4013      	ands	r3, r2
 800ca98:	0019      	movs	r1, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	430a      	orrs	r2, r1
 800caa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800caaa:	2380      	movs	r3, #128	@ 0x80
 800caac:	035b      	lsls	r3, r3, #13
 800caae:	429a      	cmp	r2, r3
 800cab0:	d10b      	bne.n	800caca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	4a15      	ldr	r2, [pc, #84]	@ (800cb10 <UART_AdvFeatureConfig+0x160>)
 800caba:	4013      	ands	r3, r2
 800cabc:	0019      	movs	r1, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	430a      	orrs	r2, r1
 800cac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cace:	2280      	movs	r2, #128	@ 0x80
 800cad0:	4013      	ands	r3, r2
 800cad2:	d00b      	beq.n	800caec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	4a0e      	ldr	r2, [pc, #56]	@ (800cb14 <UART_AdvFeatureConfig+0x164>)
 800cadc:	4013      	ands	r3, r2
 800cade:	0019      	movs	r1, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	430a      	orrs	r2, r1
 800caea:	605a      	str	r2, [r3, #4]
  }
}
 800caec:	46c0      	nop			@ (mov r8, r8)
 800caee:	46bd      	mov	sp, r7
 800caf0:	b002      	add	sp, #8
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	ffff7fff 	.word	0xffff7fff
 800caf8:	fffdffff 	.word	0xfffdffff
 800cafc:	fffeffff 	.word	0xfffeffff
 800cb00:	fffbffff 	.word	0xfffbffff
 800cb04:	ffffefff 	.word	0xffffefff
 800cb08:	ffffdfff 	.word	0xffffdfff
 800cb0c:	ffefffff 	.word	0xffefffff
 800cb10:	ff9fffff 	.word	0xff9fffff
 800cb14:	fff7ffff 	.word	0xfff7ffff

0800cb18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b092      	sub	sp, #72	@ 0x48
 800cb1c:	af02      	add	r7, sp, #8
 800cb1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2290      	movs	r2, #144	@ 0x90
 800cb24:	2100      	movs	r1, #0
 800cb26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb28:	f7f9 f906 	bl	8005d38 <HAL_GetTick>
 800cb2c:	0003      	movs	r3, r0
 800cb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2208      	movs	r2, #8
 800cb38:	4013      	ands	r3, r2
 800cb3a:	2b08      	cmp	r3, #8
 800cb3c:	d12d      	bne.n	800cb9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb40:	2280      	movs	r2, #128	@ 0x80
 800cb42:	0391      	lsls	r1, r2, #14
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	4a47      	ldr	r2, [pc, #284]	@ (800cc64 <UART_CheckIdleState+0x14c>)
 800cb48:	9200      	str	r2, [sp, #0]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f000 f88e 	bl	800cc6c <UART_WaitOnFlagUntilTimeout>
 800cb50:	1e03      	subs	r3, r0, #0
 800cb52:	d022      	beq.n	800cb9a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb54:	f3ef 8310 	mrs	r3, PRIMASK
 800cb58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cb5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb5e:	2301      	movs	r3, #1
 800cb60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb64:	f383 8810 	msr	PRIMASK, r3
}
 800cb68:	46c0      	nop			@ (mov r8, r8)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2180      	movs	r1, #128	@ 0x80
 800cb76:	438a      	bics	r2, r1
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb80:	f383 8810 	msr	PRIMASK, r3
}
 800cb84:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2288      	movs	r2, #136	@ 0x88
 800cb8a:	2120      	movs	r1, #32
 800cb8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2284      	movs	r2, #132	@ 0x84
 800cb92:	2100      	movs	r1, #0
 800cb94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e060      	b.n	800cc5c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2204      	movs	r2, #4
 800cba2:	4013      	ands	r3, r2
 800cba4:	2b04      	cmp	r3, #4
 800cba6:	d146      	bne.n	800cc36 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbaa:	2280      	movs	r2, #128	@ 0x80
 800cbac:	03d1      	lsls	r1, r2, #15
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	4a2c      	ldr	r2, [pc, #176]	@ (800cc64 <UART_CheckIdleState+0x14c>)
 800cbb2:	9200      	str	r2, [sp, #0]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f000 f859 	bl	800cc6c <UART_WaitOnFlagUntilTimeout>
 800cbba:	1e03      	subs	r3, r0, #0
 800cbbc:	d03b      	beq.n	800cc36 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbbe:	f3ef 8310 	mrs	r3, PRIMASK
 800cbc2:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbc8:	2301      	movs	r3, #1
 800cbca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	f383 8810 	msr	PRIMASK, r3
}
 800cbd2:	46c0      	nop			@ (mov r8, r8)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4922      	ldr	r1, [pc, #136]	@ (800cc68 <UART_CheckIdleState+0x150>)
 800cbe0:	400a      	ands	r2, r1
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f383 8810 	msr	PRIMASK, r3
}
 800cbee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbf0:	f3ef 8310 	mrs	r3, PRIMASK
 800cbf4:	61bb      	str	r3, [r7, #24]
  return(result);
 800cbf6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbf8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	f383 8810 	msr	PRIMASK, r3
}
 800cc04:	46c0      	nop			@ (mov r8, r8)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	689a      	ldr	r2, [r3, #8]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2101      	movs	r1, #1
 800cc12:	438a      	bics	r2, r1
 800cc14:	609a      	str	r2, [r3, #8]
 800cc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc1a:	6a3b      	ldr	r3, [r7, #32]
 800cc1c:	f383 8810 	msr	PRIMASK, r3
}
 800cc20:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	228c      	movs	r2, #140	@ 0x8c
 800cc26:	2120      	movs	r1, #32
 800cc28:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2284      	movs	r2, #132	@ 0x84
 800cc2e:	2100      	movs	r1, #0
 800cc30:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e012      	b.n	800cc5c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2288      	movs	r2, #136	@ 0x88
 800cc3a:	2120      	movs	r1, #32
 800cc3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	228c      	movs	r2, #140	@ 0x8c
 800cc42:	2120      	movs	r1, #32
 800cc44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2284      	movs	r2, #132	@ 0x84
 800cc56:	2100      	movs	r1, #0
 800cc58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	0018      	movs	r0, r3
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	b010      	add	sp, #64	@ 0x40
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	01ffffff 	.word	0x01ffffff
 800cc68:	fffffedf 	.word	0xfffffedf

0800cc6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	603b      	str	r3, [r7, #0]
 800cc78:	1dfb      	adds	r3, r7, #7
 800cc7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc7c:	e051      	b.n	800cd22 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	3301      	adds	r3, #1
 800cc82:	d04e      	beq.n	800cd22 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc84:	f7f9 f858 	bl	8005d38 <HAL_GetTick>
 800cc88:	0002      	movs	r2, r0
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	69ba      	ldr	r2, [r7, #24]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d302      	bcc.n	800cc9a <UART_WaitOnFlagUntilTimeout+0x2e>
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e051      	b.n	800cd42 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2204      	movs	r2, #4
 800cca6:	4013      	ands	r3, r2
 800cca8:	d03b      	beq.n	800cd22 <UART_WaitOnFlagUntilTimeout+0xb6>
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2b80      	cmp	r3, #128	@ 0x80
 800ccae:	d038      	beq.n	800cd22 <UART_WaitOnFlagUntilTimeout+0xb6>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b40      	cmp	r3, #64	@ 0x40
 800ccb4:	d035      	beq.n	800cd22 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	69db      	ldr	r3, [r3, #28]
 800ccbc:	2208      	movs	r2, #8
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	2b08      	cmp	r3, #8
 800ccc2:	d111      	bne.n	800cce8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2208      	movs	r2, #8
 800ccca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	0018      	movs	r0, r3
 800ccd0:	f000 f922 	bl	800cf18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2290      	movs	r2, #144	@ 0x90
 800ccd8:	2108      	movs	r1, #8
 800ccda:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2284      	movs	r2, #132	@ 0x84
 800cce0:	2100      	movs	r1, #0
 800cce2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e02c      	b.n	800cd42 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	69da      	ldr	r2, [r3, #28]
 800ccee:	2380      	movs	r3, #128	@ 0x80
 800ccf0:	011b      	lsls	r3, r3, #4
 800ccf2:	401a      	ands	r2, r3
 800ccf4:	2380      	movs	r3, #128	@ 0x80
 800ccf6:	011b      	lsls	r3, r3, #4
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d112      	bne.n	800cd22 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2280      	movs	r2, #128	@ 0x80
 800cd02:	0112      	lsls	r2, r2, #4
 800cd04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	0018      	movs	r0, r3
 800cd0a:	f000 f905 	bl	800cf18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2290      	movs	r2, #144	@ 0x90
 800cd12:	2120      	movs	r1, #32
 800cd14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2284      	movs	r2, #132	@ 0x84
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e00f      	b.n	800cd42 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	68ba      	ldr	r2, [r7, #8]
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	425a      	negs	r2, r3
 800cd32:	4153      	adcs	r3, r2
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	001a      	movs	r2, r3
 800cd38:	1dfb      	adds	r3, r7, #7
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d09e      	beq.n	800cc7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	0018      	movs	r0, r3
 800cd44:	46bd      	mov	sp, r7
 800cd46:	b004      	add	sp, #16
 800cd48:	bd80      	pop	{r7, pc}
	...

0800cd4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b090      	sub	sp, #64	@ 0x40
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	1dbb      	adds	r3, r7, #6
 800cd58:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	1dba      	adds	r2, r7, #6
 800cd64:	215c      	movs	r1, #92	@ 0x5c
 800cd66:	8812      	ldrh	r2, [r2, #0]
 800cd68:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2290      	movs	r2, #144	@ 0x90
 800cd6e:	2100      	movs	r1, #0
 800cd70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	228c      	movs	r2, #140	@ 0x8c
 800cd76:	2122      	movs	r1, #34	@ 0x22
 800cd78:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2280      	movs	r2, #128	@ 0x80
 800cd7e:	589b      	ldr	r3, [r3, r2]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d02d      	beq.n	800cde0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2280      	movs	r2, #128	@ 0x80
 800cd88:	589b      	ldr	r3, [r3, r2]
 800cd8a:	4a40      	ldr	r2, [pc, #256]	@ (800ce8c <UART_Start_Receive_DMA+0x140>)
 800cd8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2280      	movs	r2, #128	@ 0x80
 800cd92:	589b      	ldr	r3, [r3, r2]
 800cd94:	4a3e      	ldr	r2, [pc, #248]	@ (800ce90 <UART_Start_Receive_DMA+0x144>)
 800cd96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2280      	movs	r2, #128	@ 0x80
 800cd9c:	589b      	ldr	r3, [r3, r2]
 800cd9e:	4a3d      	ldr	r2, [pc, #244]	@ (800ce94 <UART_Start_Receive_DMA+0x148>)
 800cda0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2280      	movs	r2, #128	@ 0x80
 800cda6:	589b      	ldr	r3, [r3, r2]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2280      	movs	r2, #128	@ 0x80
 800cdb0:	5898      	ldr	r0, [r3, r2]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3324      	adds	r3, #36	@ 0x24
 800cdb8:	0019      	movs	r1, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdbe:	001a      	movs	r2, r3
 800cdc0:	1dbb      	adds	r3, r7, #6
 800cdc2:	881b      	ldrh	r3, [r3, #0]
 800cdc4:	f7fa fb86 	bl	80074d4 <HAL_DMA_Start_IT>
 800cdc8:	1e03      	subs	r3, r0, #0
 800cdca:	d009      	beq.n	800cde0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2290      	movs	r2, #144	@ 0x90
 800cdd0:	2110      	movs	r1, #16
 800cdd2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	228c      	movs	r2, #140	@ 0x8c
 800cdd8:	2120      	movs	r1, #32
 800cdda:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e050      	b.n	800ce82 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d019      	beq.n	800ce1c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cde8:	f3ef 8310 	mrs	r3, PRIMASK
 800cdec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800cdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf8:	f383 8810 	msr	PRIMASK, r3
}
 800cdfc:	46c0      	nop			@ (mov r8, r8)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2180      	movs	r1, #128	@ 0x80
 800ce0a:	0049      	lsls	r1, r1, #1
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce12:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce16:	f383 8810 	msr	PRIMASK, r3
}
 800ce1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce20:	613b      	str	r3, [r7, #16]
  return(result);
 800ce22:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce24:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce26:	2301      	movs	r3, #1
 800ce28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	f383 8810 	msr	PRIMASK, r3
}
 800ce30:	46c0      	nop			@ (mov r8, r8)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	689a      	ldr	r2, [r3, #8]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	430a      	orrs	r2, r1
 800ce40:	609a      	str	r2, [r3, #8]
 800ce42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	f383 8810 	msr	PRIMASK, r3
}
 800ce4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce52:	61fb      	str	r3, [r7, #28]
  return(result);
 800ce54:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce56:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce58:	2301      	movs	r3, #1
 800ce5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce5c:	6a3b      	ldr	r3, [r7, #32]
 800ce5e:	f383 8810 	msr	PRIMASK, r3
}
 800ce62:	46c0      	nop			@ (mov r8, r8)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	689a      	ldr	r2, [r3, #8]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2140      	movs	r1, #64	@ 0x40
 800ce70:	430a      	orrs	r2, r1
 800ce72:	609a      	str	r2, [r3, #8]
 800ce74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7a:	f383 8810 	msr	PRIMASK, r3
}
 800ce7e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	0018      	movs	r0, r3
 800ce84:	46bd      	mov	sp, r7
 800ce86:	b010      	add	sp, #64	@ 0x40
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	46c0      	nop			@ (mov r8, r8)
 800ce8c:	0800cfe5 	.word	0x0800cfe5
 800ce90:	0800d119 	.word	0x0800d119
 800ce94:	0800d161 	.word	0x0800d161

0800ce98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08a      	sub	sp, #40	@ 0x28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cea0:	f3ef 8310 	mrs	r3, PRIMASK
 800cea4:	60bb      	str	r3, [r7, #8]
  return(result);
 800cea6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cea8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceaa:	2301      	movs	r3, #1
 800ceac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f383 8810 	msr	PRIMASK, r3
}
 800ceb4:	46c0      	nop			@ (mov r8, r8)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	21c0      	movs	r1, #192	@ 0xc0
 800cec2:	438a      	bics	r2, r1
 800cec4:	601a      	str	r2, [r3, #0]
 800cec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f383 8810 	msr	PRIMASK, r3
}
 800ced0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ced2:	f3ef 8310 	mrs	r3, PRIMASK
 800ced6:	617b      	str	r3, [r7, #20]
  return(result);
 800ced8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ceda:	623b      	str	r3, [r7, #32]
 800cedc:	2301      	movs	r3, #1
 800cede:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	f383 8810 	msr	PRIMASK, r3
}
 800cee6:	46c0      	nop			@ (mov r8, r8)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	689a      	ldr	r2, [r3, #8]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4908      	ldr	r1, [pc, #32]	@ (800cf14 <UART_EndTxTransfer+0x7c>)
 800cef4:	400a      	ands	r2, r1
 800cef6:	609a      	str	r2, [r3, #8]
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	f383 8810 	msr	PRIMASK, r3
}
 800cf02:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2288      	movs	r2, #136	@ 0x88
 800cf08:	2120      	movs	r1, #32
 800cf0a:	5099      	str	r1, [r3, r2]
}
 800cf0c:	46c0      	nop			@ (mov r8, r8)
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	b00a      	add	sp, #40	@ 0x28
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	ff7fffff 	.word	0xff7fffff

0800cf18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08e      	sub	sp, #56	@ 0x38
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf20:	f3ef 8310 	mrs	r3, PRIMASK
 800cf24:	617b      	str	r3, [r7, #20]
  return(result);
 800cf26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf28:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	f383 8810 	msr	PRIMASK, r3
}
 800cf34:	46c0      	nop			@ (mov r8, r8)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4926      	ldr	r1, [pc, #152]	@ (800cfdc <UART_EndRxTransfer+0xc4>)
 800cf42:	400a      	ands	r2, r1
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	f383 8810 	msr	PRIMASK, r3
}
 800cf50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf52:	f3ef 8310 	mrs	r3, PRIMASK
 800cf56:	623b      	str	r3, [r7, #32]
  return(result);
 800cf58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf62:	f383 8810 	msr	PRIMASK, r3
}
 800cf66:	46c0      	nop			@ (mov r8, r8)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	689a      	ldr	r2, [r3, #8]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	491b      	ldr	r1, [pc, #108]	@ (800cfe0 <UART_EndRxTransfer+0xc8>)
 800cf74:	400a      	ands	r2, r1
 800cf76:	609a      	str	r2, [r3, #8]
 800cf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7e:	f383 8810 	msr	PRIMASK, r3
}
 800cf82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d118      	bne.n	800cfbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf8c:	f3ef 8310 	mrs	r3, PRIMASK
 800cf90:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf96:	2301      	movs	r3, #1
 800cf98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f383 8810 	msr	PRIMASK, r3
}
 800cfa0:	46c0      	nop			@ (mov r8, r8)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2110      	movs	r1, #16
 800cfae:	438a      	bics	r2, r1
 800cfb0:	601a      	str	r2, [r3, #0]
 800cfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	f383 8810 	msr	PRIMASK, r3
}
 800cfbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	228c      	movs	r2, #140	@ 0x8c
 800cfc2:	2120      	movs	r1, #32
 800cfc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cfd2:	46c0      	nop			@ (mov r8, r8)
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	b00e      	add	sp, #56	@ 0x38
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	46c0      	nop			@ (mov r8, r8)
 800cfdc:	fffffedf 	.word	0xfffffedf
 800cfe0:	effffffe 	.word	0xeffffffe

0800cfe4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b094      	sub	sp, #80	@ 0x50
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cff0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2220      	movs	r2, #32
 800cffa:	4013      	ands	r3, r2
 800cffc:	d16f      	bne.n	800d0de <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800cffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d000:	225e      	movs	r2, #94	@ 0x5e
 800d002:	2100      	movs	r1, #0
 800d004:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d006:	f3ef 8310 	mrs	r3, PRIMASK
 800d00a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d00c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d00e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d010:	2301      	movs	r3, #1
 800d012:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	f383 8810 	msr	PRIMASK, r3
}
 800d01a:	46c0      	nop			@ (mov r8, r8)
 800d01c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	493b      	ldr	r1, [pc, #236]	@ (800d114 <UART_DMAReceiveCplt+0x130>)
 800d028:	400a      	ands	r2, r1
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d02e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d030:	6a3b      	ldr	r3, [r7, #32]
 800d032:	f383 8810 	msr	PRIMASK, r3
}
 800d036:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d038:	f3ef 8310 	mrs	r3, PRIMASK
 800d03c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d040:	647b      	str	r3, [r7, #68]	@ 0x44
 800d042:	2301      	movs	r3, #1
 800d044:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d048:	f383 8810 	msr	PRIMASK, r3
}
 800d04c:	46c0      	nop			@ (mov r8, r8)
 800d04e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	689a      	ldr	r2, [r3, #8]
 800d054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2101      	movs	r1, #1
 800d05a:	438a      	bics	r2, r1
 800d05c:	609a      	str	r2, [r3, #8]
 800d05e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d064:	f383 8810 	msr	PRIMASK, r3
}
 800d068:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d06a:	f3ef 8310 	mrs	r3, PRIMASK
 800d06e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d072:	643b      	str	r3, [r7, #64]	@ 0x40
 800d074:	2301      	movs	r3, #1
 800d076:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d07a:	f383 8810 	msr	PRIMASK, r3
}
 800d07e:	46c0      	nop			@ (mov r8, r8)
 800d080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	689a      	ldr	r2, [r3, #8]
 800d086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2140      	movs	r1, #64	@ 0x40
 800d08c:	438a      	bics	r2, r1
 800d08e:	609a      	str	r2, [r3, #8]
 800d090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d092:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d096:	f383 8810 	msr	PRIMASK, r3
}
 800d09a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d09c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d09e:	228c      	movs	r2, #140	@ 0x8c
 800d0a0:	2120      	movs	r1, #32
 800d0a2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d118      	bne.n	800d0de <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f383 8810 	msr	PRIMASK, r3
}
 800d0c0:	46c0      	nop			@ (mov r8, r8)
 800d0c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2110      	movs	r1, #16
 800d0ce:	438a      	bics	r2, r1
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f383 8810 	msr	PRIMASK, r3
}
 800d0dc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d109      	bne.n	800d100 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ee:	22c0      	movs	r2, #192	@ 0xc0
 800d0f0:	589b      	ldr	r3, [r3, r2]
 800d0f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0f4:	215c      	movs	r1, #92	@ 0x5c
 800d0f6:	5a51      	ldrh	r1, [r2, r1]
 800d0f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0fa:	0010      	movs	r0, r2
 800d0fc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d0fe:	e005      	b.n	800d10c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800d100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d102:	22a0      	movs	r2, #160	@ 0xa0
 800d104:	589b      	ldr	r3, [r3, r2]
 800d106:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d108:	0010      	movs	r0, r2
 800d10a:	4798      	blx	r3
}
 800d10c:	46c0      	nop			@ (mov r8, r8)
 800d10e:	46bd      	mov	sp, r7
 800d110:	b014      	add	sp, #80	@ 0x50
 800d112:	bd80      	pop	{r7, pc}
 800d114:	fffffeff 	.word	0xfffffeff

0800d118 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d124:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2201      	movs	r2, #1
 800d12a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d130:	2b01      	cmp	r3, #1
 800d132:	d10b      	bne.n	800d14c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	22c0      	movs	r2, #192	@ 0xc0
 800d138:	589b      	ldr	r3, [r3, r2]
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	215c      	movs	r1, #92	@ 0x5c
 800d13e:	5a52      	ldrh	r2, [r2, r1]
 800d140:	0852      	lsrs	r2, r2, #1
 800d142:	b291      	uxth	r1, r2
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	0010      	movs	r0, r2
 800d148:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d14a:	e005      	b.n	800d158 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	229c      	movs	r2, #156	@ 0x9c
 800d150:	589b      	ldr	r3, [r3, r2]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	0010      	movs	r0, r2
 800d156:	4798      	blx	r3
}
 800d158:	46c0      	nop			@ (mov r8, r8)
 800d15a:	46bd      	mov	sp, r7
 800d15c:	b004      	add	sp, #16
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d16c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2288      	movs	r2, #136	@ 0x88
 800d172:	589b      	ldr	r3, [r3, r2]
 800d174:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	228c      	movs	r2, #140	@ 0x8c
 800d17a:	589b      	ldr	r3, [r3, r2]
 800d17c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	2280      	movs	r2, #128	@ 0x80
 800d186:	4013      	ands	r3, r2
 800d188:	2b80      	cmp	r3, #128	@ 0x80
 800d18a:	d10a      	bne.n	800d1a2 <UART_DMAError+0x42>
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	2b21      	cmp	r3, #33	@ 0x21
 800d190:	d107      	bne.n	800d1a2 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2256      	movs	r2, #86	@ 0x56
 800d196:	2100      	movs	r1, #0
 800d198:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	0018      	movs	r0, r3
 800d19e:	f7ff fe7b 	bl	800ce98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	2240      	movs	r2, #64	@ 0x40
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	2b40      	cmp	r3, #64	@ 0x40
 800d1ae:	d10a      	bne.n	800d1c6 <UART_DMAError+0x66>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2b22      	cmp	r3, #34	@ 0x22
 800d1b4:	d107      	bne.n	800d1c6 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	225e      	movs	r2, #94	@ 0x5e
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f7ff fea9 	bl	800cf18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2290      	movs	r2, #144	@ 0x90
 800d1ca:	589b      	ldr	r3, [r3, r2]
 800d1cc:	2210      	movs	r2, #16
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2190      	movs	r1, #144	@ 0x90
 800d1d4:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	22a4      	movs	r2, #164	@ 0xa4
 800d1da:	589b      	ldr	r3, [r3, r2]
 800d1dc:	697a      	ldr	r2, [r7, #20]
 800d1de:	0010      	movs	r0, r2
 800d1e0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1e2:	46c0      	nop			@ (mov r8, r8)
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	b006      	add	sp, #24
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b084      	sub	sp, #16
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	225e      	movs	r2, #94	@ 0x5e
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2256      	movs	r2, #86	@ 0x56
 800d204:	2100      	movs	r1, #0
 800d206:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	22a4      	movs	r2, #164	@ 0xa4
 800d20c:	589b      	ldr	r3, [r3, r2]
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	0010      	movs	r0, r2
 800d212:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d214:	46c0      	nop			@ (mov r8, r8)
 800d216:	46bd      	mov	sp, r7
 800d218:	b004      	add	sp, #16
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b086      	sub	sp, #24
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d224:	f3ef 8310 	mrs	r3, PRIMASK
 800d228:	60bb      	str	r3, [r7, #8]
  return(result);
 800d22a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d22c:	617b      	str	r3, [r7, #20]
 800d22e:	2301      	movs	r3, #1
 800d230:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f383 8810 	msr	PRIMASK, r3
}
 800d238:	46c0      	nop			@ (mov r8, r8)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2140      	movs	r1, #64	@ 0x40
 800d246:	438a      	bics	r2, r1
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	f383 8810 	msr	PRIMASK, r3
}
 800d254:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2288      	movs	r2, #136	@ 0x88
 800d25a:	2120      	movs	r1, #32
 800d25c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2298      	movs	r2, #152	@ 0x98
 800d268:	589b      	ldr	r3, [r3, r2]
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	0010      	movs	r0, r2
 800d26e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d270:	46c0      	nop			@ (mov r8, r8)
 800d272:	46bd      	mov	sp, r7
 800d274:	b006      	add	sp, #24
 800d276:	bd80      	pop	{r7, pc}

0800d278 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d280:	46c0      	nop			@ (mov r8, r8)
 800d282:	46bd      	mov	sp, r7
 800d284:	b002      	add	sp, #8
 800d286:	bd80      	pop	{r7, pc}

0800d288 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d290:	46c0      	nop			@ (mov r8, r8)
 800d292:	46bd      	mov	sp, r7
 800d294:	b002      	add	sp, #8
 800d296:	bd80      	pop	{r7, pc}

0800d298 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d2a0:	46c0      	nop			@ (mov r8, r8)
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	b002      	add	sp, #8
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <memset>:
 800d2a8:	0003      	movs	r3, r0
 800d2aa:	1882      	adds	r2, r0, r2
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d100      	bne.n	800d2b2 <memset+0xa>
 800d2b0:	4770      	bx	lr
 800d2b2:	7019      	strb	r1, [r3, #0]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	e7f9      	b.n	800d2ac <memset+0x4>

0800d2b8 <__libc_init_array>:
 800d2b8:	b570      	push	{r4, r5, r6, lr}
 800d2ba:	2600      	movs	r6, #0
 800d2bc:	4c0c      	ldr	r4, [pc, #48]	@ (800d2f0 <__libc_init_array+0x38>)
 800d2be:	4d0d      	ldr	r5, [pc, #52]	@ (800d2f4 <__libc_init_array+0x3c>)
 800d2c0:	1b64      	subs	r4, r4, r5
 800d2c2:	10a4      	asrs	r4, r4, #2
 800d2c4:	42a6      	cmp	r6, r4
 800d2c6:	d109      	bne.n	800d2dc <__libc_init_array+0x24>
 800d2c8:	2600      	movs	r6, #0
 800d2ca:	f000 f823 	bl	800d314 <_init>
 800d2ce:	4c0a      	ldr	r4, [pc, #40]	@ (800d2f8 <__libc_init_array+0x40>)
 800d2d0:	4d0a      	ldr	r5, [pc, #40]	@ (800d2fc <__libc_init_array+0x44>)
 800d2d2:	1b64      	subs	r4, r4, r5
 800d2d4:	10a4      	asrs	r4, r4, #2
 800d2d6:	42a6      	cmp	r6, r4
 800d2d8:	d105      	bne.n	800d2e6 <__libc_init_array+0x2e>
 800d2da:	bd70      	pop	{r4, r5, r6, pc}
 800d2dc:	00b3      	lsls	r3, r6, #2
 800d2de:	58eb      	ldr	r3, [r5, r3]
 800d2e0:	4798      	blx	r3
 800d2e2:	3601      	adds	r6, #1
 800d2e4:	e7ee      	b.n	800d2c4 <__libc_init_array+0xc>
 800d2e6:	00b3      	lsls	r3, r6, #2
 800d2e8:	58eb      	ldr	r3, [r5, r3]
 800d2ea:	4798      	blx	r3
 800d2ec:	3601      	adds	r6, #1
 800d2ee:	e7f2      	b.n	800d2d6 <__libc_init_array+0x1e>
 800d2f0:	0800ddd0 	.word	0x0800ddd0
 800d2f4:	0800ddd0 	.word	0x0800ddd0
 800d2f8:	0800ddd4 	.word	0x0800ddd4
 800d2fc:	0800ddd0 	.word	0x0800ddd0

0800d300 <memcpy>:
 800d300:	2300      	movs	r3, #0
 800d302:	b510      	push	{r4, lr}
 800d304:	429a      	cmp	r2, r3
 800d306:	d100      	bne.n	800d30a <memcpy+0xa>
 800d308:	bd10      	pop	{r4, pc}
 800d30a:	5ccc      	ldrb	r4, [r1, r3]
 800d30c:	54c4      	strb	r4, [r0, r3]
 800d30e:	3301      	adds	r3, #1
 800d310:	e7f8      	b.n	800d304 <memcpy+0x4>
	...

0800d314 <_init>:
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	46c0      	nop			@ (mov r8, r8)
 800d318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d31a:	bc08      	pop	{r3}
 800d31c:	469e      	mov	lr, r3
 800d31e:	4770      	bx	lr

0800d320 <_fini>:
 800d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d322:	46c0      	nop			@ (mov r8, r8)
 800d324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d326:	bc08      	pop	{r3}
 800d328:	469e      	mov	lr, r3
 800d32a:	4770      	bx	lr
 800d32c:	0000      	movs	r0, r0
	...

0800d330 <__FLASH_Program_Fast_veneer>:
 800d330:	b401      	push	{r0}
 800d332:	4802      	ldr	r0, [pc, #8]	@ (800d33c <__FLASH_Program_Fast_veneer+0xc>)
 800d334:	4684      	mov	ip, r0
 800d336:	bc01      	pop	{r0}
 800d338:	4760      	bx	ip
 800d33a:	bf00      	nop
 800d33c:	2000044d 	.word	0x2000044d

Disassembly of section .data:

20000000 <user_preset_0>:
20000000:	407f6e7f 00000000                       .n.@....

20000008 <user_preset_1>:
20000008:	40402840 00000040                       @(@@@...

20000010 <user_preset_2>:
20000010:	007f4000 00000020                       .@.. ...

20000018 <user_preset_3>:
20000018:	7f7f4040                                 @@..d

2000001d <tap_tempo_switch_state_counter.1>:
2000001d:	                                         ...

20000020 <delay_line>:
	...
20000420:	00010000 00000200                       ........

20000428 <speed_fsm>:
20000428:	00000001                                ....

2000042c <depth_fsm>:
2000042c:	00000001                                ....

20000430 <waveshape_fsm>:
20000430:	00000001                                ....

20000434 <symmetry_fsm>:
20000434:	00000001                                ....

20000438 <phase_fsm>:
20000438:	00000001                                ....

2000043c <IP_CAP_fsm>:
2000043c:	00000400                                ....

20000440 <SystemCoreClock>:
20000440:	00f42400                                .$..

20000444 <uwTickPrio>:
20000444:	00000004                                ....

20000448 <uwTickFreq>:
20000448:	00000001                                ....

2000044c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000044c:	b580      	push	{r7, lr}
2000044e:	b088      	sub	sp, #32
20000450:	af00      	add	r7, sp, #0
20000452:	6078      	str	r0, [r7, #4]
20000454:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000456:	231f      	movs	r3, #31
20000458:	18fb      	adds	r3, r7, r3
2000045a:	2200      	movs	r2, #0
2000045c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000045e:	687b      	ldr	r3, [r7, #4]
20000460:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000462:	683b      	ldr	r3, [r7, #0]
20000464:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000466:	4b1a      	ldr	r3, [pc, #104]	@ (200004d0 <FLASH_Program_Fast+0x84>)
20000468:	695a      	ldr	r2, [r3, #20]
2000046a:	4b19      	ldr	r3, [pc, #100]	@ (200004d0 <FLASH_Program_Fast+0x84>)
2000046c:	2180      	movs	r1, #128	@ 0x80
2000046e:	02c9      	lsls	r1, r1, #11
20000470:	430a      	orrs	r2, r1
20000472:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000474:	f3ef 8310 	mrs	r3, PRIMASK
20000478:	60fb      	str	r3, [r7, #12]
  return(result);
2000047a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000047c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000047e:	b672      	cpsid	i
}
20000480:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000482:	e00f      	b.n	200004a4 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000484:	697a      	ldr	r2, [r7, #20]
20000486:	69bb      	ldr	r3, [r7, #24]
20000488:	6812      	ldr	r2, [r2, #0]
2000048a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000048c:	697b      	ldr	r3, [r7, #20]
2000048e:	3304      	adds	r3, #4
20000490:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000492:	69bb      	ldr	r3, [r7, #24]
20000494:	3304      	adds	r3, #4
20000496:	61bb      	str	r3, [r7, #24]
    index++;
20000498:	211f      	movs	r1, #31
2000049a:	187b      	adds	r3, r7, r1
2000049c:	781a      	ldrb	r2, [r3, #0]
2000049e:	187b      	adds	r3, r7, r1
200004a0:	3201      	adds	r2, #1
200004a2:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004a4:	231f      	movs	r3, #31
200004a6:	18fb      	adds	r3, r7, r3
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	@ 0x3f
200004ac:	d9ea      	bls.n	20000484 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200004ae:	46c0      	nop			@ (mov r8, r8)
200004b0:	4b07      	ldr	r3, [pc, #28]	@ (200004d0 <FLASH_Program_Fast+0x84>)
200004b2:	691a      	ldr	r2, [r3, #16]
200004b4:	2380      	movs	r3, #128	@ 0x80
200004b6:	025b      	lsls	r3, r3, #9
200004b8:	4013      	ands	r3, r2
200004ba:	d1f9      	bne.n	200004b0 <FLASH_Program_Fast+0x64>
200004bc:	693b      	ldr	r3, [r7, #16]
200004be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004c0:	68bb      	ldr	r3, [r7, #8]
200004c2:	f383 8810 	msr	PRIMASK, r3
}
200004c6:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004c8:	46c0      	nop			@ (mov r8, r8)
200004ca:	46bd      	mov	sp, r7
200004cc:	b008      	add	sp, #32
200004ce:	bd80      	pop	{r7, pc}
200004d0:	40022000 	.word	0x40022000
