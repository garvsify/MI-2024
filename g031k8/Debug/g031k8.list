
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d8c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  08007e48  08007e48  00008e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008998  08008998  0000a44c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008998  08008998  00009998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a0  080089a0  0000a44c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a0  080089a0  000099a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089a4  080089a4  000099a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000044c  20000000  080089a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000450  08008df4  0000a450  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000cd4  08008df4  0000acd4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a44c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c127  00000000  00000000  0000a474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056b2  00000000  00000000  0003659b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001250c  00000000  00000000  0003bc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0004e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020a9  00000000  00000000  0004f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a62b  00000000  00000000  00051769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d0e6  00000000  00000000  0006bd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1187  00000000  00000000  00098e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a001  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003834  00000000  00000000  0013a044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0013d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000450 	.word	0x20000450
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007e30 	.word	0x08007e30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000454 	.word	0x20000454
 8000100:	08007e30 	.word	0x08007e30

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
uint8_t Initialise_Preset_Arrays(void){

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){

		if(i == 0){
			factory_presets_array[i] = &factory_preset_0;
 8000448:	4a09      	ldr	r2, [pc, #36]	@ (8000470 <Initialise_Preset_Arrays+0x28>)
 800044a:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <Initialise_Preset_Arrays+0x2c>)
			user_presets_array[i] = &user_preset_0;
 800044c:	490a      	ldr	r1, [pc, #40]	@ (8000478 <Initialise_Preset_Arrays+0x30>)
			factory_presets_array[i] = &factory_preset_0;
 800044e:	6013      	str	r3, [r2, #0]
			user_presets_array[i] = &user_preset_0;
 8000450:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <Initialise_Preset_Arrays+0x34>)
			user_presets_array[i] = &user_preset_3;
		}
	}

	return 1;
}
 8000452:	2001      	movs	r0, #1
			user_presets_array[i] = &user_preset_0;
 8000454:	6019      	str	r1, [r3, #0]
			factory_presets_array[i] = &factory_preset_1;
 8000456:	490a      	ldr	r1, [pc, #40]	@ (8000480 <Initialise_Preset_Arrays+0x38>)
 8000458:	6051      	str	r1, [r2, #4]
			user_presets_array[i] = &user_preset_1;
 800045a:	490a      	ldr	r1, [pc, #40]	@ (8000484 <Initialise_Preset_Arrays+0x3c>)
 800045c:	6059      	str	r1, [r3, #4]
			factory_presets_array[i] = &factory_preset_2;
 800045e:	490a      	ldr	r1, [pc, #40]	@ (8000488 <Initialise_Preset_Arrays+0x40>)
 8000460:	6091      	str	r1, [r2, #8]
			user_presets_array[i] = &user_preset_2;
 8000462:	490a      	ldr	r1, [pc, #40]	@ (800048c <Initialise_Preset_Arrays+0x44>)
 8000464:	6099      	str	r1, [r3, #8]
			factory_presets_array[i] = &factory_preset_3;
 8000466:	490a      	ldr	r1, [pc, #40]	@ (8000490 <Initialise_Preset_Arrays+0x48>)
 8000468:	60d1      	str	r1, [r2, #12]
			user_presets_array[i] = &user_preset_3;
 800046a:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <Initialise_Preset_Arrays+0x4c>)
 800046c:	60da      	str	r2, [r3, #12]
}
 800046e:	4770      	bx	lr
 8000470:	200004b4 	.word	0x200004b4
 8000474:	08007e60 	.word	0x08007e60
 8000478:	20000018 	.word	0x20000018
 800047c:	200004a4 	.word	0x200004a4
 8000480:	08007e58 	.word	0x08007e58
 8000484:	20000010 	.word	0x20000010
 8000488:	08007e50 	.word	0x08007e50
 800048c:	20000008 	.word	0x20000008
 8000490:	08007e48 	.word	0x08007e48
 8000494:	20000000 	.word	0x20000000

08000498 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}

	if(waveshape_fsm.current_state == MANUAL_MODE){
 800049a:	4c65      	ldr	r4, [pc, #404]	@ (8000630 <Update_Params_Based_On_Mode_Selected+0x198>)
 800049c:	7823      	ldrb	r3, [r4, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d104      	bne.n	80004ac <Update_Params_Based_On_Mode_Selected+0x14>
		params.waveshape = params_manual.waveshape;
 80004a2:	4b64      	ldr	r3, [pc, #400]	@ (8000634 <Update_Params_Based_On_Mode_Selected+0x19c>)
 80004a4:	4a64      	ldr	r2, [pc, #400]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 80004a6:	799b      	ldrb	r3, [r3, #6]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	7193      	strb	r3, [r2, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 80004ac:	4863      	ldr	r0, [pc, #396]	@ (800063c <Update_Params_Based_On_Mode_Selected+0x1a4>)
 80004ae:	7803      	ldrb	r3, [r0, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d104      	bne.n	80004be <Update_Params_Based_On_Mode_Selected+0x26>
		params.speed = params_manual.speed;
 80004b4:	4b5f      	ldr	r3, [pc, #380]	@ (8000634 <Update_Params_Based_On_Mode_Selected+0x19c>)
 80004b6:	4a60      	ldr	r2, [pc, #384]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 80004b8:	891b      	ldrh	r3, [r3, #8]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	8113      	strh	r3, [r2, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 80004be:	4960      	ldr	r1, [pc, #384]	@ (8000640 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 80004c0:	780b      	ldrb	r3, [r1, #0]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d104      	bne.n	80004d0 <Update_Params_Based_On_Mode_Selected+0x38>
		params.depth = params_manual.depth;
 80004c6:	4b5b      	ldr	r3, [pc, #364]	@ (8000634 <Update_Params_Based_On_Mode_Selected+0x19c>)
 80004c8:	4a5b      	ldr	r2, [pc, #364]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 80004ca:	7a9b      	ldrb	r3, [r3, #10]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	7293      	strb	r3, [r2, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 80004d0:	4a5c      	ldr	r2, [pc, #368]	@ (8000644 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80004d2:	7813      	ldrb	r3, [r2, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d104      	bne.n	80004e2 <Update_Params_Based_On_Mode_Selected+0x4a>
		params.symmetry = params_manual.symmetry;
 80004d8:	4b56      	ldr	r3, [pc, #344]	@ (8000634 <Update_Params_Based_On_Mode_Selected+0x19c>)
 80004da:	4d57      	ldr	r5, [pc, #348]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 80004dc:	899b      	ldrh	r3, [r3, #12]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	81ab      	strh	r3, [r5, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 80004e2:	4b59      	ldr	r3, [pc, #356]	@ (8000648 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80004e4:	781d      	ldrb	r5, [r3, #0]
 80004e6:	2d01      	cmp	r5, #1
 80004e8:	d104      	bne.n	80004f4 <Update_Params_Based_On_Mode_Selected+0x5c>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 80004ea:	4d52      	ldr	r5, [pc, #328]	@ (8000634 <Update_Params_Based_On_Mode_Selected+0x19c>)
 80004ec:	4e52      	ldr	r6, [pc, #328]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 80004ee:	8c6d      	ldrh	r5, [r5, #34]	@ 0x22
 80004f0:	b2ad      	uxth	r5, r5
 80004f2:	8475      	strh	r5, [r6, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 80004f4:	7825      	ldrb	r5, [r4, #0]
 80004f6:	2d03      	cmp	r5, #3
 80004f8:	d100      	bne.n	80004fc <Update_Params_Based_On_Mode_Selected+0x64>
 80004fa:	e070      	b.n	80005de <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80004fc:	7805      	ldrb	r5, [r0, #0]
 80004fe:	2d03      	cmp	r5, #3
 8000500:	d10b      	bne.n	800051a <Update_Params_Based_On_Mode_Selected+0x82>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000502:	4d52      	ldr	r5, [pc, #328]	@ (800064c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000504:	782f      	ldrb	r7, [r5, #0]
	return 1;
}

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){

	params_ptr->speed = preset_converted_ptr->speed;
 8000506:	4d52      	ldr	r5, [pc, #328]	@ (8000650 <Update_Params_Based_On_Mode_Selected+0x1b8>)
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000508:	3f01      	subs	r7, #1
	params_ptr->speed = preset_converted_ptr->speed;
 800050a:	00be      	lsls	r6, r7, #2
 800050c:	19f6      	adds	r6, r6, r7
 800050e:	0076      	lsls	r6, r6, #1
 8000510:	19ad      	adds	r5, r5, r6
 8000512:	886d      	ldrh	r5, [r5, #2]
 8000514:	4e48      	ldr	r6, [pc, #288]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000516:	b2ad      	uxth	r5, r5
 8000518:	8135      	strh	r5, [r6, #8]
	if(depth_fsm.current_state == PC_MODE){
 800051a:	780d      	ldrb	r5, [r1, #0]
 800051c:	2d03      	cmp	r5, #3
 800051e:	d10b      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0xa0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000520:	4d4a      	ldr	r5, [pc, #296]	@ (800064c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000522:	782f      	ldrb	r7, [r5, #0]
	return 1;
}

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){

	params_ptr->depth = preset_converted_ptr->depth;
 8000524:	4d4a      	ldr	r5, [pc, #296]	@ (8000650 <Update_Params_Based_On_Mode_Selected+0x1b8>)
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000526:	3f01      	subs	r7, #1
	params_ptr->depth = preset_converted_ptr->depth;
 8000528:	00be      	lsls	r6, r7, #2
 800052a:	19f6      	adds	r6, r6, r7
 800052c:	0076      	lsls	r6, r6, #1
 800052e:	19ad      	adds	r5, r5, r6
 8000530:	792d      	ldrb	r5, [r5, #4]
 8000532:	4e41      	ldr	r6, [pc, #260]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000534:	b2ed      	uxtb	r5, r5
 8000536:	72b5      	strb	r5, [r6, #10]
	if(symmetry_fsm.current_state == PC_MODE){
 8000538:	7815      	ldrb	r5, [r2, #0]
 800053a:	2d03      	cmp	r5, #3
 800053c:	d10b      	bne.n	8000556 <Update_Params_Based_On_Mode_Selected+0xbe>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800053e:	4d43      	ldr	r5, [pc, #268]	@ (800064c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000540:	782f      	ldrb	r7, [r5, #0]
	return 1;
}

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000542:	4d43      	ldr	r5, [pc, #268]	@ (8000650 <Update_Params_Based_On_Mode_Selected+0x1b8>)
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000544:	3f01      	subs	r7, #1
	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000546:	00be      	lsls	r6, r7, #2
 8000548:	19f6      	adds	r6, r6, r7
 800054a:	0076      	lsls	r6, r6, #1
 800054c:	19ad      	adds	r5, r5, r6
 800054e:	88ed      	ldrh	r5, [r5, #6]
 8000550:	4e39      	ldr	r6, [pc, #228]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000552:	b2ad      	uxth	r5, r5
 8000554:	81b5      	strh	r5, [r6, #12]
	if(phase_fsm.current_state == PC_MODE){
 8000556:	781d      	ldrb	r5, [r3, #0]
 8000558:	2d03      	cmp	r5, #3
 800055a:	d10b      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0xdc>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800055c:	4d3b      	ldr	r5, [pc, #236]	@ (800064c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800055e:	782f      	ldrb	r7, [r5, #0]
	return 1;
}

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000560:	4d3b      	ldr	r5, [pc, #236]	@ (8000650 <Update_Params_Based_On_Mode_Selected+0x1b8>)
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000562:	3f01      	subs	r7, #1
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000564:	00be      	lsls	r6, r7, #2
 8000566:	19f6      	adds	r6, r6, r7
 8000568:	0076      	lsls	r6, r6, #1
 800056a:	19ad      	adds	r5, r5, r6
 800056c:	892d      	ldrh	r5, [r5, #8]
 800056e:	4e32      	ldr	r6, [pc, #200]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000570:	b2ad      	uxth	r5, r5
 8000572:	8475      	strh	r5, [r6, #34]	@ 0x22
	if(waveshape_fsm.current_state == CC_MODE){
 8000574:	7824      	ldrb	r4, [r4, #0]
 8000576:	b2e5      	uxtb	r5, r4
 8000578:	2c02      	cmp	r4, #2
 800057a:	d025      	beq.n	80005c8 <Update_Params_Based_On_Mode_Selected+0x130>
	if(speed_fsm.current_state.shared_state == CC_MODE){
 800057c:	7800      	ldrb	r0, [r0, #0]
 800057e:	2802      	cmp	r0, #2
 8000580:	d104      	bne.n	800058c <Update_Params_Based_On_Mode_Selected+0xf4>
	return 1;
}

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint16_t speed = (uint16_t)*data;
 8000582:	4834      	ldr	r0, [pc, #208]	@ (8000654 <Update_Params_Based_On_Mode_Selected+0x1bc>)

	speed <<= 3; //convert to 10-bit
	params_ptr->speed = speed;
 8000584:	4c2c      	ldr	r4, [pc, #176]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
	uint16_t speed = (uint16_t)*data;
 8000586:	7840      	ldrb	r0, [r0, #1]
	speed <<= 3; //convert to 10-bit
 8000588:	00c0      	lsls	r0, r0, #3
	params_ptr->speed = speed;
 800058a:	8120      	strh	r0, [r4, #8]
	if(depth_fsm.current_state == CC_MODE){
 800058c:	7809      	ldrb	r1, [r1, #0]
 800058e:	2902      	cmp	r1, #2
 8000590:	d104      	bne.n	800059c <Update_Params_Based_On_Mode_Selected+0x104>
	return 1;
}

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t depth = (uint8_t)*data;
 8000592:	4930      	ldr	r1, [pc, #192]	@ (8000654 <Update_Params_Based_On_Mode_Selected+0x1bc>)
	params_ptr->depth = depth;
 8000594:	4828      	ldr	r0, [pc, #160]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
	uint8_t depth = (uint8_t)*data;
 8000596:	7889      	ldrb	r1, [r1, #2]
 8000598:	b2c9      	uxtb	r1, r1
	params_ptr->depth = depth;
 800059a:	7281      	strb	r1, [r0, #10]
	if(symmetry_fsm.current_state == CC_MODE){
 800059c:	7812      	ldrb	r2, [r2, #0]
 800059e:	2a02      	cmp	r2, #2
 80005a0:	d106      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x118>
	return 1;
}

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t symmetry = (uint8_t)*data;
 80005a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000654 <Update_Params_Based_On_Mode_Selected+0x1bc>)

	symmetry <<= 1; //convert to 8-bit
	params_ptr->symmetry = symmetry;
 80005a4:	4924      	ldr	r1, [pc, #144]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
	uint8_t symmetry = (uint8_t)*data;
 80005a6:	78d2      	ldrb	r2, [r2, #3]
	symmetry <<= 1; //convert to 8-bit
 80005a8:	0052      	lsls	r2, r2, #1
	params_ptr->symmetry = symmetry;
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	b292      	uxth	r2, r2
 80005ae:	818a      	strh	r2, [r1, #12]
	if(phase_fsm.current_state == CC_MODE){
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d106      	bne.n	80005c4 <Update_Params_Based_On_Mode_Selected+0x12c>
	return 1;
}

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t phase = (uint8_t)*data;
 80005b6:	4b27      	ldr	r3, [pc, #156]	@ (8000654 <Update_Params_Based_On_Mode_Selected+0x1bc>)

	phase <<= 2; //convert to 9-bit
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 80005b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
	uint8_t phase = (uint8_t)*data;
 80005ba:	791b      	ldrb	r3, [r3, #4]
	phase <<= 2; //convert to 9-bit
 80005bc:	009b      	lsls	r3, r3, #2
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	8453      	strh	r3, [r2, #34]	@ 0x22
}
 80005c4:	2001      	movs	r0, #1
 80005c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 80005c8:	4c22      	ldr	r4, [pc, #136]	@ (8000654 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80005ca:	7826      	ldrb	r6, [r4, #0]
 80005cc:	2e2a      	cmp	r6, #42	@ 0x2a
 80005ce:	d91b      	bls.n	8000608 <Update_Params_Based_On_Mode_Selected+0x170>
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 80005d0:	7826      	ldrb	r6, [r4, #0]
 80005d2:	2e55      	cmp	r6, #85	@ 0x55
 80005d4:	d824      	bhi.n	8000620 <Update_Params_Based_On_Mode_Selected+0x188>
		params_ptr->waveshape = SINE_MODE;
 80005d6:	2501      	movs	r5, #1
 80005d8:	4c17      	ldr	r4, [pc, #92]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 80005da:	71a5      	strb	r5, [r4, #6]
 80005dc:	e7ce      	b.n	800057c <Update_Params_Based_On_Mode_Selected+0xe4>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005de:	4d1b      	ldr	r5, [pc, #108]	@ (800064c <Update_Params_Based_On_Mode_Selected+0x1b4>)
	uint8_t waveshape = preset_converted_ptr->waveshape;
 80005e0:	4e1b      	ldr	r6, [pc, #108]	@ (8000650 <Update_Params_Based_On_Mode_Selected+0x1b8>)
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	782f      	ldrb	r7, [r5, #0]
 80005e4:	3f01      	subs	r7, #1
	uint8_t waveshape = preset_converted_ptr->waveshape;
 80005e6:	00bd      	lsls	r5, r7, #2
 80005e8:	19ed      	adds	r5, r5, r7
 80005ea:	006d      	lsls	r5, r5, #1
 80005ec:	5dad      	ldrb	r5, [r5, r6]
 80005ee:	b2ee      	uxtb	r6, r5
	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 80005f0:	2d2a      	cmp	r5, #42	@ 0x2a
 80005f2:	d905      	bls.n	8000600 <Update_Params_Based_On_Mode_Selected+0x168>
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 80005f4:	2e55      	cmp	r6, #85	@ 0x55
 80005f6:	d80b      	bhi.n	8000610 <Update_Params_Based_On_Mode_Selected+0x178>
		params_ptr->waveshape = SINE_MODE; //sine wave
 80005f8:	2601      	movs	r6, #1
 80005fa:	4d0f      	ldr	r5, [pc, #60]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 80005fc:	71ae      	strb	r6, [r5, #6]
 80005fe:	e77d      	b.n	80004fc <Update_Params_Based_On_Mode_Selected+0x64>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8000600:	2600      	movs	r6, #0
 8000602:	4d0d      	ldr	r5, [pc, #52]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000604:	71ae      	strb	r6, [r5, #6]
 8000606:	e779      	b.n	80004fc <Update_Params_Based_On_Mode_Selected+0x64>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000608:	2500      	movs	r5, #0
 800060a:	4c0b      	ldr	r4, [pc, #44]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 800060c:	71a5      	strb	r5, [r4, #6]
 800060e:	e7b5      	b.n	800057c <Update_Params_Based_On_Mode_Selected+0xe4>
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 8000610:	b276      	sxtb	r6, r6
 8000612:	2e00      	cmp	r6, #0
 8000614:	da00      	bge.n	8000618 <Update_Params_Based_On_Mode_Selected+0x180>
 8000616:	e771      	b.n	80004fc <Update_Params_Based_On_Mode_Selected+0x64>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000618:	2602      	movs	r6, #2
 800061a:	4d07      	ldr	r5, [pc, #28]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 800061c:	71ae      	strb	r6, [r5, #6]
 800061e:	e76d      	b.n	80004fc <Update_Params_Based_On_Mode_Selected+0x64>
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000620:	7824      	ldrb	r4, [r4, #0]
 8000622:	b264      	sxtb	r4, r4
 8000624:	2c00      	cmp	r4, #0
 8000626:	dba9      	blt.n	800057c <Update_Params_Based_On_Mode_Selected+0xe4>
		params_ptr->waveshape = SQUARE_MODE;
 8000628:	4c03      	ldr	r4, [pc, #12]	@ (8000638 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 800062a:	71a5      	strb	r5, [r4, #6]
 800062c:	e7a6      	b.n	800057c <Update_Params_Based_On_Mode_Selected+0xe4>
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	20000434 	.word	0x20000434
 8000634:	20000c7c 	.word	0x20000c7c
 8000638:	20000ca0 	.word	0x20000ca0
 800063c:	2000043c 	.word	0x2000043c
 8000640:	20000438 	.word	0x20000438
 8000644:	20000430 	.word	0x20000430
 8000648:	2000042c 	.word	0x2000042c
 800064c:	20000478 	.word	0x20000478
 8000650:	2000047c 	.word	0x2000047c
 8000654:	2000046c 	.word	0x2000046c

08000658 <Read_and_Interpret_Misc_From_Flash>:
uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	4646      	mov	r6, r8
 800065c:	464f      	mov	r7, r9
 800065e:	46d6      	mov	lr, sl
 8000660:	b5c0      	push	{r6, r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	469a      	mov	sl, r3
 8000666:	ab0a      	add	r3, sp, #40	@ 0x28
 8000668:	781f      	ldrb	r7, [r3, #0]
	volatile uint8_t interpretted_value = 0;
 800066a:	466b      	mov	r3, sp
 800066c:	1dde      	adds	r6, r3, #7
 800066e:	2300      	movs	r3, #0
uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 8000670:	4680      	mov	r8, r0
 8000672:	4691      	mov	r9, r2
	volatile uint8_t interpretted_value = 0;
 8000674:	7033      	strb	r3, [r6, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000676:	2f00      	cmp	r7, #0
 8000678:	d014      	beq.n	80006a4 <Read_and_Interpret_Misc_From_Flash+0x4c>
 800067a:	1a42      	subs	r2, r0, r1
 800067c:	2400      	movs	r4, #0
			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 800067e:	2000      	movs	r0, #0
		interpretted_value = *(address + i);
 8000680:	5c53      	ldrb	r3, [r2, r1]
 8000682:	7033      	strb	r3, [r6, #0]
		if(interpretted_value == (enum Validate)YES){
 8000684:	7835      	ldrb	r5, [r6, #0]
 8000686:	b2eb      	uxtb	r3, r5
 8000688:	2d01      	cmp	r5, #1
 800068a:	d032      	beq.n	80006f2 <Read_and_Interpret_Misc_From_Flash+0x9a>
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 800068c:	7833      	ldrb	r3, [r6, #0]
 800068e:	2bff      	cmp	r3, #255	@ 0xff
 8000690:	d002      	beq.n	8000698 <Read_and_Interpret_Misc_From_Flash+0x40>
 8000692:	7833      	ldrb	r3, [r6, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d100      	bne.n	800069a <Read_and_Interpret_Misc_From_Flash+0x42>
			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 8000698:	7008      	strb	r0, [r1, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 800069a:	3401      	adds	r4, #1
 800069c:	b2e4      	uxtb	r4, r4
 800069e:	3101      	adds	r1, #1
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	d1ed      	bne.n	8000680 <Read_and_Interpret_Misc_From_Flash+0x28>
	interpretted_value = *(address + num_presets);
 80006a4:	4643      	mov	r3, r8
 80006a6:	5ddb      	ldrb	r3, [r3, r7]
 80006a8:	7033      	strb	r3, [r6, #0]
	if(interpretted_value == (enum Validate)NO){
 80006aa:	7833      	ldrb	r3, [r6, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d042      	beq.n	8000736 <Read_and_Interpret_Misc_From_Flash+0xde>
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 80006b0:	7833      	ldrb	r3, [r6, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d02f      	beq.n	8000716 <Read_and_Interpret_Misc_From_Flash+0xbe>
 80006b6:	7833      	ldrb	r3, [r6, #0]
 80006b8:	2bff      	cmp	r3, #255	@ 0xff
 80006ba:	d02c      	beq.n	8000716 <Read_and_Interpret_Misc_From_Flash+0xbe>
	interpretted_value = *(address + num_presets + 1);
 80006bc:	4447      	add	r7, r8
 80006be:	787b      	ldrb	r3, [r7, #1]
 80006c0:	7033      	strb	r3, [r6, #0]
	if(interpretted_value == (enum Validate)NO){
 80006c2:	7833      	ldrb	r3, [r6, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d030      	beq.n	800072a <Read_and_Interpret_Misc_From_Flash+0xd2>
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 80006c8:	7833      	ldrb	r3, [r6, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d01d      	beq.n	800070a <Read_and_Interpret_Misc_From_Flash+0xb2>
 80006ce:	7833      	ldrb	r3, [r6, #0]
 80006d0:	2bff      	cmp	r3, #255	@ 0xff
 80006d2:	d01a      	beq.n	800070a <Read_and_Interpret_Misc_From_Flash+0xb2>
	interpretted_value = *(address + num_presets + 2);
 80006d4:	78bb      	ldrb	r3, [r7, #2]
 80006d6:	7033      	strb	r3, [r6, #0]
	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 80006d8:	7833      	ldrb	r3, [r6, #0]
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	d910      	bls.n	8000700 <Read_and_Interpret_Misc_From_Flash+0xa8>
		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 80006de:	2300      	movs	r3, #0
 80006e0:	4652      	mov	r2, sl
 80006e2:	7013      	strb	r3, [r2, #0]
}
 80006e4:	2001      	movs	r0, #1
 80006e6:	b002      	add	sp, #8
 80006e8:	bce0      	pop	{r5, r6, r7}
 80006ea:	46ba      	mov	sl, r7
 80006ec:	46b1      	mov	r9, r6
 80006ee:	46a8      	mov	r8, r5
 80006f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint8_t i = 0; i < num_presets; i++){
 80006f2:	3401      	adds	r4, #1
 80006f4:	b2e4      	uxtb	r4, r4
			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 80006f6:	700b      	strb	r3, [r1, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 80006f8:	3101      	adds	r1, #1
 80006fa:	42a7      	cmp	r7, r4
 80006fc:	d1c0      	bne.n	8000680 <Read_and_Interpret_Misc_From_Flash+0x28>
 80006fe:	e7d1      	b.n	80006a4 <Read_and_Interpret_Misc_From_Flash+0x4c>
		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000700:	4652      	mov	r2, sl
 8000702:	7833      	ldrb	r3, [r6, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	7013      	strb	r3, [r2, #0]
 8000708:	e7ec      	b.n	80006e4 <Read_and_Interpret_Misc_From_Flash+0x8c>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 800070a:	2180      	movs	r1, #128	@ 0x80
 800070c:	4648      	mov	r0, r9
 800070e:	00c9      	lsls	r1, r1, #3
 8000710:	f002 fef4 	bl	80034fc <Set_Status_Bit>
 8000714:	e7de      	b.n	80006d4 <Read_and_Interpret_Misc_From_Flash+0x7c>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	4648      	mov	r0, r9
	interpretted_value = *(address + num_presets + 1);
 800071a:	4447      	add	r7, r8
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 800071c:	f002 feee 	bl	80034fc <Set_Status_Bit>
	interpretted_value = *(address + num_presets + 1);
 8000720:	787b      	ldrb	r3, [r7, #1]
 8000722:	7033      	strb	r3, [r6, #0]
	if(interpretted_value == (enum Validate)NO){
 8000724:	7833      	ldrb	r3, [r6, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1ce      	bne.n	80006c8 <Read_and_Interpret_Misc_From_Flash+0x70>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 800072a:	2180      	movs	r1, #128	@ 0x80
 800072c:	4648      	mov	r0, r9
 800072e:	00c9      	lsls	r1, r1, #3
 8000730:	f002 fee8 	bl	8003504 <Clear_Status_Bit>
 8000734:	e7ce      	b.n	80006d4 <Read_and_Interpret_Misc_From_Flash+0x7c>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000736:	2180      	movs	r1, #128	@ 0x80
 8000738:	4648      	mov	r0, r9
 800073a:	f002 fee3 	bl	8003504 <Clear_Status_Bit>
 800073e:	e7bd      	b.n	80006bc <Read_and_Interpret_Misc_From_Flash+0x64>

08000740 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:
																	uint8_t size_of_factory_and_user_arrays){
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000742:	469c      	mov	ip, r3
 8000744:	ab05      	add	r3, sp, #20
 8000746:	781b      	ldrb	r3, [r3, #0]
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000748:	2b00      	cmp	r3, #0
 800074a:	d022      	beq.n	8000792 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x52>
 800074c:	2500      	movs	r5, #0
 800074e:	2400      	movs	r4, #0
 8000750:	e018      	b.n	8000784 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x44>
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000752:	7836      	ldrb	r6, [r6, #0]
 8000754:	2e00      	cmp	r6, #0
 8000756:	d10f      	bne.n	8000778 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x38>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000758:	5956      	ldr	r6, [r2, r5]
	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800075a:	7837      	ldrb	r7, [r6, #0]
 800075c:	b2ff      	uxtb	r7, r7
 800075e:	7007      	strb	r7, [r0, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000760:	7877      	ldrb	r7, [r6, #1]
 8000762:	00ff      	lsls	r7, r7, #3
 8000764:	8047      	strh	r7, [r0, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000766:	78b7      	ldrb	r7, [r6, #2]
 8000768:	b2ff      	uxtb	r7, r7
 800076a:	7107      	strb	r7, [r0, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800076c:	78f7      	ldrb	r7, [r6, #3]
 800076e:	007f      	lsls	r7, r7, #1
 8000770:	80c7      	strh	r7, [r0, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 8000772:	7936      	ldrb	r6, [r6, #4]
 8000774:	00b6      	lsls	r6, r6, #2
 8000776:	8106      	strh	r6, [r0, #8]
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000778:	3401      	adds	r4, #1
 800077a:	b2e6      	uxtb	r6, r4
 800077c:	300a      	adds	r0, #10
 800077e:	3504      	adds	r5, #4
 8000780:	429e      	cmp	r6, r3
 8000782:	d206      	bcs.n	8000792 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x52>
		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000784:	190e      	adds	r6, r1, r4
 8000786:	7837      	ldrb	r7, [r6, #0]
 8000788:	2f01      	cmp	r7, #1
 800078a:	d1e2      	bne.n	8000752 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x12>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 800078c:	4666      	mov	r6, ip
 800078e:	5976      	ldr	r6, [r6, r5]
	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 8000790:	e7e3      	b.n	800075a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x1a>
}
 8000792:	2001      	movs	r0, #1
 8000794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)

08000798 <Read_and_Interpret_User_Presets_From_Flash>:
		if(*(flash + i) > 0x7F){ //127
 8000798:	4a48      	ldr	r2, [pc, #288]	@ (80008bc <Read_and_Interpret_User_Presets_From_Flash+0x124>)
			*(preset + i) = 0x7F;
 800079a:	217f      	movs	r1, #127	@ 0x7f
 800079c:	7810      	ldrb	r0, [r2, #0]
 800079e:	4b48      	ldr	r3, [pc, #288]	@ (80008c0 <Read_and_Interpret_User_Presets_From_Flash+0x128>)
 80007a0:	287e      	cmp	r0, #126	@ 0x7e
 80007a2:	d800      	bhi.n	80007a6 <Read_and_Interpret_User_Presets_From_Flash+0xe>
 80007a4:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 80007a6:	4a47      	ldr	r2, [pc, #284]	@ (80008c4 <Read_and_Interpret_User_Presets_From_Flash+0x12c>)
			*(preset + i) = 0x7F;
 80007a8:	7019      	strb	r1, [r3, #0]
 80007aa:	7810      	ldrb	r0, [r2, #0]
 80007ac:	217f      	movs	r1, #127	@ 0x7f
 80007ae:	287e      	cmp	r0, #126	@ 0x7e
 80007b0:	d800      	bhi.n	80007b4 <Read_and_Interpret_User_Presets_From_Flash+0x1c>
 80007b2:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 80007b4:	4a44      	ldr	r2, [pc, #272]	@ (80008c8 <Read_and_Interpret_User_Presets_From_Flash+0x130>)
			*(preset + i) = 0x7F;
 80007b6:	7059      	strb	r1, [r3, #1]
 80007b8:	7810      	ldrb	r0, [r2, #0]
 80007ba:	217f      	movs	r1, #127	@ 0x7f
 80007bc:	287e      	cmp	r0, #126	@ 0x7e
 80007be:	d800      	bhi.n	80007c2 <Read_and_Interpret_User_Presets_From_Flash+0x2a>
 80007c0:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 80007c2:	4a42      	ldr	r2, [pc, #264]	@ (80008cc <Read_and_Interpret_User_Presets_From_Flash+0x134>)
			*(preset + i) = 0x7F;
 80007c4:	7099      	strb	r1, [r3, #2]
 80007c6:	7810      	ldrb	r0, [r2, #0]
 80007c8:	217f      	movs	r1, #127	@ 0x7f
 80007ca:	287e      	cmp	r0, #126	@ 0x7e
 80007cc:	d800      	bhi.n	80007d0 <Read_and_Interpret_User_Presets_From_Flash+0x38>
 80007ce:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 80007d0:	4a3f      	ldr	r2, [pc, #252]	@ (80008d0 <Read_and_Interpret_User_Presets_From_Flash+0x138>)
			*(preset + i) = 0x7F;
 80007d2:	70d9      	strb	r1, [r3, #3]
 80007d4:	7810      	ldrb	r0, [r2, #0]
 80007d6:	217f      	movs	r1, #127	@ 0x7f
 80007d8:	287e      	cmp	r0, #126	@ 0x7e
 80007da:	d800      	bhi.n	80007de <Read_and_Interpret_User_Presets_From_Flash+0x46>
 80007dc:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 80007de:	4a3d      	ldr	r2, [pc, #244]	@ (80008d4 <Read_and_Interpret_User_Presets_From_Flash+0x13c>)
			*(preset + i) = 0x7F;
 80007e0:	7119      	strb	r1, [r3, #4]
 80007e2:	7810      	ldrb	r0, [r2, #0]
 80007e4:	217f      	movs	r1, #127	@ 0x7f
 80007e6:	4b3c      	ldr	r3, [pc, #240]	@ (80008d8 <Read_and_Interpret_User_Presets_From_Flash+0x140>)
 80007e8:	287e      	cmp	r0, #126	@ 0x7e
 80007ea:	d800      	bhi.n	80007ee <Read_and_Interpret_User_Presets_From_Flash+0x56>
 80007ec:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 80007ee:	4a3b      	ldr	r2, [pc, #236]	@ (80008dc <Read_and_Interpret_User_Presets_From_Flash+0x144>)
			*(preset + i) = 0x7F;
 80007f0:	7019      	strb	r1, [r3, #0]
 80007f2:	7810      	ldrb	r0, [r2, #0]
 80007f4:	217f      	movs	r1, #127	@ 0x7f
 80007f6:	287e      	cmp	r0, #126	@ 0x7e
 80007f8:	d800      	bhi.n	80007fc <Read_and_Interpret_User_Presets_From_Flash+0x64>
 80007fa:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 80007fc:	4a38      	ldr	r2, [pc, #224]	@ (80008e0 <Read_and_Interpret_User_Presets_From_Flash+0x148>)
			*(preset + i) = 0x7F;
 80007fe:	7059      	strb	r1, [r3, #1]
 8000800:	7810      	ldrb	r0, [r2, #0]
 8000802:	217f      	movs	r1, #127	@ 0x7f
 8000804:	287e      	cmp	r0, #126	@ 0x7e
 8000806:	d800      	bhi.n	800080a <Read_and_Interpret_User_Presets_From_Flash+0x72>
 8000808:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 800080a:	4a36      	ldr	r2, [pc, #216]	@ (80008e4 <Read_and_Interpret_User_Presets_From_Flash+0x14c>)
			*(preset + i) = 0x7F;
 800080c:	7099      	strb	r1, [r3, #2]
 800080e:	7810      	ldrb	r0, [r2, #0]
 8000810:	217f      	movs	r1, #127	@ 0x7f
 8000812:	287e      	cmp	r0, #126	@ 0x7e
 8000814:	d800      	bhi.n	8000818 <Read_and_Interpret_User_Presets_From_Flash+0x80>
 8000816:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 8000818:	4a33      	ldr	r2, [pc, #204]	@ (80008e8 <Read_and_Interpret_User_Presets_From_Flash+0x150>)
			*(preset + i) = 0x7F;
 800081a:	70d9      	strb	r1, [r3, #3]
 800081c:	7810      	ldrb	r0, [r2, #0]
 800081e:	217f      	movs	r1, #127	@ 0x7f
 8000820:	287e      	cmp	r0, #126	@ 0x7e
 8000822:	d800      	bhi.n	8000826 <Read_and_Interpret_User_Presets_From_Flash+0x8e>
 8000824:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 8000826:	4a31      	ldr	r2, [pc, #196]	@ (80008ec <Read_and_Interpret_User_Presets_From_Flash+0x154>)
			*(preset + i) = 0x7F;
 8000828:	7119      	strb	r1, [r3, #4]
 800082a:	7810      	ldrb	r0, [r2, #0]
 800082c:	217f      	movs	r1, #127	@ 0x7f
 800082e:	4b30      	ldr	r3, [pc, #192]	@ (80008f0 <Read_and_Interpret_User_Presets_From_Flash+0x158>)
 8000830:	287e      	cmp	r0, #126	@ 0x7e
 8000832:	d800      	bhi.n	8000836 <Read_and_Interpret_User_Presets_From_Flash+0x9e>
 8000834:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 8000836:	4a2f      	ldr	r2, [pc, #188]	@ (80008f4 <Read_and_Interpret_User_Presets_From_Flash+0x15c>)
			*(preset + i) = 0x7F;
 8000838:	7019      	strb	r1, [r3, #0]
 800083a:	7810      	ldrb	r0, [r2, #0]
 800083c:	217f      	movs	r1, #127	@ 0x7f
 800083e:	287e      	cmp	r0, #126	@ 0x7e
 8000840:	d800      	bhi.n	8000844 <Read_and_Interpret_User_Presets_From_Flash+0xac>
 8000842:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 8000844:	4a2c      	ldr	r2, [pc, #176]	@ (80008f8 <Read_and_Interpret_User_Presets_From_Flash+0x160>)
			*(preset + i) = 0x7F;
 8000846:	7059      	strb	r1, [r3, #1]
 8000848:	7810      	ldrb	r0, [r2, #0]
 800084a:	217f      	movs	r1, #127	@ 0x7f
 800084c:	287e      	cmp	r0, #126	@ 0x7e
 800084e:	d800      	bhi.n	8000852 <Read_and_Interpret_User_Presets_From_Flash+0xba>
 8000850:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 8000852:	4a2a      	ldr	r2, [pc, #168]	@ (80008fc <Read_and_Interpret_User_Presets_From_Flash+0x164>)
			*(preset + i) = 0x7F;
 8000854:	7099      	strb	r1, [r3, #2]
 8000856:	7810      	ldrb	r0, [r2, #0]
 8000858:	217f      	movs	r1, #127	@ 0x7f
 800085a:	287e      	cmp	r0, #126	@ 0x7e
 800085c:	d800      	bhi.n	8000860 <Read_and_Interpret_User_Presets_From_Flash+0xc8>
 800085e:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 8000860:	4a27      	ldr	r2, [pc, #156]	@ (8000900 <Read_and_Interpret_User_Presets_From_Flash+0x168>)
			*(preset + i) = 0x7F;
 8000862:	70d9      	strb	r1, [r3, #3]
 8000864:	7810      	ldrb	r0, [r2, #0]
 8000866:	217f      	movs	r1, #127	@ 0x7f
 8000868:	287e      	cmp	r0, #126	@ 0x7e
 800086a:	d800      	bhi.n	800086e <Read_and_Interpret_User_Presets_From_Flash+0xd6>
 800086c:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 800086e:	4a25      	ldr	r2, [pc, #148]	@ (8000904 <Read_and_Interpret_User_Presets_From_Flash+0x16c>)
			*(preset + i) = 0x7F;
 8000870:	7119      	strb	r1, [r3, #4]
 8000872:	7810      	ldrb	r0, [r2, #0]
 8000874:	217f      	movs	r1, #127	@ 0x7f
 8000876:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <Read_and_Interpret_User_Presets_From_Flash+0x170>)
 8000878:	287e      	cmp	r0, #126	@ 0x7e
 800087a:	d800      	bhi.n	800087e <Read_and_Interpret_User_Presets_From_Flash+0xe6>
 800087c:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 800087e:	4a23      	ldr	r2, [pc, #140]	@ (800090c <Read_and_Interpret_User_Presets_From_Flash+0x174>)
			*(preset + i) = 0x7F;
 8000880:	7019      	strb	r1, [r3, #0]
 8000882:	7810      	ldrb	r0, [r2, #0]
 8000884:	217f      	movs	r1, #127	@ 0x7f
 8000886:	287e      	cmp	r0, #126	@ 0x7e
 8000888:	d800      	bhi.n	800088c <Read_and_Interpret_User_Presets_From_Flash+0xf4>
 800088a:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 800088c:	4a20      	ldr	r2, [pc, #128]	@ (8000910 <Read_and_Interpret_User_Presets_From_Flash+0x178>)
			*(preset + i) = 0x7F;
 800088e:	7059      	strb	r1, [r3, #1]
 8000890:	7810      	ldrb	r0, [r2, #0]
 8000892:	217f      	movs	r1, #127	@ 0x7f
 8000894:	287e      	cmp	r0, #126	@ 0x7e
 8000896:	d800      	bhi.n	800089a <Read_and_Interpret_User_Presets_From_Flash+0x102>
 8000898:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 800089a:	4a1e      	ldr	r2, [pc, #120]	@ (8000914 <Read_and_Interpret_User_Presets_From_Flash+0x17c>)
			*(preset + i) = 0x7F;
 800089c:	7099      	strb	r1, [r3, #2]
 800089e:	7810      	ldrb	r0, [r2, #0]
 80008a0:	217f      	movs	r1, #127	@ 0x7f
 80008a2:	287e      	cmp	r0, #126	@ 0x7e
 80008a4:	d800      	bhi.n	80008a8 <Read_and_Interpret_User_Presets_From_Flash+0x110>
 80008a6:	1c01      	adds	r1, r0, #0
		if(*(flash + i) > 0x7F){ //127
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <Read_and_Interpret_User_Presets_From_Flash+0x180>)
			*(preset + i) = 0x7F;
 80008aa:	70d9      	strb	r1, [r3, #3]
 80008ac:	7810      	ldrb	r0, [r2, #0]
 80008ae:	217f      	movs	r1, #127	@ 0x7f
 80008b0:	287e      	cmp	r0, #126	@ 0x7e
 80008b2:	d800      	bhi.n	80008b6 <Read_and_Interpret_User_Presets_From_Flash+0x11e>
 80008b4:	1c01      	adds	r1, r0, #0
}
 80008b6:	2001      	movs	r0, #1
			*(preset + i) = 0x7F;
 80008b8:	7119      	strb	r1, [r3, #4]
}
 80008ba:	4770      	bx	lr
 80008bc:	0800f800 	.word	0x0800f800
 80008c0:	20000018 	.word	0x20000018
 80008c4:	0800f801 	.word	0x0800f801
 80008c8:	0800f802 	.word	0x0800f802
 80008cc:	0800f803 	.word	0x0800f803
 80008d0:	0800f804 	.word	0x0800f804
 80008d4:	0800f808 	.word	0x0800f808
 80008d8:	20000010 	.word	0x20000010
 80008dc:	0800f809 	.word	0x0800f809
 80008e0:	0800f80a 	.word	0x0800f80a
 80008e4:	0800f80b 	.word	0x0800f80b
 80008e8:	0800f80c 	.word	0x0800f80c
 80008ec:	0800f810 	.word	0x0800f810
 80008f0:	20000008 	.word	0x20000008
 80008f4:	0800f811 	.word	0x0800f811
 80008f8:	0800f812 	.word	0x0800f812
 80008fc:	0800f813 	.word	0x0800f813
 8000900:	0800f814 	.word	0x0800f814
 8000904:	0800f818 	.word	0x0800f818
 8000908:	20000000 	.word	0x20000000
 800090c:	0800f819 	.word	0x0800f819
 8000910:	0800f81a 	.word	0x0800f81a
 8000914:	0800f81b 	.word	0x0800f81b
 8000918:	0800f81c 	.word	0x0800f81c

0800091c <Set_Waveshape_to_CC_Mode_and_Value>:
	return 1;
}

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <Set_Waveshape_to_CC_Mode_and_Value+0x18>)
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000924:	2202      	movs	r2, #2
 8000926:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000928:	7802      	ldrb	r2, [r0, #0]
 800092a:	4b03      	ldr	r3, [pc, #12]	@ (8000938 <Set_Waveshape_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 800092c:	2001      	movs	r0, #1
	CC_array[WAVESHAPE_ARR] = *data;
 800092e:	701a      	strb	r2, [r3, #0]
}
 8000930:	4770      	bx	lr
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	20000434 	.word	0x20000434
 8000938:	2000046c 	.word	0x2000046c

0800093c <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800093c:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <Set_Speed_to_CC_Mode_and_Value+0x18>)
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000944:	2202      	movs	r2, #2
 8000946:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000948:	7802      	ldrb	r2, [r0, #0]
 800094a:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <Set_Speed_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 800094c:	2001      	movs	r0, #1
	CC_array[SPEED_ARR] = *data;
 800094e:	705a      	strb	r2, [r3, #1]
}
 8000950:	4770      	bx	lr
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	2000043c 	.word	0x2000043c
 8000958:	2000046c 	.word	0x2000046c

0800095c <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){

	depth_fsm.prev_state = depth_fsm.current_state;
 800095c:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <Set_Depth_to_CC_Mode_and_Value+0x18>)
 800095e:	781a      	ldrb	r2, [r3, #0]
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000964:	2202      	movs	r2, #2
 8000966:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000968:	7802      	ldrb	r2, [r0, #0]
 800096a:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <Set_Depth_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 800096c:	2001      	movs	r0, #1
	CC_array[DEPTH_ARR] = *data;
 800096e:	709a      	strb	r2, [r3, #2]
}
 8000970:	4770      	bx	lr
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	20000438 	.word	0x20000438
 8000978:	2000046c 	.word	0x2000046c

0800097c <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <Set_Symmetry_to_CC_Mode_and_Value+0x18>)
 800097e:	781a      	ldrb	r2, [r3, #0]
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000984:	2202      	movs	r2, #2
 8000986:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000988:	7802      	ldrb	r2, [r0, #0]
 800098a:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <Set_Symmetry_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 800098c:	2001      	movs	r0, #1
	CC_array[SYMMETRY_ARR] = *data;
 800098e:	70da      	strb	r2, [r3, #3]
}
 8000990:	4770      	bx	lr
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	20000430 	.word	0x20000430
 8000998:	2000046c 	.word	0x2000046c

0800099c <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){

	phase_fsm.prev_state = phase_fsm.current_state;
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <Set_Phase_to_CC_Mode_and_Value+0x18>)
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 80009a4:	2202      	movs	r2, #2
 80009a6:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 80009a8:	7802      	ldrb	r2, [r0, #0]
 80009aa:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <Set_Phase_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 80009ac:	2001      	movs	r0, #1
	CC_array[PHASE_ARR] = *data;
 80009ae:	711a      	strb	r2, [r3, #4]
}
 80009b0:	4770      	bx	lr
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	2000042c 	.word	0x2000042c
 80009b8:	2000046c 	.word	0x2000046c

080009bc <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80009bc:	4a0d      	ldr	r2, [pc, #52]	@ (80009f4 <Set_All_Pots_to_PC_Mode+0x38>)

	phase_fsm.prev_state = phase_fsm.current_state;
	phase_fsm.current_state = PC_MODE;

	return 1;
}
 80009be:	2001      	movs	r0, #1
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80009c0:	7813      	ldrb	r3, [r2, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	7053      	strb	r3, [r2, #1]
	waveshape_fsm.current_state = PC_MODE;
 80009c6:	2303      	movs	r3, #3
 80009c8:	7013      	strb	r3, [r2, #0]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <Set_All_Pots_to_PC_Mode+0x3c>)
 80009cc:	7811      	ldrb	r1, [r2, #0]
 80009ce:	b2c9      	uxtb	r1, r1
 80009d0:	7051      	strb	r1, [r2, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 80009d2:	7013      	strb	r3, [r2, #0]
	depth_fsm.prev_state = depth_fsm.current_state;
 80009d4:	4a09      	ldr	r2, [pc, #36]	@ (80009fc <Set_All_Pots_to_PC_Mode+0x40>)
 80009d6:	7811      	ldrb	r1, [r2, #0]
 80009d8:	b2c9      	uxtb	r1, r1
 80009da:	7051      	strb	r1, [r2, #1]
	depth_fsm.current_state = PC_MODE;
 80009dc:	7013      	strb	r3, [r2, #0]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80009de:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <Set_All_Pots_to_PC_Mode+0x44>)
 80009e0:	7811      	ldrb	r1, [r2, #0]
 80009e2:	b2c9      	uxtb	r1, r1
 80009e4:	7051      	strb	r1, [r2, #1]
	symmetry_fsm.current_state = PC_MODE;
 80009e6:	7013      	strb	r3, [r2, #0]
	phase_fsm.prev_state = phase_fsm.current_state;
 80009e8:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <Set_All_Pots_to_PC_Mode+0x48>)
 80009ea:	7811      	ldrb	r1, [r2, #0]
 80009ec:	b2c9      	uxtb	r1, r1
 80009ee:	7051      	strb	r1, [r2, #1]
	phase_fsm.current_state = PC_MODE;
 80009f0:	7013      	strb	r3, [r2, #0]
}
 80009f2:	4770      	bx	lr
 80009f4:	20000434 	.word	0x20000434
 80009f8:	2000043c 	.word	0x2000043c
 80009fc:	20000438 	.word	0x20000438
 8000a00:	20000430 	.word	0x20000430
 8000a04:	2000042c 	.word	0x2000042c

08000a08 <Is_Status_Byte>:
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){

	uint8_t MSB = *data;
 8000a08:	7800      	ldrb	r0, [r0, #0]
	}
	else{ //data byte

		return (enum Validate)NO;
	}
}
 8000a0a:	09c0      	lsrs	r0, r0, #7
 8000a0c:	4770      	bx	lr
 8000a0e:	46c0      	nop			@ (mov r8, r8)

08000a10 <Is_Data_Byte>:
	}
	else{ //data byte

		return (enum Validate)YES;
	}
}
 8000a10:	2301      	movs	r3, #1
	uint8_t MSB = *data;
 8000a12:	7800      	ldrb	r0, [r0, #0]
	MSB >>= 7;
 8000a14:	09c0      	lsrs	r0, r0, #7
}
 8000a16:	4058      	eors	r0, r3
 8000a18:	4770      	bx	lr
 8000a1a:	46c0      	nop			@ (mov r8, r8)

08000a1c <Is_PC_Status_Byte>:

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
	temp_data = *data >> 4;
 8000a1c:	7800      	ldrb	r0, [r0, #0]

	if(temp_data == source){
 8000a1e:	0900      	lsrs	r0, r0, #4
 8000a20:	380c      	subs	r0, #12
 8000a22:	4243      	negs	r3, r0
 8000a24:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000a26:	b2c0      	uxtb	r0, r0
 8000a28:	4770      	bx	lr
 8000a2a:	46c0      	nop			@ (mov r8, r8)

08000a2c <Is_CC_Status_Byte>:

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
	temp_data = *data >> 4;
 8000a2c:	7800      	ldrb	r0, [r0, #0]

	if(temp_data == source){
 8000a2e:	0900      	lsrs	r0, r0, #4
 8000a30:	380b      	subs	r0, #11
 8000a32:	4243      	negs	r3, r0
 8000a34:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000a36:	b2c0      	uxtb	r0, r0
 8000a38:	4770      	bx	lr
 8000a3a:	46c0      	nop			@ (mov r8, r8)

08000a3c <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000a3c:	7803      	ldrb	r3, [r0, #0]
 8000a3e:	2b77      	cmp	r3, #119	@ 0x77
 8000a40:	d910      	bls.n	8000a64 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000a42:	7803      	ldrb	r3, [r0, #0]
 8000a44:	2b79      	cmp	r3, #121	@ 0x79
 8000a46:	d00b      	beq.n	8000a60 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000a48:	7803      	ldrb	r3, [r0, #0]
 8000a4a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000a4c:	d008      	beq.n	8000a60 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000a4e:	7803      	ldrb	r3, [r0, #0]
 8000a50:	2b7d      	cmp	r3, #125	@ 0x7d
 8000a52:	d005      	beq.n	8000a60 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000a54:	7800      	ldrb	r0, [r0, #0]
 8000a56:	387c      	subs	r0, #124	@ 0x7c
 8000a58:	4243      	negs	r3, r0
 8000a5a:	4158      	adcs	r0, r3
 8000a5c:	b2c0      	uxtb	r0, r0
	}
	else{

		return (enum Validate)NO;
	}
}
 8000a5e:	4770      	bx	lr
			return (enum Validate)YES;
 8000a60:	2001      	movs	r0, #1
 8000a62:	e7fc      	b.n	8000a5e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x22>
			return (enum Validate)NO;
 8000a64:	2000      	movs	r0, #0
 8000a66:	e7fa      	b.n	8000a5e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x22>

08000a68 <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000a68:	7803      	ldrb	r3, [r0, #0]
 8000a6a:	2b77      	cmp	r3, #119	@ 0x77
 8000a6c:	d813      	bhi.n	8000a96 <Is_Utilised_CC_First_Data_Byte+0x2e>

		return (enum Validate)NO;
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000a6e:	7803      	ldrb	r3, [r0, #0]
 8000a70:	2b14      	cmp	r3, #20
 8000a72:	d00e      	beq.n	8000a92 <Is_Utilised_CC_First_Data_Byte+0x2a>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == SPEED_CC){
 8000a74:	7803      	ldrb	r3, [r0, #0]
 8000a76:	2b15      	cmp	r3, #21
 8000a78:	d00b      	beq.n	8000a92 <Is_Utilised_CC_First_Data_Byte+0x2a>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == DEPTH_CC){
 8000a7a:	7803      	ldrb	r3, [r0, #0]
 8000a7c:	2b16      	cmp	r3, #22
 8000a7e:	d008      	beq.n	8000a92 <Is_Utilised_CC_First_Data_Byte+0x2a>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000a80:	7803      	ldrb	r3, [r0, #0]
 8000a82:	2b17      	cmp	r3, #23
 8000a84:	d005      	beq.n	8000a92 <Is_Utilised_CC_First_Data_Byte+0x2a>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == PHASE_CC){
 8000a86:	7800      	ldrb	r0, [r0, #0]
 8000a88:	3818      	subs	r0, #24
 8000a8a:	4243      	negs	r3, r0
 8000a8c:	4158      	adcs	r0, r3
 8000a8e:	b2c0      	uxtb	r0, r0
		else{

			return (enum Validate)NO;
		}
	}
}
 8000a90:	4770      	bx	lr
			return (enum Validate)YES;
 8000a92:	2001      	movs	r0, #1
 8000a94:	e7fc      	b.n	8000a90 <Is_Utilised_CC_First_Data_Byte+0x28>
		return (enum Validate)NO;
 8000a96:	2000      	movs	r0, #0
 8000a98:	e7fa      	b.n	8000a90 <Is_Utilised_CC_First_Data_Byte+0x28>
 8000a9a:	46c0      	nop			@ (mov r8, r8)

08000a9c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000a9c:	7803      	ldrb	r3, [r0, #0]
 8000a9e:	2b79      	cmp	r3, #121	@ 0x79
 8000aa0:	d009      	beq.n	8000ab6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x1a>
		else{

			return (enum Validate)NO;
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000aa2:	7803      	ldrb	r3, [r0, #0]
 8000aa4:	2b7a      	cmp	r3, #122	@ 0x7a
 8000aa6:	d00b      	beq.n	8000ac0 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x24>
		else{

			return (enum Validate)NO;
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000aa8:	7803      	ldrb	r3, [r0, #0]
 8000aaa:	2b7c      	cmp	r3, #124	@ 0x7c
 8000aac:	d003      	beq.n	8000ab6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x1a>
		else{

			return (enum Validate)NO;
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8000aae:	7803      	ldrb	r3, [r0, #0]
			return (enum Validate)NO;
 8000ab0:	2000      	movs	r0, #0
	else if(*first_data_byte == OMNI_MODE_ON){
 8000ab2:	2b7d      	cmp	r3, #125	@ 0x7d
 8000ab4:	d103      	bne.n	8000abe <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

		if((*second_data_byte == 0)){
 8000ab6:	7808      	ldrb	r0, [r1, #0]
 8000ab8:	4243      	negs	r3, r0
 8000aba:	4158      	adcs	r0, r3
 8000abc:	b2c0      	uxtb	r0, r0
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
	}
}
 8000abe:	4770      	bx	lr
		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000ac0:	780b      	ldrb	r3, [r1, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d005      	beq.n	8000ad2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x36>
 8000ac6:	7808      	ldrb	r0, [r1, #0]
 8000ac8:	387f      	subs	r0, #127	@ 0x7f
 8000aca:	4243      	negs	r3, r0
 8000acc:	4158      	adcs	r0, r3
 8000ace:	b2c0      	uxtb	r0, r0
 8000ad0:	e7f5      	b.n	8000abe <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>
			return (enum Validate)YES;
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	e7f3      	b.n	8000abe <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>
 8000ad6:	46c0      	nop			@ (mov r8, r8)

08000ad8 <Is_Sysex_Start_Status_Byte>:
	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8000ad8:	7800      	ldrb	r0, [r0, #0]
 8000ada:	38f0      	subs	r0, #240	@ 0xf0
 8000adc:	4243      	negs	r3, r0
 8000ade:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000ae0:	b2c0      	uxtb	r0, r0
 8000ae2:	4770      	bx	lr

08000ae4 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	466b      	mov	r3, sp
 8000ae8:	71d9      	strb	r1, [r3, #7]

	uint8_t ch = *data & 0x0F;
 8000aea:	7802      	ldrb	r2, [r0, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;

	if(ch == b_ch){
 8000aec:	200f      	movs	r0, #15
enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000aee:	3307      	adds	r3, #7
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 8000af0:	781b      	ldrb	r3, [r3, #0]
	if(ch == b_ch){
 8000af2:	4010      	ands	r0, r2
 8000af4:	1ac0      	subs	r0, r0, r3
 8000af6:	4243      	negs	r3, r0
 8000af8:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000afa:	b2c0      	uxtb	r0, r0
 8000afc:	b002      	add	sp, #8
 8000afe:	4770      	bx	lr

08000b00 <Is_Data_Buffer_Empty>:

	uint16_t sum = 0;

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 8000b00:	7802      	ldrb	r2, [r0, #0]
 8000b02:	7843      	ldrb	r3, [r0, #1]
 8000b04:	18d2      	adds	r2, r2, r3
 8000b06:	7883      	ldrb	r3, [r0, #2]
 8000b08:	189b      	adds	r3, r3, r2
 8000b0a:	78c2      	ldrb	r2, [r0, #3]
 8000b0c:	18d2      	adds	r2, r2, r3
 8000b0e:	7903      	ldrb	r3, [r0, #4]
 8000b10:	189b      	adds	r3, r3, r2
 8000b12:	7942      	ldrb	r2, [r0, #5]
 8000b14:	18d2      	adds	r2, r2, r3
 8000b16:	7983      	ldrb	r3, [r0, #6]
 8000b18:	189b      	adds	r3, r3, r2
 8000b1a:	79c2      	ldrb	r2, [r0, #7]
 8000b1c:	18d2      	adds	r2, r2, r3
 8000b1e:	7a03      	ldrb	r3, [r0, #8]
 8000b20:	7a40      	ldrb	r0, [r0, #9]
 8000b22:	189b      	adds	r3, r3, r2
 8000b24:	18c0      	adds	r0, r0, r3
	}

	if(sum == 0){
 8000b26:	b280      	uxth	r0, r0
 8000b28:	4243      	negs	r3, r0
 8000b2a:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000b2c:	b2c0      	uxtb	r0, r0
 8000b2e:	4770      	bx	lr

08000b30 <Clear_Data_Buffer>:

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	7003      	strb	r3, [r0, #0]
 8000b34:	7043      	strb	r3, [r0, #1]
 8000b36:	7083      	strb	r3, [r0, #2]
 8000b38:	70c3      	strb	r3, [r0, #3]
 8000b3a:	7103      	strb	r3, [r0, #4]
 8000b3c:	7143      	strb	r3, [r0, #5]
 8000b3e:	7183      	strb	r3, [r0, #6]
 8000b40:	71c3      	strb	r3, [r0, #7]
 8000b42:	7203      	strb	r3, [r0, #8]
 8000b44:	7243      	strb	r3, [r0, #9]
	}

	return 1;
}
 8000b46:	2001      	movs	r0, #1
 8000b48:	4770      	bx	lr
 8000b4a:	46c0      	nop			@ (mov r8, r8)

08000b4c <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){

	if(*PC_data < size_of_factory_or_user_array){
 8000b4c:	7800      	ldrb	r0, [r0, #0]
	}
	else{

		return (enum Validate)NO;
	}
}
 8000b4e:	4288      	cmp	r0, r1
 8000b50:	4180      	sbcs	r0, r0
 8000b52:	4240      	negs	r0, r0
 8000b54:	4770      	bx	lr
 8000b56:	46c0      	nop			@ (mov r8, r8)

08000b58 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8000b58:	7803      	ldrb	r3, [r0, #0]
 8000b5a:	2bf8      	cmp	r3, #248	@ 0xf8
 8000b5c:	d011      	beq.n	8000b82 <Is_System_Real_Time_Status_Byte+0x2a>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 8000b5e:	7803      	ldrb	r3, [r0, #0]
 8000b60:	2bfa      	cmp	r3, #250	@ 0xfa
 8000b62:	d00e      	beq.n	8000b82 <Is_System_Real_Time_Status_Byte+0x2a>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 8000b64:	7803      	ldrb	r3, [r0, #0]
 8000b66:	2bfb      	cmp	r3, #251	@ 0xfb
 8000b68:	d00b      	beq.n	8000b82 <Is_System_Real_Time_Status_Byte+0x2a>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 8000b6a:	7803      	ldrb	r3, [r0, #0]
 8000b6c:	2bfc      	cmp	r3, #252	@ 0xfc
 8000b6e:	d008      	beq.n	8000b82 <Is_System_Real_Time_Status_Byte+0x2a>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8000b70:	7803      	ldrb	r3, [r0, #0]
 8000b72:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b74:	d005      	beq.n	8000b82 <Is_System_Real_Time_Status_Byte+0x2a>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8000b76:	7800      	ldrb	r0, [r0, #0]
 8000b78:	38ff      	subs	r0, #255	@ 0xff
 8000b7a:	4243      	negs	r3, r0
 8000b7c:	4158      	adcs	r0, r3
 8000b7e:	b2c0      	uxtb	r0, r0
 8000b80:	e000      	b.n	8000b84 <Is_System_Real_Time_Status_Byte+0x2c>
		return (enum Validate)YES;
 8000b82:	2001      	movs	r0, #1
		return (enum Validate)YES;
	}
	else{
		return (enum Validate)NO;
	}
}
 8000b84:	4770      	bx	lr
 8000b86:	46c0      	nop			@ (mov r8, r8)

08000b88 <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000b88:	2180      	movs	r1, #128	@ 0x80
enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 8000b8a:	b510      	push	{r4, lr}
	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000b8c:	00c9      	lsls	r1, r1, #3
 8000b8e:	f002 fcaf 	bl	80034f0 <Get_Status_Bit>

	if(omni_mode == 1){
 8000b92:	3801      	subs	r0, #1
 8000b94:	4243      	negs	r3, r0
 8000b96:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000b98:	b2c0      	uxtb	r0, r0
 8000b9a:	bd10      	pop	{r4, pc}

08000b9c <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	000c      	movs	r4, r1

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8000ba0:	2180      	movs	r1, #128	@ 0x80
uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8000ba2:	0005      	movs	r5, r0
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8000ba4:	0049      	lsls	r1, r1, #1
 8000ba6:	0020      	movs	r0, r4
 8000ba8:	f002 fcac 	bl	8003504 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 8000bac:	2180      	movs	r1, #128	@ 0x80
 8000bae:	0020      	movs	r0, r4
 8000bb0:	0089      	lsls	r1, r1, #2
 8000bb2:	f002 fca7 	bl	8003504 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8000bb6:	2300      	movs	r3, #0

	return 1;
}
 8000bb8:	2001      	movs	r0, #1
	*midi_counter_ptr = 0;
 8000bba:	602b      	str	r3, [r5, #0]
}
 8000bbc:	bd70      	pop	{r4, r5, r6, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)

08000bc0 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8000bc0:	b530      	push	{r4, r5, lr}

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000bc2:	4d11      	ldr	r5, [pc, #68]	@ (8000c08 <Reset_All_Controllers+0x48>)
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000bc4:	4c11      	ldr	r4, [pc, #68]	@ (8000c0c <Reset_All_Controllers+0x4c>)
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000bc6:	782b      	ldrb	r3, [r5, #0]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <Reset_All_Controllers+0x50>)
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	706b      	strb	r3, [r5, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000bce:	7823      	ldrb	r3, [r4, #0]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000bd0:	4910      	ldr	r1, [pc, #64]	@ (8000c14 <Reset_All_Controllers+0x54>)
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	7063      	strb	r3, [r4, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000bd6:	7803      	ldrb	r3, [r0, #0]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <Reset_All_Controllers+0x58>)
	depth_fsm.prev_state = depth_fsm.current_state;
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	7043      	strb	r3, [r0, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000bde:	780b      	ldrb	r3, [r1, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	704b      	strb	r3, [r1, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000be4:	7813      	ldrb	r3, [r2, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	7053      	strb	r3, [r2, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8000bea:	2302      	movs	r3, #2
 8000bec:	702b      	strb	r3, [r5, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000bee:	7023      	strb	r3, [r4, #0]
	depth_fsm.current_state = CC_MODE;
 8000bf0:	7003      	strb	r3, [r0, #0]
	symmetry_fsm.current_state = CC_MODE;
 8000bf2:	700b      	strb	r3, [r1, #0]
	phase_fsm.current_state = CC_MODE;
 8000bf4:	7013      	strb	r3, [r2, #0]

	uint8_t data = 127 >> 1;

	for(uint8_t index = 0; index < NUM_POTS; index++){

		CC_array[index] = data;
 8000bf6:	223f      	movs	r2, #63	@ 0x3f
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <Reset_All_Controllers+0x5c>)
	}

	return 1;
}
 8000bfa:	2001      	movs	r0, #1
		CC_array[index] = data;
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	705a      	strb	r2, [r3, #1]
 8000c00:	709a      	strb	r2, [r3, #2]
 8000c02:	70da      	strb	r2, [r3, #3]
 8000c04:	711a      	strb	r2, [r3, #4]
}
 8000c06:	bd30      	pop	{r4, r5, pc}
 8000c08:	20000434 	.word	0x20000434
 8000c0c:	2000043c 	.word	0x2000043c
 8000c10:	20000438 	.word	0x20000438
 8000c14:	20000430 	.word	0x20000430
 8000c18:	2000042c 	.word	0x2000042c
 8000c1c:	2000046c 	.word	0x2000046c

08000c20 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 8000c20:	b530      	push	{r4, r5, lr}

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c22:	4d0e      	ldr	r5, [pc, #56]	@ (8000c5c <Set_Local_Control+0x3c>)
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c24:	4c0e      	ldr	r4, [pc, #56]	@ (8000c60 <Set_Local_Control+0x40>)
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c26:	782b      	ldrb	r3, [r5, #0]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000c28:	480e      	ldr	r0, [pc, #56]	@ (8000c64 <Set_Local_Control+0x44>)
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	706b      	strb	r3, [r5, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c2e:	7823      	ldrb	r3, [r4, #0]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000c30:	490d      	ldr	r1, [pc, #52]	@ (8000c68 <Set_Local_Control+0x48>)
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	7063      	strb	r3, [r4, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000c36:	7803      	ldrb	r3, [r0, #0]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000c38:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <Set_Local_Control+0x4c>)
	depth_fsm.prev_state = depth_fsm.current_state;
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	7043      	strb	r3, [r0, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000c3e:	780b      	ldrb	r3, [r1, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	704b      	strb	r3, [r1, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000c44:	7813      	ldrb	r3, [r2, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	7053      	strb	r3, [r2, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	702b      	strb	r3, [r5, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8000c4e:	7023      	strb	r3, [r4, #0]
	depth_fsm.current_state = MANUAL_MODE;
 8000c50:	7003      	strb	r3, [r0, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
	phase_fsm.current_state = MANUAL_MODE;

	return 1;
}
 8000c52:	2001      	movs	r0, #1
	symmetry_fsm.current_state = MANUAL_MODE;
 8000c54:	700b      	strb	r3, [r1, #0]
	phase_fsm.current_state = MANUAL_MODE;
 8000c56:	7013      	strb	r3, [r2, #0]
}
 8000c58:	bd30      	pop	{r4, r5, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	20000434 	.word	0x20000434
 8000c60:	2000043c 	.word	0x2000043c
 8000c64:	20000438 	.word	0x20000438
 8000c68:	20000430 	.word	0x20000430
 8000c6c:	2000042c 	.word	0x2000042c

08000c70 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000c70:	2180      	movs	r1, #128	@ 0x80
uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8000c72:	b510      	push	{r4, lr}
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000c74:	00c9      	lsls	r1, r1, #3
 8000c76:	f002 fc45 	bl	8003504 <Clear_Status_Bit>

	return 1;
}
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	bd10      	pop	{r4, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)

08000c80 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000c80:	2180      	movs	r1, #128	@ 0x80
uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 8000c82:	b510      	push	{r4, lr}
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000c84:	00c9      	lsls	r1, r1, #3
 8000c86:	f002 fc39 	bl	80034fc <Set_Status_Bit>

	return 1;
}
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	bd10      	pop	{r4, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)

08000c90 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 8000c90:	b510      	push	{r4, lr}

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8000c92:	2201      	movs	r2, #1
 8000c94:	4902      	ldr	r1, [pc, #8]	@ (8000ca0 <Start_UART_Receive+0x10>)
 8000c96:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <Start_UART_Receive+0x14>)
 8000c98:	f006 fad2 	bl	8007240 <HAL_UART_Receive_DMA>

	return 1;
}
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	bd10      	pop	{r4, pc}
 8000ca0:	200004d4 	.word	0x200004d4
 8000ca4:	20000604 	.word	0x20000604

08000ca8 <Pot_Check>:
volatile uint8_t depth_pot_adc_measurement_num = 0;
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(struct Params* params_ptr, enum Pot_Type pot_type){
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	2904      	cmp	r1, #4
 8000cac:	d900      	bls.n	8000cb0 <Pot_Check+0x8>
 8000cae:	e06f      	b.n	8000d90 <Pot_Check+0xe8>
 8000cb0:	4b39      	ldr	r3, [pc, #228]	@ (8000d98 <Pot_Check+0xf0>)
 8000cb2:	0089      	lsls	r1, r1, #2
 8000cb4:	585b      	ldr	r3, [r3, r1]
 8000cb6:	469f      	mov	pc, r3
	else if(pot_type == SYMMETRY_POT){

		first_measurement_ptr = &first_symmetry_measurement;
		second_measurement_ptr = &second_symmetry_measurement;
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
		measurement_ptr = (uint16_t*)&params_ptr->symmetry;
 8000cb8:	2602      	movs	r6, #2
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8000cba:	2700      	movs	r7, #0
		tolerance = SYMMETRY_TOLERANCE;
		normal_fsm_ptr = &symmetry_fsm;
 8000cbc:	4d37      	ldr	r5, [pc, #220]	@ (8000d9c <Pot_Check+0xf4>)
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 8000cbe:	4b38      	ldr	r3, [pc, #224]	@ (8000da0 <Pot_Check+0xf8>)
		second_measurement_ptr = &second_symmetry_measurement;
 8000cc0:	4c38      	ldr	r4, [pc, #224]	@ (8000da4 <Pot_Check+0xfc>)
		first_measurement_ptr = &first_symmetry_measurement;
 8000cc2:	4939      	ldr	r1, [pc, #228]	@ (8000da8 <Pot_Check+0x100>)
		measurement_ptr = (uint16_t*)&params_ptr->symmetry;
 8000cc4:	300c      	adds	r0, #12
		measurement_ptr = (uint16_t*)&params_ptr->duty_delay_line_read_pointer_offset;
		tolerance = PHASE_TOLERANCE;
		normal_fsm_ptr = &phase_fsm;
	}

	if(*measurement_num_ptr == 0){
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d111      	bne.n	8000cf0 <Pot_Check+0x48>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8000ccc:	8802      	ldrh	r2, [r0, #0]
 8000cce:	800a      	strh	r2, [r1, #0]

			(*measurement_num_ptr)++;
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	3201      	adds	r2, #1
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return 1;
}
 8000cd8:	2001      	movs	r0, #1
 8000cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8000cdc:	4b33      	ldr	r3, [pc, #204]	@ (8000dac <Pot_Check+0x104>)
		measurement_ptr = (uint16_t*)&params_ptr->duty_delay_line_read_pointer_offset;
 8000cde:	2603      	movs	r6, #3
	if(*measurement_num_ptr == 0){
 8000ce0:	781a      	ldrb	r2, [r3, #0]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8000ce2:	2700      	movs	r7, #0
		normal_fsm_ptr = &phase_fsm;
 8000ce4:	4d32      	ldr	r5, [pc, #200]	@ (8000db0 <Pot_Check+0x108>)
		second_measurement_ptr = &second_phase_measurement;
 8000ce6:	4c33      	ldr	r4, [pc, #204]	@ (8000db4 <Pot_Check+0x10c>)
		first_measurement_ptr = &first_phase_measurement;
 8000ce8:	4933      	ldr	r1, [pc, #204]	@ (8000db8 <Pot_Check+0x110>)
		measurement_ptr = (uint16_t*)&params_ptr->duty_delay_line_read_pointer_offset;
 8000cea:	3022      	adds	r0, #34	@ 0x22
	if(*measurement_num_ptr == 0){
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	d0ed      	beq.n	8000ccc <Pot_Check+0x24>
	else if(*measurement_num_ptr == 1){
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	2a01      	cmp	r2, #1
 8000cf4:	d02c      	beq.n	8000d50 <Pot_Check+0xa8>
	else if(*measurement_num_ptr == 2){
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	2a02      	cmp	r2, #2
 8000cfa:	d1ed      	bne.n	8000cd8 <Pot_Check+0x30>
		*measurement_num_ptr = 0;
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
		if(*first_measurement_ptr > *second_measurement_ptr){
 8000d00:	880b      	ldrh	r3, [r1, #0]
 8000d02:	8822      	ldrh	r2, [r4, #0]
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d92a      	bls.n	8000d5e <Pot_Check+0xb6>
			diff = *first_measurement_ptr - *second_measurement_ptr;
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	b29b      	uxth	r3, r3
		if(diff > tolerance){
 8000d0c:	42b3      	cmp	r3, r6
 8000d0e:	d9e3      	bls.n	8000cd8 <Pot_Check+0x30>
			if(normal_fsm_ptr != NULL){
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d029      	beq.n	8000d68 <Pot_Check+0xc0>
				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8000d14:	782b      	ldrb	r3, [r5, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	706b      	strb	r3, [r5, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	702b      	strb	r3, [r5, #0]
 8000d1e:	e7db      	b.n	8000cd8 <Pot_Check+0x30>
		measurement_ptr = (uint16_t*)&params_ptr->speed;
 8000d20:	2606      	movs	r6, #6
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8000d22:	2500      	movs	r5, #0
		speed_fsm_ptr = &speed_fsm;
 8000d24:	4f25      	ldr	r7, [pc, #148]	@ (8000dbc <Pot_Check+0x114>)
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8000d26:	4b26      	ldr	r3, [pc, #152]	@ (8000dc0 <Pot_Check+0x118>)
		second_measurement_ptr = &second_speed_measurement;
 8000d28:	4c26      	ldr	r4, [pc, #152]	@ (8000dc4 <Pot_Check+0x11c>)
		first_measurement_ptr = &first_speed_measurement;
 8000d2a:	4927      	ldr	r1, [pc, #156]	@ (8000dc8 <Pot_Check+0x120>)
		measurement_ptr = (uint16_t*)&params_ptr->speed;
 8000d2c:	3008      	adds	r0, #8
		speed_fsm_ptr = &speed_fsm;
 8000d2e:	e7ca      	b.n	8000cc6 <Pot_Check+0x1e>
		measurement_ptr = (uint16_t*)&params_ptr->depth;
 8000d30:	2602      	movs	r6, #2
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8000d32:	2700      	movs	r7, #0
		normal_fsm_ptr = &depth_fsm;
 8000d34:	4d25      	ldr	r5, [pc, #148]	@ (8000dcc <Pot_Check+0x124>)
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <Pot_Check+0x128>)
		second_measurement_ptr = &second_depth_measurement;
 8000d38:	4c26      	ldr	r4, [pc, #152]	@ (8000dd4 <Pot_Check+0x12c>)
		first_measurement_ptr = &first_depth_measurement;
 8000d3a:	4927      	ldr	r1, [pc, #156]	@ (8000dd8 <Pot_Check+0x130>)
		measurement_ptr = (uint16_t*)&params_ptr->depth;
 8000d3c:	300a      	adds	r0, #10
		normal_fsm_ptr = &depth_fsm;
 8000d3e:	e7c2      	b.n	8000cc6 <Pot_Check+0x1e>
		measurement_ptr = (uint16_t*)&params_ptr->waveshape;
 8000d40:	2602      	movs	r6, #2
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8000d42:	2700      	movs	r7, #0
		normal_fsm_ptr = &waveshape_fsm;
 8000d44:	4d25      	ldr	r5, [pc, #148]	@ (8000ddc <Pot_Check+0x134>)
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <Pot_Check+0x138>)
		second_measurement_ptr = &second_waveshape_measurement;
 8000d48:	4c26      	ldr	r4, [pc, #152]	@ (8000de4 <Pot_Check+0x13c>)
		first_measurement_ptr = &first_waveshape_measurement;
 8000d4a:	4927      	ldr	r1, [pc, #156]	@ (8000de8 <Pot_Check+0x140>)
		measurement_ptr = (uint16_t*)&params_ptr->waveshape;
 8000d4c:	3006      	adds	r0, #6
		normal_fsm_ptr = &waveshape_fsm;
 8000d4e:	e7ba      	b.n	8000cc6 <Pot_Check+0x1e>
		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8000d50:	8802      	ldrh	r2, [r0, #0]
 8000d52:	8022      	strh	r2, [r4, #0]
		(*measurement_num_ptr)++;
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	3201      	adds	r2, #1
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	e7bc      	b.n	8000cd8 <Pot_Check+0x30>
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d2ba      	bcs.n	8000cd8 <Pot_Check+0x30>
			diff = *second_measurement_ptr - *first_measurement_ptr;
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	e7d1      	b.n	8000d0c <Pot_Check+0x64>
			else if(speed_fsm_ptr != NULL){
 8000d68:	2f00      	cmp	r7, #0
 8000d6a:	d0b5      	beq.n	8000cd8 <Pot_Check+0x30>
				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8000d6c:	783b      	ldrb	r3, [r7, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8000d6e:	4c1f      	ldr	r4, [pc, #124]	@ (8000dec <Pot_Check+0x144>)
				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8000d70:	707b      	strb	r3, [r7, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8000d72:	2301      	movs	r3, #1
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8000d74:	0020      	movs	r0, r4
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8000d76:	703b      	strb	r3, [r7, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8000d78:	2120      	movs	r1, #32
 8000d7a:	f002 fbc3 	bl	8003504 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8000d7e:	0020      	movs	r0, r4
 8000d80:	2140      	movs	r1, #64	@ 0x40
 8000d82:	f002 fbbf 	bl	8003504 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8000d86:	2108      	movs	r1, #8
 8000d88:	0020      	movs	r0, r4
 8000d8a:	f002 fbbb 	bl	8003504 <Clear_Status_Bit>
	return 1;
 8000d8e:	e7a3      	b.n	8000cd8 <Pot_Check+0x30>
	if(*measurement_num_ptr == 0){
 8000d90:	2300      	movs	r3, #0
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	deff      	udf	#255	@ 0xff
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	08007e68 	.word	0x08007e68
 8000d9c:	20000430 	.word	0x20000430
 8000da0:	200004eb 	.word	0x200004eb
 8000da4:	200004da 	.word	0x200004da
 8000da8:	200004dc 	.word	0x200004dc
 8000dac:	200004ea 	.word	0x200004ea
 8000db0:	2000042c 	.word	0x2000042c
 8000db4:	200004d6 	.word	0x200004d6
 8000db8:	200004d8 	.word	0x200004d8
 8000dbc:	2000043c 	.word	0x2000043c
 8000dc0:	200004ed 	.word	0x200004ed
 8000dc4:	200004e2 	.word	0x200004e2
 8000dc8:	200004e4 	.word	0x200004e4
 8000dcc:	20000438 	.word	0x20000438
 8000dd0:	200004ec 	.word	0x200004ec
 8000dd4:	200004de 	.word	0x200004de
 8000dd8:	200004e0 	.word	0x200004e0
 8000ddc:	20000434 	.word	0x20000434
 8000de0:	200004ee 	.word	0x200004ee
 8000de4:	200004e6 	.word	0x200004e6
 8000de8:	200004e8 	.word	0x200004e8
 8000dec:	20000c30 	.word	0x20000c30

08000df0 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8000df0:	b510      	push	{r4, lr}

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8000df2:	2180      	movs	r1, #128	@ 0x80
uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8000df4:	0004      	movs	r4, r0
	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8000df6:	20a0      	movs	r0, #160	@ 0xa0
 8000df8:	00c9      	lsls	r1, r1, #3
 8000dfa:	05c0      	lsls	r0, r0, #23
 8000dfc:	f003 fd2e 	bl	800485c <HAL_GPIO_ReadPin>

	if(switch_state == 0){
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d10d      	bne.n	8000e20 <Check_Tap_Tempo_Switch_State+0x30>

		if(tap_tempo_switch_state_counter != 0){
 8000e04:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <Check_Tap_Tempo_Switch_State+0x5c>)
 8000e06:	7813      	ldrb	r3, [r2, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d015      	beq.n	8000e38 <Check_Tap_Tempo_Switch_State+0x48>

			tap_tempo_switch_state_counter--;
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	7013      	strb	r3, [r2, #0]
				extend_rising_edge++;
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d010      	beq.n	8000e38 <Check_Tap_Tempo_Switch_State+0x48>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8000e16:	2b0e      	cmp	r3, #14
 8000e18:	d110      	bne.n	8000e3c <Check_Tap_Tempo_Switch_State+0x4c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	7023      	strb	r3, [r4, #0]
 8000e1e:	e00d      	b.n	8000e3c <Check_Tap_Tempo_Switch_State+0x4c>
		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8000e20:	490a      	ldr	r1, [pc, #40]	@ (8000e4c <Check_Tap_Tempo_Switch_State+0x5c>)
 8000e22:	780b      	ldrb	r3, [r1, #0]
 8000e24:	2b0e      	cmp	r3, #14
 8000e26:	d0f8      	beq.n	8000e1a <Check_Tap_Tempo_Switch_State+0x2a>
			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 8000e28:	4809      	ldr	r0, [pc, #36]	@ (8000e50 <Check_Tap_Tempo_Switch_State+0x60>)
 8000e2a:	7802      	ldrb	r2, [r0, #0]
 8000e2c:	2a04      	cmp	r2, #4
 8000e2e:	d007      	beq.n	8000e40 <Check_Tap_Tempo_Switch_State+0x50>
				extend_rising_edge++;
 8000e30:	3201      	adds	r2, #1
 8000e32:	7002      	strb	r2, [r0, #0]
	if(tap_tempo_switch_state_counter == 0){
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <Check_Tap_Tempo_Switch_State+0x4c>
		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	7023      	strb	r3, [r4, #0]
	}

	return 1;
}
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	bd10      	pop	{r4, pc}
				extend_rising_edge = 0;
 8000e40:	2200      	movs	r2, #0
				tap_tempo_switch_state_counter++;
 8000e42:	3301      	adds	r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	700b      	strb	r3, [r1, #0]
				extend_rising_edge = 0;
 8000e48:	7002      	strb	r2, [r0, #0]
 8000e4a:	e7e2      	b.n	8000e12 <Check_Tap_Tempo_Switch_State+0x22>
 8000e4c:	2000001d 	.word	0x2000001d
 8000e50:	200004d5 	.word	0x200004d5

08000e54 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8000e54:	b500      	push	{lr}
 8000e56:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e58:	2238      	movs	r2, #56	@ 0x38
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	a804      	add	r0, sp, #16
 8000e5e:	f006 ffb1 	bl	8007dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e62:	2210      	movs	r2, #16
 8000e64:	2100      	movs	r1, #0
 8000e66:	4668      	mov	r0, sp
 8000e68:	f006 ffac 	bl	8007dc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6c:	2080      	movs	r0, #128	@ 0x80
 8000e6e:	0080      	lsls	r0, r0, #2
 8000e70:	f003 ff96 	bl	8004da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e74:	2302      	movs	r3, #2
 8000e76:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e78:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7a:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e7c:	3306      	adds	r3, #6
 8000e7e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	029b      	lsls	r3, r3, #10
 8000e84:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000e86:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000e8a:	04db      	lsls	r3, r3, #19
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8c:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000e8e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e90:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e96:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e98:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e9c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9e:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ea0:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ea2:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea4:	f003 ffac 	bl	8004e00 <HAL_RCC_OscConfig>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i

void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eae:	e7fe      	b.n	8000eae <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	9200      	str	r2, [sp, #0]
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	9202      	str	r2, [sp, #8]
 8000ec2:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec4:	f004 fa52 	bl	800536c <HAL_RCC_ClockConfig>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x7c>
 8000ecc:	b672      	cpsid	i
  while (1)
 8000ece:	e7fe      	b.n	8000ece <SystemClock_Config+0x7a>
}
 8000ed0:	b013      	add	sp, #76	@ 0x4c
 8000ed2:	bd00      	pop	{pc}

08000ed4 <MX_ADC1_Init>:
{
 8000ed4:	b530      	push	{r4, r5, lr}
 8000ed6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed8:	220c      	movs	r2, #12
 8000eda:	2100      	movs	r1, #0
 8000edc:	a801      	add	r0, sp, #4
 8000ede:	f006 ff71 	bl	8007dc4 <memset>
  hadc1.Instance = ADC1;
 8000ee2:	4c33      	ldr	r4, [pc, #204]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000ee4:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <MX_ADC1_Init+0xe0>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ee6:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 8000ee8:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eea:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.NbrOfConversion = 5;
 8000eec:	2105      	movs	r1, #5
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eee:	0392      	lsls	r2, r2, #14
 8000ef0:	6122      	str	r2, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ef2:	2200      	movs	r2, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef4:	05db      	lsls	r3, r3, #23
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ef6:	2508      	movs	r5, #8
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef8:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efa:	2300      	movs	r3, #0
  hadc1.Init.NbrOfConversion = 5;
 8000efc:	61e1      	str	r1, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	311b      	adds	r1, #27
 8000f00:	5462      	strb	r2, [r4, r1]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f02:	310c      	adds	r1, #12
 8000f04:	5462      	strb	r2, [r4, r1]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f06:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8000f08:	3110      	adds	r1, #16
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f0a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0c:	60e3      	str	r3, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f0e:	6165      	str	r5, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f10:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f12:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f14:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f16:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f18:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000f1a:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000f1c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1e:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f20:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f22:	f002 fbc5 	bl	80036b0 <HAL_ADC_Init>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x5a>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_0;
 8000f2e:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f30:	9002      	str	r0, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f32:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	a901      	add	r1, sp, #4
 8000f36:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8000f38:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	f002 fd33 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0x72>
 8000f42:	b672      	cpsid	i
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MX_ADC1_Init+0x70>
  sConfig.Channel = ADC_CHANNEL_1;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <MX_ADC1_Init+0xe4>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f48:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_1;
 8000f4a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f4c:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	0020      	movs	r0, r4
 8000f50:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f52:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	f002 fd26 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x8c>
 8000f5c:	b672      	cpsid	i
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <MX_ADC1_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_4;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_ADC1_Init+0xe8>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f62:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	a901      	add	r1, sp, #4
 8000f66:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8000f68:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f6a:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6c:	f002 fd1a 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0xa4>
 8000f74:	b672      	cpsid	i
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <MX_ADC1_Init+0xa2>
  sConfig.Channel = ADC_CHANNEL_5;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_ADC1_Init+0xec>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f7a:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_5;
 8000f7c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f7e:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	0020      	movs	r0, r4
 8000f82:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f84:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f86:	f002 fd0d 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0xbe>
 8000f8e:	b672      	cpsid	i
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MX_ADC1_Init+0xbc>
  sConfig.Channel = ADC_CHANNEL_6;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_ADC1_Init+0xf0>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f94:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_6;
 8000f96:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f98:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9a:	0020      	movs	r0, r4
 8000f9c:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f9e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa0:	f002 fd00 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xd8>
 8000fa8:	b672      	cpsid	i
  while (1)
 8000faa:	e7fe      	b.n	8000faa <MX_ADC1_Init+0xd6>
}
 8000fac:	b005      	add	sp, #20
 8000fae:	bd30      	pop	{r4, r5, pc}
 8000fb0:	20000b94 	.word	0x20000b94
 8000fb4:	40012400 	.word	0x40012400
 8000fb8:	04000002 	.word	0x04000002
 8000fbc:	10000010 	.word	0x10000010
 8000fc0:	14000020 	.word	0x14000020
 8000fc4:	18000040 	.word	0x18000040

08000fc8 <MX_TIM16_Init>:
{
 8000fc8:	b530      	push	{r4, r5, lr}
 8000fca:	b097      	sub	sp, #92	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fcc:	221c      	movs	r2, #28
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4668      	mov	r0, sp
 8000fd2:	f006 fef7 	bl	8007dc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd6:	2234      	movs	r2, #52	@ 0x34
 8000fd8:	2100      	movs	r1, #0
 8000fda:	a808      	add	r0, sp, #32
 8000fdc:	f006 fef2 	bl	8007dc4 <memset>
  htim16.Instance = TIM16;
 8000fe0:	4c23      	ldr	r4, [pc, #140]	@ (8001070 <MX_TIM16_Init+0xa8>)
 8000fe2:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <MX_TIM16_Init+0xac>)
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000fe4:	2280      	movs	r2, #128	@ 0x80
  htim16.Instance = TIM16;
 8000fe6:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = 0;
 8000fe8:	2300      	movs	r3, #0
  htim16.Init.Period = 255;
 8000fea:	25ff      	movs	r5, #255	@ 0xff
  htim16.Init.Prescaler = 0;
 8000fec:	6063      	str	r3, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	60a3      	str	r3, [r4, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ff0:	0092      	lsls	r2, r2, #2
  htim16.Init.RepetitionCounter = 0;
 8000ff2:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ff4:	0020      	movs	r0, r4
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff6:	3380      	adds	r3, #128	@ 0x80
  htim16.Init.Period = 255;
 8000ff8:	60e5      	str	r5, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ffa:	6122      	str	r2, [r4, #16]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffc:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ffe:	f004 fba1 	bl	8005744 <HAL_TIM_Base_Init>
 8001002:	2800      	cmp	r0, #0
 8001004:	d001      	beq.n	800100a <MX_TIM16_Init+0x42>
 8001006:	b672      	cpsid	i
  while (1)
 8001008:	e7fe      	b.n	8001008 <MX_TIM16_Init+0x40>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800100a:	0020      	movs	r0, r4
 800100c:	f004 fcd0 	bl	80059b0 <HAL_TIM_OC_Init>
 8001010:	2800      	cmp	r0, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM16_Init+0x50>
 8001014:	b672      	cpsid	i
  while (1)
 8001016:	e7fe      	b.n	8001016 <MX_TIM16_Init+0x4e>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001018:	2200      	movs	r2, #0
 800101a:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800101c:	9000      	str	r0, [sp, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101e:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001020:	9003      	str	r0, [sp, #12]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001022:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	4669      	mov	r1, sp
 8001026:	0020      	movs	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	9204      	str	r2, [sp, #16]
 800102a:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 255;
 800102c:	9501      	str	r5, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	f005 f9ff 	bl	8006430 <HAL_TIM_OC_ConfigChannel>
 8001032:	2800      	cmp	r0, #0
 8001034:	d001      	beq.n	800103a <MX_TIM16_Init+0x72>
 8001036:	b672      	cpsid	i
  while (1)
 8001038:	e7fe      	b.n	8001038 <MX_TIM16_Init+0x70>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 800103a:	2108      	movs	r1, #8
 800103c:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800103e:	9008      	str	r0, [sp, #32]
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001040:	6993      	ldr	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001042:	9009      	str	r0, [sp, #36]	@ 0x24
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001044:	438b      	bics	r3, r1
 8001046:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104c:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800104e:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001050:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001052:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001054:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001056:	a908      	add	r1, sp, #32
 8001058:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105a:	920c      	str	r2, [sp, #48]	@ 0x30
 800105c:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800105e:	f005 ff47 	bl	8006ef0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001062:	2800      	cmp	r0, #0
 8001064:	d001      	beq.n	800106a <MX_TIM16_Init+0xa2>
 8001066:	b672      	cpsid	i
  while (1)
 8001068:	e7fe      	b.n	8001068 <MX_TIM16_Init+0xa0>
}
 800106a:	b017      	add	sp, #92	@ 0x5c
 800106c:	bd30      	pop	{r4, r5, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	20000904 	.word	0x20000904
 8001074:	40014400 	.word	0x40014400

08001078 <MX_TIM2_Init>:
{
 8001078:	b510      	push	{r4, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107c:	2210      	movs	r2, #16
 800107e:	2100      	movs	r1, #0
 8001080:	a808      	add	r0, sp, #32
 8001082:	f006 fe9f 	bl	8007dc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001086:	220c      	movs	r2, #12
 8001088:	2100      	movs	r1, #0
 800108a:	a801      	add	r0, sp, #4
 800108c:	f006 fe9a 	bl	8007dc4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001090:	2210      	movs	r2, #16
 8001092:	2100      	movs	r1, #0
 8001094:	a804      	add	r0, sp, #16
 8001096:	f006 fe95 	bl	8007dc4 <memset>
  htim2.Instance = TIM2;
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	4c22      	ldr	r4, [pc, #136]	@ (8001128 <MX_TIM2_Init+0xb0>)
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 64 - 1;
 80010a2:	233f      	movs	r3, #63	@ 0x3f
 80010a4:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 2097152 - 1;
 80010aa:	4b20      	ldr	r3, [pc, #128]	@ (800112c <MX_TIM2_Init+0xb4>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ac:	0020      	movs	r0, r4
  htim2.Init.Period = 2097152 - 1;
 80010ae:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b6:	3b81      	subs	r3, #129	@ 0x81
 80010b8:	3bff      	subs	r3, #255	@ 0xff
 80010ba:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010bc:	f004 fb42 	bl	8005744 <HAL_TIM_Base_Init>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x50>
 80010c4:	b672      	cpsid	i
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ca:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010cc:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ce:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d2:	f005 fd89 	bl	8006be8 <HAL_TIM_ConfigClockSource>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM2_Init+0x66>
 80010da:	b672      	cpsid	i
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MX_TIM2_Init+0x64>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010de:	0020      	movs	r0, r4
 80010e0:	f004 ff66 	bl	8005fb0 <HAL_TIM_IC_Init>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x74>
 80010e8:	b672      	cpsid	i
  while (1)
 80010ea:	e7fe      	b.n	80010ea <MX_TIM2_Init+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ee:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f0:	a901      	add	r1, sp, #4
 80010f2:	0020      	movs	r0, r4
 80010f4:	f005 fec4 	bl	8006e80 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x88>
 80010fc:	b672      	cpsid	i
  while (1)
 80010fe:	e7fe      	b.n	80010fe <MX_TIM2_Init+0x86>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001100:	2202      	movs	r2, #2
 8001102:	2301      	movs	r3, #1
 8001104:	9204      	str	r2, [sp, #16]
 8001106:	9305      	str	r3, [sp, #20]
 8001108:	2200      	movs	r2, #0
 800110a:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800110c:	0020      	movs	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800110e:	9206      	str	r2, [sp, #24]
 8001110:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001112:	a904      	add	r1, sp, #16
 8001114:	2200      	movs	r2, #0
 8001116:	f005 fae1 	bl	80066dc <HAL_TIM_IC_ConfigChannel>
 800111a:	2800      	cmp	r0, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0xaa>
 800111e:	b672      	cpsid	i
  while (1)
 8001120:	e7fe      	b.n	8001120 <MX_TIM2_Init+0xa8>
}
 8001122:	b00c      	add	sp, #48	@ 0x30
 8001124:	bd10      	pop	{r4, pc}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	20000848 	.word	0x20000848
 800112c:	001fffff 	.word	0x001fffff

08001130 <MX_TIM3_Init>:
{
 8001130:	b510      	push	{r4, lr}
 8001132:	b090      	sub	sp, #64	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001134:	2210      	movs	r2, #16
 8001136:	2100      	movs	r1, #0
 8001138:	a804      	add	r0, sp, #16
 800113a:	f006 fe43 	bl	8007dc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113e:	220c      	movs	r2, #12
 8001140:	2100      	movs	r1, #0
 8001142:	a801      	add	r0, sp, #4
 8001144:	f006 fe3e 	bl	8007dc4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	221c      	movs	r2, #28
 800114a:	2100      	movs	r1, #0
 800114c:	a808      	add	r0, sp, #32
 800114e:	f006 fe39 	bl	8007dc4 <memset>
  htim3.Instance = TIM3;
 8001152:	4c23      	ldr	r4, [pc, #140]	@ (80011e0 <MX_TIM3_Init+0xb0>)
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_TIM3_Init+0xb4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001156:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8001158:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <MX_TIM3_Init+0xb8>)
 800115c:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	2300      	movs	r3, #0
 8001160:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 4096 - 1;
 8001162:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <MX_TIM3_Init+0xbc>)
 8001164:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800116c:	3b81      	subs	r3, #129	@ 0x81
 800116e:	3bff      	subs	r3, #255	@ 0xff
 8001170:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001172:	f004 fae7 	bl	8005744 <HAL_TIM_Base_Init>
 8001176:	2800      	cmp	r0, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0x4e>
 800117a:	b672      	cpsid	i
  while (1)
 800117c:	e7fe      	b.n	800117c <MX_TIM3_Init+0x4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117e:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001180:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001184:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001188:	f005 fd2e 	bl	8006be8 <HAL_TIM_ConfigClockSource>
 800118c:	2800      	cmp	r0, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0x64>
 8001190:	b672      	cpsid	i
  while (1)
 8001192:	e7fe      	b.n	8001192 <MX_TIM3_Init+0x62>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001194:	0020      	movs	r0, r4
 8001196:	f004 fc0b 	bl	80059b0 <HAL_TIM_OC_Init>
 800119a:	2800      	cmp	r0, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x72>
 800119e:	b672      	cpsid	i
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MX_TIM3_Init+0x70>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a6:	a901      	add	r1, sp, #4
 80011a8:	0020      	movs	r0, r4
 80011aa:	f005 fe69 	bl	8006e80 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x86>
 80011b2:	b672      	cpsid	i
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MX_TIM3_Init+0x84>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011b6:	2200      	movs	r2, #0
 80011b8:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ba:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011bc:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	a908      	add	r1, sp, #32
 80011c0:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011c2:	9208      	str	r2, [sp, #32]
 80011c4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	f005 f933 	bl	8006430 <HAL_TIM_OC_ConfigChannel>
 80011ca:	2800      	cmp	r0, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0xa2>
 80011ce:	b672      	cpsid	i
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MX_TIM3_Init+0xa0>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80011d2:	2108      	movs	r1, #8
 80011d4:	6822      	ldr	r2, [r4, #0]
 80011d6:	6993      	ldr	r3, [r2, #24]
 80011d8:	438b      	bics	r3, r1
 80011da:	6193      	str	r3, [r2, #24]
}
 80011dc:	b010      	add	sp, #64	@ 0x40
 80011de:	bd10      	pop	{r4, pc}
 80011e0:	2000078c 	.word	0x2000078c
 80011e4:	40000400 	.word	0x40000400
 80011e8:	00007fff 	.word	0x00007fff
 80011ec:	00000fff 	.word	0x00000fff

080011f0 <MX_TIM1_Init>:
{
 80011f0:	b5d0      	push	{r4, r6, r7, lr}
 80011f2:	b09c      	sub	sp, #112	@ 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f4:	2210      	movs	r2, #16
 80011f6:	2100      	movs	r1, #0
 80011f8:	a804      	add	r0, sp, #16
 80011fa:	f006 fde3 	bl	8007dc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	220c      	movs	r2, #12
 8001200:	2100      	movs	r1, #0
 8001202:	4668      	mov	r0, sp
 8001204:	f006 fdde 	bl	8007dc4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001208:	221c      	movs	r2, #28
 800120a:	2100      	movs	r1, #0
 800120c:	a808      	add	r0, sp, #32
 800120e:	f006 fdd9 	bl	8007dc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001212:	2234      	movs	r2, #52	@ 0x34
 8001214:	2100      	movs	r1, #0
 8001216:	a80f      	add	r0, sp, #60	@ 0x3c
 8001218:	f006 fdd4 	bl	8007dc4 <memset>
  htim1.Instance = TIM1;
 800121c:	4c3a      	ldr	r4, [pc, #232]	@ (8001308 <MX_TIM1_Init+0x118>)
 800121e:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <MX_TIM1_Init+0x11c>)
  htim1.Init.Period = 1024 - 1;
 8001220:	4a3b      	ldr	r2, [pc, #236]	@ (8001310 <MX_TIM1_Init+0x120>)
  htim1.Instance = TIM1;
 8001222:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 1024 - 1;
 8001224:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = 0;
 8001226:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001228:	2280      	movs	r2, #128	@ 0x80
  htim1.Init.Prescaler = 0;
 800122a:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800122e:	0052      	lsls	r2, r2, #1
  htim1.Init.RepetitionCounter = 0;
 8001230:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001232:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001234:	3380      	adds	r3, #128	@ 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001236:	6122      	str	r2, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800123a:	f004 fa83 	bl	8005744 <HAL_TIM_Base_Init>
 800123e:	2800      	cmp	r0, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM1_Init+0x56>
 8001242:	b672      	cpsid	i
  while (1)
 8001244:	e7fe      	b.n	8001244 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001248:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124c:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001250:	f005 fcca 	bl	8006be8 <HAL_TIM_ConfigClockSource>
 8001254:	2800      	cmp	r0, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0x6c>
 8001258:	b672      	cpsid	i
  while (1)
 800125a:	e7fe      	b.n	800125a <MX_TIM1_Init+0x6a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800125c:	0020      	movs	r0, r4
 800125e:	f004 fd69 	bl	8005d34 <HAL_TIM_PWM_Init>
 8001262:	2800      	cmp	r0, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x7a>
 8001266:	b672      	cpsid	i
  while (1)
 8001268:	e7fe      	b.n	8001268 <MX_TIM1_Init+0x78>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2600      	movs	r6, #0
 800126c:	2700      	movs	r7, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	9002      	str	r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001270:	4669      	mov	r1, sp
 8001272:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001274:	9600      	str	r6, [sp, #0]
 8001276:	9701      	str	r7, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001278:	f005 fe02 	bl	8006e80 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	2800      	cmp	r0, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x94>
 8001280:	b672      	cpsid	i
  while (1)
 8001282:	e7fe      	b.n	8001282 <MX_TIM1_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001284:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8001286:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800128a:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128c:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800128e:	2204      	movs	r2, #4
 8001290:	0020      	movs	r0, r4
 8001292:	a908      	add	r1, sp, #32
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001294:	960c      	str	r6, [sp, #48]	@ 0x30
 8001296:	970d      	str	r7, [sp, #52]	@ 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001298:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800129a:	f005 fafd 	bl	8006898 <HAL_TIM_PWM_ConfigChannel>
 800129e:	2800      	cmp	r0, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0xb6>
 80012a2:	b672      	cpsid	i
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MX_TIM1_Init+0xb4>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	4e1a      	ldr	r6, [pc, #104]	@ (8001314 <MX_TIM1_Init+0x124>)
 80012aa:	6993      	ldr	r3, [r2, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ac:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80012ae:	4033      	ands	r3, r6
 80012b0:	6193      	str	r3, [r2, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012b2:	a908      	add	r1, sp, #32
 80012b4:	220c      	movs	r2, #12
 80012b6:	f005 faef 	bl	8006898 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xd2>
 80012be:	b672      	cpsid	i
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MX_TIM1_Init+0xd0>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80012c2:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c4:	900f      	str	r0, [sp, #60]	@ 0x3c
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80012c6:	69d3      	ldr	r3, [r2, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c8:	9010      	str	r0, [sp, #64]	@ 0x40
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80012ca:	4033      	ands	r3, r6
 80012cc:	61d3      	str	r3, [r2, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ce:	2380      	movs	r3, #128	@ 0x80
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012d4:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d6:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 80012d8:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012da:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012dc:	9015      	str	r0, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012de:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012e0:	9017      	str	r0, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012e2:	049b      	lsls	r3, r3, #18
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012e4:	9019      	str	r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012e6:	901a      	str	r0, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012e8:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ea:	a90f      	add	r1, sp, #60	@ 0x3c
 80012ec:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ee:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f0:	f005 fdfe 	bl	8006ef0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x10c>
 80012f8:	b672      	cpsid	i
  while (1)
 80012fa:	e7fe      	b.n	80012fa <MX_TIM1_Init+0x10a>
  HAL_TIM_MspPostInit(&htim1);
 80012fc:	0020      	movs	r0, r4
 80012fe:	f001 fe6f 	bl	8002fe0 <HAL_TIM_MspPostInit>
}
 8001302:	b01c      	add	sp, #112	@ 0x70
 8001304:	bdd0      	pop	{r4, r6, r7, pc}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	200006d0 	.word	0x200006d0
 800130c:	40012c00 	.word	0x40012c00
 8001310:	000003ff 	.word	0x000003ff
 8001314:	fffff7ff 	.word	0xfffff7ff

08001318 <MX_TIM17_Init>:
{
 8001318:	b510      	push	{r4, lr}
 800131a:	b096      	sub	sp, #88	@ 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131c:	221c      	movs	r2, #28
 800131e:	2100      	movs	r1, #0
 8001320:	4668      	mov	r0, sp
 8001322:	f006 fd4f 	bl	8007dc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001326:	2234      	movs	r2, #52	@ 0x34
 8001328:	2100      	movs	r1, #0
 800132a:	a808      	add	r0, sp, #32
 800132c:	f006 fd4a 	bl	8007dc4 <memset>
  htim17.Instance = TIM17;
 8001330:	4c23      	ldr	r4, [pc, #140]	@ (80013c0 <MX_TIM17_Init+0xa8>)
 8001332:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <MX_TIM17_Init+0xac>)
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001334:	2280      	movs	r2, #128	@ 0x80
  htim17.Instance = TIM17;
 8001336:	6023      	str	r3, [r4, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <MX_TIM17_Init+0xb0>)
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800133a:	0092      	lsls	r2, r2, #2
  htim17.Init.Prescaler = (512*64)- 1;
 800133c:	6063      	str	r3, [r4, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001340:	0020      	movs	r0, r4
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	60a3      	str	r3, [r4, #8]
  htim17.Init.Period = 0;
 8001344:	60e3      	str	r3, [r4, #12]
  htim17.Init.RepetitionCounter = 0;
 8001346:	6163      	str	r3, [r4, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001348:	3380      	adds	r3, #128	@ 0x80
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800134a:	6122      	str	r2, [r4, #16]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800134c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800134e:	f004 f9f9 	bl	8005744 <HAL_TIM_Base_Init>
 8001352:	2800      	cmp	r0, #0
 8001354:	d001      	beq.n	800135a <MX_TIM17_Init+0x42>
 8001356:	b672      	cpsid	i
  while (1)
 8001358:	e7fe      	b.n	8001358 <MX_TIM17_Init+0x40>
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800135a:	0020      	movs	r0, r4
 800135c:	f004 fb28 	bl	80059b0 <HAL_TIM_OC_Init>
 8001360:	2800      	cmp	r0, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM17_Init+0x50>
 8001364:	b672      	cpsid	i
  while (1)
 8001366:	e7fe      	b.n	8001366 <MX_TIM17_Init+0x4e>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001368:	2200      	movs	r2, #0
 800136a:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800136c:	9000      	str	r0, [sp, #0]
  sConfigOC.Pulse = 0;
 800136e:	9001      	str	r0, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001370:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001372:	9003      	str	r0, [sp, #12]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001374:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001376:	4669      	mov	r1, sp
 8001378:	0020      	movs	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	9204      	str	r2, [sp, #16]
 800137c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	f005 f857 	bl	8006430 <HAL_TIM_OC_ConfigChannel>
 8001382:	2800      	cmp	r0, #0
 8001384:	d001      	beq.n	800138a <MX_TIM17_Init+0x72>
 8001386:	b672      	cpsid	i
  while (1)
 8001388:	e7fe      	b.n	8001388 <MX_TIM17_Init+0x70>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 800138a:	2108      	movs	r1, #8
 800138c:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800138e:	9008      	str	r0, [sp, #32]
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001390:	6993      	ldr	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001392:	9009      	str	r0, [sp, #36]	@ 0x24
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001394:	430b      	orrs	r3, r1
 8001396:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800139c:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800139e:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a0:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013a2:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a4:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80013a6:	a908      	add	r1, sp, #32
 80013a8:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013aa:	920c      	str	r2, [sp, #48]	@ 0x30
 80013ac:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80013ae:	f005 fd9f 	bl	8006ef0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM17_Init+0xa2>
 80013b6:	b672      	cpsid	i
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MX_TIM17_Init+0xa0>
}
 80013ba:	b016      	add	sp, #88	@ 0x58
 80013bc:	bd10      	pop	{r4, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	200009c0 	.word	0x200009c0
 80013c4:	40014800 	.word	0x40014800
 80013c8:	00007fff 	.word	0x00007fff

080013cc <MX_TIM14_Init>:
{
 80013cc:	b510      	push	{r4, lr}
 80013ce:	b088      	sub	sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d0:	221c      	movs	r2, #28
 80013d2:	2100      	movs	r1, #0
 80013d4:	4668      	mov	r0, sp
 80013d6:	f006 fcf5 	bl	8007dc4 <memset>
  htim14.Instance = TIM14;
 80013da:	4c15      	ldr	r4, [pc, #84]	@ (8001430 <MX_TIM14_Init+0x64>)
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <MX_TIM14_Init+0x68>)
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80013de:	2280      	movs	r2, #128	@ 0x80
  htim14.Instance = TIM14;
 80013e0:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_TIM14_Init+0x6c>)
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80013e4:	0092      	lsls	r2, r2, #2
  htim14.Init.Prescaler = (512 * 64) - 1;
 80013e6:	6063      	str	r3, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80013ea:	0020      	movs	r0, r4
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	60a3      	str	r3, [r4, #8]
  htim14.Init.Period = 0;
 80013ee:	60e3      	str	r3, [r4, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80013f0:	6122      	str	r2, [r4, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80013f4:	f004 f9a6 	bl	8005744 <HAL_TIM_Base_Init>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM14_Init+0x34>
 80013fc:	b672      	cpsid	i
  while (1)
 80013fe:	e7fe      	b.n	80013fe <MX_TIM14_Init+0x32>
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001400:	0020      	movs	r0, r4
 8001402:	f004 fad5 	bl	80059b0 <HAL_TIM_OC_Init>
 8001406:	2800      	cmp	r0, #0
 8001408:	d001      	beq.n	800140e <MX_TIM14_Init+0x42>
 800140a:	b672      	cpsid	i
  while (1)
 800140c:	e7fe      	b.n	800140c <MX_TIM14_Init+0x40>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800140e:	2200      	movs	r2, #0
 8001410:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001412:	9002      	str	r0, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001414:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001416:	4669      	mov	r1, sp
 8001418:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800141a:	9200      	str	r2, [sp, #0]
 800141c:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141e:	f005 f807 	bl	8006430 <HAL_TIM_OC_ConfigChannel>
 8001422:	2800      	cmp	r0, #0
 8001424:	d001      	beq.n	800142a <MX_TIM14_Init+0x5e>
 8001426:	b672      	cpsid	i
  while (1)
 8001428:	e7fe      	b.n	8001428 <MX_TIM14_Init+0x5c>
}
 800142a:	b008      	add	sp, #32
 800142c:	bd10      	pop	{r4, pc}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	20000a7c 	.word	0x20000a7c
 8001434:	40002000 	.word	0x40002000
 8001438:	00007fff 	.word	0x00007fff

0800143c <MX_GPIO_Init>:
{
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	46ce      	mov	lr, r9
 8001440:	4647      	mov	r7, r8
 8001442:	b580      	push	{r7, lr}
 8001444:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	2214      	movs	r2, #20
 8001448:	2100      	movs	r1, #0
 800144a:	a804      	add	r0, sp, #16
 800144c:	f006 fcba 	bl	8007dc4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001450:	2204      	movs	r2, #4
 8001452:	4b44      	ldr	r3, [pc, #272]	@ (8001564 <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4311      	orrs	r1, r2
 800145c:	6359      	str	r1, [r3, #52]	@ 0x34
 800145e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	400a      	ands	r2, r1
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001468:	2220      	movs	r2, #32
 800146a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 800146c:	26a0      	movs	r6, #160	@ 0xa0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146e:	4311      	orrs	r1, r2
 8001470:	6359      	str	r1, [r3, #52]	@ 0x34
 8001472:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8001474:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	400a      	ands	r2, r1
 8001478:	9201      	str	r2, [sp, #4]
 800147a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800147e:	2140      	movs	r1, #64	@ 0x40
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	432a      	orrs	r2, r5
 8001482:	635a      	str	r2, [r3, #52]	@ 0x34
 8001484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001486:	402a      	ands	r2, r5
 8001488:	9202      	str	r2, [sp, #8]
 800148a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800148e:	433a      	orrs	r2, r7
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
 8001492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	403b      	ands	r3, r7
 8001498:	9303      	str	r3, [sp, #12]
 800149a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800149c:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <MX_GPIO_Init+0x12c>)
 800149e:	0018      	movs	r0, r3
 80014a0:	4699      	mov	r9, r3
 80014a2:	f003 f9e1 	bl	8004868 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80014a6:	2388      	movs	r3, #136	@ 0x88
 80014a8:	2204      	movs	r2, #4
 80014aa:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80014ac:	a904      	add	r1, sp, #16
 80014ae:	482f      	ldr	r0, [pc, #188]	@ (800156c <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80014b0:	9204      	str	r2, [sp, #16]
 80014b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f003 f821 	bl	80044fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80014ba:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80014bc:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80014be:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80014c0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80014c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f003 f817 	bl	80044fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin;
 80014ce:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014d0:	4648      	mov	r0, r9
 80014d2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LD3_Pin;
 80014d4:	4698      	mov	r8, r3
 80014d6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014de:	f003 f80d 	bl	80044fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	2300      	movs	r3, #0
 80014e6:	00d2      	lsls	r2, r2, #3
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80014e8:	0030      	movs	r0, r6
 80014ea:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80014ec:	9204      	str	r2, [sp, #16]
 80014ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f003 f803 	bl	80044fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MONITOR_Pin;
 80014f6:	4643      	mov	r3, r8
 80014f8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <MX_GPIO_Init+0x134>)
 80014fc:	a904      	add	r1, sp, #16
 80014fe:	0018      	movs	r0, r3
 8001500:	4699      	mov	r9, r3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8001508:	f002 fff8 	bl	80044fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	4698      	mov	r8, r3
 8001510:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001512:	23c4      	movs	r3, #196	@ 0xc4
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8001514:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001516:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8001518:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800151a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 800151c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8001520:	f002 ffec 	bl	80044fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8001524:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8001526:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8001528:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 800152a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 800152c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8001534:	f002 ffe2 	bl	80044fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8001538:	4643      	mov	r3, r8
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 800153a:	0030      	movs	r0, r6
 800153c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 800153e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8001546:	f002 ffd9 	bl	80044fc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 800154a:	2202      	movs	r2, #2
 800154c:	2102      	movs	r1, #2
 800154e:	2007      	movs	r0, #7
 8001550:	f002 fdc2 	bl	80040d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001554:	2007      	movs	r0, #7
 8001556:	f002 fde9 	bl	800412c <HAL_NVIC_EnableIRQ>
}
 800155a:	b00b      	add	sp, #44	@ 0x2c
 800155c:	bcc0      	pop	{r6, r7}
 800155e:	46b9      	mov	r9, r7
 8001560:	46b0      	mov	r8, r6
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	50000800 	.word	0x50000800
 800156c:	50001400 	.word	0x50001400
 8001570:	50000400 	.word	0x50000400

08001574 <Error_Handler>:
 8001574:	b672      	cpsid	i
  while (1)
 8001576:	e7fe      	b.n	8001576 <Error_Handler+0x2>

08001578 <System_Init>:
  {

  }
}

void System_Init(void){
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	b082      	sub	sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800157c:	f002 f816 	bl	80035ac <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001580:	f7ff fc68 	bl	8000e54 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001584:	f7ff ff5a 	bl	800143c <MX_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001588:	2301      	movs	r3, #1
 800158a:	4a4c      	ldr	r2, [pc, #304]	@ (80016bc <System_Init+0x144>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800158c:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8001590:	4319      	orrs	r1, r3
 8001592:	6391      	str	r1, [r2, #56]	@ 0x38
 8001594:	6b92      	ldr	r2, [r2, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001596:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001598:	4013      	ands	r3, r2
 800159a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015a0:	f002 fd9a 	bl	80040d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015a4:	2009      	movs	r0, #9
 80015a6:	f002 fdc1 	bl	800412c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 80015aa:	2202      	movs	r2, #2
 80015ac:	2102      	movs	r1, #2
 80015ae:	200a      	movs	r0, #10
 80015b0:	f002 fd92 	bl	80040d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80015b4:	200a      	movs	r0, #10
 80015b6:	f002 fdb9 	bl	800412c <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80015ba:	4c41      	ldr	r4, [pc, #260]	@ (80016c0 <System_Init+0x148>)
 80015bc:	4b41      	ldr	r3, [pc, #260]	@ (80016c4 <System_Init+0x14c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015be:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 80015c0:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 31250;
 80015c2:	4b41      	ldr	r3, [pc, #260]	@ (80016c8 <System_Init+0x150>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c4:	0020      	movs	r0, r4
  huart2.Init.BaudRate = 31250;
 80015c6:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ca:	6162      	str	r2, [r4, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015cc:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ce:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d0:	6123      	str	r3, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d8:	6263      	str	r3, [r4, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015da:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015dc:	f006 fa5e 	bl	8007a9c <HAL_UART_Init>
 80015e0:	1e05      	subs	r5, r0, #0
 80015e2:	d001      	beq.n	80015e8 <System_Init+0x70>
 80015e4:	b672      	cpsid	i
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <System_Init+0x6e>
	MX_DMA_Init();
	MX_USART2_UART_Init();
	MX_ADC1_Init();
 80015e8:	f7ff fc74 	bl	8000ed4 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 80015ec:	f7ff fcec 	bl	8000fc8 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 80015f0:	f7ff fd42 	bl	8001078 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 80015f4:	f7ff fd9c 	bl	8001130 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 80015f8:	f7ff fdfa 	bl	80011f0 <MX_TIM1_Init>
	MX_TIM17_Init();
 80015fc:	f7ff fe8c 	bl	8001318 <MX_TIM17_Init>
	MX_TIM14_Init();
 8001600:	f7ff fee4 	bl	80013cc <MX_TIM14_Init>
  hlptim1.Instance = LPTIM1;
 8001604:	4e31      	ldr	r6, [pc, #196]	@ (80016cc <System_Init+0x154>)
 8001606:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <System_Init+0x158>)
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001608:	2200      	movs	r2, #0
  hlptim1.Instance = LPTIM1;
 800160a:	6033      	str	r3, [r6, #0]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 800160c:	23e0      	movs	r3, #224	@ 0xe0
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	60b3      	str	r3, [r6, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001612:	4b30      	ldr	r3, [pc, #192]	@ (80016d4 <System_Init+0x15c>)
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001614:	0030      	movs	r0, r6
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001616:	6173      	str	r3, [r6, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	03db      	lsls	r3, r3, #15
 800161c:	6232      	str	r2, [r6, #32]
 800161e:	6273      	str	r3, [r6, #36]	@ 0x24
 8001620:	2200      	movs	r2, #0
 8001622:	2300      	movs	r3, #0
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001624:	6075      	str	r5, [r6, #4]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001626:	62b2      	str	r2, [r6, #40]	@ 0x28
 8001628:	62f3      	str	r3, [r6, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800162a:	6335      	str	r5, [r6, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800162c:	f003 f94a 	bl	80048c4 <HAL_LPTIM_Init>
 8001630:	2800      	cmp	r0, #0
 8001632:	d001      	beq.n	8001638 <System_Init+0xc0>
 8001634:	b672      	cpsid	i
  while (1)
 8001636:	e7fe      	b.n	8001636 <System_Init+0xbe>
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001638:	2202      	movs	r2, #2
 800163a:	2102      	movs	r1, #2
 800163c:	2011      	movs	r0, #17
 800163e:	f002 fd4b 	bl	80040d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001642:	2011      	movs	r0, #17
 8001644:	f002 fd72 	bl	800412c <HAL_NVIC_EnableIRQ>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001648:	4d23      	ldr	r5, [pc, #140]	@ (80016d8 <System_Init+0x160>)
 800164a:	0028      	movs	r0, r5
 800164c:	f002 fc70 	bl	8003f30 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8001650:	210e      	movs	r1, #14
 8001652:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <System_Init+0x164>)
 8001654:	4822      	ldr	r0, [pc, #136]	@ (80016e0 <System_Init+0x168>)
 8001656:	f005 fb91 	bl	8006d7c <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 800165a:	2100      	movs	r1, #0
 800165c:	0028      	movs	r0, r5
 800165e:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <System_Init+0x16c>)
 8001660:	f002 f968 	bl	8003934 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8001664:	4d20      	ldr	r5, [pc, #128]	@ (80016e8 <System_Init+0x170>)
 8001666:	2112      	movs	r1, #18
 8001668:	0028      	movs	r0, r5
 800166a:	4a20      	ldr	r2, [pc, #128]	@ (80016ec <System_Init+0x174>)
 800166c:	f005 fb86 	bl	8006d7c <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8001670:	210e      	movs	r1, #14
 8001672:	0028      	movs	r0, r5
 8001674:	4a1e      	ldr	r2, [pc, #120]	@ (80016f0 <System_Init+0x178>)
 8001676:	f005 fb81 	bl	8006d7c <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 800167a:	2114      	movs	r1, #20
 800167c:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <System_Init+0x17c>)
 800167e:	481e      	ldr	r0, [pc, #120]	@ (80016f8 <System_Init+0x180>)
 8001680:	f005 fb7c 	bl	8006d7c <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8001684:	2101      	movs	r1, #1
 8001686:	0020      	movs	r0, r4
 8001688:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <System_Init+0x184>)
 800168a:	f005 fd87 	bl	800719c <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 800168e:	2103      	movs	r1, #3
 8001690:	0020      	movs	r0, r4
 8001692:	4a1b      	ldr	r2, [pc, #108]	@ (8001700 <System_Init+0x188>)
 8001694:	f005 fd82 	bl	800719c <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8001698:	2102      	movs	r1, #2
 800169a:	0030      	movs	r0, r6
 800169c:	4a19      	ldr	r2, [pc, #100]	@ (8001704 <System_Init+0x18c>)
 800169e:	f003 f9f1 	bl	8004a84 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 80016a2:	2114      	movs	r1, #20
 80016a4:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <System_Init+0x190>)
 80016a6:	4819      	ldr	r0, [pc, #100]	@ (800170c <System_Init+0x194>)
 80016a8:	f005 fb68 	bl	8006d7c <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80016ac:	2114      	movs	r1, #20
 80016ae:	4a18      	ldr	r2, [pc, #96]	@ (8001710 <System_Init+0x198>)
 80016b0:	4818      	ldr	r0, [pc, #96]	@ (8001714 <System_Init+0x19c>)
 80016b2:	f005 fb63 	bl	8006d7c <HAL_TIM_RegisterCallback>
}
 80016b6:	b002      	add	sp, #8
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	40021000 	.word	0x40021000
 80016c0:	20000604 	.word	0x20000604
 80016c4:	40004400 	.word	0x40004400
 80016c8:	00007a12 	.word	0x00007a12
 80016cc:	200004f0 	.word	0x200004f0
 80016d0:	40007c00 	.word	0x40007c00
 80016d4:	0000ffff 	.word	0x0000ffff
 80016d8:	20000b94 	.word	0x20000b94
 80016dc:	08001719 	.word	0x08001719
 80016e0:	20000904 	.word	0x20000904
 80016e4:	08001755 	.word	0x08001755
 80016e8:	20000848 	.word	0x20000848
 80016ec:	080017c1 	.word	0x080017c1
 80016f0:	08001865 	.word	0x08001865
 80016f4:	080018e1 	.word	0x080018e1
 80016f8:	2000078c 	.word	0x2000078c
 80016fc:	080019c5 	.word	0x080019c5
 8001700:	080019c9 	.word	0x080019c9
 8001704:	08002395 	.word	0x08002395
 8001708:	08002619 	.word	0x08002619
 800170c:	200009c0 	.word	0x200009c0
 8001710:	0800261d 	.word	0x0800261d
 8001714:	20000a7c 	.word	0x20000a7c

08001718 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8001718:	b510      	push	{r4, lr}
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 800171a:	4c09      	ldr	r4, [pc, #36]	@ (8001740 <TIM16_callback+0x28>)
 800171c:	0020      	movs	r0, r4
 800171e:	f001 f8b7 	bl	8002890 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8001722:	2100      	movs	r1, #0
 8001724:	0020      	movs	r0, r4
 8001726:	f001 f8cb 	bl	80028c0 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800172a:	0020      	movs	r0, r4
 800172c:	4905      	ldr	r1, [pc, #20]	@ (8001744 <TIM16_callback+0x2c>)
 800172e:	f001 f955 	bl	80029dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8001732:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <TIM16_callback+0x30>)
 8001734:	4905      	ldr	r1, [pc, #20]	@ (800174c <TIM16_callback+0x34>)
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <TIM16_callback+0x38>)
 800173a:	f002 fb15 	bl	8003d68 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 800173e:	bd10      	pop	{r4, pc}
 8001740:	20000ca0 	.word	0x20000ca0
 8001744:	20000020 	.word	0x20000020
 8001748:	08007e7c 	.word	0x08007e7c
 800174c:	20000cc4 	.word	0x20000cc4
 8001750:	20000b94 	.word	0x20000b94

08001754 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8001754:	b570      	push	{r4, r5, r6, lr}
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8001756:	f002 fba5 	bl	8003ea4 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 800175a:	4914      	ldr	r1, [pc, #80]	@ (80017ac <ADC_DMA_conversion_complete_callback+0x58>)
 800175c:	4814      	ldr	r0, [pc, #80]	@ (80017b0 <ADC_DMA_conversion_complete_callback+0x5c>)
 800175e:	f001 f997 	bl	8002a90 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8001762:	f7fe fe99 	bl	8000498 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8001766:	4d13      	ldr	r5, [pc, #76]	@ (80017b4 <ADC_DMA_conversion_complete_callback+0x60>)
 8001768:	2108      	movs	r1, #8
 800176a:	0028      	movs	r0, r5
 800176c:	f001 fec0 	bl	80034f0 <Get_Status_Bit>

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8001770:	2801      	cmp	r0, #1
 8001772:	d111      	bne.n	8001798 <ADC_DMA_conversion_complete_callback+0x44>

		params.raw_start_value = params_working.raw_start_value;
 8001774:	4a10      	ldr	r2, [pc, #64]	@ (80017b8 <ADC_DMA_conversion_complete_callback+0x64>)
 8001776:	4c11      	ldr	r4, [pc, #68]	@ (80017bc <ADC_DMA_conversion_complete_callback+0x68>)
 8001778:	8a53      	ldrh	r3, [r2, #18]
 800177a:	b29b      	uxth	r3, r3
 800177c:	8263      	strh	r3, [r4, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 800177e:	8b53      	ldrh	r3, [r2, #26]
 8001780:	b29b      	uxth	r3, r3
 8001782:	8363      	strh	r3, [r4, #26]
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8001784:	0020      	movs	r0, r4
 8001786:	f001 fd3b 	bl	8003200 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 800178a:	2110      	movs	r1, #16
 800178c:	0028      	movs	r0, r5
 800178e:	f001 feaf 	bl	80034f0 <Get_Status_Bit>
 8001792:	2800      	cmp	r0, #0
 8001794:	d005      	beq.n	80017a2 <ADC_DMA_conversion_complete_callback+0x4e>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8001796:	bd70      	pop	{r4, r5, r6, pc}
		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8001798:	4c08      	ldr	r4, [pc, #32]	@ (80017bc <ADC_DMA_conversion_complete_callback+0x68>)
 800179a:	0020      	movs	r0, r4
 800179c:	f001 f860 	bl	8002860 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
 80017a0:	e7f0      	b.n	8001784 <ADC_DMA_conversion_complete_callback+0x30>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 80017a2:	2110      	movs	r1, #16
 80017a4:	0028      	movs	r0, r5
 80017a6:	f001 fea9 	bl	80034fc <Set_Status_Bit>
}
 80017aa:	e7f4      	b.n	8001796 <ADC_DMA_conversion_complete_callback+0x42>
 80017ac:	20000cc4 	.word	0x20000cc4
 80017b0:	20000c7c 	.word	0x20000c7c
 80017b4:	20000c30 	.word	0x20000c30
 80017b8:	20000c34 	.word	0x20000c34
 80017bc:	20000ca0 	.word	0x20000ca0

080017c0 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 80017c0:	b570      	push	{r4, r5, r6, lr}

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017c2:	2100      	movs	r1, #0
 80017c4:	f005 fac2 	bl	8006d4c <HAL_TIM_ReadCapturedValue>
 80017c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <TIM2_ch1_IP_capture_callback+0x88>)

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80017ca:	4a20      	ldr	r2, [pc, #128]	@ (800184c <TIM2_ch1_IP_capture_callback+0x8c>)
	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017cc:	6018      	str	r0, [r3, #0]
	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80017ce:	681b      	ldr	r3, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 80017d0:	4c1f      	ldr	r4, [pc, #124]	@ (8001850 <TIM2_ch1_IP_capture_callback+0x90>)
	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80017d2:	0a5b      	lsrs	r3, r3, #9
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	8013      	strh	r3, [r2, #0]
	if(IP_CAP_fsm.current_state == IDLE){
 80017d8:	7823      	ldrb	r3, [r4, #0]
 80017da:	b2dd      	uxtb	r5, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d024      	beq.n	800182a <TIM2_ch1_IP_capture_callback+0x6a>
		Begin_Input_Capture_Measurement();
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
		IP_CAP_fsm.prev_state = IDLE;
	}

	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80017e0:	7823      	ldrb	r3, [r4, #0]
 80017e2:	b2dd      	uxtb	r5, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d008      	beq.n	80017fa <TIM2_ch1_IP_capture_callback+0x3a>
			IP_CAP_fsm.current_state = IDLE;
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
		}*/
	}

	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 80017e8:	7823      	ldrb	r3, [r4, #0]
 80017ea:	b2dd      	uxtb	r5, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d022      	beq.n	8001836 <TIM2_ch1_IP_capture_callback+0x76>

		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
	}

	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 80017f0:	7823      	ldrb	r3, [r4, #0]
 80017f2:	b2dd      	uxtb	r5, r3
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d003      	beq.n	8001800 <TIM2_ch1_IP_capture_callback+0x40>
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80017f8:	bd70      	pop	{r4, r5, r6, pc}
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 80017fa:	8813      	ldrh	r3, [r2, #0]
 80017fc:	2b80      	cmp	r3, #128	@ 0x80
 80017fe:	d9fb      	bls.n	80017f8 <TIM2_ch1_IP_capture_callback+0x38>
			Start_Measurement_Reelapse_Timer();
 8001800:	f000 ff6e 	bl	80026e0 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8001804:	2302      	movs	r3, #2
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8001806:	4913      	ldr	r1, [pc, #76]	@ (8001854 <TIM2_ch1_IP_capture_callback+0x94>)
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8001808:	7023      	strb	r3, [r4, #0]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 800180a:	4813      	ldr	r0, [pc, #76]	@ (8001858 <TIM2_ch1_IP_capture_callback+0x98>)
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800180c:	7065      	strb	r5, [r4, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 800180e:	f000 ff5d 	bl	80026cc <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <TIM2_ch1_IP_capture_callback+0x9c>)
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	2a05      	cmp	r2, #5
 8001818:	d013      	beq.n	8001842 <TIM2_ch1_IP_capture_callback+0x82>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b07      	cmp	r3, #7
 800181e:	d010      	beq.n	8001842 <TIM2_ch1_IP_capture_callback+0x82>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8001820:	2104      	movs	r1, #4
 8001822:	480f      	ldr	r0, [pc, #60]	@ (8001860 <TIM2_ch1_IP_capture_callback+0xa0>)
 8001824:	f001 fe6a 	bl	80034fc <Set_Status_Bit>
 8001828:	e7e6      	b.n	80017f8 <TIM2_ch1_IP_capture_callback+0x38>
		Begin_Input_Capture_Measurement();
 800182a:	f000 ff71 	bl	8002710 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 800182e:	2301      	movs	r3, #1
 8001830:	7023      	strb	r3, [r4, #0]
		IP_CAP_fsm.prev_state = IDLE;
 8001832:	7065      	strb	r5, [r4, #1]
 8001834:	e7e0      	b.n	80017f8 <TIM2_ch1_IP_capture_callback+0x38>
		Begin_Input_Capture_Measurement();
 8001836:	f000 ff6b 	bl	8002710 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800183a:	2303      	movs	r3, #3
 800183c:	7023      	strb	r3, [r4, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 800183e:	7065      	strb	r5, [r4, #1]
 8001840:	e7da      	b.n	80017f8 <TIM2_ch1_IP_capture_callback+0x38>
				Advance_Pending_States();
 8001842:	f001 fa1d 	bl	8002c80 <Advance_Pending_States>
 8001846:	e7eb      	b.n	8001820 <TIM2_ch1_IP_capture_callback+0x60>
 8001848:	20000c24 	.word	0x20000c24
 800184c:	20000c20 	.word	0x20000c20
 8001850:	20000428 	.word	0x20000428
 8001854:	20000c58 	.word	0x20000c58
 8001858:	20000ca0 	.word	0x20000ca0
 800185c:	2000043c 	.word	0x2000043c
 8001860:	20000c30 	.word	0x20000c30

08001864 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8001864:	b570      	push	{r4, r5, r6, lr}

	union Speed_FSM_States previous = speed_fsm.prev_state;

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8001866:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <TIM2_ch1_overflow_callback+0x68>)
	union Speed_FSM_States previous = speed_fsm.prev_state;
 8001868:	4c19      	ldr	r4, [pc, #100]	@ (80018d0 <TIM2_ch1_overflow_callback+0x6c>)
 800186a:	7865      	ldrb	r5, [r4, #1]
	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	b2d1      	uxtb	r1, r2
 8001870:	2a01      	cmp	r2, #1
 8001872:	d004      	beq.n	800187e <TIM2_ch1_overflow_callback+0x1a>

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	b2d1      	uxtb	r1, r2
 8001878:	2a03      	cmp	r2, #3
 800187a:	d020      	beq.n	80018be <TIM2_ch1_overflow_callback+0x5a>

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 800187c:	bd70      	pop	{r4, r5, r6, pc}
		IP_CAP_fsm.current_state = IDLE;
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8001882:	7059      	strb	r1, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <TIM2_ch1_overflow_callback+0x70>)
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001886:	2180      	movs	r1, #128	@ 0x80
 8001888:	20a0      	movs	r0, #160	@ 0xa0
		MIDI_CLK_fsm = NOT_COMPILING;
 800188a:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <TIM2_ch1_overflow_callback+0x74>)
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800188e:	0089      	lsls	r1, r1, #2
		MIDI_CLK_tag = 0;
 8001890:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001892:	05c0      	lsls	r0, r0, #23
 8001894:	3201      	adds	r2, #1
 8001896:	f002 ffe7 	bl	8004868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2140      	movs	r1, #64	@ 0x40
 800189e:	480f      	ldr	r0, [pc, #60]	@ (80018dc <TIM2_ch1_overflow_callback+0x78>)
 80018a0:	f002 ffe2 	bl	8004868 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80018a4:	7823      	ldrb	r3, [r4, #0]
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d0e8      	beq.n	800187c <TIM2_ch1_overflow_callback+0x18>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80018aa:	7823      	ldrb	r3, [r4, #0]
 80018ac:	2b06      	cmp	r3, #6
 80018ae:	d0e5      	beq.n	800187c <TIM2_ch1_overflow_callback+0x18>
 80018b0:	7823      	ldrb	r3, [r4, #0]
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d0e2      	beq.n	800187c <TIM2_ch1_overflow_callback+0x18>
			speed_fsm.prev_state = speed_fsm.current_state;
 80018b6:	7823      	ldrb	r3, [r4, #0]
 80018b8:	7063      	strb	r3, [r4, #1]
			speed_fsm.current_state = previous;
 80018ba:	7025      	strb	r5, [r4, #0]
}
 80018bc:	e7de      	b.n	800187c <TIM2_ch1_overflow_callback+0x18>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80018be:	3a01      	subs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80018c2:	7059      	strb	r1, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 80018c4:	2200      	movs	r2, #0
 80018c6:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <TIM2_ch1_overflow_callback+0x70>)
 80018c8:	e7dd      	b.n	8001886 <TIM2_ch1_overflow_callback+0x22>
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	20000428 	.word	0x20000428
 80018d0:	2000043c 	.word	0x2000043c
 80018d4:	20000cce 	.word	0x20000cce
 80018d8:	20000c1e 	.word	0x20000c1e
 80018dc:	50000800 	.word	0x50000800

080018e0 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 80018e0:	b570      	push	{r4, r5, r6, lr}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80018e2:	4c2d      	ldr	r4, [pc, #180]	@ (8001998 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xb8>)
 80018e4:	7823      	ldrb	r3, [r4, #0]
 80018e6:	2b0b      	cmp	r3, #11
 80018e8:	d011      	beq.n	800190e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x2e>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80018ea:	7823      	ldrb	r3, [r4, #0]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d00e      	beq.n	800190e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x2e>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80018f0:	7823      	ldrb	r3, [r4, #0]
 80018f2:	2b0d      	cmp	r3, #13
 80018f4:	d00b      	beq.n	800190e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x2e>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80018f6:	7823      	ldrb	r3, [r4, #0]
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d008      	beq.n	800190e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x2e>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80018fc:	7823      	ldrb	r3, [r4, #0]
 80018fe:	2b11      	cmp	r3, #17
 8001900:	d005      	beq.n	800190e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x2e>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8001902:	7823      	ldrb	r3, [r4, #0]
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8001904:	2b12      	cmp	r3, #18
 8001906:	d002      	beq.n	800190e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x2e>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8001908:	4824      	ldr	r0, [pc, #144]	@ (800199c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xbc>)
 800190a:	f000 ffc1 	bl	8002890 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 800190e:	2100      	movs	r1, #0
 8001910:	4823      	ldr	r0, [pc, #140]	@ (80019a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xc0>)
 8001912:	f001 fdbf 	bl	8003494 <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xc4>)
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	b2d1      	uxtb	r1, r2
 800191c:	2a02      	cmp	r2, #2
 800191e:	d036      	beq.n	800198e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xae>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8001920:	781a      	ldrb	r2, [r3, #0]
 8001922:	b2d1      	uxtb	r1, r2
 8001924:	2a03      	cmp	r2, #3
 8001926:	d02e      	beq.n	8001986 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa6>
		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8001928:	7823      	ldrb	r3, [r4, #0]
 800192a:	2b0b      	cmp	r3, #11
 800192c:	d02a      	beq.n	8001984 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa4>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800192e:	7823      	ldrb	r3, [r4, #0]
 8001930:	2b0c      	cmp	r3, #12
 8001932:	d027      	beq.n	8001984 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa4>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8001934:	7823      	ldrb	r3, [r4, #0]
 8001936:	2b0d      	cmp	r3, #13
 8001938:	d024      	beq.n	8001984 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa4>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 800193a:	7823      	ldrb	r3, [r4, #0]
 800193c:	2b10      	cmp	r3, #16
 800193e:	d021      	beq.n	8001984 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa4>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8001940:	7823      	ldrb	r3, [r4, #0]
 8001942:	2b11      	cmp	r3, #17
 8001944:	d01e      	beq.n	8001984 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa4>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8001946:	7823      	ldrb	r3, [r4, #0]
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8001948:	2b12      	cmp	r3, #18
 800194a:	d01b      	beq.n	8001984 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa4>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 800194c:	4c13      	ldr	r4, [pc, #76]	@ (800199c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xbc>)
 800194e:	4916      	ldr	r1, [pc, #88]	@ (80019a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xc8>)
 8001950:	0020      	movs	r0, r4
 8001952:	f000 febb 	bl	80026cc <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8001956:	4d15      	ldr	r5, [pc, #84]	@ (80019ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xcc>)
 8001958:	0020      	movs	r0, r4
 800195a:	0029      	movs	r1, r5
 800195c:	f000 feb6 	bl	80026cc <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8001960:	2108      	movs	r1, #8
 8001962:	4813      	ldr	r0, [pc, #76]	@ (80019b0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd0>)
 8001964:	f001 fdca 	bl	80034fc <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8001968:	2100      	movs	r1, #0
 800196a:	0028      	movs	r0, r5
 800196c:	f000 ffa8 	bl	80028c0 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8001970:	4910      	ldr	r1, [pc, #64]	@ (80019b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd4>)
 8001972:	0028      	movs	r0, r5
 8001974:	f001 f832 	bl	80029dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 800197a:	4910      	ldr	r1, [pc, #64]	@ (80019bc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xdc>)
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	4810      	ldr	r0, [pc, #64]	@ (80019c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xe0>)
 8001980:	f002 f9f2 	bl	8003d68 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8001984:	bd70      	pop	{r4, r5, r6, pc}
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8001986:	3a02      	subs	r2, #2
 8001988:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800198a:	7059      	strb	r1, [r3, #1]
 800198c:	e7cc      	b.n	8001928 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x48>
		IP_CAP_fsm.current_state = IDLE;
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8001992:	7059      	strb	r1, [r3, #1]
 8001994:	e7c8      	b.n	8001928 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x48>
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	2000043c 	.word	0x2000043c
 800199c:	20000c58 	.word	0x20000c58
 80019a0:	2000078c 	.word	0x2000078c
 80019a4:	20000428 	.word	0x20000428
 80019a8:	20000c34 	.word	0x20000c34
 80019ac:	20000ca0 	.word	0x20000ca0
 80019b0:	20000c30 	.word	0x20000c30
 80019b4:	20000020 	.word	0x20000020
 80019b8:	08007e7c 	.word	0x08007e7c
 80019bc:	20000cc4 	.word	0x20000cc4
 80019c0:	20000b94 	.word	0x20000b94

080019c4 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80019c4:	4770      	bx	lr
 80019c6:	46c0      	nop			@ (mov r8, r8)

080019c8 <UART2_RX_transfer_complete_callback>:

	//UART_DMA_TX_is_complete = YES;
}

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	46ce      	mov	lr, r9
 80019cc:	4647      	mov	r7, r8

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 80019ce:	4cca      	ldr	r4, [pc, #808]	@ (8001cf8 <UART2_RX_transfer_complete_callback+0x330>)
void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80019d0:	b580      	push	{r7, lr}
	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 80019d2:	0020      	movs	r0, r4
 80019d4:	f7ff f8c0 	bl	8000b58 <Is_System_Real_Time_Status_Byte>
 80019d8:	2801      	cmp	r0, #1
 80019da:	d046      	beq.n	8001a6a <UART2_RX_transfer_complete_callback+0xa2>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 80019dc:	4dc7      	ldr	r5, [pc, #796]	@ (8001cfc <UART2_RX_transfer_complete_callback+0x334>)
 80019de:	782b      	ldrb	r3, [r5, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4690      	mov	r8, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d131      	bne.n	8001a4c <UART2_RX_transfer_complete_callback+0x84>

			if(running_status_byte == 0){
 80019e8:	4ec5      	ldr	r6, [pc, #788]	@ (8001d00 <UART2_RX_transfer_complete_callback+0x338>)
 80019ea:	7833      	ldrb	r3, [r6, #0]
 80019ec:	b2df      	uxtb	r7, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d100      	bne.n	80019f4 <UART2_RX_transfer_complete_callback+0x2c>
 80019f2:	e0c9      	b.n	8001b88 <UART2_RX_transfer_complete_callback+0x1c0>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 80019f4:	7833      	ldrb	r3, [r6, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d02c      	beq.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>

				if(Is_Data_Byte(rx_buffer) == YES){
 80019fa:	0020      	movs	r0, r4
 80019fc:	f7ff f808 	bl	8000a10 <Is_Data_Byte>
 8001a00:	2801      	cmp	r0, #1
 8001a02:	d100      	bne.n	8001a06 <UART2_RX_transfer_complete_callback+0x3e>
 8001a04:	e1a2      	b.n	8001d4c <UART2_RX_transfer_complete_callback+0x384>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8001a06:	48bf      	ldr	r0, [pc, #764]	@ (8001d04 <UART2_RX_transfer_complete_callback+0x33c>)
 8001a08:	f7ff f892 	bl	8000b30 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8001a0c:	4fbe      	ldr	r7, [pc, #760]	@ (8001d08 <UART2_RX_transfer_complete_callback+0x340>)
 8001a0e:	48bf      	ldr	r0, [pc, #764]	@ (8001d0c <UART2_RX_transfer_complete_callback+0x344>)
 8001a10:	0039      	movs	r1, r7
 8001a12:	f7ff f8c3 	bl	8000b9c <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8001a16:	0020      	movs	r0, r4
 8001a18:	f7ff f800 	bl	8000a1c <Is_PC_Status_Byte>
 8001a1c:	2801      	cmp	r0, #1
 8001a1e:	d100      	bne.n	8001a22 <UART2_RX_transfer_complete_callback+0x5a>
 8001a20:	e141      	b.n	8001ca6 <UART2_RX_transfer_complete_callback+0x2de>
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8001a22:	0020      	movs	r0, r4
 8001a24:	f7ff f802 	bl	8000a2c <Is_CC_Status_Byte>
 8001a28:	2801      	cmp	r0, #1
 8001a2a:	d100      	bne.n	8001a2e <UART2_RX_transfer_complete_callback+0x66>
 8001a2c:	e13b      	b.n	8001ca6 <UART2_RX_transfer_complete_callback+0x2de>
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8001a2e:	0020      	movs	r0, r4
 8001a30:	f7ff f852 	bl	8000ad8 <Is_Sysex_Start_Status_Byte>
 8001a34:	2801      	cmp	r0, #1
 8001a36:	d10d      	bne.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>

						active_status_byte = (uint8_t)*rx_buffer;
 8001a38:	7823      	ldrb	r3, [r4, #0]
						running_status_byte = 0;
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001a3a:	2140      	movs	r1, #64	@ 0x40
						active_status_byte = (uint8_t)*rx_buffer;
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	702b      	strb	r3, [r5, #0]
						running_status_byte = 0;
 8001a40:	4643      	mov	r3, r8
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001a42:	0038      	movs	r0, r7
						running_status_byte = 0;
 8001a44:	7033      	strb	r3, [r6, #0]
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001a46:	f001 fd59 	bl	80034fc <Set_Status_Bit>
 8001a4a:	e003      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>

					}
				}
			}
		}
		else if(active_status_byte != 0){
 8001a4c:	782b      	ldrb	r3, [r5, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d000      	beq.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
 8001a52:	e0c0      	b.n	8001bd6 <UART2_RX_transfer_complete_callback+0x20e>
				}
			}
		}
	}

	*rx_buffer = 0;
 8001a54:	2300      	movs	r3, #0

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001a56:	2201      	movs	r2, #1
 8001a58:	0021      	movs	r1, r4
 8001a5a:	48ad      	ldr	r0, [pc, #692]	@ (8001d10 <UART2_RX_transfer_complete_callback+0x348>)
	*rx_buffer = 0;
 8001a5c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001a5e:	f005 fbef 	bl	8007240 <HAL_UART_Receive_DMA>
}
 8001a62:	bcc0      	pop	{r6, r7}
 8001a64:	46b9      	mov	r9, r7
 8001a66:	46b0      	mov	r8, r6
 8001a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8001a6a:	4fa7      	ldr	r7, [pc, #668]	@ (8001d08 <UART2_RX_transfer_complete_callback+0x340>)
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	0038      	movs	r0, r7
 8001a70:	f001 fd3e 	bl	80034f0 <Get_Status_Bit>
 8001a74:	2801      	cmp	r0, #1
 8001a76:	d1ed      	bne.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8001a78:	4ea6      	ldr	r6, [pc, #664]	@ (8001d14 <UART2_RX_transfer_complete_callback+0x34c>)
 8001a7a:	7833      	ldrb	r3, [r6, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d100      	bne.n	8001a82 <UART2_RX_transfer_complete_callback+0xba>
 8001a80:	e0d9      	b.n	8001c36 <UART2_RX_transfer_complete_callback+0x26e>
 8001a82:	4da5      	ldr	r5, [pc, #660]	@ (8001d18 <UART2_RX_transfer_complete_callback+0x350>)
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8001a84:	782b      	ldrb	r3, [r5, #0]
 8001a86:	2b09      	cmp	r3, #9
 8001a88:	d100      	bne.n	8001a8c <UART2_RX_transfer_complete_callback+0xc4>
 8001a8a:	e1a9      	b.n	8001de0 <UART2_RX_transfer_complete_callback+0x418>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8001a8c:	782b      	ldrb	r3, [r5, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d100      	bne.n	8001a96 <UART2_RX_transfer_complete_callback+0xce>
 8001a94:	e1be      	b.n	8001e14 <UART2_RX_transfer_complete_callback+0x44c>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 8001a96:	782b      	ldrb	r3, [r5, #0]
 8001a98:	2b0b      	cmp	r3, #11
 8001a9a:	d100      	bne.n	8001a9e <UART2_RX_transfer_complete_callback+0xd6>
 8001a9c:	e1d2      	b.n	8001e44 <UART2_RX_transfer_complete_callback+0x47c>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8001a9e:	782b      	ldrb	r3, [r5, #0]
 8001aa0:	2b0c      	cmp	r3, #12
 8001aa2:	d100      	bne.n	8001aa6 <UART2_RX_transfer_complete_callback+0xde>
 8001aa4:	e1f1      	b.n	8001e8a <UART2_RX_transfer_complete_callback+0x4c2>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8001aa6:	782b      	ldrb	r3, [r5, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4690      	mov	r8, r2
 8001aac:	2b0d      	cmp	r3, #13
 8001aae:	d100      	bne.n	8001ab2 <UART2_RX_transfer_complete_callback+0xea>
 8001ab0:	e215      	b.n	8001ede <UART2_RX_transfer_complete_callback+0x516>
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8001ab2:	782b      	ldrb	r3, [r5, #0]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d100      	bne.n	8001aba <UART2_RX_transfer_complete_callback+0xf2>
 8001ab8:	e312      	b.n	80020e0 <UART2_RX_transfer_complete_callback+0x718>
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8001aba:	782b      	ldrb	r3, [r5, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4690      	mov	r8, r2
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d100      	bne.n	8001ac6 <UART2_RX_transfer_complete_callback+0xfe>
 8001ac4:	e280      	b.n	8001fc8 <UART2_RX_transfer_complete_callback+0x600>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8001ac6:	782b      	ldrb	r3, [r5, #0]
 8001ac8:	2b0e      	cmp	r3, #14
 8001aca:	d100      	bne.n	8001ace <UART2_RX_transfer_complete_callback+0x106>
 8001acc:	e2a2      	b.n	8002014 <UART2_RX_transfer_complete_callback+0x64c>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8001ace:	782b      	ldrb	r3, [r5, #0]
 8001ad0:	b2d9      	uxtb	r1, r3
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	d100      	bne.n	8001ad8 <UART2_RX_transfer_complete_callback+0x110>
 8001ad6:	e320      	b.n	800211a <UART2_RX_transfer_complete_callback+0x752>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8001ad8:	782b      	ldrb	r3, [r5, #0]
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d100      	bne.n	8001ae0 <UART2_RX_transfer_complete_callback+0x118>
 8001ade:	e35d      	b.n	800219c <UART2_RX_transfer_complete_callback+0x7d4>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8001ae0:	782b      	ldrb	r3, [r5, #0]
 8001ae2:	2b11      	cmp	r3, #17
 8001ae4:	d100      	bne.n	8001ae8 <UART2_RX_transfer_complete_callback+0x120>
 8001ae6:	e377      	b.n	80021d8 <UART2_RX_transfer_complete_callback+0x810>
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8001ae8:	782b      	ldrb	r3, [r5, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4690      	mov	r8, r2
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d1b0      	bne.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001af2:	7823      	ldrb	r3, [r4, #0]
 8001af4:	2bf8      	cmp	r3, #248	@ 0xf8
 8001af6:	d1ad      	bne.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					Set_Oscillator_Values(&params_to_be_loaded);
 8001af8:	4e88      	ldr	r6, [pc, #544]	@ (8001d1c <UART2_RX_transfer_complete_callback+0x354>)
 8001afa:	0030      	movs	r0, r6
 8001afc:	f000 fec8 	bl	8002890 <Set_Oscillator_Values>
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	20a0      	movs	r0, #160	@ 0xa0
 8001b04:	2201      	movs	r2, #1
 8001b06:	0089      	lsls	r1, r1, #2
 8001b08:	05c0      	lsls	r0, r0, #23
 8001b0a:	f002 fead 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2140      	movs	r1, #64	@ 0x40
 8001b12:	4883      	ldr	r0, [pc, #524]	@ (8001d20 <UART2_RX_transfer_complete_callback+0x358>)
 8001b14:	f002 fea8 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001b18:	2180      	movs	r1, #128	@ 0x80
 8001b1a:	20a0      	movs	r0, #160	@ 0xa0
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	0089      	lsls	r1, r1, #2
 8001b20:	05c0      	lsls	r0, r0, #23
 8001b22:	f002 fea1 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2140      	movs	r1, #64	@ 0x40
 8001b2a:	487d      	ldr	r0, [pc, #500]	@ (8001d20 <UART2_RX_transfer_complete_callback+0x358>)
 8001b2c:	f002 fe9c 	bl	8004868 <HAL_GPIO_WritePin>
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8001b30:	4643      	mov	r3, r8
 8001b32:	706b      	strb	r3, [r5, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001b34:	2308      	movs	r3, #8
					MIDI_CLK_tag = 1;
 8001b36:	2201      	movs	r2, #1
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001b38:	702b      	strb	r3, [r5, #0]
 8001b3a:	4698      	mov	r8, r3
					MIDI_CLK_tag = 1;
 8001b3c:	4b79      	ldr	r3, [pc, #484]	@ (8001d24 <UART2_RX_transfer_complete_callback+0x35c>)
					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4879      	ldr	r0, [pc, #484]	@ (8001d28 <UART2_RX_transfer_complete_callback+0x360>)
					MIDI_CLK_tag = 1;
 8001b42:	701a      	strb	r2, [r3, #0]
					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8001b44:	f001 fca6 	bl	8003494 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4691      	mov	r9, r2
 8001b4c:	4b77      	ldr	r3, [pc, #476]	@ (8001d2c <UART2_RX_transfer_complete_callback+0x364>)
					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8001b4e:	4978      	ldr	r1, [pc, #480]	@ (8001d30 <UART2_RX_transfer_complete_callback+0x368>)
 8001b50:	0030      	movs	r0, r6
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8001b52:	701a      	strb	r2, [r3, #0]
					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8001b54:	f000 fdba 	bl	80026cc <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8001b58:	4d76      	ldr	r5, [pc, #472]	@ (8001d34 <UART2_RX_transfer_complete_callback+0x36c>)
 8001b5a:	0030      	movs	r0, r6
 8001b5c:	0029      	movs	r1, r5
 8001b5e:	f000 fdb5 	bl	80026cc <Copy_Params_Structs>
					Set_Status_Bit(&statuses, First_Sync_Complete);
 8001b62:	4641      	mov	r1, r8
 8001b64:	0038      	movs	r0, r7
 8001b66:	f001 fcc9 	bl	80034fc <Set_Status_Bit>
					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	0028      	movs	r0, r5
 8001b6e:	f000 fea7 	bl	80028c0 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8001b72:	0028      	movs	r0, r5
 8001b74:	4970      	ldr	r1, [pc, #448]	@ (8001d38 <UART2_RX_transfer_complete_callback+0x370>)
 8001b76:	f000 ff31 	bl	80029dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8001b7a:	4b70      	ldr	r3, [pc, #448]	@ (8001d3c <UART2_RX_transfer_complete_callback+0x374>)
 8001b7c:	4970      	ldr	r1, [pc, #448]	@ (8001d40 <UART2_RX_transfer_complete_callback+0x378>)
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	4870      	ldr	r0, [pc, #448]	@ (8001d44 <UART2_RX_transfer_complete_callback+0x37c>)
 8001b82:	f002 f8f1 	bl	8003d68 <HAL_ADC_Start_DMA>
 8001b86:	e765      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8001b88:	485e      	ldr	r0, [pc, #376]	@ (8001d04 <UART2_RX_transfer_complete_callback+0x33c>)
 8001b8a:	f7fe ffb9 	bl	8000b00 <Is_Data_Buffer_Empty>
 8001b8e:	2801      	cmp	r0, #1
 8001b90:	d000      	beq.n	8001b94 <UART2_RX_transfer_complete_callback+0x1cc>
 8001b92:	e75f      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					if(Is_Status_Byte(rx_buffer) == YES){
 8001b94:	0020      	movs	r0, r4
 8001b96:	f7fe ff37 	bl	8000a08 <Is_Status_Byte>
 8001b9a:	2801      	cmp	r0, #1
 8001b9c:	d000      	beq.n	8001ba0 <UART2_RX_transfer_complete_callback+0x1d8>
 8001b9e:	e759      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8001ba0:	0020      	movs	r0, r4
 8001ba2:	f7fe ff3b 	bl	8000a1c <Is_PC_Status_Byte>
 8001ba6:	2801      	cmp	r0, #1
 8001ba8:	d100      	bne.n	8001bac <UART2_RX_transfer_complete_callback+0x1e4>
 8001baa:	e1e5      	b.n	8001f78 <UART2_RX_transfer_complete_callback+0x5b0>
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8001bac:	0020      	movs	r0, r4
 8001bae:	f7fe ff3d 	bl	8000a2c <Is_CC_Status_Byte>
 8001bb2:	2801      	cmp	r0, #1
 8001bb4:	d100      	bne.n	8001bb8 <UART2_RX_transfer_complete_callback+0x1f0>
 8001bb6:	e1df      	b.n	8001f78 <UART2_RX_transfer_complete_callback+0x5b0>
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8001bb8:	0020      	movs	r0, r4
 8001bba:	f7fe ff8d 	bl	8000ad8 <Is_Sysex_Start_Status_Byte>
 8001bbe:	2801      	cmp	r0, #1
 8001bc0:	d000      	beq.n	8001bc4 <UART2_RX_transfer_complete_callback+0x1fc>
 8001bc2:	e747      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
							active_status_byte = (uint8_t)*rx_buffer;
 8001bc4:	7823      	ldrb	r3, [r4, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001bc6:	2140      	movs	r1, #64	@ 0x40
							active_status_byte = (uint8_t)*rx_buffer;
 8001bc8:	b2db      	uxtb	r3, r3
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001bca:	484f      	ldr	r0, [pc, #316]	@ (8001d08 <UART2_RX_transfer_complete_callback+0x340>)
							active_status_byte = (uint8_t)*rx_buffer;
 8001bcc:	702b      	strb	r3, [r5, #0]
							running_status_byte = 0;
 8001bce:	7037      	strb	r7, [r6, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001bd0:	f001 fc94 	bl	80034fc <Set_Status_Bit>
 8001bd4:	e73e      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8001bd6:	2180      	movs	r1, #128	@ 0x80
 8001bd8:	4f4b      	ldr	r7, [pc, #300]	@ (8001d08 <UART2_RX_transfer_complete_callback+0x340>)
 8001bda:	0089      	lsls	r1, r1, #2
 8001bdc:	0038      	movs	r0, r7
 8001bde:	f001 fc87 	bl	80034f0 <Get_Status_Bit>
 8001be2:	2801      	cmp	r0, #1
 8001be4:	d07d      	beq.n	8001ce2 <UART2_RX_transfer_complete_callback+0x31a>
				if(Is_Data_Byte(rx_buffer) == YES){
 8001be6:	0020      	movs	r0, r4
 8001be8:	f7fe ff12 	bl	8000a10 <Is_Data_Byte>
 8001bec:	2801      	cmp	r0, #1
 8001bee:	d100      	bne.n	8001bf2 <UART2_RX_transfer_complete_callback+0x22a>
 8001bf0:	e0ca      	b.n	8001d88 <UART2_RX_transfer_complete_callback+0x3c0>
					Clear_Data_Buffer(&MIDI_data);
 8001bf2:	4844      	ldr	r0, [pc, #272]	@ (8001d04 <UART2_RX_transfer_complete_callback+0x33c>)
 8001bf4:	f7fe ff9c 	bl	8000b30 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8001bf8:	0039      	movs	r1, r7
 8001bfa:	4844      	ldr	r0, [pc, #272]	@ (8001d0c <UART2_RX_transfer_complete_callback+0x344>)
 8001bfc:	f7fe ffce 	bl	8000b9c <Reset_and_Stop_MIDI_Software_Timer>
					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8001c00:	0020      	movs	r0, r4
 8001c02:	f7fe ff0b 	bl	8000a1c <Is_PC_Status_Byte>
 8001c06:	2801      	cmp	r0, #1
 8001c08:	d066      	beq.n	8001cd8 <UART2_RX_transfer_complete_callback+0x310>
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f7fe ff0e 	bl	8000a2c <Is_CC_Status_Byte>
 8001c10:	2801      	cmp	r0, #1
 8001c12:	d061      	beq.n	8001cd8 <UART2_RX_transfer_complete_callback+0x310>
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8001c14:	0020      	movs	r0, r4
 8001c16:	f7fe ff5f 	bl	8000ad8 <Is_Sysex_Start_Status_Byte>
 8001c1a:	2801      	cmp	r0, #1
 8001c1c:	d000      	beq.n	8001c20 <UART2_RX_transfer_complete_callback+0x258>
 8001c1e:	e719      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						running_status_byte = 0;
 8001c20:	2200      	movs	r2, #0
						active_status_byte = (uint8_t)*rx_buffer;
 8001c22:	7823      	ldrb	r3, [r4, #0]
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001c24:	2140      	movs	r1, #64	@ 0x40
						active_status_byte = (uint8_t)*rx_buffer;
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	702b      	strb	r3, [r5, #0]
						running_status_byte = 0;
 8001c2a:	4b35      	ldr	r3, [pc, #212]	@ (8001d00 <UART2_RX_transfer_complete_callback+0x338>)
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001c2c:	0038      	movs	r0, r7
						running_status_byte = 0;
 8001c2e:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001c30:	f001 fc64 	bl	80034fc <Set_Status_Bit>
 8001c34:	e70e      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8001c36:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <UART2_RX_transfer_complete_callback+0x364>)
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8001c38:	4d37      	ldr	r5, [pc, #220]	@ (8001d18 <UART2_RX_transfer_complete_callback+0x350>)
			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d000      	beq.n	8001c42 <UART2_RX_transfer_complete_callback+0x27a>
 8001c40:	e720      	b.n	8001a84 <UART2_RX_transfer_complete_callback+0xbc>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8001c42:	782b      	ldrb	r3, [r5, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00c      	beq.n	8001c62 <UART2_RX_transfer_complete_callback+0x29a>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8001c48:	782b      	ldrb	r3, [r5, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d009      	beq.n	8001c62 <UART2_RX_transfer_complete_callback+0x29a>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8001c4e:	782b      	ldrb	r3, [r5, #0]
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d006      	beq.n	8001c62 <UART2_RX_transfer_complete_callback+0x29a>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8001c54:	782b      	ldrb	r3, [r5, #0]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d003      	beq.n	8001c62 <UART2_RX_transfer_complete_callback+0x29a>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8001c5a:	782b      	ldrb	r3, [r5, #0]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d000      	beq.n	8001c62 <UART2_RX_transfer_complete_callback+0x29a>
 8001c60:	e710      	b.n	8001a84 <UART2_RX_transfer_complete_callback+0xbc>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001c62:	7823      	ldrb	r3, [r4, #0]
 8001c64:	2bfa      	cmp	r3, #250	@ 0xfa
 8001c66:	d100      	bne.n	8001c6a <UART2_RX_transfer_complete_callback+0x2a2>
 8001c68:	e131      	b.n	8001ece <UART2_RX_transfer_complete_callback+0x506>
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001c6a:	7823      	ldrb	r3, [r4, #0]
 8001c6c:	2bf8      	cmp	r3, #248	@ 0xf8
 8001c6e:	d000      	beq.n	8001c72 <UART2_RX_transfer_complete_callback+0x2aa>
 8001c70:	e6f0      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					speed_fsm.prev_state = speed_fsm.current_state;
 8001c72:	782b      	ldrb	r3, [r5, #0]
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001c74:	2180      	movs	r1, #128	@ 0x80
					speed_fsm.prev_state = speed_fsm.current_state;
 8001c76:	706b      	strb	r3, [r5, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8001c78:	230b      	movs	r3, #11
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001c7a:	20a0      	movs	r0, #160	@ 0xa0
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8001c7c:	702b      	strb	r3, [r5, #0]
					MIDI_CLK_tag = 0; //just in case
 8001c7e:	2300      	movs	r3, #0
 8001c80:	4d28      	ldr	r5, [pc, #160]	@ (8001d24 <UART2_RX_transfer_complete_callback+0x35c>)
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	0089      	lsls	r1, r1, #2
 8001c86:	05c0      	lsls	r0, r0, #23
					MIDI_CLK_tag = 0; //just in case
 8001c88:	702b      	strb	r3, [r5, #0]
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001c8a:	f002 fded 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2140      	movs	r1, #64	@ 0x40
 8001c92:	4823      	ldr	r0, [pc, #140]	@ (8001d20 <UART2_RX_transfer_complete_callback+0x358>)
 8001c94:	f002 fde8 	bl	8004868 <HAL_GPIO_WritePin>
					MIDI_CLK_fsm = COMPILING;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	7033      	strb	r3, [r6, #0]
					MIDI_CLK_tag++;
 8001c9c:	782b      	ldrb	r3, [r5, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	702b      	strb	r3, [r5, #0]
 8001ca4:	e6d6      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						running_status_byte = (uint8_t)*rx_buffer;
 8001ca6:	7823      	ldrb	r3, [r4, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	7033      	strb	r3, [r6, #0]
						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8001cac:	4b26      	ldr	r3, [pc, #152]	@ (8001d48 <UART2_RX_transfer_complete_callback+0x380>)
 8001cae:	0020      	movs	r0, r4
 8001cb0:	7819      	ldrb	r1, [r3, #0]
 8001cb2:	b2c9      	uxtb	r1, r1
 8001cb4:	f7fe ff16 	bl	8000ae4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8001cb8:	2801      	cmp	r0, #1
 8001cba:	d005      	beq.n	8001cc8 <UART2_RX_transfer_complete_callback+0x300>
							if(Is_OMNI_On(&statuses) == YES){
 8001cbc:	0038      	movs	r0, r7
 8001cbe:	f7fe ff63 	bl	8000b88 <Is_OMNI_On>
 8001cc2:	2801      	cmp	r0, #1
 8001cc4:	d000      	beq.n	8001cc8 <UART2_RX_transfer_complete_callback+0x300>
 8001cc6:	e6c5      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
								active_status_byte = (uint8_t)*rx_buffer;
 8001cc8:	7823      	ldrb	r3, [r4, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001cca:	2140      	movs	r1, #64	@ 0x40
								active_status_byte = (uint8_t)*rx_buffer;
 8001ccc:	b2db      	uxtb	r3, r3
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001cce:	0038      	movs	r0, r7
								active_status_byte = (uint8_t)*rx_buffer;
 8001cd0:	702b      	strb	r3, [r5, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001cd2:	f001 fc13 	bl	80034fc <Set_Status_Bit>
 8001cd6:	e6bd      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						running_status_byte = (uint8_t)*rx_buffer;
 8001cd8:	7823      	ldrb	r3, [r4, #0]
 8001cda:	4a09      	ldr	r2, [pc, #36]	@ (8001d00 <UART2_RX_transfer_complete_callback+0x338>)
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	7013      	strb	r3, [r2, #0]
 8001ce0:	e7e4      	b.n	8001cac <UART2_RX_transfer_complete_callback+0x2e4>
				active_status_byte = 0;
 8001ce2:	2300      	movs	r3, #0
				Clear_Data_Buffer(&MIDI_data);
 8001ce4:	4807      	ldr	r0, [pc, #28]	@ (8001d04 <UART2_RX_transfer_complete_callback+0x33c>)
				active_status_byte = 0;
 8001ce6:	702b      	strb	r3, [r5, #0]
				Clear_Data_Buffer(&MIDI_data);
 8001ce8:	f7fe ff22 	bl	8000b30 <Clear_Data_Buffer>
				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8001cec:	2180      	movs	r1, #128	@ 0x80
 8001cee:	0038      	movs	r0, r7
 8001cf0:	0089      	lsls	r1, r1, #2
 8001cf2:	f001 fc07 	bl	8003504 <Clear_Status_Bit>
 8001cf6:	e6ad      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
 8001cf8:	200004d4 	.word	0x200004d4
 8001cfc:	200004cf 	.word	0x200004cf
 8001d00:	200004ce 	.word	0x200004ce
 8001d04:	200004c4 	.word	0x200004c4
 8001d08:	20000c30 	.word	0x20000c30
 8001d0c:	20000c28 	.word	0x20000c28
 8001d10:	20000604 	.word	0x20000604
 8001d14:	20000cce 	.word	0x20000cce
 8001d18:	2000043c 	.word	0x2000043c
 8001d1c:	20000c58 	.word	0x20000c58
 8001d20:	50000800 	.word	0x50000800
 8001d24:	20000c1e 	.word	0x20000c1e
 8001d28:	2000078c 	.word	0x2000078c
 8001d2c:	20000428 	.word	0x20000428
 8001d30:	20000c34 	.word	0x20000c34
 8001d34:	20000ca0 	.word	0x20000ca0
 8001d38:	20000020 	.word	0x20000020
 8001d3c:	08007e7c 	.word	0x08007e7c
 8001d40:	20000cc4 	.word	0x20000cc4
 8001d44:	20000b94 	.word	0x20000b94
 8001d48:	200004d0 	.word	0x200004d0
					Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001d4c:	4fd8      	ldr	r7, [pc, #864]	@ (80020b0 <UART2_RX_transfer_complete_callback+0x6e8>)
 8001d4e:	2140      	movs	r1, #64	@ 0x40
 8001d50:	0038      	movs	r0, r7
 8001d52:	f001 fbd3 	bl	80034fc <Set_Status_Bit>
					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 8001d56:	0030      	movs	r0, r6
 8001d58:	f7fe fe60 	bl	8000a1c <Is_PC_Status_Byte>
 8001d5c:	2801      	cmp	r0, #1
 8001d5e:	d027      	beq.n	8001db0 <UART2_RX_transfer_complete_callback+0x3e8>
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8001d60:	0030      	movs	r0, r6
 8001d62:	f7fe fe63 	bl	8000a2c <Is_CC_Status_Byte>
 8001d66:	2801      	cmp	r0, #1
 8001d68:	d000      	beq.n	8001d6c <UART2_RX_transfer_complete_callback+0x3a4>
 8001d6a:	e673      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8001d6c:	4ed1      	ldr	r6, [pc, #836]	@ (80020b4 <UART2_RX_transfer_complete_callback+0x6ec>)
 8001d6e:	0030      	movs	r0, r6
 8001d70:	f7fe fec6 	bl	8000b00 <Is_Data_Buffer_Empty>
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8001d74:	7823      	ldrb	r3, [r4, #0]
 8001d76:	b2db      	uxtb	r3, r3
						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8001d78:	2801      	cmp	r0, #1
 8001d7a:	d000      	beq.n	8001d7e <UART2_RX_transfer_complete_callback+0x3b6>
 8001d7c:	e090      	b.n	8001ea0 <UART2_RX_transfer_complete_callback+0x4d8>
							midi_counter = 0; //reset timer
 8001d7e:	4642      	mov	r2, r8
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8001d80:	7033      	strb	r3, [r6, #0]
							midi_counter = 0; //reset timer
 8001d82:	4bcd      	ldr	r3, [pc, #820]	@ (80020b8 <UART2_RX_transfer_complete_callback+0x6f0>)
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e665      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 8001d88:	0028      	movs	r0, r5
 8001d8a:	f7fe fe47 	bl	8000a1c <Is_PC_Status_Byte>
 8001d8e:	2801      	cmp	r0, #1
 8001d90:	d00e      	beq.n	8001db0 <UART2_RX_transfer_complete_callback+0x3e8>
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8001d92:	0028      	movs	r0, r5
 8001d94:	f7fe fe4a 	bl	8000a2c <Is_CC_Status_Byte>
 8001d98:	2801      	cmp	r0, #1
 8001d9a:	d069      	beq.n	8001e70 <UART2_RX_transfer_complete_callback+0x4a8>
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8001d9c:	0028      	movs	r0, r5
 8001d9e:	f7fe fe9b 	bl	8000ad8 <Is_Sysex_Start_Status_Byte>
 8001da2:	2801      	cmp	r0, #1
 8001da4:	d000      	beq.n	8001da8 <UART2_RX_transfer_complete_callback+0x3e0>
 8001da6:	e655      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8001da8:	48c2      	ldr	r0, [pc, #776]	@ (80020b4 <UART2_RX_transfer_complete_callback+0x6ec>)
 8001daa:	f7fe fea9 	bl	8000b00 <Is_Data_Buffer_Empty>
						}
 8001dae:	e651      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8001db0:	4ec0      	ldr	r6, [pc, #768]	@ (80020b4 <UART2_RX_transfer_complete_callback+0x6ec>)
 8001db2:	0030      	movs	r0, r6
 8001db4:	f7fe fea4 	bl	8000b00 <Is_Data_Buffer_Empty>
 8001db8:	2801      	cmp	r0, #1
 8001dba:	d000      	beq.n	8001dbe <UART2_RX_transfer_complete_callback+0x3f6>
 8001dbc:	e64a      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	0020      	movs	r0, r4
 8001dc2:	f7fe fec3 	bl	8000b4c <Is_Program_Change_Data_Byte_In_Range>
 8001dc6:	2801      	cmp	r0, #1
 8001dc8:	d100      	bne.n	8001dcc <UART2_RX_transfer_complete_callback+0x404>
 8001dca:	e1fd      	b.n	80021c8 <UART2_RX_transfer_complete_callback+0x800>
							Clear_Data_Buffer(&MIDI_data);
 8001dcc:	0030      	movs	r0, r6
 8001dce:	f7fe feaf 	bl	8000b30 <Clear_Data_Buffer>
							active_status_byte = 0;
 8001dd2:	2300      	movs	r3, #0
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8001dd4:	0039      	movs	r1, r7
 8001dd6:	48b8      	ldr	r0, [pc, #736]	@ (80020b8 <UART2_RX_transfer_complete_callback+0x6f0>)
							active_status_byte = 0;
 8001dd8:	702b      	strb	r3, [r5, #0]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8001dda:	f7fe fedf 	bl	8000b9c <Reset_and_Stop_MIDI_Software_Timer>
 8001dde:	e639      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001de0:	7823      	ldrb	r3, [r4, #0]
 8001de2:	2bf8      	cmp	r3, #248	@ 0xf8
 8001de4:	d000      	beq.n	8001de8 <UART2_RX_transfer_complete_callback+0x420>
 8001de6:	e635      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001de8:	2180      	movs	r1, #128	@ 0x80
 8001dea:	20a0      	movs	r0, #160	@ 0xa0
 8001dec:	2200      	movs	r2, #0
 8001dee:	0089      	lsls	r1, r1, #2
 8001df0:	05c0      	lsls	r0, r0, #23
 8001df2:	f002 fd39 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001df6:	2201      	movs	r2, #1
 8001df8:	2140      	movs	r1, #64	@ 0x40
 8001dfa:	48b0      	ldr	r0, [pc, #704]	@ (80020bc <UART2_RX_transfer_complete_callback+0x6f4>)
 8001dfc:	f002 fd34 	bl	8004868 <HAL_GPIO_WritePin>
					MIDI_CLK_fsm = COMPILING;
 8001e00:	2301      	movs	r3, #1
					MIDI_CLK_tag++;
 8001e02:	4aaf      	ldr	r2, [pc, #700]	@ (80020c0 <UART2_RX_transfer_complete_callback+0x6f8>)
					MIDI_CLK_fsm = COMPILING;
 8001e04:	7033      	strb	r3, [r6, #0]
					MIDI_CLK_tag++;
 8001e06:	7813      	ldrb	r3, [r2, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	7013      	strb	r3, [r2, #0]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8001e0e:	230a      	movs	r3, #10
 8001e10:	702b      	strb	r3, [r5, #0]
 8001e12:	e61f      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001e14:	7823      	ldrb	r3, [r4, #0]
 8001e16:	2bf8      	cmp	r3, #248	@ 0xf8
 8001e18:	d000      	beq.n	8001e1c <UART2_RX_transfer_complete_callback+0x454>
 8001e1a:	e61b      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					MIDI_CLK_fsm = COMPILING; //just in case
 8001e1c:	2001      	movs	r0, #1
					MIDI_CLK_tag++;
 8001e1e:	49a8      	ldr	r1, [pc, #672]	@ (80020c0 <UART2_RX_transfer_complete_callback+0x6f8>)
					MIDI_CLK_fsm = COMPILING; //just in case
 8001e20:	7030      	strb	r0, [r6, #0]
					MIDI_CLK_tag++;
 8001e22:	780b      	ldrb	r3, [r1, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	700b      	strb	r3, [r1, #0]
					if(MIDI_CLK_tag < 12){
 8001e2a:	780b      	ldrb	r3, [r1, #0]
 8001e2c:	2b0b      	cmp	r3, #11
 8001e2e:	d800      	bhi.n	8001e32 <UART2_RX_transfer_complete_callback+0x46a>
 8001e30:	e095      	b.n	8001f5e <UART2_RX_transfer_complete_callback+0x596>
					else if(MIDI_CLK_tag < 25){
 8001e32:	780b      	ldrb	r3, [r1, #0]
 8001e34:	2b18      	cmp	r3, #24
 8001e36:	d800      	bhi.n	8001e3a <UART2_RX_transfer_complete_callback+0x472>
 8001e38:	e0b9      	b.n	8001fae <UART2_RX_transfer_complete_callback+0x5e6>
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001e3a:	2308      	movs	r3, #8
						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8001e3c:	706a      	strb	r2, [r5, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001e3e:	702b      	strb	r3, [r5, #0]
						MIDI_CLK_tag = 1;
 8001e40:	7008      	strb	r0, [r1, #0]
 8001e42:	e607      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001e44:	7823      	ldrb	r3, [r4, #0]
 8001e46:	2bf8      	cmp	r3, #248	@ 0xf8
 8001e48:	d000      	beq.n	8001e4c <UART2_RX_transfer_complete_callback+0x484>
 8001e4a:	e603      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					MIDI_CLK_fsm = COMPILING; //just in case
 8001e4c:	2101      	movs	r1, #1
					MIDI_CLK_tag++;
 8001e4e:	4a9c      	ldr	r2, [pc, #624]	@ (80020c0 <UART2_RX_transfer_complete_callback+0x6f8>)
					MIDI_CLK_fsm = COMPILING; //just in case
 8001e50:	7031      	strb	r1, [r6, #0]
					MIDI_CLK_tag++;
 8001e52:	7813      	ldrb	r3, [r2, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	7013      	strb	r3, [r2, #0]
					if(MIDI_CLK_tag < 12){
 8001e5a:	7813      	ldrb	r3, [r2, #0]
 8001e5c:	2b0b      	cmp	r3, #11
 8001e5e:	d97e      	bls.n	8001f5e <UART2_RX_transfer_complete_callback+0x596>
					else if(MIDI_CLK_tag < 25){
 8001e60:	7813      	ldrb	r3, [r2, #0]
 8001e62:	2b18      	cmp	r3, #24
 8001e64:	d800      	bhi.n	8001e68 <UART2_RX_transfer_complete_callback+0x4a0>
 8001e66:	e0a2      	b.n	8001fae <UART2_RX_transfer_complete_callback+0x5e6>
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8001e68:	230c      	movs	r3, #12
						MIDI_CLK_tag = 1;
 8001e6a:	7011      	strb	r1, [r2, #0]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8001e6c:	702b      	strb	r3, [r5, #0]
 8001e6e:	e5f1      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8001e70:	4e90      	ldr	r6, [pc, #576]	@ (80020b4 <UART2_RX_transfer_complete_callback+0x6ec>)
 8001e72:	0030      	movs	r0, r6
 8001e74:	f7fe fe44 	bl	8000b00 <Is_Data_Buffer_Empty>
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8001e78:	7823      	ldrb	r3, [r4, #0]
 8001e7a:	b2db      	uxtb	r3, r3
						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8001e7c:	2801      	cmp	r0, #1
 8001e7e:	d10f      	bne.n	8001ea0 <UART2_RX_transfer_complete_callback+0x4d8>
							midi_counter = 0; //reset timer
 8001e80:	2200      	movs	r2, #0
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8001e82:	7033      	strb	r3, [r6, #0]
							midi_counter = 0; //reset timer
 8001e84:	4b8c      	ldr	r3, [pc, #560]	@ (80020b8 <UART2_RX_transfer_complete_callback+0x6f0>)
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e5e4      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001e8a:	7823      	ldrb	r3, [r4, #0]
 8001e8c:	2bf8      	cmp	r3, #248	@ 0xf8
 8001e8e:	d100      	bne.n	8001e92 <UART2_RX_transfer_complete_callback+0x4ca>
 8001e90:	e0fe      	b.n	8002090 <UART2_RX_transfer_complete_callback+0x6c8>
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001e92:	7823      	ldrb	r3, [r4, #0]
 8001e94:	2bfa      	cmp	r3, #250	@ 0xfa
 8001e96:	d000      	beq.n	8001e9a <UART2_RX_transfer_complete_callback+0x4d2>
 8001e98:	e5dc      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8001e9a:	3bed      	subs	r3, #237	@ 0xed
 8001e9c:	702b      	strb	r3, [r5, #0]
 8001e9e:	e5d9      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8001ea0:	0039      	movs	r1, r7
 8001ea2:	4885      	ldr	r0, [pc, #532]	@ (80020b8 <UART2_RX_transfer_complete_callback+0x6f0>)
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8001ea4:	7073      	strb	r3, [r6, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8001ea6:	f7fe fe79 	bl	8000b9c <Reset_and_Stop_MIDI_Software_Timer>
							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8001eaa:	0030      	movs	r0, r6
 8001eac:	f7fe fdc6 	bl	8000a3c <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8001eb0:	2801      	cmp	r0, #1
 8001eb2:	d100      	bne.n	8001eb6 <UART2_RX_transfer_complete_callback+0x4ee>
 8001eb4:	e0c8      	b.n	8002048 <UART2_RX_transfer_complete_callback+0x680>
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8001eb6:	0030      	movs	r0, r6
 8001eb8:	f7fe fdd6 	bl	8000a68 <Is_Utilised_CC_First_Data_Byte>
 8001ebc:	2801      	cmp	r0, #1
 8001ebe:	d100      	bne.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
 8001ec0:	e142      	b.n	8002148 <UART2_RX_transfer_complete_callback+0x780>
								active_status_byte = 0;
 8001ec2:	2300      	movs	r3, #0
								Clear_Data_Buffer(&MIDI_data);
 8001ec4:	0030      	movs	r0, r6
								active_status_byte = 0;
 8001ec6:	702b      	strb	r3, [r5, #0]
								Clear_Data_Buffer(&MIDI_data);
 8001ec8:	f7fe fe32 	bl	8000b30 <Clear_Data_Buffer>
 8001ecc:	e5c2      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					speed_fsm.prev_state = speed_fsm.current_state;
 8001ece:	782b      	ldrb	r3, [r5, #0]
					MIDI_CLK_tag = 0; //just in case
 8001ed0:	2200      	movs	r2, #0
					speed_fsm.prev_state = speed_fsm.current_state;
 8001ed2:	706b      	strb	r3, [r5, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8001ed4:	2309      	movs	r3, #9
 8001ed6:	702b      	strb	r3, [r5, #0]
					MIDI_CLK_tag = 0; //just in case
 8001ed8:	4b79      	ldr	r3, [pc, #484]	@ (80020c0 <UART2_RX_transfer_complete_callback+0x6f8>)
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e5ba      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001ede:	7823      	ldrb	r3, [r4, #0]
 8001ee0:	2bf8      	cmp	r3, #248	@ 0xf8
 8001ee2:	d000      	beq.n	8001ee6 <UART2_RX_transfer_complete_callback+0x51e>
 8001ee4:	e5b6      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					Set_Oscillator_Values(&params_to_be_loaded);
 8001ee6:	4b77      	ldr	r3, [pc, #476]	@ (80020c4 <UART2_RX_transfer_complete_callback+0x6fc>)
 8001ee8:	0018      	movs	r0, r3
 8001eea:	4699      	mov	r9, r3
 8001eec:	f000 fcd0 	bl	8002890 <Set_Oscillator_Values>
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001ef0:	2180      	movs	r1, #128	@ 0x80
 8001ef2:	20a0      	movs	r0, #160	@ 0xa0
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	0089      	lsls	r1, r1, #2
 8001ef8:	05c0      	lsls	r0, r0, #23
 8001efa:	f002 fcb5 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	486e      	ldr	r0, [pc, #440]	@ (80020bc <UART2_RX_transfer_complete_callback+0x6f4>)
 8001f04:	f002 fcb0 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	20a0      	movs	r0, #160	@ 0xa0
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	0089      	lsls	r1, r1, #2
 8001f10:	05c0      	lsls	r0, r0, #23
 8001f12:	f002 fca9 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001f16:	2201      	movs	r2, #1
 8001f18:	2140      	movs	r1, #64	@ 0x40
 8001f1a:	4868      	ldr	r0, [pc, #416]	@ (80020bc <UART2_RX_transfer_complete_callback+0x6f4>)
 8001f1c:	f002 fca4 	bl	8004868 <HAL_GPIO_WritePin>
					MIDI_CLK_fsm = COMPILING; //just in case
 8001f20:	2301      	movs	r3, #1
					MIDI_CLK_tag = 1;
 8001f22:	4a67      	ldr	r2, [pc, #412]	@ (80020c0 <UART2_RX_transfer_complete_callback+0x6f8>)
					MIDI_CLK_fsm = COMPILING; //just in case
 8001f24:	7033      	strb	r3, [r6, #0]
					MIDI_CLK_tag = 1;
 8001f26:	7013      	strb	r3, [r2, #0]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001f28:	2608      	movs	r6, #8
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8001f2a:	4643      	mov	r3, r8
					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4866      	ldr	r0, [pc, #408]	@ (80020c8 <UART2_RX_transfer_complete_callback+0x700>)
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8001f30:	706b      	strb	r3, [r5, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001f32:	702e      	strb	r6, [r5, #0]
					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8001f34:	f001 faae 	bl	8003494 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4690      	mov	r8, r2
 8001f3c:	4b63      	ldr	r3, [pc, #396]	@ (80020cc <UART2_RX_transfer_complete_callback+0x704>)
					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8001f3e:	4964      	ldr	r1, [pc, #400]	@ (80020d0 <UART2_RX_transfer_complete_callback+0x708>)
 8001f40:	4648      	mov	r0, r9
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8001f42:	701a      	strb	r2, [r3, #0]
					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8001f44:	f000 fbc2 	bl	80026cc <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8001f48:	4d62      	ldr	r5, [pc, #392]	@ (80020d4 <UART2_RX_transfer_complete_callback+0x70c>)
 8001f4a:	4648      	mov	r0, r9
 8001f4c:	0029      	movs	r1, r5
 8001f4e:	f000 fbbd 	bl	80026cc <Copy_Params_Structs>
					Set_Status_Bit(&statuses, First_Sync_Complete);
 8001f52:	0031      	movs	r1, r6
 8001f54:	0038      	movs	r0, r7
 8001f56:	f001 fad1 	bl	80034fc <Set_Status_Bit>
					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8001f5a:	4641      	mov	r1, r8
 8001f5c:	e606      	b.n	8001b6c <UART2_RX_transfer_complete_callback+0x1a4>
						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	20a0      	movs	r0, #160	@ 0xa0
 8001f62:	2200      	movs	r2, #0
 8001f64:	0089      	lsls	r1, r1, #2
 8001f66:	05c0      	lsls	r0, r0, #23
 8001f68:	f002 fc7e 	bl	8004868 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2140      	movs	r1, #64	@ 0x40
 8001f70:	4852      	ldr	r0, [pc, #328]	@ (80020bc <UART2_RX_transfer_complete_callback+0x6f4>)
 8001f72:	f002 fc79 	bl	8004868 <HAL_GPIO_WritePin>
 8001f76:	e56d      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
							running_status_byte = (uint8_t)*rx_buffer;
 8001f78:	7823      	ldrb	r3, [r4, #0]
							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8001f7a:	0020      	movs	r0, r4
							running_status_byte = (uint8_t)*rx_buffer;
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	7033      	strb	r3, [r6, #0]
							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8001f80:	4b55      	ldr	r3, [pc, #340]	@ (80020d8 <UART2_RX_transfer_complete_callback+0x710>)
 8001f82:	7819      	ldrb	r1, [r3, #0]
 8001f84:	b2c9      	uxtb	r1, r1
 8001f86:	f7fe fdad 	bl	8000ae4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8001f8a:	2801      	cmp	r0, #1
 8001f8c:	d100      	bne.n	8001f90 <UART2_RX_transfer_complete_callback+0x5c8>
 8001f8e:	e0fd      	b.n	800218c <UART2_RX_transfer_complete_callback+0x7c4>
								if(Is_OMNI_On(&statuses) == YES){
 8001f90:	4e47      	ldr	r6, [pc, #284]	@ (80020b0 <UART2_RX_transfer_complete_callback+0x6e8>)
 8001f92:	0030      	movs	r0, r6
 8001f94:	f7fe fdf8 	bl	8000b88 <Is_OMNI_On>
 8001f98:	2801      	cmp	r0, #1
 8001f9a:	d000      	beq.n	8001f9e <UART2_RX_transfer_complete_callback+0x5d6>
 8001f9c:	e55a      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
									active_status_byte = (uint8_t)*rx_buffer;
 8001f9e:	7823      	ldrb	r3, [r4, #0]
									Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001fa0:	2140      	movs	r1, #64	@ 0x40
									active_status_byte = (uint8_t)*rx_buffer;
 8001fa2:	b2db      	uxtb	r3, r3
									Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001fa4:	0030      	movs	r0, r6
									active_status_byte = (uint8_t)*rx_buffer;
 8001fa6:	702b      	strb	r3, [r5, #0]
									Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001fa8:	f001 faa8 	bl	80034fc <Set_Status_Bit>
 8001fac:	e552      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001fae:	2180      	movs	r1, #128	@ 0x80
 8001fb0:	20a0      	movs	r0, #160	@ 0xa0
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	0089      	lsls	r1, r1, #2
 8001fb6:	05c0      	lsls	r0, r0, #23
 8001fb8:	f002 fc56 	bl	8004868 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2140      	movs	r1, #64	@ 0x40
 8001fc0:	483e      	ldr	r0, [pc, #248]	@ (80020bc <UART2_RX_transfer_complete_callback+0x6f4>)
 8001fc2:	f002 fc51 	bl	8004868 <HAL_GPIO_WritePin>
 8001fc6:	e545      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8001fc8:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <UART2_RX_transfer_complete_callback+0x704>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4691      	mov	r9, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d000      	beq.n	8001fd6 <UART2_RX_transfer_complete_callback+0x60e>
 8001fd4:	e577      	b.n	8001ac6 <UART2_RX_transfer_complete_callback+0xfe>
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	0038      	movs	r0, r7
 8001fda:	f001 fa89 	bl	80034f0 <Get_Status_Bit>
 8001fde:	2801      	cmp	r0, #1
 8001fe0:	d000      	beq.n	8001fe4 <UART2_RX_transfer_complete_callback+0x61c>
 8001fe2:	e570      	b.n	8001ac6 <UART2_RX_transfer_complete_callback+0xfe>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001fe4:	7823      	ldrb	r3, [r4, #0]
 8001fe6:	2bf8      	cmp	r3, #248	@ 0xf8
 8001fe8:	d100      	bne.n	8001fec <UART2_RX_transfer_complete_callback+0x624>
 8001fea:	e10f      	b.n	800220c <UART2_RX_transfer_complete_callback+0x844>
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001fec:	7823      	ldrb	r3, [r4, #0]
 8001fee:	2bfa      	cmp	r3, #250	@ 0xfa
 8001ff0:	d000      	beq.n	8001ff4 <UART2_RX_transfer_complete_callback+0x62c>
 8001ff2:	e52f      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					MIDI_CLK_tag = 0; //just in case
 8001ff4:	464a      	mov	r2, r9
 8001ff6:	4b32      	ldr	r3, [pc, #200]	@ (80020c0 <UART2_RX_transfer_complete_callback+0x6f8>)
 8001ff8:	701a      	strb	r2, [r3, #0]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8001ffa:	230e      	movs	r3, #14
 8001ffc:	702b      	strb	r3, [r5, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001ffe:	4643      	mov	r3, r8
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002000:	0038      	movs	r0, r7
 8002002:	2120      	movs	r1, #32
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002004:	706b      	strb	r3, [r5, #1]
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002006:	f001 fa7d 	bl	8003504 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800200a:	2140      	movs	r1, #64	@ 0x40
 800200c:	0038      	movs	r0, r7
 800200e:	f001 fa79 	bl	8003504 <Clear_Status_Bit>
 8002012:	e51f      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002014:	7823      	ldrb	r3, [r4, #0]
 8002016:	2bf8      	cmp	r3, #248	@ 0xf8
 8002018:	d000      	beq.n	800201c <UART2_RX_transfer_complete_callback+0x654>
 800201a:	e51b      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	20a0      	movs	r0, #160	@ 0xa0
 8002020:	2200      	movs	r2, #0
 8002022:	0089      	lsls	r1, r1, #2
 8002024:	05c0      	lsls	r0, r0, #23
 8002026:	f002 fc1f 	bl	8004868 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800202a:	2201      	movs	r2, #1
 800202c:	2140      	movs	r1, #64	@ 0x40
 800202e:	4823      	ldr	r0, [pc, #140]	@ (80020bc <UART2_RX_transfer_complete_callback+0x6f4>)
 8002030:	f002 fc1a 	bl	8004868 <HAL_GPIO_WritePin>
					MIDI_CLK_fsm = COMPILING;
 8002034:	2301      	movs	r3, #1
					MIDI_CLK_tag++;
 8002036:	4a22      	ldr	r2, [pc, #136]	@ (80020c0 <UART2_RX_transfer_complete_callback+0x6f8>)
					MIDI_CLK_fsm = COMPILING;
 8002038:	7033      	strb	r3, [r6, #0]
					MIDI_CLK_tag++;
 800203a:	7813      	ldrb	r3, [r2, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	7013      	strb	r3, [r2, #0]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002042:	230f      	movs	r3, #15
 8002044:	702b      	strb	r3, [r5, #0]
 8002046:	e505      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8002048:	4b23      	ldr	r3, [pc, #140]	@ (80020d8 <UART2_RX_transfer_complete_callback+0x710>)
 800204a:	0028      	movs	r0, r5
 800204c:	7819      	ldrb	r1, [r3, #0]
 800204e:	b2c9      	uxtb	r1, r1
 8002050:	f7fe fd48 	bl	8000ae4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002054:	2801      	cmp	r0, #1
 8002056:	d000      	beq.n	800205a <UART2_RX_transfer_complete_callback+0x692>
 8002058:	e733      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800205a:	0030      	movs	r0, r6
 800205c:	491f      	ldr	r1, [pc, #124]	@ (80020dc <UART2_RX_transfer_complete_callback+0x714>)
 800205e:	f7fe fd1d 	bl	8000a9c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8002062:	2801      	cmp	r0, #1
 8002064:	d000      	beq.n	8002068 <UART2_RX_transfer_complete_callback+0x6a0>
 8002066:	e72c      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8002068:	7873      	ldrb	r3, [r6, #1]
 800206a:	2b79      	cmp	r3, #121	@ 0x79
 800206c:	d100      	bne.n	8002070 <UART2_RX_transfer_complete_callback+0x6a8>
 800206e:	e0de      	b.n	800222e <UART2_RX_transfer_complete_callback+0x866>
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8002070:	7873      	ldrb	r3, [r6, #1]
 8002072:	2b7a      	cmp	r3, #122	@ 0x7a
 8002074:	d100      	bne.n	8002078 <UART2_RX_transfer_complete_callback+0x6b0>
 8002076:	e0d7      	b.n	8002228 <UART2_RX_transfer_complete_callback+0x860>
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8002078:	7873      	ldrb	r3, [r6, #1]
 800207a:	2b7c      	cmp	r3, #124	@ 0x7c
 800207c:	d100      	bne.n	8002080 <UART2_RX_transfer_complete_callback+0x6b8>
 800207e:	e0cf      	b.n	8002220 <UART2_RX_transfer_complete_callback+0x858>
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8002080:	7873      	ldrb	r3, [r6, #1]
 8002082:	2b7d      	cmp	r3, #125	@ 0x7d
 8002084:	d000      	beq.n	8002088 <UART2_RX_transfer_complete_callback+0x6c0>
 8002086:	e71c      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
											Set_OMNI_On(&statuses);
 8002088:	0038      	movs	r0, r7
 800208a:	f7fe fdf9 	bl	8000c80 <Set_OMNI_On>
								active_status_byte = 0;
 800208e:	e718      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
					MIDI_CLK_fsm = COMPILING; //just in case
 8002090:	2101      	movs	r1, #1
					MIDI_CLK_tag++;
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <UART2_RX_transfer_complete_callback+0x6f8>)
					MIDI_CLK_fsm = COMPILING; //just in case
 8002094:	7031      	strb	r1, [r6, #0]
					MIDI_CLK_tag++;
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	3201      	adds	r2, #1
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
					if(MIDI_CLK_tag < 12){
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	2a0b      	cmp	r2, #11
 80020a2:	d800      	bhi.n	80020a6 <UART2_RX_transfer_complete_callback+0x6de>
 80020a4:	e75b      	b.n	8001f5e <UART2_RX_transfer_complete_callback+0x596>
					else if(MIDI_CLK_tag < 25){
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	2a18      	cmp	r2, #24
 80020aa:	d980      	bls.n	8001fae <UART2_RX_transfer_complete_callback+0x5e6>
						MIDI_CLK_tag = 1;
 80020ac:	7019      	strb	r1, [r3, #0]
 80020ae:	e4d1      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
 80020b0:	20000c30 	.word	0x20000c30
 80020b4:	200004c4 	.word	0x200004c4
 80020b8:	20000c28 	.word	0x20000c28
 80020bc:	50000800 	.word	0x50000800
 80020c0:	20000c1e 	.word	0x20000c1e
 80020c4:	20000c58 	.word	0x20000c58
 80020c8:	2000078c 	.word	0x2000078c
 80020cc:	20000428 	.word	0x20000428
 80020d0:	20000c34 	.word	0x20000c34
 80020d4:	20000ca0 	.word	0x20000ca0
 80020d8:	200004d0 	.word	0x200004d0
 80020dc:	200004c5 	.word	0x200004c5
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 80020e0:	2120      	movs	r1, #32
 80020e2:	0038      	movs	r0, r7
 80020e4:	f001 fa04 	bl	80034f0 <Get_Status_Bit>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d000      	beq.n	80020ee <UART2_RX_transfer_complete_callback+0x726>
 80020ec:	e4e5      	b.n	8001aba <UART2_RX_transfer_complete_callback+0xf2>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80020ee:	7823      	ldrb	r3, [r4, #0]
 80020f0:	2bf8      	cmp	r3, #248	@ 0xf8
 80020f2:	d000      	beq.n	80020f6 <UART2_RX_transfer_complete_callback+0x72e>
 80020f4:	e4ae      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					MIDI_CLK_fsm = COMPILING; //just in case
 80020f6:	3bf7      	subs	r3, #247	@ 0xf7
 80020f8:	7033      	strb	r3, [r6, #0]
					MIDI_CLK_tag++;
 80020fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002238 <UART2_RX_transfer_complete_callback+0x870>)
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	3201      	adds	r2, #1
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
					if(MIDI_CLK_tag < 12){
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	2a0b      	cmp	r2, #11
 8002108:	d800      	bhi.n	800210c <UART2_RX_transfer_complete_callback+0x744>
 800210a:	e728      	b.n	8001f5e <UART2_RX_transfer_complete_callback+0x596>
					else if(MIDI_CLK_tag < 25){
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	2a18      	cmp	r2, #24
 8002110:	d800      	bhi.n	8002114 <UART2_RX_transfer_complete_callback+0x74c>
 8002112:	e74c      	b.n	8001fae <UART2_RX_transfer_complete_callback+0x5e6>
						MIDI_CLK_tag = 1;
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e49c      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800211a:	7823      	ldrb	r3, [r4, #0]
 800211c:	2bf8      	cmp	r3, #248	@ 0xf8
 800211e:	d000      	beq.n	8002122 <UART2_RX_transfer_complete_callback+0x75a>
 8002120:	e498      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					MIDI_CLK_tag++;
 8002122:	4b45      	ldr	r3, [pc, #276]	@ (8002238 <UART2_RX_transfer_complete_callback+0x870>)
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	3201      	adds	r2, #1
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]
					if(MIDI_CLK_tag < 12){
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	2a0b      	cmp	r2, #11
 8002130:	d800      	bhi.n	8002134 <UART2_RX_transfer_complete_callback+0x76c>
 8002132:	e714      	b.n	8001f5e <UART2_RX_transfer_complete_callback+0x596>
					else if(MIDI_CLK_tag < 25){
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	2a18      	cmp	r2, #24
 8002138:	d800      	bhi.n	800213c <UART2_RX_transfer_complete_callback+0x774>
 800213a:	e738      	b.n	8001fae <UART2_RX_transfer_complete_callback+0x5e6>
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800213c:	2208      	movs	r2, #8
						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 800213e:	7069      	strb	r1, [r5, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002140:	702a      	strb	r2, [r5, #0]
						MIDI_CLK_tag = 1;
 8002142:	3a07      	subs	r2, #7
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e485      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8002148:	4b3c      	ldr	r3, [pc, #240]	@ (800223c <UART2_RX_transfer_complete_callback+0x874>)
 800214a:	0028      	movs	r0, r5
 800214c:	7819      	ldrb	r1, [r3, #0]
 800214e:	b2c9      	uxtb	r1, r1
 8002150:	f7fe fcc8 	bl	8000ae4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002154:	2801      	cmp	r0, #1
 8002156:	d005      	beq.n	8002164 <UART2_RX_transfer_complete_callback+0x79c>
										|| (Is_OMNI_On(&statuses) == YES)){
 8002158:	0038      	movs	r0, r7
 800215a:	f7fe fd15 	bl	8000b88 <Is_OMNI_On>
 800215e:	2801      	cmp	r0, #1
 8002160:	d000      	beq.n	8002164 <UART2_RX_transfer_complete_callback+0x79c>
 8002162:	e6ae      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8002164:	7833      	ldrb	r3, [r6, #0]
 8002166:	2b14      	cmp	r3, #20
 8002168:	d040      	beq.n	80021ec <UART2_RX_transfer_complete_callback+0x824>
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 800216a:	7833      	ldrb	r3, [r6, #0]
 800216c:	2b15      	cmp	r3, #21
 800216e:	d041      	beq.n	80021f4 <UART2_RX_transfer_complete_callback+0x82c>
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8002170:	7833      	ldrb	r3, [r6, #0]
 8002172:	2b16      	cmp	r3, #22
 8002174:	d046      	beq.n	8002204 <UART2_RX_transfer_complete_callback+0x83c>
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8002176:	7833      	ldrb	r3, [r6, #0]
 8002178:	2b17      	cmp	r3, #23
 800217a:	d03f      	beq.n	80021fc <UART2_RX_transfer_complete_callback+0x834>
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 800217c:	7833      	ldrb	r3, [r6, #0]
 800217e:	2b18      	cmp	r3, #24
 8002180:	d000      	beq.n	8002184 <UART2_RX_transfer_complete_callback+0x7bc>
 8002182:	e69e      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002184:	482e      	ldr	r0, [pc, #184]	@ (8002240 <UART2_RX_transfer_complete_callback+0x878>)
 8002186:	f7fe fc09 	bl	800099c <Set_Phase_to_CC_Mode_and_Value>
								active_status_byte = 0;
 800218a:	e69a      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
								active_status_byte = (uint8_t)*rx_buffer;
 800218c:	7823      	ldrb	r3, [r4, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800218e:	2140      	movs	r1, #64	@ 0x40
								active_status_byte = (uint8_t)*rx_buffer;
 8002190:	b2db      	uxtb	r3, r3
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002192:	482c      	ldr	r0, [pc, #176]	@ (8002244 <UART2_RX_transfer_complete_callback+0x87c>)
								active_status_byte = (uint8_t)*rx_buffer;
 8002194:	702b      	strb	r3, [r5, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002196:	f001 f9b1 	bl	80034fc <Set_Status_Bit>
 800219a:	e45b      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800219c:	7823      	ldrb	r3, [r4, #0]
 800219e:	2bf8      	cmp	r3, #248	@ 0xf8
 80021a0:	d000      	beq.n	80021a4 <UART2_RX_transfer_complete_callback+0x7dc>
 80021a2:	e457      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					MIDI_CLK_tag++;
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <UART2_RX_transfer_complete_callback+0x870>)
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	3201      	adds	r2, #1
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]
					if(MIDI_CLK_tag < 12){
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	2a0b      	cmp	r2, #11
 80021b2:	d800      	bhi.n	80021b6 <UART2_RX_transfer_complete_callback+0x7ee>
 80021b4:	e6d3      	b.n	8001f5e <UART2_RX_transfer_complete_callback+0x596>
					else if(MIDI_CLK_tag < 25){
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	2a18      	cmp	r2, #24
 80021ba:	d800      	bhi.n	80021be <UART2_RX_transfer_complete_callback+0x7f6>
 80021bc:	e6f7      	b.n	8001fae <UART2_RX_transfer_complete_callback+0x5e6>
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 80021be:	2211      	movs	r2, #17
 80021c0:	702a      	strb	r2, [r5, #0]
						MIDI_CLK_tag = 1;
 80021c2:	3a10      	subs	r2, #16
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e445      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
								Set_All_Pots_to_PC_Mode();
 80021c8:	f7fe fbf8 	bl	80009bc <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80021cc:	7823      	ldrb	r3, [r4, #0]
 80021ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002248 <UART2_RX_transfer_complete_callback+0x880>)
 80021d0:	3301      	adds	r3, #1
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	7013      	strb	r3, [r2, #0]
 80021d6:	e5f9      	b.n	8001dcc <UART2_RX_transfer_complete_callback+0x404>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80021d8:	7823      	ldrb	r3, [r4, #0]
 80021da:	2bf8      	cmp	r3, #248	@ 0xf8
 80021dc:	d08d      	beq.n	80020fa <UART2_RX_transfer_complete_callback+0x732>
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80021de:	7823      	ldrb	r3, [r4, #0]
 80021e0:	2bfa      	cmp	r3, #250	@ 0xfa
 80021e2:	d000      	beq.n	80021e6 <UART2_RX_transfer_complete_callback+0x81e>
 80021e4:	e436      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80021e6:	3be8      	subs	r3, #232	@ 0xe8
 80021e8:	702b      	strb	r3, [r5, #0]
 80021ea:	e433      	b.n	8001a54 <UART2_RX_transfer_complete_callback+0x8c>
										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80021ec:	4814      	ldr	r0, [pc, #80]	@ (8002240 <UART2_RX_transfer_complete_callback+0x878>)
 80021ee:	f7fe fb95 	bl	800091c <Set_Waveshape_to_CC_Mode_and_Value>
 80021f2:	e666      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80021f4:	4812      	ldr	r0, [pc, #72]	@ (8002240 <UART2_RX_transfer_complete_callback+0x878>)
 80021f6:	f7fe fba1 	bl	800093c <Set_Speed_to_CC_Mode_and_Value>
 80021fa:	e662      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80021fc:	4810      	ldr	r0, [pc, #64]	@ (8002240 <UART2_RX_transfer_complete_callback+0x878>)
 80021fe:	f7fe fbbd 	bl	800097c <Set_Symmetry_to_CC_Mode_and_Value>
 8002202:	e65e      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002204:	480e      	ldr	r0, [pc, #56]	@ (8002240 <UART2_RX_transfer_complete_callback+0x878>)
 8002206:	f7fe fba9 	bl	800095c <Set_Depth_to_CC_Mode_and_Value>
 800220a:	e65a      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
					MIDI_CLK_tag = 0; //just in case
 800220c:	464b      	mov	r3, r9
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <UART2_RX_transfer_complete_callback+0x870>)
 8002210:	7013      	strb	r3, [r2, #0]
					MIDI_CLK_tag++;
 8002212:	7813      	ldrb	r3, [r2, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	7013      	strb	r3, [r2, #0]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 800221a:	2310      	movs	r3, #16
					MIDI_CLK_fsm = COMPILING;
 800221c:	7030      	strb	r0, [r6, #0]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 800221e:	e6ed      	b.n	8001ffc <UART2_RX_transfer_complete_callback+0x634>
											Set_OMNI_Off(&statuses);
 8002220:	0038      	movs	r0, r7
 8002222:	f7fe fd25 	bl	8000c70 <Set_OMNI_Off>
 8002226:	e64c      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
											Set_Local_Control();
 8002228:	f7fe fcfa 	bl	8000c20 <Set_Local_Control>
 800222c:	e649      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
											Reset_All_Controllers(&params, &delay_line);
 800222e:	4907      	ldr	r1, [pc, #28]	@ (800224c <UART2_RX_transfer_complete_callback+0x884>)
 8002230:	4807      	ldr	r0, [pc, #28]	@ (8002250 <UART2_RX_transfer_complete_callback+0x888>)
 8002232:	f7fe fcc5 	bl	8000bc0 <Reset_All_Controllers>
 8002236:	e644      	b.n	8001ec2 <UART2_RX_transfer_complete_callback+0x4fa>
 8002238:	20000c1e 	.word	0x20000c1e
 800223c:	200004d0 	.word	0x200004d0
 8002240:	200004c5 	.word	0x200004c5
 8002244:	20000c30 	.word	0x20000c30
 8002248:	20000478 	.word	0x20000478
 800224c:	20000020 	.word	0x20000020
 8002250:	20000ca0 	.word	0x20000ca0

08002254 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8002254:	b510      	push	{r4, lr}

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8002256:	2880      	cmp	r0, #128	@ 0x80
 8002258:	d000      	beq.n	800225c <HAL_GPIO_EXTI_Falling_Callback+0x8>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
		}
	}
}
 800225a:	bd10      	pop	{r4, pc}
		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	2a06      	cmp	r2, #6
 8002262:	d002      	beq.n	800226a <HAL_GPIO_EXTI_Falling_Callback+0x16>
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b07      	cmp	r3, #7
 8002268:	d1f7      	bne.n	800225a <HAL_GPIO_EXTI_Falling_Callback+0x6>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800226a:	2180      	movs	r1, #128	@ 0x80
 800226c:	20a0      	movs	r0, #160	@ 0xa0
 800226e:	2201      	movs	r2, #1
 8002270:	0089      	lsls	r1, r1, #2
 8002272:	05c0      	lsls	r0, r0, #23
 8002274:	f002 faf8 	bl	8004868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2140      	movs	r1, #64	@ 0x40
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 800227e:	f002 faf3 	bl	8004868 <HAL_GPIO_WritePin>
}
 8002282:	e7ea      	b.n	800225a <HAL_GPIO_EXTI_Falling_Callback+0x6>
 8002284:	2000043c 	.word	0x2000043c
 8002288:	50000800 	.word	0x50000800

0800228c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800228c:	b570      	push	{r4, r5, r6, lr}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 800228e:	2880      	cmp	r0, #128	@ 0x80
 8002290:	d000      	beq.n	8002294 <HAL_GPIO_EXTI_Rising_Callback+0x8>
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002292:	bd70      	pop	{r4, r5, r6, pc}
		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8002294:	4c3b      	ldr	r4, [pc, #236]	@ (8002384 <HAL_GPIO_EXTI_Rising_Callback+0xf8>)
 8002296:	7823      	ldrb	r3, [r4, #0]
 8002298:	b2dd      	uxtb	r5, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d023      	beq.n	80022e6 <HAL_GPIO_EXTI_Rising_Callback+0x5a>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 800229e:	7823      	ldrb	r3, [r4, #0]
 80022a0:	b2dd      	uxtb	r5, r3
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d01f      	beq.n	80022e6 <HAL_GPIO_EXTI_Rising_Callback+0x5a>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 80022a6:	7823      	ldrb	r3, [r4, #0]
 80022a8:	b2dd      	uxtb	r5, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d01b      	beq.n	80022e6 <HAL_GPIO_EXTI_Rising_Callback+0x5a>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80022ae:	7823      	ldrb	r3, [r4, #0]
 80022b0:	b2dd      	uxtb	r5, r3
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d027      	beq.n	8002306 <HAL_GPIO_EXTI_Rising_Callback+0x7a>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80022b6:	7823      	ldrb	r3, [r4, #0]
 80022b8:	b2dd      	uxtb	r5, r3
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d046      	beq.n	800234c <HAL_GPIO_EXTI_Rising_Callback+0xc0>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 80022be:	7823      	ldrb	r3, [r4, #0]
 80022c0:	b2dd      	uxtb	r5, r3
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	d04e      	beq.n	8002364 <HAL_GPIO_EXTI_Rising_Callback+0xd8>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 80022c6:	7823      	ldrb	r3, [r4, #0]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d1e2      	bne.n	8002292 <HAL_GPIO_EXTI_Rising_Callback+0x6>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80022cc:	2180      	movs	r1, #128	@ 0x80
 80022ce:	20a0      	movs	r0, #160	@ 0xa0
 80022d0:	2200      	movs	r2, #0
 80022d2:	0089      	lsls	r1, r1, #2
 80022d4:	05c0      	lsls	r0, r0, #23
 80022d6:	f002 fac7 	bl	8004868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80022da:	2201      	movs	r2, #1
 80022dc:	2140      	movs	r1, #64	@ 0x40
 80022de:	482a      	ldr	r0, [pc, #168]	@ (8002388 <HAL_GPIO_EXTI_Rising_Callback+0xfc>)
 80022e0:	f002 fac2 	bl	8004868 <HAL_GPIO_WritePin>
}
 80022e4:	e7d5      	b.n	8002292 <HAL_GPIO_EXTI_Rising_Callback+0x6>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80022e6:	2180      	movs	r1, #128	@ 0x80
 80022e8:	20a0      	movs	r0, #160	@ 0xa0
 80022ea:	2200      	movs	r2, #0
 80022ec:	0089      	lsls	r1, r1, #2
 80022ee:	05c0      	lsls	r0, r0, #23
 80022f0:	f002 faba 	bl	8004868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2140      	movs	r1, #64	@ 0x40
 80022f8:	4823      	ldr	r0, [pc, #140]	@ (8002388 <HAL_GPIO_EXTI_Rising_Callback+0xfc>)
 80022fa:	f002 fab5 	bl	8004868 <HAL_GPIO_WritePin>
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80022fe:	2307      	movs	r3, #7
			speed_fsm.prev_state.shared_state = CC_MODE;
 8002300:	7065      	strb	r5, [r4, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8002302:	7023      	strb	r3, [r4, #0]
 8002304:	e7c5      	b.n	8002292 <HAL_GPIO_EXTI_Rising_Callback+0x6>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002306:	4b21      	ldr	r3, [pc, #132]	@ (800238c <HAL_GPIO_EXTI_Rising_Callback+0x100>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1d3      	bne.n	80022b6 <HAL_GPIO_EXTI_Rising_Callback+0x2a>
 800230e:	4e20      	ldr	r6, [pc, #128]	@ (8002390 <HAL_GPIO_EXTI_Rising_Callback+0x104>)
 8002310:	2120      	movs	r1, #32
 8002312:	0030      	movs	r0, r6
 8002314:	f001 f8ec 	bl	80034f0 <Get_Status_Bit>
 8002318:	2801      	cmp	r0, #1
 800231a:	d1cc      	bne.n	80022b6 <HAL_GPIO_EXTI_Rising_Callback+0x2a>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	20a0      	movs	r0, #160	@ 0xa0
 8002320:	2200      	movs	r2, #0
 8002322:	0089      	lsls	r1, r1, #2
 8002324:	05c0      	lsls	r0, r0, #23
 8002326:	f002 fa9f 	bl	8004868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800232a:	2201      	movs	r2, #1
 800232c:	2140      	movs	r1, #64	@ 0x40
 800232e:	4816      	ldr	r0, [pc, #88]	@ (8002388 <HAL_GPIO_EXTI_Rising_Callback+0xfc>)
 8002330:	f002 fa9a 	bl	8004868 <HAL_GPIO_WritePin>
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8002334:	2307      	movs	r3, #7
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002336:	0030      	movs	r0, r6
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002338:	7065      	strb	r5, [r4, #1]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800233a:	2120      	movs	r1, #32
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800233c:	7023      	strb	r3, [r4, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800233e:	f001 f8e1 	bl	8003504 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002342:	2140      	movs	r1, #64	@ 0x40
 8002344:	0030      	movs	r0, r6
 8002346:	f001 f8dd 	bl	8003504 <Clear_Status_Bit>
 800234a:	e7a2      	b.n	8002292 <HAL_GPIO_EXTI_Rising_Callback+0x6>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 800234c:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <HAL_GPIO_EXTI_Rising_Callback+0x100>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1b4      	bne.n	80022be <HAL_GPIO_EXTI_Rising_Callback+0x32>
 8002354:	4e0e      	ldr	r6, [pc, #56]	@ (8002390 <HAL_GPIO_EXTI_Rising_Callback+0x104>)
 8002356:	2120      	movs	r1, #32
 8002358:	0030      	movs	r0, r6
 800235a:	f001 f8c9 	bl	80034f0 <Get_Status_Bit>
 800235e:	2801      	cmp	r0, #1
 8002360:	d1ad      	bne.n	80022be <HAL_GPIO_EXTI_Rising_Callback+0x32>
 8002362:	e7db      	b.n	800231c <HAL_GPIO_EXTI_Rising_Callback+0x90>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002364:	2180      	movs	r1, #128	@ 0x80
 8002366:	20a0      	movs	r0, #160	@ 0xa0
 8002368:	2200      	movs	r2, #0
 800236a:	0089      	lsls	r1, r1, #2
 800236c:	05c0      	lsls	r0, r0, #23
 800236e:	f002 fa7b 	bl	8004868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002372:	2201      	movs	r2, #1
 8002374:	2140      	movs	r1, #64	@ 0x40
 8002376:	4804      	ldr	r0, [pc, #16]	@ (8002388 <HAL_GPIO_EXTI_Rising_Callback+0xfc>)
 8002378:	f002 fa76 	bl	8004868 <HAL_GPIO_WritePin>
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 800237c:	2306      	movs	r3, #6
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800237e:	7065      	strb	r5, [r4, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8002380:	7023      	strb	r3, [r4, #0]
 8002382:	e786      	b.n	8002292 <HAL_GPIO_EXTI_Rising_Callback+0x6>
 8002384:	2000043c 	.word	0x2000043c
 8002388:	50000800 	.word	0x50000800
 800238c:	20000428 	.word	0x20000428
 8002390:	20000c30 	.word	0x20000c30

08002394 <LPTIM1_callback>:

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TO TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8002394:	2180      	movs	r1, #128	@ 0x80
 8002396:	20a0      	movs	r0, #160	@ 0xa0
void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 800239a:	00c9      	lsls	r1, r1, #3
 800239c:	05c0      	lsls	r0, r0, #23
 800239e:	f002 fa5d 	bl	800485c <HAL_GPIO_ReadPin>

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 80023a2:	4c90      	ldr	r4, [pc, #576]	@ (80025e4 <LPTIM1_callback+0x250>)
 80023a4:	7823      	ldrb	r3, [r4, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d071      	beq.n	8002490 <LPTIM1_callback+0xfc>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 80023ac:	7823      	ldrb	r3, [r4, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d026      	beq.n	8002402 <LPTIM1_callback+0x6e>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
		speed_fsm.prev_state.shared_state = CC_MODE;
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 80023b4:	7823      	ldrb	r3, [r4, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d100      	bne.n	80023be <LPTIM1_callback+0x2a>
 80023bc:	e0e4      	b.n	8002588 <LPTIM1_callback+0x1f4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
		speed_fsm.prev_state.shared_state = PC_MODE;
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80023be:	7823      	ldrb	r3, [r4, #0]
 80023c0:	b2de      	uxtb	r6, r3
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d100      	bne.n	80023c8 <LPTIM1_callback+0x34>
 80023c6:	e0a4      	b.n	8002512 <LPTIM1_callback+0x17e>
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80023c8:	7823      	ldrb	r3, [r4, #0]
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d166      	bne.n	800249c <LPTIM1_callback+0x108>
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d164      	bne.n	800249c <LPTIM1_callback+0x108>
 80023d2:	4d85      	ldr	r5, [pc, #532]	@ (80025e8 <LPTIM1_callback+0x254>)
 80023d4:	782b      	ldrb	r3, [r5, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d160      	bne.n	800249c <LPTIM1_callback+0x108>
 80023da:	4d84      	ldr	r5, [pc, #528]	@ (80025ec <LPTIM1_callback+0x258>)
 80023dc:	2120      	movs	r1, #32
 80023de:	0028      	movs	r0, r5
 80023e0:	f001 f886 	bl	80034f0 <Get_Status_Bit>
 80023e4:	2801      	cmp	r0, #1
 80023e6:	d159      	bne.n	800249c <LPTIM1_callback+0x108>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80023e8:	2305      	movs	r3, #5
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80023ea:	0028      	movs	r0, r5
		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80023ec:	7023      	strb	r3, [r4, #0]
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80023ee:	2120      	movs	r1, #32
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80023f0:	3303      	adds	r3, #3
 80023f2:	7063      	strb	r3, [r4, #1]
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80023f4:	f001 f886 	bl	8003504 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80023f8:	2140      	movs	r1, #64	@ 0x40
 80023fa:	0028      	movs	r0, r5
 80023fc:	f001 f882 	bl	8003504 <Clear_Status_Bit>
 8002400:	e04c      	b.n	800249c <LPTIM1_callback+0x108>
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8002402:	2800      	cmp	r0, #0
 8002404:	d147      	bne.n	8002496 <LPTIM1_callback+0x102>
		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8002406:	3303      	adds	r3, #3
 8002408:	7023      	strb	r3, [r4, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 800240a:	7062      	strb	r2, [r4, #1]
	}

	//CHECK TAP TEMPO STATE
	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 800240c:	7823      	ldrb	r3, [r4, #0]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d147      	bne.n	80024a2 <LPTIM1_callback+0x10e>

		Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8002412:	4d77      	ldr	r5, [pc, #476]	@ (80025f0 <LPTIM1_callback+0x25c>)
 8002414:	0028      	movs	r0, r5
 8002416:	f7fe fceb 	bl	8000df0 <Check_Tap_Tempo_Switch_State>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 800241a:	782b      	ldrb	r3, [r5, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d100      	bne.n	8002422 <LPTIM1_callback+0x8e>
 8002420:	e0bf      	b.n	80025a2 <LPTIM1_callback+0x20e>
			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8002422:	782b      	ldrb	r3, [r5, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d13f      	bne.n	80024a8 <LPTIM1_callback+0x114>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	20a0      	movs	r0, #160	@ 0xa0
 800242c:	2201      	movs	r2, #1
 800242e:	0089      	lsls	r1, r1, #2
 8002430:	05c0      	lsls	r0, r0, #23
 8002432:	f002 fa19 	bl	8004868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2140      	movs	r1, #64	@ 0x40
 800243a:	486e      	ldr	r0, [pc, #440]	@ (80025f4 <LPTIM1_callback+0x260>)
 800243c:	f002 fa14 	bl	8004868 <HAL_GPIO_WritePin>
	//SET PREVIOUS STATE TO CURRENT STATE
	//tap_tempo_switch_states.tap_tempo_switch_prev_state = tap_tempo_switch_states.tap_tempo_switch_state;


	//PERFORM SPEED POT CHECKING
	if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8002440:	7823      	ldrb	r3, [r4, #0]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d133      	bne.n	80024ae <LPTIM1_callback+0x11a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);

			MIDI_CLK_fsm = NOT_COMPILING;
			MIDI_CLK_tag = 0;

			Pot_Check(&params_manual, SPEED_POT);
 8002446:	2101      	movs	r1, #1
 8002448:	486b      	ldr	r0, [pc, #428]	@ (80025f8 <LPTIM1_callback+0x264>)
 800244a:	f7fe fc2d 	bl	8000ca8 <Pot_Check>

			Pot_Check(&params_manual, SPEED_POT);
		}
	}

	if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 800244e:	4b6b      	ldr	r3, [pc, #428]	@ (80025fc <LPTIM1_callback+0x268>)
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	2a03      	cmp	r2, #3
 8002454:	d13b      	bne.n	80024ce <LPTIM1_callback+0x13a>
		Pot_Check(&params_manual, WAVESHAPE_POT);
 8002456:	2100      	movs	r1, #0
 8002458:	4867      	ldr	r0, [pc, #412]	@ (80025f8 <LPTIM1_callback+0x264>)
 800245a:	f7fe fc25 	bl	8000ca8 <Pot_Check>
	}
	if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 800245e:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <LPTIM1_callback+0x26c>)
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	2a03      	cmp	r2, #3
 8002464:	d13a      	bne.n	80024dc <LPTIM1_callback+0x148>
		Pot_Check(&params_manual, DEPTH_POT);
 8002466:	2102      	movs	r1, #2
 8002468:	4863      	ldr	r0, [pc, #396]	@ (80025f8 <LPTIM1_callback+0x264>)
 800246a:	f7fe fc1d 	bl	8000ca8 <Pot_Check>
	}
	if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 800246e:	4b65      	ldr	r3, [pc, #404]	@ (8002604 <LPTIM1_callback+0x270>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	2a03      	cmp	r2, #3
 8002474:	d139      	bne.n	80024ea <LPTIM1_callback+0x156>
		Pot_Check(&params_manual, SYMMETRY_POT);
 8002476:	2103      	movs	r1, #3
 8002478:	485f      	ldr	r0, [pc, #380]	@ (80025f8 <LPTIM1_callback+0x264>)
 800247a:	f7fe fc15 	bl	8000ca8 <Pot_Check>
	}
	if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 800247e:	4b62      	ldr	r3, [pc, #392]	@ (8002608 <LPTIM1_callback+0x274>)
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	2a03      	cmp	r2, #3
 8002484:	d138      	bne.n	80024f8 <LPTIM1_callback+0x164>
		Pot_Check(&params_manual, PHASE_POT);
 8002486:	2104      	movs	r1, #4
 8002488:	485b      	ldr	r0, [pc, #364]	@ (80025f8 <LPTIM1_callback+0x264>)
 800248a:	f7fe fc0d 	bl	8000ca8 <Pot_Check>
 800248e:	e036      	b.n	80024fe <LPTIM1_callback+0x16a>
	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8002490:	2800      	cmp	r0, #0
 8002492:	d03a      	beq.n	800250a <LPTIM1_callback+0x176>
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8002494:	7823      	ldrb	r3, [r4, #0]
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8002496:	7823      	ldrb	r3, [r4, #0]
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002498:	7823      	ldrb	r3, [r4, #0]
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 800249a:	7823      	ldrb	r3, [r4, #0]
	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 800249c:	7823      	ldrb	r3, [r4, #0]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d0b7      	beq.n	8002412 <LPTIM1_callback+0x7e>
 80024a2:	7823      	ldrb	r3, [r4, #0]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d0b4      	beq.n	8002412 <LPTIM1_callback+0x7e>
	if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 80024a8:	7823      	ldrb	r3, [r4, #0]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d0cb      	beq.n	8002446 <LPTIM1_callback+0xb2>
 80024ae:	7823      	ldrb	r3, [r4, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d0c8      	beq.n	8002446 <LPTIM1_callback+0xb2>
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 80024b4:	7823      	ldrb	r3, [r4, #0]
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d035      	beq.n	8002526 <LPTIM1_callback+0x192>
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 80024ba:	7823      	ldrb	r3, [r4, #0]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d042      	beq.n	8002546 <LPTIM1_callback+0x1b2>
	else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 80024c0:	7823      	ldrb	r3, [r4, #0]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d067      	beq.n	8002596 <LPTIM1_callback+0x202>
	if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 80024c6:	4b4d      	ldr	r3, [pc, #308]	@ (80025fc <LPTIM1_callback+0x268>)
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	2a03      	cmp	r2, #3
 80024cc:	d0c3      	beq.n	8002456 <LPTIM1_callback+0xc2>
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d0c0      	beq.n	8002456 <LPTIM1_callback+0xc2>
	if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 80024d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002600 <LPTIM1_callback+0x26c>)
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	2a03      	cmp	r2, #3
 80024da:	d0c4      	beq.n	8002466 <LPTIM1_callback+0xd2>
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d0c1      	beq.n	8002466 <LPTIM1_callback+0xd2>
	if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 80024e2:	4b48      	ldr	r3, [pc, #288]	@ (8002604 <LPTIM1_callback+0x270>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	2a03      	cmp	r2, #3
 80024e8:	d0c5      	beq.n	8002476 <LPTIM1_callback+0xe2>
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d0c2      	beq.n	8002476 <LPTIM1_callback+0xe2>
	if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 80024f0:	4b45      	ldr	r3, [pc, #276]	@ (8002608 <LPTIM1_callback+0x274>)
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	2a03      	cmp	r2, #3
 80024f6:	d0c6      	beq.n	8002486 <LPTIM1_callback+0xf2>
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d0c3      	beq.n	8002486 <LPTIM1_callback+0xf2>
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80024fe:	22fa      	movs	r2, #250	@ 0xfa
 8002500:	21fa      	movs	r1, #250	@ 0xfa
 8002502:	4842      	ldr	r0, [pc, #264]	@ (800260c <LPTIM1_callback+0x278>)
 8002504:	f002 fbe8 	bl	8004cd8 <HAL_LPTIM_SetOnce_Start_IT>

}
 8002508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800250a:	3304      	adds	r3, #4
 800250c:	7023      	strb	r3, [r4, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 800250e:	7062      	strb	r2, [r4, #1]
 8002510:	e7c4      	b.n	800249c <LPTIM1_callback+0x108>
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002512:	2800      	cmp	r0, #0
 8002514:	d1c1      	bne.n	800249a <LPTIM1_callback+0x106>
 8002516:	4d34      	ldr	r5, [pc, #208]	@ (80025e8 <LPTIM1_callback+0x254>)
 8002518:	782b      	ldrb	r3, [r5, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04e      	beq.n	80025bc <LPTIM1_callback+0x228>
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 800251e:	7823      	ldrb	r3, [r4, #0]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d1bb      	bne.n	800249c <LPTIM1_callback+0x108>
 8002524:	e756      	b.n	80023d4 <LPTIM1_callback+0x40>
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8002526:	4b30      	ldr	r3, [pc, #192]	@ (80025e8 <LPTIM1_callback+0x254>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1c5      	bne.n	80024ba <LPTIM1_callback+0x126>
		Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800252e:	4c2f      	ldr	r4, [pc, #188]	@ (80025ec <LPTIM1_callback+0x258>)
 8002530:	2140      	movs	r1, #64	@ 0x40
 8002532:	0020      	movs	r0, r4
 8002534:	f000 ffe2 	bl	80034fc <Set_Status_Bit>
		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8002538:	2120      	movs	r1, #32
 800253a:	0020      	movs	r0, r4
 800253c:	f000 ffd8 	bl	80034f0 <Get_Status_Bit>
 8002540:	2801      	cmp	r0, #1
 8002542:	d1c0      	bne.n	80024c6 <LPTIM1_callback+0x132>
 8002544:	e77f      	b.n	8002446 <LPTIM1_callback+0xb2>
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8002546:	4b28      	ldr	r3, [pc, #160]	@ (80025e8 <LPTIM1_callback+0x254>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b2dd      	uxtb	r5, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1b7      	bne.n	80024c0 <LPTIM1_callback+0x12c>
		Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002550:	4c26      	ldr	r4, [pc, #152]	@ (80025ec <LPTIM1_callback+0x258>)
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	0020      	movs	r0, r4
 8002556:	f000 ffd1 	bl	80034fc <Set_Status_Bit>
		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 800255a:	2120      	movs	r1, #32
 800255c:	0020      	movs	r0, r4
 800255e:	f000 ffc7 	bl	80034f0 <Get_Status_Bit>
 8002562:	2801      	cmp	r0, #1
 8002564:	d1af      	bne.n	80024c6 <LPTIM1_callback+0x132>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8002566:	2180      	movs	r1, #128	@ 0x80
 8002568:	20a0      	movs	r0, #160	@ 0xa0
 800256a:	2201      	movs	r2, #1
 800256c:	0089      	lsls	r1, r1, #2
 800256e:	05c0      	lsls	r0, r0, #23
 8002570:	f002 f97a 	bl	8004868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	2140      	movs	r1, #64	@ 0x40
 8002578:	481e      	ldr	r0, [pc, #120]	@ (80025f4 <LPTIM1_callback+0x260>)
 800257a:	f002 f975 	bl	8004868 <HAL_GPIO_WritePin>
			MIDI_CLK_fsm = NOT_COMPILING;
 800257e:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <LPTIM1_callback+0x27c>)
 8002580:	701d      	strb	r5, [r3, #0]
			MIDI_CLK_tag = 0;
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <LPTIM1_callback+0x280>)
 8002584:	701d      	strb	r5, [r3, #0]
 8002586:	e75e      	b.n	8002446 <LPTIM1_callback+0xb2>
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8002588:	2800      	cmp	r0, #0
 800258a:	d000      	beq.n	800258e <LPTIM1_callback+0x1fa>
 800258c:	e784      	b.n	8002498 <LPTIM1_callback+0x104>
		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800258e:	3302      	adds	r3, #2
 8002590:	7023      	strb	r3, [r4, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8002592:	7062      	strb	r2, [r4, #1]
 8002594:	e782      	b.n	800249c <LPTIM1_callback+0x108>
	else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <LPTIM1_callback+0x254>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d000      	beq.n	80025a0 <LPTIM1_callback+0x20c>
 800259e:	e792      	b.n	80024c6 <LPTIM1_callback+0x132>
 80025a0:	e7c5      	b.n	800252e <LPTIM1_callback+0x19a>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80025a2:	2180      	movs	r1, #128	@ 0x80
 80025a4:	20a0      	movs	r0, #160	@ 0xa0
 80025a6:	2200      	movs	r2, #0
 80025a8:	0089      	lsls	r1, r1, #2
 80025aa:	05c0      	lsls	r0, r0, #23
 80025ac:	f002 f95c 	bl	8004868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2140      	movs	r1, #64	@ 0x40
 80025b4:	480f      	ldr	r0, [pc, #60]	@ (80025f4 <LPTIM1_callback+0x260>)
 80025b6:	f002 f957 	bl	8004868 <HAL_GPIO_WritePin>
 80025ba:	e775      	b.n	80024a8 <LPTIM1_callback+0x114>
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80025bc:	4f0b      	ldr	r7, [pc, #44]	@ (80025ec <LPTIM1_callback+0x258>)
 80025be:	2120      	movs	r1, #32
 80025c0:	0038      	movs	r0, r7
 80025c2:	f000 ff95 	bl	80034f0 <Get_Status_Bit>
 80025c6:	2801      	cmp	r0, #1
 80025c8:	d1a9      	bne.n	800251e <LPTIM1_callback+0x18a>
		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80025ca:	2305      	movs	r3, #5
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80025cc:	0038      	movs	r0, r7
 80025ce:	2120      	movs	r1, #32
		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80025d0:	7023      	strb	r3, [r4, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 80025d2:	7066      	strb	r6, [r4, #1]
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80025d4:	f000 ff96 	bl	8003504 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80025d8:	2140      	movs	r1, #64	@ 0x40
 80025da:	0038      	movs	r0, r7
 80025dc:	f000 ff92 	bl	8003504 <Clear_Status_Bit>
 80025e0:	e75c      	b.n	800249c <LPTIM1_callback+0x108>
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	2000043c 	.word	0x2000043c
 80025e8:	20000428 	.word	0x20000428
 80025ec:	20000c30 	.word	0x20000c30
 80025f0:	20000c1c 	.word	0x20000c1c
 80025f4:	50000800 	.word	0x50000800
 80025f8:	20000c7c 	.word	0x20000c7c
 80025fc:	20000434 	.word	0x20000434
 8002600:	20000438 	.word	0x20000438
 8002604:	20000430 	.word	0x20000430
 8002608:	2000042c 	.word	0x2000042c
 800260c:	200004f0 	.word	0x200004f0
 8002610:	20000cce 	.word	0x20000cce
 8002614:	20000c1e 	.word	0x20000c1e

08002618 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){


}
 8002618:	4770      	bx	lr
 800261a:	46c0      	nop			@ (mov r8, r8)

0800261c <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 800261c:	4770      	bx	lr
 800261e:	46c0      	nop			@ (mov r8, r8)

08002620 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b083      	sub	sp, #12
 8002624:	466b      	mov	r3, sp
 8002626:	000f      	movs	r7, r1
 8002628:	80d8      	strh	r0, [r3, #6]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 800262a:	2104      	movs	r1, #4
 800262c:	481a      	ldr	r0, [pc, #104]	@ (8002698 <Input_Capture_Processing+0x78>)
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 800262e:	1d9d      	adds	r5, r3, #6
	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8002630:	f000 ff68 	bl	8003504 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8002634:	8828      	ldrh	r0, [r5, #0]
 8002636:	b280      	uxth	r0, r0
 8002638:	f000 ff36 	bl	80034a8 <isPrime>
 800263c:	2801      	cmp	r0, #1
 800263e:	d103      	bne.n	8002648 <Input_Capture_Processing+0x28>

		interrupt_period_value += 1;
 8002640:	882b      	ldrh	r3, [r5, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	b29b      	uxth	r3, r3
 8002646:	802b      	strh	r3, [r5, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8002648:	2480      	movs	r4, #128	@ 0x80
 800264a:	882e      	ldrh	r6, [r5, #0]
 800264c:	0064      	lsls	r4, r4, #1
 800264e:	01b6      	lsls	r6, r6, #6

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8002650:	e003      	b.n	800265a <Input_Capture_Processing+0x3a>
 8002652:	3c01      	subs	r4, #1
 8002654:	b2a4      	uxth	r4, r4
 8002656:	2c7f      	cmp	r4, #127	@ 0x7f
 8002658:	d00e      	beq.n	8002678 <Input_Capture_Processing+0x58>

		interrupt_period_value = 256 - i;
 800265a:	802c      	strh	r4, [r5, #0]
		uint16_t remainder = N % interrupt_period_value;
 800265c:	8829      	ldrh	r1, [r5, #0]
 800265e:	0030      	movs	r0, r6
 8002660:	b289      	uxth	r1, r1
 8002662:	f7fd fdd5 	bl	8000210 <__aeabi_uidivmod>

		if(remainder == 0){ //check if no remainder -> integer
 8002666:	2900      	cmp	r1, #0
 8002668:	d1f3      	bne.n	8002652 <Input_Capture_Processing+0x32>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 800266a:	8829      	ldrh	r1, [r5, #0]
 800266c:	0030      	movs	r0, r6
 800266e:	b289      	uxth	r1, r1
 8002670:	f7fd fd48 	bl	8000104 <__udivsi3>
 8002674:	b280      	uxth	r0, r0
 8002676:	8378      	strh	r0, [r7, #26]
			break;
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	882a      	ldrh	r2, [r5, #0]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	b29b      	uxth	r3, r3

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8002682:	2101      	movs	r1, #1
	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8002684:	827b      	strh	r3, [r7, #18]
	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8002686:	0038      	movs	r0, r7
 8002688:	f000 f91a 	bl	80028c0 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 800268c:	0038      	movs	r0, r7
 800268e:	f000 fdb7 	bl	8003200 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
}
 8002692:	2001      	movs	r0, #1
 8002694:	b003      	add	sp, #12
 8002696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002698:	20000c30 	.word	0x20000c30

0800269c <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 800269c:	b570      	push	{r4, r5, r6, lr}
	return ok;
}

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 800269e:	4d0a      	ldr	r5, [pc, #40]	@ (80026c8 <Start_Input_Capture_Timer+0x2c>)
 80026a0:	0028      	movs	r0, r5
 80026a2:	f003 f953 	bl	800594c <HAL_TIM_Base_Start_IT>
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 80026a6:	2100      	movs	r1, #0
	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 80026a8:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 80026aa:	0028      	movs	r0, r5
 80026ac:	f003 fd56 	bl	800615c <HAL_TIM_IC_Start_IT>
 80026b0:	4004      	ands	r4, r0
 80026b2:	b2e4      	uxtb	r4, r4

	if(ok_AND != HAL_OK){
 80026b4:	2c00      	cmp	r4, #0
 80026b6:	d101      	bne.n	80026bc <Start_Input_Capture_Timer+0x20>
}
 80026b8:	0020      	movs	r0, r4
 80026ba:	bd70      	pop	{r4, r5, r6, pc}

		Error_Handler();
 80026bc:	f7fe ff5a 	bl	8001574 <Error_Handler>
		Error_Handler();
 80026c0:	f7fe ff58 	bl	8001574 <Error_Handler>
 80026c4:	e7f8      	b.n	80026b8 <Start_Input_Capture_Timer+0x1c>
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	20000848 	.word	0x20000848

080026cc <Copy_Params_Structs>:
	}

	return ok_AND;
}

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 80026cc:	0003      	movs	r3, r0
 80026ce:	b510      	push	{r4, lr}
 80026d0:	0008      	movs	r0, r1

	*dst_ptr = *src_ptr;
 80026d2:	2224      	movs	r2, #36	@ 0x24
 80026d4:	0019      	movs	r1, r3
 80026d6:	f005 fba1 	bl	8007e1c <memcpy>

	return 1;
}
 80026da:	2001      	movs	r0, #1
 80026dc:	bd10      	pop	{r4, pc}
 80026de:	46c0      	nop			@ (mov r8, r8)

080026e0 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 80026e0:	b510      	push	{r4, lr}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 80026e2:	4c09      	ldr	r4, [pc, #36]	@ (8002708 <Start_Measurement_Reelapse_Timer+0x28>)
 80026e4:	2100      	movs	r1, #0
 80026e6:	0020      	movs	r0, r4
 80026e8:	f000 fed4 	bl	8003494 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80026ec:	2300      	movs	r3, #0
 80026ee:	6822      	ldr	r2, [r4, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 80026f0:	2100      	movs	r1, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80026f2:	6253      	str	r3, [r2, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <Start_Measurement_Reelapse_Timer+0x2c>)
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 80026f6:	0020      	movs	r0, r4
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	6353      	str	r3, [r2, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 80026fe:	f000 febf 	bl	8003480 <Start_OC_TIM>

	return 1;
}
 8002702:	2001      	movs	r0, #1
 8002704:	bd10      	pop	{r4, pc}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	2000078c 	.word	0x2000078c
 800270c:	20000c20 	.word	0x20000c20

08002710 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8002710:	2200      	movs	r2, #0
 8002712:	4b02      	ldr	r3, [pc, #8]	@ (800271c <Begin_Input_Capture_Measurement+0xc>)

	return 1;
}
 8002714:	2001      	movs	r0, #1
	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800271a:	4770      	bx	lr
 800271c:	20000848 	.word	0x20000848

08002720 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	46de      	mov	lr, fp
 8002724:	4657      	mov	r7, sl
 8002726:	464e      	mov	r6, r9
 8002728:	4645      	mov	r5, r8
 800272a:	b5e0      	push	{r5, r6, r7, lr}
	//SYSTEM INIT
	System_Init();
 800272c:	f7fe ff24 	bl	8001578 <System_Init>

	//STARTUP
	Startup();
 8002730:	f000 f9d0 	bl	8002ad4 <Startup>
 8002734:	4b30      	ldr	r3, [pc, #192]	@ (80027f8 <main+0xd8>)
			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){

			if(idle_counter < IDLE_COUNT){
 8002736:	26fa      	movs	r6, #250	@ 0xfa
 8002738:	4699      	mov	r9, r3
 800273a:	4b30      	ldr	r3, [pc, #192]	@ (80027fc <main+0xdc>)
 800273c:	4c30      	ldr	r4, [pc, #192]	@ (8002800 <main+0xe0>)
 800273e:	469b      	mov	fp, r3
 8002740:	4b30      	ldr	r3, [pc, #192]	@ (8002804 <main+0xe4>)
 8002742:	4d31      	ldr	r5, [pc, #196]	@ (8002808 <main+0xe8>)
 8002744:	469a      	mov	sl, r3
 8002746:	4f31      	ldr	r7, [pc, #196]	@ (800280c <main+0xec>)
 8002748:	01f6      	lsls	r6, r6, #7
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
				idle_counter = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	4698      	mov	r8, r3
 800274e:	e006      	b.n	800275e <main+0x3e>
			}
		}
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8002750:	2180      	movs	r1, #128	@ 0x80
 8002752:	0020      	movs	r0, r4
 8002754:	0049      	lsls	r1, r1, #1
 8002756:	f000 fecb 	bl	80034f0 <Get_Status_Bit>
 800275a:	2801      	cmp	r0, #1
 800275c:	d01a      	beq.n	8002794 <main+0x74>
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 800275e:	2104      	movs	r1, #4
 8002760:	0020      	movs	r0, r4
 8002762:	f000 fec5 	bl	80034f0 <Get_Status_Bit>
 8002766:	2801      	cmp	r0, #1
 8002768:	d01c      	beq.n	80027a4 <main+0x84>
		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 800276a:	2140      	movs	r1, #64	@ 0x40
 800276c:	0020      	movs	r0, r4
 800276e:	f000 febf 	bl	80034f0 <Get_Status_Bit>
 8002772:	2801      	cmp	r0, #1
 8002774:	d1ec      	bne.n	8002750 <main+0x30>
			if(idle_counter < IDLE_COUNT){
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	42b3      	cmp	r3, r6
 800277a:	d21a      	bcs.n	80027b2 <main+0x92>
				if(IP_CAP_fsm.current_state != IDLE){
 800277c:	783a      	ldrb	r2, [r7, #0]
 800277e:	2a00      	cmp	r2, #0
 8002780:	d122      	bne.n	80027c8 <main+0xa8>
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8002782:	2180      	movs	r1, #128	@ 0x80
					idle_counter++;
 8002784:	3301      	adds	r3, #1
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8002786:	0020      	movs	r0, r4
 8002788:	0049      	lsls	r1, r1, #1
					idle_counter++;
 800278a:	602b      	str	r3, [r5, #0]
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 800278c:	f000 feb0 	bl	80034f0 <Get_Status_Bit>
 8002790:	2801      	cmp	r0, #1
 8002792:	d1e4      	bne.n	800275e <main+0x3e>

			if(midi_counter < MIDI_COUNT){
 8002794:	464b      	mov	r3, r9
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	42b3      	cmp	r3, r6
 800279a:	d220      	bcs.n	80027de <main+0xbe>

				midi_counter++;
 800279c:	3301      	adds	r3, #1
 800279e:	464a      	mov	r2, r9
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e7d2      	b.n	800274a <main+0x2a>
			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 80027a4:	465b      	mov	r3, fp
 80027a6:	8818      	ldrh	r0, [r3, #0]
 80027a8:	4651      	mov	r1, sl
 80027aa:	b280      	uxth	r0, r0
 80027ac:	f7ff ff38 	bl	8002620 <Input_Capture_Processing>
 80027b0:	e7db      	b.n	800276a <main+0x4a>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80027b2:	2140      	movs	r1, #64	@ 0x40
 80027b4:	0020      	movs	r0, r4
 80027b6:	f000 fea5 	bl	8003504 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80027ba:	2120      	movs	r1, #32
 80027bc:	0020      	movs	r0, r4
 80027be:	f000 fe9d 	bl	80034fc <Set_Status_Bit>
				idle_counter = 0;
 80027c2:	4643      	mov	r3, r8
 80027c4:	602b      	str	r3, [r5, #0]
 80027c6:	e7c3      	b.n	8002750 <main+0x30>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80027c8:	2140      	movs	r1, #64	@ 0x40
 80027ca:	0020      	movs	r0, r4
 80027cc:	f000 fe9a 	bl	8003504 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80027d0:	2120      	movs	r1, #32
 80027d2:	0020      	movs	r0, r4
 80027d4:	f000 fe96 	bl	8003504 <Clear_Status_Bit>
					idle_counter = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	602b      	str	r3, [r5, #0]
 80027dc:	e7b8      	b.n	8002750 <main+0x30>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80027de:	2180      	movs	r1, #128	@ 0x80
 80027e0:	0020      	movs	r0, r4
 80027e2:	0049      	lsls	r1, r1, #1
 80027e4:	f000 fe8e 	bl	8003504 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	0020      	movs	r0, r4
 80027ec:	0089      	lsls	r1, r1, #2
 80027ee:	f000 fe85 	bl	80034fc <Set_Status_Bit>
 80027f2:	2300      	movs	r3, #0
 80027f4:	e7d3      	b.n	800279e <main+0x7e>
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	20000c28 	.word	0x20000c28
 80027fc:	20000c20 	.word	0x20000c20
 8002800:	20000c30 	.word	0x20000c30
 8002804:	20000c58 	.word	0x20000c58
 8002808:	20000c2c 	.word	0x20000c2c
 800280c:	20000428 	.word	0x20000428

08002810 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	0016      	movs	r6, r2
 8002814:	0005      	movs	r5, r0
 8002816:	000f      	movs	r7, r1
	uint8_t ok_OR = 0;
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8002818:	f003 f86a 	bl	80058f0 <HAL_TIM_Base_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 800281c:	0039      	movs	r1, r7
	ok_OR |= HAL_TIM_Base_Start(TIM);
 800281e:	0004      	movs	r4, r0
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8002820:	0028      	movs	r0, r5
 8002822:	f003 fb5d 	bl	8005ee0 <HAL_TIM_PWM_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8002826:	0031      	movs	r1, r6
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8002828:	4304      	orrs	r4, r0
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 800282a:	0028      	movs	r0, r5
 800282c:	f003 fb58 	bl	8005ee0 <HAL_TIM_PWM_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8002830:	b2e4      	uxtb	r4, r4
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8002832:	4304      	orrs	r4, r0
 8002834:	b2e4      	uxtb	r4, r4

	if(ok_OR != HAL_OK){
 8002836:	2c00      	cmp	r4, #0
 8002838:	d101      	bne.n	800283e <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x2e>

		Error_Handler();
	}

	return ok_OR;
}
 800283a:	0020      	movs	r0, r4
 800283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Error_Handler();
 800283e:	f7fe fe99 	bl	8001574 <Error_Handler>
 8002842:	e7fa      	b.n	800283a <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x2a>

08002844 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8002844:	b510      	push	{r4, lr}
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8002846:	2100      	movs	r1, #0
 8002848:	4804      	ldr	r0, [pc, #16]	@ (800285c <Start_Freq_Gen_Timer+0x18>)
 800284a:	f000 fe19 	bl	8003480 <Start_OC_TIM>
 800284e:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 8002850:	d101      	bne.n	8002856 <Start_Freq_Gen_Timer+0x12>

		Error_Handler();
	}

	return ok;
}
 8002852:	0020      	movs	r0, r4
 8002854:	bd10      	pop	{r4, pc}
		Error_Handler();
 8002856:	f7fe fe8d 	bl	8001574 <Error_Handler>
 800285a:	e7fa      	b.n	8002852 <Start_Freq_Gen_Timer+0xe>
 800285c:	20000904 	.word	0x20000904

08002860 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

	uint32_t speed_control = 0;
	uint8_t how_many_128 = 0;

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8002860:	8902      	ldrh	r2, [r0, #8]
 8002862:	0093      	lsls	r3, r2, #2
 8002864:	189b      	adds	r3, r3, r2
 8002866:	019b      	lsls	r3, r3, #6
 8002868:	189b      	adds	r3, r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	189b      	adds	r3, r3, r2
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800286e:	0c59      	lsrs	r1, r3, #17
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8002870:	b2ca      	uxtb	r2, r1
 8002872:	01d2      	lsls	r2, r2, #7
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8002874:	0a9b      	lsrs	r3, r3, #10
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	8243      	strh	r3, [r0, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 800287c:	22ff      	movs	r2, #255	@ 0xff
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	400a      	ands	r2, r1
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4113      	asrs	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	8343      	strh	r3, [r0, #26]

    return 1;
}
 800288a:	2001      	movs	r0, #1
 800288c:	4770      	bx	lr
 800288e:	46c0      	nop			@ (mov r8, r8)

08002890 <Set_Oscillator_Values>:
uint8_t Set_Oscillator_Values(struct Params* params_ptr){

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8002890:	4909      	ldr	r1, [pc, #36]	@ (80028b8 <Set_Oscillator_Values+0x28>)
 8002892:	8b03      	ldrh	r3, [r0, #24]
 8002894:	680a      	ldr	r2, [r1, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800289a:	8b03      	ldrh	r3, [r0, #24]
 800289c:	60cb      	str	r3, [r1, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 800289e:	8bc3      	ldrh	r3, [r0, #30]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	6293      	str	r3, [r2, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80028a4:	4a05      	ldr	r2, [pc, #20]	@ (80028bc <Set_Oscillator_Values+0x2c>)
 80028a6:	8843      	ldrh	r3, [r0, #2]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	6393      	str	r3, [r2, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80028ae:	8883      	ldrh	r3, [r0, #4]

	return 1;
}
 80028b0:	2001      	movs	r0, #1
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80028b6:	4770      	bx	lr
 80028b8:	20000904 	.word	0x20000904
 80028bc:	200006d0 	.word	0x200006d0

080028c0 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){

	if(mode == REGULAR_MODE){
 80028c0:	2900      	cmp	r1, #0
 80028c2:	d11e      	bne.n	8002902 <Calculate_Next_Main_Oscillator_Values+0x42>

		params_ptr->index++;
 80028c4:	89c3      	ldrh	r3, [r0, #14]
 80028c6:	3301      	adds	r3, #1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	81c3      	strh	r3, [r0, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	89c2      	ldrh	r2, [r0, #14]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d053      	beq.n	800297e <Calculate_Next_Main_Oscillator_Values+0xbe>
			params_ptr->index = 0;
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80028d6:	89c3      	ldrh	r3, [r0, #14]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04c      	beq.n	8002978 <Calculate_Next_Main_Oscillator_Values+0xb8>
			params_ptr->quadrant = FIRST_QUADRANT;
			params_ptr->halfcycle = FIRST_HALFCYCLE;
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 80028de:	89c3      	ldrh	r3, [r0, #14]
 80028e0:	2b80      	cmp	r3, #128	@ 0x80
 80028e2:	d04e      	beq.n	8002982 <Calculate_Next_Main_Oscillator_Values+0xc2>
			params_ptr->quadrant = SECOND_QUADRANT;
			params_ptr->halfcycle = FIRST_HALFCYCLE;
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	89c2      	ldrh	r2, [r0, #14]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d051      	beq.n	8002992 <Calculate_Next_Main_Oscillator_Values+0xd2>
			params_ptr->quadrant = FIRST_QUADRANT;
			params_ptr->halfcycle = SECOND_HALFCYCLE;
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 80028ee:	23c0      	movs	r3, #192	@ 0xc0
 80028f0:	89c2      	ldrh	r2, [r0, #14]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d108      	bne.n	800290a <Calculate_Next_Main_Oscillator_Values+0x4a>
			params_ptr->quadrant = SECOND_QUADRANT;
 80028f8:	3b80      	subs	r3, #128	@ 0x80
 80028fa:	3bff      	subs	r3, #255	@ 0xff
 80028fc:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80028fe:	7403      	strb	r3, [r0, #16]
 8002900:	e003      	b.n	800290a <Calculate_Next_Main_Oscillator_Values+0x4a>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8002902:	2901      	cmp	r1, #1
 8002904:	d050      	beq.n	80029a8 <Calculate_Next_Main_Oscillator_Values+0xe8>
			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
		}
	}
	else if(mode == STARTUP_MODE){
 8002906:	2902      	cmp	r1, #2
 8002908:	d032      	beq.n	8002970 <Calculate_Next_Main_Oscillator_Values+0xb0>
			params_ptr->halfcycle = FIRST_HALFCYCLE;
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 800290a:	7983      	ldrb	r3, [r0, #6]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d117      	bne.n	8002940 <Calculate_Next_Main_Oscillator_Values+0x80>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8002910:	89c2      	ldrh	r2, [r0, #14]
 8002912:	4b2f      	ldr	r3, [pc, #188]	@ (80029d0 <Calculate_Next_Main_Oscillator_Values+0x110>)
 8002914:	0052      	lsls	r2, r2, #1
 8002916:	5ad3      	ldrh	r3, [r2, r3]
 8002918:	8003      	strh	r3, [r0, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 800291a:	7a83      	ldrb	r3, [r0, #10]
 800291c:	2b7f      	cmp	r3, #127	@ 0x7f
 800291e:	d01e      	beq.n	800295e <Calculate_Next_Main_Oscillator_Values+0x9e>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
		}
		else if(params_ptr->depth != 0){
 8002920:	7a83      	ldrb	r3, [r0, #10]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d021      	beq.n	800296a <Calculate_Next_Main_Oscillator_Values+0xaa>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8002926:	8803      	ldrh	r3, [r0, #0]
 8002928:	7a82      	ldrb	r2, [r0, #10]
 800292a:	435a      	muls	r2, r3
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 800292c:	4b29      	ldr	r3, [pc, #164]	@ (80029d4 <Calculate_Next_Main_Oscillator_Values+0x114>)
 800292e:	09d2      	lsrs	r2, r2, #7
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	8003      	strh	r3, [r0, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8002936:	8803      	ldrh	r3, [r0, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	8043      	strh	r3, [r0, #2]

	return 1;
}
 800293c:	2001      	movs	r0, #1
 800293e:	4770      	bx	lr
	else if(params_ptr->waveshape == SINE_MODE){
 8002940:	7983      	ldrb	r3, [r0, #6]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d02a      	beq.n	800299c <Calculate_Next_Main_Oscillator_Values+0xdc>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8002946:	7983      	ldrb	r3, [r0, #6]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d03a      	beq.n	80029c2 <Calculate_Next_Main_Oscillator_Values+0x102>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 800294c:	7983      	ldrb	r3, [r0, #6]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d1e3      	bne.n	800291a <Calculate_Next_Main_Oscillator_Values+0x5a>
 8002952:	89c3      	ldrh	r3, [r0, #14]
 8002954:	2bff      	cmp	r3, #255	@ 0xff
 8002956:	d9e0      	bls.n	800291a <Calculate_Next_Main_Oscillator_Values+0x5a>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8002958:	2300      	movs	r3, #0
 800295a:	8003      	strh	r3, [r0, #0]
 800295c:	e7dd      	b.n	800291a <Calculate_Next_Main_Oscillator_Values+0x5a>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 800295e:	8802      	ldrh	r2, [r0, #0]
 8002960:	4b1c      	ldr	r3, [pc, #112]	@ (80029d4 <Calculate_Next_Main_Oscillator_Values+0x114>)
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	8003      	strh	r3, [r0, #0]
 8002968:	e7e5      	b.n	8002936 <Calculate_Next_Main_Oscillator_Values+0x76>
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 800296a:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <Calculate_Next_Main_Oscillator_Values+0x114>)
 800296c:	8003      	strh	r3, [r0, #0]
 800296e:	e7e2      	b.n	8002936 <Calculate_Next_Main_Oscillator_Values+0x76>
		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8002970:	89c3      	ldrh	r3, [r0, #14]
 8002972:	b29a      	uxth	r2, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1c8      	bne.n	800290a <Calculate_Next_Main_Oscillator_Values+0x4a>
			params_ptr->quadrant = FIRST_QUADRANT;
 8002978:	7442      	strb	r2, [r0, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 800297a:	7402      	strb	r2, [r0, #16]
 800297c:	e7c5      	b.n	800290a <Calculate_Next_Main_Oscillator_Values+0x4a>
			params_ptr->index = 0;
 800297e:	81c1      	strh	r1, [r0, #14]
 8002980:	e7a9      	b.n	80028d6 <Calculate_Next_Main_Oscillator_Values+0x16>
			params_ptr->quadrant = SECOND_QUADRANT;
 8002982:	3b7f      	subs	r3, #127	@ 0x7f
 8002984:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8002986:	2300      	movs	r3, #0
 8002988:	7403      	strb	r3, [r0, #16]
 800298a:	e7be      	b.n	800290a <Calculate_Next_Main_Oscillator_Values+0x4a>
			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 800298c:	23a7      	movs	r3, #167	@ 0xa7
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	81c3      	strh	r3, [r0, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8002992:	2300      	movs	r3, #0
 8002994:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8002996:	3301      	adds	r3, #1
 8002998:	7403      	strb	r3, [r0, #16]
 800299a:	e7b6      	b.n	800290a <Calculate_Next_Main_Oscillator_Values+0x4a>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 800299c:	89c2      	ldrh	r2, [r0, #14]
 800299e:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <Calculate_Next_Main_Oscillator_Values+0x118>)
 80029a0:	0052      	lsls	r2, r2, #1
 80029a2:	5ad3      	ldrh	r3, [r2, r3]
 80029a4:	8003      	strh	r3, [r0, #0]
 80029a6:	e7b8      	b.n	800291a <Calculate_Next_Main_Oscillator_Values+0x5a>
		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 80029a8:	7983      	ldrb	r3, [r0, #6]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d0ee      	beq.n	800298c <Calculate_Next_Main_Oscillator_Values+0xcc>
 80029ae:	7983      	ldrb	r3, [r0, #6]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0eb      	beq.n	800298c <Calculate_Next_Main_Oscillator_Values+0xcc>
			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	81c3      	strh	r3, [r0, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 80029ba:	2300      	movs	r3, #0
 80029bc:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 80029be:	7401      	strb	r1, [r0, #16]
 80029c0:	e7a3      	b.n	800290a <Calculate_Next_Main_Oscillator_Values+0x4a>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 80029c2:	89c3      	ldrh	r3, [r0, #14]
 80029c4:	2bff      	cmp	r3, #255	@ 0xff
 80029c6:	d8c1      	bhi.n	800294c <Calculate_Next_Main_Oscillator_Values+0x8c>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 80029c8:	4b02      	ldr	r3, [pc, #8]	@ (80029d4 <Calculate_Next_Main_Oscillator_Values+0x114>)
 80029ca:	8003      	strh	r3, [r0, #0]
 80029cc:	e7a5      	b.n	800291a <Calculate_Next_Main_Oscillator_Values+0x5a>
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	08007e80 	.word	0x08007e80
 80029d4:	000003ff 	.word	0x000003ff
 80029d8:	08008280 	.word	0x08008280

080029dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 80029dc:	b510      	push	{r4, lr}

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 80029de:	4b29      	ldr	r3, [pc, #164]	@ (8002a84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa8>)
 80029e0:	5aca      	ldrh	r2, [r1, r3]
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d026      	beq.n	8002a34 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x58>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 80029e6:	5acb      	ldrh	r3, [r1, r3]
 80029e8:	8802      	ldrh	r2, [r0, #0]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b292      	uxth	r2, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	525a      	strh	r2, [r3, r1]
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 80029f2:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa8>)
 80029f4:	5aca      	ldrh	r2, [r1, r3]
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	d125      	bne.n	8002a46 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x6a>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 80029fa:	2280      	movs	r2, #128	@ 0x80
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	52ca      	strh	r2, [r1, r3]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8002a00:	4a21      	ldr	r2, [pc, #132]	@ (8002a88 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xac>)
 8002a02:	5a8b      	ldrh	r3, [r1, r2]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	528b      	strh	r3, [r1, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8002a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa8>)
 8002a0c:	5a8b      	ldrh	r3, [r1, r2]
 8002a0e:	8c44      	ldrh	r4, [r0, #34]	@ 0x22
 8002a10:	191b      	adds	r3, r3, r4
 8002a12:	2480      	movs	r4, #128	@ 0x80
 8002a14:	00a4      	lsls	r4, r4, #2
 8002a16:	42a3      	cmp	r3, r4
 8002a18:	dd21      	ble.n	8002a5e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x82>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8002a1a:	5a8b      	ldrh	r3, [r1, r2]
 8002a1c:	8c42      	ldrh	r2, [r0, #34]	@ 0x22
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	4a1a      	ldr	r2, [pc, #104]	@ (8002a8c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb0>)
 8002a22:	4694      	mov	ip, r2
 8002a24:	4463      	add	r3, ip
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	18cb      	adds	r3, r1, r3
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	8083      	strh	r3, [r0, #4]
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
		}

	return 1;
}
 8002a30:	2001      	movs	r0, #1
 8002a32:	bd10      	pop	{r4, pc}
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8002a34:	2280      	movs	r2, #128	@ 0x80
 8002a36:	8803      	ldrh	r3, [r0, #0]
 8002a38:	00d2      	lsls	r2, r2, #3
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	528b      	strh	r3, [r1, r2]
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8002a3e:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa8>)
 8002a40:	5aca      	ldrh	r2, [r1, r3]
 8002a42:	2a00      	cmp	r2, #0
 8002a44:	d0d9      	beq.n	80029fa <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x1e>
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8002a46:	4a10      	ldr	r2, [pc, #64]	@ (8002a88 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xac>)
 8002a48:	5a8c      	ldrh	r4, [r1, r2]
 8002a4a:	2c00      	cmp	r4, #0
 8002a4c:	d110      	bne.n	8002a70 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x94>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8002a4e:	2480      	movs	r4, #128	@ 0x80
 8002a50:	00a4      	lsls	r4, r4, #2
 8002a52:	528c      	strh	r4, [r1, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8002a54:	5aca      	ldrh	r2, [r1, r3]
 8002a56:	3a01      	subs	r2, #1
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	52ca      	strh	r2, [r1, r3]
 8002a5c:	e7d5      	b.n	8002a0a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8002a5e:	5a8b      	ldrh	r3, [r1, r2]
 8002a60:	8c42      	ldrh	r2, [r0, #34]	@ 0x22
 8002a62:	189b      	adds	r3, r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	18c9      	adds	r1, r1, r3
 8002a68:	880b      	ldrh	r3, [r1, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	8083      	strh	r3, [r0, #4]
 8002a6e:	e7df      	b.n	8002a30 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x54>
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8002a70:	5acc      	ldrh	r4, [r1, r3]
 8002a72:	3c01      	subs	r4, #1
 8002a74:	b2a4      	uxth	r4, r4
 8002a76:	52cc      	strh	r4, [r1, r3]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8002a78:	5a8b      	ldrh	r3, [r1, r2]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	528b      	strh	r3, [r1, r2]
 8002a80:	e7c3      	b.n	8002a0a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	00000402 	.word	0x00000402
 8002a88:	00000404 	.word	0x00000404
 8002a8c:	7ffffe00 	.word	0x7ffffe00

08002a90 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8002a90:	880b      	ldrh	r3, [r1, #0]
 8002a92:	095b      	lsrs	r3, r3, #5

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8002a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a96:	d813      	bhi.n	8002ac0 <Process_ADC_Conversion_Values+0x30>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8002a98:	2300      	movs	r3, #0
 8002a9a:	7183      	strb	r3, [r0, #6]
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
		params_ptr->waveshape = SQUARE_MODE; //square wave
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8002a9c:	884b      	ldrh	r3, [r1, #2]
 8002a9e:	095b      	lsrs	r3, r3, #5
	temp_speed <<= 3; //convert to 10-bit
 8002aa0:	00db      	lsls	r3, r3, #3
	params_ptr->speed = temp_speed;
 8002aa2:	8103      	strh	r3, [r0, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8002aa4:	888b      	ldrh	r3, [r1, #4]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	b2db      	uxtb	r3, r3
		params_ptr->depth = temp_depth;
 8002aaa:	7283      	strb	r3, [r0, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8002aac:	88cb      	ldrh	r3, [r1, #6]
 8002aae:	095b      	lsrs	r3, r3, #5
		temp_symmetry <<= 1; //convert to 8-bit
 8002ab0:	005b      	lsls	r3, r3, #1
		params_ptr->symmetry = temp_symmetry;
 8002ab2:	8183      	strh	r3, [r0, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8002ab4:	890b      	ldrh	r3, [r1, #8]
 8002ab6:	095b      	lsrs	r3, r3, #5
	temp_delay <<= 2; //convert to 9-bit
 8002ab8:	009b      	lsls	r3, r3, #2
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8002aba:	8443      	strh	r3, [r0, #34]	@ 0x22

	return 1;
}
 8002abc:	2001      	movs	r0, #1
 8002abe:	4770      	bx	lr
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8002ac0:	2b55      	cmp	r3, #85	@ 0x55
 8002ac2:	d802      	bhi.n	8002aca <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	7183      	strb	r3, [r0, #6]
 8002ac8:	e7e8      	b.n	8002a9c <Process_ADC_Conversion_Values+0xc>
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8002aca:	2b7f      	cmp	r3, #127	@ 0x7f
 8002acc:	d8e6      	bhi.n	8002a9c <Process_ADC_Conversion_Values+0xc>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8002ace:	2302      	movs	r3, #2
 8002ad0:	7183      	strb	r3, [r0, #6]
 8002ad2:	e7e3      	b.n	8002a9c <Process_ADC_Conversion_Values+0xc>

08002ad4 <Startup>:

#include "stm32g0xx_ll_lptim.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8002ada:	2007      	movs	r0, #7
 8002adc:	f001 fb32 	bl	8004144 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8002ae0:	4b56      	ldr	r3, [pc, #344]	@ (8002c3c <Startup+0x168>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	4b55      	ldr	r3, [pc, #340]	@ (8002c3c <Startup+0x168>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2101      	movs	r1, #1
 8002aec:	430a      	orrs	r2, r1
 8002aee:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8002af0:	4b53      	ldr	r3, [pc, #332]	@ (8002c40 <Startup+0x16c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	4b52      	ldr	r3, [pc, #328]	@ (8002c40 <Startup+0x16c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2101      	movs	r1, #1
 8002afc:	430a      	orrs	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8002b00:	2380      	movs	r3, #128	@ 0x80
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	23a0      	movs	r3, #160	@ 0xa0
 8002b06:	05db      	lsls	r3, r3, #23
 8002b08:	2201      	movs	r2, #1
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f001 feac 	bl	8004868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	0159      	lsls	r1, r3, #5
 8002b14:	23a0      	movs	r3, #160	@ 0xa0
 8002b16:	05db      	lsls	r3, r3, #23
 8002b18:	2201      	movs	r2, #1
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f001 fea4 	bl	8004868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8002b20:	23a0      	movs	r3, #160	@ 0xa0
 8002b22:	05db      	lsls	r3, r3, #23
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f001 fe9d 	bl	8004868 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8002b2e:	f7fd fc8b 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8002b32:	f7fd fe31 	bl	8000798 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8002b36:	4b43      	ldr	r3, [pc, #268]	@ (8002c44 <Startup+0x170>)
 8002b38:	4a43      	ldr	r2, [pc, #268]	@ (8002c48 <Startup+0x174>)
 8002b3a:	4944      	ldr	r1, [pc, #272]	@ (8002c4c <Startup+0x178>)
 8002b3c:	4c44      	ldr	r4, [pc, #272]	@ (8002c50 <Startup+0x17c>)
 8002b3e:	2004      	movs	r0, #4
 8002b40:	9000      	str	r0, [sp, #0]
 8002b42:	0020      	movs	r0, r4
 8002b44:	f7fd fd88 	bl	8000658 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8002b48:	4b42      	ldr	r3, [pc, #264]	@ (8002c54 <Startup+0x180>)
 8002b4a:	4a43      	ldr	r2, [pc, #268]	@ (8002c58 <Startup+0x184>)
 8002b4c:	493f      	ldr	r1, [pc, #252]	@ (8002c4c <Startup+0x178>)
 8002b4e:	4843      	ldr	r0, [pc, #268]	@ (8002c5c <Startup+0x188>)
 8002b50:	2404      	movs	r4, #4
 8002b52:	9400      	str	r4, [sp, #0]
 8002b54:	f7fd fdf4 	bl	8000740 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8002b58:	4b41      	ldr	r3, [pc, #260]	@ (8002c60 <Startup+0x18c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	4941      	ldr	r1, [pc, #260]	@ (8002c64 <Startup+0x190>)
 8002b60:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <Startup+0x194>)
 8002b62:	0018      	movs	r0, r3
 8002b64:	f001 f900 	bl	8003d68 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	4b37      	ldr	r3, [pc, #220]	@ (8002c48 <Startup+0x174>)
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fcbe 	bl	80034f0 <Get_Status_Bit>
 8002b74:	1e03      	subs	r3, r0, #0
 8002b76:	d0f8      	beq.n	8002b6a <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	801a      	strh	r2, [r3, #0]
 8002b7e:	e02c      	b.n	8002bda <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8002b80:	4b3a      	ldr	r3, [pc, #232]	@ (8002c6c <Startup+0x198>)
 8002b82:	799b      	ldrb	r3, [r3, #6]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d111      	bne.n	8002bae <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8002b8a:	4b38      	ldr	r3, [pc, #224]	@ (8002c6c <Startup+0x198>)
 8002b8c:	7a9b      	ldrb	r3, [r3, #10]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	001a      	movs	r2, r3
 8002b92:	0013      	movs	r3, r2
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	11db      	asrs	r3, r3, #7
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	1dba      	adds	r2, r7, #6
 8002b9e:	8812      	ldrh	r2, [r2, #0]
 8002ba0:	4933      	ldr	r1, [pc, #204]	@ (8002c70 <Startup+0x19c>)
 8002ba2:	1acb      	subs	r3, r1, r3
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	4b33      	ldr	r3, [pc, #204]	@ (8002c74 <Startup+0x1a0>)
 8002ba8:	0052      	lsls	r2, r2, #1
 8002baa:	52d1      	strh	r1, [r2, r3]
 8002bac:	e010      	b.n	8002bd0 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8002bae:	4b2f      	ldr	r3, [pc, #188]	@ (8002c6c <Startup+0x198>)
 8002bb0:	7a9b      	ldrb	r3, [r3, #10]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	121b      	asrs	r3, r3, #8
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	1dba      	adds	r2, r7, #6
 8002bc2:	8812      	ldrh	r2, [r2, #0]
 8002bc4:	492a      	ldr	r1, [pc, #168]	@ (8002c70 <Startup+0x19c>)
 8002bc6:	1acb      	subs	r3, r1, r3
 8002bc8:	b299      	uxth	r1, r3
 8002bca:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <Startup+0x1a0>)
 8002bcc:	0052      	lsls	r2, r2, #1
 8002bce:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8002bd0:	1dbb      	adds	r3, r7, #6
 8002bd2:	881a      	ldrh	r2, [r3, #0]
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	3201      	adds	r2, #1
 8002bd8:	801a      	strh	r2, [r3, #0]
 8002bda:	1dbb      	adds	r3, r7, #6
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d9cc      	bls.n	8002b80 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8002be6:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <Startup+0x198>)
 8002be8:	2102      	movs	r1, #2
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7ff fe68 	bl	80028c0 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002bf0:	4a20      	ldr	r2, [pc, #128]	@ (8002c74 <Startup+0x1a0>)
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c6c <Startup+0x198>)
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff fef0 	bl	80029dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <Startup+0x198>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff fe46 	bl	8002890 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8002c04:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <Startup+0x1a4>)
 8002c06:	220c      	movs	r2, #12
 8002c08:	2104      	movs	r1, #4
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7ff fe00 	bl	8002810 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8002c10:	f7ff fe18 	bl	8002844 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 8002c14:	f7fe f83c 	bl	8000c90 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8002c18:	f7ff fd40 	bl	800269c <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8002c1c:	f000 fc64 	bl	80034e8 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8002c20:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <Startup+0x1a8>)
 8002c22:	22fa      	movs	r2, #250	@ 0xfa
 8002c24:	21fa      	movs	r1, #250	@ 0xfa
 8002c26:	0018      	movs	r0, r3
 8002c28:	f002 f856 	bl	8004cd8 <HAL_LPTIM_SetOnce_Start_IT>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002c2c:	2007      	movs	r0, #7
 8002c2e:	f001 fa7d 	bl	800412c <HAL_NVIC_EnableIRQ>

	return 1;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b003      	add	sp, #12
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	20000848 	.word	0x20000848
 8002c40:	20000904 	.word	0x20000904
 8002c44:	200004d0 	.word	0x200004d0
 8002c48:	20000c30 	.word	0x20000c30
 8002c4c:	20000474 	.word	0x20000474
 8002c50:	0800f820 	.word	0x0800f820
 8002c54:	200004a4 	.word	0x200004a4
 8002c58:	200004b4 	.word	0x200004b4
 8002c5c:	2000047c 	.word	0x2000047c
 8002c60:	08007e7c 	.word	0x08007e7c
 8002c64:	20000cc4 	.word	0x20000cc4
 8002c68:	20000b94 	.word	0x20000b94
 8002c6c:	20000ca0 	.word	0x20000ca0
 8002c70:	000003ff 	.word	0x000003ff
 8002c74:	20000020 	.word	0x20000020
 8002c78:	200006d0 	.word	0x200006d0
 8002c7c:	200004f0 	.word	0x200004f0

08002c80 <Advance_Pending_States>:

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <Advance_Pending_States+0x28>)
 8002c82:	781a      	ldrb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8002c84:	7819      	ldrb	r1, [r3, #0]
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8002c86:	b2d2      	uxtb	r2, r2
	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8002c88:	2905      	cmp	r1, #5
 8002c8a:	d00a      	beq.n	8002ca2 <Advance_Pending_States+0x22>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8002c8c:	7819      	ldrb	r1, [r3, #0]
 8002c8e:	2907      	cmp	r1, #7
 8002c90:	d007      	beq.n	8002ca2 <Advance_Pending_States+0x22>
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8002c92:	2102      	movs	r1, #2
 8002c94:	0010      	movs	r0, r2
 8002c96:	4388      	bics	r0, r1
 8002c98:	2804      	cmp	r0, #4
 8002c9a:	d000      	beq.n	8002c9e <Advance_Pending_States+0x1e>

		speed_fsm.prev_state = current_state;
 8002c9c:	705a      	strb	r2, [r3, #1]
	}

	return 1;
}
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	4770      	bx	lr
		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8002ca2:	3901      	subs	r1, #1
 8002ca4:	7019      	strb	r1, [r3, #0]
 8002ca6:	e7f4      	b.n	8002c92 <Advance_Pending_States+0x12>
 8002ca8:	2000043c 	.word	0x2000043c

08002cac <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cac:	2201      	movs	r2, #1
 8002cae:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_MspInit+0x2c>)
{
 8002cb0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002cb4:	4311      	orrs	r1, r2
 8002cb6:	6419      	str	r1, [r3, #64]	@ 0x40
 8002cb8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002cba:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	9200      	str	r2, [sp, #0]
 8002cc0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cc4:	0549      	lsls	r1, r1, #21
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	400b      	ands	r3, r1
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd2:	b002      	add	sp, #8
 8002cd4:	4770      	bx	lr
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cdc:	b530      	push	{r4, r5, lr}
 8002cde:	0004      	movs	r4, r0
 8002ce0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce2:	2214      	movs	r2, #20
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	a802      	add	r0, sp, #8
 8002ce8:	f005 f86c 	bl	8007dc4 <memset>
  if(hadc->Instance==ADC1)
 8002cec:	4b1f      	ldr	r3, [pc, #124]	@ (8002d6c <HAL_ADC_MspInit+0x90>)
 8002cee:	6822      	ldr	r2, [r4, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002cf4:	b009      	add	sp, #36	@ 0x24
 8002cf6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8002cf8:	2180      	movs	r1, #128	@ 0x80
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_ADC_MspInit+0x94>)
 8002cfc:	0349      	lsls	r1, r1, #13
 8002cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d02:	430a      	orrs	r2, r1
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	9200      	str	r2, [sp, #0]
 8002d0e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d10:	2201      	movs	r2, #1
 8002d12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d14:	4311      	orrs	r1, r2
 8002d16:	6359      	str	r1, [r3, #52]	@ 0x34
 8002d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	9201      	str	r2, [sp, #4]
 8002d20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002d22:	2273      	movs	r2, #115	@ 0x73
 8002d24:	2303      	movs	r3, #3
 8002d26:	9202      	str	r2, [sp, #8]
 8002d28:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	f001 fbe7 	bl	80044fc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002d2e:	4d11      	ldr	r5, [pc, #68]	@ (8002d74 <HAL_ADC_MspInit+0x98>)
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d32:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8002d34:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d36:	2305      	movs	r3, #5
 8002d38:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d3a:	2300      	movs	r3, #0
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d3c:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d3e:	3280      	adds	r2, #128	@ 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d40:	60ab      	str	r3, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d42:	60eb      	str	r3, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d44:	616a      	str	r2, [r5, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d46:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d48:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002d4a:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d4c:	00d2      	lsls	r2, r2, #3
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002d4e:	019b      	lsls	r3, r3, #6
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d50:	0028      	movs	r0, r5
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d52:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002d54:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d56:	f001 fa1f 	bl	8004198 <HAL_DMA_Init>
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d5e:	6525      	str	r5, [r4, #80]	@ 0x50
 8002d60:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8002d62:	e7c7      	b.n	8002cf4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002d64:	f7fe fc06 	bl	8001574 <Error_Handler>
 8002d68:	e7f9      	b.n	8002d5e <HAL_ADC_MspInit+0x82>
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	40012400 	.word	0x40012400
 8002d70:	40021000 	.word	0x40021000
 8002d74:	20000b38 	.word	0x20000b38
 8002d78:	40020008 	.word	0x40020008

08002d7c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	0004      	movs	r4, r0
 8002d80:	b094      	sub	sp, #80	@ 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d82:	2214      	movs	r2, #20
 8002d84:	2100      	movs	r1, #0
 8002d86:	a804      	add	r0, sp, #16
 8002d88:	f005 f81c 	bl	8007dc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d8c:	2228      	movs	r2, #40	@ 0x28
 8002d8e:	2100      	movs	r1, #0
 8002d90:	a80a      	add	r0, sp, #40	@ 0x28
 8002d92:	f005 f817 	bl	8007dc4 <memset>
  if(hlptim->Instance==LPTIM1)
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	4a31      	ldr	r2, [pc, #196]	@ (8002e60 <HAL_LPTIM_MspInit+0xe4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_LPTIM_MspInit+0x2c>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
  else if(hlptim->Instance==LPTIM2)
 8002d9e:	4a31      	ldr	r2, [pc, #196]	@ (8002e64 <HAL_LPTIM_MspInit+0xe8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d02b      	beq.n	8002dfc <HAL_LPTIM_MspInit+0x80>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8002da4:	b014      	add	sp, #80	@ 0x50
 8002da6:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002da8:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002daa:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db0:	f002 fbb8 	bl	8005524 <HAL_RCCEx_PeriphCLKConfig>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d14c      	bne.n	8002e52 <HAL_LPTIM_MspInit+0xd6>
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002db8:	2280      	movs	r2, #128	@ 0x80
 8002dba:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_LPTIM_MspInit+0xec>)
 8002dbc:	0612      	lsls	r2, r2, #24
 8002dbe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc0:	482a      	ldr	r0, [pc, #168]	@ (8002e6c <HAL_LPTIM_MspInit+0xf0>)
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dc8:	0fd2      	lsrs	r2, r2, #31
 8002dca:	07d2      	lsls	r2, r2, #31
 8002dcc:	9200      	str	r2, [sp, #0]
 8002dce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	6359      	str	r1, [r3, #52]	@ 0x34
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dda:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ddc:	401a      	ands	r2, r3
 8002dde:	9201      	str	r2, [sp, #4]
 8002de0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002de2:	2201      	movs	r2, #1
 8002de4:	2302      	movs	r3, #2
 8002de6:	9204      	str	r2, [sp, #16]
 8002de8:	9305      	str	r3, [sp, #20]
 8002dea:	2200      	movs	r2, #0
 8002dec:	2300      	movs	r3, #0
 8002dee:	9206      	str	r2, [sp, #24]
 8002df0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8002df2:	2305      	movs	r3, #5
 8002df4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f001 fb81 	bl	80044fc <HAL_GPIO_Init>
 8002dfa:	e7d3      	b.n	8002da4 <HAL_LPTIM_MspInit+0x28>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8002dfc:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dfe:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e04:	f002 fb8e 	bl	8005524 <HAL_RCCEx_PeriphCLKConfig>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d125      	bne.n	8002e58 <HAL_LPTIM_MspInit+0xdc>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002e0c:	2180      	movs	r1, #128	@ 0x80
 8002e0e:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <HAL_LPTIM_MspInit+0xec>)
 8002e10:	05c9      	lsls	r1, r1, #23
 8002e12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e14:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002e16:	430a      	orrs	r2, r1
 8002e18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002e1e:	400a      	ands	r2, r1
 8002e20:	9202      	str	r2, [sp, #8]
 8002e22:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	2201      	movs	r2, #1
 8002e26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	6359      	str	r1, [r3, #52]	@ 0x34
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2e:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e30:	401a      	ands	r2, r3
 8002e32:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e34:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	0052      	lsls	r2, r2, #1
 8002e3c:	9204      	str	r2, [sp, #16]
 8002e3e:	9305      	str	r3, [sp, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2300      	movs	r3, #0
 8002e44:	9206      	str	r2, [sp, #24]
 8002e46:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8002e48:	2305      	movs	r3, #5
 8002e4a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	f001 fb56 	bl	80044fc <HAL_GPIO_Init>
}
 8002e50:	e7a8      	b.n	8002da4 <HAL_LPTIM_MspInit+0x28>
      Error_Handler();
 8002e52:	f7fe fb8f 	bl	8001574 <Error_Handler>
 8002e56:	e7af      	b.n	8002db8 <HAL_LPTIM_MspInit+0x3c>
      Error_Handler();
 8002e58:	f7fe fb8c 	bl	8001574 <Error_Handler>
 8002e5c:	e7d6      	b.n	8002e0c <HAL_LPTIM_MspInit+0x90>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	40007c00 	.word	0x40007c00
 8002e64:	40009400 	.word	0x40009400
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	50000400 	.word	0x50000400

08002e70 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e70:	b510      	push	{r4, lr}
 8002e72:	0004      	movs	r4, r0
 8002e74:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e76:	2214      	movs	r2, #20
 8002e78:	2100      	movs	r1, #0
 8002e7a:	a808      	add	r0, sp, #32
 8002e7c:	f004 ffa2 	bl	8007dc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e80:	2228      	movs	r2, #40	@ 0x28
 8002e82:	2100      	movs	r1, #0
 8002e84:	a80e      	add	r0, sp, #56	@ 0x38
 8002e86:	f004 ff9d 	bl	8007dc4 <memset>
  if(htim_base->Instance==TIM1)
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc8 <HAL_TIM_Base_MspInit+0x158>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d025      	beq.n	8002ede <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	05d2      	lsls	r2, r2, #23
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d034      	beq.n	8002f04 <HAL_TIM_Base_MspInit+0x94>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
    }
  else if(htim_base->Instance==TIM3)
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8002fcc <HAL_TIM_Base_MspInit+0x15c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d057      	beq.n	8002f50 <HAL_TIM_Base_MspInit+0xe0>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8002ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd0 <HAL_TIM_Base_MspInit+0x160>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d008      	beq.n	8002eb8 <HAL_TIM_Base_MspInit+0x48>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8002ea6:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x164>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d063      	beq.n	8002f74 <HAL_TIM_Base_MspInit+0x104>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8002eac:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd8 <HAL_TIM_Base_MspInit+0x168>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d100      	bne.n	8002eb4 <HAL_TIM_Base_MspInit+0x44>
 8002eb2:	e072      	b.n	8002f9a <HAL_TIM_Base_MspInit+0x12a>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8002eb4:	b018      	add	sp, #96	@ 0x60
 8002eb6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002eb8:	2180      	movs	r1, #128	@ 0x80
 8002eba:	4b48      	ldr	r3, [pc, #288]	@ (8002fdc <HAL_TIM_Base_MspInit+0x16c>)
 8002ebc:	0289      	lsls	r1, r1, #10
 8002ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002ec0:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002ec8:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002eca:	400b      	ands	r3, r1
 8002ecc:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002ece:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ed0:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002ed2:	f001 f901 	bl	80040d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002ed6:	2015      	movs	r0, #21
 8002ed8:	f001 f928 	bl	800412c <HAL_NVIC_EnableIRQ>
 8002edc:	e7ea      	b.n	8002eb4 <HAL_TIM_Base_MspInit+0x44>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002ede:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee0:	a80e      	add	r0, sp, #56	@ 0x38
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002ee2:	039b      	lsls	r3, r3, #14
 8002ee4:	930e      	str	r3, [sp, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee6:	f002 fb1d 	bl	8005524 <HAL_RCCEx_PeriphCLKConfig>
 8002eea:	2800      	cmp	r0, #0
 8002eec:	d168      	bne.n	8002fc0 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eee:	2180      	movs	r1, #128	@ 0x80
 8002ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fdc <HAL_TIM_Base_MspInit+0x16c>)
 8002ef2:	0109      	lsls	r1, r1, #4
 8002ef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	400b      	ands	r3, r1
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	9b01      	ldr	r3, [sp, #4]
 8002f02:	e7d7      	b.n	8002eb4 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f04:	2201      	movs	r2, #1
 8002f06:	4b35      	ldr	r3, [pc, #212]	@ (8002fdc <HAL_TIM_Base_MspInit+0x16c>)
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8002f08:	2080      	movs	r0, #128	@ 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f0a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8002f0c:	0200      	lsls	r0, r0, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8002f12:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002f14:	4011      	ands	r1, r2
 8002f16:	9102      	str	r1, [sp, #8]
 8002f18:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8002f20:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8002f24:	9008      	str	r0, [sp, #32]
 8002f26:	9109      	str	r1, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	4013      	ands	r3, r2
 8002f2a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8002f2c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002f30:	2302      	movs	r3, #2
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8002f32:	a908      	add	r1, sp, #32
 8002f34:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8002f36:	920a      	str	r2, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002f38:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8002f3a:	f001 fadf 	bl	80044fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8002f3e:	2202      	movs	r2, #2
 8002f40:	2102      	movs	r1, #2
 8002f42:	200f      	movs	r0, #15
 8002f44:	f001 f8c8 	bl	80040d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f48:	200f      	movs	r0, #15
 8002f4a:	f001 f8ef 	bl	800412c <HAL_NVIC_EnableIRQ>
 8002f4e:	e7b1      	b.n	8002eb4 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f50:	2302      	movs	r3, #2
 8002f52:	4a22      	ldr	r2, [pc, #136]	@ (8002fdc <HAL_TIM_Base_MspInit+0x16c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f54:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f56:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002f58:	4319      	orrs	r1, r3
 8002f5a:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8002f5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f5e:	2100      	movs	r1, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f60:	4013      	ands	r3, r2
 8002f62:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f66:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f68:	f001 f8b6 	bl	80040d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f6c:	2010      	movs	r0, #16
 8002f6e:	f001 f8dd 	bl	800412c <HAL_NVIC_EnableIRQ>
 8002f72:	e79f      	b.n	8002eb4 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002f74:	2180      	movs	r1, #128	@ 0x80
 8002f76:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <HAL_TIM_Base_MspInit+0x16c>)
 8002f78:	02c9      	lsls	r1, r1, #11
 8002f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8002f7c:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8002f84:	2203      	movs	r2, #3
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002f86:	400b      	ands	r3, r1
 8002f88:	9306      	str	r3, [sp, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8002f8a:	2103      	movs	r1, #3
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002f8c:	9b06      	ldr	r3, [sp, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8002f8e:	f001 f8a3 	bl	80040d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002f92:	2016      	movs	r0, #22
 8002f94:	f001 f8ca 	bl	800412c <HAL_NVIC_EnableIRQ>
 8002f98:	e78c      	b.n	8002eb4 <HAL_TIM_Base_MspInit+0x44>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8002f9a:	2180      	movs	r1, #128	@ 0x80
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <HAL_TIM_Base_MspInit+0x16c>)
 8002f9e:	0209      	lsls	r1, r1, #8
 8002fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8002fa2:	2013      	movs	r0, #19
      __HAL_RCC_TIM14_CLK_ENABLE();
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8002faa:	2203      	movs	r2, #3
      __HAL_RCC_TIM14_CLK_ENABLE();
 8002fac:	400b      	ands	r3, r1
 8002fae:	9307      	str	r3, [sp, #28]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8002fb0:	2103      	movs	r1, #3
      __HAL_RCC_TIM14_CLK_ENABLE();
 8002fb2:	9b07      	ldr	r3, [sp, #28]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8002fb4:	f001 f890 	bl	80040d8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002fb8:	2013      	movs	r0, #19
 8002fba:	f001 f8b7 	bl	800412c <HAL_NVIC_EnableIRQ>
}
 8002fbe:	e779      	b.n	8002eb4 <HAL_TIM_Base_MspInit+0x44>
      Error_Handler();
 8002fc0:	f7fe fad8 	bl	8001574 <Error_Handler>
 8002fc4:	e793      	b.n	8002eee <HAL_TIM_Base_MspInit+0x7e>
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800
 8002fd8:	40002000 	.word	0x40002000
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fe0:	b530      	push	{r4, r5, lr}
 8002fe2:	0004      	movs	r4, r0
 8002fe4:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe6:	2214      	movs	r2, #20
 8002fe8:	2100      	movs	r1, #0
 8002fea:	a802      	add	r0, sp, #8
 8002fec:	f004 feea 	bl	8007dc4 <memset>
  if(htim->Instance==TIM1)
 8002ff0:	4b16      	ldr	r3, [pc, #88]	@ (800304c <HAL_TIM_MspPostInit+0x6c>)
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ff8:	b009      	add	sp, #36	@ 0x24
 8002ffa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffc:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffe:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003000:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <HAL_TIM_MspPostInit+0x70>)
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8003002:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8003006:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003008:	432a      	orrs	r2, r5
 800300a:	635a      	str	r2, [r3, #52]	@ 0x34
 800300c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 800300e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	402a      	ands	r2, r5
 8003012:	9200      	str	r2, [sp, #0]
 8003014:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003018:	4322      	orrs	r2, r4
 800301a:	635a      	str	r2, [r3, #52]	@ 0x34
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 800301e:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003020:	4023      	ands	r3, r4
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8003026:	2302      	movs	r3, #2
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	9202      	str	r2, [sp, #8]
 800302c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800302e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8003030:	f001 fa64 	bl	80044fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8003034:	2308      	movs	r3, #8
 8003036:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 800303a:	4806      	ldr	r0, [pc, #24]	@ (8003054 <HAL_TIM_MspPostInit+0x74>)
 800303c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003044:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8003046:	f001 fa59 	bl	80044fc <HAL_GPIO_Init>
}
 800304a:	e7d5      	b.n	8002ff8 <HAL_TIM_MspPostInit+0x18>
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40021000 	.word	0x40021000
 8003054:	50000400 	.word	0x50000400

08003058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003058:	b530      	push	{r4, r5, lr}
 800305a:	0004      	movs	r4, r0
 800305c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305e:	2214      	movs	r2, #20
 8003060:	2100      	movs	r1, #0
 8003062:	a802      	add	r0, sp, #8
 8003064:	f004 feae 	bl	8007dc4 <memset>
  if(huart->Instance==USART2)
 8003068:	4b30      	ldr	r3, [pc, #192]	@ (800312c <HAL_UART_MspInit+0xd4>)
 800306a:	6822      	ldr	r2, [r4, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003070:	b009      	add	sp, #36	@ 0x24
 8003072:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003074:	2180      	movs	r1, #128	@ 0x80
 8003076:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_UART_MspInit+0xd8>)
 8003078:	0289      	lsls	r1, r1, #10
 800307a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800307c:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800307e:	430a      	orrs	r2, r1
 8003080:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003084:	400a      	ands	r2, r1
 8003086:	9200      	str	r2, [sp, #0]
 8003088:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	2201      	movs	r2, #1
 800308c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800308e:	4311      	orrs	r1, r2
 8003090:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8003092:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8003096:	9002      	str	r0, [sp, #8]
 8003098:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309a:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309c:	4013      	ands	r3, r2
 800309e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a0:	05c0      	lsls	r0, r0, #23
 80030a2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80030a8:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030aa:	f001 fa27 	bl	80044fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80030ae:	4d21      	ldr	r5, [pc, #132]	@ (8003134 <HAL_UART_MspInit+0xdc>)
 80030b0:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <HAL_UART_MspInit+0xe0>)
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030b2:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80030b4:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80030b6:	2334      	movs	r3, #52	@ 0x34
 80030b8:	606b      	str	r3, [r5, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60ab      	str	r3, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030be:	60eb      	str	r3, [r5, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c0:	616b      	str	r3, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030c2:	61ab      	str	r3, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80030c4:	61eb      	str	r3, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030c6:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030c8:	0028      	movs	r0, r5
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030ca:	015b      	lsls	r3, r3, #5
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030cc:	612a      	str	r2, [r5, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030ce:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030d0:	f001 f862 	bl	8004198 <HAL_DMA_Init>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d122      	bne.n	800311e <HAL_UART_MspInit+0xc6>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030d8:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <HAL_UART_MspInit+0xe4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030dc:	50a5      	str	r5, [r4, r2]
 80030de:	62ac      	str	r4, [r5, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80030e0:	4d17      	ldr	r5, [pc, #92]	@ (8003140 <HAL_UART_MspInit+0xe8>)
 80030e2:	602b      	str	r3, [r5, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80030e4:	2335      	movs	r3, #53	@ 0x35
 80030e6:	606b      	str	r3, [r5, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030e8:	3b25      	subs	r3, #37	@ 0x25
 80030ea:	60ab      	str	r3, [r5, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60eb      	str	r3, [r5, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f0:	616b      	str	r3, [r5, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030f2:	61ab      	str	r3, [r5, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80030f4:	61eb      	str	r3, [r5, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030f6:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80030f8:	0028      	movs	r0, r5
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030fa:	015b      	lsls	r3, r3, #5
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030fc:	612a      	str	r2, [r5, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030fe:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003100:	f001 f84a 	bl	8004198 <HAL_DMA_Init>
 8003104:	2800      	cmp	r0, #0
 8003106:	d10d      	bne.n	8003124 <HAL_UART_MspInit+0xcc>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8003108:	2201      	movs	r2, #1
 800310a:	2101      	movs	r1, #1
 800310c:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800310e:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8003110:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8003112:	f000 ffe1 	bl	80040d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003116:	201c      	movs	r0, #28
 8003118:	f001 f808 	bl	800412c <HAL_NVIC_EnableIRQ>
}
 800311c:	e7a8      	b.n	8003070 <HAL_UART_MspInit+0x18>
      Error_Handler();
 800311e:	f7fe fa29 	bl	8001574 <Error_Handler>
 8003122:	e7d9      	b.n	80030d8 <HAL_UART_MspInit+0x80>
      Error_Handler();
 8003124:	f7fe fa26 	bl	8001574 <Error_Handler>
 8003128:	e7ee      	b.n	8003108 <HAL_UART_MspInit+0xb0>
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	40004400 	.word	0x40004400
 8003130:	40021000 	.word	0x40021000
 8003134:	200005a8 	.word	0x200005a8
 8003138:	4002001c 	.word	0x4002001c
 800313c:	40020030 	.word	0x40020030
 8003140:	2000054c 	.word	0x2000054c

08003144 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003144:	e7fe      	b.n	8003144 <NMI_Handler>
 8003146:	46c0      	nop			@ (mov r8, r8)

08003148 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003148:	e7fe      	b.n	8003148 <HardFault_Handler>
 800314a:	46c0      	nop			@ (mov r8, r8)

0800314c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800314c:	4770      	bx	lr
 800314e:	46c0      	nop			@ (mov r8, r8)

08003150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003150:	4770      	bx	lr
 8003152:	46c0      	nop			@ (mov r8, r8)

08003154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003154:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003156:	f000 fa3d 	bl	80035d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800315a:	bd10      	pop	{r4, pc}

0800315c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800315c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 800315e:	2080      	movs	r0, #128	@ 0x80
 8003160:	f001 fb88 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003164:	bd10      	pop	{r4, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)

08003168 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003168:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800316a:	4802      	ldr	r0, [pc, #8]	@ (8003174 <DMA1_Channel1_IRQHandler+0xc>)
 800316c:	f001 f96a 	bl	8004444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003170:	bd10      	pop	{r4, pc}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	20000b38 	.word	0x20000b38

08003178 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003178:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800317a:	4803      	ldr	r0, [pc, #12]	@ (8003188 <DMA1_Channel2_3_IRQHandler+0x10>)
 800317c:	f001 f962 	bl	8004444 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003180:	4802      	ldr	r0, [pc, #8]	@ (800318c <DMA1_Channel2_3_IRQHandler+0x14>)
 8003182:	f001 f95f 	bl	8004444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003186:	bd10      	pop	{r4, pc}
 8003188:	200005a8 	.word	0x200005a8
 800318c:	2000054c 	.word	0x2000054c

08003190 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003190:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003192:	4802      	ldr	r0, [pc, #8]	@ (800319c <TIM2_IRQHandler+0xc>)
 8003194:	f003 f878 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003198:	bd10      	pop	{r4, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	20000848 	.word	0x20000848

080031a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031a2:	4802      	ldr	r0, [pc, #8]	@ (80031ac <TIM3_IRQHandler+0xc>)
 80031a4:	f003 f870 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031a8:	bd10      	pop	{r4, pc}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	2000078c 	.word	0x2000078c

080031b0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80031b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80031b2:	4802      	ldr	r0, [pc, #8]	@ (80031bc <TIM16_IRQHandler+0xc>)
 80031b4:	f003 f868 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	20000904 	.word	0x20000904

080031c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80031c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031c2:	4802      	ldr	r0, [pc, #8]	@ (80031cc <USART2_IRQHandler+0xc>)
 80031c4:	f004 f8bc 	bl	8007340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031c8:	bd10      	pop	{r4, pc}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	20000604 	.word	0x20000604

080031d0 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 80031d0:	b510      	push	{r4, lr}
  HAL_LPTIM_IRQHandler(&hlptim1);
 80031d2:	4802      	ldr	r0, [pc, #8]	@ (80031dc <LPTIM1_IRQHandler+0xc>)
 80031d4:	f001 fbfa 	bl	80049cc <HAL_LPTIM_IRQHandler>
}
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	200004f0 	.word	0x200004f0

080031e0 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 80031e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80031e2:	4802      	ldr	r0, [pc, #8]	@ (80031ec <TIM17_IRQHandler+0xc>)
 80031e4:	f003 f850 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	200009c0 	.word	0x200009c0

080031f0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80031f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80031f2:	4802      	ldr	r0, [pc, #8]	@ (80031fc <TIM14_IRQHandler+0xc>)
 80031f4:	f003 f848 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	20000a7c 	.word	0x20000a7c

08003200 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
    }
    return 1;
}

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46d6      	mov	lr, sl
 8003204:	464f      	mov	r7, r9
 8003206:	4646      	mov	r6, r8
 8003208:	b5c0      	push	{r6, r7, lr}

			uint8_t pot_rotation_corrected = 0;
			enum Symmetry_Status symmetry_status = CW;

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 800320a:	8982      	ldrh	r2, [r0, #12]
			else{ //adc is 128-255
				symmetry_status = CCW;
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 800320c:	7983      	ldrb	r3, [r0, #6]
uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 800320e:	0004      	movs	r4, r0
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8003210:	b292      	uxth	r2, r2
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8003212:	2b01      	cmp	r3, #1
 8003214:	d050      	beq.n	80032b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb8>
 8003216:	7983      	ldrb	r3, [r0, #6]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d04d      	beq.n	80032b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb8>

						symmetry_type_for_halfcycle = LENGTHEN;
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 800321c:	7983      	ldrb	r3, [r0, #6]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d100      	bne.n	8003224 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x24>
 8003222:	e0d3      	b.n	80033cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1cc>
						symmetry_type_for_halfcycle = LENGTHEN;
					}
				}
			}

			if(symmetry_status == CW){
 8003224:	2700      	movs	r7, #0
 8003226:	2a7f      	cmp	r2, #127	@ 0x7f
 8003228:	d850      	bhi.n	80032cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xcc>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 800322a:	227f      	movs	r2, #127	@ 0x7f
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	b2d2      	uxtb	r2, r2

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8003232:	8a65      	ldrh	r5, [r4, #18]
 8003234:	b2ab      	uxth	r3, r5
 8003236:	4698      	mov	r8, r3
 8003238:	2380      	movs	r3, #128	@ 0x80
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	1b5d      	subs	r5, r3, r5
 800323e:	b2ad      	uxth	r5, r5

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8003240:	436a      	muls	r2, r5
 8003242:	0056      	lsls	r6, r2, #1
 8003244:	18b6      	adds	r6, r6, r2
 8003246:	1076      	asrs	r6, r6, #1

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8003248:	b2b2      	uxth	r2, r6
 800324a:	0a12      	lsrs	r2, r2, #8
 800324c:	4691      	mov	r9, r2


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 800324e:	1aaa      	subs	r2, r5, r2

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8003250:	444d      	add	r5, r9
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8003252:	b292      	uxth	r2, r2


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8003254:	0436      	lsls	r6, r6, #16
			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8003256:	b2ad      	uxth	r5, r5
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8003258:	4692      	mov	sl, r2
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800325a:	0c36      	lsrs	r6, r6, #16
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 800325c:	2dff      	cmp	r5, #255	@ 0xff
 800325e:	d800      	bhi.n	8003262 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62>
 8003260:	e082      	b.n	8003368 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x168>
 8003262:	429d      	cmp	r5, r3
 8003264:	d100      	bne.n	8003268 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x68>
 8003266:	e0ce      	b.n	8003406 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x206>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8003268:	2108      	movs	r1, #8
 800326a:	0030      	movs	r0, r6
 800326c:	f000 f936 	bl	80034dc <unsigned_bitwise_modulo>
 8003270:	2880      	cmp	r0, #128	@ 0x80
 8003272:	d044      	beq.n	80032fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xfe>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8003274:	2108      	movs	r1, #8
 8003276:	0030      	movs	r0, r6
 8003278:	f000 f930 	bl	80034dc <unsigned_bitwise_modulo>
 800327c:	2800      	cmp	r0, #0
 800327e:	d044      	beq.n	800330a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10a>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8003280:	2108      	movs	r1, #8
 8003282:	0030      	movs	r0, r6
 8003284:	f000 f92a 	bl	80034dc <unsigned_bitwise_modulo>
 8003288:	287f      	cmp	r0, #127	@ 0x7f
 800328a:	d93e      	bls.n	800330a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10a>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 800328c:	2108      	movs	r1, #8
 800328e:	0030      	movs	r0, r6
 8003290:	f000 f924 	bl	80034dc <unsigned_bitwise_modulo>
 8003294:	2880      	cmp	r0, #128	@ 0x80
 8003296:	d832      	bhi.n	80032fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xfe>
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8003298:	2f00      	cmp	r7, #0
 800329a:	d041      	beq.n	8003320 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x120>
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 800329c:	2380      	movs	r3, #128	@ 0x80
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	1b5b      	subs	r3, r3, r5
 80032a2:	b29b      	uxth	r3, r3

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 80032a4:	82a3      	strh	r3, [r4, #20]
    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 80032a6:	2320      	movs	r3, #32
 80032a8:	5ce2      	ldrb	r2, [r4, r3]
 80032aa:	2a01      	cmp	r2, #1
 80032ac:	d142      	bne.n	8003334 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 80032ae:	8b63      	ldrh	r3, [r4, #26]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	83a3      	strh	r3, [r4, #28]
 80032b6:	e043      	b.n	8003340 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x140>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80032b8:	7c23      	ldrb	r3, [r4, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd4>
 80032be:	7c63      	ldrb	r3, [r4, #17]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd4>
					if(symmetry_status == CW){
 80032c4:	2700      	movs	r7, #0
 80032c6:	2a7f      	cmp	r2, #127	@ 0x7f
 80032c8:	d800      	bhi.n	80032cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xcc>
 80032ca:	e087      	b.n	80033dc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1dc>
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 80032cc:	89a2      	ldrh	r2, [r4, #12]
 80032ce:	3a80      	subs	r2, #128	@ 0x80
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	e7ae      	b.n	8003232 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x32>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80032d4:	7c23      	ldrb	r3, [r4, #16]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d100      	bne.n	80032dc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xdc>
 80032da:	e072      	b.n	80033c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1c2>
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 80032dc:	7c23      	ldrb	r3, [r4, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe8>
 80032e2:	7c63      	ldrb	r3, [r4, #17]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d005      	beq.n	80032f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xf4>
 80032e8:	7c23      	ldrb	r3, [r4, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d19a      	bne.n	8003224 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x24>
 80032ee:	7c63      	ldrb	r3, [r4, #17]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d197      	bne.n	8003224 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x24>
						symmetry_type_for_halfcycle = LENGTHEN;
 80032f4:	2701      	movs	r7, #1
					if(symmetry_status == CW){
 80032f6:	2a7f      	cmp	r2, #127	@ 0x7f
 80032f8:	d8e8      	bhi.n	80032cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xcc>
 80032fa:	2700      	movs	r7, #0
 80032fc:	e795      	b.n	800322a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2a>
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80032fe:	4653      	mov	r3, sl
 8003300:	3b01      	subs	r3, #1
 8003302:	b29b      	uxth	r3, r3
 8003304:	469a      	mov	sl, r3
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8003306:	3501      	adds	r5, #1
 8003308:	b2ad      	uxth	r5, r5
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800330a:	0028      	movs	r0, r5
 800330c:	2101      	movs	r1, #1
 800330e:	f000 f8e5 	bl	80034dc <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8003312:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = DO_NOTHING;
 8003314:	2320      	movs	r3, #32
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8003316:	2800      	cmp	r0, #0
 8003318:	d142      	bne.n	80033a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1a0>
						if(symmetry_type_for_halfcycle == SHORTEN){
 800331a:	2f00      	cmp	r7, #0
 800331c:	d160      	bne.n	80033e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1e0>
							params_ptr->prescaler_adjust = DO_NOTHING;
 800331e:	54e7      	strb	r7, [r4, r3]
	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	4652      	mov	r2, sl
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	b29b      	uxth	r3, r3
 800332a:	82a3      	strh	r3, [r4, #20]
    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 800332c:	2320      	movs	r3, #32
 800332e:	5ce2      	ldrb	r2, [r4, r3]
 8003330:	2a01      	cmp	r2, #1
 8003332:	d0bc      	beq.n	80032ae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xae>
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8003334:	5ce3      	ldrb	r3, [r4, r3]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x140>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 800333a:	8b63      	ldrh	r3, [r4, #26]
 800333c:	b29b      	uxth	r3, r3
 800333e:	83a3      	strh	r3, [r4, #28]
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	8aa2      	ldrh	r2, [r4, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	82e3      	strh	r3, [r4, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 800334c:	8ae3      	ldrh	r3, [r4, #22]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;

    return 1;
}
 800334e:	2001      	movs	r0, #1
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8003350:	3b01      	subs	r3, #1
 8003352:	b29b      	uxth	r3, r3
 8003354:	8323      	strh	r3, [r4, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8003356:	8ba3      	ldrh	r3, [r4, #28]
 8003358:	3b01      	subs	r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	83e3      	strh	r3, [r4, #30]
}
 800335e:	bce0      	pop	{r5, r6, r7}
 8003360:	46ba      	mov	sl, r7
 8003362:	46b1      	mov	r9, r6
 8003364:	46a8      	mov	r8, r5
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8003368:	2108      	movs	r1, #8
 800336a:	0030      	movs	r0, r6
 800336c:	f000 f8b6 	bl	80034dc <unsigned_bitwise_modulo>
 8003370:	2880      	cmp	r0, #128	@ 0x80
 8003372:	d13c      	bne.n	80033ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ee>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8003374:	2320      	movs	r3, #32
 8003376:	2200      	movs	r2, #0
 8003378:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 800337a:	2f00      	cmp	r7, #0
 800337c:	d114      	bne.n	80033a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1a8>
	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800337e:	89e0      	ldrh	r0, [r4, #14]
 8003380:	2101      	movs	r1, #1
 8003382:	b280      	uxth	r0, r0
 8003384:	f000 f8aa 	bl	80034dc <unsigned_bitwise_modulo>
 8003388:	4643      	mov	r3, r8
 800338a:	3b01      	subs	r3, #1
 800338c:	3bff      	subs	r3, #255	@ 0xff
 800338e:	444b      	add	r3, r9
 8003390:	b29b      	uxth	r3, r3
 8003392:	2800      	cmp	r0, #0
 8003394:	d14a      	bne.n	800342c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22c>
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8003396:	3301      	adds	r3, #1
 8003398:	33ff      	adds	r3, #255	@ 0xff
 800339a:	b29b      	uxth	r3, r3
 800339c:	82a3      	strh	r3, [r4, #20]
 800339e:	e7c5      	b.n	800332c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12c>
						if(symmetry_type_for_halfcycle == SHORTEN){
 80033a0:	2f00      	cmp	r7, #0
 80033a2:	d0bc      	beq.n	800331e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11e>
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80033a4:	2201      	movs	r2, #1
 80033a6:	54e2      	strb	r2, [r4, r3]
	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80033a8:	89e0      	ldrh	r0, [r4, #14]
 80033aa:	2101      	movs	r1, #1
 80033ac:	b280      	uxth	r0, r0
 80033ae:	f000 f895 	bl	80034dc <unsigned_bitwise_modulo>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d14c      	bne.n	8003450 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x250>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	1b5b      	subs	r3, r3, r5
 80033bc:	b29b      	uxth	r3, r3
 80033be:	82a3      	strh	r3, [r4, #20]
 80033c0:	e7b4      	b.n	800332c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12c>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80033c2:	7c63      	ldrb	r3, [r4, #17]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d000      	beq.n	80033ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ca>
 80033c8:	e788      	b.n	80032dc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xdc>
 80033ca:	e77b      	b.n	80032c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 80033cc:	7c03      	ldrb	r3, [r0, #16]
 80033ce:	b2df      	uxtb	r7, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d000      	beq.n	80033d6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d6>
 80033d4:	e78e      	b.n	80032f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xf4>
					if(symmetry_status == CW){
 80033d6:	2a7f      	cmp	r2, #127	@ 0x7f
 80033d8:	d900      	bls.n	80033dc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1dc>
 80033da:	e777      	b.n	80032cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xcc>
						symmetry_type_for_halfcycle = LENGTHEN;
 80033dc:	2701      	movs	r7, #1
 80033de:	e724      	b.n	800322a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2a>
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80033e0:	2201      	movs	r2, #1
 80033e2:	54e2      	strb	r2, [r4, r3]
	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80033e4:	33e0      	adds	r3, #224	@ 0xe0
 80033e6:	1b5b      	subs	r3, r3, r5
 80033e8:	b29b      	uxth	r3, r3
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 80033ea:	82a3      	strh	r3, [r4, #20]
 80033ec:	e75b      	b.n	80032a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa6>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80033ee:	2108      	movs	r1, #8
 80033f0:	0030      	movs	r0, r6
 80033f2:	f000 f873 	bl	80034dc <unsigned_bitwise_modulo>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d11d      	bne.n	8003436 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x236>
					params_ptr->prescaler_adjust = DO_NOTHING;
 80033fa:	2320      	movs	r3, #32
 80033fc:	54e0      	strb	r0, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 80033fe:	2f00      	cmp	r7, #0
 8003400:	d000      	beq.n	8003404 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x204>
 8003402:	e74b      	b.n	800329c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8003404:	e78c      	b.n	8003320 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x120>
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8003406:	2108      	movs	r1, #8
 8003408:	0030      	movs	r0, r6
 800340a:	f000 f867 	bl	80034dc <unsigned_bitwise_modulo>
 800340e:	2800      	cmp	r0, #0
 8003410:	d0aa      	beq.n	8003368 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x168>
			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8003412:	2108      	movs	r1, #8
 8003414:	0030      	movs	r0, r6
 8003416:	f000 f861 	bl	80034dc <unsigned_bitwise_modulo>
 800341a:	2800      	cmp	r0, #0
 800341c:	d000      	beq.n	8003420 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x220>
 800341e:	e723      	b.n	8003268 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x68>
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8003420:	2300      	movs	r3, #0
 8003422:	2f00      	cmp	r7, #0
 8003424:	d100      	bne.n	8003428 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x228>
 8003426:	e77b      	b.n	8003320 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x120>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8003428:	82a3      	strh	r3, [r4, #20]
 800342a:	e73c      	b.n	80032a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa6>
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 800342c:	3302      	adds	r3, #2
 800342e:	33ff      	adds	r3, #255	@ 0xff
 8003430:	b29b      	uxth	r3, r3
 8003432:	82a3      	strh	r3, [r4, #20]
 8003434:	e77a      	b.n	800332c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12c>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8003436:	2108      	movs	r1, #8
 8003438:	0030      	movs	r0, r6
 800343a:	f000 f84f 	bl	80034dc <unsigned_bitwise_modulo>
 800343e:	287f      	cmp	r0, #127	@ 0x7f
 8003440:	d80b      	bhi.n	800345a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x25a>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8003442:	2320      	movs	r3, #32
 8003444:	2200      	movs	r2, #0
 8003446:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8003448:	2f00      	cmp	r7, #0
 800344a:	d100      	bne.n	800344e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x24e>
 800344c:	e768      	b.n	8003320 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x120>
 800344e:	e7c9      	b.n	80033e4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1e4>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8003450:	23ff      	movs	r3, #255	@ 0xff
 8003452:	1b5b      	subs	r3, r3, r5
 8003454:	b29b      	uxth	r3, r3
 8003456:	82a3      	strh	r3, [r4, #20]
 8003458:	e725      	b.n	80032a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa6>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 800345a:	2108      	movs	r1, #8
 800345c:	0030      	movs	r0, r6
 800345e:	f000 f83d 	bl	80034dc <unsigned_bitwise_modulo>
 8003462:	2880      	cmp	r0, #128	@ 0x80
 8003464:	d800      	bhi.n	8003468 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
 8003466:	e717      	b.n	8003298 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x98>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8003468:	2320      	movs	r3, #32
 800346a:	2200      	movs	r2, #0
 800346c:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 800346e:	2f00      	cmp	r7, #0
 8003470:	d1ee      	bne.n	8003450 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x250>
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8003472:	4653      	mov	r3, sl
 8003474:	3b01      	subs	r3, #1
 8003476:	b29b      	uxth	r3, r3
 8003478:	469a      	mov	sl, r3
 800347a:	e751      	b.n	8003320 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x120>

0800347c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800347c:	4770      	bx	lr
 800347e:	46c0      	nop			@ (mov r8, r8)

08003480 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8003480:	b510      	push	{r4, lr}

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8003482:	f002 fb6b 	bl	8005b5c <HAL_TIM_OC_Start_IT>
 8003486:	1e04      	subs	r4, r0, #0
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8003488:	d101      	bne.n	800348e <Start_OC_TIM+0xe>

		Error_Handler();
	}

	return ok;
}
 800348a:	0020      	movs	r0, r4
 800348c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800348e:	f7fe f871 	bl	8001574 <Error_Handler>
 8003492:	e7fa      	b.n	800348a <Start_OC_TIM+0xa>

08003494 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8003494:	b510      	push	{r4, lr}

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8003496:	f002 fbe1 	bl	8005c5c <HAL_TIM_OC_Stop_IT>
 800349a:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 800349c:	d101      	bne.n	80034a2 <Stop_OC_TIM+0xe>

		Error_Handler();
	}

	return ok;
}
 800349e:	0020      	movs	r0, r4
 80034a0:	bd10      	pop	{r4, pc}
		Error_Handler();
 80034a2:	f7fe f867 	bl	8001574 <Error_Handler>
 80034a6:	e7fa      	b.n	800349e <Stop_OC_TIM+0xa>

080034a8 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	0005      	movs	r5, r0
    for (uint16_t d = 2; d * d <= x; d++) {
 80034ac:	2803      	cmp	r0, #3
 80034ae:	d910      	bls.n	80034d2 <isPrime+0x2a>
        if (x % d == 0)
 80034b0:	07c3      	lsls	r3, r0, #31
 80034b2:	d510      	bpl.n	80034d6 <isPrime+0x2e>
    for (uint16_t d = 2; d * d <= x; d++) {
 80034b4:	2402      	movs	r4, #2
 80034b6:	e006      	b.n	80034c6 <isPrime+0x1e>
        if (x % d == 0)
 80034b8:	0021      	movs	r1, r4
 80034ba:	0028      	movs	r0, r5
 80034bc:	f7fc fea8 	bl	8000210 <__aeabi_uidivmod>
 80034c0:	b289      	uxth	r1, r1
 80034c2:	2900      	cmp	r1, #0
 80034c4:	d007      	beq.n	80034d6 <isPrime+0x2e>
    for (uint16_t d = 2; d * d <= x; d++) {
 80034c6:	3401      	adds	r4, #1
 80034c8:	b2a4      	uxth	r4, r4
 80034ca:	0023      	movs	r3, r4
 80034cc:	4363      	muls	r3, r4
 80034ce:	42ab      	cmp	r3, r5
 80034d0:	ddf2      	ble.n	80034b8 <isPrime+0x10>
            return NO;
    }
    return YES;
 80034d2:	2001      	movs	r0, #1
}
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
            return NO;
 80034d6:	2000      	movs	r0, #0
 80034d8:	e7fc      	b.n	80034d4 <isPrime+0x2c>
 80034da:	46c0      	nop			@ (mov r8, r8)

080034dc <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){

    return dividend & ((1 << base_2_exponent) - 1);
 80034dc:	2301      	movs	r3, #1
 80034de:	408b      	lsls	r3, r1
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4018      	ands	r0, r3
}
 80034e4:	4770      	bx	lr
 80034e6:	46c0      	nop			@ (mov r8, r8)

080034e8 <Global_Interrupt_Enable>:
  __ASM volatile ("cpsie i" : : : "memory");
 80034e8:	b662      	cpsie	i

uint8_t Global_Interrupt_Enable(void){

	__enable_irq();
	return 1;
}
 80034ea:	2001      	movs	r0, #1
 80034ec:	4770      	bx	lr
 80034ee:	46c0      	nop			@ (mov r8, r8)

080034f0 <Get_Status_Bit>:
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){

    if(*bits & bit){
 80034f0:	6800      	ldr	r0, [r0, #0]
 80034f2:	4008      	ands	r0, r1
 80034f4:	1e43      	subs	r3, r0, #1
 80034f6:	4198      	sbcs	r0, r3

    else{

        return (enum Validate) NO;
    }
}
 80034f8:	b2c0      	uxtb	r0, r0
 80034fa:	4770      	bx	lr

080034fc <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){

	*bits |= bit;
 80034fc:	6803      	ldr	r3, [r0, #0]
 80034fe:	4319      	orrs	r1, r3
 8003500:	6001      	str	r1, [r0, #0]
}
 8003502:	4770      	bx	lr

08003504 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){

	*bits &= ~bit;
 8003504:	6803      	ldr	r3, [r0, #0]
 8003506:	438b      	bics	r3, r1
 8003508:	6003      	str	r3, [r0, #0]
}
 800350a:	4770      	bx	lr

0800350c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800350c:	480d      	ldr	r0, [pc, #52]	@ (8003544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800350e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003510:	f7ff ffb4 	bl	800347c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003514:	480c      	ldr	r0, [pc, #48]	@ (8003548 <LoopForever+0x6>)
  ldr r1, =_edata
 8003516:	490d      	ldr	r1, [pc, #52]	@ (800354c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003518:	4a0d      	ldr	r2, [pc, #52]	@ (8003550 <LoopForever+0xe>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800351c:	e002      	b.n	8003524 <LoopCopyDataInit>

0800351e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800351e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003522:	3304      	adds	r3, #4

08003524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003528:	d3f9      	bcc.n	800351e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352a:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800352c:	4c0a      	ldr	r4, [pc, #40]	@ (8003558 <LoopForever+0x16>)
  movs r3, #0
 800352e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003530:	e001      	b.n	8003536 <LoopFillZerobss>

08003532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003534:	3204      	adds	r2, #4

08003536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003538:	d3fb      	bcc.n	8003532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800353a:	f004 fc4b 	bl	8007dd4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800353e:	f7ff f8ef 	bl	8002720 <main>

08003542 <LoopForever>:

LoopForever:
  b LoopForever
 8003542:	e7fe      	b.n	8003542 <LoopForever>
  ldr   r0, =_estack
 8003544:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800354c:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 8003550:	080089a8 	.word	0x080089a8
  ldr r2, =_sbss
 8003554:	20000450 	.word	0x20000450
  ldr r4, =_ebss
 8003558:	20000cd4 	.word	0x20000cd4

0800355c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800355c:	e7fe      	b.n	800355c <ADC1_IRQHandler>
	...

08003560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003560:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003562:	4b0f      	ldr	r3, [pc, #60]	@ (80035a0 <HAL_InitTick+0x40>)
{
 8003564:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8003566:	7819      	ldrb	r1, [r3, #0]
 8003568:	2900      	cmp	r1, #0
 800356a:	d101      	bne.n	8003570 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800356c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800356e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003570:	20fa      	movs	r0, #250	@ 0xfa
 8003572:	0080      	lsls	r0, r0, #2
 8003574:	f7fc fdc6 	bl	8000104 <__udivsi3>
 8003578:	4d0a      	ldr	r5, [pc, #40]	@ (80035a4 <HAL_InitTick+0x44>)
 800357a:	0001      	movs	r1, r0
 800357c:	6828      	ldr	r0, [r5, #0]
 800357e:	f7fc fdc1 	bl	8000104 <__udivsi3>
 8003582:	f000 fdef 	bl	8004164 <HAL_SYSTICK_Config>
 8003586:	2800      	cmp	r0, #0
 8003588:	d1f0      	bne.n	800356c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358a:	2c03      	cmp	r4, #3
 800358c:	d8ee      	bhi.n	800356c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800358e:	3801      	subs	r0, #1
 8003590:	2200      	movs	r2, #0
 8003592:	0021      	movs	r1, r4
 8003594:	f000 fda0 	bl	80040d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <HAL_InitTick+0x48>)
 800359a:	2000      	movs	r0, #0
 800359c:	601c      	str	r4, [r3, #0]
  return status;
 800359e:	e7e6      	b.n	800356e <HAL_InitTick+0xe>
 80035a0:	20000444 	.word	0x20000444
 80035a4:	20000440 	.word	0x20000440
 80035a8:	20000448 	.word	0x20000448

080035ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	4a08      	ldr	r2, [pc, #32]	@ (80035d0 <HAL_Init+0x24>)
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	6811      	ldr	r1, [r2, #0]
{
 80035b4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b6:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035b8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035ba:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035bc:	f7ff ffd0 	bl	8003560 <HAL_InitTick>
 80035c0:	1e04      	subs	r4, r0, #0
 80035c2:	d002      	beq.n	80035ca <HAL_Init+0x1e>
    status = HAL_ERROR;
 80035c4:	2401      	movs	r4, #1
}
 80035c6:	0020      	movs	r0, r4
 80035c8:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80035ca:	f7ff fb6f 	bl	8002cac <HAL_MspInit>
 80035ce:	e7fa      	b.n	80035c6 <HAL_Init+0x1a>
 80035d0:	40022000 	.word	0x40022000

080035d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80035d4:	4a03      	ldr	r2, [pc, #12]	@ (80035e4 <HAL_IncTick+0x10>)
 80035d6:	4b04      	ldr	r3, [pc, #16]	@ (80035e8 <HAL_IncTick+0x14>)
 80035d8:	6811      	ldr	r1, [r2, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	185b      	adds	r3, r3, r1
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	4770      	bx	lr
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	20000cd0 	.word	0x20000cd0
 80035e8:	20000444 	.word	0x20000444

080035ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80035ec:	4b01      	ldr	r3, [pc, #4]	@ (80035f4 <HAL_GetTick+0x8>)
 80035ee:	6818      	ldr	r0, [r3, #0]
}
 80035f0:	4770      	bx	lr
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	20000cd0 	.word	0x20000cd0

080035f8 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80035f8:	2150      	movs	r1, #80	@ 0x50
{
 80035fa:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80035fe:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003600:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003602:	4211      	tst	r1, r2
 8003604:	d10d      	bne.n	8003622 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003606:	2380      	movs	r3, #128	@ 0x80
 8003608:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4313      	orrs	r3, r2
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800360e:	22c0      	movs	r2, #192	@ 0xc0
 8003610:	6583      	str	r3, [r0, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003612:	6803      	ldr	r3, [r0, #0]
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	68d9      	ldr	r1, [r3, #12]
 8003618:	4211      	tst	r1, r2
 800361a:	d00d      	beq.n	8003638 <ADC_DMAConvCplt+0x40>
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800361c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800361e:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003620:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003622:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003624:	06d2      	lsls	r2, r2, #27
 8003626:	d502      	bpl.n	800362e <ADC_DMAConvCplt+0x36>
      hadc->ErrorCallback(hadc);
 8003628:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800362a:	4798      	blx	r3
 800362c:	e7f8      	b.n	8003620 <ADC_DMAConvCplt+0x28>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800362e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003630:	0018      	movs	r0, r3
 8003632:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003634:	4790      	blx	r2
}
 8003636:	e7f3      	b.n	8003620 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003638:	7e82      	ldrb	r2, [r0, #26]
 800363a:	2a00      	cmp	r2, #0
 800363c:	d1ee      	bne.n	800361c <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	0712      	lsls	r2, r2, #28
 8003642:	d5eb      	bpl.n	800361c <ADC_DMAConvCplt+0x24>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	0752      	lsls	r2, r2, #29
 8003648:	d508      	bpl.n	800365c <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364a:	2220      	movs	r2, #32
 800364c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800364e:	4313      	orrs	r3, r2
 8003650:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003652:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003654:	3a1f      	subs	r2, #31
 8003656:	4313      	orrs	r3, r2
 8003658:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800365a:	e7df      	b.n	800361c <ADC_DMAConvCplt+0x24>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800365c:	210c      	movs	r1, #12
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	438a      	bics	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003664:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003666:	4a03      	ldr	r2, [pc, #12]	@ (8003674 <ADC_DMAConvCplt+0x7c>)
 8003668:	4013      	ands	r3, r2
 800366a:	3204      	adds	r2, #4
 800366c:	32ff      	adds	r2, #255	@ 0xff
 800366e:	4313      	orrs	r3, r2
 8003670:	6583      	str	r3, [r0, #88]	@ 0x58
 8003672:	e7d3      	b.n	800361c <ADC_DMAConvCplt+0x24>
 8003674:	fffffefe 	.word	0xfffffefe

08003678 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003678:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367a:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 800367c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800367e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003680:	bd10      	pop	{r4, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)

08003684 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003684:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003686:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8003688:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800368a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800368c:	4313      	orrs	r3, r2
 800368e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003690:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003692:	3a3c      	subs	r2, #60	@ 0x3c
 8003694:	4313      	orrs	r3, r2
 8003696:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8003698:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800369a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800369c:	bd10      	pop	{r4, pc}
 800369e:	46c0      	nop			@ (mov r8, r8)

080036a0 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80036a0:	4770      	bx	lr
 80036a2:	46c0      	nop			@ (mov r8, r8)

080036a4 <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 80036a4:	4770      	bx	lr
 80036a6:	46c0      	nop			@ (mov r8, r8)

080036a8 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 80036a8:	4770      	bx	lr
 80036aa:	46c0      	nop			@ (mov r8, r8)

080036ac <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80036ac:	4770      	bx	lr
 80036ae:	46c0      	nop			@ (mov r8, r8)

080036b0 <HAL_ADC_Init>:
{
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	46d6      	mov	lr, sl
 80036b4:	464f      	mov	r7, r9
 80036b6:	4646      	mov	r6, r8
  __IO uint32_t wait_loop_index = 0UL;
 80036b8:	2300      	movs	r3, #0
{
 80036ba:	b5c0      	push	{r6, r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 80036c0:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80036c2:	d044      	beq.n	800374e <HAL_ADC_Init+0x9e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036c4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_ADC_Init+0x4c>
    if (hadc->MspInitCallback == NULL)
 80036ca:	2280      	movs	r2, #128	@ 0x80
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80036cc:	4b89      	ldr	r3, [pc, #548]	@ (80038f4 <HAL_ADC_Init+0x244>)
 80036ce:	6643      	str	r3, [r0, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80036d0:	4b89      	ldr	r3, [pc, #548]	@ (80038f8 <HAL_ADC_Init+0x248>)
 80036d2:	6683      	str	r3, [r0, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80036d4:	4b89      	ldr	r3, [pc, #548]	@ (80038fc <HAL_ADC_Init+0x24c>)
 80036d6:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80036d8:	4b89      	ldr	r3, [pc, #548]	@ (8003900 <HAL_ADC_Init+0x250>)
 80036da:	6703      	str	r3, [r0, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80036dc:	4b89      	ldr	r3, [pc, #548]	@ (8003904 <HAL_ADC_Init+0x254>)
 80036de:	6743      	str	r3, [r0, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80036e0:	4b89      	ldr	r3, [pc, #548]	@ (8003908 <HAL_ADC_Init+0x258>)
 80036e2:	6783      	str	r3, [r0, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80036e4:	4b89      	ldr	r3, [pc, #548]	@ (800390c <HAL_ADC_Init+0x25c>)
 80036e6:	67c3      	str	r3, [r0, #124]	@ 0x7c
    if (hadc->MspInitCallback == NULL)
 80036e8:	5883      	ldr	r3, [r0, r2]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d100      	bne.n	80036f0 <HAL_ADC_Init+0x40>
 80036ee:	e0e3      	b.n	80038b8 <HAL_ADC_Init+0x208>
    hadc->MspInitCallback(hadc);
 80036f0:	0020      	movs	r0, r4
 80036f2:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 80036f4:	2300      	movs	r3, #0
    hadc->Lock = HAL_UNLOCKED;
 80036f6:	2254      	movs	r2, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80036f8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80036fa:	54a3      	strb	r3, [r4, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036fc:	2380      	movs	r3, #128	@ 0x80
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036fe:	6825      	ldr	r5, [r4, #0]
 8003700:	055b      	lsls	r3, r3, #21
 8003702:	68aa      	ldr	r2, [r5, #8]
 8003704:	421a      	tst	r2, r3
 8003706:	d115      	bne.n	8003734 <HAL_ADC_Init+0x84>
  MODIFY_REG(ADCx->CR,
 8003708:	68aa      	ldr	r2, [r5, #8]
 800370a:	4981      	ldr	r1, [pc, #516]	@ (8003910 <HAL_ADC_Init+0x260>)
 800370c:	400a      	ands	r2, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003712:	4b80      	ldr	r3, [pc, #512]	@ (8003914 <HAL_ADC_Init+0x264>)
 8003714:	4980      	ldr	r1, [pc, #512]	@ (8003918 <HAL_ADC_Init+0x268>)
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	f7fc fcf4 	bl	8000104 <__udivsi3>
 800371c:	3001      	adds	r0, #1
 800371e:	0040      	lsls	r0, r0, #1
 8003720:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8003722:	9b01      	ldr	r3, [sp, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_ADC_Init+0x84>
      wait_loop_index--;
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800372e:	9b01      	ldr	r3, [sp, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f9      	bne.n	8003728 <HAL_ADC_Init+0x78>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003734:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003736:	2000      	movs	r0, #0
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	d400      	bmi.n	800373e <HAL_ADC_Init+0x8e>
 800373c:	e09d      	b.n	800387a <HAL_ADC_Init+0x1ca>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800373e:	68ab      	ldr	r3, [r5, #8]
 8003740:	075b      	lsls	r3, r3, #29
 8003742:	d50b      	bpl.n	800375c <HAL_ADC_Init+0xac>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003744:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003746:	2210      	movs	r2, #16
 8003748:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800374a:	4313      	orrs	r3, r2
 800374c:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800374e:	2001      	movs	r0, #1
}
 8003750:	b002      	add	sp, #8
 8003752:	bce0      	pop	{r5, r6, r7}
 8003754:	46ba      	mov	sl, r7
 8003756:	46b1      	mov	r9, r6
 8003758:	46a8      	mov	r8, r5
 800375a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800375c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800375e:	06db      	lsls	r3, r3, #27
 8003760:	d4f1      	bmi.n	8003746 <HAL_ADC_Init+0x96>
    ADC_STATE_CLR_SET(hadc->State,
 8003762:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003764:	4a6d      	ldr	r2, [pc, #436]	@ (800391c <HAL_ADC_Init+0x26c>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003766:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8003768:	4013      	ands	r3, r2
 800376a:	3206      	adds	r2, #6
 800376c:	32ff      	adds	r2, #255	@ 0xff
 800376e:	4313      	orrs	r3, r2
 8003770:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003772:	68ab      	ldr	r3, [r5, #8]
 8003774:	07db      	lsls	r3, r3, #31
 8003776:	d45c      	bmi.n	8003832 <HAL_ADC_Init+0x182>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003778:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800377a:	68a2      	ldr	r2, [r4, #8]
 800377c:	1e7b      	subs	r3, r7, #1
 800377e:	419f      	sbcs	r7, r3
 8003780:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003782:	7ea6      	ldrb	r6, [r4, #26]
 8003784:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003786:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003788:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800378a:	039b      	lsls	r3, r3, #14
 800378c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800378e:	7e63      	ldrb	r3, [r4, #25]
 8003790:	03db      	lsls	r3, r3, #15
 8003792:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003794:	0373      	lsls	r3, r6, #13
 8003796:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003798:	2900      	cmp	r1, #0
 800379a:	da00      	bge.n	800379e <HAL_ADC_Init+0xee>
 800379c:	e098      	b.n	80038d0 <HAL_ADC_Init+0x220>
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	039b      	lsls	r3, r3, #14
 80037a2:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037a4:	232c      	movs	r3, #44	@ 0x2c
 80037a6:	5ce3      	ldrb	r3, [r4, r3]
 80037a8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80037aa:	4313      	orrs	r3, r2
 80037ac:	433b      	orrs	r3, r7
 80037ae:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037b0:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80037b2:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037b4:	5de2      	ldrb	r2, [r4, r7]
 80037b6:	2a01      	cmp	r2, #1
 80037b8:	d100      	bne.n	80037bc <HAL_ADC_Init+0x10c>
 80037ba:	e08d      	b.n	80038d8 <HAL_ADC_Init+0x228>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80037be:	2a00      	cmp	r2, #0
 80037c0:	d005      	beq.n	80037ce <HAL_ADC_Init+0x11e>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037c2:	26e0      	movs	r6, #224	@ 0xe0
 80037c4:	0076      	lsls	r6, r6, #1
 80037c6:	4032      	ands	r2, r6
 80037c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80037ca:	4332      	orrs	r2, r6
 80037cc:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 80037ce:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 80037d0:	68ea      	ldr	r2, [r5, #12]
 80037d2:	4e53      	ldr	r6, [pc, #332]	@ (8003920 <HAL_ADC_Init+0x270>)
 80037d4:	4032      	ands	r2, r6
 80037d6:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037d8:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 80037da:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037dc:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 80037de:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037e0:	0fb3      	lsrs	r3, r6, #30
 80037e2:	079b      	lsls	r3, r3, #30
 80037e4:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80037e6:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037e8:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80037ea:	2f01      	cmp	r7, #1
 80037ec:	d109      	bne.n	8003802 <HAL_ADC_Init+0x152>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80037ee:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80037f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037f2:	433b      	orrs	r3, r7
 80037f4:	431a      	orrs	r2, r3
 80037f6:	4653      	mov	r3, sl
 80037f8:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 80037fa:	433a      	orrs	r2, r7
 80037fc:	431a      	orrs	r2, r3
 80037fe:	4663      	mov	r3, ip
 8003800:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8003802:	692b      	ldr	r3, [r5, #16]
 8003804:	4f47      	ldr	r7, [pc, #284]	@ (8003924 <HAL_ADC_Init+0x274>)
 8003806:	403b      	ands	r3, r7
 8003808:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800380a:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 800380c:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800380e:	0073      	lsls	r3, r6, #1
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	05d2      	lsls	r2, r2, #23
 8003814:	4293      	cmp	r3, r2
 8003816:	d00c      	beq.n	8003832 <HAL_ADC_Init+0x182>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	061b      	lsls	r3, r3, #24
 800381c:	429e      	cmp	r6, r3
 800381e:	d008      	beq.n	8003832 <HAL_ADC_Init+0x182>
        MODIFY_REG(ADC1_COMMON->CCR,
 8003820:	4a41      	ldr	r2, [pc, #260]	@ (8003928 <HAL_ADC_Init+0x278>)
 8003822:	4f42      	ldr	r7, [pc, #264]	@ (800392c <HAL_ADC_Init+0x27c>)
 8003824:	6813      	ldr	r3, [r2, #0]
 8003826:	403b      	ands	r3, r7
 8003828:	27f0      	movs	r7, #240	@ 0xf0
 800382a:	03bf      	lsls	r7, r7, #14
 800382c:	403e      	ands	r6, r7
 800382e:	4333      	orrs	r3, r6
 8003830:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 8003832:	2607      	movs	r6, #7
 8003834:	2770      	movs	r7, #112	@ 0x70
 8003836:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003838:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800383a:	43b3      	bics	r3, r6
 800383c:	4313      	orrs	r3, r2
 800383e:	616b      	str	r3, [r5, #20]
 8003840:	696e      	ldr	r6, [r5, #20]
 8003842:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003844:	43be      	bics	r6, r7
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	4333      	orrs	r3, r6
 800384a:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800384c:	2900      	cmp	r1, #0
 800384e:	d122      	bne.n	8003896 <HAL_ADC_Init+0x1e6>
      SET_BIT(hadc->Instance->CHSELR,
 8003850:	2310      	movs	r3, #16
 8003852:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003854:	425b      	negs	r3, r3
 8003856:	430b      	orrs	r3, r1
 8003858:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800385a:	2307      	movs	r3, #7
 800385c:	6969      	ldr	r1, [r5, #20]
 800385e:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003860:	429a      	cmp	r2, r3
 8003862:	d02c      	beq.n	80038be <HAL_ADC_Init+0x20e>
      ADC_STATE_CLR_SET(hadc->State,
 8003864:	2212      	movs	r2, #18
 8003866:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003868:	4393      	bics	r3, r2
 800386a:	3a02      	subs	r2, #2
 800386c:	4313      	orrs	r3, r2
 800386e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003870:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003872:	3a0f      	subs	r2, #15
 8003874:	4313      	orrs	r3, r2
 8003876:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8003878:	e769      	b.n	800374e <HAL_ADC_Init+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387a:	2210      	movs	r2, #16
 800387c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800387e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003880:	4313      	orrs	r3, r2
 8003882:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003884:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003886:	3a0f      	subs	r2, #15
 8003888:	4313      	orrs	r3, r2
 800388a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800388c:	68ab      	ldr	r3, [r5, #8]
 800388e:	075b      	lsls	r3, r3, #29
 8003890:	d400      	bmi.n	8003894 <HAL_ADC_Init+0x1e4>
 8003892:	e763      	b.n	800375c <HAL_ADC_Init+0xac>
 8003894:	e756      	b.n	8003744 <HAL_ADC_Init+0x94>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	039b      	lsls	r3, r3, #14
 800389a:	4299      	cmp	r1, r3
 800389c:	d1dd      	bne.n	800385a <HAL_ADC_Init+0x1aa>
      MODIFY_REG(hadc->Instance->CHSELR,
 800389e:	211c      	movs	r1, #28
 80038a0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80038a2:	69e3      	ldr	r3, [r4, #28]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4019      	ands	r1, r3
 80038aa:	2310      	movs	r3, #16
 80038ac:	425b      	negs	r3, r3
 80038ae:	408b      	lsls	r3, r1
 80038b0:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80038b2:	430b      	orrs	r3, r1
 80038b4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80038b6:	e7d0      	b.n	800385a <HAL_ADC_Init+0x1aa>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80038b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_ADC_Init+0x280>)
 80038ba:	5083      	str	r3, [r0, r2]
 80038bc:	e718      	b.n	80036f0 <HAL_ADC_Init+0x40>
      ADC_CLEAR_ERRORCODE(hadc);
 80038be:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80038c0:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80038c2:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80038c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038c6:	4393      	bics	r3, r2
 80038c8:	3a02      	subs	r2, #2
 80038ca:	4313      	orrs	r3, r2
 80038cc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80038ce:	e73f      	b.n	8003750 <HAL_ADC_Init+0xa0>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038d0:	004b      	lsls	r3, r1, #1
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	469c      	mov	ip, r3
 80038d6:	e765      	b.n	80037a4 <HAL_ADC_Init+0xf4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80038d8:	2e00      	cmp	r6, #0
 80038da:	d103      	bne.n	80038e4 <HAL_ADC_Init+0x234>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80038dc:	2280      	movs	r2, #128	@ 0x80
 80038de:	0252      	lsls	r2, r2, #9
 80038e0:	4313      	orrs	r3, r2
 80038e2:	e76b      	b.n	80037bc <HAL_ADC_Init+0x10c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e4:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 80038e6:	433e      	orrs	r6, r7
 80038e8:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ea:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 80038ec:	4332      	orrs	r2, r6
 80038ee:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80038f0:	e764      	b.n	80037bc <HAL_ADC_Init+0x10c>
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	080036a5 	.word	0x080036a5
 80038f8:	080036a9 	.word	0x080036a9
 80038fc:	080036ad 	.word	0x080036ad
 8003900:	080036a1 	.word	0x080036a1
 8003904:	080040cd 	.word	0x080040cd
 8003908:	080040d1 	.word	0x080040d1
 800390c:	080040d5 	.word	0x080040d5
 8003910:	6fffffe8 	.word	0x6fffffe8
 8003914:	20000440 	.word	0x20000440
 8003918:	00030d40 	.word	0x00030d40
 800391c:	fffffefd 	.word	0xfffffefd
 8003920:	ffde0201 	.word	0xffde0201
 8003924:	1ffffc02 	.word	0x1ffffc02
 8003928:	40012708 	.word	0x40012708
 800392c:	ffc3ffff 	.word	0xffc3ffff
 8003930:	08002cdd 	.word	0x08002cdd

08003934 <HAL_ADC_RegisterCallback>:
  if (pCallback == NULL)
 8003934:	2a00      	cmp	r2, #0
 8003936:	d013      	beq.n	8003960 <HAL_ADC_RegisterCallback+0x2c>
  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8003938:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800393a:	07db      	lsls	r3, r3, #31
 800393c:	d505      	bpl.n	800394a <HAL_ADC_RegisterCallback+0x16>
    switch (CallbackID)
 800393e:	290a      	cmp	r1, #10
 8003940:	d80e      	bhi.n	8003960 <HAL_ADC_RegisterCallback+0x2c>
 8003942:	4b17      	ldr	r3, [pc, #92]	@ (80039a0 <HAL_ADC_RegisterCallback+0x6c>)
 8003944:	0089      	lsls	r1, r1, #2
 8003946:	585b      	ldr	r3, [r3, r1]
 8003948:	469f      	mov	pc, r3
  else if (HAL_ADC_STATE_RESET == hadc->State)
 800394a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <HAL_ADC_RegisterCallback+0x2c>
    switch (CallbackID)
 8003950:	2909      	cmp	r1, #9
 8003952:	d00b      	beq.n	800396c <HAL_ADC_RegisterCallback+0x38>
 8003954:	290a      	cmp	r1, #10
 8003956:	d103      	bne.n	8003960 <HAL_ADC_RegisterCallback+0x2c>
        hadc->MspDeInitCallback = pCallback;
 8003958:	2384      	movs	r3, #132	@ 0x84
 800395a:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2000      	movs	r0, #0
 800395e:	e004      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003960:	2210      	movs	r2, #16
 8003962:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003964:	4313      	orrs	r3, r2
 8003966:	65c3      	str	r3, [r0, #92]	@ 0x5c
    return HAL_ERROR;
 8003968:	2001      	movs	r0, #1
}
 800396a:	4770      	bx	lr
        hadc->MspInitCallback = pCallback;
 800396c:	2380      	movs	r3, #128	@ 0x80
 800396e:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8003970:	2000      	movs	r0, #0
 8003972:	e7fa      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
        hadc->ErrorCallback = pCallback;
 8003974:	6702      	str	r2, [r0, #112]	@ 0x70
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2000      	movs	r0, #0
 8003978:	e7f7      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
        hadc->LevelOutOfWindow2Callback = pCallback;
 800397a:	6742      	str	r2, [r0, #116]	@ 0x74
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2000      	movs	r0, #0
 800397e:	e7f4      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
        hadc->LevelOutOfWindow3Callback = pCallback;
 8003980:	6782      	str	r2, [r0, #120]	@ 0x78
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2000      	movs	r0, #0
 8003984:	e7f1      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
        hadc->EndOfSamplingCallback = pCallback;
 8003986:	67c2      	str	r2, [r0, #124]	@ 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2000      	movs	r0, #0
 800398a:	e7ee      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
        hadc->ConvHalfCpltCallback = pCallback;
 800398c:	6682      	str	r2, [r0, #104]	@ 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2000      	movs	r0, #0
 8003990:	e7eb      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
        hadc->LevelOutOfWindowCallback = pCallback;
 8003992:	66c2      	str	r2, [r0, #108]	@ 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8003994:	2000      	movs	r0, #0
 8003996:	e7e8      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
        hadc->ConvCpltCallback = pCallback;
 8003998:	6642      	str	r2, [r0, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2000      	movs	r0, #0
 800399c:	e7e5      	b.n	800396a <HAL_ADC_RegisterCallback+0x36>
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	080086e0 	.word	0x080086e0

080039a4 <HAL_ADC_ConfigChannel>:
{
 80039a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a6:	46de      	mov	lr, fp
 80039a8:	4657      	mov	r7, sl
 80039aa:	464e      	mov	r6, r9
 80039ac:	4645      	mov	r5, r8
  __IO uint32_t wait_loop_index = 0UL;
 80039ae:	2300      	movs	r3, #0
{
 80039b0:	0004      	movs	r4, r0
 80039b2:	b5e0      	push	{r5, r6, r7, lr}
 80039b4:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80039b6:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 80039b8:	3354      	adds	r3, #84	@ 0x54
 80039ba:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039bc:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 80039be:	2a01      	cmp	r2, #1
 80039c0:	d100      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x20>
 80039c2:	e09a      	b.n	8003afa <HAL_ADC_ConfigChannel+0x156>
 80039c4:	2201      	movs	r2, #1
 80039c6:	54e2      	strb	r2, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	3203      	adds	r2, #3
 80039cc:	689e      	ldr	r6, [r3, #8]
 80039ce:	4232      	tst	r2, r6
 80039d0:	d00e      	beq.n	80039f0 <HAL_ADC_ConfigChannel+0x4c>
    tmp_hal_status = HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039d6:	321c      	adds	r2, #28
 80039d8:	4313      	orrs	r3, r2
 80039da:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80039dc:	2354      	movs	r3, #84	@ 0x54
 80039de:	2200      	movs	r2, #0
 80039e0:	54e2      	strb	r2, [r4, r3]
}
 80039e2:	b005      	add	sp, #20
 80039e4:	bcf0      	pop	{r4, r5, r6, r7}
 80039e6:	46bb      	mov	fp, r7
 80039e8:	46b2      	mov	sl, r6
 80039ea:	46a9      	mov	r9, r5
 80039ec:	46a0      	mov	r8, r4
 80039ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80039f0:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039f2:	4390      	bics	r0, r2
 80039f4:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80039f6:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 80039f8:	2e02      	cmp	r6, #2
 80039fa:	d05e      	beq.n	8003aba <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039fc:	0347      	lsls	r7, r0, #13
 80039fe:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a00:	2780      	movs	r7, #128	@ 0x80
 8003a02:	9500      	str	r5, [sp, #0]
 8003a04:	063f      	lsls	r7, r7, #24
 8003a06:	45bc      	cmp	ip, r7
 8003a08:	d053      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003a0a:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8003a0c:	46bb      	mov	fp, r7
 8003a0e:	271f      	movs	r7, #31
 8003a10:	46b8      	mov	r8, r7
 8003a12:	4037      	ands	r7, r6
 8003a14:	46ba      	mov	sl, r7
 8003a16:	270f      	movs	r7, #15
 8003a18:	4655      	mov	r5, sl
 8003a1a:	40af      	lsls	r7, r5
 8003a1c:	43fd      	mvns	r5, r7
 8003a1e:	46bc      	mov	ip, r7
 8003a20:	9501      	str	r5, [sp, #4]
 8003a22:	465f      	mov	r7, fp
 8003a24:	4665      	mov	r5, ip
 8003a26:	43af      	bics	r7, r5
 8003a28:	9d00      	ldr	r5, [sp, #0]
 8003a2a:	46b9      	mov	r9, r7
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	d166      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x15a>
 8003a30:	4645      	mov	r5, r8
 8003a32:	0e82      	lsrs	r2, r0, #26
 8003a34:	4015      	ands	r5, r2
 8003a36:	002a      	movs	r2, r5
 8003a38:	4655      	mov	r5, sl
 8003a3a:	40aa      	lsls	r2, r5
 8003a3c:	464d      	mov	r5, r9
 8003a3e:	4315      	orrs	r5, r2
 8003a40:	46a9      	mov	r9, r5
 8003a42:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a44:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003a46:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a48:	69e2      	ldr	r2, [r4, #28]
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	4296      	cmp	r6, r2
 8003a4e:	d808      	bhi.n	8003a62 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 8003a50:	4656      	mov	r6, sl
 8003a52:	0082      	lsls	r2, r0, #2
 8003a54:	0f12      	lsrs	r2, r2, #28
 8003a56:	40b2      	lsls	r2, r6
 8003a58:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8003a5a:	9e01      	ldr	r6, [sp, #4]
 8003a5c:	4035      	ands	r5, r6
 8003a5e:	432a      	orrs	r2, r5
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8003a62:	0205      	lsls	r5, r0, #8
 8003a64:	688a      	ldr	r2, [r1, #8]
 8003a66:	0029      	movs	r1, r5
 8003a68:	695e      	ldr	r6, [r3, #20]
 8003a6a:	402a      	ands	r2, r5
 8003a6c:	4d66      	ldr	r5, [pc, #408]	@ (8003c08 <HAL_ADC_ConfigChannel+0x264>)
 8003a6e:	438e      	bics	r6, r1
 8003a70:	402a      	ands	r2, r5
 8003a72:	4332      	orrs	r2, r6
 8003a74:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a76:	2800      	cmp	r0, #0
 8003a78:	db01      	blt.n	8003a7e <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	e7ae      	b.n	80039dc <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a7e:	21e0      	movs	r1, #224	@ 0xe0
 8003a80:	4d62      	ldr	r5, [pc, #392]	@ (8003c0c <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a82:	4a63      	ldr	r2, [pc, #396]	@ (8003c10 <HAL_ADC_ConfigChannel+0x26c>)
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	0449      	lsls	r1, r1, #17
 8003a88:	4019      	ands	r1, r3
 8003a8a:	4290      	cmp	r0, r2
 8003a8c:	d04c      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a8e:	4a61      	ldr	r2, [pc, #388]	@ (8003c14 <HAL_ADC_ConfigChannel+0x270>)
 8003a90:	4290      	cmp	r0, r2
 8003a92:	d040      	beq.n	8003b16 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a94:	4a60      	ldr	r2, [pc, #384]	@ (8003c18 <HAL_ADC_ConfigChannel+0x274>)
 8003a96:	4290      	cmp	r0, r2
 8003a98:	d1ef      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a9e:	4213      	tst	r3, r2
 8003aa0:	d1eb      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003aa2:	682b      	ldr	r3, [r5, #0]
 8003aa4:	485d      	ldr	r0, [pc, #372]	@ (8003c1c <HAL_ADC_ConfigChannel+0x278>)
 8003aa6:	4003      	ands	r3, r0
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aac:	2000      	movs	r0, #0
 8003aae:	602a      	str	r2, [r5, #0]
 8003ab0:	e794      	b.n	80039dc <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003ab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ab4:	432a      	orrs	r2, r5
 8003ab6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ab8:	e7d3      	b.n	8003a62 <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003aba:	2280      	movs	r2, #128	@ 0x80
 8003abc:	0612      	lsls	r2, r2, #24
 8003abe:	4594      	cmp	ip, r2
 8003ac0:	d104      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003ac2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ac4:	0341      	lsls	r1, r0, #13
 8003ac6:	0b49      	lsrs	r1, r1, #13
 8003ac8:	438a      	bics	r2, r1
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003acc:	2800      	cmp	r0, #0
 8003ace:	dad4      	bge.n	8003a7a <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ad0:	4a4e      	ldr	r2, [pc, #312]	@ (8003c0c <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ad2:	494f      	ldr	r1, [pc, #316]	@ (8003c10 <HAL_ADC_ConfigChannel+0x26c>)
 8003ad4:	6813      	ldr	r3, [r2, #0]
 8003ad6:	4288      	cmp	r0, r1
 8003ad8:	d023      	beq.n	8003b22 <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ada:	494e      	ldr	r1, [pc, #312]	@ (8003c14 <HAL_ADC_ConfigChannel+0x270>)
 8003adc:	4288      	cmp	r0, r1
 8003ade:	d04a      	beq.n	8003b76 <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ae0:	494d      	ldr	r1, [pc, #308]	@ (8003c18 <HAL_ADC_ConfigChannel+0x274>)
 8003ae2:	4288      	cmp	r0, r1
 8003ae4:	d1c9      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ae6:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ae8:	6811      	ldr	r1, [r2, #0]
 8003aea:	0440      	lsls	r0, r0, #17
 8003aec:	4003      	ands	r3, r0
 8003aee:	484b      	ldr	r0, [pc, #300]	@ (8003c1c <HAL_ADC_ConfigChannel+0x278>)
 8003af0:	4001      	ands	r1, r0
 8003af2:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af4:	2000      	movs	r0, #0
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e770      	b.n	80039dc <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 8003afa:	2002      	movs	r0, #2
 8003afc:	e771      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003afe:	2501      	movs	r5, #1
 8003b00:	4205      	tst	r5, r0
 8003b02:	d19e      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x9e>
 8003b04:	2702      	movs	r7, #2
 8003b06:	4207      	tst	r7, r0
 8003b08:	d02d      	beq.n	8003b66 <HAL_ADC_ConfigChannel+0x1c2>
 8003b0a:	4652      	mov	r2, sl
 8003b0c:	4095      	lsls	r5, r2
 8003b0e:	464a      	mov	r2, r9
 8003b10:	432a      	orrs	r2, r5
 8003b12:	4691      	mov	r9, r2
 8003b14:	e795      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b16:	2280      	movs	r2, #128	@ 0x80
 8003b18:	0452      	lsls	r2, r2, #17
 8003b1a:	4213      	tst	r3, r2
 8003b1c:	d0c1      	beq.n	8003aa2 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b1e:	2000      	movs	r0, #0
 8003b20:	e75c      	b.n	80039dc <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b22:	20a0      	movs	r0, #160	@ 0xa0
 8003b24:	6811      	ldr	r1, [r2, #0]
 8003b26:	e7e0      	b.n	8003aea <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b2c:	4213      	tst	r3, r2
 8003b2e:	d1a4      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0xd6>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	483a      	ldr	r0, [pc, #232]	@ (8003c1c <HAL_ADC_ConfigChannel+0x278>)
 8003b34:	4003      	ands	r3, r0
 8003b36:	430b      	orrs	r3, r1
 8003b38:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b3a:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <HAL_ADC_ConfigChannel+0x27c>)
 8003b3c:	602a      	str	r2, [r5, #0]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	4938      	ldr	r1, [pc, #224]	@ (8003c24 <HAL_ADC_ConfigChannel+0x280>)
 8003b42:	f7fc fadf 	bl	8000104 <__udivsi3>
 8003b46:	3001      	adds	r0, #1
 8003b48:	0043      	lsls	r3, r0, #1
 8003b4a:	181b      	adds	r3, r3, r0
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8003b50:	9b03      	ldr	r3, [sp, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d091      	beq.n	8003a7a <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 8003b56:	9b03      	ldr	r3, [sp, #12]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f9      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b62:	2000      	movs	r0, #0
 8003b64:	e73a      	b.n	80039dc <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b66:	4202      	tst	r2, r0
 8003b68:	d009      	beq.n	8003b7e <HAL_ADC_ConfigChannel+0x1da>
 8003b6a:	4652      	mov	r2, sl
 8003b6c:	4097      	lsls	r7, r2
 8003b6e:	464a      	mov	r2, r9
 8003b70:	433a      	orrs	r2, r7
 8003b72:	4691      	mov	r9, r2
 8003b74:	e765      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b76:	20c0      	movs	r0, #192	@ 0xc0
 8003b78:	6811      	ldr	r1, [r2, #0]
 8003b7a:	0400      	lsls	r0, r0, #16
 8003b7c:	e7b6      	b.n	8003aec <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b7e:	0702      	lsls	r2, r0, #28
 8003b80:	d501      	bpl.n	8003b86 <HAL_ADC_ConfigChannel+0x1e2>
 8003b82:	2203      	movs	r2, #3
 8003b84:	e758      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003b86:	06c2      	lsls	r2, r0, #27
 8003b88:	d501      	bpl.n	8003b8e <HAL_ADC_ConfigChannel+0x1ea>
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	e754      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003b8e:	0682      	lsls	r2, r0, #26
 8003b90:	d501      	bpl.n	8003b96 <HAL_ADC_ConfigChannel+0x1f2>
 8003b92:	2205      	movs	r2, #5
 8003b94:	e750      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003b96:	0642      	lsls	r2, r0, #25
 8003b98:	d501      	bpl.n	8003b9e <HAL_ADC_ConfigChannel+0x1fa>
 8003b9a:	2206      	movs	r2, #6
 8003b9c:	e74c      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003b9e:	0602      	lsls	r2, r0, #24
 8003ba0:	d501      	bpl.n	8003ba6 <HAL_ADC_ConfigChannel+0x202>
 8003ba2:	2207      	movs	r2, #7
 8003ba4:	e748      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003ba6:	05c2      	lsls	r2, r0, #23
 8003ba8:	d501      	bpl.n	8003bae <HAL_ADC_ConfigChannel+0x20a>
 8003baa:	2208      	movs	r2, #8
 8003bac:	e744      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bae:	0582      	lsls	r2, r0, #22
 8003bb0:	d501      	bpl.n	8003bb6 <HAL_ADC_ConfigChannel+0x212>
 8003bb2:	2209      	movs	r2, #9
 8003bb4:	e740      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bb6:	0542      	lsls	r2, r0, #21
 8003bb8:	d501      	bpl.n	8003bbe <HAL_ADC_ConfigChannel+0x21a>
 8003bba:	220a      	movs	r2, #10
 8003bbc:	e73c      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bbe:	0502      	lsls	r2, r0, #20
 8003bc0:	d501      	bpl.n	8003bc6 <HAL_ADC_ConfigChannel+0x222>
 8003bc2:	220b      	movs	r2, #11
 8003bc4:	e738      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bc6:	04c2      	lsls	r2, r0, #19
 8003bc8:	d501      	bpl.n	8003bce <HAL_ADC_ConfigChannel+0x22a>
 8003bca:	220c      	movs	r2, #12
 8003bcc:	e734      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bce:	0482      	lsls	r2, r0, #18
 8003bd0:	d501      	bpl.n	8003bd6 <HAL_ADC_ConfigChannel+0x232>
 8003bd2:	220d      	movs	r2, #13
 8003bd4:	e730      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bd6:	0442      	lsls	r2, r0, #17
 8003bd8:	d501      	bpl.n	8003bde <HAL_ADC_ConfigChannel+0x23a>
 8003bda:	220e      	movs	r2, #14
 8003bdc:	e72c      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bde:	0402      	lsls	r2, r0, #16
 8003be0:	d504      	bpl.n	8003bec <HAL_ADC_ConfigChannel+0x248>
 8003be2:	465a      	mov	r2, fp
 8003be4:	4665      	mov	r5, ip
 8003be6:	432a      	orrs	r2, r5
 8003be8:	4691      	mov	r9, r2
 8003bea:	e72a      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x9e>
 8003bec:	03c2      	lsls	r2, r0, #15
 8003bee:	d501      	bpl.n	8003bf4 <HAL_ADC_ConfigChannel+0x250>
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	e721      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bf4:	0382      	lsls	r2, r0, #14
 8003bf6:	d501      	bpl.n	8003bfc <HAL_ADC_ConfigChannel+0x258>
 8003bf8:	2211      	movs	r2, #17
 8003bfa:	e71d      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003bfc:	0342      	lsls	r2, r0, #13
 8003bfe:	d400      	bmi.n	8003c02 <HAL_ADC_ConfigChannel+0x25e>
 8003c00:	e71f      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x9e>
 8003c02:	2212      	movs	r2, #18
 8003c04:	e718      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x94>
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	07ffff00 	.word	0x07ffff00
 8003c0c:	40012708 	.word	0x40012708
 8003c10:	b0001000 	.word	0xb0001000
 8003c14:	b8004000 	.word	0xb8004000
 8003c18:	b4002000 	.word	0xb4002000
 8003c1c:	fe3fffff 	.word	0xfe3fffff
 8003c20:	20000440 	.word	0x20000440
 8003c24:	00030d40 	.word	0x00030d40

08003c28 <ADC_ConversionStop>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c28:	6802      	ldr	r2, [r0, #0]
{
 8003c2a:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c2c:	6893      	ldr	r3, [r2, #8]
 8003c2e:	0004      	movs	r4, r0
 8003c30:	075b      	lsls	r3, r3, #29
 8003c32:	d516      	bpl.n	8003c62 <ADC_ConversionStop+0x3a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c34:	6893      	ldr	r3, [r2, #8]
 8003c36:	079b      	lsls	r3, r3, #30
 8003c38:	d515      	bpl.n	8003c66 <ADC_ConversionStop+0x3e>
    tickstart = HAL_GetTick();
 8003c3a:	f7ff fcd7 	bl	80035ec <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c3e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003c40:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	075b      	lsls	r3, r3, #29
 8003c46:	d50c      	bpl.n	8003c62 <ADC_ConversionStop+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c48:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c4a:	f7ff fccf 	bl	80035ec <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c4e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c50:	1b80      	subs	r0, r0, r6
 8003c52:	2802      	cmp	r0, #2
 8003c54:	d902      	bls.n	8003c5c <ADC_ConversionStop+0x34>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4215      	tst	r5, r2
 8003c5a:	d112      	bne.n	8003c82 <ADC_ConversionStop+0x5a>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	421d      	tst	r5, r3
 8003c60:	d1f3      	bne.n	8003c4a <ADC_ConversionStop+0x22>
  return HAL_OK;
 8003c62:	2000      	movs	r0, #0
}
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8003c66:	6893      	ldr	r3, [r2, #8]
 8003c68:	490b      	ldr	r1, [pc, #44]	@ (8003c98 <ADC_ConversionStop+0x70>)
 8003c6a:	400b      	ands	r3, r1
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003c72:	f7ff fcbb 	bl	80035ec <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c76:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003c78:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	075b      	lsls	r3, r3, #29
 8003c7e:	d4e3      	bmi.n	8003c48 <ADC_ConversionStop+0x20>
 8003c80:	e7ef      	b.n	8003c62 <ADC_ConversionStop+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c82:	2210      	movs	r2, #16
 8003c84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c86:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003c8e:	3a0f      	subs	r2, #15
 8003c90:	4313      	orrs	r3, r2
 8003c92:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003c94:	e7e6      	b.n	8003c64 <ADC_ConversionStop+0x3c>
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	7fffffe8 	.word	0x7fffffe8

08003c9c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8003c9c:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c9e:	2201      	movs	r2, #1
{
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003ca4:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ca6:	6803      	ldr	r3, [r0, #0]
{
 8003ca8:	0004      	movs	r4, r0
 8003caa:	6899      	ldr	r1, [r3, #8]
 8003cac:	420a      	tst	r2, r1
 8003cae:	d11f      	bne.n	8003cf0 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cb0:	6898      	ldr	r0, [r3, #8]
 8003cb2:	4928      	ldr	r1, [pc, #160]	@ (8003d54 <ADC_Enable+0xb8>)
 8003cb4:	4208      	tst	r0, r1
 8003cb6:	d11e      	bne.n	8003cf6 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	4827      	ldr	r0, [pc, #156]	@ (8003d58 <ADC_Enable+0xbc>)
 8003cbc:	4001      	ands	r1, r0
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003cc2:	4b26      	ldr	r3, [pc, #152]	@ (8003d5c <ADC_Enable+0xc0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	d50f      	bpl.n	8003cea <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cca:	4b25      	ldr	r3, [pc, #148]	@ (8003d60 <ADC_Enable+0xc4>)
 8003ccc:	4925      	ldr	r1, [pc, #148]	@ (8003d64 <ADC_Enable+0xc8>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	f7fc fa18 	bl	8000104 <__udivsi3>
 8003cd4:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003cd6:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8003cd8:	9b01      	ldr	r3, [sp, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <ADC_Enable+0x4e>
        wait_loop_index--;
 8003cde:	9b01      	ldr	r3, [sp, #4]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003ce4:	9b01      	ldr	r3, [sp, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f9      	bne.n	8003cde <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003cea:	7e63      	ldrb	r3, [r4, #25]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d10b      	bne.n	8003d08 <ADC_Enable+0x6c>
  return HAL_OK;
 8003cf0:	2000      	movs	r0, #0
}
 8003cf2:	b003      	add	sp, #12
 8003cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf6:	2110      	movs	r1, #16
 8003cf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8003cfa:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d00:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d02:	4313      	orrs	r3, r2
 8003d04:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003d06:	e7f4      	b.n	8003cf2 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 8003d08:	f7ff fc70 	bl	80035ec <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0c:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003d0e:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	07d2      	lsls	r2, r2, #31
 8003d14:	d4ec      	bmi.n	8003cf0 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d16:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8003d18:	4f0f      	ldr	r7, [pc, #60]	@ (8003d58 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4215      	tst	r5, r2
 8003d1e:	d103      	bne.n	8003d28 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	403a      	ands	r2, r7
 8003d24:	432a      	orrs	r2, r5
 8003d26:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d28:	f7ff fc60 	bl	80035ec <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d2c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d2e:	1b80      	subs	r0, r0, r6
 8003d30:	2802      	cmp	r0, #2
 8003d32:	d902      	bls.n	8003d3a <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4215      	tst	r5, r2
 8003d38:	d003      	beq.n	8003d42 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4215      	tst	r5, r2
 8003d3e:	d0ec      	beq.n	8003d1a <ADC_Enable+0x7e>
 8003d40:	e7d6      	b.n	8003cf0 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	2210      	movs	r2, #16
 8003d44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d4e:	432b      	orrs	r3, r5
 8003d50:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8003d52:	e7ce      	b.n	8003cf2 <ADC_Enable+0x56>
 8003d54:	80000017 	.word	0x80000017
 8003d58:	7fffffe8 	.word	0x7fffffe8
 8003d5c:	40012708 	.word	0x40012708
 8003d60:	20000440 	.word	0x20000440
 8003d64:	00030d40 	.word	0x00030d40

08003d68 <HAL_ADC_Start_DMA>:
{
 8003d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d6a:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d6c:	6805      	ldr	r5, [r0, #0]
{
 8003d6e:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d70:	68ae      	ldr	r6, [r5, #8]
 8003d72:	4688      	mov	r8, r1
 8003d74:	0017      	movs	r7, r2
    __HAL_LOCK(hadc);
 8003d76:	2002      	movs	r0, #2
{
 8003d78:	b500      	push	{lr}
 8003d7a:	0776      	lsls	r6, r6, #29
 8003d7c:	d414      	bmi.n	8003da8 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8003d7e:	2254      	movs	r2, #84	@ 0x54
 8003d80:	5ca3      	ldrb	r3, [r4, r2]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d010      	beq.n	8003da8 <HAL_ADC_Start_DMA+0x40>
 8003d86:	2301      	movs	r3, #1
 8003d88:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003d8a:	68ea      	ldr	r2, [r5, #12]
 8003d8c:	4213      	tst	r3, r2
 8003d8e:	d106      	bne.n	8003d9e <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d90:	68aa      	ldr	r2, [r5, #8]
 8003d92:	4213      	tst	r3, r2
 8003d94:	d131      	bne.n	8003dfa <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003d96:	2201      	movs	r2, #1
 8003d98:	68eb      	ldr	r3, [r5, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8003d9e:	0020      	movs	r0, r4
 8003da0:	f7ff ff7c 	bl	8003c9c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d002      	beq.n	8003dae <HAL_ADC_Start_DMA+0x46>
}
 8003da8:	bc80      	pop	{r7}
 8003daa:	46b8      	mov	r8, r7
 8003dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003dae:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003db0:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003db2:	6d25      	ldr	r5, [r4, #80]	@ 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8003db4:	401a      	ands	r2, r3
 8003db6:	2380      	movs	r3, #128	@ 0x80
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	65a3      	str	r3, [r4, #88]	@ 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dbe:	4b13      	ldr	r3, [pc, #76]	@ (8003e0c <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003dc0:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dc2:	62eb      	str	r3, [r5, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003dc6:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dc8:	632b      	str	r3, [r5, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dcc:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003dce:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dd0:	231c      	movs	r3, #28
 8003dd2:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 8003dd4:	3338      	adds	r3, #56	@ 0x38
 8003dd6:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003dd8:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003dda:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003de0:	4642      	mov	r2, r8
 8003de2:	003b      	movs	r3, r7
 8003de4:	3140      	adds	r1, #64	@ 0x40
 8003de6:	f000 fa4d 	bl	8004284 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003dea:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003dec:	490a      	ldr	r1, [pc, #40]	@ (8003e18 <HAL_ADC_Start_DMA+0xb0>)
 8003dee:	6893      	ldr	r3, [r2, #8]
 8003df0:	400b      	ands	r3, r1
 8003df2:	2104      	movs	r1, #4
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6093      	str	r3, [r2, #8]
}
 8003df8:	e7d6      	b.n	8003da8 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 8003dfa:	68ab      	ldr	r3, [r5, #8]
 8003dfc:	4a06      	ldr	r2, [pc, #24]	@ (8003e18 <HAL_ADC_Start_DMA+0xb0>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	4303      	orrs	r3, r0
 8003e02:	60ab      	str	r3, [r5, #8]
}
 8003e04:	e7c7      	b.n	8003d96 <HAL_ADC_Start_DMA+0x2e>
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	fffff0fe 	.word	0xfffff0fe
 8003e0c:	080035f9 	.word	0x080035f9
 8003e10:	08003679 	.word	0x08003679
 8003e14:	08003685 	.word	0x08003685
 8003e18:	7fffffe8 	.word	0x7fffffe8

08003e1c <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e1c:	2202      	movs	r2, #2
{
 8003e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e20:	6803      	ldr	r3, [r0, #0]
{
 8003e22:	0004      	movs	r4, r0
 8003e24:	6899      	ldr	r1, [r3, #8]
 8003e26:	420a      	tst	r2, r1
 8003e28:	d002      	beq.n	8003e30 <ADC_Disable+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e2a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003e2c:	2000      	movs	r0, #0
}
 8003e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e30:	2101      	movs	r1, #1
 8003e32:	6898      	ldr	r0, [r3, #8]
 8003e34:	4201      	tst	r1, r0
 8003e36:	d0f9      	beq.n	8003e2c <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e38:	2705      	movs	r7, #5
 8003e3a:	6898      	ldr	r0, [r3, #8]
 8003e3c:	4007      	ands	r7, r0
 8003e3e:	2f01      	cmp	r7, #1
 8003e40:	d008      	beq.n	8003e54 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e42:	2210      	movs	r2, #16
 8003e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003e52:	e7ec      	b.n	8003e2e <ADC_Disable+0x12>
  MODIFY_REG(ADCx->CR,
 8003e54:	6899      	ldr	r1, [r3, #8]
 8003e56:	4812      	ldr	r0, [pc, #72]	@ (8003ea0 <ADC_Disable+0x84>)
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e58:	2501      	movs	r5, #1
 8003e5a:	4001      	ands	r1, r0
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e60:	2203      	movs	r2, #3
 8003e62:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003e64:	f7ff fbc2 	bl	80035ec <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e68:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003e6a:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	421f      	tst	r7, r3
 8003e70:	d0dc      	beq.n	8003e2c <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e72:	f7ff fbbb 	bl	80035ec <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e76:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e78:	1b80      	subs	r0, r0, r6
 8003e7a:	2802      	cmp	r0, #2
 8003e7c:	d902      	bls.n	8003e84 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	4215      	tst	r5, r2
 8003e82:	d103      	bne.n	8003e8c <ADC_Disable+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	421d      	tst	r5, r3
 8003e88:	d1f3      	bne.n	8003e72 <ADC_Disable+0x56>
 8003e8a:	e7cf      	b.n	8003e2c <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8003e90:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e92:	4313      	orrs	r3, r2
 8003e94:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e96:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e98:	432b      	orrs	r3, r5
 8003e9a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003e9c:	e7c7      	b.n	8003e2e <ADC_Disable+0x12>
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	7fffffe8 	.word	0x7fffffe8

08003ea4 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8003ea4:	2354      	movs	r3, #84	@ 0x54
{
 8003ea6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003ea8:	5cc2      	ldrb	r2, [r0, r3]
{
 8003eaa:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003eac:	2a01      	cmp	r2, #1
 8003eae:	d025      	beq.n	8003efc <HAL_ADC_Stop_DMA+0x58>
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003eb4:	f7ff feb8 	bl	8003c28 <ADC_ConversionStop>
 8003eb8:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8003eba:	d11a      	bne.n	8003ef2 <HAL_ADC_Stop_DMA+0x4e>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003ebc:	2325      	movs	r3, #37	@ 0x25
 8003ebe:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003ec0:	5cc3      	ldrb	r3, [r0, r3]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d01c      	beq.n	8003f00 <HAL_ADC_Stop_DMA+0x5c>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003ec6:	2110      	movs	r1, #16
 8003ec8:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 8003eca:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003ecc:	6853      	ldr	r3, [r2, #4]
 8003ece:	438b      	bics	r3, r1
 8003ed0:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8003ed2:	f7ff ffa3 	bl	8003e1c <ADC_Disable>
 8003ed6:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8003ed8:	d106      	bne.n	8003ee8 <HAL_ADC_Stop_DMA+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 8003eda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003edc:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <HAL_ADC_Stop_DMA+0x88>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	3204      	adds	r2, #4
 8003ee2:	32ff      	adds	r2, #255	@ 0xff
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	65a3      	str	r3, [r4, #88]	@ 0x58
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8003ee8:	2101      	movs	r1, #1
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	68d3      	ldr	r3, [r2, #12]
 8003eee:	438b      	bics	r3, r1
 8003ef0:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 8003ef2:	2354      	movs	r3, #84	@ 0x54
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	54e2      	strb	r2, [r4, r3]
}
 8003ef8:	0028      	movs	r0, r5
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8003efc:	2502      	movs	r5, #2
 8003efe:	e7fb      	b.n	8003ef8 <HAL_ADC_Stop_DMA+0x54>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003f00:	f000 fa28 	bl	8004354 <HAL_DMA_Abort>
 8003f04:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 8003f06:	d0de      	beq.n	8003ec6 <HAL_ADC_Stop_DMA+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f08:	2240      	movs	r2, #64	@ 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f0a:	2110      	movs	r1, #16
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      (void)ADC_Disable(hadc);
 8003f0e:	0020      	movs	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f10:	4313      	orrs	r3, r2
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f12:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f14:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f16:	6853      	ldr	r3, [r2, #4]
 8003f18:	438b      	bics	r3, r1
 8003f1a:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 8003f1c:	f7ff ff7e 	bl	8003e1c <ADC_Disable>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8003f20:	2101      	movs	r1, #1
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	68d3      	ldr	r3, [r2, #12]
 8003f26:	438b      	bics	r3, r1
 8003f28:	60d3      	str	r3, [r2, #12]
 8003f2a:	e7e2      	b.n	8003ef2 <HAL_ADC_Stop_DMA+0x4e>
 8003f2c:	fffffefe 	.word	0xfffffefe

08003f30 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	46de      	mov	lr, fp
 8003f34:	4657      	mov	r7, sl
 8003f36:	464e      	mov	r6, r9
 8003f38:	4645      	mov	r5, r8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f3a:	2300      	movs	r3, #0
{
 8003f3c:	b5e0      	push	{r5, r6, r7, lr}
 8003f3e:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8003f40:	9302      	str	r3, [sp, #8]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003f42:	3354      	adds	r3, #84	@ 0x54
 8003f44:	5cc2      	ldrb	r2, [r0, r3]
{
 8003f46:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003f48:	2a01      	cmp	r2, #1
 8003f4a:	d100      	bne.n	8003f4e <HAL_ADCEx_Calibration_Start+0x1e>
 8003f4c:	e0af      	b.n	80040ae <HAL_ADCEx_Calibration_Start+0x17e>
 8003f4e:	2701      	movs	r7, #1
 8003f50:	54c7      	strb	r7, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f52:	f7ff ff63 	bl	8003e1c <ADC_Disable>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f56:	003d      	movs	r5, r7

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f58:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 8003f5a:	9001      	str	r0, [sp, #4]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	4015      	ands	r5, r2
 8003f60:	4217      	tst	r7, r2
 8003f62:	d136      	bne.n	8003fd2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f64:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003f66:	4953      	ldr	r1, [pc, #332]	@ (80040b4 <HAL_ADCEx_Calibration_Start+0x184>)
  MODIFY_REG(ADCx->CR,
 8003f68:	2080      	movs	r0, #128	@ 0x80
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	3106      	adds	r1, #6
 8003f6e:	31ff      	adds	r1, #255	@ 0xff
 8003f70:	430a      	orrs	r2, r1
 8003f72:	65a2      	str	r2, [r4, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f74:	68da      	ldr	r2, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f76:	4950      	ldr	r1, [pc, #320]	@ (80040b8 <HAL_ADCEx_Calibration_Start+0x188>)
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f78:	4693      	mov	fp, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f7a:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003f7c:	277f      	movs	r7, #127	@ 0x7f
 8003f7e:	400a      	ands	r2, r1
 8003f80:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CR,
 8003f82:	4a4e      	ldr	r2, [pc, #312]	@ (80040bc <HAL_ADCEx_Calibration_Start+0x18c>)
 8003f84:	2108      	movs	r1, #8
 8003f86:	4694      	mov	ip, r2

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
      {
        wait_loop_index++;
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f88:	4a4d      	ldr	r2, [pc, #308]	@ (80040c0 <HAL_ADCEx_Calibration_Start+0x190>)
 8003f8a:	0600      	lsls	r0, r0, #24
 8003f8c:	4692      	mov	sl, r2
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003f8e:	22b4      	movs	r2, #180	@ 0xb4
 8003f90:	4691      	mov	r9, r2
 8003f92:	e006      	b.n	8003fa2 <HAL_ADCEx_Calibration_Start+0x72>
 8003f94:	464a      	mov	r2, r9
 8003f96:	589a      	ldr	r2, [r3, r2]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003f98:	3901      	subs	r1, #1
 8003f9a:	403a      	ands	r2, r7

          return HAL_ERROR;
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003f9c:	18ad      	adds	r5, r5, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003f9e:	2900      	cmp	r1, #0
 8003fa0:	d026      	beq.n	8003ff0 <HAL_ADCEx_Calibration_Start+0xc0>
  MODIFY_REG(ADCx->CR,
 8003fa2:	4666      	mov	r6, ip
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	4032      	ands	r2, r6
 8003fa8:	4302      	orrs	r2, r0
 8003faa:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	2a00      	cmp	r2, #0
 8003fb0:	daf0      	bge.n	8003f94 <HAL_ADCEx_Calibration_Start+0x64>
        wait_loop_index++;
 8003fb2:	9a02      	ldr	r2, [sp, #8]
 8003fb4:	3201      	adds	r2, #1
 8003fb6:	9202      	str	r2, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fb8:	9a02      	ldr	r2, [sp, #8]
 8003fba:	4552      	cmp	r2, sl
 8003fbc:	d9f6      	bls.n	8003fac <HAL_ADCEx_Calibration_Start+0x7c>
          ADC_STATE_CLR_SET(hadc->State,
 8003fbe:	2212      	movs	r2, #18
 8003fc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	3a02      	subs	r2, #2
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2354      	movs	r3, #84	@ 0x54
 8003fce:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8003fd0:	e059      	b.n	8004086 <HAL_ADCEx_Calibration_Start+0x156>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003fda:	2354      	movs	r3, #84	@ 0x54
 8003fdc:	2200      	movs	r2, #0
 8003fde:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8003fe0:	9801      	ldr	r0, [sp, #4]
 8003fe2:	b005      	add	sp, #20
 8003fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8003fe6:	46bb      	mov	fp, r7
 8003fe8:	46b2      	mov	sl, r6
 8003fea:	46a9      	mov	r9, r5
 8003fec:	46a0      	mov	r8, r4
 8003fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	4832      	ldr	r0, [pc, #200]	@ (80040bc <HAL_ADCEx_Calibration_Start+0x18c>)
    calibration_factor_accumulated /= calibration_index;
 8003ff4:	08e9      	lsrs	r1, r5, #3
 8003ff6:	4002      	ands	r2, r0
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	4302      	orrs	r2, r0
 8003ffc:	609a      	str	r2, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003ffe:	2280      	movs	r2, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8004000:	691d      	ldr	r5, [r3, #16]
 8004002:	05d2      	lsls	r2, r2, #23
 8004004:	4295      	cmp	r5, r2
 8004006:	d218      	bcs.n	800403a <HAL_ADCEx_Calibration_Start+0x10a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8004008:	25f0      	movs	r5, #240	@ 0xf0
 800400a:	4a2e      	ldr	r2, [pc, #184]	@ (80040c4 <HAL_ADCEx_Calibration_Start+0x194>)
 800400c:	03ad      	lsls	r5, r5, #14
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	402a      	ands	r2, r5
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8004012:	25e0      	movs	r5, #224	@ 0xe0
 8004014:	036d      	lsls	r5, r5, #13
 8004016:	42aa      	cmp	r2, r5
 8004018:	d30f      	bcc.n	800403a <HAL_ADCEx_Calibration_Start+0x10a>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800401a:	0c92      	lsrs	r2, r2, #18
 800401c:	3a03      	subs	r2, #3
 800401e:	4090      	lsls	r0, r2
 8004020:	9003      	str	r0, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 8004022:	9a03      	ldr	r2, [sp, #12]
 8004024:	0852      	lsrs	r2, r2, #1
 8004026:	9203      	str	r2, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 8004028:	9a03      	ldr	r2, [sp, #12]
 800402a:	2a00      	cmp	r2, #0
 800402c:	d005      	beq.n	800403a <HAL_ADCEx_Calibration_Start+0x10a>
          delay_cpu_cycles--;
 800402e:	9a03      	ldr	r2, [sp, #12]
 8004030:	3a01      	subs	r2, #1
 8004032:	9203      	str	r2, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 8004034:	9a03      	ldr	r2, [sp, #12]
 8004036:	2a00      	cmp	r2, #0
 8004038:	d1f9      	bne.n	800402e <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 800403a:	22b4      	movs	r2, #180	@ 0xb4
 800403c:	207f      	movs	r0, #127	@ 0x7f
 800403e:	589d      	ldr	r5, [r3, r2]
 8004040:	4385      	bics	r5, r0
 8004042:	430d      	orrs	r5, r1
 8004044:	509d      	str	r5, [r3, r2]
  MODIFY_REG(ADCx->CR,
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	491c      	ldr	r1, [pc, #112]	@ (80040bc <HAL_ADCEx_Calibration_Start+0x18c>)
 800404a:	400a      	ands	r2, r1
 800404c:	2102      	movs	r1, #2
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004052:	f7ff facb 	bl	80035ec <HAL_GetTick>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004056:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004058:	0005      	movs	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	07d2      	lsls	r2, r2, #31
 800405e:	d519      	bpl.n	8004094 <HAL_ADCEx_Calibration_Start+0x164>
 8004060:	2301      	movs	r3, #1
 8004062:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004064:	f7ff fac2 	bl	80035ec <HAL_GetTick>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004068:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800406a:	1b40      	subs	r0, r0, r5
 800406c:	2802      	cmp	r0, #2
 800406e:	d90d      	bls.n	800408c <HAL_ADCEx_Calibration_Start+0x15c>
 8004070:	2201      	movs	r2, #1
 8004072:	6899      	ldr	r1, [r3, #8]
 8004074:	420a      	tst	r2, r1
 8004076:	d009      	beq.n	800408c <HAL_ADCEx_Calibration_Start+0x15c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004078:	2110      	movs	r1, #16
 800407a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800407c:	430b      	orrs	r3, r1
 800407e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004080:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004082:	4313      	orrs	r3, r2
 8004084:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	e7a9      	b.n	8003fe0 <HAL_ADCEx_Calibration_Start+0xb0>
 800408c:	4641      	mov	r1, r8
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	4211      	tst	r1, r2
 8004092:	d1e7      	bne.n	8004064 <HAL_ADCEx_Calibration_Start+0x134>
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004094:	465f      	mov	r7, fp
 8004096:	490c      	ldr	r1, [pc, #48]	@ (80040c8 <HAL_ADCEx_Calibration_Start+0x198>)
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004098:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800409a:	400f      	ands	r7, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800409c:	4317      	orrs	r7, r2
    ADC_STATE_CLR_SET(hadc->State,
 800409e:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80040a0:	60df      	str	r7, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80040a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040a4:	4393      	bics	r3, r2
 80040a6:	3a02      	subs	r2, #2
 80040a8:	4313      	orrs	r3, r2
 80040aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80040ac:	e795      	b.n	8003fda <HAL_ADCEx_Calibration_Start+0xaa>
  __HAL_LOCK(hadc);
 80040ae:	2302      	movs	r3, #2
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	e795      	b.n	8003fe0 <HAL_ADCEx_Calibration_Start+0xb0>
 80040b4:	fffffefd 	.word	0xfffffefd
 80040b8:	ffff7ffc 	.word	0xffff7ffc
 80040bc:	7fffffe8 	.word	0x7fffffe8
 80040c0:	0002f1ff 	.word	0x0002f1ff
 80040c4:	40012708 	.word	0x40012708
 80040c8:	00008003 	.word	0x00008003

080040cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80040cc:	4770      	bx	lr
 80040ce:	46c0      	nop			@ (mov r8, r8)

080040d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80040d0:	4770      	bx	lr
 80040d2:	46c0      	nop			@ (mov r8, r8)

080040d4 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80040d4:	4770      	bx	lr
 80040d6:	46c0      	nop			@ (mov r8, r8)

080040d8 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040d8:	22ff      	movs	r2, #255	@ 0xff
 80040da:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040dc:	b510      	push	{r4, lr}
 80040de:	0014      	movs	r4, r2
 80040e0:	4003      	ands	r3, r0
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040e6:	0189      	lsls	r1, r1, #6
 80040e8:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040ea:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040ec:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80040ee:	2800      	cmp	r0, #0
 80040f0:	db0b      	blt.n	800410a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <HAL_NVIC_SetPriority+0x4c>)
 80040f4:	21c0      	movs	r1, #192	@ 0xc0
 80040f6:	469c      	mov	ip, r3
 80040f8:	0880      	lsrs	r0, r0, #2
 80040fa:	0080      	lsls	r0, r0, #2
 80040fc:	4460      	add	r0, ip
 80040fe:	0089      	lsls	r1, r1, #2
 8004100:	5843      	ldr	r3, [r0, r1]
 8004102:	4023      	ands	r3, r4
 8004104:	4313      	orrs	r3, r2
 8004106:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8004108:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800410a:	230f      	movs	r3, #15
 800410c:	4906      	ldr	r1, [pc, #24]	@ (8004128 <HAL_NVIC_SetPriority+0x50>)
 800410e:	4003      	ands	r3, r0
 8004110:	468c      	mov	ip, r1
 8004112:	3b08      	subs	r3, #8
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4463      	add	r3, ip
 800411a:	69d9      	ldr	r1, [r3, #28]
 800411c:	400c      	ands	r4, r1
 800411e:	4314      	orrs	r4, r2
 8004120:	61dc      	str	r4, [r3, #28]
 8004122:	e7f1      	b.n	8004108 <HAL_NVIC_SetPriority+0x30>
 8004124:	e000e100 	.word	0xe000e100
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800412c:	2800      	cmp	r0, #0
 800412e:	db05      	blt.n	800413c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004130:	221f      	movs	r2, #31
 8004132:	2301      	movs	r3, #1
 8004134:	4002      	ands	r2, r0
 8004136:	4093      	lsls	r3, r2
 8004138:	4a01      	ldr	r2, [pc, #4]	@ (8004140 <HAL_NVIC_EnableIRQ+0x14>)
 800413a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800413c:	4770      	bx	lr
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	e000e100 	.word	0xe000e100

08004144 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004144:	2800      	cmp	r0, #0
 8004146:	db0a      	blt.n	800415e <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004148:	221f      	movs	r2, #31
 800414a:	2301      	movs	r3, #1
 800414c:	4002      	ands	r2, r0
 800414e:	4093      	lsls	r3, r2
 8004150:	2280      	movs	r2, #128	@ 0x80
 8004152:	4903      	ldr	r1, [pc, #12]	@ (8004160 <HAL_NVIC_DisableIRQ+0x1c>)
 8004154:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004156:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800415a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800415e:	4770      	bx	lr
 8004160:	e000e100 	.word	0xe000e100

08004164 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004164:	2280      	movs	r2, #128	@ 0x80
 8004166:	1e43      	subs	r3, r0, #1
 8004168:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800416a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800416c:	4293      	cmp	r3, r2
 800416e:	d20e      	bcs.n	800418e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004170:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004172:	4a07      	ldr	r2, [pc, #28]	@ (8004190 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004174:	4807      	ldr	r0, [pc, #28]	@ (8004194 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004176:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004178:	6a03      	ldr	r3, [r0, #32]
 800417a:	0609      	lsls	r1, r1, #24
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	0a1b      	lsrs	r3, r3, #8
 8004180:	430b      	orrs	r3, r1
 8004182:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004184:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004186:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004188:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418a:	3307      	adds	r3, #7
 800418c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800418e:	4770      	bx	lr
 8004190:	e000e010 	.word	0xe000e010
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	46c6      	mov	lr, r8
 800419c:	0004      	movs	r4, r0
 800419e:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d060      	beq.n	8004266 <HAL_DMA_Init+0xce>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041a4:	6805      	ldr	r5, [r0, #0]
 80041a6:	4b31      	ldr	r3, [pc, #196]	@ (800426c <HAL_DMA_Init+0xd4>)
 80041a8:	2114      	movs	r1, #20
 80041aa:	18e8      	adds	r0, r5, r3
 80041ac:	f7fb ffaa 	bl	8000104 <__udivsi3>
 80041b0:	0083      	lsls	r3, r0, #2
 80041b2:	6423      	str	r3, [r4, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041b4:	2202      	movs	r2, #2
 80041b6:	2325      	movs	r3, #37	@ 0x25
 80041b8:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004270 <HAL_DMA_Init+0xd8>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80041be:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041c0:	4013      	ands	r3, r2
 80041c2:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80041c4:	68e3      	ldr	r3, [r4, #12]
 80041c6:	6921      	ldr	r1, [r4, #16]
 80041c8:	4333      	orrs	r3, r6
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6961      	ldr	r1, [r4, #20]
 80041ce:	682a      	ldr	r2, [r5, #0]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	69a1      	ldr	r1, [r4, #24]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	69e1      	ldr	r1, [r4, #28]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6a21      	ldr	r1, [r4, #32]
 80041dc:	430b      	orrs	r3, r1
 80041de:	4313      	orrs	r3, r2
 80041e0:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041e2:	4b24      	ldr	r3, [pc, #144]	@ (8004274 <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041e4:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041e6:	469c      	mov	ip, r3
 80041e8:	4460      	add	r0, ip
 80041ea:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041ec:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041ee:	4b22      	ldr	r3, [pc, #136]	@ (8004278 <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041f0:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041f2:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041f4:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041f6:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041f8:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041fa:	f7fb ff83 	bl	8000104 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041fe:	231f      	movs	r3, #31
 8004200:	2201      	movs	r2, #1
 8004202:	4003      	ands	r3, r0
 8004204:	0010      	movs	r0, r2
 8004206:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004208:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800420a:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800420c:	01db      	lsls	r3, r3, #7
 800420e:	429e      	cmp	r6, r3
 8004210:	d01f      	beq.n	8004252 <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004212:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004214:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004216:	6861      	ldr	r1, [r4, #4]
 8004218:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800421a:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800421c:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800421e:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004220:	2903      	cmp	r1, #3
 8004222:	d81b      	bhi.n	800425c <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004224:	4915      	ldr	r1, [pc, #84]	@ (800427c <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004226:	4816      	ldr	r0, [pc, #88]	@ (8004280 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004228:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800422a:	3b01      	subs	r3, #1
 800422c:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800422e:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004230:	0089      	lsls	r1, r1, #2
 8004232:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004234:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004236:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004238:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800423a:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800423e:	2225      	movs	r2, #37	@ 0x25
 8004240:	2101      	movs	r1, #1
  return HAL_OK;
 8004242:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004244:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004246:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004248:	3a01      	subs	r2, #1
 800424a:	54a3      	strb	r3, [r4, r2]
}
 800424c:	bc80      	pop	{r7}
 800424e:	46b8      	mov	r8, r7
 8004250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004252:	2300      	movs	r3, #0
 8004254:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004256:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004258:	4643      	mov	r3, r8
 800425a:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004260:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004262:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004264:	e7ea      	b.n	800423c <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 8004266:	2001      	movs	r0, #1
 8004268:	e7f0      	b.n	800424c <HAL_DMA_Init+0xb4>
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	bffdfff8 	.word	0xbffdfff8
 8004270:	ffff800f 	.word	0xffff800f
 8004274:	10008200 	.word	0x10008200
 8004278:	40020880 	.word	0x40020880
 800427c:	1000823f 	.word	0x1000823f
 8004280:	40020940 	.word	0x40020940

08004284 <HAL_DMA_Start_IT>:
{
 8004284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004286:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 8004288:	2424      	movs	r4, #36	@ 0x24
{
 800428a:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 800428c:	5d05      	ldrb	r5, [r0, r4]
 800428e:	2d01      	cmp	r5, #1
 8004290:	d04f      	beq.n	8004332 <HAL_DMA_Start_IT+0xae>
 8004292:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8004294:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 8004296:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 8004298:	5d85      	ldrb	r5, [r0, r6]
 800429a:	b2ef      	uxtb	r7, r5
 800429c:	2d01      	cmp	r5, #1
 800429e:	d007      	beq.n	80042b0 <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80042a4:	2300      	movs	r3, #0
 80042a6:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 80042a8:	2001      	movs	r0, #1
}
 80042aa:	bc80      	pop	{r7}
 80042ac:	46b8      	mov	r8, r7
 80042ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80042b0:	3c22      	subs	r4, #34	@ 0x22
 80042b2:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b4:	2400      	movs	r4, #0
 80042b6:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80042b8:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ba:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 80042bc:	6825      	ldr	r5, [r4, #0]
 80042be:	43bd      	bics	r5, r7
 80042c0:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042c2:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 80042c4:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80042c6:	6d06      	ldr	r6, [r0, #80]	@ 0x50
 80042c8:	2e00      	cmp	r6, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042cc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80042ce:	6d87      	ldr	r7, [r0, #88]	@ 0x58
 80042d0:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80042d2:	4d1f      	ldr	r5, [pc, #124]	@ (8004350 <HAL_DMA_Start_IT+0xcc>)
 80042d4:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 80042d6:	46ac      	mov	ip, r5
 80042d8:	686d      	ldr	r5, [r5, #4]
 80042da:	46a8      	mov	r8, r5
 80042dc:	251c      	movs	r5, #28
 80042de:	402f      	ands	r7, r5
 80042e0:	3d1b      	subs	r5, #27
 80042e2:	40bd      	lsls	r5, r7
 80042e4:	4647      	mov	r7, r8
 80042e6:	433d      	orrs	r5, r7
 80042e8:	4667      	mov	r7, ip
 80042ea:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80042ec:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ee:	6883      	ldr	r3, [r0, #8]
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d020      	beq.n	8004336 <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 80042f4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80042f6:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80042f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01e      	beq.n	800433c <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042fe:	220e      	movs	r2, #14
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	4313      	orrs	r3, r2
 8004304:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004306:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004308:	6813      	ldr	r3, [r2, #0]
 800430a:	03db      	lsls	r3, r3, #15
 800430c:	d504      	bpl.n	8004318 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	6811      	ldr	r1, [r2, #0]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	430b      	orrs	r3, r1
 8004316:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004318:	2e00      	cmp	r6, #0
 800431a:	d004      	beq.n	8004326 <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800431c:	2380      	movs	r3, #128	@ 0x80
 800431e:	6832      	ldr	r2, [r6, #0]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4313      	orrs	r3, r2
 8004324:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8004326:	2201      	movs	r2, #1
 8004328:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800432a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800432c:	4313      	orrs	r3, r2
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	e7bb      	b.n	80042aa <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8004332:	2002      	movs	r0, #2
 8004334:	e7b9      	b.n	80042aa <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8004336:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004338:	60e1      	str	r1, [r4, #12]
 800433a:	e7dd      	b.n	80042f8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800433c:	2204      	movs	r2, #4
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	4393      	bics	r3, r2
 8004342:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	3206      	adds	r2, #6
 8004348:	4313      	orrs	r3, r2
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	e7db      	b.n	8004306 <HAL_DMA_Start_IT+0x82>
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	40020000 	.word	0x40020000

08004354 <HAL_DMA_Abort>:
{
 8004354:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8004356:	2800      	cmp	r0, #0
 8004358:	d032      	beq.n	80043c0 <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800435a:	2325      	movs	r3, #37	@ 0x25
 800435c:	5cc3      	ldrb	r3, [r0, r3]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d129      	bne.n	80043b6 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004362:	210e      	movs	r1, #14
 8004364:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004366:	4c17      	ldr	r4, [pc, #92]	@ (80043c4 <HAL_DMA_Abort+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004368:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800436a:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800436c:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800436e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004370:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004372:	680b      	ldr	r3, [r1, #0]
 8004374:	4023      	ands	r3, r4
 8004376:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004378:	2301      	movs	r3, #1
 800437a:	6811      	ldr	r1, [r2, #0]
 800437c:	4399      	bics	r1, r3
 800437e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004380:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004382:	4911      	ldr	r1, [pc, #68]	@ (80043c8 <HAL_DMA_Abort+0x74>)
 8004384:	4032      	ands	r2, r6
 8004386:	4093      	lsls	r3, r2
 8004388:	684d      	ldr	r5, [r1, #4]
 800438a:	432b      	orrs	r3, r5
 800438c:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800438e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004390:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8004392:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004394:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4022      	ands	r2, r4
 800439e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043a0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80043a2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80043a4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80043a6:	2325      	movs	r3, #37	@ 0x25
 80043a8:	2201      	movs	r2, #1
 80043aa:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80043ac:	2200      	movs	r2, #0
 80043ae:	3b01      	subs	r3, #1
 80043b0:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80043b2:	2000      	movs	r0, #0
}
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b6:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80043b8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ba:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80043bc:	3320      	adds	r3, #32
 80043be:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80043c0:	2001      	movs	r0, #1
 80043c2:	e7f7      	b.n	80043b4 <HAL_DMA_Abort+0x60>
 80043c4:	fffffeff 	.word	0xfffffeff
 80043c8:	40020000 	.word	0x40020000

080043cc <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043cc:	2325      	movs	r3, #37	@ 0x25
{
 80043ce:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043d0:	5cc3      	ldrb	r3, [r0, r3]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d003      	beq.n	80043de <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043d6:	2304      	movs	r3, #4
 80043d8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80043da:	2001      	movs	r0, #1
}
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043de:	210e      	movs	r1, #14
 80043e0:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80043e2:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043e4:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043e6:	4c15      	ldr	r4, [pc, #84]	@ (800443c <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043e8:	438b      	bics	r3, r1
 80043ea:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80043ec:	2301      	movs	r3, #1
 80043ee:	6811      	ldr	r1, [r2, #0]
 80043f0:	4399      	bics	r1, r3
 80043f2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043f4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80043f6:	680a      	ldr	r2, [r1, #0]
 80043f8:	4022      	ands	r2, r4
 80043fa:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80043fc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80043fe:	4910      	ldr	r1, [pc, #64]	@ (8004440 <HAL_DMA_Abort_IT+0x74>)
 8004400:	4032      	ands	r2, r6
 8004402:	4093      	lsls	r3, r2
 8004404:	684d      	ldr	r5, [r1, #4]
 8004406:	432b      	orrs	r3, r5
 8004408:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800440a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800440c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800440e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004410:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4022      	ands	r2, r4
 800441a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800441c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800441e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004420:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004422:	2325      	movs	r3, #37	@ 0x25
 8004424:	2201      	movs	r2, #1
 8004426:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8004428:	2200      	movs	r2, #0
 800442a:	3b01      	subs	r3, #1
 800442c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800442e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004430:	2b00      	cmp	r3, #0
 8004432:	d000      	beq.n	8004436 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8004434:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2000      	movs	r0, #0
 8004438:	e7d0      	b.n	80043dc <HAL_DMA_Abort_IT+0x10>
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	fffffeff 	.word	0xfffffeff
 8004440:	40020000 	.word	0x40020000

08004444 <HAL_DMA_IRQHandler>:
{
 8004444:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004446:	211c      	movs	r1, #28
 8004448:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 800444a:	4b2b      	ldr	r3, [pc, #172]	@ (80044f8 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 800444c:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 800444e:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004450:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8004452:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004454:	400b      	ands	r3, r1
 8004456:	0021      	movs	r1, r4
 8004458:	4099      	lsls	r1, r3
 800445a:	420a      	tst	r2, r1
 800445c:	d010      	beq.n	8004480 <HAL_DMA_IRQHandler+0x3c>
 800445e:	422c      	tst	r4, r5
 8004460:	d00e      	beq.n	8004480 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004462:	6833      	ldr	r3, [r6, #0]
 8004464:	069b      	lsls	r3, r3, #26
 8004466:	d402      	bmi.n	800446e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004468:	6833      	ldr	r3, [r6, #0]
 800446a:	43a3      	bics	r3, r4
 800446c:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800446e:	4b22      	ldr	r3, [pc, #136]	@ (80044f8 <HAL_DMA_IRQHandler+0xb4>)
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4311      	orrs	r1, r2
 8004474:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004476:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004478:	2b00      	cmp	r3, #0
 800447a:	d000      	beq.n	800447e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800447c:	4798      	blx	r3
}
 800447e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004480:	2402      	movs	r4, #2
 8004482:	0021      	movs	r1, r4
 8004484:	4099      	lsls	r1, r3
 8004486:	420a      	tst	r2, r1
 8004488:	d017      	beq.n	80044ba <HAL_DMA_IRQHandler+0x76>
 800448a:	422c      	tst	r4, r5
 800448c:	d015      	beq.n	80044ba <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800448e:	6833      	ldr	r3, [r6, #0]
 8004490:	069b      	lsls	r3, r3, #26
 8004492:	d406      	bmi.n	80044a2 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004494:	220a      	movs	r2, #10
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	4393      	bics	r3, r2
 800449a:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800449c:	2325      	movs	r3, #37	@ 0x25
 800449e:	3a09      	subs	r2, #9
 80044a0:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80044a2:	4b15      	ldr	r3, [pc, #84]	@ (80044f8 <HAL_DMA_IRQHandler+0xb4>)
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4311      	orrs	r1, r2
 80044a8:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80044aa:	2200      	movs	r2, #0
 80044ac:	2324      	movs	r3, #36	@ 0x24
 80044ae:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80044b0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0e3      	beq.n	800447e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80044b6:	4798      	blx	r3
  return;
 80044b8:	e7e1      	b.n	800447e <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044ba:	2108      	movs	r1, #8
 80044bc:	000c      	movs	r4, r1
 80044be:	409c      	lsls	r4, r3
 80044c0:	4222      	tst	r2, r4
 80044c2:	d0dc      	beq.n	800447e <HAL_DMA_IRQHandler+0x3a>
 80044c4:	4229      	tst	r1, r5
 80044c6:	d0da      	beq.n	800447e <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c8:	6832      	ldr	r2, [r6, #0]
 80044ca:	3106      	adds	r1, #6
 80044cc:	438a      	bics	r2, r1
 80044ce:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80044d0:	2201      	movs	r2, #1
 80044d2:	0015      	movs	r5, r2
 80044d4:	409d      	lsls	r5, r3
 80044d6:	002b      	movs	r3, r5
 80044d8:	4907      	ldr	r1, [pc, #28]	@ (80044f8 <HAL_DMA_IRQHandler+0xb4>)
 80044da:	684c      	ldr	r4, [r1, #4]
 80044dc:	4323      	orrs	r3, r4
 80044de:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80044e0:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044e2:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80044e4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80044e6:	2200      	movs	r2, #0
 80044e8:	3b01      	subs	r3, #1
 80044ea:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80044ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0c5      	beq.n	800447e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80044f2:	4798      	blx	r3
  return;
 80044f4:	e7c3      	b.n	800447e <HAL_DMA_IRQHandler+0x3a>
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	40020000 	.word	0x40020000

080044fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fe:	46de      	mov	lr, fp
 8004500:	4657      	mov	r7, sl
 8004502:	464e      	mov	r6, r9
 8004504:	4645      	mov	r5, r8
 8004506:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004508:	680a      	ldr	r2, [r1, #0]
{
 800450a:	468b      	mov	fp, r1
 800450c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800450e:	2a00      	cmp	r2, #0
 8004510:	d06a      	beq.n	80045e8 <HAL_GPIO_Init+0xec>
 8004512:	21a0      	movs	r1, #160	@ 0xa0
  uint32_t position = 0x00u;
 8004514:	2300      	movs	r3, #0
 8004516:	05c9      	lsls	r1, r1, #23
 8004518:	4288      	cmp	r0, r1
 800451a:	d100      	bne.n	800451e <HAL_GPIO_Init+0x22>
 800451c:	e0c5      	b.n	80046aa <HAL_GPIO_Init+0x1ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800451e:	2101      	movs	r1, #1
 8004520:	4099      	lsls	r1, r3
 8004522:	468c      	mov	ip, r1
 8004524:	4011      	ands	r1, r2
 8004526:	468a      	mov	sl, r1

    if (iocurrent != 0x00u)
 8004528:	4661      	mov	r1, ip
 800452a:	420a      	tst	r2, r1
 800452c:	d058      	beq.n	80045e0 <HAL_GPIO_Init+0xe4>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800452e:	2503      	movs	r5, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004530:	4659      	mov	r1, fp
 8004532:	005e      	lsls	r6, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004534:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004536:	684c      	ldr	r4, [r1, #4]
 8004538:	2103      	movs	r1, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800453a:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800453c:	4021      	ands	r1, r4
 800453e:	1e4f      	subs	r7, r1, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004540:	9501      	str	r5, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004542:	2f01      	cmp	r7, #1
 8004544:	d957      	bls.n	80045f6 <HAL_GPIO_Init+0xfa>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004546:	2903      	cmp	r1, #3
 8004548:	d000      	beq.n	800454c <HAL_GPIO_Init+0x50>
 800454a:	e15f      	b.n	800480c <HAL_GPIO_Init+0x310>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800454c:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 800454e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004550:	9d01      	ldr	r5, [sp, #4]
 8004552:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004554:	4329      	orrs	r1, r5
      GPIOx->MODER = temp;
 8004556:	6001      	str	r1, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004558:	21c0      	movs	r1, #192	@ 0xc0
 800455a:	0289      	lsls	r1, r1, #10
 800455c:	420c      	tst	r4, r1
 800455e:	d03f      	beq.n	80045e0 <HAL_GPIO_Init+0xe4>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004560:	2603      	movs	r6, #3
 8004562:	270f      	movs	r7, #15
 8004564:	4db9      	ldr	r5, [pc, #740]	@ (800484c <HAL_GPIO_Init+0x350>)
 8004566:	401e      	ands	r6, r3
 8004568:	46ac      	mov	ip, r5
 800456a:	00f6      	lsls	r6, r6, #3
 800456c:	40b7      	lsls	r7, r6
        temp = EXTI->EXTICR[position >> 2u];
 800456e:	0899      	lsrs	r1, r3, #2
 8004570:	0089      	lsls	r1, r1, #2
 8004572:	4461      	add	r1, ip
 8004574:	6e0d      	ldr	r5, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004576:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004578:	4fb5      	ldr	r7, [pc, #724]	@ (8004850 <HAL_GPIO_Init+0x354>)
 800457a:	42b8      	cmp	r0, r7
 800457c:	d100      	bne.n	8004580 <HAL_GPIO_Init+0x84>
 800457e:	e090      	b.n	80046a2 <HAL_GPIO_Init+0x1a6>
 8004580:	4fb4      	ldr	r7, [pc, #720]	@ (8004854 <HAL_GPIO_Init+0x358>)
 8004582:	42b8      	cmp	r0, r7
 8004584:	d100      	bne.n	8004588 <HAL_GPIO_Init+0x8c>
 8004586:	e07b      	b.n	8004680 <HAL_GPIO_Init+0x184>
 8004588:	4fb3      	ldr	r7, [pc, #716]	@ (8004858 <HAL_GPIO_Init+0x35c>)
 800458a:	42b8      	cmp	r0, r7
 800458c:	d100      	bne.n	8004590 <HAL_GPIO_Init+0x94>
 800458e:	e139      	b.n	8004804 <HAL_GPIO_Init+0x308>
 8004590:	2705      	movs	r7, #5
 8004592:	40b7      	lsls	r7, r6
 8004594:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004596:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8004598:	660d      	str	r5, [r1, #96]	@ 0x60
        temp &= ~(iocurrent);
 800459a:	4655      	mov	r5, sl
        temp = EXTI->RTSR1;
 800459c:	49ab      	ldr	r1, [pc, #684]	@ (800484c <HAL_GPIO_Init+0x350>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800459e:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 80045a0:	43ed      	mvns	r5, r5
        temp = EXTI->RTSR1;
 80045a2:	6809      	ldr	r1, [r1, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045a4:	4234      	tst	r4, r6
 80045a6:	d000      	beq.n	80045aa <HAL_GPIO_Init+0xae>
 80045a8:	e078      	b.n	800469c <HAL_GPIO_Init+0x1a0>
        temp &= ~(iocurrent);
 80045aa:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80045ac:	4ea7      	ldr	r6, [pc, #668]	@ (800484c <HAL_GPIO_Init+0x350>)
 80045ae:	6031      	str	r1, [r6, #0]

        temp = EXTI->FTSR1;
 80045b0:	6871      	ldr	r1, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045b2:	2680      	movs	r6, #128	@ 0x80
 80045b4:	03b6      	lsls	r6, r6, #14
 80045b6:	4234      	tst	r4, r6
 80045b8:	d16d      	bne.n	8004696 <HAL_GPIO_Init+0x19a>
        temp &= ~(iocurrent);
 80045ba:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80045bc:	4ea3      	ldr	r6, [pc, #652]	@ (800484c <HAL_GPIO_Init+0x350>)
 80045be:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045c0:	2184      	movs	r1, #132	@ 0x84
 80045c2:	5871      	ldr	r1, [r6, r1]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045c4:	03a6      	lsls	r6, r4, #14
 80045c6:	d463      	bmi.n	8004690 <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 80045c8:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80045ca:	2684      	movs	r6, #132	@ 0x84
 80045cc:	4f9f      	ldr	r7, [pc, #636]	@ (800484c <HAL_GPIO_Init+0x350>)
 80045ce:	51b9      	str	r1, [r7, r6]

        temp = EXTI->IMR1;
 80045d0:	2180      	movs	r1, #128	@ 0x80
 80045d2:	5879      	ldr	r1, [r7, r1]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045d4:	03e4      	lsls	r4, r4, #15
 80045d6:	d457      	bmi.n	8004688 <HAL_GPIO_Init+0x18c>
        temp &= ~(iocurrent);
 80045d8:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80045da:	2480      	movs	r4, #128	@ 0x80
 80045dc:	4d9b      	ldr	r5, [pc, #620]	@ (800484c <HAL_GPIO_Init+0x350>)
 80045de:	5129      	str	r1, [r5, r4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045e0:	0011      	movs	r1, r2
      }
    }

    position++;
 80045e2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045e4:	40d9      	lsrs	r1, r3
 80045e6:	d19a      	bne.n	800451e <HAL_GPIO_Init+0x22>
  }
}
 80045e8:	b005      	add	sp, #20
 80045ea:	bcf0      	pop	{r4, r5, r6, r7}
 80045ec:	46bb      	mov	fp, r7
 80045ee:	46b2      	mov	sl, r6
 80045f0:	46a9      	mov	r9, r5
 80045f2:	46a0      	mov	r8, r4
 80045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80045f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045f8:	402f      	ands	r7, r5
 80045fa:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045fc:	465f      	mov	r7, fp
 80045fe:	68ff      	ldr	r7, [r7, #12]
 8004600:	40b7      	lsls	r7, r6
 8004602:	46b8      	mov	r8, r7
 8004604:	464f      	mov	r7, r9
 8004606:	4645      	mov	r5, r8
 8004608:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800460a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800460c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800460e:	002f      	movs	r7, r5
 8004610:	4665      	mov	r5, ip
 8004612:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004614:	0925      	lsrs	r5, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004616:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004618:	002f      	movs	r7, r5
 800461a:	2501      	movs	r5, #1
 800461c:	402f      	ands	r7, r5
 800461e:	409f      	lsls	r7, r3
 8004620:	46bc      	mov	ip, r7
 8004622:	4647      	mov	r7, r8
 8004624:	4665      	mov	r5, ip
 8004626:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 8004628:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800462a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800462c:	002f      	movs	r7, r5
 800462e:	9d01      	ldr	r5, [sp, #4]
 8004630:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004632:	465d      	mov	r5, fp
 8004634:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004636:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004638:	002f      	movs	r7, r5
 800463a:	40b7      	lsls	r7, r6
 800463c:	46bc      	mov	ip, r7
 800463e:	4647      	mov	r7, r8
 8004640:	4665      	mov	r5, ip
 8004642:	432f      	orrs	r7, r5
        GPIOx->PUPDR = temp;
 8004644:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004646:	2902      	cmp	r1, #2
 8004648:	d000      	beq.n	800464c <HAL_GPIO_Init+0x150>
 800464a:	e77f      	b.n	800454c <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 800464c:	08dd      	lsrs	r5, r3, #3
 800464e:	00ad      	lsls	r5, r5, #2
 8004650:	46ac      	mov	ip, r5
 8004652:	4484      	add	ip, r0
 8004654:	4665      	mov	r5, ip
 8004656:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004658:	2507      	movs	r5, #7
 800465a:	401d      	ands	r5, r3
 800465c:	00ad      	lsls	r5, r5, #2
 800465e:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8004660:	9702      	str	r7, [sp, #8]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004662:	250f      	movs	r5, #15
 8004664:	4647      	mov	r7, r8
 8004666:	40bd      	lsls	r5, r7
 8004668:	9f02      	ldr	r7, [sp, #8]
 800466a:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800466c:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800466e:	9702      	str	r7, [sp, #8]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004670:	4647      	mov	r7, r8
 8004672:	692d      	ldr	r5, [r5, #16]
 8004674:	40bd      	lsls	r5, r7
 8004676:	9f02      	ldr	r7, [sp, #8]
 8004678:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 800467a:	4665      	mov	r5, ip
 800467c:	622f      	str	r7, [r5, #32]
 800467e:	e765      	b.n	800454c <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004680:	2702      	movs	r7, #2
 8004682:	40b7      	lsls	r7, r6
 8004684:	433d      	orrs	r5, r7
 8004686:	e786      	b.n	8004596 <HAL_GPIO_Init+0x9a>
          temp |= iocurrent;
 8004688:	4654      	mov	r4, sl
 800468a:	430c      	orrs	r4, r1
 800468c:	0021      	movs	r1, r4
 800468e:	e7a4      	b.n	80045da <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8004690:	4656      	mov	r6, sl
 8004692:	4331      	orrs	r1, r6
 8004694:	e799      	b.n	80045ca <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 8004696:	4656      	mov	r6, sl
 8004698:	4331      	orrs	r1, r6
 800469a:	e78f      	b.n	80045bc <HAL_GPIO_Init+0xc0>
          temp |= iocurrent;
 800469c:	4656      	mov	r6, sl
 800469e:	4331      	orrs	r1, r6
 80046a0:	e784      	b.n	80045ac <HAL_GPIO_Init+0xb0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80046a2:	2701      	movs	r7, #1
 80046a4:	40b7      	lsls	r7, r6
 80046a6:	433d      	orrs	r5, r7
 80046a8:	e775      	b.n	8004596 <HAL_GPIO_Init+0x9a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046aa:	2101      	movs	r1, #1
 80046ac:	468a      	mov	sl, r1
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ae:	4659      	mov	r1, fp
 80046b0:	9102      	str	r1, [sp, #8]
 80046b2:	e040      	b.n	8004736 <HAL_GPIO_Init+0x23a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046b4:	2903      	cmp	r1, #3
 80046b6:	d000      	beq.n	80046ba <HAL_GPIO_Init+0x1be>
 80046b8:	e0b5      	b.n	8004826 <HAL_GPIO_Init+0x32a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046ba:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 80046bc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046be:	9d01      	ldr	r5, [sp, #4]
 80046c0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046c2:	4329      	orrs	r1, r5
      GPIOx->MODER = temp;
 80046c4:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046c6:	21c0      	movs	r1, #192	@ 0xc0
 80046c8:	0289      	lsls	r1, r1, #10
 80046ca:	420c      	tst	r4, r1
 80046cc:	d02e      	beq.n	800472c <HAL_GPIO_Init+0x230>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80046ce:	2603      	movs	r6, #3
 80046d0:	270f      	movs	r7, #15
 80046d2:	4d5e      	ldr	r5, [pc, #376]	@ (800484c <HAL_GPIO_Init+0x350>)
 80046d4:	401e      	ands	r6, r3
 80046d6:	46ac      	mov	ip, r5
 80046d8:	00f6      	lsls	r6, r6, #3
 80046da:	40b7      	lsls	r7, r6
        temp = EXTI->EXTICR[position >> 2u];
 80046dc:	0899      	lsrs	r1, r3, #2
 80046de:	0089      	lsls	r1, r1, #2
 80046e0:	4461      	add	r1, ip
 80046e2:	6e0d      	ldr	r5, [r1, #96]	@ 0x60
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046e4:	2680      	movs	r6, #128	@ 0x80
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80046e6:	43bd      	bics	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80046e8:	660d      	str	r5, [r1, #96]	@ 0x60
        temp = EXTI->RTSR1;
 80046ea:	4661      	mov	r1, ip
        temp &= ~(iocurrent);
 80046ec:	465d      	mov	r5, fp
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ee:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 80046f0:	43ed      	mvns	r5, r5
        temp = EXTI->RTSR1;
 80046f2:	6809      	ldr	r1, [r1, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046f4:	4234      	tst	r4, r6
 80046f6:	d000      	beq.n	80046fa <HAL_GPIO_Init+0x1fe>
 80046f8:	e081      	b.n	80047fe <HAL_GPIO_Init+0x302>
        temp &= ~(iocurrent);
 80046fa:	4029      	ands	r1, r5
        EXTI->RTSR1 = temp;
 80046fc:	4e53      	ldr	r6, [pc, #332]	@ (800484c <HAL_GPIO_Init+0x350>)
 80046fe:	6031      	str	r1, [r6, #0]
        temp = EXTI->FTSR1;
 8004700:	6871      	ldr	r1, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004702:	02a6      	lsls	r6, r4, #10
 8004704:	d478      	bmi.n	80047f8 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 8004706:	4029      	ands	r1, r5
        EXTI->FTSR1 = temp;
 8004708:	4e50      	ldr	r6, [pc, #320]	@ (800484c <HAL_GPIO_Init+0x350>)
 800470a:	6071      	str	r1, [r6, #4]
        temp = EXTI->EMR1;
 800470c:	2184      	movs	r1, #132	@ 0x84
 800470e:	5871      	ldr	r1, [r6, r1]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004710:	03a6      	lsls	r6, r4, #14
 8004712:	d46e      	bmi.n	80047f2 <HAL_GPIO_Init+0x2f6>
        temp &= ~(iocurrent);
 8004714:	4029      	ands	r1, r5
        EXTI->EMR1 = temp;
 8004716:	2684      	movs	r6, #132	@ 0x84
 8004718:	4f4c      	ldr	r7, [pc, #304]	@ (800484c <HAL_GPIO_Init+0x350>)
 800471a:	51b9      	str	r1, [r7, r6]
        temp = EXTI->IMR1;
 800471c:	2180      	movs	r1, #128	@ 0x80
 800471e:	5879      	ldr	r1, [r7, r1]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004720:	03e4      	lsls	r4, r4, #15
 8004722:	d463      	bmi.n	80047ec <HAL_GPIO_Init+0x2f0>
        temp &= ~(iocurrent);
 8004724:	4029      	ands	r1, r5
        EXTI->IMR1 = temp;
 8004726:	2480      	movs	r4, #128	@ 0x80
 8004728:	4d48      	ldr	r5, [pc, #288]	@ (800484c <HAL_GPIO_Init+0x350>)
 800472a:	5129      	str	r1, [r5, r4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800472c:	0011      	movs	r1, r2
    position++;
 800472e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004730:	40d9      	lsrs	r1, r3
 8004732:	d100      	bne.n	8004736 <HAL_GPIO_Init+0x23a>
 8004734:	e758      	b.n	80045e8 <HAL_GPIO_Init+0xec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004736:	4651      	mov	r1, sl
 8004738:	4099      	lsls	r1, r3
 800473a:	468c      	mov	ip, r1
 800473c:	4011      	ands	r1, r2
 800473e:	468b      	mov	fp, r1
    if (iocurrent != 0x00u)
 8004740:	4661      	mov	r1, ip
 8004742:	4211      	tst	r1, r2
 8004744:	d0f2      	beq.n	800472c <HAL_GPIO_Init+0x230>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004746:	2503      	movs	r5, #3
 8004748:	005e      	lsls	r6, r3, #1
 800474a:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800474c:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800474e:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004750:	684c      	ldr	r4, [r1, #4]
 8004752:	2103      	movs	r1, #3
 8004754:	4021      	ands	r1, r4
 8004756:	1e4f      	subs	r7, r1, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004758:	9501      	str	r5, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800475a:	2f01      	cmp	r7, #1
 800475c:	d8aa      	bhi.n	80046b4 <HAL_GPIO_Init+0x1b8>
        temp = GPIOx->OSPEEDR;
 800475e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004760:	402f      	ands	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004762:	9d02      	ldr	r5, [sp, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004764:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004766:	68ef      	ldr	r7, [r5, #12]
 8004768:	40b7      	lsls	r7, r6
 800476a:	46b8      	mov	r8, r7
 800476c:	464f      	mov	r7, r9
 800476e:	4645      	mov	r5, r8
 8004770:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8004772:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004774:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004776:	002f      	movs	r7, r5
 8004778:	4665      	mov	r5, ip
 800477a:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800477c:	0925      	lsrs	r5, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800477e:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004780:	002f      	movs	r7, r5
 8004782:	4655      	mov	r5, sl
 8004784:	402f      	ands	r7, r5
 8004786:	409f      	lsls	r7, r3
 8004788:	46bc      	mov	ip, r7
 800478a:	4647      	mov	r7, r8
 800478c:	4665      	mov	r5, ip
 800478e:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 8004790:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004792:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004794:	002f      	movs	r7, r5
 8004796:	9d01      	ldr	r5, [sp, #4]
 8004798:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800479a:	9d02      	ldr	r5, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800479c:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800479e:	68ad      	ldr	r5, [r5, #8]
 80047a0:	002f      	movs	r7, r5
 80047a2:	40b7      	lsls	r7, r6
 80047a4:	46bc      	mov	ip, r7
 80047a6:	4647      	mov	r7, r8
 80047a8:	4665      	mov	r5, ip
 80047aa:	432f      	orrs	r7, r5
        GPIOx->PUPDR = temp;
 80047ac:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ae:	2902      	cmp	r1, #2
 80047b0:	d183      	bne.n	80046ba <HAL_GPIO_Init+0x1be>
        temp = GPIOx->AFR[position >> 3u];
 80047b2:	08dd      	lsrs	r5, r3, #3
 80047b4:	00ad      	lsls	r5, r5, #2
 80047b6:	46ac      	mov	ip, r5
 80047b8:	25a0      	movs	r5, #160	@ 0xa0
 80047ba:	05ed      	lsls	r5, r5, #23
 80047bc:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047be:	44c4      	add	ip, r8
        temp = GPIOx->AFR[position >> 3u];
 80047c0:	4665      	mov	r5, ip
 80047c2:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047c4:	2507      	movs	r5, #7
 80047c6:	401d      	ands	r5, r3
 80047c8:	00ad      	lsls	r5, r5, #2
 80047ca:	46a9      	mov	r9, r5
        temp = GPIOx->AFR[position >> 3u];
 80047cc:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047ce:	250f      	movs	r5, #15
 80047d0:	464f      	mov	r7, r9
 80047d2:	40bd      	lsls	r5, r7
 80047d4:	9f03      	ldr	r7, [sp, #12]
 80047d6:	43af      	bics	r7, r5
 80047d8:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047da:	464f      	mov	r7, r9
 80047dc:	9d02      	ldr	r5, [sp, #8]
 80047de:	692d      	ldr	r5, [r5, #16]
 80047e0:	40bd      	lsls	r5, r7
 80047e2:	9f03      	ldr	r7, [sp, #12]
 80047e4:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80047e6:	4665      	mov	r5, ip
 80047e8:	622f      	str	r7, [r5, #32]
 80047ea:	e766      	b.n	80046ba <HAL_GPIO_Init+0x1be>
          temp |= iocurrent;
 80047ec:	465c      	mov	r4, fp
 80047ee:	4321      	orrs	r1, r4
 80047f0:	e799      	b.n	8004726 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 80047f2:	465e      	mov	r6, fp
 80047f4:	4331      	orrs	r1, r6
 80047f6:	e78e      	b.n	8004716 <HAL_GPIO_Init+0x21a>
          temp |= iocurrent;
 80047f8:	465e      	mov	r6, fp
 80047fa:	4331      	orrs	r1, r6
 80047fc:	e784      	b.n	8004708 <HAL_GPIO_Init+0x20c>
          temp |= iocurrent;
 80047fe:	465e      	mov	r6, fp
 8004800:	4331      	orrs	r1, r6
 8004802:	e77b      	b.n	80046fc <HAL_GPIO_Init+0x200>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004804:	2703      	movs	r7, #3
 8004806:	40b7      	lsls	r7, r6
 8004808:	433d      	orrs	r5, r7
 800480a:	e6c4      	b.n	8004596 <HAL_GPIO_Init+0x9a>
 800480c:	002f      	movs	r7, r5
        temp = GPIOx->PUPDR;
 800480e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004810:	403d      	ands	r5, r7
 8004812:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004814:	465d      	mov	r5, fp
 8004816:	68ad      	ldr	r5, [r5, #8]
 8004818:	40b5      	lsls	r5, r6
 800481a:	46ac      	mov	ip, r5
 800481c:	4645      	mov	r5, r8
 800481e:	4667      	mov	r7, ip
 8004820:	433d      	orrs	r5, r7
        GPIOx->PUPDR = temp;
 8004822:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004824:	e692      	b.n	800454c <HAL_GPIO_Init+0x50>
 8004826:	002f      	movs	r7, r5
        temp = GPIOx->PUPDR;
 8004828:	25a0      	movs	r5, #160	@ 0xa0
 800482a:	05ed      	lsls	r5, r5, #23
 800482c:	46a8      	mov	r8, r5
 800482e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004830:	403d      	ands	r5, r7
 8004832:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004834:	9d02      	ldr	r5, [sp, #8]
 8004836:	68ad      	ldr	r5, [r5, #8]
 8004838:	40b5      	lsls	r5, r6
 800483a:	46ac      	mov	ip, r5
 800483c:	464d      	mov	r5, r9
 800483e:	4667      	mov	r7, ip
 8004840:	433d      	orrs	r5, r7
 8004842:	46ac      	mov	ip, r5
        GPIOx->PUPDR = temp;
 8004844:	4645      	mov	r5, r8
 8004846:	4667      	mov	r7, ip
 8004848:	60ef      	str	r7, [r5, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484a:	e736      	b.n	80046ba <HAL_GPIO_Init+0x1be>
 800484c:	40021800 	.word	0x40021800
 8004850:	50000400 	.word	0x50000400
 8004854:	50000800 	.word	0x50000800
 8004858:	50000c00 	.word	0x50000c00

0800485c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800485c:	6900      	ldr	r0, [r0, #16]
 800485e:	4008      	ands	r0, r1
 8004860:	1e43      	subs	r3, r0, #1
 8004862:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004864:	b2c0      	uxtb	r0, r0
}
 8004866:	4770      	bx	lr

08004868 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004868:	2a00      	cmp	r2, #0
 800486a:	d001      	beq.n	8004870 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800486c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800486e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004870:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8004872:	e7fc      	b.n	800486e <HAL_GPIO_WritePin+0x6>

08004874 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 8004876:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004878:	68da      	ldr	r2, [r3, #12]
{
 800487a:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800487c:	4210      	tst	r0, r2
 800487e:	d104      	bne.n	800488a <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004880:	4b08      	ldr	r3, [pc, #32]	@ (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	4222      	tst	r2, r4
 8004886:	d107      	bne.n	8004898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8004888:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800488a:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800488c:	f7fd fcfe 	bl	800228c <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004890:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	4222      	tst	r2, r4
 8004896:	d0f7      	beq.n	8004888 <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004898:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800489a:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800489c:	f7fd fcda 	bl	8002254 <HAL_GPIO_EXTI_Falling_Callback>
}
 80048a0:	e7f2      	b.n	8004888 <HAL_GPIO_EXTI_IRQHandler+0x14>
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	40021800 	.word	0x40021800

080048a8 <HAL_LPTIM_DirectionDownCallback>:
/**
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
 80048a8:	4770      	bx	lr
 80048aa:	46c0      	nop			@ (mov r8, r8)

080048ac <HAL_LPTIM_CompareMatchCallback>:
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
 80048ac:	4770      	bx	lr
 80048ae:	46c0      	nop			@ (mov r8, r8)

080048b0 <HAL_LPTIM_AutoReloadMatchCallback>:
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
 80048b0:	4770      	bx	lr
 80048b2:	46c0      	nop			@ (mov r8, r8)

080048b4 <HAL_LPTIM_TriggerCallback>:
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
 80048b4:	4770      	bx	lr
 80048b6:	46c0      	nop			@ (mov r8, r8)

080048b8 <HAL_LPTIM_CompareWriteCallback>:
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
 80048b8:	4770      	bx	lr
 80048ba:	46c0      	nop			@ (mov r8, r8)

080048bc <HAL_LPTIM_AutoReloadWriteCallback>:
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
 80048bc:	4770      	bx	lr
 80048be:	46c0      	nop			@ (mov r8, r8)

080048c0 <HAL_LPTIM_DirectionUpCallback>:
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
 80048c0:	4770      	bx	lr
 80048c2:	46c0      	nop			@ (mov r8, r8)

080048c4 <HAL_LPTIM_Init>:
{
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	1e04      	subs	r4, r0, #0
  if (hlptim == NULL)
 80048c8:	d062      	beq.n	8004990 <HAL_LPTIM_Init+0xcc>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80048ca:	2336      	movs	r3, #54	@ 0x36
 80048cc:	5cc3      	ldrb	r3, [r0, r3]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d114      	bne.n	80048fe <HAL_LPTIM_Init+0x3a>
    hlptim->Lock = HAL_UNLOCKED;
 80048d4:	3335      	adds	r3, #53	@ 0x35
 80048d6:	54c2      	strb	r2, [r0, r3]
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 80048d8:	4b30      	ldr	r3, [pc, #192]	@ (800499c <HAL_LPTIM_Init+0xd8>)
 80048da:	6403      	str	r3, [r0, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 80048dc:	4b30      	ldr	r3, [pc, #192]	@ (80049a0 <HAL_LPTIM_Init+0xdc>)
 80048de:	6443      	str	r3, [r0, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 80048e0:	4b30      	ldr	r3, [pc, #192]	@ (80049a4 <HAL_LPTIM_Init+0xe0>)
 80048e2:	6483      	str	r3, [r0, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 80048e4:	4b30      	ldr	r3, [pc, #192]	@ (80049a8 <HAL_LPTIM_Init+0xe4>)
 80048e6:	64c3      	str	r3, [r0, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 80048e8:	4b30      	ldr	r3, [pc, #192]	@ (80049ac <HAL_LPTIM_Init+0xe8>)
 80048ea:	6503      	str	r3, [r0, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 80048ec:	4b30      	ldr	r3, [pc, #192]	@ (80049b0 <HAL_LPTIM_Init+0xec>)
 80048ee:	6543      	str	r3, [r0, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 80048f0:	4b30      	ldr	r3, [pc, #192]	@ (80049b4 <HAL_LPTIM_Init+0xf0>)
 80048f2:	6583      	str	r3, [r0, #88]	@ 0x58
    if (hlptim->MspInitCallback == NULL)
 80048f4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d04c      	beq.n	8004994 <HAL_LPTIM_Init+0xd0>
    hlptim->MspInitCallback(hlptim);
 80048fa:	0020      	movs	r0, r4
 80048fc:	4798      	blx	r3
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80048fe:	2336      	movs	r3, #54	@ 0x36
 8004900:	2202      	movs	r2, #2
 8004902:	54e2      	strb	r2, [r4, r3]
  tmpcfgr = hlptim->Instance->CFGR;
 8004904:	6820      	ldr	r0, [r4, #0]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004906:	6865      	ldr	r5, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 8004908:	68c3      	ldr	r3, [r0, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800490a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800490c:	2d01      	cmp	r5, #1
 800490e:	d038      	beq.n	8004982 <HAL_LPTIM_Init+0xbe>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004910:	2280      	movs	r2, #128	@ 0x80
 8004912:	0412      	lsls	r2, r2, #16
 8004914:	4296      	cmp	r6, r2
 8004916:	d034      	beq.n	8004982 <HAL_LPTIM_Init+0xbe>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004918:	6961      	ldr	r1, [r4, #20]
 800491a:	4a27      	ldr	r2, [pc, #156]	@ (80049b8 <HAL_LPTIM_Init+0xf4>)
 800491c:	4291      	cmp	r1, r2
 800491e:	d001      	beq.n	8004924 <HAL_LPTIM_Init+0x60>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004920:	4a26      	ldr	r2, [pc, #152]	@ (80049bc <HAL_LPTIM_Init+0xf8>)
 8004922:	4013      	ands	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004924:	4a26      	ldr	r2, [pc, #152]	@ (80049c0 <HAL_LPTIM_Init+0xfc>)
              hlptim->Init.UpdateMode      |
 8004926:	68a7      	ldr	r7, [r4, #8]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004928:	401a      	ands	r2, r3
              hlptim->Init.UpdateMode      |
 800492a:	002b      	movs	r3, r5
 800492c:	4333      	orrs	r3, r6
 800492e:	433b      	orrs	r3, r7
 8004930:	6a27      	ldr	r7, [r4, #32]
 8004932:	433b      	orrs	r3, r7
 8004934:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8004936:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004938:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800493a:	2d00      	cmp	r5, #0
 800493c:	d018      	beq.n	8004970 <HAL_LPTIM_Init+0xac>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800493e:	2d01      	cmp	r5, #1
 8004940:	d11a      	bne.n	8004978 <HAL_LPTIM_Init+0xb4>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004942:	68e2      	ldr	r2, [r4, #12]
 8004944:	6925      	ldr	r5, [r4, #16]
 8004946:	432a      	orrs	r2, r5
 8004948:	4313      	orrs	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800494a:	4a1b      	ldr	r2, [pc, #108]	@ (80049b8 <HAL_LPTIM_Init+0xf4>)
 800494c:	4291      	cmp	r1, r2
 800494e:	d004      	beq.n	800495a <HAL_LPTIM_Init+0x96>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004950:	69a2      	ldr	r2, [r4, #24]
 8004952:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 8004954:	69e2      	ldr	r2, [r4, #28]
 8004956:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004958:	430b      	orrs	r3, r1
  if (hlptim->Instance == LPTIM1)
 800495a:	4a1a      	ldr	r2, [pc, #104]	@ (80049c4 <HAL_LPTIM_Init+0x100>)
  hlptim->Instance->CFGR = tmpcfgr;
 800495c:	60c3      	str	r3, [r0, #12]
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800495e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if (hlptim->Instance == LPTIM1)
 8004960:	4290      	cmp	r0, r2
 8004962:	d011      	beq.n	8004988 <HAL_LPTIM_Init+0xc4>
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004964:	6243      	str	r3, [r0, #36]	@ 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004966:	2336      	movs	r3, #54	@ 0x36
 8004968:	2201      	movs	r2, #1
  return HAL_OK;
 800496a:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800496c:	54e2      	strb	r2, [r4, r3]
}
 800496e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004970:	69e2      	ldr	r2, [r4, #28]
 8004972:	6925      	ldr	r5, [r4, #16]
 8004974:	432a      	orrs	r2, r5
 8004976:	4313      	orrs	r3, r2
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004978:	2280      	movs	r2, #128	@ 0x80
 800497a:	0412      	lsls	r2, r2, #16
 800497c:	4296      	cmp	r6, r2
 800497e:	d1e4      	bne.n	800494a <HAL_LPTIM_Init+0x86>
 8004980:	e7df      	b.n	8004942 <HAL_LPTIM_Init+0x7e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004982:	221e      	movs	r2, #30
 8004984:	4393      	bics	r3, r2
 8004986:	e7c7      	b.n	8004918 <HAL_LPTIM_Init+0x54>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004988:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800498a:	4313      	orrs	r3, r2
 800498c:	6243      	str	r3, [r0, #36]	@ 0x24
 800498e:	e7ea      	b.n	8004966 <HAL_LPTIM_Init+0xa2>
    return HAL_ERROR;
 8004990:	2001      	movs	r0, #1
 8004992:	e7ec      	b.n	800496e <HAL_LPTIM_Init+0xaa>
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8004994:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <HAL_LPTIM_Init+0x104>)
 8004996:	6383      	str	r3, [r0, #56]	@ 0x38
 8004998:	e7af      	b.n	80048fa <HAL_LPTIM_Init+0x36>
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	080048ad 	.word	0x080048ad
 80049a0:	080048b1 	.word	0x080048b1
 80049a4:	080048b5 	.word	0x080048b5
 80049a8:	080048b9 	.word	0x080048b9
 80049ac:	080048bd 	.word	0x080048bd
 80049b0:	080048c1 	.word	0x080048c1
 80049b4:	080048a9 	.word	0x080048a9
 80049b8:	0000ffff 	.word	0x0000ffff
 80049bc:	ffff1f3f 	.word	0xffff1f3f
 80049c0:	ff19f1fe 	.word	0xff19f1fe
 80049c4:	40007c00 	.word	0x40007c00
 80049c8:	08002d7d 	.word	0x08002d7d

080049cc <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80049cc:	2201      	movs	r2, #1
 80049ce:	6803      	ldr	r3, [r0, #0]
{
 80049d0:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80049d2:	6819      	ldr	r1, [r3, #0]
{
 80049d4:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80049d6:	420a      	tst	r2, r1
 80049d8:	d002      	beq.n	80049e0 <HAL_LPTIM_IRQHandler+0x14>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80049da:	6899      	ldr	r1, [r3, #8]
 80049dc:	420a      	tst	r2, r1
 80049de:	d14c      	bne.n	8004a7a <HAL_LPTIM_IRQHandler+0xae>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80049e0:	2202      	movs	r2, #2
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	420a      	tst	r2, r1
 80049e6:	d002      	beq.n	80049ee <HAL_LPTIM_IRQHandler+0x22>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	420a      	tst	r2, r1
 80049ec:	d13f      	bne.n	8004a6e <HAL_LPTIM_IRQHandler+0xa2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80049ee:	2204      	movs	r2, #4
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	420a      	tst	r2, r1
 80049f4:	d002      	beq.n	80049fc <HAL_LPTIM_IRQHandler+0x30>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80049f6:	6899      	ldr	r1, [r3, #8]
 80049f8:	420a      	tst	r2, r1
 80049fa:	d132      	bne.n	8004a62 <HAL_LPTIM_IRQHandler+0x96>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80049fc:	2208      	movs	r2, #8
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	420a      	tst	r2, r1
 8004a02:	d002      	beq.n	8004a0a <HAL_LPTIM_IRQHandler+0x3e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004a04:	6899      	ldr	r1, [r3, #8]
 8004a06:	420a      	tst	r2, r1
 8004a08:	d125      	bne.n	8004a56 <HAL_LPTIM_IRQHandler+0x8a>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	6819      	ldr	r1, [r3, #0]
 8004a0e:	420a      	tst	r2, r1
 8004a10:	d002      	beq.n	8004a18 <HAL_LPTIM_IRQHandler+0x4c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004a12:	6899      	ldr	r1, [r3, #8]
 8004a14:	420a      	tst	r2, r1
 8004a16:	d118      	bne.n	8004a4a <HAL_LPTIM_IRQHandler+0x7e>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004a18:	2220      	movs	r2, #32
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	420a      	tst	r2, r1
 8004a1e:	d002      	beq.n	8004a26 <HAL_LPTIM_IRQHandler+0x5a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004a20:	6899      	ldr	r1, [r3, #8]
 8004a22:	420a      	tst	r2, r1
 8004a24:	d10b      	bne.n	8004a3e <HAL_LPTIM_IRQHandler+0x72>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004a26:	2240      	movs	r2, #64	@ 0x40
 8004a28:	6819      	ldr	r1, [r3, #0]
 8004a2a:	420a      	tst	r2, r1
 8004a2c:	d006      	beq.n	8004a3c <HAL_LPTIM_IRQHandler+0x70>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004a2e:	6899      	ldr	r1, [r3, #8]
 8004a30:	420a      	tst	r2, r1
 8004a32:	d003      	beq.n	8004a3c <HAL_LPTIM_IRQHandler+0x70>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004a34:	605a      	str	r2, [r3, #4]
      hlptim->DirectionDownCallback(hlptim);
 8004a36:	0020      	movs	r0, r4
 8004a38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a3a:	4798      	blx	r3
}
 8004a3c:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004a3e:	605a      	str	r2, [r3, #4]
      hlptim->DirectionUpCallback(hlptim);
 8004a40:	0020      	movs	r0, r4
 8004a42:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004a44:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	e7ed      	b.n	8004a26 <HAL_LPTIM_IRQHandler+0x5a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004a4a:	605a      	str	r2, [r3, #4]
      hlptim->AutoReloadWriteCallback(hlptim);
 8004a4c:	0020      	movs	r0, r4
 8004a4e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004a50:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	e7e0      	b.n	8004a18 <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004a56:	605a      	str	r2, [r3, #4]
      hlptim->CompareWriteCallback(hlptim);
 8004a58:	0020      	movs	r0, r4
 8004a5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004a5c:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	e7d3      	b.n	8004a0a <HAL_LPTIM_IRQHandler+0x3e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004a62:	605a      	str	r2, [r3, #4]
      hlptim->TriggerCallback(hlptim);
 8004a64:	0020      	movs	r0, r4
 8004a66:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004a68:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	e7c6      	b.n	80049fc <HAL_LPTIM_IRQHandler+0x30>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004a6e:	605a      	str	r2, [r3, #4]
      hlptim->AutoReloadMatchCallback(hlptim);
 8004a70:	0020      	movs	r0, r4
 8004a72:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004a74:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	e7b9      	b.n	80049ee <HAL_LPTIM_IRQHandler+0x22>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004a7a:	605a      	str	r2, [r3, #4]
      hlptim->CompareMatchCallback(hlptim);
 8004a7c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004a7e:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	e7ad      	b.n	80049e0 <HAL_LPTIM_IRQHandler+0x14>

08004a84 <HAL_LPTIM_RegisterCallback>:
{
 8004a84:	0003      	movs	r3, r0
 8004a86:	b530      	push	{r4, r5, lr}
  if (pCallback == NULL)
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	d019      	beq.n	8004ac0 <HAL_LPTIM_RegisterCallback+0x3c>
  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8004a8c:	2536      	movs	r5, #54	@ 0x36
 8004a8e:	5d44      	ldrb	r4, [r0, r5]
 8004a90:	b2e0      	uxtb	r0, r4
 8004a92:	2c01      	cmp	r4, #1
 8004a94:	d008      	beq.n	8004aa8 <HAL_LPTIM_RegisterCallback+0x24>
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004a96:	5d5c      	ldrb	r4, [r3, r5]
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004a9a:	2c00      	cmp	r4, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
    switch (CallbackID)
 8004a9e:	2900      	cmp	r1, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_LPTIM_RegisterCallback+0x36>
 8004aa2:	2901      	cmp	r1, #1
 8004aa4:	d006      	beq.n	8004ab4 <HAL_LPTIM_RegisterCallback+0x30>
}
 8004aa6:	bd30      	pop	{r4, r5, pc}
    switch (CallbackID)
 8004aa8:	2908      	cmp	r1, #8
 8004aaa:	d8fc      	bhi.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
 8004aac:	4810      	ldr	r0, [pc, #64]	@ (8004af0 <HAL_LPTIM_RegisterCallback+0x6c>)
 8004aae:	0089      	lsls	r1, r1, #2
 8004ab0:	5841      	ldr	r1, [r0, r1]
 8004ab2:	468f      	mov	pc, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2000      	movs	r0, #0
        hlptim->MspDeInitCallback = pCallback;
 8004ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8004ab8:	e7f5      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2000      	movs	r0, #0
        hlptim->MspInitCallback = pCallback;
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8004abe:	e7f2      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
    return HAL_ERROR;
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	e7f0      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2000      	movs	r0, #0
        hlptim->AutoReloadMatchCallback = pCallback;
 8004ac6:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8004ac8:	e7ed      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004aca:	2000      	movs	r0, #0
        hlptim->TriggerCallback = pCallback;
 8004acc:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8004ace:	e7ea      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004ad0:	2000      	movs	r0, #0
        hlptim->CompareWriteCallback = pCallback;
 8004ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004ad4:	e7e7      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2000      	movs	r0, #0
        hlptim->AutoReloadWriteCallback = pCallback;
 8004ad8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004ada:	e7e4      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2000      	movs	r0, #0
        hlptim->DirectionDownCallback = pCallback;
 8004ade:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004ae0:	e7e1      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2000      	movs	r0, #0
        hlptim->CompareMatchCallback = pCallback;
 8004ae4:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8004ae6:	e7de      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004ae8:	2000      	movs	r0, #0
        hlptim->DirectionUpCallback = pCallback;
 8004aea:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004aec:	e7db      	b.n	8004aa6 <HAL_LPTIM_RegisterCallback+0x22>
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	0800870c 	.word	0x0800870c

08004af4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	4645      	mov	r5, r8
 8004af8:	46de      	mov	lr, fp
 8004afa:	4657      	mov	r7, sl
 8004afc:	464e      	mov	r6, r9
 8004afe:	b5e0      	push	{r5, r6, r7, lr}
 8004b00:	0005      	movs	r5, r0
 8004b02:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b04:	f3ef 8310 	mrs	r3, PRIMASK
 8004b08:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f383 8810 	msr	PRIMASK, r3
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004b10:	4b69      	ldr	r3, [pc, #420]	@ (8004cb8 <LPTIM_Disable+0x1c4>)
 8004b12:	6804      	ldr	r4, [r0, #0]
 8004b14:	429c      	cmp	r4, r3
 8004b16:	d100      	bne.n	8004b1a <LPTIM_Disable+0x26>
 8004b18:	e079      	b.n	8004c0e <LPTIM_Disable+0x11a>
 8004b1a:	4b68      	ldr	r3, [pc, #416]	@ (8004cbc <LPTIM_Disable+0x1c8>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d02e      	beq.n	8004b7e <LPTIM_Disable+0x8a>
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004b20:	68a3      	ldr	r3, [r4, #8]
 8004b22:	469a      	mov	sl, r3
  tmpCFGR = hlptim->Instance->CFGR;
 8004b24:	68e3      	ldr	r3, [r4, #12]
 8004b26:	4699      	mov	r9, r3
  tmpCMP = hlptim->Instance->CMP;
 8004b28:	6963      	ldr	r3, [r4, #20]
  tmpARR = hlptim->Instance->ARR;
 8004b2a:	69a6      	ldr	r6, [r4, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8004b2c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004b2e:	4690      	mov	r8, r2
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004b30:	001a      	movs	r2, r3
 8004b32:	4332      	orrs	r2, r6
 8004b34:	d00f      	beq.n	8004b56 <LPTIM_Disable+0x62>
#endif /* LPTIM2 */
      default:
        break;
    }

    if (tmpCMP != 0UL)
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d000      	beq.n	8004b3c <LPTIM_Disable+0x48>
 8004b3a:	e093      	b.n	8004c64 <LPTIM_Disable+0x170>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
    }

    if (tmpARR != 0UL)
 8004b3c:	001f      	movs	r7, r3
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	d000      	beq.n	8004b44 <LPTIM_Disable+0x50>
 8004b42:	e0b6      	b.n	8004cb2 <LPTIM_Disable+0x1be>

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004b44:	4b5d      	ldr	r3, [pc, #372]	@ (8004cbc <LPTIM_Disable+0x1c8>)
 8004b46:	429c      	cmp	r4, r3
 8004b48:	d105      	bne.n	8004b56 <LPTIM_Disable+0x62>
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
        break;
#if defined(LPTIM2)
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004b4a:	4a5d      	ldr	r2, [pc, #372]	@ (8004cc0 <LPTIM_Disable+0x1cc>)
 8004b4c:	495d      	ldr	r1, [pc, #372]	@ (8004cc4 <LPTIM_Disable+0x1d0>)
 8004b4e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004b50:	400b      	ands	r3, r1
 8004b52:	433b      	orrs	r3, r7
 8004b54:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004b56:	2201      	movs	r2, #1
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	4393      	bics	r3, r2
 8004b5c:	6123      	str	r3, [r4, #16]
  hlptim->Instance->IER = tmpIER;
 8004b5e:	4653      	mov	r3, sl
 8004b60:	60a3      	str	r3, [r4, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004b62:	464b      	mov	r3, r9
 8004b64:	60e3      	str	r3, [r4, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8004b66:	4643      	mov	r3, r8
 8004b68:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b6a:	9b01      	ldr	r3, [sp, #4]
 8004b6c:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004b70:	b003      	add	sp, #12
 8004b72:	bcf0      	pop	{r4, r5, r6, r7}
 8004b74:	46bb      	mov	fp, r7
 8004b76:	46b2      	mov	sl, r6
 8004b78:	46a9      	mov	r9, r5
 8004b7a:	46a0      	mov	r8, r4
 8004b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b7e:	4a50      	ldr	r2, [pc, #320]	@ (8004cc0 <LPTIM_Disable+0x1cc>)
 8004b80:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpIER = hlptim->Instance->IER;
 8004b82:	68a3      	ldr	r3, [r4, #8]
 8004b84:	469a      	mov	sl, r3
  tmpCFGR = hlptim->Instance->CFGR;
 8004b86:	68e3      	ldr	r3, [r4, #12]
 8004b88:	4699      	mov	r9, r3
  tmpCMP = hlptim->Instance->CMP;
 8004b8a:	6963      	ldr	r3, [r4, #20]
  tmpARR = hlptim->Instance->ARR;
 8004b8c:	69a6      	ldr	r6, [r4, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8004b8e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004b90:	4688      	mov	r8, r1
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004b92:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b94:	468c      	mov	ip, r1
 8004b96:	2180      	movs	r1, #128	@ 0x80
 8004b98:	4667      	mov	r7, ip
 8004b9a:	05c9      	lsls	r1, r1, #23
 8004b9c:	4339      	orrs	r1, r7
 8004b9e:	62d1      	str	r1, [r2, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004ba0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ba2:	4f49      	ldr	r7, [pc, #292]	@ (8004cc8 <LPTIM_Disable+0x1d4>)
 8004ba4:	4039      	ands	r1, r7
 8004ba6:	62d1      	str	r1, [r2, #44]	@ 0x2c
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004ba8:	0019      	movs	r1, r3
 8004baa:	4331      	orrs	r1, r6
 8004bac:	d0d3      	beq.n	8004b56 <LPTIM_Disable+0x62>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004bae:	21c0      	movs	r1, #192	@ 0xc0
 8004bb0:	0389      	lsls	r1, r1, #14
 8004bb2:	4008      	ands	r0, r1
 8004bb4:	0007      	movs	r7, r0
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004bb6:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8004bb8:	4842      	ldr	r0, [pc, #264]	@ (8004cc4 <LPTIM_Disable+0x1d0>)
 8004bba:	4001      	ands	r1, r0
 8004bbc:	6551      	str	r1, [r2, #84]	@ 0x54
    if (tmpCMP != 0UL)
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d152      	bne.n	8004c68 <LPTIM_Disable+0x174>
    if (tmpARR != 0UL)
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	d0c1      	beq.n	8004b4a <LPTIM_Disable+0x56>
 8004bc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ccc <LPTIM_Disable+0x1d8>)
 8004bc8:	469b      	mov	fp, r3
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004bca:	2201      	movs	r2, #1
 8004bcc:	6923      	ldr	r3, [r4, #16]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004bce:	4940      	ldr	r1, [pc, #256]	@ (8004cd0 <LPTIM_Disable+0x1dc>)
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	6123      	str	r3, [r4, #16]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004bd4:	465b      	mov	r3, fp
      hlptim->Instance->ARR = tmpARR;
 8004bd6:	61a6      	str	r6, [r4, #24]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	f7fb fa93 	bl	8000104 <__udivsi3>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004bde:	2110      	movs	r1, #16
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004be0:	0143      	lsls	r3, r0, #5
 8004be2:	1a1b      	subs	r3, r3, r0
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	181b      	adds	r3, r3, r0
 8004be8:	00db      	lsls	r3, r3, #3
    count--;
 8004bea:	3b01      	subs	r3, #1
    if (count == 0UL)
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d034      	beq.n	8004c5a <LPTIM_Disable+0x166>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	4211      	tst	r1, r2
 8004bf4:	d0f9      	beq.n	8004bea <LPTIM_Disable+0xf6>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	6063      	str	r3, [r4, #4]
    switch ((uint32_t)hlptim->Instance)
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb8 <LPTIM_Disable+0x1c4>)
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	d1a1      	bne.n	8004b44 <LPTIM_Disable+0x50>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004c00:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc0 <LPTIM_Disable+0x1cc>)
 8004c02:	4934      	ldr	r1, [pc, #208]	@ (8004cd4 <LPTIM_Disable+0x1e0>)
 8004c04:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004c06:	400b      	ands	r3, r1
 8004c08:	433b      	orrs	r3, r7
 8004c0a:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8004c0c:	e7a3      	b.n	8004b56 <LPTIM_Disable+0x62>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc0 <LPTIM_Disable+0x1cc>)
 8004c10:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpIER = hlptim->Instance->IER;
 8004c12:	68a3      	ldr	r3, [r4, #8]
 8004c14:	469a      	mov	sl, r3
  tmpCFGR = hlptim->Instance->CFGR;
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	4699      	mov	r9, r3
  tmpCMP = hlptim->Instance->CMP;
 8004c1a:	6963      	ldr	r3, [r4, #20]
  tmpARR = hlptim->Instance->ARR;
 8004c1c:	69a6      	ldr	r6, [r4, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8004c1e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004c20:	4688      	mov	r8, r1
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004c22:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c24:	468c      	mov	ip, r1
 8004c26:	2180      	movs	r1, #128	@ 0x80
 8004c28:	4667      	mov	r7, ip
 8004c2a:	0609      	lsls	r1, r1, #24
 8004c2c:	4339      	orrs	r1, r7
 8004c2e:	62d1      	str	r1, [r2, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004c30:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c32:	0049      	lsls	r1, r1, #1
 8004c34:	0849      	lsrs	r1, r1, #1
 8004c36:	62d1      	str	r1, [r2, #44]	@ 0x2c
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004c38:	0019      	movs	r1, r3
 8004c3a:	4331      	orrs	r1, r6
 8004c3c:	d100      	bne.n	8004c40 <LPTIM_Disable+0x14c>
 8004c3e:	e78a      	b.n	8004b56 <LPTIM_Disable+0x62>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c40:	21c0      	movs	r1, #192	@ 0xc0
 8004c42:	0309      	lsls	r1, r1, #12
 8004c44:	4008      	ands	r0, r1
 8004c46:	0007      	movs	r7, r0
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004c48:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8004c4a:	4822      	ldr	r0, [pc, #136]	@ (8004cd4 <LPTIM_Disable+0x1e0>)
 8004c4c:	4001      	ands	r1, r0
 8004c4e:	6551      	str	r1, [r2, #84]	@ 0x54
    if (tmpCMP != 0UL)
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <LPTIM_Disable+0x174>
    if (tmpARR != 0UL)
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	d0d3      	beq.n	8004c00 <LPTIM_Disable+0x10c>
 8004c58:	e7b5      	b.n	8004bc6 <LPTIM_Disable+0xd2>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004c5a:	6823      	ldr	r3, [r4, #0]
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	2336      	movs	r3, #54	@ 0x36
 8004c60:	54ea      	strb	r2, [r5, r3]
 8004c62:	e7c8      	b.n	8004bf6 <LPTIM_Disable+0x102>
 8004c64:	2200      	movs	r2, #0
 8004c66:	0017      	movs	r7, r2
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004c68:	2101      	movs	r1, #1
 8004c6a:	6922      	ldr	r2, [r4, #16]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	6122      	str	r2, [r4, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004c70:	6163      	str	r3, [r4, #20]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004c72:	4b16      	ldr	r3, [pc, #88]	@ (8004ccc <LPTIM_Disable+0x1d8>)
 8004c74:	4916      	ldr	r1, [pc, #88]	@ (8004cd0 <LPTIM_Disable+0x1dc>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	469b      	mov	fp, r3
 8004c7a:	f7fb fa43 	bl	8000104 <__udivsi3>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004c7e:	2108      	movs	r1, #8
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004c80:	0143      	lsls	r3, r0, #5
 8004c82:	1a1b      	subs	r3, r3, r0
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	181b      	adds	r3, r3, r0
 8004c88:	00db      	lsls	r3, r3, #3
    count--;
 8004c8a:	3b01      	subs	r3, #1
    if (count == 0UL)
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <LPTIM_Disable+0x1ac>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	4211      	tst	r1, r2
 8004c94:	d0f9      	beq.n	8004c8a <LPTIM_Disable+0x196>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004c96:	2308      	movs	r3, #8
 8004c98:	6063      	str	r3, [r4, #4]
    if (tmpARR != 0UL)
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	d0ad      	beq.n	8004bfa <LPTIM_Disable+0x106>
 8004c9e:	e794      	b.n	8004bca <LPTIM_Disable+0xd6>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004ca0:	6823      	ldr	r3, [r4, #0]
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	2336      	movs	r3, #54	@ 0x36
 8004ca6:	54ea      	strb	r2, [r5, r3]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004ca8:	2308      	movs	r3, #8
 8004caa:	6063      	str	r3, [r4, #4]
    if (tmpARR != 0UL)
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	d0a4      	beq.n	8004bfa <LPTIM_Disable+0x106>
 8004cb0:	e78b      	b.n	8004bca <LPTIM_Disable+0xd6>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	001f      	movs	r7, r3
 8004cb6:	e786      	b.n	8004bc6 <LPTIM_Disable+0xd2>
 8004cb8:	40007c00 	.word	0x40007c00
 8004cbc:	40009400 	.word	0x40009400
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	ffcfffff 	.word	0xffcfffff
 8004cc8:	bfffffff 	.word	0xbfffffff
 8004ccc:	20000440 	.word	0x20000440
 8004cd0:	00004e20 	.word	0x00004e20
 8004cd4:	fff3ffff 	.word	0xfff3ffff

08004cd8 <HAL_LPTIM_SetOnce_Start_IT>:
{
 8004cd8:	b570      	push	{r4, r5, r6, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004cda:	2336      	movs	r3, #54	@ 0x36
{
 8004cdc:	0016      	movs	r6, r2
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004cde:	2202      	movs	r2, #2
 8004ce0:	54c2      	strb	r2, [r0, r3]
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8004ce2:	2380      	movs	r3, #128	@ 0x80
 8004ce4:	6804      	ldr	r4, [r0, #0]
 8004ce6:	035b      	lsls	r3, r3, #13
 8004ce8:	68e2      	ldr	r2, [r4, #12]
{
 8004cea:	0005      	movs	r5, r0
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8004cec:	4313      	orrs	r3, r2
  __HAL_LPTIM_ENABLE(hlptim);
 8004cee:	2201      	movs	r2, #1
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8004cf0:	60e3      	str	r3, [r4, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	6123      	str	r3, [r4, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	6063      	str	r3, [r4, #4]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004cfc:	4b25      	ldr	r3, [pc, #148]	@ (8004d94 <HAL_LPTIM_SetOnce_Start_IT+0xbc>)
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004cfe:	61a1      	str	r1, [r4, #24]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	4925      	ldr	r1, [pc, #148]	@ (8004d98 <HAL_LPTIM_SetOnce_Start_IT+0xc0>)
 8004d04:	f7fb f9fe 	bl	8000104 <__udivsi3>
 8004d08:	0143      	lsls	r3, r0, #5
 8004d0a:	1a1b      	subs	r3, r3, r0
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	181b      	adds	r3, r3, r0
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	001a      	movs	r2, r3
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004d14:	2010      	movs	r0, #16
    count--;
 8004d16:	3a01      	subs	r2, #1
    if (count == 0UL)
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	d037      	beq.n	8004d8c <HAL_LPTIM_SetOnce_Start_IT+0xb4>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004d1c:	6821      	ldr	r1, [r4, #0]
 8004d1e:	4208      	tst	r0, r1
 8004d20:	d0f9      	beq.n	8004d16 <HAL_LPTIM_SetOnce_Start_IT+0x3e>
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004d22:	2208      	movs	r2, #8
 8004d24:	6062      	str	r2, [r4, #4]
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8004d26:	6166      	str	r6, [r4, #20]
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004d28:	2608      	movs	r6, #8
    count--;
 8004d2a:	3b01      	subs	r3, #1
    if (count == 0UL)
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02d      	beq.n	8004d8c <HAL_LPTIM_SetOnce_Start_IT+0xb4>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	4216      	tst	r6, r2
 8004d34:	d0f9      	beq.n	8004d2a <HAL_LPTIM_SetOnce_Start_IT+0x52>
  __HAL_LPTIM_DISABLE(hlptim);
 8004d36:	0028      	movs	r0, r5
 8004d38:	f7ff fedc 	bl	8004af4 <LPTIM_Disable>
  return hlptim->State;
 8004d3c:	2336      	movs	r3, #54	@ 0x36
 8004d3e:	5ceb      	ldrb	r3, [r5, r3]
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d024      	beq.n	8004d8e <HAL_LPTIM_SetOnce_Start_IT+0xb6>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004d44:	2110      	movs	r1, #16
 8004d46:	682b      	ldr	r3, [r5, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8004d4e:	689a      	ldr	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004d50:	390e      	subs	r1, #14
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8004d52:	4332      	orrs	r2, r6
 8004d54:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	3901      	subs	r1, #1
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8004d64:	6969      	ldr	r1, [r5, #20]
 8004d66:	4a0d      	ldr	r2, [pc, #52]	@ (8004d9c <HAL_LPTIM_SetOnce_Start_IT+0xc4>)
 8004d68:	4291      	cmp	r1, r2
 8004d6a:	d003      	beq.n	8004d74 <HAL_LPTIM_SetOnce_Start_IT+0x9c>
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 8004d74:	2101      	movs	r1, #1
  __HAL_LPTIM_START_SINGLE(hlptim);
 8004d76:	2002      	movs	r0, #2
  __HAL_LPTIM_ENABLE(hlptim);
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_START_SINGLE(hlptim);
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	4302      	orrs	r2, r0
 8004d82:	611a      	str	r2, [r3, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004d84:	2336      	movs	r3, #54	@ 0x36
  return HAL_OK;
 8004d86:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004d88:	54e9      	strb	r1, [r5, r3]
}
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004d8c:	6823      	ldr	r3, [r4, #0]
    return HAL_TIMEOUT;
 8004d8e:	2003      	movs	r0, #3
 8004d90:	e7fb      	b.n	8004d8a <HAL_LPTIM_SetOnce_Start_IT+0xb2>
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	20000440 	.word	0x20000440
 8004d98:	00004e20 	.word	0x00004e20
 8004d9c:	0000ffff 	.word	0x0000ffff

08004da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004da0:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004da2:	4c13      	ldr	r4, [pc, #76]	@ (8004df0 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8004da4:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004da6:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004da8:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004daa:	4013      	ands	r3, r2
 8004dac:	4303      	orrs	r3, r0
 8004dae:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4298      	cmp	r0, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8004db8:	0028      	movs	r0, r5
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004df8 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8004dbe:	490f      	ldr	r1, [pc, #60]	@ (8004dfc <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	0058      	lsls	r0, r3, #1
 8004dc4:	18c0      	adds	r0, r0, r3
 8004dc6:	0040      	lsls	r0, r0, #1
 8004dc8:	f7fb f99c 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dcc:	2280      	movs	r2, #128	@ 0x80
 8004dce:	6963      	ldr	r3, [r4, #20]
 8004dd0:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004dd2:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dd4:	4213      	tst	r3, r2
 8004dd6:	d102      	bne.n	8004dde <HAL_PWREx_ControlVoltageScaling+0x3e>
 8004dd8:	e7ee      	b.n	8004db8 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dde:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8004de0:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de2:	4213      	tst	r3, r2
 8004de4:	d1f9      	bne.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8004de6:	2500      	movs	r5, #0
 8004de8:	e7e6      	b.n	8004db8 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8004dea:	2503      	movs	r5, #3
 8004dec:	e7e4      	b.n	8004db8 <HAL_PWREx_ControlVoltageScaling+0x18>
 8004dee:	46c0      	nop			@ (mov r8, r8)
 8004df0:	40007000 	.word	0x40007000
 8004df4:	fffff9ff 	.word	0xfffff9ff
 8004df8:	20000440 	.word	0x20000440
 8004dfc:	000f4240 	.word	0x000f4240

08004e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e02:	46ce      	mov	lr, r9
 8004e04:	4647      	mov	r7, r8
 8004e06:	b580      	push	{r7, lr}
 8004e08:	0004      	movs	r4, r0
 8004e0a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d027      	beq.n	8004e60 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e10:	6803      	ldr	r3, [r0, #0]
 8004e12:	07da      	lsls	r2, r3, #31
 8004e14:	d511      	bpl.n	8004e3a <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e16:	2238      	movs	r2, #56	@ 0x38
 8004e18:	49c0      	ldr	r1, [pc, #768]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004e1a:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e1c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1e:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004e20:	2a10      	cmp	r2, #16
 8004e22:	d100      	bne.n	8004e26 <HAL_RCC_OscConfig+0x26>
 8004e24:	e0cc      	b.n	8004fc0 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e26:	2a08      	cmp	r2, #8
 8004e28:	d000      	beq.n	8004e2c <HAL_RCC_OscConfig+0x2c>
 8004e2a:	e0cd      	b.n	8004fc8 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2c:	4abb      	ldr	r2, [pc, #748]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	0392      	lsls	r2, r2, #14
 8004e32:	d502      	bpl.n	8004e3a <HAL_RCC_OscConfig+0x3a>
 8004e34:	6862      	ldr	r2, [r4, #4]
 8004e36:	2a00      	cmp	r2, #0
 8004e38:	d012      	beq.n	8004e60 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3a:	079a      	lsls	r2, r3, #30
 8004e3c:	d532      	bpl.n	8004ea4 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3e:	2338      	movs	r3, #56	@ 0x38
 8004e40:	4ab6      	ldr	r2, [pc, #728]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004e42:	6891      	ldr	r1, [r2, #8]
 8004e44:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e46:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d100      	bne.n	8004e4e <HAL_RCC_OscConfig+0x4e>
 8004e4c:	e10b      	b.n	8005066 <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d000      	beq.n	8004e54 <HAL_RCC_OscConfig+0x54>
 8004e52:	e10d      	b.n	8005070 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e54:	6813      	ldr	r3, [r2, #0]
 8004e56:	055b      	lsls	r3, r3, #21
 8004e58:	d508      	bpl.n	8004e6c <HAL_RCC_OscConfig+0x6c>
 8004e5a:	68e3      	ldr	r3, [r4, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8004e60:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8004e62:	b003      	add	sp, #12
 8004e64:	bcc0      	pop	{r6, r7}
 8004e66:	46b9      	mov	r9, r7
 8004e68:	46b0      	mov	r8, r6
 8004e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6c:	6851      	ldr	r1, [r2, #4]
 8004e6e:	6963      	ldr	r3, [r4, #20]
 8004e70:	48ab      	ldr	r0, [pc, #684]	@ (8005120 <HAL_RCC_OscConfig+0x320>)
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	4001      	ands	r1, r0
 8004e76:	430b      	orrs	r3, r1
 8004e78:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e7a:	4aa8      	ldr	r2, [pc, #672]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004e7c:	49a9      	ldr	r1, [pc, #676]	@ (8005124 <HAL_RCC_OscConfig+0x324>)
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	400b      	ands	r3, r1
 8004e82:	6921      	ldr	r1, [r4, #16]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004e88:	6813      	ldr	r3, [r2, #0]
 8004e8a:	4aa7      	ldr	r2, [pc, #668]	@ (8005128 <HAL_RCC_OscConfig+0x328>)
 8004e8c:	049b      	lsls	r3, r3, #18
 8004e8e:	0f5b      	lsrs	r3, r3, #29
 8004e90:	40da      	lsrs	r2, r3
 8004e92:	49a6      	ldr	r1, [pc, #664]	@ (800512c <HAL_RCC_OscConfig+0x32c>)
 8004e94:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e96:	4ba6      	ldr	r3, [pc, #664]	@ (8005130 <HAL_RCC_OscConfig+0x330>)
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	f7fe fb61 	bl	8003560 <HAL_InitTick>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d1de      	bne.n	8004e60 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	071a      	lsls	r2, r3, #28
 8004ea6:	d46d      	bmi.n	8004f84 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea8:	075b      	lsls	r3, r3, #29
 8004eaa:	d545      	bpl.n	8004f38 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004eac:	2338      	movs	r3, #56	@ 0x38
 8004eae:	4a9b      	ldr	r2, [pc, #620]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004eb0:	6891      	ldr	r1, [r2, #8]
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d100      	bne.n	8004eba <HAL_RCC_OscConfig+0xba>
 8004eb8:	e0cc      	b.n	8005054 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004eba:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004ebc:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ebe:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004ec0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ec4:	4219      	tst	r1, r3
 8004ec6:	d108      	bne.n	8004eda <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004ec8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004eca:	4319      	orrs	r1, r3
 8004ecc:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8004ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eda:	2780      	movs	r7, #128	@ 0x80
 8004edc:	4e95      	ldr	r6, [pc, #596]	@ (8005134 <HAL_RCC_OscConfig+0x334>)
 8004ede:	007f      	lsls	r7, r7, #1
 8004ee0:	6833      	ldr	r3, [r6, #0]
 8004ee2:	423b      	tst	r3, r7
 8004ee4:	d100      	bne.n	8004ee8 <HAL_RCC_OscConfig+0xe8>
 8004ee6:	e0ff      	b.n	80050e8 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee8:	68a3      	ldr	r3, [r4, #8]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d100      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xf0>
 8004eee:	e0e5      	b.n	80050bc <HAL_RCC_OscConfig+0x2bc>
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d100      	bne.n	8004ef6 <HAL_RCC_OscConfig+0xf6>
 8004ef4:	e1d1      	b.n	800529a <HAL_RCC_OscConfig+0x49a>
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4e88      	ldr	r6, [pc, #544]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004efa:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8004efc:	438a      	bics	r2, r1
 8004efe:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8004f00:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8004f02:	3103      	adds	r1, #3
 8004f04:	438a      	bics	r2, r1
 8004f06:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d000      	beq.n	8004f0e <HAL_RCC_OscConfig+0x10e>
 8004f0c:	e0da      	b.n	80050c4 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8004f0e:	f7fe fb6d 	bl	80035ec <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f12:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8004f14:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f16:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f18:	4d87      	ldr	r5, [pc, #540]	@ (8005138 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f1a:	e005      	b.n	8004f28 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fe fb66 	bl	80035ec <HAL_GetTick>
 8004f20:	1bc0      	subs	r0, r0, r7
 8004f22:	42a8      	cmp	r0, r5
 8004f24:	d900      	bls.n	8004f28 <HAL_RCC_OscConfig+0x128>
 8004f26:	e0ee      	b.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f28:	4642      	mov	r2, r8
 8004f2a:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8004f2c:	421a      	tst	r2, r3
 8004f2e:	d1f5      	bne.n	8004f1c <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8004f30:	464b      	mov	r3, r9
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d100      	bne.n	8004f38 <HAL_RCC_OscConfig+0x138>
 8004f36:	e16a      	b.n	800520e <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f38:	69e3      	ldr	r3, [r4, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d020      	beq.n	8004f80 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3e:	2238      	movs	r2, #56	@ 0x38
 8004f40:	4d76      	ldr	r5, [pc, #472]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004f42:	68a9      	ldr	r1, [r5, #8]
 8004f44:	400a      	ands	r2, r1
 8004f46:	2a10      	cmp	r2, #16
 8004f48:	d100      	bne.n	8004f4c <HAL_RCC_OscConfig+0x14c>
 8004f4a:	e11d      	b.n	8005188 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d100      	bne.n	8004f52 <HAL_RCC_OscConfig+0x152>
 8004f50:	e163      	b.n	800521a <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	4a79      	ldr	r2, [pc, #484]	@ (800513c <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f56:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4013      	ands	r3, r2
 8004f5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f5c:	f7fe fb46 	bl	80035ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f60:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8004f62:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f64:	e005      	b.n	8004f72 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fe fb41 	bl	80035ec <HAL_GetTick>
 8004f6a:	1b00      	subs	r0, r0, r4
 8004f6c:	2802      	cmp	r0, #2
 8004f6e:	d900      	bls.n	8004f72 <HAL_RCC_OscConfig+0x172>
 8004f70:	e0c9      	b.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	4233      	tst	r3, r6
 8004f76:	d1f6      	bne.n	8004f66 <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004f78:	68eb      	ldr	r3, [r5, #12]
 8004f7a:	4a71      	ldr	r2, [pc, #452]	@ (8005140 <HAL_RCC_OscConfig+0x340>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8004f80:	2000      	movs	r0, #0
 8004f82:	e76e      	b.n	8004e62 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f84:	2238      	movs	r2, #56	@ 0x38
 8004f86:	4d65      	ldr	r5, [pc, #404]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004f88:	68a9      	ldr	r1, [r5, #8]
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	2a18      	cmp	r2, #24
 8004f8e:	d043      	beq.n	8005018 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f90:	69a3      	ldr	r3, [r4, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d100      	bne.n	8004f98 <HAL_RCC_OscConfig+0x198>
 8004f96:	e0b8      	b.n	800510a <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8004f98:	2201      	movs	r2, #1
 8004f9a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f9c:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004fa2:	f7fe fb23 	bl	80035ec <HAL_GetTick>
 8004fa6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fa8:	e005      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004faa:	f7fe fb1f 	bl	80035ec <HAL_GetTick>
 8004fae:	1b80      	subs	r0, r0, r6
 8004fb0:	2802      	cmp	r0, #2
 8004fb2:	d900      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x1b6>
 8004fb4:	e0a7      	b.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004fb8:	421f      	tst	r7, r3
 8004fba:	d0f6      	beq.n	8004faa <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	e773      	b.n	8004ea8 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc0:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004fc2:	0789      	lsls	r1, r1, #30
 8004fc4:	d100      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x1c8>
 8004fc6:	e731      	b.n	8004e2c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc8:	2280      	movs	r2, #128	@ 0x80
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	0252      	lsls	r2, r2, #9
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02b      	beq.n	800502a <HAL_RCC_OscConfig+0x22a>
 8004fd2:	21a0      	movs	r1, #160	@ 0xa0
 8004fd4:	02c9      	lsls	r1, r1, #11
 8004fd6:	428b      	cmp	r3, r1
 8004fd8:	d100      	bne.n	8004fdc <HAL_RCC_OscConfig+0x1dc>
 8004fda:	e103      	b.n	80051e4 <HAL_RCC_OscConfig+0x3e4>
 8004fdc:	4d4f      	ldr	r5, [pc, #316]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 8004fde:	4959      	ldr	r1, [pc, #356]	@ (8005144 <HAL_RCC_OscConfig+0x344>)
 8004fe0:	682a      	ldr	r2, [r5, #0]
 8004fe2:	400a      	ands	r2, r1
 8004fe4:	602a      	str	r2, [r5, #0]
 8004fe6:	682a      	ldr	r2, [r5, #0]
 8004fe8:	4957      	ldr	r1, [pc, #348]	@ (8005148 <HAL_RCC_OscConfig+0x348>)
 8004fea:	400a      	ands	r2, r1
 8004fec:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d11f      	bne.n	8005032 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8004ff2:	f7fe fafb 	bl	80035ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ff6:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004ff8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ffa:	02bf      	lsls	r7, r7, #10
 8004ffc:	e004      	b.n	8005008 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffe:	f7fe faf5 	bl	80035ec <HAL_GetTick>
 8005002:	1b80      	subs	r0, r0, r6
 8005004:	2864      	cmp	r0, #100	@ 0x64
 8005006:	d87e      	bhi.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	423b      	tst	r3, r7
 800500c:	d1f7      	bne.n	8004ffe <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	079a      	lsls	r2, r3, #30
 8005012:	d400      	bmi.n	8005016 <HAL_RCC_OscConfig+0x216>
 8005014:	e746      	b.n	8004ea4 <HAL_RCC_OscConfig+0xa4>
 8005016:	e712      	b.n	8004e3e <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005018:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 800501a:	0792      	lsls	r2, r2, #30
 800501c:	d400      	bmi.n	8005020 <HAL_RCC_OscConfig+0x220>
 800501e:	e743      	b.n	8004ea8 <HAL_RCC_OscConfig+0xa8>
 8005020:	69a2      	ldr	r2, [r4, #24]
 8005022:	2a00      	cmp	r2, #0
 8005024:	d000      	beq.n	8005028 <HAL_RCC_OscConfig+0x228>
 8005026:	e73f      	b.n	8004ea8 <HAL_RCC_OscConfig+0xa8>
 8005028:	e71a      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502a:	4a3c      	ldr	r2, [pc, #240]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	430b      	orrs	r3, r1
 8005030:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005032:	f7fe fadb 	bl	80035ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005036:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005038:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503a:	4f38      	ldr	r7, [pc, #224]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 800503c:	02b6      	lsls	r6, r6, #10
 800503e:	e004      	b.n	800504a <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005040:	f7fe fad4 	bl	80035ec <HAL_GetTick>
 8005044:	1b40      	subs	r0, r0, r5
 8005046:	2864      	cmp	r0, #100	@ 0x64
 8005048:	d85d      	bhi.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	4233      	tst	r3, r6
 800504e:	d0f7      	beq.n	8005040 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	e7dd      	b.n	8005010 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005054:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8005056:	079b      	lsls	r3, r3, #30
 8005058:	d400      	bmi.n	800505c <HAL_RCC_OscConfig+0x25c>
 800505a:	e76d      	b.n	8004f38 <HAL_RCC_OscConfig+0x138>
 800505c:	68a3      	ldr	r3, [r4, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d000      	beq.n	8005064 <HAL_RCC_OscConfig+0x264>
 8005062:	e769      	b.n	8004f38 <HAL_RCC_OscConfig+0x138>
 8005064:	e6fc      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005066:	3b0d      	subs	r3, #13
 8005068:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800506a:	2b02      	cmp	r3, #2
 800506c:	d100      	bne.n	8005070 <HAL_RCC_OscConfig+0x270>
 800506e:	e0c3      	b.n	80051f8 <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005070:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005072:	4d2a      	ldr	r5, [pc, #168]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005074:	2b00      	cmp	r3, #0
 8005076:	d073      	beq.n	8005160 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	4a2a      	ldr	r2, [pc, #168]	@ (8005124 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800507c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800507e:	4013      	ands	r3, r2
 8005080:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005082:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005084:	4313      	orrs	r3, r2
 8005086:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	682a      	ldr	r2, [r5, #0]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	4313      	orrs	r3, r2
 8005090:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005092:	f7fe faab 	bl	80035ec <HAL_GetTick>
 8005096:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005098:	e004      	b.n	80050a4 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800509a:	f7fe faa7 	bl	80035ec <HAL_GetTick>
 800509e:	1b80      	subs	r0, r0, r6
 80050a0:	2802      	cmp	r0, #2
 80050a2:	d830      	bhi.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	423b      	tst	r3, r7
 80050a8:	d0f7      	beq.n	800509a <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050aa:	686a      	ldr	r2, [r5, #4]
 80050ac:	6963      	ldr	r3, [r4, #20]
 80050ae:	491c      	ldr	r1, [pc, #112]	@ (8005120 <HAL_RCC_OscConfig+0x320>)
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	400a      	ands	r2, r1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	e6f3      	b.n	8004ea4 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050bc:	4917      	ldr	r1, [pc, #92]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
 80050be:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 80050c0:	4313      	orrs	r3, r2
 80050c2:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80050c4:	f7fe fa92 	bl	80035ec <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c8:	4b14      	ldr	r3, [pc, #80]	@ (800511c <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 80050ca:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050cc:	4698      	mov	r8, r3
 80050ce:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d0:	4d19      	ldr	r5, [pc, #100]	@ (8005138 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d2:	e004      	b.n	80050de <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d4:	f7fe fa8a 	bl	80035ec <HAL_GetTick>
 80050d8:	1b80      	subs	r0, r0, r6
 80050da:	42a8      	cmp	r0, r5
 80050dc:	d813      	bhi.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050de:	4643      	mov	r3, r8
 80050e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e2:	421f      	tst	r7, r3
 80050e4:	d0f6      	beq.n	80050d4 <HAL_RCC_OscConfig+0x2d4>
 80050e6:	e723      	b.n	8004f30 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e8:	6833      	ldr	r3, [r6, #0]
 80050ea:	433b      	orrs	r3, r7
 80050ec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80050ee:	f7fe fa7d 	bl	80035ec <HAL_GetTick>
 80050f2:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f4:	6833      	ldr	r3, [r6, #0]
 80050f6:	423b      	tst	r3, r7
 80050f8:	d000      	beq.n	80050fc <HAL_RCC_OscConfig+0x2fc>
 80050fa:	e6f5      	b.n	8004ee8 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fc:	f7fe fa76 	bl	80035ec <HAL_GetTick>
 8005100:	1b40      	subs	r0, r0, r5
 8005102:	2802      	cmp	r0, #2
 8005104:	d9f6      	bls.n	80050f4 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8005106:	2003      	movs	r0, #3
 8005108:	e6ab      	b.n	8004e62 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 800510a:	2201      	movs	r2, #1
 800510c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800510e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8005110:	4393      	bics	r3, r2
 8005112:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005114:	f7fe fa6a 	bl	80035ec <HAL_GetTick>
 8005118:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800511a:	e01c      	b.n	8005156 <HAL_RCC_OscConfig+0x356>
 800511c:	40021000 	.word	0x40021000
 8005120:	ffff80ff 	.word	0xffff80ff
 8005124:	ffffc7ff 	.word	0xffffc7ff
 8005128:	00f42400 	.word	0x00f42400
 800512c:	20000440 	.word	0x20000440
 8005130:	20000448 	.word	0x20000448
 8005134:	40007000 	.word	0x40007000
 8005138:	00001388 	.word	0x00001388
 800513c:	feffffff 	.word	0xfeffffff
 8005140:	eefefffc 	.word	0xeefefffc
 8005144:	fffeffff 	.word	0xfffeffff
 8005148:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514c:	f7fe fa4e 	bl	80035ec <HAL_GetTick>
 8005150:	1b80      	subs	r0, r0, r6
 8005152:	2802      	cmp	r0, #2
 8005154:	d8d7      	bhi.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005156:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005158:	421f      	tst	r7, r3
 800515a:	d1f7      	bne.n	800514c <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	e6a3      	b.n	8004ea8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	4a55      	ldr	r2, [pc, #340]	@ (80052b8 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005164:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8005166:	4013      	ands	r3, r2
 8005168:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800516a:	f7fe fa3f 	bl	80035ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800516e:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8005170:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005172:	e004      	b.n	800517e <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005174:	f7fe fa3a 	bl	80035ec <HAL_GetTick>
 8005178:	1b80      	subs	r0, r0, r6
 800517a:	2802      	cmp	r0, #2
 800517c:	d8c3      	bhi.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	423b      	tst	r3, r7
 8005182:	d1f7      	bne.n	8005174 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	e68d      	b.n	8004ea4 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005188:	2b01      	cmp	r3, #1
 800518a:	d100      	bne.n	800518e <HAL_RCC_OscConfig+0x38e>
 800518c:	e668      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8005190:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	6a21      	ldr	r1, [r4, #32]
 8005194:	4002      	ands	r2, r0
 8005196:	428a      	cmp	r2, r1
 8005198:	d000      	beq.n	800519c <HAL_RCC_OscConfig+0x39c>
 800519a:	e661      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800519c:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a0:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a2:	428a      	cmp	r2, r1
 80051a4:	d000      	beq.n	80051a8 <HAL_RCC_OscConfig+0x3a8>
 80051a6:	e65b      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051a8:	21fe      	movs	r1, #254	@ 0xfe
 80051aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80051ac:	01c9      	lsls	r1, r1, #7
 80051ae:	4001      	ands	r1, r0
 80051b0:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051b2:	4291      	cmp	r1, r2
 80051b4:	d000      	beq.n	80051b8 <HAL_RCC_OscConfig+0x3b8>
 80051b6:	e653      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051b8:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051bc:	0392      	lsls	r2, r2, #14
 80051be:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051c0:	428a      	cmp	r2, r1
 80051c2:	d000      	beq.n	80051c6 <HAL_RCC_OscConfig+0x3c6>
 80051c4:	e64c      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051c6:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051ca:	0512      	lsls	r2, r2, #20
 80051cc:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051ce:	428a      	cmp	r2, r1
 80051d0:	d000      	beq.n	80051d4 <HAL_RCC_OscConfig+0x3d4>
 80051d2:	e645      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80051d6:	0f40      	lsrs	r0, r0, #29
 80051d8:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051da:	1ac0      	subs	r0, r0, r3
 80051dc:	1e43      	subs	r3, r0, #1
 80051de:	4198      	sbcs	r0, r3
 80051e0:	b2c0      	uxtb	r0, r0
 80051e2:	e63e      	b.n	8004e62 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e4:	2180      	movs	r1, #128	@ 0x80
 80051e6:	4b35      	ldr	r3, [pc, #212]	@ (80052bc <HAL_RCC_OscConfig+0x4bc>)
 80051e8:	02c9      	lsls	r1, r1, #11
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	4301      	orrs	r1, r0
 80051ee:	6019      	str	r1, [r3, #0]
 80051f0:	6819      	ldr	r1, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f6:	e71c      	b.n	8005032 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f8:	6813      	ldr	r3, [r2, #0]
 80051fa:	055b      	lsls	r3, r3, #21
 80051fc:	d457      	bmi.n	80052ae <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fe:	6851      	ldr	r1, [r2, #4]
 8005200:	6963      	ldr	r3, [r4, #20]
 8005202:	482f      	ldr	r0, [pc, #188]	@ (80052c0 <HAL_RCC_OscConfig+0x4c0>)
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	4001      	ands	r1, r0
 8005208:	430b      	orrs	r3, r1
 800520a:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800520c:	e643      	b.n	8004e96 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 800520e:	4a2b      	ldr	r2, [pc, #172]	@ (80052bc <HAL_RCC_OscConfig+0x4bc>)
 8005210:	492c      	ldr	r1, [pc, #176]	@ (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005212:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8005214:	400b      	ands	r3, r1
 8005216:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005218:	e68e      	b.n	8004f38 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 800521a:	682b      	ldr	r3, [r5, #0]
 800521c:	4a2a      	ldr	r2, [pc, #168]	@ (80052c8 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521e:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005220:	4013      	ands	r3, r2
 8005222:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005224:	f7fe f9e2 	bl	80035ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005228:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800522a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800522c:	e005      	b.n	800523a <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522e:	f7fe f9dd 	bl	80035ec <HAL_GetTick>
 8005232:	1b80      	subs	r0, r0, r6
 8005234:	2802      	cmp	r0, #2
 8005236:	d900      	bls.n	800523a <HAL_RCC_OscConfig+0x43a>
 8005238:	e765      	b.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800523a:	682b      	ldr	r3, [r5, #0]
 800523c:	423b      	tst	r3, r7
 800523e:	d1f6      	bne.n	800522e <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005240:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005242:	6a23      	ldr	r3, [r4, #32]
 8005244:	68ea      	ldr	r2, [r5, #12]
 8005246:	430b      	orrs	r3, r1
 8005248:	4920      	ldr	r1, [pc, #128]	@ (80052cc <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524a:	4e1c      	ldr	r6, [pc, #112]	@ (80052bc <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800524c:	400a      	ands	r2, r1
 800524e:	4313      	orrs	r3, r2
 8005250:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005252:	4313      	orrs	r3, r2
 8005254:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005256:	4313      	orrs	r3, r2
 8005258:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800525a:	4313      	orrs	r3, r2
 800525c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800525e:	0212      	lsls	r2, r2, #8
 8005260:	4313      	orrs	r3, r2
 8005262:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005264:	2380      	movs	r3, #128	@ 0x80
 8005266:	682a      	ldr	r2, [r5, #0]
 8005268:	045b      	lsls	r3, r3, #17
 800526a:	4313      	orrs	r3, r2
 800526c:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800526e:	2380      	movs	r3, #128	@ 0x80
 8005270:	68ea      	ldr	r2, [r5, #12]
 8005272:	055b      	lsls	r3, r3, #21
 8005274:	4313      	orrs	r3, r2
 8005276:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005278:	f7fe f9b8 	bl	80035ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527c:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 800527e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005280:	04ad      	lsls	r5, r5, #18
 8005282:	e005      	b.n	8005290 <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005284:	f7fe f9b2 	bl	80035ec <HAL_GetTick>
 8005288:	1b00      	subs	r0, r0, r4
 800528a:	2802      	cmp	r0, #2
 800528c:	d900      	bls.n	8005290 <HAL_RCC_OscConfig+0x490>
 800528e:	e73a      	b.n	8005106 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	422b      	tst	r3, r5
 8005294:	d0f6      	beq.n	8005284 <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 8005296:	2000      	movs	r0, #0
 8005298:	e5e3      	b.n	8004e62 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800529a:	2104      	movs	r1, #4
 800529c:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <HAL_RCC_OscConfig+0x4bc>)
 800529e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052a0:	430a      	orrs	r2, r1
 80052a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052a6:	3903      	subs	r1, #3
 80052a8:	430a      	orrs	r2, r1
 80052aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ac:	e70a      	b.n	80050c4 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ae:	68e3      	ldr	r3, [r4, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1a4      	bne.n	80051fe <HAL_RCC_OscConfig+0x3fe>
 80052b4:	e5d4      	b.n	8004e60 <HAL_RCC_OscConfig+0x60>
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	fffffeff 	.word	0xfffffeff
 80052bc:	40021000 	.word	0x40021000
 80052c0:	ffff80ff 	.word	0xffff80ff
 80052c4:	efffffff 	.word	0xefffffff
 80052c8:	feffffff 	.word	0xfeffffff
 80052cc:	11c1808c 	.word	0x11c1808c

080052d0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052d0:	2338      	movs	r3, #56	@ 0x38
 80052d2:	4a22      	ldr	r2, [pc, #136]	@ (800535c <HAL_RCC_GetSysClockFreq+0x8c>)
{
 80052d4:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052d6:	6891      	ldr	r1, [r2, #8]
 80052d8:	420b      	tst	r3, r1
 80052da:	d105      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80052dc:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80052de:	4820      	ldr	r0, [pc, #128]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80052e0:	049b      	lsls	r3, r3, #18
 80052e2:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80052e4:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80052e6:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052e8:	6891      	ldr	r1, [r2, #8]
 80052ea:	4019      	ands	r1, r3
 80052ec:	2908      	cmp	r1, #8
 80052ee:	d014      	beq.n	800531a <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f0:	6891      	ldr	r1, [r2, #8]
 80052f2:	4019      	ands	r1, r3
 80052f4:	2910      	cmp	r1, #16
 80052f6:	d012      	beq.n	800531e <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80052f8:	6891      	ldr	r1, [r2, #8]
 80052fa:	4019      	ands	r1, r3
 80052fc:	2920      	cmp	r1, #32
 80052fe:	d024      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005300:	6890      	ldr	r0, [r2, #8]
 8005302:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8005304:	3818      	subs	r0, #24
 8005306:	1e43      	subs	r3, r0, #1
 8005308:	4198      	sbcs	r0, r3
 800530a:	4b16      	ldr	r3, [pc, #88]	@ (8005364 <HAL_RCC_GetSysClockFreq+0x94>)
 800530c:	4240      	negs	r0, r0
 800530e:	4018      	ands	r0, r3
 8005310:	23fa      	movs	r3, #250	@ 0xfa
 8005312:	01db      	lsls	r3, r3, #7
 8005314:	469c      	mov	ip, r3
 8005316:	4460      	add	r0, ip
 8005318:	e7e5      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800531a:	4813      	ldr	r0, [pc, #76]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x98>)
 800531c:	e7e3      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800531e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005320:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005322:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005324:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005326:	0649      	lsls	r1, r1, #25
 8005328:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800532a:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800532c:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800532e:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8005330:	079b      	lsls	r3, r3, #30
 8005332:	d00d      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005334:	480a      	ldr	r0, [pc, #40]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x90>)
 8005336:	f7fa fee5 	bl	8000104 <__udivsi3>
 800533a:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800533c:	4b07      	ldr	r3, [pc, #28]	@ (800535c <HAL_RCC_GetSysClockFreq+0x8c>)
 800533e:	68d9      	ldr	r1, [r3, #12]
 8005340:	0f49      	lsrs	r1, r1, #29
 8005342:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8005344:	f7fa fede 	bl	8000104 <__udivsi3>
  return sysclockfreq;
 8005348:	e7cd      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800534a:	2080      	movs	r0, #128	@ 0x80
 800534c:	0200      	lsls	r0, r0, #8
 800534e:	e7ca      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005350:	4805      	ldr	r0, [pc, #20]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x98>)
 8005352:	f7fa fed7 	bl	8000104 <__udivsi3>
 8005356:	4360      	muls	r0, r4
        break;
 8005358:	e7f0      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x6c>
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	40021000 	.word	0x40021000
 8005360:	00f42400 	.word	0x00f42400
 8005364:	ffff8300 	.word	0xffff8300
 8005368:	007a1200 	.word	0x007a1200

0800536c <HAL_RCC_ClockConfig>:
{
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	46ce      	mov	lr, r9
 8005370:	4647      	mov	r7, r8
 8005372:	0005      	movs	r5, r0
 8005374:	000c      	movs	r4, r1
 8005376:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8005378:	2800      	cmp	r0, #0
 800537a:	d026      	beq.n	80053ca <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800537c:	2207      	movs	r2, #7
 800537e:	4e57      	ldr	r6, [pc, #348]	@ (80054dc <HAL_RCC_ClockConfig+0x170>)
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	4013      	ands	r3, r2
 8005384:	428b      	cmp	r3, r1
 8005386:	d35e      	bcc.n	8005446 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	079a      	lsls	r2, r3, #30
 800538c:	d50e      	bpl.n	80053ac <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538e:	075a      	lsls	r2, r3, #29
 8005390:	d505      	bpl.n	800539e <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005392:	22e0      	movs	r2, #224	@ 0xe0
 8005394:	4952      	ldr	r1, [pc, #328]	@ (80054e0 <HAL_RCC_ClockConfig+0x174>)
 8005396:	01d2      	lsls	r2, r2, #7
 8005398:	6888      	ldr	r0, [r1, #8]
 800539a:	4302      	orrs	r2, r0
 800539c:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800539e:	4950      	ldr	r1, [pc, #320]	@ (80054e0 <HAL_RCC_ClockConfig+0x174>)
 80053a0:	4850      	ldr	r0, [pc, #320]	@ (80054e4 <HAL_RCC_ClockConfig+0x178>)
 80053a2:	688a      	ldr	r2, [r1, #8]
 80053a4:	4002      	ands	r2, r0
 80053a6:	68a8      	ldr	r0, [r5, #8]
 80053a8:	4302      	orrs	r2, r0
 80053aa:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ac:	07db      	lsls	r3, r3, #31
 80053ae:	d52b      	bpl.n	8005408 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b0:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053b2:	4a4b      	ldr	r2, [pc, #300]	@ (80054e0 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d100      	bne.n	80053ba <HAL_RCC_ClockConfig+0x4e>
 80053b8:	e07c      	b.n	80054b4 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d007      	beq.n	80053ce <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d000      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x58>
 80053c2:	e07d      	b.n	80054c0 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	0552      	lsls	r2, r2, #21
 80053c8:	d404      	bmi.n	80053d4 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80053ca:	2001      	movs	r0, #1
 80053cc:	e037      	b.n	800543e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	0192      	lsls	r2, r2, #6
 80053d2:	d5fa      	bpl.n	80053ca <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053d4:	2107      	movs	r1, #7
 80053d6:	4e42      	ldr	r6, [pc, #264]	@ (80054e0 <HAL_RCC_ClockConfig+0x174>)
 80053d8:	68b2      	ldr	r2, [r6, #8]
 80053da:	438a      	bics	r2, r1
 80053dc:	4313      	orrs	r3, r2
 80053de:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80053e0:	f7fe f904 	bl	80035ec <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e4:	2338      	movs	r3, #56	@ 0x38
 80053e6:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e8:	4b3f      	ldr	r3, [pc, #252]	@ (80054e8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80053ea:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ec:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	e004      	b.n	80053fa <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7fe f8fc 	bl	80035ec <HAL_GetTick>
 80053f4:	1bc0      	subs	r0, r0, r7
 80053f6:	4548      	cmp	r0, r9
 80053f8:	d83b      	bhi.n	8005472 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	4643      	mov	r3, r8
 80053fc:	68b2      	ldr	r2, [r6, #8]
 80053fe:	401a      	ands	r2, r3
 8005400:	686b      	ldr	r3, [r5, #4]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	429a      	cmp	r2, r3
 8005406:	d1f3      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005408:	2207      	movs	r2, #7
 800540a:	4e34      	ldr	r6, [pc, #208]	@ (80054dc <HAL_RCC_ClockConfig+0x170>)
 800540c:	6833      	ldr	r3, [r6, #0]
 800540e:	4013      	ands	r3, r2
 8005410:	42a3      	cmp	r3, r4
 8005412:	d838      	bhi.n	8005486 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	075b      	lsls	r3, r3, #29
 8005418:	d42d      	bmi.n	8005476 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800541a:	f7ff ff59 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
 800541e:	4b30      	ldr	r3, [pc, #192]	@ (80054e0 <HAL_RCC_ClockConfig+0x174>)
 8005420:	4a32      	ldr	r2, [pc, #200]	@ (80054ec <HAL_RCC_ClockConfig+0x180>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4932      	ldr	r1, [pc, #200]	@ (80054f0 <HAL_RCC_ClockConfig+0x184>)
 8005426:	051b      	lsls	r3, r3, #20
 8005428:	0f1b      	lsrs	r3, r3, #28
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	589b      	ldr	r3, [r3, r2]
 800542e:	221f      	movs	r2, #31
 8005430:	4013      	ands	r3, r2
 8005432:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8005434:	4b2f      	ldr	r3, [pc, #188]	@ (80054f4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005436:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	f7fe f891 	bl	8003560 <HAL_InitTick>
}
 800543e:	bcc0      	pop	{r6, r7}
 8005440:	46b9      	mov	r9, r7
 8005442:	46b0      	mov	r8, r6
 8005444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	6833      	ldr	r3, [r6, #0]
 8005448:	4393      	bics	r3, r2
 800544a:	430b      	orrs	r3, r1
 800544c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800544e:	f7fe f8cd 	bl	80035ec <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005452:	2307      	movs	r3, #7
 8005454:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005456:	4b24      	ldr	r3, [pc, #144]	@ (80054e8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005458:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800545c:	4642      	mov	r2, r8
 800545e:	6833      	ldr	r3, [r6, #0]
 8005460:	4013      	ands	r3, r2
 8005462:	42a3      	cmp	r3, r4
 8005464:	d100      	bne.n	8005468 <HAL_RCC_ClockConfig+0xfc>
 8005466:	e78f      	b.n	8005388 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005468:	f7fe f8c0 	bl	80035ec <HAL_GetTick>
 800546c:	1bc0      	subs	r0, r0, r7
 800546e:	4548      	cmp	r0, r9
 8005470:	d9f4      	bls.n	800545c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8005472:	2003      	movs	r0, #3
 8005474:	e7e3      	b.n	800543e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005476:	4a1a      	ldr	r2, [pc, #104]	@ (80054e0 <HAL_RCC_ClockConfig+0x174>)
 8005478:	491f      	ldr	r1, [pc, #124]	@ (80054f8 <HAL_RCC_ClockConfig+0x18c>)
 800547a:	6893      	ldr	r3, [r2, #8]
 800547c:	400b      	ands	r3, r1
 800547e:	68e9      	ldr	r1, [r5, #12]
 8005480:	430b      	orrs	r3, r1
 8005482:	6093      	str	r3, [r2, #8]
 8005484:	e7c9      	b.n	800541a <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	6833      	ldr	r3, [r6, #0]
 8005488:	4393      	bics	r3, r2
 800548a:	4323      	orrs	r3, r4
 800548c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800548e:	f7fe f8ad 	bl	80035ec <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005492:	2307      	movs	r3, #7
 8005494:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005496:	4b14      	ldr	r3, [pc, #80]	@ (80054e8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005498:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800549a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800549c:	4642      	mov	r2, r8
 800549e:	6833      	ldr	r3, [r6, #0]
 80054a0:	4013      	ands	r3, r2
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	d0b6      	beq.n	8005414 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a6:	f7fe f8a1 	bl	80035ec <HAL_GetTick>
 80054aa:	1bc0      	subs	r0, r0, r7
 80054ac:	4548      	cmp	r0, r9
 80054ae:	d9f5      	bls.n	800549c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80054b0:	2003      	movs	r0, #3
 80054b2:	e7c4      	b.n	800543e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	0392      	lsls	r2, r2, #14
 80054b8:	d500      	bpl.n	80054bc <HAL_RCC_ClockConfig+0x150>
 80054ba:	e78b      	b.n	80053d4 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80054bc:	2001      	movs	r0, #1
 80054be:	e7be      	b.n	800543e <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054c6:	0792      	lsls	r2, r2, #30
 80054c8:	d500      	bpl.n	80054cc <HAL_RCC_ClockConfig+0x160>
 80054ca:	e783      	b.n	80053d4 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80054cc:	2001      	movs	r0, #1
 80054ce:	e7b6      	b.n	800543e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054d0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80054d2:	0792      	lsls	r2, r2, #30
 80054d4:	d500      	bpl.n	80054d8 <HAL_RCC_ClockConfig+0x16c>
 80054d6:	e77d      	b.n	80053d4 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80054d8:	2001      	movs	r0, #1
 80054da:	e7b0      	b.n	800543e <HAL_RCC_ClockConfig+0xd2>
 80054dc:	40022000 	.word	0x40022000
 80054e0:	40021000 	.word	0x40021000
 80054e4:	fffff0ff 	.word	0xfffff0ff
 80054e8:	00001388 	.word	0x00001388
 80054ec:	080086a0 	.word	0x080086a0
 80054f0:	20000440 	.word	0x20000440
 80054f4:	20000448 	.word	0x20000448
 80054f8:	ffff8fff 	.word	0xffff8fff

080054fc <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80054fe:	4907      	ldr	r1, [pc, #28]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005500:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005502:	4a07      	ldr	r2, [pc, #28]	@ (8005520 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005504:	045b      	lsls	r3, r3, #17
 8005506:	0f5b      	lsrs	r3, r3, #29
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	585b      	ldr	r3, [r3, r1]
 800550c:	211f      	movs	r1, #31
 800550e:	6810      	ldr	r0, [r2, #0]
 8005510:	400b      	ands	r3, r1
 8005512:	40d8      	lsrs	r0, r3
}
 8005514:	4770      	bx	lr
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	40021000 	.word	0x40021000
 800551c:	08008680 	.word	0x08008680
 8005520:	20000440 	.word	0x20000440

08005524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005526:	46d6      	mov	lr, sl
 8005528:	464f      	mov	r7, r9
 800552a:	4646      	mov	r6, r8
 800552c:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800552e:	6803      	ldr	r3, [r0, #0]
{
 8005530:	0004      	movs	r4, r0
 8005532:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005534:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005536:	039a      	lsls	r2, r3, #14
 8005538:	d543      	bpl.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553a:	2280      	movs	r2, #128	@ 0x80
 800553c:	4b68      	ldr	r3, [pc, #416]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800553e:	0552      	lsls	r2, r2, #21
 8005540:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8005542:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005544:	4211      	tst	r1, r2
 8005546:	d100      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005548:	e095      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800554a:	2780      	movs	r7, #128	@ 0x80
 800554c:	4d65      	ldr	r5, [pc, #404]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800554e:	007f      	lsls	r7, r7, #1
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	433b      	orrs	r3, r7
 8005554:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005556:	f7fe f849 	bl	80035ec <HAL_GetTick>
 800555a:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800555c:	e004      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555e:	f7fe f845 	bl	80035ec <HAL_GetTick>
 8005562:	1b80      	subs	r0, r0, r6
 8005564:	2802      	cmp	r0, #2
 8005566:	d827      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	423b      	tst	r3, r7
 800556c:	d0f7      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800556e:	4d5c      	ldr	r5, [pc, #368]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005570:	23c0      	movs	r3, #192	@ 0xc0
 8005572:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005578:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800557a:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800557c:	421a      	tst	r2, r3
 800557e:	d100      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8005580:	e0a6      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8005582:	4288      	cmp	r0, r1
 8005584:	d100      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005586:	e0a3      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005588:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800558a:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 800558c:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 800558e:	0240      	lsls	r0, r0, #9
 8005590:	4330      	orrs	r0, r6
 8005592:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005594:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005596:	4a54      	ldr	r2, [pc, #336]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005598:	4e54      	ldr	r6, [pc, #336]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800559a:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 800559c:	4030      	ands	r0, r6
 800559e:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055a0:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055a2:	07db      	lsls	r3, r3, #31
 80055a4:	d400      	bmi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80055a6:	e093      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fe f820 	bl	80035ec <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ac:	2302      	movs	r3, #2
 80055ae:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b0:	4b4f      	ldr	r3, [pc, #316]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tickstart = HAL_GetTick();
 80055b2:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b6:	e086      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055b8:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055ba:	4652      	mov	r2, sl
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055bc:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80055be:	2a01      	cmp	r2, #1
 80055c0:	d063      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x166>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055c2:	07da      	lsls	r2, r3, #31
 80055c4:	d506      	bpl.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c6:	2503      	movs	r5, #3
 80055c8:	4945      	ldr	r1, [pc, #276]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ca:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80055cc:	43aa      	bics	r2, r5
 80055ce:	6865      	ldr	r5, [r4, #4]
 80055d0:	432a      	orrs	r2, r5
 80055d2:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055d4:	06da      	lsls	r2, r3, #27
 80055d6:	d506      	bpl.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055d8:	4941      	ldr	r1, [pc, #260]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055da:	4d46      	ldr	r5, [pc, #280]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055dc:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80055de:	402a      	ands	r2, r5
 80055e0:	68a5      	ldr	r5, [r4, #8]
 80055e2:	432a      	orrs	r2, r5
 80055e4:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055e6:	059a      	lsls	r2, r3, #22
 80055e8:	d506      	bpl.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ea:	493d      	ldr	r1, [pc, #244]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ec:	4d42      	ldr	r5, [pc, #264]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055ee:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80055f0:	402a      	ands	r2, r5
 80055f2:	6965      	ldr	r5, [r4, #20]
 80055f4:	432a      	orrs	r2, r5
 80055f6:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055f8:	055a      	lsls	r2, r3, #21
 80055fa:	d506      	bpl.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055fc:	4938      	ldr	r1, [pc, #224]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055fe:	4d3f      	ldr	r5, [pc, #252]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005600:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8005602:	402a      	ands	r2, r5
 8005604:	69a5      	ldr	r5, [r4, #24]
 8005606:	432a      	orrs	r2, r5
 8005608:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800560a:	069a      	lsls	r2, r3, #26
 800560c:	d506      	bpl.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800560e:	4934      	ldr	r1, [pc, #208]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005610:	4d3b      	ldr	r5, [pc, #236]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005612:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8005614:	402a      	ands	r2, r5
 8005616:	68e5      	ldr	r5, [r4, #12]
 8005618:	432a      	orrs	r2, r5
 800561a:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800561c:	045a      	lsls	r2, r3, #17
 800561e:	d50a      	bpl.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005620:	492f      	ldr	r1, [pc, #188]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005622:	69e5      	ldr	r5, [r4, #28]
 8005624:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8005626:	0092      	lsls	r2, r2, #2
 8005628:	0892      	lsrs	r2, r2, #2
 800562a:	432a      	orrs	r2, r5
 800562c:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800562e:	2280      	movs	r2, #128	@ 0x80
 8005630:	05d2      	lsls	r2, r2, #23
 8005632:	4295      	cmp	r5, r2
 8005634:	d02f      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x172>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005636:	029a      	lsls	r2, r3, #10
 8005638:	d50a      	bpl.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800563a:	4929      	ldr	r1, [pc, #164]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800563c:	4e31      	ldr	r6, [pc, #196]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800563e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8005640:	6a25      	ldr	r5, [r4, #32]
 8005642:	4032      	ands	r2, r6
 8005644:	432a      	orrs	r2, r5
 8005646:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005648:	2280      	movs	r2, #128	@ 0x80
 800564a:	03d2      	lsls	r2, r2, #15
 800564c:	4295      	cmp	r5, r2
 800564e:	d028      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005650:	051b      	lsls	r3, r3, #20
 8005652:	d50a      	bpl.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005654:	4a22      	ldr	r2, [pc, #136]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005656:	6921      	ldr	r1, [r4, #16]
 8005658:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800565a:	4c2b      	ldr	r4, [pc, #172]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800565c:	4023      	ands	r3, r4
 800565e:	430b      	orrs	r3, r1
 8005660:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005662:	2380      	movs	r3, #128	@ 0x80
 8005664:	01db      	lsls	r3, r3, #7
 8005666:	4299      	cmp	r1, r3
 8005668:	d021      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800566a:	b002      	add	sp, #8
 800566c:	bce0      	pop	{r5, r6, r7}
 800566e:	46ba      	mov	sl, r7
 8005670:	46b1      	mov	r9, r6
 8005672:	46a8      	mov	r8, r5
 8005674:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005676:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005678:	4311      	orrs	r1, r2
 800567a:	63d9      	str	r1, [r3, #60]	@ 0x3c
 800567c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567e:	4013      	ands	r3, r2
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005684:	2301      	movs	r3, #1
 8005686:	469a      	mov	sl, r3
 8005688:	e75f      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	4915      	ldr	r1, [pc, #84]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800568c:	4d1f      	ldr	r5, [pc, #124]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800568e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8005690:	402a      	ands	r2, r5
 8005692:	63ca      	str	r2, [r1, #60]	@ 0x3c
 8005694:	e795      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005696:	2280      	movs	r2, #128	@ 0x80
 8005698:	68cd      	ldr	r5, [r1, #12]
 800569a:	0252      	lsls	r2, r2, #9
 800569c:	432a      	orrs	r2, r5
 800569e:	60ca      	str	r2, [r1, #12]
 80056a0:	e7c9      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80056a2:	2280      	movs	r2, #128	@ 0x80
 80056a4:	68cd      	ldr	r5, [r1, #12]
 80056a6:	0452      	lsls	r2, r2, #17
 80056a8:	432a      	orrs	r2, r5
 80056aa:	60ca      	str	r2, [r1, #12]
 80056ac:	e7d0      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80056ae:	2380      	movs	r3, #128	@ 0x80
 80056b0:	68d1      	ldr	r1, [r2, #12]
 80056b2:	025b      	lsls	r3, r3, #9
 80056b4:	430b      	orrs	r3, r1
 80056b6:	60d3      	str	r3, [r2, #12]
  return status;
 80056b8:	e7d7      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x146>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fd ff97 	bl	80035ec <HAL_GetTick>
 80056be:	1b80      	subs	r0, r0, r6
 80056c0:	4548      	cmp	r0, r9
 80056c2:	d900      	bls.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80056c4:	e778      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c6:	4642      	mov	r2, r8
 80056c8:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80056ca:	421a      	tst	r2, r3
 80056cc:	d0f5      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80056d0:	4a03      	ldr	r2, [pc, #12]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056d2:	4805      	ldr	r0, [pc, #20]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056d4:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80056d6:	4003      	ands	r3, r0
 80056d8:	430b      	orrs	r3, r1
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056da:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056dc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80056de:	e76c      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x96>
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40007000 	.word	0x40007000
 80056e8:	fffffcff 	.word	0xfffffcff
 80056ec:	fffeffff 	.word	0xfffeffff
 80056f0:	00001388 	.word	0x00001388
 80056f4:	fffff3ff 	.word	0xfffff3ff
 80056f8:	fff3ffff 	.word	0xfff3ffff
 80056fc:	ffcfffff 	.word	0xffcfffff
 8005700:	ffffcfff 	.word	0xffffcfff
 8005704:	ffbfffff 	.word	0xffbfffff
 8005708:	ffff3fff 	.word	0xffff3fff
 800570c:	efffffff 	.word	0xefffffff

08005710 <HAL_TIM_OC_MspInit>:
/**
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8005710:	4770      	bx	lr
 8005712:	46c0      	nop			@ (mov r8, r8)

08005714 <HAL_TIM_PWM_MspInit>:
/**
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8005714:	4770      	bx	lr
 8005716:	46c0      	nop			@ (mov r8, r8)

08005718 <HAL_TIM_IC_MspInit>:
/**
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8005718:	4770      	bx	lr
 800571a:	46c0      	nop			@ (mov r8, r8)

0800571c <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 800571c:	4770      	bx	lr
 800571e:	46c0      	nop			@ (mov r8, r8)

08005720 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
/**
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005720:	4770      	bx	lr
 8005722:	46c0      	nop			@ (mov r8, r8)

08005724 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005724:	4770      	bx	lr
 8005726:	46c0      	nop			@ (mov r8, r8)

08005728 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005728:	4770      	bx	lr
 800572a:	46c0      	nop			@ (mov r8, r8)

0800572c <HAL_TIM_IC_CaptureHalfCpltCallback>:
/**
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 800572c:	4770      	bx	lr
 800572e:	46c0      	nop			@ (mov r8, r8)

08005730 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005730:	4770      	bx	lr
 8005732:	46c0      	nop			@ (mov r8, r8)

08005734 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/**
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005734:	4770      	bx	lr
 8005736:	46c0      	nop			@ (mov r8, r8)

08005738 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005738:	4770      	bx	lr
 800573a:	46c0      	nop			@ (mov r8, r8)

0800573c <HAL_TIM_TriggerHalfCpltCallback>:
/**
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
 800573c:	4770      	bx	lr
 800573e:	46c0      	nop			@ (mov r8, r8)

08005740 <HAL_TIM_ErrorCallback>:
/**
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8005740:	4770      	bx	lr
 8005742:	46c0      	nop			@ (mov r8, r8)

08005744 <HAL_TIM_Base_Init>:
{
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8005748:	d100      	bne.n	800574c <HAL_TIM_Base_Init+0x8>
 800574a:	e096      	b.n	800587a <HAL_TIM_Base_Init+0x136>
  if (htim->State == HAL_TIM_STATE_RESET)
 800574c:	233d      	movs	r3, #61	@ 0x3d
 800574e:	5cc3      	ldrb	r3, [r0, r3]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d130      	bne.n	80057b8 <HAL_TIM_Base_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8005756:	333c      	adds	r3, #60	@ 0x3c
 8005758:	54c2      	strb	r2, [r0, r3]
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800575a:	2284      	movs	r2, #132	@ 0x84
 800575c:	4b4f      	ldr	r3, [pc, #316]	@ (800589c <HAL_TIM_Base_Init+0x158>)
 800575e:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005760:	4b4f      	ldr	r3, [pc, #316]	@ (80058a0 <HAL_TIM_Base_Init+0x15c>)
 8005762:	3204      	adds	r2, #4
 8005764:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005766:	4b4f      	ldr	r3, [pc, #316]	@ (80058a4 <HAL_TIM_Base_Init+0x160>)
 8005768:	3204      	adds	r2, #4
 800576a:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800576c:	4b4e      	ldr	r3, [pc, #312]	@ (80058a8 <HAL_TIM_Base_Init+0x164>)
 800576e:	3204      	adds	r2, #4
 8005770:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005772:	4b4e      	ldr	r3, [pc, #312]	@ (80058ac <HAL_TIM_Base_Init+0x168>)
 8005774:	3204      	adds	r2, #4
 8005776:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005778:	4b4d      	ldr	r3, [pc, #308]	@ (80058b0 <HAL_TIM_Base_Init+0x16c>)
 800577a:	3204      	adds	r2, #4
 800577c:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800577e:	4b4d      	ldr	r3, [pc, #308]	@ (80058b4 <HAL_TIM_Base_Init+0x170>)
 8005780:	3204      	adds	r2, #4
 8005782:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005784:	4b4c      	ldr	r3, [pc, #304]	@ (80058b8 <HAL_TIM_Base_Init+0x174>)
 8005786:	3204      	adds	r2, #4
 8005788:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800578a:	4b4c      	ldr	r3, [pc, #304]	@ (80058bc <HAL_TIM_Base_Init+0x178>)
 800578c:	3204      	adds	r2, #4
 800578e:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005790:	4b4b      	ldr	r3, [pc, #300]	@ (80058c0 <HAL_TIM_Base_Init+0x17c>)
 8005792:	3204      	adds	r2, #4
 8005794:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005796:	4b4b      	ldr	r3, [pc, #300]	@ (80058c4 <HAL_TIM_Base_Init+0x180>)
 8005798:	3204      	adds	r2, #4
 800579a:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800579c:	4b4a      	ldr	r3, [pc, #296]	@ (80058c8 <HAL_TIM_Base_Init+0x184>)
 800579e:	3204      	adds	r2, #4
 80057a0:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80057a2:	4b4a      	ldr	r3, [pc, #296]	@ (80058cc <HAL_TIM_Base_Init+0x188>)
 80057a4:	3204      	adds	r2, #4
 80057a6:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80057a8:	4b49      	ldr	r3, [pc, #292]	@ (80058d0 <HAL_TIM_Base_Init+0x18c>)
 80057aa:	3204      	adds	r2, #4
 80057ac:	5083      	str	r3, [r0, r2]
    if (htim->Base_MspInitCallback == NULL)
 80057ae:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d064      	beq.n	800587e <HAL_TIM_Base_Init+0x13a>
    htim->Base_MspInitCallback(htim);
 80057b4:	0020      	movs	r0, r4
 80057b6:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	233d      	movs	r3, #61	@ 0x3d
 80057ba:	2202      	movs	r2, #2
 80057bc:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057be:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c0:	4e44      	ldr	r6, [pc, #272]	@ (80058d4 <HAL_TIM_Base_Init+0x190>)
  tmpcr1 = TIMx->CR1;
 80057c2:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c4:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c6:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80057c8:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ca:	42b3      	cmp	r3, r6
 80057cc:	d016      	beq.n	80057fc <HAL_TIM_Base_Init+0xb8>
 80057ce:	2680      	movs	r6, #128	@ 0x80
 80057d0:	05f6      	lsls	r6, r6, #23
 80057d2:	42b3      	cmp	r3, r6
 80057d4:	d012      	beq.n	80057fc <HAL_TIM_Base_Init+0xb8>
 80057d6:	4e40      	ldr	r6, [pc, #256]	@ (80058d8 <HAL_TIM_Base_Init+0x194>)
 80057d8:	42b3      	cmp	r3, r6
 80057da:	d045      	beq.n	8005868 <HAL_TIM_Base_Init+0x124>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057dc:	4e3f      	ldr	r6, [pc, #252]	@ (80058dc <HAL_TIM_Base_Init+0x198>)
 80057de:	42b3      	cmp	r3, r6
 80057e0:	d046      	beq.n	8005870 <HAL_TIM_Base_Init+0x12c>
 80057e2:	4e3f      	ldr	r6, [pc, #252]	@ (80058e0 <HAL_TIM_Base_Init+0x19c>)
 80057e4:	42b3      	cmp	r3, r6
 80057e6:	d04d      	beq.n	8005884 <HAL_TIM_Base_Init+0x140>
 80057e8:	4e3e      	ldr	r6, [pc, #248]	@ (80058e4 <HAL_TIM_Base_Init+0x1a0>)
 80057ea:	42b3      	cmp	r3, r6
 80057ec:	d04a      	beq.n	8005884 <HAL_TIM_Base_Init+0x140>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ee:	2680      	movs	r6, #128	@ 0x80
 80057f0:	43b2      	bics	r2, r6
 80057f2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80057f4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80057f8:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057fa:	e012      	b.n	8005822 <HAL_TIM_Base_Init+0xde>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057fc:	2670      	movs	r6, #112	@ 0x70
 80057fe:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8005800:	68a6      	ldr	r6, [r4, #8]
 8005802:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005804:	4e38      	ldr	r6, [pc, #224]	@ (80058e8 <HAL_TIM_Base_Init+0x1a4>)
 8005806:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005808:	6926      	ldr	r6, [r4, #16]
 800580a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800580c:	2680      	movs	r6, #128	@ 0x80
 800580e:	43b2      	bics	r2, r6
 8005810:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005812:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005814:	4a2f      	ldr	r2, [pc, #188]	@ (80058d4 <HAL_TIM_Base_Init+0x190>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005816:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005818:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_TIM_Base_Init+0xde>
    TIMx->RCR = Structure->RepetitionCounter;
 800581e:	6962      	ldr	r2, [r4, #20]
 8005820:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005822:	2201      	movs	r2, #1
 8005824:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005826:	6919      	ldr	r1, [r3, #16]
 8005828:	420a      	tst	r2, r1
 800582a:	d002      	beq.n	8005832 <HAL_TIM_Base_Init+0xee>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800582c:	6919      	ldr	r1, [r3, #16]
 800582e:	4391      	bics	r1, r2
 8005830:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005832:	2301      	movs	r3, #1
 8005834:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8005836:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005838:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583a:	3a0a      	subs	r2, #10
 800583c:	54a3      	strb	r3, [r4, r2]
 800583e:	3201      	adds	r2, #1
 8005840:	54a3      	strb	r3, [r4, r2]
 8005842:	3201      	adds	r2, #1
 8005844:	54a3      	strb	r3, [r4, r2]
 8005846:	3201      	adds	r2, #1
 8005848:	54a3      	strb	r3, [r4, r2]
 800584a:	3201      	adds	r2, #1
 800584c:	54a3      	strb	r3, [r4, r2]
 800584e:	3201      	adds	r2, #1
 8005850:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005852:	3201      	adds	r2, #1
 8005854:	54a3      	strb	r3, [r4, r2]
 8005856:	3201      	adds	r2, #1
 8005858:	54a3      	strb	r3, [r4, r2]
 800585a:	3201      	adds	r2, #1
 800585c:	54a3      	strb	r3, [r4, r2]
 800585e:	3201      	adds	r2, #1
 8005860:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005862:	3a0a      	subs	r2, #10
 8005864:	54a3      	strb	r3, [r4, r2]
}
 8005866:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	2670      	movs	r6, #112	@ 0x70
 800586a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 800586c:	68a6      	ldr	r6, [r4, #8]
 800586e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005870:	4e1d      	ldr	r6, [pc, #116]	@ (80058e8 <HAL_TIM_Base_Init+0x1a4>)
 8005872:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005874:	6926      	ldr	r6, [r4, #16]
 8005876:	4332      	orrs	r2, r6
 8005878:	e7b9      	b.n	80057ee <HAL_TIM_Base_Init+0xaa>
    return HAL_ERROR;
 800587a:	2001      	movs	r0, #1
 800587c:	e7f3      	b.n	8005866 <HAL_TIM_Base_Init+0x122>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800587e:	4b1b      	ldr	r3, [pc, #108]	@ (80058ec <HAL_TIM_Base_Init+0x1a8>)
 8005880:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8005882:	e797      	b.n	80057b4 <HAL_TIM_Base_Init+0x70>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005884:	4e18      	ldr	r6, [pc, #96]	@ (80058e8 <HAL_TIM_Base_Init+0x1a4>)
 8005886:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005888:	6926      	ldr	r6, [r4, #16]
 800588a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	2680      	movs	r6, #128	@ 0x80
 800588e:	43b2      	bics	r2, r6
 8005890:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005892:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005894:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005896:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005898:	e7c1      	b.n	800581e <HAL_TIM_Base_Init+0xda>
 800589a:	46c0      	nop			@ (mov r8, r8)
 800589c:	0800571d 	.word	0x0800571d
 80058a0:	08005721 	.word	0x08005721
 80058a4:	08005739 	.word	0x08005739
 80058a8:	0800573d 	.word	0x0800573d
 80058ac:	08005729 	.word	0x08005729
 80058b0:	0800572d 	.word	0x0800572d
 80058b4:	08005725 	.word	0x08005725
 80058b8:	08005731 	.word	0x08005731
 80058bc:	08005735 	.word	0x08005735
 80058c0:	08005741 	.word	0x08005741
 80058c4:	08006fb1 	.word	0x08006fb1
 80058c8:	08006fb5 	.word	0x08006fb5
 80058cc:	08006fb9 	.word	0x08006fb9
 80058d0:	08006fbd 	.word	0x08006fbd
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40002000 	.word	0x40002000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800
 80058e8:	fffffcff 	.word	0xfffffcff
 80058ec:	08002e71 	.word	0x08002e71

080058f0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80058f0:	213d      	movs	r1, #61	@ 0x3d
{
 80058f2:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80058f4:	5c42      	ldrb	r2, [r0, r1]
{
 80058f6:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80058f8:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 80058fa:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80058fc:	2a01      	cmp	r2, #1
 80058fe:	d110      	bne.n	8005922 <HAL_TIM_Base_Start+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	3201      	adds	r2, #1
 8005902:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a0e      	ldr	r2, [pc, #56]	@ (8005940 <HAL_TIM_Base_Start+0x50>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00b      	beq.n	8005924 <HAL_TIM_Base_Start+0x34>
 800590c:	2280      	movs	r2, #128	@ 0x80
 800590e:	05d2      	lsls	r2, r2, #23
 8005910:	4293      	cmp	r3, r2
 8005912:	d007      	beq.n	8005924 <HAL_TIM_Base_Start+0x34>
 8005914:	4a0b      	ldr	r2, [pc, #44]	@ (8005944 <HAL_TIM_Base_Start+0x54>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4322      	orrs	r2, r4
 800591e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005920:	2000      	movs	r0, #0
}
 8005922:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	4908      	ldr	r1, [pc, #32]	@ (8005948 <HAL_TIM_Base_Start+0x58>)
 8005928:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	2a06      	cmp	r2, #6
 800592c:	d0f8      	beq.n	8005920 <HAL_TIM_Base_Start+0x30>
 800592e:	3907      	subs	r1, #7
 8005930:	428a      	cmp	r2, r1
 8005932:	d0f5      	beq.n	8005920 <HAL_TIM_Base_Start+0x30>
      __HAL_TIM_ENABLE(htim);
 8005934:	2101      	movs	r1, #1
 8005936:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8005938:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800593a:	430a      	orrs	r2, r1
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e7f0      	b.n	8005922 <HAL_TIM_Base_Start+0x32>
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40000400 	.word	0x40000400
 8005948:	00010007 	.word	0x00010007

0800594c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800594c:	213d      	movs	r1, #61	@ 0x3d
{
 800594e:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8005950:	5c42      	ldrb	r2, [r0, r1]
{
 8005952:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8005954:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8005956:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8005958:	2a01      	cmp	r2, #1
 800595a:	d113      	bne.n	8005984 <HAL_TIM_Base_Start_IT+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	3201      	adds	r2, #1
 800595e:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	4322      	orrs	r2, r4
 8005966:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005968:	4a0e      	ldr	r2, [pc, #56]	@ (80059a4 <HAL_TIM_Base_Start_IT+0x58>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x3a>
 800596e:	2280      	movs	r2, #128	@ 0x80
 8005970:	05d2      	lsls	r2, r2, #23
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x3a>
 8005976:	4a0c      	ldr	r2, [pc, #48]	@ (80059a8 <HAL_TIM_Base_Start_IT+0x5c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4322      	orrs	r2, r4
 8005980:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005982:	2000      	movs	r0, #0
}
 8005984:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	4908      	ldr	r1, [pc, #32]	@ (80059ac <HAL_TIM_Base_Start_IT+0x60>)
 800598a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598c:	2a06      	cmp	r2, #6
 800598e:	d0f8      	beq.n	8005982 <HAL_TIM_Base_Start_IT+0x36>
 8005990:	3907      	subs	r1, #7
 8005992:	428a      	cmp	r2, r1
 8005994:	d0f5      	beq.n	8005982 <HAL_TIM_Base_Start_IT+0x36>
      __HAL_TIM_ENABLE(htim);
 8005996:	2101      	movs	r1, #1
 8005998:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800599a:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800599c:	430a      	orrs	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e7f0      	b.n	8005984 <HAL_TIM_Base_Start_IT+0x38>
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40000400 	.word	0x40000400
 80059ac:	00010007 	.word	0x00010007

080059b0 <HAL_TIM_OC_Init>:
{
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80059b4:	d100      	bne.n	80059b8 <HAL_TIM_OC_Init+0x8>
 80059b6:	e096      	b.n	8005ae6 <HAL_TIM_OC_Init+0x136>
  if (htim->State == HAL_TIM_STATE_RESET)
 80059b8:	233d      	movs	r3, #61	@ 0x3d
 80059ba:	5cc3      	ldrb	r3, [r0, r3]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d130      	bne.n	8005a24 <HAL_TIM_OC_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 80059c2:	333c      	adds	r3, #60	@ 0x3c
 80059c4:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80059c6:	2284      	movs	r2, #132	@ 0x84
 80059c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005b08 <HAL_TIM_OC_Init+0x158>)
 80059ca:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80059cc:	4b4f      	ldr	r3, [pc, #316]	@ (8005b0c <HAL_TIM_OC_Init+0x15c>)
 80059ce:	3204      	adds	r2, #4
 80059d0:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80059d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005b10 <HAL_TIM_OC_Init+0x160>)
 80059d4:	3204      	adds	r2, #4
 80059d6:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80059d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005b14 <HAL_TIM_OC_Init+0x164>)
 80059da:	3204      	adds	r2, #4
 80059dc:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80059de:	4b4e      	ldr	r3, [pc, #312]	@ (8005b18 <HAL_TIM_OC_Init+0x168>)
 80059e0:	3204      	adds	r2, #4
 80059e2:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80059e4:	4b4d      	ldr	r3, [pc, #308]	@ (8005b1c <HAL_TIM_OC_Init+0x16c>)
 80059e6:	3204      	adds	r2, #4
 80059e8:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80059ea:	4b4d      	ldr	r3, [pc, #308]	@ (8005b20 <HAL_TIM_OC_Init+0x170>)
 80059ec:	3204      	adds	r2, #4
 80059ee:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80059f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005b24 <HAL_TIM_OC_Init+0x174>)
 80059f2:	3204      	adds	r2, #4
 80059f4:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80059f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005b28 <HAL_TIM_OC_Init+0x178>)
 80059f8:	3204      	adds	r2, #4
 80059fa:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80059fc:	4b4b      	ldr	r3, [pc, #300]	@ (8005b2c <HAL_TIM_OC_Init+0x17c>)
 80059fe:	3204      	adds	r2, #4
 8005a00:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005a02:	4b4b      	ldr	r3, [pc, #300]	@ (8005b30 <HAL_TIM_OC_Init+0x180>)
 8005a04:	3204      	adds	r2, #4
 8005a06:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005a08:	4b4a      	ldr	r3, [pc, #296]	@ (8005b34 <HAL_TIM_OC_Init+0x184>)
 8005a0a:	3204      	adds	r2, #4
 8005a0c:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b38 <HAL_TIM_OC_Init+0x188>)
 8005a10:	3204      	adds	r2, #4
 8005a12:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005a14:	4b49      	ldr	r3, [pc, #292]	@ (8005b3c <HAL_TIM_OC_Init+0x18c>)
 8005a16:	3204      	adds	r2, #4
 8005a18:	5083      	str	r3, [r0, r2]
    if (htim->OC_MspInitCallback == NULL)
 8005a1a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d064      	beq.n	8005aea <HAL_TIM_OC_Init+0x13a>
    htim->OC_MspInitCallback(htim);
 8005a20:	0020      	movs	r0, r4
 8005a22:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	233d      	movs	r3, #61	@ 0x3d
 8005a26:	2202      	movs	r2, #2
 8005a28:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a2a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a2c:	4e44      	ldr	r6, [pc, #272]	@ (8005b40 <HAL_TIM_OC_Init+0x190>)
  tmpcr1 = TIMx->CR1;
 8005a2e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a30:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a32:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005a34:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a36:	42b3      	cmp	r3, r6
 8005a38:	d016      	beq.n	8005a68 <HAL_TIM_OC_Init+0xb8>
 8005a3a:	2680      	movs	r6, #128	@ 0x80
 8005a3c:	05f6      	lsls	r6, r6, #23
 8005a3e:	42b3      	cmp	r3, r6
 8005a40:	d012      	beq.n	8005a68 <HAL_TIM_OC_Init+0xb8>
 8005a42:	4e40      	ldr	r6, [pc, #256]	@ (8005b44 <HAL_TIM_OC_Init+0x194>)
 8005a44:	42b3      	cmp	r3, r6
 8005a46:	d045      	beq.n	8005ad4 <HAL_TIM_OC_Init+0x124>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a48:	4e3f      	ldr	r6, [pc, #252]	@ (8005b48 <HAL_TIM_OC_Init+0x198>)
 8005a4a:	42b3      	cmp	r3, r6
 8005a4c:	d046      	beq.n	8005adc <HAL_TIM_OC_Init+0x12c>
 8005a4e:	4e3f      	ldr	r6, [pc, #252]	@ (8005b4c <HAL_TIM_OC_Init+0x19c>)
 8005a50:	42b3      	cmp	r3, r6
 8005a52:	d04d      	beq.n	8005af0 <HAL_TIM_OC_Init+0x140>
 8005a54:	4e3e      	ldr	r6, [pc, #248]	@ (8005b50 <HAL_TIM_OC_Init+0x1a0>)
 8005a56:	42b3      	cmp	r3, r6
 8005a58:	d04a      	beq.n	8005af0 <HAL_TIM_OC_Init+0x140>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5a:	2680      	movs	r6, #128	@ 0x80
 8005a5c:	43b2      	bics	r2, r6
 8005a5e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005a60:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a62:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a64:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a66:	e012      	b.n	8005a8e <HAL_TIM_OC_Init+0xde>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a68:	2670      	movs	r6, #112	@ 0x70
 8005a6a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	68a6      	ldr	r6, [r4, #8]
 8005a6e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a70:	4e38      	ldr	r6, [pc, #224]	@ (8005b54 <HAL_TIM_OC_Init+0x1a4>)
 8005a72:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a74:	6926      	ldr	r6, [r4, #16]
 8005a76:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a78:	2680      	movs	r6, #128	@ 0x80
 8005a7a:	43b2      	bics	r2, r6
 8005a7c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005a7e:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	4a2f      	ldr	r2, [pc, #188]	@ (8005b40 <HAL_TIM_OC_Init+0x190>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a82:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a84:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_OC_Init+0xde>
    TIMx->RCR = Structure->RepetitionCounter;
 8005a8a:	6962      	ldr	r2, [r4, #20]
 8005a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005a8e:	2201      	movs	r2, #1
 8005a90:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a92:	6919      	ldr	r1, [r3, #16]
 8005a94:	420a      	tst	r2, r1
 8005a96:	d002      	beq.n	8005a9e <HAL_TIM_OC_Init+0xee>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a98:	6919      	ldr	r1, [r3, #16]
 8005a9a:	4391      	bics	r1, r2
 8005a9c:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8005aa2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	3a0a      	subs	r2, #10
 8005aa8:	54a3      	strb	r3, [r4, r2]
 8005aaa:	3201      	adds	r2, #1
 8005aac:	54a3      	strb	r3, [r4, r2]
 8005aae:	3201      	adds	r2, #1
 8005ab0:	54a3      	strb	r3, [r4, r2]
 8005ab2:	3201      	adds	r2, #1
 8005ab4:	54a3      	strb	r3, [r4, r2]
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	54a3      	strb	r3, [r4, r2]
 8005aba:	3201      	adds	r2, #1
 8005abc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abe:	3201      	adds	r2, #1
 8005ac0:	54a3      	strb	r3, [r4, r2]
 8005ac2:	3201      	adds	r2, #1
 8005ac4:	54a3      	strb	r3, [r4, r2]
 8005ac6:	3201      	adds	r2, #1
 8005ac8:	54a3      	strb	r3, [r4, r2]
 8005aca:	3201      	adds	r2, #1
 8005acc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	3a0a      	subs	r2, #10
 8005ad0:	54a3      	strb	r3, [r4, r2]
}
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad4:	2670      	movs	r6, #112	@ 0x70
 8005ad6:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	68a6      	ldr	r6, [r4, #8]
 8005ada:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005adc:	4e1d      	ldr	r6, [pc, #116]	@ (8005b54 <HAL_TIM_OC_Init+0x1a4>)
 8005ade:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae0:	6926      	ldr	r6, [r4, #16]
 8005ae2:	4332      	orrs	r2, r6
 8005ae4:	e7b9      	b.n	8005a5a <HAL_TIM_OC_Init+0xaa>
    return HAL_ERROR;
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	e7f3      	b.n	8005ad2 <HAL_TIM_OC_Init+0x122>
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005aea:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <HAL_TIM_OC_Init+0x1a8>)
 8005aec:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8005aee:	e797      	b.n	8005a20 <HAL_TIM_OC_Init+0x70>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af0:	4e18      	ldr	r6, [pc, #96]	@ (8005b54 <HAL_TIM_OC_Init+0x1a4>)
 8005af2:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af4:	6926      	ldr	r6, [r4, #16]
 8005af6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af8:	2680      	movs	r6, #128	@ 0x80
 8005afa:	43b2      	bics	r2, r6
 8005afc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005afe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b00:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b02:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b04:	e7c1      	b.n	8005a8a <HAL_TIM_OC_Init+0xda>
 8005b06:	46c0      	nop			@ (mov r8, r8)
 8005b08:	0800571d 	.word	0x0800571d
 8005b0c:	08005721 	.word	0x08005721
 8005b10:	08005739 	.word	0x08005739
 8005b14:	0800573d 	.word	0x0800573d
 8005b18:	08005729 	.word	0x08005729
 8005b1c:	0800572d 	.word	0x0800572d
 8005b20:	08005725 	.word	0x08005725
 8005b24:	08005731 	.word	0x08005731
 8005b28:	08005735 	.word	0x08005735
 8005b2c:	08005741 	.word	0x08005741
 8005b30:	08006fb1 	.word	0x08006fb1
 8005b34:	08006fb5 	.word	0x08006fb5
 8005b38:	08006fb9 	.word	0x08006fb9
 8005b3c:	08006fbd 	.word	0x08006fbd
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40002000 	.word	0x40002000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800
 8005b54:	fffffcff 	.word	0xfffffcff
 8005b58:	08005711 	.word	0x08005711

08005b5c <HAL_TIM_OC_Start_IT>:
{
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	2910      	cmp	r1, #16
 8005b60:	d803      	bhi.n	8005b6a <HAL_TIM_OC_Start_IT+0xe>
 8005b62:	4a38      	ldr	r2, [pc, #224]	@ (8005c44 <HAL_TIM_OC_Start_IT+0xe8>)
 8005b64:	008b      	lsls	r3, r1, #2
 8005b66:	58d3      	ldr	r3, [r2, r3]
 8005b68:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b6a:	2343      	movs	r3, #67	@ 0x43
 8005b6c:	5cc2      	ldrb	r2, [r0, r3]
 8005b6e:	2a01      	cmp	r2, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b72:	2202      	movs	r2, #2
 8005b74:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8005b76:	2001      	movs	r0, #1
}
 8005b78:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7a:	233e      	movs	r3, #62	@ 0x3e
 8005b7c:	5cc2      	ldrb	r2, [r0, r3]
 8005b7e:	2a01      	cmp	r2, #1
 8005b80:	d1f9      	bne.n	8005b76 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b82:	2402      	movs	r4, #2
 8005b84:	54c4      	strb	r4, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b86:	6803      	ldr	r3, [r0, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	4322      	orrs	r2, r4
 8005b8c:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b8e:	2201      	movs	r2, #1
 8005b90:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8005b92:	6a19      	ldr	r1, [r3, #32]
 8005b94:	4391      	bics	r1, r2
 8005b96:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b98:	6a19      	ldr	r1, [r3, #32]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c48 <HAL_TIM_OC_Start_IT+0xec>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d049      	beq.n	8005c38 <HAL_TIM_OC_Start_IT+0xdc>
 8005ba4:	4a29      	ldr	r2, [pc, #164]	@ (8005c4c <HAL_TIM_OC_Start_IT+0xf0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d040      	beq.n	8005c2c <HAL_TIM_OC_Start_IT+0xd0>
 8005baa:	4a29      	ldr	r2, [pc, #164]	@ (8005c50 <HAL_TIM_OC_Start_IT+0xf4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d03d      	beq.n	8005c2c <HAL_TIM_OC_Start_IT+0xd0>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb0:	2280      	movs	r2, #128	@ 0x80
 8005bb2:	05d2      	lsls	r2, r2, #23
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d002      	beq.n	8005bbe <HAL_TIM_OC_Start_IT+0x62>
 8005bb8:	4a26      	ldr	r2, [pc, #152]	@ (8005c54 <HAL_TIM_OC_Start_IT+0xf8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d107      	bne.n	8005bce <HAL_TIM_OC_Start_IT+0x72>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	4925      	ldr	r1, [pc, #148]	@ (8005c58 <HAL_TIM_OC_Start_IT+0xfc>)
 8005bc2:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	2a06      	cmp	r2, #6
 8005bc6:	d006      	beq.n	8005bd6 <HAL_TIM_OC_Start_IT+0x7a>
 8005bc8:	3907      	subs	r1, #7
 8005bca:	428a      	cmp	r2, r1
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_OC_Start_IT+0x7a>
        __HAL_TIM_ENABLE(htim);
 8005bce:	2101      	movs	r1, #1
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
    return HAL_ERROR;
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	e7ce      	b.n	8005b78 <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bda:	233f      	movs	r3, #63	@ 0x3f
 8005bdc:	5cc2      	ldrb	r2, [r0, r3]
 8005bde:	2a01      	cmp	r2, #1
 8005be0:	d1c9      	bne.n	8005b76 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be2:	2202      	movs	r2, #2
 8005be4:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005be6:	6803      	ldr	r3, [r0, #0]
 8005be8:	2004      	movs	r0, #4
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	4302      	orrs	r2, r0
 8005bee:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8005bf0:	e7cd      	b.n	8005b8e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bf2:	2340      	movs	r3, #64	@ 0x40
 8005bf4:	5cc2      	ldrb	r2, [r0, r3]
 8005bf6:	2a01      	cmp	r2, #1
 8005bf8:	d1bd      	bne.n	8005b76 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005bfe:	6803      	ldr	r3, [r0, #0]
 8005c00:	2008      	movs	r0, #8
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	4302      	orrs	r2, r0
 8005c06:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8005c08:	e7c1      	b.n	8005b8e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c0a:	2341      	movs	r3, #65	@ 0x41
 8005c0c:	5cc2      	ldrb	r2, [r0, r3]
 8005c0e:	2a01      	cmp	r2, #1
 8005c10:	d1b1      	bne.n	8005b76 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c12:	2202      	movs	r2, #2
 8005c14:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c16:	6803      	ldr	r3, [r0, #0]
 8005c18:	2010      	movs	r0, #16
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	4302      	orrs	r2, r0
 8005c1e:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8005c20:	e7b5      	b.n	8005b8e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c22:	2342      	movs	r3, #66	@ 0x42
 8005c24:	5cc2      	ldrb	r2, [r0, r3]
 8005c26:	2a01      	cmp	r2, #1
 8005c28:	d0a3      	beq.n	8005b72 <HAL_TIM_OC_Start_IT+0x16>
 8005c2a:	e7a4      	b.n	8005b76 <HAL_TIM_OC_Start_IT+0x1a>
      __HAL_TIM_MOE_ENABLE(htim);
 8005c2c:	2280      	movs	r2, #128	@ 0x80
 8005c2e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005c30:	0212      	lsls	r2, r2, #8
 8005c32:	430a      	orrs	r2, r1
 8005c34:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c36:	e7ca      	b.n	8005bce <HAL_TIM_OC_Start_IT+0x72>
      __HAL_TIM_MOE_ENABLE(htim);
 8005c38:	2280      	movs	r2, #128	@ 0x80
 8005c3a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005c3c:	0212      	lsls	r2, r2, #8
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c42:	e7bc      	b.n	8005bbe <HAL_TIM_OC_Start_IT+0x62>
 8005c44:	08008730 	.word	0x08008730
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800
 8005c54:	40000400 	.word	0x40000400
 8005c58:	00010007 	.word	0x00010007

08005c5c <HAL_TIM_OC_Stop_IT>:
{
 8005c5c:	b510      	push	{r4, lr}
  switch (Channel)
 8005c5e:	2908      	cmp	r1, #8
 8005c60:	d004      	beq.n	8005c6c <HAL_TIM_OC_Stop_IT+0x10>
 8005c62:	d82a      	bhi.n	8005cba <HAL_TIM_OC_Stop_IT+0x5e>
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d048      	beq.n	8005cfa <HAL_TIM_OC_Stop_IT+0x9e>
 8005c68:	2904      	cmp	r1, #4
 8005c6a:	d12e      	bne.n	8005cca <HAL_TIM_OC_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005c6c:	6803      	ldr	r3, [r0, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	438a      	bics	r2, r1
 8005c72:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c74:	2401      	movs	r4, #1
 8005c76:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005c78:	6a1a      	ldr	r2, [r3, #32]
 8005c7a:	43a2      	bics	r2, r4
 8005c7c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c82:	4a26      	ldr	r2, [pc, #152]	@ (8005d1c <HAL_TIM_OC_Stop_IT+0xc0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d022      	beq.n	8005cce <HAL_TIM_OC_Stop_IT+0x72>
 8005c88:	4a25      	ldr	r2, [pc, #148]	@ (8005d20 <HAL_TIM_OC_Stop_IT+0xc4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01f      	beq.n	8005cce <HAL_TIM_OC_Stop_IT+0x72>
 8005c8e:	4a25      	ldr	r2, [pc, #148]	@ (8005d24 <HAL_TIM_OC_Stop_IT+0xc8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d01c      	beq.n	8005cce <HAL_TIM_OC_Stop_IT+0x72>
    __HAL_TIM_DISABLE(htim);
 8005c94:	6a1c      	ldr	r4, [r3, #32]
 8005c96:	4a24      	ldr	r2, [pc, #144]	@ (8005d28 <HAL_TIM_OC_Stop_IT+0xcc>)
 8005c98:	4214      	tst	r4, r2
 8005c9a:	d107      	bne.n	8005cac <HAL_TIM_OC_Stop_IT+0x50>
 8005c9c:	6a1c      	ldr	r4, [r3, #32]
 8005c9e:	4a23      	ldr	r2, [pc, #140]	@ (8005d2c <HAL_TIM_OC_Stop_IT+0xd0>)
 8005ca0:	4214      	tst	r4, r2
 8005ca2:	d103      	bne.n	8005cac <HAL_TIM_OC_Stop_IT+0x50>
 8005ca4:	2401      	movs	r4, #1
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	43a2      	bics	r2, r4
 8005caa:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_OC_Stop_IT+0x8c>
 8005cb0:	233e      	movs	r3, #62	@ 0x3e
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	e008      	b.n	8005ccc <HAL_TIM_OC_Stop_IT+0x70>
 8005cba:	290c      	cmp	r1, #12
 8005cbc:	d105      	bne.n	8005cca <HAL_TIM_OC_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005cbe:	2410      	movs	r4, #16
 8005cc0:	6803      	ldr	r3, [r0, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	43a2      	bics	r2, r4
 8005cc6:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8005cc8:	e7d4      	b.n	8005c74 <HAL_TIM_OC_Stop_IT+0x18>
  switch (Channel)
 8005cca:	2001      	movs	r0, #1
}
 8005ccc:	bd10      	pop	{r4, pc}
      __HAL_TIM_MOE_DISABLE(htim);
 8005cce:	6a1c      	ldr	r4, [r3, #32]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <HAL_TIM_OC_Stop_IT+0xcc>)
 8005cd2:	4214      	tst	r4, r2
 8005cd4:	d1de      	bne.n	8005c94 <HAL_TIM_OC_Stop_IT+0x38>
 8005cd6:	6a1c      	ldr	r4, [r3, #32]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	@ (8005d2c <HAL_TIM_OC_Stop_IT+0xd0>)
 8005cda:	4214      	tst	r4, r2
 8005cdc:	d1da      	bne.n	8005c94 <HAL_TIM_OC_Stop_IT+0x38>
 8005cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ce0:	4c13      	ldr	r4, [pc, #76]	@ (8005d30 <HAL_TIM_OC_Stop_IT+0xd4>)
 8005ce2:	4022      	ands	r2, r4
 8005ce4:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ce6:	e7d5      	b.n	8005c94 <HAL_TIM_OC_Stop_IT+0x38>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ce8:	2904      	cmp	r1, #4
 8005cea:	d011      	beq.n	8005d10 <HAL_TIM_OC_Stop_IT+0xb4>
 8005cec:	2908      	cmp	r1, #8
 8005cee:	d00a      	beq.n	8005d06 <HAL_TIM_OC_Stop_IT+0xaa>
 8005cf0:	2341      	movs	r3, #65	@ 0x41
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e7e8      	b.n	8005ccc <HAL_TIM_OC_Stop_IT+0x70>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005cfa:	2402      	movs	r4, #2
 8005cfc:	6803      	ldr	r3, [r0, #0]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	43a2      	bics	r2, r4
 8005d02:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8005d04:	e7b6      	b.n	8005c74 <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d06:	2340      	movs	r3, #64	@ 0x40
 8005d08:	2201      	movs	r2, #1
 8005d0a:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e7dd      	b.n	8005ccc <HAL_TIM_OC_Stop_IT+0x70>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d10:	233f      	movs	r3, #63	@ 0x3f
 8005d12:	2201      	movs	r2, #1
 8005d14:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8005d16:	2000      	movs	r0, #0
 8005d18:	e7d8      	b.n	8005ccc <HAL_TIM_OC_Stop_IT+0x70>
 8005d1a:	46c0      	nop			@ (mov r8, r8)
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800
 8005d28:	00001111 	.word	0x00001111
 8005d2c:	00000444 	.word	0x00000444
 8005d30:	ffff7fff 	.word	0xffff7fff

08005d34 <HAL_TIM_PWM_Init>:
{
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8005d38:	d100      	bne.n	8005d3c <HAL_TIM_PWM_Init+0x8>
 8005d3a:	e096      	b.n	8005e6a <HAL_TIM_PWM_Init+0x136>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3c:	233d      	movs	r3, #61	@ 0x3d
 8005d3e:	5cc3      	ldrb	r3, [r0, r3]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d130      	bne.n	8005da8 <HAL_TIM_PWM_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8005d46:	333c      	adds	r3, #60	@ 0x3c
 8005d48:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005d4a:	2284      	movs	r2, #132	@ 0x84
 8005d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8005e8c <HAL_TIM_PWM_Init+0x158>)
 8005d4e:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005d50:	4b4f      	ldr	r3, [pc, #316]	@ (8005e90 <HAL_TIM_PWM_Init+0x15c>)
 8005d52:	3204      	adds	r2, #4
 8005d54:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005d56:	4b4f      	ldr	r3, [pc, #316]	@ (8005e94 <HAL_TIM_PWM_Init+0x160>)
 8005d58:	3204      	adds	r2, #4
 8005d5a:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8005e98 <HAL_TIM_PWM_Init+0x164>)
 8005d5e:	3204      	adds	r2, #4
 8005d60:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005d62:	4b4e      	ldr	r3, [pc, #312]	@ (8005e9c <HAL_TIM_PWM_Init+0x168>)
 8005d64:	3204      	adds	r2, #4
 8005d66:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005d68:	4b4d      	ldr	r3, [pc, #308]	@ (8005ea0 <HAL_TIM_PWM_Init+0x16c>)
 8005d6a:	3204      	adds	r2, #4
 8005d6c:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8005ea4 <HAL_TIM_PWM_Init+0x170>)
 8005d70:	3204      	adds	r2, #4
 8005d72:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005d74:	4b4c      	ldr	r3, [pc, #304]	@ (8005ea8 <HAL_TIM_PWM_Init+0x174>)
 8005d76:	3204      	adds	r2, #4
 8005d78:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8005eac <HAL_TIM_PWM_Init+0x178>)
 8005d7c:	3204      	adds	r2, #4
 8005d7e:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005d80:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb0 <HAL_TIM_PWM_Init+0x17c>)
 8005d82:	3204      	adds	r2, #4
 8005d84:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005d86:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb4 <HAL_TIM_PWM_Init+0x180>)
 8005d88:	3204      	adds	r2, #4
 8005d8a:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb8 <HAL_TIM_PWM_Init+0x184>)
 8005d8e:	3204      	adds	r2, #4
 8005d90:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005d92:	4b4a      	ldr	r3, [pc, #296]	@ (8005ebc <HAL_TIM_PWM_Init+0x188>)
 8005d94:	3204      	adds	r2, #4
 8005d96:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005d98:	4b49      	ldr	r3, [pc, #292]	@ (8005ec0 <HAL_TIM_PWM_Init+0x18c>)
 8005d9a:	3204      	adds	r2, #4
 8005d9c:	5083      	str	r3, [r0, r2]
    if (htim->PWM_MspInitCallback == NULL)
 8005d9e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d064      	beq.n	8005e6e <HAL_TIM_PWM_Init+0x13a>
    htim->PWM_MspInitCallback(htim);
 8005da4:	0020      	movs	r0, r4
 8005da6:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	233d      	movs	r3, #61	@ 0x3d
 8005daa:	2202      	movs	r2, #2
 8005dac:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dae:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db0:	4e44      	ldr	r6, [pc, #272]	@ (8005ec4 <HAL_TIM_PWM_Init+0x190>)
  tmpcr1 = TIMx->CR1;
 8005db2:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db4:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db6:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005db8:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dba:	42b3      	cmp	r3, r6
 8005dbc:	d016      	beq.n	8005dec <HAL_TIM_PWM_Init+0xb8>
 8005dbe:	2680      	movs	r6, #128	@ 0x80
 8005dc0:	05f6      	lsls	r6, r6, #23
 8005dc2:	42b3      	cmp	r3, r6
 8005dc4:	d012      	beq.n	8005dec <HAL_TIM_PWM_Init+0xb8>
 8005dc6:	4e40      	ldr	r6, [pc, #256]	@ (8005ec8 <HAL_TIM_PWM_Init+0x194>)
 8005dc8:	42b3      	cmp	r3, r6
 8005dca:	d045      	beq.n	8005e58 <HAL_TIM_PWM_Init+0x124>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dcc:	4e3f      	ldr	r6, [pc, #252]	@ (8005ecc <HAL_TIM_PWM_Init+0x198>)
 8005dce:	42b3      	cmp	r3, r6
 8005dd0:	d046      	beq.n	8005e60 <HAL_TIM_PWM_Init+0x12c>
 8005dd2:	4e3f      	ldr	r6, [pc, #252]	@ (8005ed0 <HAL_TIM_PWM_Init+0x19c>)
 8005dd4:	42b3      	cmp	r3, r6
 8005dd6:	d04d      	beq.n	8005e74 <HAL_TIM_PWM_Init+0x140>
 8005dd8:	4e3e      	ldr	r6, [pc, #248]	@ (8005ed4 <HAL_TIM_PWM_Init+0x1a0>)
 8005dda:	42b3      	cmp	r3, r6
 8005ddc:	d04a      	beq.n	8005e74 <HAL_TIM_PWM_Init+0x140>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dde:	2680      	movs	r6, #128	@ 0x80
 8005de0:	43b2      	bics	r2, r6
 8005de2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005de4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005de8:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dea:	e012      	b.n	8005e12 <HAL_TIM_PWM_Init+0xde>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dec:	2670      	movs	r6, #112	@ 0x70
 8005dee:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8005df0:	68a6      	ldr	r6, [r4, #8]
 8005df2:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df4:	4e38      	ldr	r6, [pc, #224]	@ (8005ed8 <HAL_TIM_PWM_Init+0x1a4>)
 8005df6:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df8:	6926      	ldr	r6, [r4, #16]
 8005dfa:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dfc:	2680      	movs	r6, #128	@ 0x80
 8005dfe:	43b2      	bics	r2, r6
 8005e00:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005e02:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e04:	4a2f      	ldr	r2, [pc, #188]	@ (8005ec4 <HAL_TIM_PWM_Init+0x190>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e06:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e08:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_PWM_Init+0xde>
    TIMx->RCR = Structure->RepetitionCounter;
 8005e0e:	6962      	ldr	r2, [r4, #20]
 8005e10:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005e12:	2201      	movs	r2, #1
 8005e14:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e16:	6919      	ldr	r1, [r3, #16]
 8005e18:	420a      	tst	r2, r1
 8005e1a:	d002      	beq.n	8005e22 <HAL_TIM_PWM_Init+0xee>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e1c:	6919      	ldr	r1, [r3, #16]
 8005e1e:	4391      	bics	r1, r2
 8005e20:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e22:	2301      	movs	r3, #1
 8005e24:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8005e26:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e28:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2a:	3a0a      	subs	r2, #10
 8005e2c:	54a3      	strb	r3, [r4, r2]
 8005e2e:	3201      	adds	r2, #1
 8005e30:	54a3      	strb	r3, [r4, r2]
 8005e32:	3201      	adds	r2, #1
 8005e34:	54a3      	strb	r3, [r4, r2]
 8005e36:	3201      	adds	r2, #1
 8005e38:	54a3      	strb	r3, [r4, r2]
 8005e3a:	3201      	adds	r2, #1
 8005e3c:	54a3      	strb	r3, [r4, r2]
 8005e3e:	3201      	adds	r2, #1
 8005e40:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e42:	3201      	adds	r2, #1
 8005e44:	54a3      	strb	r3, [r4, r2]
 8005e46:	3201      	adds	r2, #1
 8005e48:	54a3      	strb	r3, [r4, r2]
 8005e4a:	3201      	adds	r2, #1
 8005e4c:	54a3      	strb	r3, [r4, r2]
 8005e4e:	3201      	adds	r2, #1
 8005e50:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005e52:	3a0a      	subs	r2, #10
 8005e54:	54a3      	strb	r3, [r4, r2]
}
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e58:	2670      	movs	r6, #112	@ 0x70
 8005e5a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8005e5c:	68a6      	ldr	r6, [r4, #8]
 8005e5e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e60:	4e1d      	ldr	r6, [pc, #116]	@ (8005ed8 <HAL_TIM_PWM_Init+0x1a4>)
 8005e62:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e64:	6926      	ldr	r6, [r4, #16]
 8005e66:	4332      	orrs	r2, r6
 8005e68:	e7b9      	b.n	8005dde <HAL_TIM_PWM_Init+0xaa>
    return HAL_ERROR;
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	e7f3      	b.n	8005e56 <HAL_TIM_PWM_Init+0x122>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8005edc <HAL_TIM_PWM_Init+0x1a8>)
 8005e70:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e72:	e797      	b.n	8005da4 <HAL_TIM_PWM_Init+0x70>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e74:	4e18      	ldr	r6, [pc, #96]	@ (8005ed8 <HAL_TIM_PWM_Init+0x1a4>)
 8005e76:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e78:	6926      	ldr	r6, [r4, #16]
 8005e7a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e7c:	2680      	movs	r6, #128	@ 0x80
 8005e7e:	43b2      	bics	r2, r6
 8005e80:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005e82:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e84:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e86:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e88:	e7c1      	b.n	8005e0e <HAL_TIM_PWM_Init+0xda>
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	0800571d 	.word	0x0800571d
 8005e90:	08005721 	.word	0x08005721
 8005e94:	08005739 	.word	0x08005739
 8005e98:	0800573d 	.word	0x0800573d
 8005e9c:	08005729 	.word	0x08005729
 8005ea0:	0800572d 	.word	0x0800572d
 8005ea4:	08005725 	.word	0x08005725
 8005ea8:	08005731 	.word	0x08005731
 8005eac:	08005735 	.word	0x08005735
 8005eb0:	08005741 	.word	0x08005741
 8005eb4:	08006fb1 	.word	0x08006fb1
 8005eb8:	08006fb5 	.word	0x08006fb5
 8005ebc:	08006fb9 	.word	0x08006fb9
 8005ec0:	08006fbd 	.word	0x08006fbd
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40002000 	.word	0x40002000
 8005ed0:	40014400 	.word	0x40014400
 8005ed4:	40014800 	.word	0x40014800
 8005ed8:	fffffcff 	.word	0xfffffcff
 8005edc:	08005715 	.word	0x08005715

08005ee0 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005ee0:	2910      	cmp	r1, #16
 8005ee2:	d803      	bhi.n	8005eec <HAL_TIM_PWM_Start+0xc>
 8005ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f98 <HAL_TIM_PWM_Start+0xb8>)
 8005ee6:	008b      	lsls	r3, r1, #2
 8005ee8:	58d3      	ldr	r3, [r2, r3]
 8005eea:	469f      	mov	pc, r3
 8005eec:	2343      	movs	r3, #67	@ 0x43
 8005eee:	5cc2      	ldrb	r2, [r0, r3]
 8005ef0:	2a01      	cmp	r2, #1
 8005ef2:	d12e      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x72>
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	54c2      	strb	r2, [r0, r3]
 8005ef8:	221f      	movs	r2, #31
 8005efa:	4011      	ands	r1, r2
 8005efc:	3a1e      	subs	r2, #30
 8005efe:	408a      	lsls	r2, r1
 8005f00:	6803      	ldr	r3, [r0, #0]
 8005f02:	6a19      	ldr	r1, [r3, #32]
 8005f04:	4391      	bics	r1, r2
 8005f06:	6219      	str	r1, [r3, #32]
 8005f08:	6a19      	ldr	r1, [r3, #32]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	621a      	str	r2, [r3, #32]
 8005f0e:	4a23      	ldr	r2, [pc, #140]	@ (8005f9c <HAL_TIM_PWM_Start+0xbc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d03a      	beq.n	8005f8a <HAL_TIM_PWM_Start+0xaa>
 8005f14:	4a22      	ldr	r2, [pc, #136]	@ (8005fa0 <HAL_TIM_PWM_Start+0xc0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d031      	beq.n	8005f7e <HAL_TIM_PWM_Start+0x9e>
 8005f1a:	4a22      	ldr	r2, [pc, #136]	@ (8005fa4 <HAL_TIM_PWM_Start+0xc4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d02e      	beq.n	8005f7e <HAL_TIM_PWM_Start+0x9e>
 8005f20:	2280      	movs	r2, #128	@ 0x80
 8005f22:	05d2      	lsls	r2, r2, #23
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d002      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x4e>
 8005f28:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <HAL_TIM_PWM_Start+0xc8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d107      	bne.n	8005f3e <HAL_TIM_PWM_Start+0x5e>
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	491e      	ldr	r1, [pc, #120]	@ (8005fac <HAL_TIM_PWM_Start+0xcc>)
 8005f32:	400a      	ands	r2, r1
 8005f34:	2a06      	cmp	r2, #6
 8005f36:	d006      	beq.n	8005f46 <HAL_TIM_PWM_Start+0x66>
 8005f38:	3907      	subs	r1, #7
 8005f3a:	428a      	cmp	r2, r1
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_PWM_Start+0x66>
 8005f3e:	2101      	movs	r1, #1
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	2000      	movs	r0, #0
 8005f48:	4770      	bx	lr
 8005f4a:	233e      	movs	r3, #62	@ 0x3e
 8005f4c:	5cc2      	ldrb	r2, [r0, r3]
 8005f4e:	2a01      	cmp	r2, #1
 8005f50:	d0d0      	beq.n	8005ef4 <HAL_TIM_PWM_Start+0x14>
 8005f52:	2001      	movs	r0, #1
 8005f54:	e7f8      	b.n	8005f48 <HAL_TIM_PWM_Start+0x68>
 8005f56:	233f      	movs	r3, #63	@ 0x3f
 8005f58:	5cc2      	ldrb	r2, [r0, r3]
 8005f5a:	2a01      	cmp	r2, #1
 8005f5c:	d0ca      	beq.n	8005ef4 <HAL_TIM_PWM_Start+0x14>
 8005f5e:	e7f8      	b.n	8005f52 <HAL_TIM_PWM_Start+0x72>
 8005f60:	2340      	movs	r3, #64	@ 0x40
 8005f62:	5cc2      	ldrb	r2, [r0, r3]
 8005f64:	2a01      	cmp	r2, #1
 8005f66:	d0c5      	beq.n	8005ef4 <HAL_TIM_PWM_Start+0x14>
 8005f68:	e7f3      	b.n	8005f52 <HAL_TIM_PWM_Start+0x72>
 8005f6a:	2341      	movs	r3, #65	@ 0x41
 8005f6c:	5cc2      	ldrb	r2, [r0, r3]
 8005f6e:	2a01      	cmp	r2, #1
 8005f70:	d0c0      	beq.n	8005ef4 <HAL_TIM_PWM_Start+0x14>
 8005f72:	e7ee      	b.n	8005f52 <HAL_TIM_PWM_Start+0x72>
 8005f74:	2342      	movs	r3, #66	@ 0x42
 8005f76:	5cc2      	ldrb	r2, [r0, r3]
 8005f78:	2a01      	cmp	r2, #1
 8005f7a:	d0bb      	beq.n	8005ef4 <HAL_TIM_PWM_Start+0x14>
 8005f7c:	e7e9      	b.n	8005f52 <HAL_TIM_PWM_Start+0x72>
 8005f7e:	2280      	movs	r2, #128	@ 0x80
 8005f80:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005f82:	0212      	lsls	r2, r2, #8
 8005f84:	430a      	orrs	r2, r1
 8005f86:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f88:	e7d9      	b.n	8005f3e <HAL_TIM_PWM_Start+0x5e>
 8005f8a:	2280      	movs	r2, #128	@ 0x80
 8005f8c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005f8e:	0212      	lsls	r2, r2, #8
 8005f90:	430a      	orrs	r2, r1
 8005f92:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f94:	e7cb      	b.n	8005f2e <HAL_TIM_PWM_Start+0x4e>
 8005f96:	46c0      	nop			@ (mov r8, r8)
 8005f98:	08008774 	.word	0x08008774
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	00010007 	.word	0x00010007

08005fb0 <HAL_TIM_IC_Init>:
{
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8005fb4:	d100      	bne.n	8005fb8 <HAL_TIM_IC_Init+0x8>
 8005fb6:	e096      	b.n	80060e6 <HAL_TIM_IC_Init+0x136>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb8:	233d      	movs	r3, #61	@ 0x3d
 8005fba:	5cc3      	ldrb	r3, [r0, r3]
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d130      	bne.n	8006024 <HAL_TIM_IC_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8005fc2:	333c      	adds	r3, #60	@ 0x3c
 8005fc4:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005fc6:	2284      	movs	r2, #132	@ 0x84
 8005fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8006108 <HAL_TIM_IC_Init+0x158>)
 8005fca:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800610c <HAL_TIM_IC_Init+0x15c>)
 8005fce:	3204      	adds	r2, #4
 8005fd0:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8006110 <HAL_TIM_IC_Init+0x160>)
 8005fd4:	3204      	adds	r2, #4
 8005fd6:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8006114 <HAL_TIM_IC_Init+0x164>)
 8005fda:	3204      	adds	r2, #4
 8005fdc:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005fde:	4b4e      	ldr	r3, [pc, #312]	@ (8006118 <HAL_TIM_IC_Init+0x168>)
 8005fe0:	3204      	adds	r2, #4
 8005fe2:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005fe4:	4b4d      	ldr	r3, [pc, #308]	@ (800611c <HAL_TIM_IC_Init+0x16c>)
 8005fe6:	3204      	adds	r2, #4
 8005fe8:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005fea:	4b4d      	ldr	r3, [pc, #308]	@ (8006120 <HAL_TIM_IC_Init+0x170>)
 8005fec:	3204      	adds	r2, #4
 8005fee:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8006124 <HAL_TIM_IC_Init+0x174>)
 8005ff2:	3204      	adds	r2, #4
 8005ff4:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8006128 <HAL_TIM_IC_Init+0x178>)
 8005ff8:	3204      	adds	r2, #4
 8005ffa:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800612c <HAL_TIM_IC_Init+0x17c>)
 8005ffe:	3204      	adds	r2, #4
 8006000:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006002:	4b4b      	ldr	r3, [pc, #300]	@ (8006130 <HAL_TIM_IC_Init+0x180>)
 8006004:	3204      	adds	r2, #4
 8006006:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006008:	4b4a      	ldr	r3, [pc, #296]	@ (8006134 <HAL_TIM_IC_Init+0x184>)
 800600a:	3204      	adds	r2, #4
 800600c:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800600e:	4b4a      	ldr	r3, [pc, #296]	@ (8006138 <HAL_TIM_IC_Init+0x188>)
 8006010:	3204      	adds	r2, #4
 8006012:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006014:	4b49      	ldr	r3, [pc, #292]	@ (800613c <HAL_TIM_IC_Init+0x18c>)
 8006016:	3204      	adds	r2, #4
 8006018:	5083      	str	r3, [r0, r2]
    if (htim->IC_MspInitCallback == NULL)
 800601a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800601c:	2b00      	cmp	r3, #0
 800601e:	d064      	beq.n	80060ea <HAL_TIM_IC_Init+0x13a>
    htim->IC_MspInitCallback(htim);
 8006020:	0020      	movs	r0, r4
 8006022:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	233d      	movs	r3, #61	@ 0x3d
 8006026:	2202      	movs	r2, #2
 8006028:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800602c:	4e44      	ldr	r6, [pc, #272]	@ (8006140 <HAL_TIM_IC_Init+0x190>)
  tmpcr1 = TIMx->CR1;
 800602e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006030:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006032:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006034:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006036:	42b3      	cmp	r3, r6
 8006038:	d016      	beq.n	8006068 <HAL_TIM_IC_Init+0xb8>
 800603a:	2680      	movs	r6, #128	@ 0x80
 800603c:	05f6      	lsls	r6, r6, #23
 800603e:	42b3      	cmp	r3, r6
 8006040:	d012      	beq.n	8006068 <HAL_TIM_IC_Init+0xb8>
 8006042:	4e40      	ldr	r6, [pc, #256]	@ (8006144 <HAL_TIM_IC_Init+0x194>)
 8006044:	42b3      	cmp	r3, r6
 8006046:	d045      	beq.n	80060d4 <HAL_TIM_IC_Init+0x124>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006048:	4e3f      	ldr	r6, [pc, #252]	@ (8006148 <HAL_TIM_IC_Init+0x198>)
 800604a:	42b3      	cmp	r3, r6
 800604c:	d046      	beq.n	80060dc <HAL_TIM_IC_Init+0x12c>
 800604e:	4e3f      	ldr	r6, [pc, #252]	@ (800614c <HAL_TIM_IC_Init+0x19c>)
 8006050:	42b3      	cmp	r3, r6
 8006052:	d04d      	beq.n	80060f0 <HAL_TIM_IC_Init+0x140>
 8006054:	4e3e      	ldr	r6, [pc, #248]	@ (8006150 <HAL_TIM_IC_Init+0x1a0>)
 8006056:	42b3      	cmp	r3, r6
 8006058:	d04a      	beq.n	80060f0 <HAL_TIM_IC_Init+0x140>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800605a:	2680      	movs	r6, #128	@ 0x80
 800605c:	43b2      	bics	r2, r6
 800605e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006060:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006062:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006064:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006066:	e012      	b.n	800608e <HAL_TIM_IC_Init+0xde>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006068:	2670      	movs	r6, #112	@ 0x70
 800606a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 800606c:	68a6      	ldr	r6, [r4, #8]
 800606e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8006070:	4e38      	ldr	r6, [pc, #224]	@ (8006154 <HAL_TIM_IC_Init+0x1a4>)
 8006072:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006074:	6926      	ldr	r6, [r4, #16]
 8006076:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006078:	2680      	movs	r6, #128	@ 0x80
 800607a:	43b2      	bics	r2, r6
 800607c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800607e:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006080:	4a2f      	ldr	r2, [pc, #188]	@ (8006140 <HAL_TIM_IC_Init+0x190>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006082:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006084:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006086:	4293      	cmp	r3, r2
 8006088:	d101      	bne.n	800608e <HAL_TIM_IC_Init+0xde>
    TIMx->RCR = Structure->RepetitionCounter;
 800608a:	6962      	ldr	r2, [r4, #20]
 800608c:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800608e:	2201      	movs	r2, #1
 8006090:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006092:	6919      	ldr	r1, [r3, #16]
 8006094:	420a      	tst	r2, r1
 8006096:	d002      	beq.n	800609e <HAL_TIM_IC_Init+0xee>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006098:	6919      	ldr	r1, [r3, #16]
 800609a:	4391      	bics	r1, r2
 800609c:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800609e:	2301      	movs	r3, #1
 80060a0:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80060a2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a6:	3a0a      	subs	r2, #10
 80060a8:	54a3      	strb	r3, [r4, r2]
 80060aa:	3201      	adds	r2, #1
 80060ac:	54a3      	strb	r3, [r4, r2]
 80060ae:	3201      	adds	r2, #1
 80060b0:	54a3      	strb	r3, [r4, r2]
 80060b2:	3201      	adds	r2, #1
 80060b4:	54a3      	strb	r3, [r4, r2]
 80060b6:	3201      	adds	r2, #1
 80060b8:	54a3      	strb	r3, [r4, r2]
 80060ba:	3201      	adds	r2, #1
 80060bc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	3201      	adds	r2, #1
 80060c0:	54a3      	strb	r3, [r4, r2]
 80060c2:	3201      	adds	r2, #1
 80060c4:	54a3      	strb	r3, [r4, r2]
 80060c6:	3201      	adds	r2, #1
 80060c8:	54a3      	strb	r3, [r4, r2]
 80060ca:	3201      	adds	r2, #1
 80060cc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	3a0a      	subs	r2, #10
 80060d0:	54a3      	strb	r3, [r4, r2]
}
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060d4:	2670      	movs	r6, #112	@ 0x70
 80060d6:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80060d8:	68a6      	ldr	r6, [r4, #8]
 80060da:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80060dc:	4e1d      	ldr	r6, [pc, #116]	@ (8006154 <HAL_TIM_IC_Init+0x1a4>)
 80060de:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060e0:	6926      	ldr	r6, [r4, #16]
 80060e2:	4332      	orrs	r2, r6
 80060e4:	e7b9      	b.n	800605a <HAL_TIM_IC_Init+0xaa>
    return HAL_ERROR;
 80060e6:	2001      	movs	r0, #1
 80060e8:	e7f3      	b.n	80060d2 <HAL_TIM_IC_Init+0x122>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80060ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006158 <HAL_TIM_IC_Init+0x1a8>)
 80060ec:	6543      	str	r3, [r0, #84]	@ 0x54
 80060ee:	e797      	b.n	8006020 <HAL_TIM_IC_Init+0x70>
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f0:	4e18      	ldr	r6, [pc, #96]	@ (8006154 <HAL_TIM_IC_Init+0x1a4>)
 80060f2:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f4:	6926      	ldr	r6, [r4, #16]
 80060f6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f8:	2680      	movs	r6, #128	@ 0x80
 80060fa:	43b2      	bics	r2, r6
 80060fc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80060fe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006100:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006102:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006104:	e7c1      	b.n	800608a <HAL_TIM_IC_Init+0xda>
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	0800571d 	.word	0x0800571d
 800610c:	08005721 	.word	0x08005721
 8006110:	08005739 	.word	0x08005739
 8006114:	0800573d 	.word	0x0800573d
 8006118:	08005729 	.word	0x08005729
 800611c:	0800572d 	.word	0x0800572d
 8006120:	08005725 	.word	0x08005725
 8006124:	08005731 	.word	0x08005731
 8006128:	08005735 	.word	0x08005735
 800612c:	08005741 	.word	0x08005741
 8006130:	08006fb1 	.word	0x08006fb1
 8006134:	08006fb5 	.word	0x08006fb5
 8006138:	08006fb9 	.word	0x08006fb9
 800613c:	08006fbd 	.word	0x08006fbd
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40000400 	.word	0x40000400
 8006148:	40002000 	.word	0x40002000
 800614c:	40014400 	.word	0x40014400
 8006150:	40014800 	.word	0x40014800
 8006154:	fffffcff 	.word	0xfffffcff
 8006158:	08005719 	.word	0x08005719

0800615c <HAL_TIM_IC_Start_IT>:
{
 800615c:	b530      	push	{r4, r5, lr}
 800615e:	2910      	cmp	r1, #16
 8006160:	d803      	bhi.n	800616a <HAL_TIM_IC_Start_IT+0xe>
 8006162:	4a45      	ldr	r2, [pc, #276]	@ (8006278 <HAL_TIM_IC_Start_IT+0x11c>)
 8006164:	008b      	lsls	r3, r1, #2
 8006166:	58d3      	ldr	r3, [r2, r3]
 8006168:	469f      	mov	pc, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800616a:	2443      	movs	r4, #67	@ 0x43
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800616c:	2247      	movs	r2, #71	@ 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800616e:	5d05      	ldrb	r5, [r0, r4]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006170:	5c83      	ldrb	r3, [r0, r2]
 8006172:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006174:	2d01      	cmp	r5, #1
 8006176:	d104      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006178:	2b01      	cmp	r3, #1
 800617a:	d102      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800617c:	2302      	movs	r3, #2
 800617e:	5503      	strb	r3, [r0, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006180:	5483      	strb	r3, [r0, r2]
    return HAL_ERROR;
 8006182:	2001      	movs	r0, #1
 8006184:	e027      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x7a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006186:	243f      	movs	r4, #63	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006188:	2245      	movs	r2, #69	@ 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800618a:	5d05      	ldrb	r5, [r0, r4]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800618c:	5c83      	ldrb	r3, [r0, r2]
 800618e:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006190:	2d01      	cmp	r5, #1
 8006192:	d1f6      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006194:	2b01      	cmp	r3, #1
 8006196:	d1f4      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006198:	2302      	movs	r3, #2
 800619a:	5503      	strb	r3, [r0, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800619c:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800619e:	6803      	ldr	r3, [r0, #0]
 80061a0:	2004      	movs	r0, #4
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	4302      	orrs	r2, r0
 80061a6:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061a8:	2001      	movs	r0, #1
 80061aa:	0002      	movs	r2, r0
 80061ac:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80061ae:	6a19      	ldr	r1, [r3, #32]
 80061b0:	4391      	bics	r1, r2
 80061b2:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b4:	6a19      	ldr	r1, [r3, #32]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	621a      	str	r2, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ba:	4a30      	ldr	r2, [pc, #192]	@ (800627c <HAL_TIM_IC_Start_IT+0x120>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d04e      	beq.n	800625e <HAL_TIM_IC_Start_IT+0x102>
 80061c0:	2280      	movs	r2, #128	@ 0x80
 80061c2:	05d2      	lsls	r2, r2, #23
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d04a      	beq.n	800625e <HAL_TIM_IC_Start_IT+0x102>
 80061c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006280 <HAL_TIM_IC_Start_IT+0x124>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d047      	beq.n	800625e <HAL_TIM_IC_Start_IT+0x102>
      __HAL_TIM_ENABLE(htim);
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4302      	orrs	r2, r0
 80061d2:	601a      	str	r2, [r3, #0]
    return HAL_ERROR;
 80061d4:	2000      	movs	r0, #0
}
 80061d6:	bd30      	pop	{r4, r5, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80061d8:	2440      	movs	r4, #64	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061da:	2246      	movs	r2, #70	@ 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80061dc:	5d05      	ldrb	r5, [r0, r4]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061de:	5c83      	ldrb	r3, [r0, r2]
 80061e0:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80061e2:	2d01      	cmp	r5, #1
 80061e4:	d1cd      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d1cb      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ea:	3301      	adds	r3, #1
 80061ec:	5503      	strb	r3, [r0, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ee:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80061f0:	6803      	ldr	r3, [r0, #0]
 80061f2:	2008      	movs	r0, #8
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	4302      	orrs	r2, r0
 80061f8:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 80061fa:	e7d5      	b.n	80061a8 <HAL_TIM_IC_Start_IT+0x4c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80061fc:	2441      	movs	r4, #65	@ 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061fe:	2247      	movs	r2, #71	@ 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006200:	5d05      	ldrb	r5, [r0, r4]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006202:	5c83      	ldrb	r3, [r0, r2]
 8006204:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006206:	2d01      	cmp	r5, #1
 8006208:	d1bb      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800620a:	2b01      	cmp	r3, #1
 800620c:	d1b9      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620e:	2302      	movs	r3, #2
 8006210:	5503      	strb	r3, [r0, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006212:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006214:	6803      	ldr	r3, [r0, #0]
 8006216:	2010      	movs	r0, #16
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	4302      	orrs	r2, r0
 800621c:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800621e:	e7c3      	b.n	80061a8 <HAL_TIM_IC_Start_IT+0x4c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006220:	243e      	movs	r4, #62	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006222:	2244      	movs	r2, #68	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006224:	5d05      	ldrb	r5, [r0, r4]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006226:	5c83      	ldrb	r3, [r0, r2]
 8006228:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800622a:	2d01      	cmp	r5, #1
 800622c:	d1a9      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800622e:	2b01      	cmp	r3, #1
 8006230:	d1a7      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006232:	2502      	movs	r5, #2
 8006234:	5505      	strb	r5, [r0, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006236:	5485      	strb	r5, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006238:	6803      	ldr	r3, [r0, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	432a      	orrs	r2, r5
 800623e:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8006240:	e7b2      	b.n	80061a8 <HAL_TIM_IC_Start_IT+0x4c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006242:	2142      	movs	r1, #66	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006244:	2247      	movs	r2, #71	@ 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006246:	5c44      	ldrb	r4, [r0, r1]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006248:	5c83      	ldrb	r3, [r0, r2]
 800624a:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800624c:	2c01      	cmp	r4, #1
 800624e:	d198      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006250:	2b01      	cmp	r3, #1
 8006252:	d196      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006254:	2302      	movs	r3, #2
 8006256:	5443      	strb	r3, [r0, r1]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006258:	5483      	strb	r3, [r0, r2]
    return HAL_ERROR;
 800625a:	2001      	movs	r0, #1
 800625c:	e7bb      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x7a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	4908      	ldr	r1, [pc, #32]	@ (8006284 <HAL_TIM_IC_Start_IT+0x128>)
 8006262:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006264:	2a06      	cmp	r2, #6
 8006266:	d0b5      	beq.n	80061d4 <HAL_TIM_IC_Start_IT+0x78>
 8006268:	3907      	subs	r1, #7
 800626a:	428a      	cmp	r2, r1
 800626c:	d0b2      	beq.n	80061d4 <HAL_TIM_IC_Start_IT+0x78>
        __HAL_TIM_ENABLE(htim);
 800626e:	2101      	movs	r1, #1
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e7ad      	b.n	80061d4 <HAL_TIM_IC_Start_IT+0x78>
 8006278:	080087b8 	.word	0x080087b8
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40000400 	.word	0x40000400
 8006284:	00010007 	.word	0x00010007

08006288 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006288:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 800628a:	6803      	ldr	r3, [r0, #0]
{
 800628c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800628e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006290:	691d      	ldr	r5, [r3, #16]
{
 8006292:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006294:	422a      	tst	r2, r5
 8006296:	d002      	beq.n	800629e <HAL_TIM_IRQHandler+0x16>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006298:	4232      	tst	r2, r6
 800629a:	d000      	beq.n	800629e <HAL_TIM_IRQHandler+0x16>
 800629c:	e09f      	b.n	80063de <HAL_TIM_IRQHandler+0x156>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800629e:	2304      	movs	r3, #4
 80062a0:	422b      	tst	r3, r5
 80062a2:	d002      	beq.n	80062aa <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062a4:	4233      	tst	r3, r6
 80062a6:	d000      	beq.n	80062aa <HAL_TIM_IRQHandler+0x22>
 80062a8:	e083      	b.n	80063b2 <HAL_TIM_IRQHandler+0x12a>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062aa:	2308      	movs	r3, #8
 80062ac:	422b      	tst	r3, r5
 80062ae:	d001      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062b0:	4233      	tst	r3, r6
 80062b2:	d16a      	bne.n	800638a <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062b4:	2310      	movs	r3, #16
 80062b6:	422b      	tst	r3, r5
 80062b8:	d001      	beq.n	80062be <HAL_TIM_IRQHandler+0x36>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062ba:	4233      	tst	r3, r6
 80062bc:	d14f      	bne.n	800635e <HAL_TIM_IRQHandler+0xd6>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062be:	2301      	movs	r3, #1
 80062c0:	422b      	tst	r3, r5
 80062c2:	d001      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062c4:	4233      	tst	r3, r6
 80062c6:	d132      	bne.n	800632e <HAL_TIM_IRQHandler+0xa6>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062c8:	2382      	movs	r3, #130	@ 0x82
 80062ca:	019b      	lsls	r3, r3, #6
 80062cc:	421d      	tst	r5, r3
 80062ce:	d03a      	beq.n	8006346 <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062d0:	0633      	lsls	r3, r6, #24
 80062d2:	d41b      	bmi.n	800630c <HAL_TIM_IRQHandler+0x84>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062d4:	2340      	movs	r3, #64	@ 0x40
 80062d6:	422b      	tst	r3, r5
 80062d8:	d001      	beq.n	80062de <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062da:	4233      	tst	r3, r6
 80062dc:	d10d      	bne.n	80062fa <HAL_TIM_IRQHandler+0x72>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062de:	2320      	movs	r3, #32
 80062e0:	422b      	tst	r3, r5
 80062e2:	d009      	beq.n	80062f8 <HAL_TIM_IRQHandler+0x70>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062e4:	4233      	tst	r3, r6
 80062e6:	d007      	beq.n	80062f8 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062e8:	2221      	movs	r2, #33	@ 0x21
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	4252      	negs	r2, r2
 80062ee:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 80062f0:	23ac      	movs	r3, #172	@ 0xac
 80062f2:	0020      	movs	r0, r4
 80062f4:	58e3      	ldr	r3, [r4, r3]
 80062f6:	4798      	blx	r3
}
 80062f8:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062fa:	2241      	movs	r2, #65	@ 0x41
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	4252      	negs	r2, r2
 8006300:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8006302:	238c      	movs	r3, #140	@ 0x8c
 8006304:	0020      	movs	r0, r4
 8006306:	58e3      	ldr	r3, [r4, r3]
 8006308:	4798      	blx	r3
 800630a:	e7e8      	b.n	80062de <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	4a46      	ldr	r2, [pc, #280]	@ (8006428 <HAL_TIM_IRQHandler+0x1a0>)
      htim->BreakCallback(htim);
 8006310:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006312:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8006314:	23b4      	movs	r3, #180	@ 0xb4
 8006316:	58e3      	ldr	r3, [r4, r3]
 8006318:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800631a:	05eb      	lsls	r3, r5, #23
 800631c:	d5da      	bpl.n	80062d4 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	4a42      	ldr	r2, [pc, #264]	@ (800642c <HAL_TIM_IRQHandler+0x1a4>)
      htim->Break2Callback(htim);
 8006322:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006324:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8006326:	23b8      	movs	r3, #184	@ 0xb8
 8006328:	58e3      	ldr	r3, [r4, r3]
 800632a:	4798      	blx	r3
 800632c:	e7d2      	b.n	80062d4 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800632e:	2202      	movs	r2, #2
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	4252      	negs	r2, r2
 8006334:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8006336:	2384      	movs	r3, #132	@ 0x84
 8006338:	0020      	movs	r0, r4
 800633a:	58e3      	ldr	r3, [r4, r3]
 800633c:	4798      	blx	r3
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800633e:	2382      	movs	r3, #130	@ 0x82
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	421d      	tst	r5, r3
 8006344:	d1c4      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x48>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006346:	05eb      	lsls	r3, r5, #23
 8006348:	d5c4      	bpl.n	80062d4 <HAL_TIM_IRQHandler+0x4c>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800634a:	0633      	lsls	r3, r6, #24
 800634c:	d5c2      	bpl.n	80062d4 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	4a36      	ldr	r2, [pc, #216]	@ (800642c <HAL_TIM_IRQHandler+0x1a4>)
      htim->Break2Callback(htim);
 8006352:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006354:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8006356:	23b8      	movs	r3, #184	@ 0xb8
 8006358:	58e3      	ldr	r3, [r4, r3]
 800635a:	4798      	blx	r3
 800635c:	e7ba      	b.n	80062d4 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800635e:	2211      	movs	r2, #17
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	4252      	negs	r2, r2
 8006364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006366:	3219      	adds	r2, #25
 8006368:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	23c0      	movs	r3, #192	@ 0xc0
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	421a      	tst	r2, r3
 8006372:	d153      	bne.n	800641c <HAL_TIM_IRQHandler+0x194>
        htim->OC_DelayElapsedCallback(htim);
 8006374:	239c      	movs	r3, #156	@ 0x9c
 8006376:	0020      	movs	r0, r4
 8006378:	58e3      	ldr	r3, [r4, r3]
 800637a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800637c:	23a0      	movs	r3, #160	@ 0xa0
 800637e:	0020      	movs	r0, r4
 8006380:	58e3      	ldr	r3, [r4, r3]
 8006382:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006384:	2300      	movs	r3, #0
 8006386:	7723      	strb	r3, [r4, #28]
 8006388:	e799      	b.n	80062be <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800638a:	2209      	movs	r2, #9
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	4252      	negs	r2, r2
 8006390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006392:	320d      	adds	r2, #13
 8006394:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	079b      	lsls	r3, r3, #30
 800639a:	d13a      	bne.n	8006412 <HAL_TIM_IRQHandler+0x18a>
        htim->OC_DelayElapsedCallback(htim);
 800639c:	239c      	movs	r3, #156	@ 0x9c
 800639e:	0020      	movs	r0, r4
 80063a0:	58e3      	ldr	r3, [r4, r3]
 80063a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80063a4:	23a0      	movs	r3, #160	@ 0xa0
 80063a6:	0020      	movs	r0, r4
 80063a8:	58e3      	ldr	r3, [r4, r3]
 80063aa:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ac:	2300      	movs	r3, #0
 80063ae:	7723      	strb	r3, [r4, #28]
 80063b0:	e780      	b.n	80062b4 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063b2:	2205      	movs	r2, #5
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	4252      	negs	r2, r2
 80063b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ba:	3207      	adds	r2, #7
 80063bc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	23c0      	movs	r3, #192	@ 0xc0
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	421a      	tst	r2, r3
 80063c6:	d11f      	bne.n	8006408 <HAL_TIM_IRQHandler+0x180>
        htim->OC_DelayElapsedCallback(htim);
 80063c8:	239c      	movs	r3, #156	@ 0x9c
 80063ca:	0020      	movs	r0, r4
 80063cc:	58e3      	ldr	r3, [r4, r3]
 80063ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80063d0:	23a0      	movs	r3, #160	@ 0xa0
 80063d2:	0020      	movs	r0, r4
 80063d4:	58e3      	ldr	r3, [r4, r3]
 80063d6:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d8:	2300      	movs	r3, #0
 80063da:	7723      	strb	r3, [r4, #28]
 80063dc:	e765      	b.n	80062aa <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063de:	3a05      	subs	r2, #5
 80063e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e2:	3204      	adds	r2, #4
 80063e4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	079b      	lsls	r3, r3, #30
 80063ea:	d109      	bne.n	8006400 <HAL_TIM_IRQHandler+0x178>
          htim->OC_DelayElapsedCallback(htim);
 80063ec:	239c      	movs	r3, #156	@ 0x9c
 80063ee:	58c3      	ldr	r3, [r0, r3]
 80063f0:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80063f2:	23a0      	movs	r3, #160	@ 0xa0
 80063f4:	0020      	movs	r0, r4
 80063f6:	58e3      	ldr	r3, [r4, r3]
 80063f8:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fa:	2300      	movs	r3, #0
 80063fc:	7723      	strb	r3, [r4, #28]
 80063fe:	e74e      	b.n	800629e <HAL_TIM_IRQHandler+0x16>
          htim->IC_CaptureCallback(htim);
 8006400:	2394      	movs	r3, #148	@ 0x94
 8006402:	58c3      	ldr	r3, [r0, r3]
 8006404:	4798      	blx	r3
 8006406:	e7f8      	b.n	80063fa <HAL_TIM_IRQHandler+0x172>
        htim->IC_CaptureCallback(htim);
 8006408:	2394      	movs	r3, #148	@ 0x94
 800640a:	0020      	movs	r0, r4
 800640c:	58e3      	ldr	r3, [r4, r3]
 800640e:	4798      	blx	r3
 8006410:	e7e2      	b.n	80063d8 <HAL_TIM_IRQHandler+0x150>
        htim->IC_CaptureCallback(htim);
 8006412:	2394      	movs	r3, #148	@ 0x94
 8006414:	0020      	movs	r0, r4
 8006416:	58e3      	ldr	r3, [r4, r3]
 8006418:	4798      	blx	r3
 800641a:	e7c7      	b.n	80063ac <HAL_TIM_IRQHandler+0x124>
        htim->IC_CaptureCallback(htim);
 800641c:	2394      	movs	r3, #148	@ 0x94
 800641e:	0020      	movs	r0, r4
 8006420:	58e3      	ldr	r3, [r4, r3]
 8006422:	4798      	blx	r3
 8006424:	e7ae      	b.n	8006384 <HAL_TIM_IRQHandler+0xfc>
 8006426:	46c0      	nop			@ (mov r8, r8)
 8006428:	ffffdf7f 	.word	0xffffdf7f
 800642c:	fffffeff 	.word	0xfffffeff

08006430 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006430:	233c      	movs	r3, #60	@ 0x3c
{
 8006432:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006434:	5cc3      	ldrb	r3, [r0, r3]
{
 8006436:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8006438:	2b01      	cmp	r3, #1
 800643a:	d100      	bne.n	800643e <HAL_TIM_OC_ConfigChannel+0xe>
 800643c:	e11d      	b.n	800667a <HAL_TIM_OC_ConfigChannel+0x24a>
  switch (Channel)
 800643e:	2a14      	cmp	r2, #20
 8006440:	d803      	bhi.n	800644a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006442:	4b8f      	ldr	r3, [pc, #572]	@ (8006680 <HAL_TIM_OC_ConfigChannel+0x250>)
 8006444:	0092      	lsls	r2, r2, #2
 8006446:	589b      	ldr	r3, [r3, r2]
 8006448:	469f      	mov	pc, r3
 800644a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800644c:	233c      	movs	r3, #60	@ 0x3c
 800644e:	2200      	movs	r2, #0
 8006450:	54e2      	strb	r2, [r4, r3]
}
 8006452:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006454:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006456:	4d8b      	ldr	r5, [pc, #556]	@ (8006684 <HAL_TIM_OC_ConfigChannel+0x254>)
  tmpccer = TIMx->CCER;
 8006458:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	402a      	ands	r2, r5
 800645e:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006460:	4d89      	ldr	r5, [pc, #548]	@ (8006688 <HAL_TIM_OC_ConfigChannel+0x258>)
  tmpcr2 =  TIMx->CR2;
 8006462:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006466:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006468:	680d      	ldr	r5, [r1, #0]
 800646a:	022d      	lsls	r5, r5, #8
 800646c:	4315      	orrs	r5, r2
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800646e:	4a87      	ldr	r2, [pc, #540]	@ (800668c <HAL_TIM_OC_ConfigChannel+0x25c>)
 8006470:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006472:	688a      	ldr	r2, [r1, #8]
 8006474:	0512      	lsls	r2, r2, #20
 8006476:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006478:	4885      	ldr	r0, [pc, #532]	@ (8006690 <HAL_TIM_OC_ConfigChannel+0x260>)
 800647a:	4283      	cmp	r3, r0
 800647c:	d100      	bne.n	8006480 <HAL_TIM_OC_ConfigChannel+0x50>
 800647e:	e0c2      	b.n	8006606 <HAL_TIM_OC_ConfigChannel+0x1d6>
 8006480:	4884      	ldr	r0, [pc, #528]	@ (8006694 <HAL_TIM_OC_ConfigChannel+0x264>)
 8006482:	4283      	cmp	r3, r0
 8006484:	d100      	bne.n	8006488 <HAL_TIM_OC_ConfigChannel+0x58>
 8006486:	e0be      	b.n	8006606 <HAL_TIM_OC_ConfigChannel+0x1d6>
 8006488:	4883      	ldr	r0, [pc, #524]	@ (8006698 <HAL_TIM_OC_ConfigChannel+0x268>)
 800648a:	4283      	cmp	r3, r0
 800648c:	d100      	bne.n	8006490 <HAL_TIM_OC_ConfigChannel+0x60>
 800648e:	e0ba      	b.n	8006606 <HAL_TIM_OC_ConfigChannel+0x1d6>
  TIMx->CCR6 = OC_Config->Pulse;
 8006490:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006492:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006494:	2000      	movs	r0, #0
  TIMx->CCMR3 = tmpccmrx;
 8006496:	655d      	str	r5, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8006498:	65d9      	str	r1, [r3, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 800649a:	621a      	str	r2, [r3, #32]
      break;
 800649c:	e7d6      	b.n	800644c <HAL_TIM_OC_ConfigChannel+0x1c>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800649e:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064a0:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 80064a2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a4:	6a18      	ldr	r0, [r3, #32]
 80064a6:	43a8      	bics	r0, r5
 80064a8:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064aa:	4d7c      	ldr	r5, [pc, #496]	@ (800669c <HAL_TIM_OC_ConfigChannel+0x26c>)
  tmpcr2 =  TIMx->CR2;
 80064ac:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80064ae:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064b0:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 80064b2:	680d      	ldr	r5, [r1, #0]
 80064b4:	4328      	orrs	r0, r5
  tmpccer &= ~TIM_CCER_CC1P;
 80064b6:	2502      	movs	r5, #2
 80064b8:	43aa      	bics	r2, r5
  tmpccer |= OC_Config->OCPolarity;
 80064ba:	688d      	ldr	r5, [r1, #8]
 80064bc:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064be:	4d74      	ldr	r5, [pc, #464]	@ (8006690 <HAL_TIM_OC_ConfigChannel+0x260>)
 80064c0:	42ab      	cmp	r3, r5
 80064c2:	d100      	bne.n	80064c6 <HAL_TIM_OC_ConfigChannel+0x96>
 80064c4:	e0cc      	b.n	8006660 <HAL_TIM_OC_ConfigChannel+0x230>
 80064c6:	4d73      	ldr	r5, [pc, #460]	@ (8006694 <HAL_TIM_OC_ConfigChannel+0x264>)
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	d100      	bne.n	80064ce <HAL_TIM_OC_ConfigChannel+0x9e>
 80064cc:	e0c8      	b.n	8006660 <HAL_TIM_OC_ConfigChannel+0x230>
 80064ce:	4d72      	ldr	r5, [pc, #456]	@ (8006698 <HAL_TIM_OC_ConfigChannel+0x268>)
 80064d0:	42ab      	cmp	r3, r5
 80064d2:	d100      	bne.n	80064d6 <HAL_TIM_OC_ConfigChannel+0xa6>
 80064d4:	e0c4      	b.n	8006660 <HAL_TIM_OC_ConfigChannel+0x230>
  TIMx->CCR1 = OC_Config->Pulse;
 80064d6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80064d8:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80064da:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80064dc:	6359      	str	r1, [r3, #52]	@ 0x34
  HAL_StatusTypeDef status = HAL_OK;
 80064de:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80064e0:	621a      	str	r2, [r3, #32]
      break;
 80064e2:	e7b3      	b.n	800644c <HAL_TIM_OC_ConfigChannel+0x1c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e4:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064e6:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 80064e8:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ea:	6a18      	ldr	r0, [r3, #32]
 80064ec:	43a8      	bics	r0, r5
 80064ee:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f0:	4d6b      	ldr	r5, [pc, #428]	@ (80066a0 <HAL_TIM_OC_ConfigChannel+0x270>)
  tmpcr2 =  TIMx->CR2;
 80064f2:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80064f4:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f6:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f8:	680d      	ldr	r5, [r1, #0]
 80064fa:	022d      	lsls	r5, r5, #8
 80064fc:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC2P;
 80064fe:	2020      	movs	r0, #32
 8006500:	4382      	bics	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006502:	6888      	ldr	r0, [r1, #8]
 8006504:	0100      	lsls	r0, r0, #4
 8006506:	4310      	orrs	r0, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006508:	4a61      	ldr	r2, [pc, #388]	@ (8006690 <HAL_TIM_OC_ConfigChannel+0x260>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d100      	bne.n	8006510 <HAL_TIM_OC_ConfigChannel+0xe0>
 800650e:	e098      	b.n	8006642 <HAL_TIM_OC_ConfigChannel+0x212>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006510:	4a60      	ldr	r2, [pc, #384]	@ (8006694 <HAL_TIM_OC_ConfigChannel+0x264>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d100      	bne.n	8006518 <HAL_TIM_OC_ConfigChannel+0xe8>
 8006516:	e09b      	b.n	8006650 <HAL_TIM_OC_ConfigChannel+0x220>
 8006518:	4a5f      	ldr	r2, [pc, #380]	@ (8006698 <HAL_TIM_OC_ConfigChannel+0x268>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d100      	bne.n	8006520 <HAL_TIM_OC_ConfigChannel+0xf0>
 800651e:	e097      	b.n	8006650 <HAL_TIM_OC_ConfigChannel+0x220>
  TIMx->CCR2 = OC_Config->Pulse;
 8006520:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006522:	605f      	str	r7, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006524:	619d      	str	r5, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006526:	639a      	str	r2, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006528:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800652a:	2000      	movs	r0, #0
 800652c:	e78e      	b.n	800644c <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800652e:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006530:	4d5c      	ldr	r5, [pc, #368]	@ (80066a4 <HAL_TIM_OC_ConfigChannel+0x274>)
  tmpccer = TIMx->CCER;
 8006532:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006534:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006536:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006538:	4028      	ands	r0, r5
 800653a:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800653c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800653e:	4d57      	ldr	r5, [pc, #348]	@ (800669c <HAL_TIM_OC_ConfigChannel+0x26c>)
  tmpcr2 =  TIMx->CR2;
 8006540:	4684      	mov	ip, r0
  tmpccmrx = TIMx->CCMR2;
 8006542:	69d8      	ldr	r0, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006544:	688e      	ldr	r6, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006546:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8006548:	4307      	orrs	r7, r0
  tmpccer &= ~TIM_CCER_CC3P;
 800654a:	4857      	ldr	r0, [pc, #348]	@ (80066a8 <HAL_TIM_OC_ConfigChannel+0x278>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800654c:	0236      	lsls	r6, r6, #8
  tmpccer &= ~TIM_CCER_CC3P;
 800654e:	4002      	ands	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006550:	4316      	orrs	r6, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006552:	4a4f      	ldr	r2, [pc, #316]	@ (8006690 <HAL_TIM_OC_ConfigChannel+0x260>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d062      	beq.n	800661e <HAL_TIM_OC_ConfigChannel+0x1ee>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006558:	4a4e      	ldr	r2, [pc, #312]	@ (8006694 <HAL_TIM_OC_ConfigChannel+0x264>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d066      	beq.n	800662c <HAL_TIM_OC_ConfigChannel+0x1fc>
 800655e:	4a4e      	ldr	r2, [pc, #312]	@ (8006698 <HAL_TIM_OC_ConfigChannel+0x268>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d063      	beq.n	800662c <HAL_TIM_OC_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 8006564:	4662      	mov	r2, ip
 8006566:	605a      	str	r2, [r3, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8006568:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800656a:	61df      	str	r7, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800656c:	2000      	movs	r0, #0
  TIMx->CCR3 = OC_Config->Pulse;
 800656e:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8006570:	621e      	str	r6, [r3, #32]
      break;
 8006572:	e76b      	b.n	800644c <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006574:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006576:	4d4d      	ldr	r5, [pc, #308]	@ (80066ac <HAL_TIM_OC_ConfigChannel+0x27c>)
  tmpccer = TIMx->CCER;
 8006578:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800657a:	6a1a      	ldr	r2, [r3, #32]
 800657c:	402a      	ands	r2, r5
 800657e:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006580:	4d47      	ldr	r5, [pc, #284]	@ (80066a0 <HAL_TIM_OC_ConfigChannel+0x270>)
  tmpcr2 =  TIMx->CR2;
 8006582:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006584:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006586:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006588:	680d      	ldr	r5, [r1, #0]
 800658a:	022d      	lsls	r5, r5, #8
 800658c:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC4P;
 800658e:	4a48      	ldr	r2, [pc, #288]	@ (80066b0 <HAL_TIM_OC_ConfigChannel+0x280>)
 8006590:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006592:	688a      	ldr	r2, [r1, #8]
 8006594:	0312      	lsls	r2, r2, #12
 8006596:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	483d      	ldr	r0, [pc, #244]	@ (8006690 <HAL_TIM_OC_ConfigChannel+0x260>)
 800659a:	4283      	cmp	r3, r0
 800659c:	d039      	beq.n	8006612 <HAL_TIM_OC_ConfigChannel+0x1e2>
 800659e:	483d      	ldr	r0, [pc, #244]	@ (8006694 <HAL_TIM_OC_ConfigChannel+0x264>)
 80065a0:	4283      	cmp	r3, r0
 80065a2:	d036      	beq.n	8006612 <HAL_TIM_OC_ConfigChannel+0x1e2>
 80065a4:	483c      	ldr	r0, [pc, #240]	@ (8006698 <HAL_TIM_OC_ConfigChannel+0x268>)
 80065a6:	4283      	cmp	r3, r0
 80065a8:	d033      	beq.n	8006612 <HAL_TIM_OC_ConfigChannel+0x1e2>
  TIMx->CCR4 = OC_Config->Pulse;
 80065aa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80065ac:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmrx;
 80065b0:	61dd      	str	r5, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80065b2:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80065b4:	621a      	str	r2, [r3, #32]
      break;
 80065b6:	e749      	b.n	800644c <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065b8:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065ba:	4d3e      	ldr	r5, [pc, #248]	@ (80066b4 <HAL_TIM_OC_ConfigChannel+0x284>)
  tmpccer = TIMx->CCER;
 80065bc:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065be:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065c0:	4e3d      	ldr	r6, [pc, #244]	@ (80066b8 <HAL_TIM_OC_ConfigChannel+0x288>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065c2:	402a      	ands	r2, r5
 80065c4:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80065c6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80065c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065ca:	4032      	ands	r2, r6
  tmpccmrx |= OC_Config->OCMode;
 80065cc:	680e      	ldr	r6, [r1, #0]
 80065ce:	4316      	orrs	r6, r2
  tmpccer &= ~TIM_CCER_CC5P;
 80065d0:	4a3a      	ldr	r2, [pc, #232]	@ (80066bc <HAL_TIM_OC_ConfigChannel+0x28c>)
 80065d2:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065d4:	688a      	ldr	r2, [r1, #8]
 80065d6:	0412      	lsls	r2, r2, #16
 80065d8:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065da:	482d      	ldr	r0, [pc, #180]	@ (8006690 <HAL_TIM_OC_ConfigChannel+0x260>)
 80065dc:	4283      	cmp	r3, r0
 80065de:	d00c      	beq.n	80065fa <HAL_TIM_OC_ConfigChannel+0x1ca>
 80065e0:	482c      	ldr	r0, [pc, #176]	@ (8006694 <HAL_TIM_OC_ConfigChannel+0x264>)
 80065e2:	4283      	cmp	r3, r0
 80065e4:	d009      	beq.n	80065fa <HAL_TIM_OC_ConfigChannel+0x1ca>
 80065e6:	482c      	ldr	r0, [pc, #176]	@ (8006698 <HAL_TIM_OC_ConfigChannel+0x268>)
 80065e8:	4283      	cmp	r3, r0
 80065ea:	d006      	beq.n	80065fa <HAL_TIM_OC_ConfigChannel+0x1ca>
  TIMx->CCR5 = OC_Config->Pulse;
 80065ec:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80065ee:	605d      	str	r5, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f0:	2000      	movs	r0, #0
  TIMx->CCMR3 = tmpccmrx;
 80065f2:	655e      	str	r6, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80065f4:	6599      	str	r1, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 80065f6:	621a      	str	r2, [r3, #32]
      break;
 80065f8:	e728      	b.n	800644c <HAL_TIM_OC_ConfigChannel+0x1c>
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065fa:	482e      	ldr	r0, [pc, #184]	@ (80066b4 <HAL_TIM_OC_ConfigChannel+0x284>)
 80065fc:	4028      	ands	r0, r5
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065fe:	694d      	ldr	r5, [r1, #20]
 8006600:	022d      	lsls	r5, r5, #8
 8006602:	4305      	orrs	r5, r0
 8006604:	e7f2      	b.n	80065ec <HAL_TIM_OC_ConfigChannel+0x1bc>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006606:	482e      	ldr	r0, [pc, #184]	@ (80066c0 <HAL_TIM_OC_ConfigChannel+0x290>)
 8006608:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800660a:	694e      	ldr	r6, [r1, #20]
 800660c:	02b6      	lsls	r6, r6, #10
 800660e:	4306      	orrs	r6, r0
 8006610:	e73e      	b.n	8006490 <HAL_TIM_OC_ConfigChannel+0x60>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006612:	482c      	ldr	r0, [pc, #176]	@ (80066c4 <HAL_TIM_OC_ConfigChannel+0x294>)
 8006614:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006616:	694e      	ldr	r6, [r1, #20]
 8006618:	01b6      	lsls	r6, r6, #6
 800661a:	4306      	orrs	r6, r0
 800661c:	e7c5      	b.n	80065aa <HAL_TIM_OC_ConfigChannel+0x17a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800661e:	4a2a      	ldr	r2, [pc, #168]	@ (80066c8 <HAL_TIM_OC_ConfigChannel+0x298>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006620:	68c8      	ldr	r0, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006622:	4032      	ands	r2, r6
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006624:	0200      	lsls	r0, r0, #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006626:	4e29      	ldr	r6, [pc, #164]	@ (80066cc <HAL_TIM_OC_ConfigChannel+0x29c>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006628:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 800662a:	4006      	ands	r6, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662c:	4662      	mov	r2, ip
 800662e:	4d28      	ldr	r5, [pc, #160]	@ (80066d0 <HAL_TIM_OC_ConfigChannel+0x2a0>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006630:	6988      	ldr	r0, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006632:	402a      	ands	r2, r5
 8006634:	0015      	movs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006636:	694a      	ldr	r2, [r1, #20]
 8006638:	4302      	orrs	r2, r0
 800663a:	0112      	lsls	r2, r2, #4
 800663c:	432a      	orrs	r2, r5
 800663e:	4694      	mov	ip, r2
 8006640:	e790      	b.n	8006564 <HAL_TIM_OC_ConfigChannel+0x134>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006642:	2280      	movs	r2, #128	@ 0x80
 8006644:	4390      	bics	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006646:	68ca      	ldr	r2, [r1, #12]
 8006648:	0112      	lsls	r2, r2, #4
 800664a:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 800664c:	2240      	movs	r2, #64	@ 0x40
 800664e:	4390      	bics	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006650:	4e20      	ldr	r6, [pc, #128]	@ (80066d4 <HAL_TIM_OC_ConfigChannel+0x2a4>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006652:	694a      	ldr	r2, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006654:	403e      	ands	r6, r7
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006656:	698f      	ldr	r7, [r1, #24]
 8006658:	4317      	orrs	r7, r2
 800665a:	00bf      	lsls	r7, r7, #2
 800665c:	4337      	orrs	r7, r6
 800665e:	e75f      	b.n	8006520 <HAL_TIM_OC_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8006660:	2508      	movs	r5, #8
 8006662:	43aa      	bics	r2, r5
    tmpccer |= OC_Config->OCNPolarity;
 8006664:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8006666:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8006668:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800666a:	2504      	movs	r5, #4
 800666c:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800666e:	4d1a      	ldr	r5, [pc, #104]	@ (80066d8 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8006670:	4035      	ands	r5, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8006672:	694e      	ldr	r6, [r1, #20]
 8006674:	433e      	orrs	r6, r7
 8006676:	432e      	orrs	r6, r5
 8006678:	e72d      	b.n	80064d6 <HAL_TIM_OC_ConfigChannel+0xa6>
  __HAL_LOCK(htim);
 800667a:	2002      	movs	r0, #2
 800667c:	e6e9      	b.n	8006452 <HAL_TIM_OC_ConfigChannel+0x22>
 800667e:	46c0      	nop			@ (mov r8, r8)
 8006680:	080087fc 	.word	0x080087fc
 8006684:	ffefffff 	.word	0xffefffff
 8006688:	feff8fff 	.word	0xfeff8fff
 800668c:	ffdfffff 	.word	0xffdfffff
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800
 800669c:	fffeff8c 	.word	0xfffeff8c
 80066a0:	feff8cff 	.word	0xfeff8cff
 80066a4:	fffffeff 	.word	0xfffffeff
 80066a8:	fffffdff 	.word	0xfffffdff
 80066ac:	ffffefff 	.word	0xffffefff
 80066b0:	ffffdfff 	.word	0xffffdfff
 80066b4:	fffeffff 	.word	0xfffeffff
 80066b8:	fffeff8f 	.word	0xfffeff8f
 80066bc:	fffdffff 	.word	0xfffdffff
 80066c0:	fffbffff 	.word	0xfffbffff
 80066c4:	ffffbfff 	.word	0xffffbfff
 80066c8:	fffff7ff 	.word	0xfffff7ff
 80066cc:	fffffbff 	.word	0xfffffbff
 80066d0:	ffffcfff 	.word	0xffffcfff
 80066d4:	fffff3ff 	.word	0xfffff3ff
 80066d8:	fffffcff 	.word	0xfffffcff

080066dc <HAL_TIM_IC_ConfigChannel>:
{
 80066dc:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80066de:	203c      	movs	r0, #60	@ 0x3c
{
 80066e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e2:	46ce      	mov	lr, r9
 80066e4:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 80066e6:	5c1c      	ldrb	r4, [r3, r0]
{
 80066e8:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 80066ea:	2c01      	cmp	r4, #1
 80066ec:	d100      	bne.n	80066f0 <HAL_TIM_IC_ConfigChannel+0x14>
 80066ee:	e0bf      	b.n	8006870 <HAL_TIM_IC_ConfigChannel+0x194>
 80066f0:	2401      	movs	r4, #1
 80066f2:	541c      	strb	r4, [r3, r0]
  if (Channel == TIM_CHANNEL_1)
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	d00e      	beq.n	8006716 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_2)
 80066f8:	2a04      	cmp	r2, #4
 80066fa:	d039      	beq.n	8006770 <HAL_TIM_IC_ConfigChannel+0x94>
  else if (Channel == TIM_CHANNEL_3)
 80066fc:	2a08      	cmp	r2, #8
 80066fe:	d100      	bne.n	8006702 <HAL_TIM_IC_ConfigChannel+0x26>
 8006700:	e08d      	b.n	800681e <HAL_TIM_IC_ConfigChannel+0x142>
    status = HAL_ERROR;
 8006702:	2001      	movs	r0, #1
  else if (Channel == TIM_CHANNEL_4)
 8006704:	2a0c      	cmp	r2, #12
 8006706:	d05a      	beq.n	80067be <HAL_TIM_IC_ConfigChannel+0xe2>
  __HAL_UNLOCK(htim);
 8006708:	223c      	movs	r2, #60	@ 0x3c
 800670a:	2100      	movs	r1, #0
 800670c:	5499      	strb	r1, [r3, r2]
}
 800670e:	bcc0      	pop	{r6, r7}
 8006710:	46b9      	mov	r9, r7
 8006712:	46b0      	mov	r8, r6
 8006714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8006716:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 8006718:	6848      	ldr	r0, [r1, #4]
  tmpccer = TIMx->CCER;
 800671a:	6a15      	ldr	r5, [r2, #32]
                      sConfig->ICSelection,
 800671c:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671e:	6a10      	ldr	r0, [r2, #32]
                      sConfig->ICPolarity,
 8006720:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006722:	43a0      	bics	r0, r4
                      sConfig->ICFilter);
 8006724:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006728:	6990      	ldr	r0, [r2, #24]
 800672a:	4684      	mov	ip, r0
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800672c:	4851      	ldr	r0, [pc, #324]	@ (8006874 <HAL_TIM_IC_ConfigChannel+0x198>)
 800672e:	4282      	cmp	r2, r0
 8006730:	d06e      	beq.n	8006810 <HAL_TIM_IC_ConfigChannel+0x134>
 8006732:	2080      	movs	r0, #128	@ 0x80
 8006734:	05c0      	lsls	r0, r0, #23
 8006736:	4282      	cmp	r2, r0
 8006738:	d06a      	beq.n	8006810 <HAL_TIM_IC_ConfigChannel+0x134>
 800673a:	484f      	ldr	r0, [pc, #316]	@ (8006878 <HAL_TIM_IC_ConfigChannel+0x19c>)
 800673c:	4282      	cmp	r2, r0
 800673e:	d067      	beq.n	8006810 <HAL_TIM_IC_ConfigChannel+0x134>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006740:	4660      	mov	r0, ip
 8006742:	4320      	orrs	r0, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006744:	24f0      	movs	r4, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006746:	013f      	lsls	r7, r7, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006748:	43a0      	bics	r0, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800674a:	340f      	adds	r4, #15
 800674c:	403c      	ands	r4, r7
 800674e:	4304      	orrs	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006750:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8006752:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006754:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006756:	4385      	bics	r5, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006758:	4030      	ands	r0, r6
 800675a:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 800675c:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800675e:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006760:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006762:	43a0      	bics	r0, r4
 8006764:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006766:	6990      	ldr	r0, [r2, #24]
 8006768:	4301      	orrs	r1, r0
 800676a:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800676c:	2000      	movs	r0, #0
 800676e:	e7cb      	b.n	8006708 <HAL_TIM_IC_ConfigChannel+0x2c>
                      sConfig->ICFilter);
 8006770:	68c8      	ldr	r0, [r1, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006772:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 8006774:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006776:	2010      	movs	r0, #16
  tmpccer = TIMx->CCER;
 8006778:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677a:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICPolarity,
 800677c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677e:	4387      	bics	r7, r0
                      sConfig->ICSelection,
 8006780:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006782:	6217      	str	r7, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006784:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006786:	483d      	ldr	r0, [pc, #244]	@ (800687c <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006788:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800678a:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800678c:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800678e:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006790:	4f3b      	ldr	r7, [pc, #236]	@ (8006880 <HAL_TIM_IC_ConfigChannel+0x1a4>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006792:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006794:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006796:	0c00      	lsrs	r0, r0, #16
 8006798:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800679a:	24a0      	movs	r4, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800679c:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800679e:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067a0:	4034      	ands	r4, r6
 80067a2:	432c      	orrs	r4, r5
  TIMx->CCMR1 = tmpccmr1 ;
 80067a4:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80067a6:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80067a8:	6990      	ldr	r0, [r2, #24]
 80067aa:	4c36      	ldr	r4, [pc, #216]	@ (8006884 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80067ac:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80067ae:	4020      	ands	r0, r4
 80067b0:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80067b2:	6990      	ldr	r0, [r2, #24]
 80067b4:	0209      	lsls	r1, r1, #8
 80067b6:	4301      	orrs	r1, r0
 80067b8:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2000      	movs	r0, #0
 80067bc:	e7a4      	b.n	8006708 <HAL_TIM_IC_ConfigChannel+0x2c>
                      sConfig->ICPolarity,
 80067be:	6808      	ldr	r0, [r1, #0]
    TIM_TI4_SetConfig(htim->Instance,
 80067c0:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 80067c2:	4680      	mov	r8, r0
  tmpccer = TIMx->CCER;
 80067c4:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c6:	4830      	ldr	r0, [pc, #192]	@ (8006888 <HAL_TIM_IC_ConfigChannel+0x1ac>)
 80067c8:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICSelection,
 80067ca:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067cc:	4007      	ands	r7, r0
                      sConfig->ICFilter);
 80067ce:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067d0:	6217      	str	r7, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067d2:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067d4:	4829      	ldr	r0, [pc, #164]	@ (800687c <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067d6:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067d8:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067da:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067dc:	4f28      	ldr	r7, [pc, #160]	@ (8006880 <HAL_TIM_IC_ConfigChannel+0x1a4>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067de:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067e0:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067e2:	0c24      	lsrs	r4, r4, #16
 80067e4:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067e6:	4d29      	ldr	r5, [pc, #164]	@ (800688c <HAL_TIM_IC_ConfigChannel+0x1b0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067e8:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067ea:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067ec:	26a0      	movs	r6, #160	@ 0xa0
 80067ee:	0300      	lsls	r0, r0, #12
 80067f0:	0236      	lsls	r6, r6, #8
 80067f2:	4030      	ands	r0, r6
 80067f4:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 80067f6:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 80067f8:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80067fa:	69d0      	ldr	r0, [r2, #28]
 80067fc:	4c21      	ldr	r4, [pc, #132]	@ (8006884 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067fe:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006800:	4020      	ands	r0, r4
 8006802:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006804:	69d0      	ldr	r0, [r2, #28]
 8006806:	0209      	lsls	r1, r1, #8
 8006808:	4301      	orrs	r1, r0
 800680a:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800680c:	2000      	movs	r0, #0
 800680e:	e77b      	b.n	8006708 <HAL_TIM_IC_ConfigChannel+0x2c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006810:	2403      	movs	r4, #3
 8006812:	4660      	mov	r0, ip
 8006814:	43a0      	bics	r0, r4
 8006816:	0004      	movs	r4, r0
    tmpccmr1 |= TIM_ICSelection;
 8006818:	4648      	mov	r0, r9
 800681a:	4320      	orrs	r0, r4
 800681c:	e792      	b.n	8006744 <HAL_TIM_IC_ConfigChannel+0x68>
    TIM_TI3_SetConfig(htim->Instance,
 800681e:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 8006820:	6808      	ldr	r0, [r1, #0]
  tmpccer = TIMx->CCER;
 8006822:	6a16      	ldr	r6, [r2, #32]
                      sConfig->ICPolarity,
 8006824:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006826:	6a14      	ldr	r4, [r2, #32]
 8006828:	4819      	ldr	r0, [pc, #100]	@ (8006890 <HAL_TIM_IC_ConfigChannel+0x1b4>)
                      sConfig->ICSelection,
 800682a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800682c:	4004      	ands	r4, r0
                      sConfig->ICFilter);
 800682e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006830:	6214      	str	r4, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006832:	69d4      	ldr	r4, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006834:	3005      	adds	r0, #5
 8006836:	30ff      	adds	r0, #255	@ 0xff
 8006838:	4384      	bics	r4, r0
  tmpccmr2 |= TIM_ICSelection;
 800683a:	4325      	orrs	r5, r4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800683c:	24f0      	movs	r4, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800683e:	013f      	lsls	r7, r7, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006840:	43a5      	bics	r5, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006842:	340f      	adds	r4, #15
 8006844:	403c      	ands	r4, r7
 8006846:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006848:	4d12      	ldr	r5, [pc, #72]	@ (8006894 <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800684a:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800684c:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800684e:	26a0      	movs	r6, #160	@ 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8006850:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006852:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006854:	0200      	lsls	r0, r0, #8
 8006856:	0136      	lsls	r6, r6, #4
 8006858:	4030      	ands	r0, r6
 800685a:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 800685c:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800685e:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006860:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006862:	43a0      	bics	r0, r4
 8006864:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006866:	69d0      	ldr	r0, [r2, #28]
 8006868:	4301      	orrs	r1, r0
 800686a:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800686c:	2000      	movs	r0, #0
 800686e:	e74b      	b.n	8006708 <HAL_TIM_IC_ConfigChannel+0x2c>
  __HAL_LOCK(htim);
 8006870:	2002      	movs	r0, #2
 8006872:	e74c      	b.n	800670e <HAL_TIM_IC_ConfigChannel+0x32>
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40000400 	.word	0x40000400
 800687c:	fffffcff 	.word	0xfffffcff
 8006880:	ffff0fff 	.word	0xffff0fff
 8006884:	fffff3ff 	.word	0xfffff3ff
 8006888:	ffffefff 	.word	0xffffefff
 800688c:	ffff5fff 	.word	0xffff5fff
 8006890:	fffffeff 	.word	0xfffffeff
 8006894:	fffff5ff 	.word	0xfffff5ff

08006898 <HAL_TIM_PWM_ConfigChannel>:
{
 8006898:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800689a:	203c      	movs	r0, #60	@ 0x3c
{
 800689c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800689e:	5c1c      	ldrb	r4, [r3, r0]
 80068a0:	2c01      	cmp	r4, #1
 80068a2:	d100      	bne.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0xe>
 80068a4:	e170      	b.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x2f0>
 80068a6:	2401      	movs	r4, #1
 80068a8:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 80068aa:	2a14      	cmp	r2, #20
 80068ac:	d803      	bhi.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ae:	48b7      	ldr	r0, [pc, #732]	@ (8006b8c <HAL_TIM_PWM_ConfigChannel+0x2f4>)
 80068b0:	0092      	lsls	r2, r2, #2
 80068b2:	5882      	ldr	r2, [r0, r2]
 80068b4:	4697      	mov	pc, r2
 80068b6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80068b8:	223c      	movs	r2, #60	@ 0x3c
 80068ba:	2100      	movs	r1, #0
 80068bc:	5499      	strb	r1, [r3, r2]
}
 80068be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068c0:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068c2:	4db3      	ldr	r5, [pc, #716]	@ (8006b90 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
  tmpccer = TIMx->CCER;
 80068c4:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068c6:	6a10      	ldr	r0, [r2, #32]
 80068c8:	4028      	ands	r0, r5
 80068ca:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068cc:	4db1      	ldr	r5, [pc, #708]	@ (8006b94 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  tmpcr2 =  TIMx->CR2;
 80068ce:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80068d0:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068d2:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d4:	680d      	ldr	r5, [r1, #0]
 80068d6:	022d      	lsls	r5, r5, #8
 80068d8:	4305      	orrs	r5, r0
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068da:	48af      	ldr	r0, [pc, #700]	@ (8006b98 <HAL_TIM_PWM_ConfigChannel+0x300>)
 80068dc:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068de:	6888      	ldr	r0, [r1, #8]
 80068e0:	0500      	lsls	r0, r0, #20
 80068e2:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e4:	4cad      	ldr	r4, [pc, #692]	@ (8006b9c <HAL_TIM_PWM_ConfigChannel+0x304>)
 80068e6:	42a2      	cmp	r2, r4
 80068e8:	d100      	bne.n	80068ec <HAL_TIM_PWM_ConfigChannel+0x54>
 80068ea:	e113      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x27c>
 80068ec:	4cac      	ldr	r4, [pc, #688]	@ (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x308>)
 80068ee:	42a2      	cmp	r2, r4
 80068f0:	d100      	bne.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80068f2:	e10f      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x27c>
 80068f4:	4cab      	ldr	r4, [pc, #684]	@ (8006ba4 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 80068f6:	42a2      	cmp	r2, r4
 80068f8:	d100      	bne.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x64>
 80068fa:	e10b      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x27c>
  TIMx->CCR6 = OC_Config->Pulse;
 80068fc:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80068fe:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006900:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8006902:	65d4      	str	r4, [r2, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 8006904:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006906:	2080      	movs	r0, #128	@ 0x80
 8006908:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 800690a:	0100      	lsls	r0, r0, #4
 800690c:	4320      	orrs	r0, r4
 800690e:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006910:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8006912:	4ca5      	ldr	r4, [pc, #660]	@ (8006ba8 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006914:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006916:	4020      	ands	r0, r4
 8006918:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800691a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 800691c:	0209      	lsls	r1, r1, #8
 800691e:	4301      	orrs	r1, r0
 8006920:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2000      	movs	r0, #0
 8006924:	e7c8      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006926:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006928:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 800692a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692c:	6a14      	ldr	r4, [r2, #32]
 800692e:	43ac      	bics	r4, r5
 8006930:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006932:	4d9e      	ldr	r5, [pc, #632]	@ (8006bac <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpcr2 =  TIMx->CR2;
 8006934:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8006936:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006938:	402c      	ands	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 800693a:	680d      	ldr	r5, [r1, #0]
 800693c:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC1P;
 800693e:	2502      	movs	r5, #2
 8006940:	43a8      	bics	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8006942:	688d      	ldr	r5, [r1, #8]
 8006944:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006946:	4d95      	ldr	r5, [pc, #596]	@ (8006b9c <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006948:	42aa      	cmp	r2, r5
 800694a:	d100      	bne.n	800694e <HAL_TIM_PWM_ConfigChannel+0xb6>
 800694c:	e10f      	b.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x2d6>
 800694e:	4d94      	ldr	r5, [pc, #592]	@ (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006950:	42aa      	cmp	r2, r5
 8006952:	d100      	bne.n	8006956 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8006954:	e10b      	b.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8006956:	4d93      	ldr	r5, [pc, #588]	@ (8006ba4 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006958:	42aa      	cmp	r2, r5
 800695a:	d100      	bne.n	800695e <HAL_TIM_PWM_ConfigChannel+0xc6>
 800695c:	e107      	b.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CR2 = tmpcr2;
 800695e:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006960:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006962:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006964:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8006966:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006968:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 800696a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800696c:	6990      	ldr	r0, [r2, #24]
 800696e:	4320      	orrs	r0, r4
 8006970:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006972:	6990      	ldr	r0, [r2, #24]
 8006974:	3c04      	subs	r4, #4
 8006976:	43a0      	bics	r0, r4
 8006978:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800697a:	6990      	ldr	r0, [r2, #24]
 800697c:	4301      	orrs	r1, r0
 800697e:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006980:	2000      	movs	r0, #0
 8006982:	e799      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006984:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006986:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8006988:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800698a:	6a14      	ldr	r4, [r2, #32]
 800698c:	43ac      	bics	r4, r5
 800698e:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006990:	4d87      	ldr	r5, [pc, #540]	@ (8006bb0 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpcr2 =  TIMx->CR2;
 8006992:	6857      	ldr	r7, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8006994:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006996:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	680d      	ldr	r5, [r1, #0]
 800699a:	022d      	lsls	r5, r5, #8
 800699c:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 800699e:	2420      	movs	r4, #32
 80069a0:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069a2:	688c      	ldr	r4, [r1, #8]
 80069a4:	0124      	lsls	r4, r4, #4
 80069a6:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069a8:	487c      	ldr	r0, [pc, #496]	@ (8006b9c <HAL_TIM_PWM_ConfigChannel+0x304>)
 80069aa:	4282      	cmp	r2, r0
 80069ac:	d100      	bne.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x118>
 80069ae:	e0cf      	b.n	8006b50 <HAL_TIM_PWM_ConfigChannel+0x2b8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b0:	487b      	ldr	r0, [pc, #492]	@ (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x308>)
 80069b2:	4282      	cmp	r2, r0
 80069b4:	d100      	bne.n	80069b8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80069b6:	e0d2      	b.n	8006b5e <HAL_TIM_PWM_ConfigChannel+0x2c6>
 80069b8:	487a      	ldr	r0, [pc, #488]	@ (8006ba4 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 80069ba:	4282      	cmp	r2, r0
 80069bc:	d100      	bne.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x128>
 80069be:	e0ce      	b.n	8006b5e <HAL_TIM_PWM_ConfigChannel+0x2c6>
  TIMx->CCR2 = OC_Config->Pulse;
 80069c0:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80069c2:	6057      	str	r7, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80069c4:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80069c6:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069c8:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 80069ca:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069cc:	6994      	ldr	r4, [r2, #24]
 80069ce:	0100      	lsls	r0, r0, #4
 80069d0:	4320      	orrs	r0, r4
 80069d2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069d4:	6990      	ldr	r0, [r2, #24]
 80069d6:	4c74      	ldr	r4, [pc, #464]	@ (8006ba8 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069d8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069da:	4020      	ands	r0, r4
 80069dc:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069de:	6990      	ldr	r0, [r2, #24]
 80069e0:	0209      	lsls	r1, r1, #8
 80069e2:	4301      	orrs	r1, r0
 80069e4:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80069e6:	2000      	movs	r0, #0
 80069e8:	e766      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069ea:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ec:	4d71      	ldr	r5, [pc, #452]	@ (8006bb4 <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 80069ee:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069f0:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 80069f2:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069f4:	402c      	ands	r4, r5
 80069f6:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80069f8:	6854      	ldr	r4, [r2, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069fa:	4d6c      	ldr	r5, [pc, #432]	@ (8006bac <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpcr2 =  TIMx->CR2;
 80069fc:	46a4      	mov	ip, r4
  tmpccmrx = TIMx->CCMR2;
 80069fe:	69d4      	ldr	r4, [r2, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a00:	688e      	ldr	r6, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a02:	402c      	ands	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 8006a04:	4327      	orrs	r7, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8006a06:	4c6c      	ldr	r4, [pc, #432]	@ (8006bb8 <HAL_TIM_PWM_ConfigChannel+0x320>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a08:	0236      	lsls	r6, r6, #8
  tmpccer &= ~TIM_CCER_CC3P;
 8006a0a:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a0c:	4306      	orrs	r6, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a0e:	4863      	ldr	r0, [pc, #396]	@ (8006b9c <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006a10:	4282      	cmp	r2, r0
 8006a12:	d100      	bne.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006a14:	e08a      	b.n	8006b2c <HAL_TIM_PWM_ConfigChannel+0x294>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a16:	4862      	ldr	r0, [pc, #392]	@ (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006a18:	4282      	cmp	r2, r0
 8006a1a:	d100      	bne.n	8006a1e <HAL_TIM_PWM_ConfigChannel+0x186>
 8006a1c:	e08d      	b.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x2a2>
 8006a1e:	4861      	ldr	r0, [pc, #388]	@ (8006ba4 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006a20:	4282      	cmp	r2, r0
 8006a22:	d100      	bne.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x18e>
 8006a24:	e089      	b.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x2a2>
  TIMx->CR2 = tmpcr2;
 8006a26:	4660      	mov	r0, ip
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a28:	2408      	movs	r4, #8
  TIMx->CR2 = tmpcr2;
 8006a2a:	6050      	str	r0, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8006a2c:	6848      	ldr	r0, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006a2e:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006a30:	63d0      	str	r0, [r2, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8006a32:	6216      	str	r6, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a34:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a36:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a38:	4320      	orrs	r0, r4
 8006a3a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a3c:	69d0      	ldr	r0, [r2, #28]
 8006a3e:	3c04      	subs	r4, #4
 8006a40:	43a0      	bics	r0, r4
 8006a42:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a44:	69d0      	ldr	r0, [r2, #28]
 8006a46:	4301      	orrs	r1, r0
 8006a48:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e734      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a4e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a50:	4d5a      	ldr	r5, [pc, #360]	@ (8006bbc <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 8006a52:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a54:	6a10      	ldr	r0, [r2, #32]
 8006a56:	4028      	ands	r0, r5
 8006a58:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a5a:	4d55      	ldr	r5, [pc, #340]	@ (8006bb0 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpcr2 =  TIMx->CR2;
 8006a5c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8006a5e:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a60:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a62:	680d      	ldr	r5, [r1, #0]
 8006a64:	022d      	lsls	r5, r5, #8
 8006a66:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8006a68:	4855      	ldr	r0, [pc, #340]	@ (8006bc0 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006a6a:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a6c:	6888      	ldr	r0, [r1, #8]
 8006a6e:	0300      	lsls	r0, r0, #12
 8006a70:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	4c4a      	ldr	r4, [pc, #296]	@ (8006b9c <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006a74:	42a2      	cmp	r2, r4
 8006a76:	d053      	beq.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x288>
 8006a78:	4c49      	ldr	r4, [pc, #292]	@ (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006a7a:	42a2      	cmp	r2, r4
 8006a7c:	d050      	beq.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x288>
 8006a7e:	4c49      	ldr	r4, [pc, #292]	@ (8006ba4 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006a80:	42a2      	cmp	r2, r4
 8006a82:	d04d      	beq.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x288>
  TIMx->CCR4 = OC_Config->Pulse;
 8006a84:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006a86:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006a88:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006a8a:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006a8c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a8e:	2080      	movs	r0, #128	@ 0x80
 8006a90:	69d4      	ldr	r4, [r2, #28]
 8006a92:	0100      	lsls	r0, r0, #4
 8006a94:	4320      	orrs	r0, r4
 8006a96:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a98:	69d0      	ldr	r0, [r2, #28]
 8006a9a:	4c43      	ldr	r4, [pc, #268]	@ (8006ba8 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a9c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a9e:	4020      	ands	r0, r4
 8006aa0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aa2:	69d0      	ldr	r0, [r2, #28]
 8006aa4:	0209      	lsls	r1, r1, #8
 8006aa6:	4301      	orrs	r1, r0
 8006aa8:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e704      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006aae:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ab0:	4d44      	ldr	r5, [pc, #272]	@ (8006bc4 <HAL_TIM_PWM_ConfigChannel+0x32c>)
  tmpccer = TIMx->CCER;
 8006ab2:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ab4:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ab6:	4e44      	ldr	r6, [pc, #272]	@ (8006bc8 <HAL_TIM_PWM_ConfigChannel+0x330>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ab8:	4028      	ands	r0, r5
 8006aba:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006abc:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8006abe:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ac0:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8006ac2:	680e      	ldr	r6, [r1, #0]
 8006ac4:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC5P;
 8006ac6:	4841      	ldr	r0, [pc, #260]	@ (8006bcc <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006ac8:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006aca:	6888      	ldr	r0, [r1, #8]
 8006acc:	0400      	lsls	r0, r0, #16
 8006ace:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad0:	4c32      	ldr	r4, [pc, #200]	@ (8006b9c <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006ad2:	42a2      	cmp	r2, r4
 8006ad4:	d018      	beq.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x270>
 8006ad6:	4c32      	ldr	r4, [pc, #200]	@ (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006ad8:	42a2      	cmp	r2, r4
 8006ada:	d015      	beq.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x270>
 8006adc:	4c31      	ldr	r4, [pc, #196]	@ (8006ba4 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006ade:	42a2      	cmp	r2, r4
 8006ae0:	d012      	beq.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x270>
  TIMx->CCR5 = OC_Config->Pulse;
 8006ae2:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006ae4:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006ae6:	6556      	str	r6, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8006ae8:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aea:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8006aec:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aee:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006af0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006af2:	4320      	orrs	r0, r4
 8006af4:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006af6:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8006af8:	3c04      	subs	r4, #4
 8006afa:	43a0      	bics	r0, r4
 8006afc:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006afe:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8006b00:	4301      	orrs	r1, r0
 8006b02:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8006b04:	2000      	movs	r0, #0
 8006b06:	e6d7      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b08:	4c2e      	ldr	r4, [pc, #184]	@ (8006bc4 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006b0a:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b0c:	694d      	ldr	r5, [r1, #20]
 8006b0e:	022d      	lsls	r5, r5, #8
 8006b10:	4325      	orrs	r5, r4
 8006b12:	e7e6      	b.n	8006ae2 <HAL_TIM_PWM_ConfigChannel+0x24a>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b14:	4c2e      	ldr	r4, [pc, #184]	@ (8006bd0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006b16:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b18:	694e      	ldr	r6, [r1, #20]
 8006b1a:	02b6      	lsls	r6, r6, #10
 8006b1c:	4326      	orrs	r6, r4
 8006b1e:	e6ed      	b.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b20:	4c2c      	ldr	r4, [pc, #176]	@ (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8006b22:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b24:	694e      	ldr	r6, [r1, #20]
 8006b26:	01b6      	lsls	r6, r6, #6
 8006b28:	4326      	orrs	r6, r4
 8006b2a:	e7ab      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x1ec>
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b2c:	482a      	ldr	r0, [pc, #168]	@ (8006bd8 <HAL_TIM_PWM_ConfigChannel+0x340>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b2e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b30:	4030      	ands	r0, r6
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b32:	0224      	lsls	r4, r4, #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b34:	4e1c      	ldr	r6, [pc, #112]	@ (8006ba8 <HAL_TIM_PWM_ConfigChannel+0x310>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b36:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b38:	4026      	ands	r6, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b3a:	4660      	mov	r0, ip
 8006b3c:	4d27      	ldr	r5, [pc, #156]	@ (8006bdc <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b3e:	698c      	ldr	r4, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b40:	4028      	ands	r0, r5
 8006b42:	0005      	movs	r5, r0
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b44:	6948      	ldr	r0, [r1, #20]
 8006b46:	4320      	orrs	r0, r4
 8006b48:	0100      	lsls	r0, r0, #4
 8006b4a:	4328      	orrs	r0, r5
 8006b4c:	4684      	mov	ip, r0
 8006b4e:	e76a      	b.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x18e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b50:	2080      	movs	r0, #128	@ 0x80
 8006b52:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b54:	68c8      	ldr	r0, [r1, #12]
 8006b56:	0100      	lsls	r0, r0, #4
 8006b58:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b5a:	2040      	movs	r0, #64	@ 0x40
 8006b5c:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b5e:	4e20      	ldr	r6, [pc, #128]	@ (8006be0 <HAL_TIM_PWM_ConfigChannel+0x348>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b60:	6948      	ldr	r0, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b62:	403e      	ands	r6, r7
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b64:	698f      	ldr	r7, [r1, #24]
 8006b66:	4307      	orrs	r7, r0
 8006b68:	00bf      	lsls	r7, r7, #2
 8006b6a:	4337      	orrs	r7, r6
 8006b6c:	e728      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b6e:	2508      	movs	r5, #8
 8006b70:	43a8      	bics	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8006b72:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b74:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8006b76:	4328      	orrs	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b78:	2504      	movs	r5, #4
 8006b7a:	43a8      	bics	r0, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7c:	4d19      	ldr	r5, [pc, #100]	@ (8006be4 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8006b7e:	4035      	ands	r5, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b80:	694e      	ldr	r6, [r1, #20]
 8006b82:	433e      	orrs	r6, r7
 8006b84:	432e      	orrs	r6, r5
 8006b86:	e6ea      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 8006b88:	2002      	movs	r0, #2
 8006b8a:	e698      	b.n	80068be <HAL_TIM_PWM_ConfigChannel+0x26>
 8006b8c:	08008850 	.word	0x08008850
 8006b90:	ffefffff 	.word	0xffefffff
 8006b94:	feff8fff 	.word	0xfeff8fff
 8006b98:	ffdfffff 	.word	0xffdfffff
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800
 8006ba8:	fffffbff 	.word	0xfffffbff
 8006bac:	fffeff8c 	.word	0xfffeff8c
 8006bb0:	feff8cff 	.word	0xfeff8cff
 8006bb4:	fffffeff 	.word	0xfffffeff
 8006bb8:	fffffdff 	.word	0xfffffdff
 8006bbc:	ffffefff 	.word	0xffffefff
 8006bc0:	ffffdfff 	.word	0xffffdfff
 8006bc4:	fffeffff 	.word	0xfffeffff
 8006bc8:	fffeff8f 	.word	0xfffeff8f
 8006bcc:	fffdffff 	.word	0xfffdffff
 8006bd0:	fffbffff 	.word	0xfffbffff
 8006bd4:	ffffbfff 	.word	0xffffbfff
 8006bd8:	fffff7ff 	.word	0xfffff7ff
 8006bdc:	ffffcfff 	.word	0xffffcfff
 8006be0:	fffff3ff 	.word	0xfffff3ff
 8006be4:	fffffcff 	.word	0xfffffcff

08006be8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006be8:	223c      	movs	r2, #60	@ 0x3c
{
 8006bea:	b570      	push	{r4, r5, r6, lr}
 8006bec:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8006bee:	5c80      	ldrb	r0, [r0, r2]
 8006bf0:	2801      	cmp	r0, #1
 8006bf2:	d100      	bne.n	8006bf6 <HAL_TIM_ConfigClockSource+0xe>
 8006bf4:	e06f      	b.n	8006cd6 <HAL_TIM_ConfigClockSource+0xee>
 8006bf6:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8006bfa:	549c      	strb	r4, [r3, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	3201      	adds	r2, #1
 8006bfe:	5498      	strb	r0, [r3, r2]
  tmpsmcr = htim->Instance->SMCR;
 8006c00:	681a      	ldr	r2, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c02:	4d4e      	ldr	r5, [pc, #312]	@ (8006d3c <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr = htim->Instance->SMCR;
 8006c04:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c06:	4028      	ands	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8006c08:	6090      	str	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006c0a:	6808      	ldr	r0, [r1, #0]
 8006c0c:	2860      	cmp	r0, #96	@ 0x60
 8006c0e:	d100      	bne.n	8006c12 <HAL_TIM_ConfigClockSource+0x2a>
 8006c10:	e07a      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x120>
 8006c12:	d80b      	bhi.n	8006c2c <HAL_TIM_ConfigClockSource+0x44>
 8006c14:	2840      	cmp	r0, #64	@ 0x40
 8006c16:	d060      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0xf2>
 8006c18:	d829      	bhi.n	8006c6e <HAL_TIM_ConfigClockSource+0x86>
 8006c1a:	2820      	cmp	r0, #32
 8006c1c:	d053      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0xde>
 8006c1e:	d850      	bhi.n	8006cc2 <HAL_TIM_ConfigClockSource+0xda>
 8006c20:	2110      	movs	r1, #16
 8006c22:	0004      	movs	r4, r0
 8006c24:	438c      	bics	r4, r1
 8006c26:	d04e      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0xde>
      status = HAL_ERROR;
 8006c28:	2001      	movs	r0, #1
 8006c2a:	e019      	b.n	8006c60 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8006c2c:	2480      	movs	r4, #128	@ 0x80
 8006c2e:	0164      	lsls	r4, r4, #5
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d014      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x76>
 8006c34:	2480      	movs	r4, #128	@ 0x80
 8006c36:	01a4      	lsls	r4, r4, #6
 8006c38:	42a0      	cmp	r0, r4
 8006c3a:	d031      	beq.n	8006ca0 <HAL_TIM_ConfigClockSource+0xb8>
 8006c3c:	2870      	cmp	r0, #112	@ 0x70
 8006c3e:	d1f3      	bne.n	8006c28 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8006c40:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c42:	483f      	ldr	r0, [pc, #252]	@ (8006d40 <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c44:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c46:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c48:	6888      	ldr	r0, [r1, #8]
 8006c4a:	68c9      	ldr	r1, [r1, #12]
 8006c4c:	4328      	orrs	r0, r5
 8006c4e:	0209      	lsls	r1, r1, #8
 8006c50:	4301      	orrs	r1, r0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c52:	2077      	movs	r0, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c54:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8006c56:	6091      	str	r1, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006c58:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c5a:	4301      	orrs	r1, r0
      htim->Instance->SMCR = tmpsmcr;
 8006c5c:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006c60:	223d      	movs	r2, #61	@ 0x3d
 8006c62:	2101      	movs	r1, #1
 8006c64:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8006c66:	2100      	movs	r1, #0
 8006c68:	3a01      	subs	r2, #1
 8006c6a:	5499      	strb	r1, [r3, r2]
}
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006c6e:	2850      	cmp	r0, #80	@ 0x50
 8006c70:	d1da      	bne.n	8006c28 <HAL_TIM_ConfigClockSource+0x40>
  tmpccer = TIMx->CCER;
 8006c72:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c74:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8006c76:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c78:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 8006c7a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7c:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c7e:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8006c80:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c82:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c84:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c86:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c88:	240a      	movs	r4, #10
 8006c8a:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 8006c8c:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 8006c8e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006c90:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006c92:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c94:	482b      	ldr	r0, [pc, #172]	@ (8006d44 <HAL_TIM_ConfigClockSource+0x15c>)
 8006c96:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c98:	2057      	movs	r0, #87	@ 0x57
 8006c9a:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8006c9c:	6091      	str	r1, [r2, #8]
}
 8006c9e:	e7de      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr = TIMx->SMCR;
 8006ca0:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca2:	4827      	ldr	r0, [pc, #156]	@ (8006d40 <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca6:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca8:	6888      	ldr	r0, [r1, #8]
 8006caa:	68c9      	ldr	r1, [r1, #12]
 8006cac:	4328      	orrs	r0, r5
 8006cae:	0209      	lsls	r1, r1, #8
 8006cb0:	4301      	orrs	r1, r0
 8006cb2:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8006cb4:	6091      	str	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cb6:	2180      	movs	r1, #128	@ 0x80
 8006cb8:	6890      	ldr	r0, [r2, #8]
 8006cba:	01c9      	lsls	r1, r1, #7
 8006cbc:	4301      	orrs	r1, r0
 8006cbe:	6091      	str	r1, [r2, #8]
      break;
 8006cc0:	e7cd      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8006cc2:	2830      	cmp	r0, #48	@ 0x30
 8006cc4:	d1b0      	bne.n	8006c28 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8006cc6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cc8:	4c1e      	ldr	r4, [pc, #120]	@ (8006d44 <HAL_TIM_ConfigClockSource+0x15c>)
 8006cca:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ccc:	4301      	orrs	r1, r0
 8006cce:	2007      	movs	r0, #7
 8006cd0:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8006cd2:	6091      	str	r1, [r2, #8]
}
 8006cd4:	e7c3      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x76>
  __HAL_LOCK(htim);
 8006cd6:	2002      	movs	r0, #2
 8006cd8:	e7c8      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x84>
  tmpccer = TIMx->CCER;
 8006cda:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cdc:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8006cde:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce0:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 8006ce2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce4:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ce6:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8006ce8:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cea:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cec:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cee:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cf0:	240a      	movs	r4, #10
 8006cf2:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 8006cf4:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 8006cf6:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006cf8:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006cfa:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cfc:	4811      	ldr	r0, [pc, #68]	@ (8006d44 <HAL_TIM_ConfigClockSource+0x15c>)
 8006cfe:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d00:	2047      	movs	r0, #71	@ 0x47
 8006d02:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8006d04:	6091      	str	r1, [r2, #8]
}
 8006d06:	e7aa      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d08:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8006d0a:	6a15      	ldr	r5, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8006d0c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006d0e:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d10:	6a11      	ldr	r1, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d12:	0324      	lsls	r4, r4, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d14:	43b1      	bics	r1, r6
 8006d16:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d18:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d1a:	4e0b      	ldr	r6, [pc, #44]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x160>)
 8006d1c:	4031      	ands	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d1e:	430c      	orrs	r4, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d20:	21a0      	movs	r1, #160	@ 0xa0
 8006d22:	438d      	bics	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d24:	0101      	lsls	r1, r0, #4
 8006d26:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1 ;
 8006d28:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8006d2a:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006d2c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d2e:	4805      	ldr	r0, [pc, #20]	@ (8006d44 <HAL_TIM_ConfigClockSource+0x15c>)
 8006d30:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d32:	2067      	movs	r0, #103	@ 0x67
 8006d34:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8006d36:	6091      	str	r1, [r2, #8]
}
 8006d38:	e791      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x76>
 8006d3a:	46c0      	nop			@ (mov r8, r8)
 8006d3c:	ffce0088 	.word	0xffce0088
 8006d40:	ffff00ff 	.word	0xffff00ff
 8006d44:	ffcfff8f 	.word	0xffcfff8f
 8006d48:	ffff0fff 	.word	0xffff0fff

08006d4c <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8006d4c:	2908      	cmp	r1, #8
 8006d4e:	d00e      	beq.n	8006d6e <HAL_TIM_ReadCapturedValue+0x22>
 8006d50:	d806      	bhi.n	8006d60 <HAL_TIM_ReadCapturedValue+0x14>
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d00e      	beq.n	8006d74 <HAL_TIM_ReadCapturedValue+0x28>
 8006d56:	2904      	cmp	r1, #4
 8006d58:	d107      	bne.n	8006d6a <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR2;
 8006d5a:	6803      	ldr	r3, [r0, #0]
 8006d5c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8006d5e:	e003      	b.n	8006d68 <HAL_TIM_ReadCapturedValue+0x1c>
  switch (Channel)
 8006d60:	290c      	cmp	r1, #12
 8006d62:	d102      	bne.n	8006d6a <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR4;
 8006d64:	6803      	ldr	r3, [r0, #0]
 8006d66:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8006d68:	4770      	bx	lr
  switch (Channel)
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e7fc      	b.n	8006d68 <HAL_TIM_ReadCapturedValue+0x1c>
      tmpreg =   htim->Instance->CCR3;
 8006d6e:	6803      	ldr	r3, [r0, #0]
 8006d70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8006d72:	e7f9      	b.n	8006d68 <HAL_TIM_ReadCapturedValue+0x1c>
      tmpreg =  htim->Instance->CCR1;
 8006d74:	6803      	ldr	r3, [r0, #0]
 8006d76:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8006d78:	e7f6      	b.n	8006d68 <HAL_TIM_ReadCapturedValue+0x1c>
 8006d7a:	46c0      	nop			@ (mov r8, r8)

08006d7c <HAL_TIM_RegisterCallback>:
{
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	b530      	push	{r4, r5, lr}
  if (pCallback == NULL)
 8006d80:	2a00      	cmp	r2, #0
 8006d82:	d00e      	beq.n	8006da2 <HAL_TIM_RegisterCallback+0x26>
  if (htim->State == HAL_TIM_STATE_READY)
 8006d84:	253d      	movs	r5, #61	@ 0x3d
 8006d86:	5d44      	ldrb	r4, [r0, r5]
 8006d88:	b2e0      	uxtb	r0, r4
 8006d8a:	2c01      	cmp	r4, #1
 8006d8c:	d00b      	beq.n	8006da6 <HAL_TIM_RegisterCallback+0x2a>
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006d8e:	5d5c      	ldrb	r4, [r3, r5]
    return HAL_ERROR;
 8006d90:	2001      	movs	r0, #1
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006d92:	2c00      	cmp	r4, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
    switch (CallbackID)
 8006d96:	290d      	cmp	r1, #13
 8006d98:	d804      	bhi.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
 8006d9a:	4837      	ldr	r0, [pc, #220]	@ (8006e78 <HAL_TIM_RegisterCallback+0xfc>)
 8006d9c:	0089      	lsls	r1, r1, #2
 8006d9e:	5841      	ldr	r1, [r0, r1]
 8006da0:	468f      	mov	pc, r1
    return HAL_ERROR;
 8006da2:	2001      	movs	r0, #1
}
 8006da4:	bd30      	pop	{r4, r5, pc}
    switch (CallbackID)
 8006da6:	291b      	cmp	r1, #27
 8006da8:	d8fc      	bhi.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
 8006daa:	4834      	ldr	r0, [pc, #208]	@ (8006e7c <HAL_TIM_RegisterCallback+0x100>)
 8006dac:	0089      	lsls	r1, r1, #2
 8006dae:	5841      	ldr	r1, [r0, r1]
 8006db0:	468f      	mov	pc, r1
  HAL_StatusTypeDef status = HAL_OK;
 8006db2:	2000      	movs	r0, #0
        htim->HallSensor_MspInitCallback   = pCallback;
 8006db4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006db6:	e7f5      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006db8:	2180      	movs	r1, #128	@ 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8006dba:	2000      	movs	r0, #0
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006dbc:	505a      	str	r2, [r3, r1]
        break;
 8006dbe:	e7f1      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006dc0:	2000      	movs	r0, #0
        htim->Base_MspInitCallback         = pCallback;
 8006dc2:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006dc4:	e7ee      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006dc6:	2000      	movs	r0, #0
        htim->Base_MspDeInitCallback       = pCallback;
 8006dc8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006dca:	e7eb      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006dcc:	2000      	movs	r0, #0
        htim->IC_MspInitCallback           = pCallback;
 8006dce:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006dd0:	e7e8      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006dd2:	2000      	movs	r0, #0
        htim->IC_MspDeInitCallback         = pCallback;
 8006dd4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006dd6:	e7e5      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006dd8:	2000      	movs	r0, #0
        htim->OC_MspInitCallback           = pCallback;
 8006dda:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006ddc:	e7e2      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006dde:	2000      	movs	r0, #0
        htim->OC_MspDeInitCallback         = pCallback;
 8006de0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006de2:	e7df      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006de4:	2000      	movs	r0, #0
        htim->PWM_MspInitCallback          = pCallback;
 8006de6:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006de8:	e7dc      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006dea:	2000      	movs	r0, #0
        htim->PWM_MspDeInitCallback        = pCallback;
 8006dec:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006dee:	e7d9      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006df0:	2000      	movs	r0, #0
        htim->OnePulse_MspInitCallback     = pCallback;
 8006df2:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006df4:	e7d6      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006df6:	2000      	movs	r0, #0
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006df8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006dfa:	e7d3      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006dfc:	2000      	movs	r0, #0
        htim->Encoder_MspInitCallback      = pCallback;
 8006dfe:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006e00:	e7d0      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8006e02:	2000      	movs	r0, #0
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006e04:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006e06:	e7cd      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->PeriodElapsedCallback                = pCallback;
 8006e08:	2184      	movs	r1, #132	@ 0x84
  HAL_StatusTypeDef status = HAL_OK;
 8006e0a:	2000      	movs	r0, #0
        htim->PeriodElapsedCallback                = pCallback;
 8006e0c:	505a      	str	r2, [r3, r1]
        break;
 8006e0e:	e7c9      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006e10:	2188      	movs	r1, #136	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;
 8006e12:	2000      	movs	r0, #0
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006e14:	505a      	str	r2, [r3, r1]
        break;
 8006e16:	e7c5      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->Break2Callback                       = pCallback;
 8006e18:	21b8      	movs	r1, #184	@ 0xb8
  HAL_StatusTypeDef status = HAL_OK;
 8006e1a:	2000      	movs	r0, #0
        htim->Break2Callback                       = pCallback;
 8006e1c:	505a      	str	r2, [r3, r1]
        break;
 8006e1e:	e7c1      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->BreakCallback                        = pCallback;
 8006e20:	21b4      	movs	r1, #180	@ 0xb4
  HAL_StatusTypeDef status = HAL_OK;
 8006e22:	2000      	movs	r0, #0
        htim->BreakCallback                        = pCallback;
 8006e24:	505a      	str	r2, [r3, r1]
        break;
 8006e26:	e7bd      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->CommutationCallback                  = pCallback;
 8006e28:	21ac      	movs	r1, #172	@ 0xac
  HAL_StatusTypeDef status = HAL_OK;
 8006e2a:	2000      	movs	r0, #0
        htim->CommutationCallback                  = pCallback;
 8006e2c:	505a      	str	r2, [r3, r1]
        break;
 8006e2e:	e7b9      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->CommutationHalfCpltCallback          = pCallback;
 8006e30:	21b0      	movs	r1, #176	@ 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 8006e32:	2000      	movs	r0, #0
        htim->CommutationHalfCpltCallback          = pCallback;
 8006e34:	505a      	str	r2, [r3, r1]
        break;
 8006e36:	e7b5      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->TriggerCallback                      = pCallback;
 8006e38:	218c      	movs	r1, #140	@ 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 8006e3a:	2000      	movs	r0, #0
        htim->TriggerCallback                      = pCallback;
 8006e3c:	505a      	str	r2, [r3, r1]
        break;
 8006e3e:	e7b1      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->TriggerHalfCpltCallback              = pCallback;
 8006e40:	2190      	movs	r1, #144	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	2000      	movs	r0, #0
        htim->TriggerHalfCpltCallback              = pCallback;
 8006e44:	505a      	str	r2, [r3, r1]
        break;
 8006e46:	e7ad      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->IC_CaptureCallback                   = pCallback;
 8006e48:	2194      	movs	r1, #148	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 8006e4a:	2000      	movs	r0, #0
        htim->IC_CaptureCallback                   = pCallback;
 8006e4c:	505a      	str	r2, [r3, r1]
        break;
 8006e4e:	e7a9      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006e50:	2198      	movs	r1, #152	@ 0x98
  HAL_StatusTypeDef status = HAL_OK;
 8006e52:	2000      	movs	r0, #0
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006e54:	505a      	str	r2, [r3, r1]
        break;
 8006e56:	e7a5      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->OC_DelayElapsedCallback              = pCallback;
 8006e58:	219c      	movs	r1, #156	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 8006e5a:	2000      	movs	r0, #0
        htim->OC_DelayElapsedCallback              = pCallback;
 8006e5c:	505a      	str	r2, [r3, r1]
        break;
 8006e5e:	e7a1      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006e60:	21a0      	movs	r1, #160	@ 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 8006e62:	2000      	movs	r0, #0
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006e64:	505a      	str	r2, [r3, r1]
        break;
 8006e66:	e79d      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006e68:	21a4      	movs	r1, #164	@ 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 8006e6a:	2000      	movs	r0, #0
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006e6c:	505a      	str	r2, [r3, r1]
        break;
 8006e6e:	e799      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
        htim->ErrorCallback                        = pCallback;
 8006e70:	21a8      	movs	r1, #168	@ 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 8006e72:	2000      	movs	r0, #0
        htim->ErrorCallback                        = pCallback;
 8006e74:	505a      	str	r2, [r3, r1]
        break;
 8006e76:	e795      	b.n	8006da4 <HAL_TIM_RegisterCallback+0x28>
 8006e78:	080088a4 	.word	0x080088a4
 8006e7c:	080088dc 	.word	0x080088dc

08006e80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e80:	233c      	movs	r3, #60	@ 0x3c
{
 8006e82:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006e84:	5cc3      	ldrb	r3, [r0, r3]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d02a      	beq.n	8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8a:	233d      	movs	r3, #61	@ 0x3d
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e90:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e92:	4e14      	ldr	r6, [pc, #80]	@ (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8006e94:	685a      	ldr	r2, [r3, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e96:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006e98:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e9a:	42b3      	cmp	r3, r6
 8006e9c:	d017      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e9e:	2670      	movs	r6, #112	@ 0x70
 8006ea0:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea6:	2280      	movs	r2, #128	@ 0x80
 8006ea8:	05d2      	lsls	r2, r2, #23
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d002      	beq.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8006eae:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d104      	bne.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eb4:	2280      	movs	r2, #128	@ 0x80
 8006eb6:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eb8:	688a      	ldr	r2, [r1, #8]
 8006eba:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ebc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ebe:	233d      	movs	r3, #61	@ 0x3d
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8006eca:	2000      	movs	r0, #0
}
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ece:	4e07      	ldr	r6, [pc, #28]	@ (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8006ed0:	4032      	ands	r2, r6
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ed2:	684e      	ldr	r6, [r1, #4]
 8006ed4:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ed6:	2670      	movs	r6, #112	@ 0x70
 8006ed8:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eda:	4315      	orrs	r5, r2
  htim->Instance->CR2 = tmpcr2;
 8006edc:	605d      	str	r5, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ede:	e7e9      	b.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8006ee0:	2002      	movs	r0, #2
 8006ee2:	e7f3      	b.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	ff0fffff 	.word	0xff0fffff

08006ef0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ef0:	233c      	movs	r3, #60	@ 0x3c
{
 8006ef2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8006ef4:	5cc3      	ldrb	r3, [r0, r3]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d03d      	beq.n	8006f76 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006efa:	4a20      	ldr	r2, [pc, #128]	@ (8006f7c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8006efc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006efe:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f00:	4013      	ands	r3, r2
 8006f02:	688a      	ldr	r2, [r1, #8]
 8006f04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f06:	4a1e      	ldr	r2, [pc, #120]	@ (8006f80 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	684a      	ldr	r2, [r1, #4]
 8006f0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	680a      	ldr	r2, [r1, #0]
 8006f14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f16:	4a1c      	ldr	r2, [pc, #112]	@ (8006f88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	690a      	ldr	r2, [r1, #16]
 8006f1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f8c <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	694a      	ldr	r2, [r1, #20]
 8006f24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f26:	4a1a      	ldr	r2, [pc, #104]	@ (8006f90 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006f2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f2e:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	698a      	ldr	r2, [r1, #24]
 8006f34:	0412      	lsls	r2, r2, #16
 8006f36:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f38:	4a17      	ldr	r2, [pc, #92]	@ (8006f98 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	69ca      	ldr	r2, [r1, #28]
 8006f3e:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f40:	4a16      	ldr	r2, [pc, #88]	@ (8006f9c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006f42:	4294      	cmp	r4, r2
 8006f44:	d005      	beq.n	8006f52 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f46:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f48:	2200      	movs	r2, #0
 8006f4a:	233c      	movs	r3, #60	@ 0x3c
 8006f4c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8006f4e:	2000      	movs	r0, #0
}
 8006f50:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f52:	4a13      	ldr	r2, [pc, #76]	@ (8006fa0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8006f58:	0512      	lsls	r2, r2, #20
 8006f5a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f5c:	4b11      	ldr	r3, [pc, #68]	@ (8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006f5e:	401a      	ands	r2, r3
 8006f60:	6a0b      	ldr	r3, [r1, #32]
 8006f62:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f64:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006f66:	401a      	ands	r2, r3
 8006f68:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8006f6a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fac <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8006f6e:	401a      	ands	r2, r3
 8006f70:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8006f72:	4313      	orrs	r3, r2
 8006f74:	e7e7      	b.n	8006f46 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 8006f76:	2002      	movs	r0, #2
 8006f78:	e7ea      	b.n	8006f50 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	fffffcff 	.word	0xfffffcff
 8006f80:	fffffbff 	.word	0xfffffbff
 8006f84:	fffff7ff 	.word	0xfffff7ff
 8006f88:	ffffefff 	.word	0xffffefff
 8006f8c:	ffffdfff 	.word	0xffffdfff
 8006f90:	ffffbfff 	.word	0xffffbfff
 8006f94:	fff0ffff 	.word	0xfff0ffff
 8006f98:	efffffff 	.word	0xefffffff
 8006f9c:	40012c00 	.word	0x40012c00
 8006fa0:	ff0fffff 	.word	0xff0fffff
 8006fa4:	feffffff 	.word	0xfeffffff
 8006fa8:	fdffffff 	.word	0xfdffffff
 8006fac:	dfffffff 	.word	0xdfffffff

08006fb0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006fb0:	4770      	bx	lr
 8006fb2:	46c0      	nop			@ (mov r8, r8)

08006fb4 <HAL_TIMEx_CommutHalfCpltCallback>:
/**
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
 8006fb4:	4770      	bx	lr
 8006fb6:	46c0      	nop			@ (mov r8, r8)

08006fb8 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006fb8:	4770      	bx	lr
 8006fba:	46c0      	nop			@ (mov r8, r8)

08006fbc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8006fbc:	4770      	bx	lr
 8006fbe:	46c0      	nop			@ (mov r8, r8)

08006fc0 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fc0:	4770      	bx	lr
 8006fc2:	46c0      	nop			@ (mov r8, r8)

08006fc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fc4:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fc6:	681b      	ldr	r3, [r3, #0]
{
 8006fc8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	2320      	movs	r3, #32
 8006fce:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fd0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fd2:	4011      	ands	r1, r2
 8006fd4:	4213      	tst	r3, r2
 8006fd6:	d127      	bne.n	8007028 <UART_DMAReceiveCplt+0x64>
  {
    huart->RxXferCount = 0U;
 8006fd8:	225e      	movs	r2, #94	@ 0x5e
 8006fda:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fdc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe0:	3a5d      	subs	r2, #93	@ 0x5d
 8006fe2:	f382 8810 	msr	PRIMASK, r2

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fe6:	6804      	ldr	r4, [r0, #0]
 8006fe8:	4e1d      	ldr	r6, [pc, #116]	@ (8007060 <UART_DMAReceiveCplt+0x9c>)
 8006fea:	6821      	ldr	r1, [r4, #0]
 8006fec:	4031      	ands	r1, r6
 8006fee:	6021      	str	r1, [r4, #0]
 8006ff0:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff8:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffc:	6804      	ldr	r4, [r0, #0]
 8006ffe:	68a1      	ldr	r1, [r4, #8]
 8007000:	4391      	bics	r1, r2
 8007002:	60a1      	str	r1, [r4, #8]
 8007004:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007008:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700c:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007010:	2540      	movs	r5, #64	@ 0x40
 8007012:	6801      	ldr	r1, [r0, #0]
 8007014:	688a      	ldr	r2, [r1, #8]
 8007016:	43aa      	bics	r2, r5
 8007018:	608a      	str	r2, [r1, #8]
 800701a:	f384 8810 	msr	PRIMASK, r4

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800701e:	228c      	movs	r2, #140	@ 0x8c
 8007020:	5083      	str	r3, [r0, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007022:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d00e      	beq.n	8007046 <UART_DMAReceiveCplt+0x82>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007028:	2300      	movs	r3, #0
 800702a:	6703      	str	r3, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d003      	beq.n	800703a <UART_DMAReceiveCplt+0x76>
  else
  {
    /* In other cases : use Rx Complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx complete callback*/
    huart->RxCpltCallback(huart);
 8007032:	23a0      	movs	r3, #160	@ 0xa0
 8007034:	58c3      	ldr	r3, [r0, r3]
 8007036:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007038:	bd70      	pop	{r4, r5, r6, pc}
    huart->RxEventCallback(huart, huart->RxXferSize);
 800703a:	335b      	adds	r3, #91	@ 0x5b
 800703c:	5ac1      	ldrh	r1, [r0, r3]
 800703e:	3364      	adds	r3, #100	@ 0x64
 8007040:	58c3      	ldr	r3, [r0, r3]
 8007042:	4798      	blx	r3
 8007044:	e7f8      	b.n	8007038 <UART_DMAReceiveCplt+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007046:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800704a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704e:	2410      	movs	r4, #16
 8007050:	6802      	ldr	r2, [r0, #0]
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	43a3      	bics	r3, r4
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	f381 8810 	msr	PRIMASK, r1
}
 800705c:	e7e4      	b.n	8007028 <UART_DMAReceiveCplt+0x64>
 800705e:	46c0      	nop			@ (mov r8, r8)
 8007060:	fffffeff 	.word	0xfffffeff

08007064 <UART_DMARxHalfCplt>:
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007064:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007066:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8007068:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800706a:	6703      	str	r3, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800706e:	2b01      	cmp	r3, #1
 8007070:	d003      	beq.n	800707a <UART_DMARxHalfCplt+0x16>
  else
  {
    /* In other cases : use Rx Half Complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Half complete callback*/
    huart->RxHalfCpltCallback(huart);
 8007072:	239c      	movs	r3, #156	@ 0x9c
 8007074:	58c3      	ldr	r3, [r0, r3]
 8007076:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007078:	bd10      	pop	{r4, pc}
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800707a:	335b      	adds	r3, #91	@ 0x5b
 800707c:	5ac1      	ldrh	r1, [r0, r3]
 800707e:	3364      	adds	r3, #100	@ 0x64
 8007080:	58c3      	ldr	r3, [r0, r3]
 8007082:	0849      	lsrs	r1, r1, #1
 8007084:	4798      	blx	r3
 8007086:	e7f7      	b.n	8007078 <UART_DMARxHalfCplt+0x14>

08007088 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	225e      	movs	r2, #94	@ 0x5e
{
 800708c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800708e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8007090:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8007092:	3a08      	subs	r2, #8
 8007094:	5283      	strh	r3, [r0, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007096:	33a4      	adds	r3, #164	@ 0xa4
 8007098:	58c3      	ldr	r3, [r0, r3]
 800709a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800709c:	bd10      	pop	{r4, pc}
 800709e:	46c0      	nop			@ (mov r8, r8)

080070a0 <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 80070a0:	4770      	bx	lr
 80070a2:	46c0      	nop			@ (mov r8, r8)

080070a4 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80070a4:	4770      	bx	lr
 80070a6:	46c0      	nop			@ (mov r8, r8)

080070a8 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 80070a8:	4770      	bx	lr
 80070aa:	46c0      	nop			@ (mov r8, r8)

080070ac <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 80070ac:	4770      	bx	lr
 80070ae:	46c0      	nop			@ (mov r8, r8)

080070b0 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 80070b0:	4770      	bx	lr
 80070b2:	46c0      	nop			@ (mov r8, r8)

080070b4 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80070b4:	4770      	bx	lr
 80070b6:	46c0      	nop			@ (mov r8, r8)

080070b8 <HAL_UART_AbortCpltCallback>:
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 80070b8:	4770      	bx	lr
 80070ba:	46c0      	nop			@ (mov r8, r8)

080070bc <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 80070bc:	4770      	bx	lr
 80070be:	46c0      	nop			@ (mov r8, r8)

080070c0 <UART_DMAError>:
{
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070c2:	2188      	movs	r1, #136	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070c4:	238c      	movs	r3, #140	@ 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070c6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070c8:	5845      	ldr	r5, [r0, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070ca:	58c4      	ldr	r4, [r0, r3]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070cc:	6803      	ldr	r3, [r0, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	0612      	lsls	r2, r2, #24
 80070d2:	d501      	bpl.n	80070d8 <UART_DMAError+0x18>
 80070d4:	2d21      	cmp	r5, #33	@ 0x21
 80070d6:	d00d      	beq.n	80070f4 <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	065b      	lsls	r3, r3, #25
 80070dc:	d501      	bpl.n	80070e2 <UART_DMAError+0x22>
 80070de:	2c22      	cmp	r4, #34	@ 0x22
 80070e0:	d026      	beq.n	8007130 <UART_DMAError+0x70>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070e2:	2290      	movs	r2, #144	@ 0x90
 80070e4:	2110      	movs	r1, #16
 80070e6:	5883      	ldr	r3, [r0, r2]
 80070e8:	430b      	orrs	r3, r1
 80070ea:	5083      	str	r3, [r0, r2]
  huart->ErrorCallback(huart);
 80070ec:	23a4      	movs	r3, #164	@ 0xa4
 80070ee:	58c3      	ldr	r3, [r0, r3]
 80070f0:	4798      	blx	r3
}
 80070f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->TxXferCount = 0U;
 80070f4:	2356      	movs	r3, #86	@ 0x56
 80070f6:	2200      	movs	r2, #0
 80070f8:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070fa:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fe:	3201      	adds	r2, #1
 8007100:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007104:	27c0      	movs	r7, #192	@ 0xc0
 8007106:	6805      	ldr	r5, [r0, #0]
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	43bb      	bics	r3, r7
 800710c:	602b      	str	r3, [r5, #0]
 800710e:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007112:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007116:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800711a:	6802      	ldr	r2, [r0, #0]
 800711c:	4e1c      	ldr	r6, [pc, #112]	@ (8007190 <UART_DMAError+0xd0>)
 800711e:	6893      	ldr	r3, [r2, #8]
 8007120:	4033      	ands	r3, r6
 8007122:	6093      	str	r3, [r2, #8]
 8007124:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 8007128:	2320      	movs	r3, #32
 800712a:	5043      	str	r3, [r0, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800712c:	6803      	ldr	r3, [r0, #0]
}
 800712e:	e7d3      	b.n	80070d8 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8007130:	235e      	movs	r3, #94	@ 0x5e
 8007132:	2200      	movs	r2, #0
 8007134:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007136:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713a:	3201      	adds	r2, #1
 800713c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007140:	6801      	ldr	r1, [r0, #0]
 8007142:	4d14      	ldr	r5, [pc, #80]	@ (8007194 <UART_DMAError+0xd4>)
 8007144:	680b      	ldr	r3, [r1, #0]
 8007146:	402b      	ands	r3, r5
 8007148:	600b      	str	r3, [r1, #0]
 800714a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800714e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007152:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007156:	6802      	ldr	r2, [r0, #0]
 8007158:	4c0f      	ldr	r4, [pc, #60]	@ (8007198 <UART_DMAError+0xd8>)
 800715a:	6893      	ldr	r3, [r2, #8]
 800715c:	4023      	ands	r3, r4
 800715e:	6093      	str	r3, [r2, #8]
 8007160:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007164:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007166:	2b01      	cmp	r3, #1
 8007168:	d10a      	bne.n	8007180 <UART_DMAError+0xc0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007172:	2410      	movs	r4, #16
 8007174:	6802      	ldr	r2, [r0, #0]
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	43a3      	bics	r3, r4
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8007180:	238c      	movs	r3, #140	@ 0x8c
 8007182:	2220      	movs	r2, #32
 8007184:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	2300      	movs	r3, #0
 8007188:	66c3      	str	r3, [r0, #108]	@ 0x6c
  huart->RxISR = NULL;
 800718a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800718c:	e7a9      	b.n	80070e2 <UART_DMAError+0x22>
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	ff7fffff 	.word	0xff7fffff
 8007194:	fffffedf 	.word	0xfffffedf
 8007198:	effffffe 	.word	0xeffffffe

0800719c <HAL_UART_RegisterCallback>:
{
 800719c:	b510      	push	{r4, lr}
  if (pCallback == NULL)
 800719e:	2a00      	cmp	r2, #0
 80071a0:	d006      	beq.n	80071b0 <HAL_UART_RegisterCallback+0x14>
  if (huart->gState == HAL_UART_STATE_READY)
 80071a2:	2388      	movs	r3, #136	@ 0x88
 80071a4:	58c4      	ldr	r4, [r0, r3]
 80071a6:	2c20      	cmp	r4, #32
 80071a8:	d011      	beq.n	80071ce <HAL_UART_RegisterCallback+0x32>
  else if (huart->gState == HAL_UART_STATE_RESET)
 80071aa:	58c3      	ldr	r3, [r0, r3]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d006      	beq.n	80071be <HAL_UART_RegisterCallback+0x22>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80071b0:	2290      	movs	r2, #144	@ 0x90
 80071b2:	2140      	movs	r1, #64	@ 0x40
 80071b4:	5883      	ldr	r3, [r0, r2]
 80071b6:	430b      	orrs	r3, r1
 80071b8:	5083      	str	r3, [r0, r2]
    return HAL_ERROR;
 80071ba:	2001      	movs	r0, #1
}
 80071bc:	bd10      	pop	{r4, pc}
    switch (CallbackID)
 80071be:	290b      	cmp	r1, #11
 80071c0:	d00b      	beq.n	80071da <HAL_UART_RegisterCallback+0x3e>
 80071c2:	290c      	cmp	r1, #12
 80071c4:	d1f4      	bne.n	80071b0 <HAL_UART_RegisterCallback+0x14>
        huart->MspDeInitCallback = pCallback;
 80071c6:	23c8      	movs	r3, #200	@ 0xc8
 80071c8:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 80071ca:	2000      	movs	r0, #0
 80071cc:	e7f6      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
    switch (CallbackID)
 80071ce:	290c      	cmp	r1, #12
 80071d0:	d8ee      	bhi.n	80071b0 <HAL_UART_RegisterCallback+0x14>
 80071d2:	4b1a      	ldr	r3, [pc, #104]	@ (800723c <HAL_UART_RegisterCallback+0xa0>)
 80071d4:	0089      	lsls	r1, r1, #2
 80071d6:	585b      	ldr	r3, [r3, r1]
 80071d8:	469f      	mov	pc, r3
        huart->MspInitCallback = pCallback;
 80071da:	23c4      	movs	r3, #196	@ 0xc4
 80071dc:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 80071de:	2000      	movs	r0, #0
 80071e0:	e7ec      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->RxHalfCpltCallback = pCallback;
 80071e2:	239c      	movs	r3, #156	@ 0x9c
 80071e4:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 80071e6:	2000      	movs	r0, #0
 80071e8:	e7e8      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->RxCpltCallback = pCallback;
 80071ea:	23a0      	movs	r3, #160	@ 0xa0
 80071ec:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 80071ee:	2000      	movs	r0, #0
 80071f0:	e7e4      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->ErrorCallback = pCallback;
 80071f2:	23a4      	movs	r3, #164	@ 0xa4
 80071f4:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 80071f6:	2000      	movs	r0, #0
 80071f8:	e7e0      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->AbortCpltCallback = pCallback;
 80071fa:	23a8      	movs	r3, #168	@ 0xa8
 80071fc:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 80071fe:	2000      	movs	r0, #0
 8007200:	e7dc      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->AbortTransmitCpltCallback = pCallback;
 8007202:	23ac      	movs	r3, #172	@ 0xac
 8007204:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8007206:	2000      	movs	r0, #0
 8007208:	e7d8      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->AbortReceiveCpltCallback = pCallback;
 800720a:	23b0      	movs	r3, #176	@ 0xb0
 800720c:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800720e:	2000      	movs	r0, #0
 8007210:	e7d4      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->WakeupCallback = pCallback;
 8007212:	23b4      	movs	r3, #180	@ 0xb4
 8007214:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8007216:	2000      	movs	r0, #0
 8007218:	e7d0      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->RxFifoFullCallback = pCallback;
 800721a:	23b8      	movs	r3, #184	@ 0xb8
 800721c:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800721e:	2000      	movs	r0, #0
 8007220:	e7cc      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->TxHalfCpltCallback = pCallback;
 8007222:	2394      	movs	r3, #148	@ 0x94
 8007224:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8007226:	2000      	movs	r0, #0
 8007228:	e7c8      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->TxCpltCallback = pCallback;
 800722a:	2398      	movs	r3, #152	@ 0x98
 800722c:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800722e:	2000      	movs	r0, #0
 8007230:	e7c4      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
        huart->TxFifoEmptyCallback = pCallback;
 8007232:	23bc      	movs	r3, #188	@ 0xbc
 8007234:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8007236:	2000      	movs	r0, #0
 8007238:	e7c0      	b.n	80071bc <HAL_UART_RegisterCallback+0x20>
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	0800894c 	.word	0x0800894c

08007240 <HAL_UART_Receive_DMA>:
{
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	000d      	movs	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8007244:	218c      	movs	r1, #140	@ 0x8c
 8007246:	5841      	ldr	r1, [r0, r1]
{
 8007248:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800724a:	2920      	cmp	r1, #32
 800724c:	d160      	bne.n	8007310 <HAL_UART_Receive_DMA+0xd0>
    if ((pData == NULL) || (Size == 0U))
 800724e:	2d00      	cmp	r5, #0
 8007250:	d041      	beq.n	80072d6 <HAL_UART_Receive_DMA+0x96>
 8007252:	2a00      	cmp	r2, #0
 8007254:	d03f      	beq.n	80072d6 <HAL_UART_Receive_DMA+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007256:	2380      	movs	r3, #128	@ 0x80
 8007258:	6881      	ldr	r1, [r0, #8]
 800725a:	015b      	lsls	r3, r3, #5
 800725c:	4299      	cmp	r1, r3
 800725e:	d104      	bne.n	800726a <HAL_UART_Receive_DMA+0x2a>
 8007260:	6903      	ldr	r3, [r0, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_UART_Receive_DMA+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8007266:	07eb      	lsls	r3, r5, #31
 8007268:	d435      	bmi.n	80072d6 <HAL_UART_Receive_DMA+0x96>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726a:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800726c:	4930      	ldr	r1, [pc, #192]	@ (8007330 <HAL_UART_Receive_DMA+0xf0>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	428b      	cmp	r3, r1
 8007274:	d00f      	beq.n	8007296 <HAL_UART_Receive_DMA+0x56>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	d50c      	bpl.n	8007296 <HAL_UART_Receive_DMA+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007280:	2301      	movs	r3, #1
 8007282:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007286:	2380      	movs	r3, #128	@ 0x80
 8007288:	6821      	ldr	r1, [r4, #0]
 800728a:	04db      	lsls	r3, r3, #19
 800728c:	680e      	ldr	r6, [r1, #0]
 800728e:	4333      	orrs	r3, r6
 8007290:	600b      	str	r3, [r1, #0]
 8007292:	f380 8810 	msr	PRIMASK, r0
  huart->RxXferSize = Size;
 8007296:	235c      	movs	r3, #92	@ 0x5c
  huart->pRxBuffPtr = pData;
 8007298:	65a5      	str	r5, [r4, #88]	@ 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800729a:	2122      	movs	r1, #34	@ 0x22
  huart->RxXferSize = Size;
 800729c:	52e2      	strh	r2, [r4, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	2790      	movs	r7, #144	@ 0x90
 80072a0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072a2:	268c      	movs	r6, #140	@ 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	51e3      	str	r3, [r4, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072a6:	51a1      	str	r1, [r4, r6]
  if (huart->hdmarx != NULL)
 80072a8:	315e      	adds	r1, #94	@ 0x5e
 80072aa:	5860      	ldr	r0, [r4, r1]
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d014      	beq.n	80072da <HAL_UART_Receive_DMA+0x9a>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072b0:	4920      	ldr	r1, [pc, #128]	@ (8007334 <HAL_UART_Receive_DMA+0xf4>)
    huart->hdmarx->XferAbortCallback = NULL;
 80072b2:	6383      	str	r3, [r0, #56]	@ 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072b4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072b6:	4920      	ldr	r1, [pc, #128]	@ (8007338 <HAL_UART_Receive_DMA+0xf8>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80072b8:	0013      	movs	r3, r2
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072ba:	6301      	str	r1, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072bc:	491f      	ldr	r1, [pc, #124]	@ (800733c <HAL_UART_Receive_DMA+0xfc>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80072be:	002a      	movs	r2, r5
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072c0:	6341      	str	r1, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80072c2:	6821      	ldr	r1, [r4, #0]
 80072c4:	3124      	adds	r1, #36	@ 0x24
 80072c6:	f7fc ffdd 	bl	8004284 <HAL_DMA_Start_IT>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d005      	beq.n	80072da <HAL_UART_Receive_DMA+0x9a>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072ce:	2310      	movs	r3, #16
 80072d0:	51e3      	str	r3, [r4, r7]
      huart->RxState = HAL_UART_STATE_READY;
 80072d2:	3310      	adds	r3, #16
 80072d4:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 80072d6:	2001      	movs	r0, #1
 80072d8:	e019      	b.n	800730e <HAL_UART_Receive_DMA+0xce>
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d119      	bne.n	8007314 <HAL_UART_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e4:	2301      	movs	r3, #1
 80072e6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ea:	6821      	ldr	r1, [r4, #0]
 80072ec:	688a      	ldr	r2, [r1, #8]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	608a      	str	r2, [r1, #8]
 80072f2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072fa:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	2040      	movs	r0, #64	@ 0x40
 8007300:	6822      	ldr	r2, [r4, #0]
 8007302:	6893      	ldr	r3, [r2, #8]
 8007304:	4303      	orrs	r3, r0
 8007306:	6093      	str	r3, [r2, #8]
 8007308:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800730c:	2000      	movs	r0, #0
}
 800730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8007310:	2002      	movs	r0, #2
 8007312:	e7fc      	b.n	800730e <HAL_UART_Receive_DMA+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007314:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007318:	2301      	movs	r3, #1
 800731a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800731e:	6822      	ldr	r2, [r4, #0]
 8007320:	33ff      	adds	r3, #255	@ 0xff
 8007322:	6810      	ldr	r0, [r2, #0]
 8007324:	4303      	orrs	r3, r0
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	f381 8810 	msr	PRIMASK, r1
}
 800732c:	e7d8      	b.n	80072e0 <HAL_UART_Receive_DMA+0xa0>
 800732e:	46c0      	nop			@ (mov r8, r8)
 8007330:	40008000 	.word	0x40008000
 8007334:	08006fc5 	.word	0x08006fc5
 8007338:	08007065 	.word	0x08007065
 800733c:	080070c1 	.word	0x080070c1

08007340 <HAL_UART_IRQHandler>:
{
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	4645      	mov	r5, r8
 8007344:	46de      	mov	lr, fp
 8007346:	4657      	mov	r7, sl
 8007348:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800734a:	6802      	ldr	r2, [r0, #0]
{
 800734c:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800734e:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007350:	4db2      	ldr	r5, [pc, #712]	@ (800761c <HAL_UART_IRQHandler+0x2dc>)
{
 8007352:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007354:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007356:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8007358:	422b      	tst	r3, r5
 800735a:	d14e      	bne.n	80073fa <HAL_UART_IRQHandler+0xba>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800735c:	2520      	movs	r5, #32
 800735e:	421d      	tst	r5, r3
 8007360:	d006      	beq.n	8007370 <HAL_UART_IRQHandler+0x30>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007362:	2680      	movs	r6, #128	@ 0x80
 8007364:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007366:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007368:	400e      	ands	r6, r1
 800736a:	4335      	orrs	r5, r6
 800736c:	d000      	beq.n	8007370 <HAL_UART_IRQHandler+0x30>
 800736e:	e0d5      	b.n	800751c <HAL_UART_IRQHandler+0x1dc>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007370:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8007372:	2d01      	cmp	r5, #1
 8007374:	d100      	bne.n	8007378 <HAL_UART_IRQHandler+0x38>
 8007376:	e09e      	b.n	80074b6 <HAL_UART_IRQHandler+0x176>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007378:	2580      	movs	r5, #128	@ 0x80
 800737a:	036d      	lsls	r5, r5, #13
 800737c:	422b      	tst	r3, r5
 800737e:	d128      	bne.n	80073d2 <HAL_UART_IRQHandler+0x92>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007380:	2280      	movs	r2, #128	@ 0x80
 8007382:	421a      	tst	r2, r3
 8007384:	d006      	beq.n	8007394 <HAL_UART_IRQHandler+0x54>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007386:	2580      	movs	r5, #128	@ 0x80
 8007388:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800738a:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800738c:	4029      	ands	r1, r5
 800738e:	430a      	orrs	r2, r1
 8007390:	d000      	beq.n	8007394 <HAL_UART_IRQHandler+0x54>
 8007392:	e0ca      	b.n	800752a <HAL_UART_IRQHandler+0x1ea>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007394:	2240      	movs	r2, #64	@ 0x40
 8007396:	421a      	tst	r2, r3
 8007398:	d023      	beq.n	80073e2 <HAL_UART_IRQHandler+0xa2>
 800739a:	4202      	tst	r2, r0
 800739c:	d021      	beq.n	80073e2 <HAL_UART_IRQHandler+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800739e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a2:	2301      	movs	r3, #1
 80073a4:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073a8:	6821      	ldr	r1, [r4, #0]
 80073aa:	680b      	ldr	r3, [r1, #0]
 80073ac:	4393      	bics	r3, r2
 80073ae:	600b      	str	r3, [r1, #0]
 80073b0:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073b4:	2388      	movs	r3, #136	@ 0x88
 80073b6:	3a20      	subs	r2, #32
 80073b8:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	67a3      	str	r3, [r4, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80073be:	3398      	adds	r3, #152	@ 0x98
 80073c0:	0020      	movs	r0, r4
 80073c2:	58e3      	ldr	r3, [r4, r3]
 80073c4:	4798      	blx	r3
}
 80073c6:	bcf0      	pop	{r4, r5, r6, r7}
 80073c8:	46bb      	mov	fp, r7
 80073ca:	46b2      	mov	sl, r6
 80073cc:	46a9      	mov	r9, r5
 80073ce:	46a0      	mov	r8, r4
 80073d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073d2:	024e      	lsls	r6, r1, #9
 80073d4:	d5d4      	bpl.n	8007380 <HAL_UART_IRQHandler+0x40>
    huart->WakeupCallback(huart);
 80073d6:	23b4      	movs	r3, #180	@ 0xb4
 80073d8:	0020      	movs	r0, r4
 80073da:	58e3      	ldr	r3, [r4, r3]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073dc:	6215      	str	r5, [r2, #32]
    huart->WakeupCallback(huart);
 80073de:	4798      	blx	r3
    return;
 80073e0:	e7f1      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073e2:	021a      	lsls	r2, r3, #8
 80073e4:	d502      	bpl.n	80073ec <HAL_UART_IRQHandler+0xac>
 80073e6:	0042      	lsls	r2, r0, #1
 80073e8:	d500      	bpl.n	80073ec <HAL_UART_IRQHandler+0xac>
 80073ea:	e112      	b.n	8007612 <HAL_UART_IRQHandler+0x2d2>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073ec:	01db      	lsls	r3, r3, #7
 80073ee:	d5ea      	bpl.n	80073c6 <HAL_UART_IRQHandler+0x86>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	dae8      	bge.n	80073c6 <HAL_UART_IRQHandler+0x86>
    huart->RxFifoFullCallback(huart);
 80073f4:	23b8      	movs	r3, #184	@ 0xb8
 80073f6:	58e3      	ldr	r3, [r4, r3]
 80073f8:	e094      	b.n	8007524 <HAL_UART_IRQHandler+0x1e4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073fa:	000f      	movs	r7, r1
 80073fc:	4d88      	ldr	r5, [pc, #544]	@ (8007620 <HAL_UART_IRQHandler+0x2e0>)
 80073fe:	402f      	ands	r7, r5
 8007400:	4229      	tst	r1, r5
 8007402:	d000      	beq.n	8007406 <HAL_UART_IRQHandler+0xc6>
 8007404:	e0af      	b.n	8007566 <HAL_UART_IRQHandler+0x226>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007406:	4d87      	ldr	r5, [pc, #540]	@ (8007624 <HAL_UART_IRQHandler+0x2e4>)
 8007408:	4228      	tst	r0, r5
 800740a:	d0b1      	beq.n	8007370 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800740c:	07dd      	lsls	r5, r3, #31
 800740e:	d51e      	bpl.n	800744e <HAL_UART_IRQHandler+0x10e>
 8007410:	05c5      	lsls	r5, r0, #23
 8007412:	d400      	bmi.n	8007416 <HAL_UART_IRQHandler+0xd6>
 8007414:	e08d      	b.n	8007532 <HAL_UART_IRQHandler+0x1f2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007416:	2501      	movs	r5, #1
 8007418:	46ac      	mov	ip, r5
 800741a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800741c:	358f      	adds	r5, #143	@ 0x8f
 800741e:	46a8      	mov	r8, r5
 8007420:	4666      	mov	r6, ip
 8007422:	5965      	ldr	r5, [r4, r5]
 8007424:	4335      	orrs	r5, r6
 8007426:	4646      	mov	r6, r8
 8007428:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800742a:	2502      	movs	r5, #2
 800742c:	421d      	tst	r5, r3
 800742e:	d100      	bne.n	8007432 <HAL_UART_IRQHandler+0xf2>
 8007430:	e081      	b.n	8007536 <HAL_UART_IRQHandler+0x1f6>
 8007432:	07ce      	lsls	r6, r1, #31
 8007434:	d50b      	bpl.n	800744e <HAL_UART_IRQHandler+0x10e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007436:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007438:	358e      	adds	r5, #142	@ 0x8e
 800743a:	2604      	movs	r6, #4
 800743c:	46ac      	mov	ip, r5
 800743e:	5965      	ldr	r5, [r4, r5]
 8007440:	46b0      	mov	r8, r6
 8007442:	4335      	orrs	r5, r6
 8007444:	4666      	mov	r6, ip
 8007446:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007448:	4645      	mov	r5, r8
 800744a:	421d      	tst	r5, r3
 800744c:	d177      	bne.n	800753e <HAL_UART_IRQHandler+0x1fe>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800744e:	2608      	movs	r6, #8
 8007450:	421e      	tst	r6, r3
 8007452:	d008      	beq.n	8007466 <HAL_UART_IRQHandler+0x126>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007454:	2520      	movs	r5, #32
 8007456:	4005      	ands	r5, r0
 8007458:	433d      	orrs	r5, r7
 800745a:	d004      	beq.n	8007466 <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800745c:	2790      	movs	r7, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800745e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007460:	59e5      	ldr	r5, [r4, r7]
 8007462:	4335      	orrs	r5, r6
 8007464:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007466:	2580      	movs	r5, #128	@ 0x80
 8007468:	012d      	lsls	r5, r5, #4
 800746a:	422b      	tst	r3, r5
 800746c:	d007      	beq.n	800747e <HAL_UART_IRQHandler+0x13e>
 800746e:	0146      	lsls	r6, r0, #5
 8007470:	d505      	bpl.n	800747e <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007472:	2690      	movs	r6, #144	@ 0x90
 8007474:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007476:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007478:	59a5      	ldr	r5, [r4, r6]
 800747a:	433d      	orrs	r5, r7
 800747c:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800747e:	2590      	movs	r5, #144	@ 0x90
 8007480:	5965      	ldr	r5, [r4, r5]
 8007482:	2d00      	cmp	r5, #0
 8007484:	d09f      	beq.n	80073c6 <HAL_UART_IRQHandler+0x86>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007486:	2520      	movs	r5, #32
 8007488:	421d      	tst	r5, r3
 800748a:	d005      	beq.n	8007498 <HAL_UART_IRQHandler+0x158>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800748c:	2380      	movs	r3, #128	@ 0x80
 800748e:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007490:	4005      	ands	r5, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007492:	400b      	ands	r3, r1
 8007494:	431d      	orrs	r5, r3
 8007496:	d15f      	bne.n	8007558 <HAL_UART_IRQHandler+0x218>
      errorcode = huart->ErrorCode;
 8007498:	2690      	movs	r6, #144	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800749a:	2540      	movs	r5, #64	@ 0x40
      errorcode = huart->ErrorCode;
 800749c:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800749e:	6893      	ldr	r3, [r2, #8]
 80074a0:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074a2:	2328      	movs	r3, #40	@ 0x28
 80074a4:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074a6:	431d      	orrs	r5, r3
 80074a8:	d164      	bne.n	8007574 <HAL_UART_IRQHandler+0x234>
        huart->ErrorCallback(huart);
 80074aa:	23a4      	movs	r3, #164	@ 0xa4
 80074ac:	0020      	movs	r0, r4
 80074ae:	58e3      	ldr	r3, [r4, r3]
 80074b0:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b2:	51a5      	str	r5, [r4, r6]
 80074b4:	e787      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074b6:	2610      	movs	r6, #16
 80074b8:	421e      	tst	r6, r3
 80074ba:	d100      	bne.n	80074be <HAL_UART_IRQHandler+0x17e>
 80074bc:	e75c      	b.n	8007378 <HAL_UART_IRQHandler+0x38>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074be:	4206      	tst	r6, r0
 80074c0:	d100      	bne.n	80074c4 <HAL_UART_IRQHandler+0x184>
 80074c2:	e759      	b.n	8007378 <HAL_UART_IRQHandler+0x38>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c4:	2340      	movs	r3, #64	@ 0x40
 80074c6:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074c8:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ca:	6892      	ldr	r2, [r2, #8]
 80074cc:	4010      	ands	r0, r2
 80074ce:	4213      	tst	r3, r2
 80074d0:	d100      	bne.n	80074d4 <HAL_UART_IRQHandler+0x194>
 80074d2:	e0af      	b.n	8007634 <HAL_UART_IRQHandler+0x2f4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074d4:	2280      	movs	r2, #128	@ 0x80
 80074d6:	4694      	mov	ip, r2
 80074d8:	58a2      	ldr	r2, [r4, r2]
 80074da:	6810      	ldr	r0, [r2, #0]
 80074dc:	6842      	ldr	r2, [r0, #4]
 80074de:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	d100      	bne.n	80074e6 <HAL_UART_IRQHandler+0x1a6>
 80074e4:	e76f      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074e6:	215c      	movs	r1, #92	@ 0x5c
 80074e8:	468b      	mov	fp, r1
 80074ea:	5a61      	ldrh	r1, [r4, r1]
 80074ec:	4291      	cmp	r1, r2
 80074ee:	d800      	bhi.n	80074f2 <HAL_UART_IRQHandler+0x1b2>
 80074f0:	e769      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
        huart->RxXferCount = nb_remaining_rx_data;
 80074f2:	275e      	movs	r7, #94	@ 0x5e
 80074f4:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074f6:	2220      	movs	r2, #32
 80074f8:	0017      	movs	r7, r2
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	4007      	ands	r7, r0
 80074fe:	46b8      	mov	r8, r7
 8007500:	4202      	tst	r2, r0
 8007502:	d100      	bne.n	8007506 <HAL_UART_IRQHandler+0x1c6>
 8007504:	e0d2      	b.n	80076ac <HAL_UART_IRQHandler+0x36c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007506:	2302      	movs	r3, #2
 8007508:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800750a:	335c      	adds	r3, #92	@ 0x5c
 800750c:	5ae3      	ldrh	r3, [r4, r3]
 800750e:	0020      	movs	r0, r4
 8007510:	1ac9      	subs	r1, r1, r3
 8007512:	23c0      	movs	r3, #192	@ 0xc0
 8007514:	b289      	uxth	r1, r1
 8007516:	58e3      	ldr	r3, [r4, r3]
 8007518:	4798      	blx	r3
 800751a:	e754      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
      if (huart->RxISR != NULL)
 800751c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800751e:	2b00      	cmp	r3, #0
 8007520:	d100      	bne.n	8007524 <HAL_UART_IRQHandler+0x1e4>
 8007522:	e750      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
    huart->RxFifoFullCallback(huart);
 8007524:	0020      	movs	r0, r4
 8007526:	4798      	blx	r3
    return;
 8007528:	e74d      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
    if (huart->TxISR != NULL)
 800752a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f9      	bne.n	8007524 <HAL_UART_IRQHandler+0x1e4>
 8007530:	e749      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007532:	079d      	lsls	r5, r3, #30
 8007534:	d48b      	bmi.n	800744e <HAL_UART_IRQHandler+0x10e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007536:	075d      	lsls	r5, r3, #29
 8007538:	d589      	bpl.n	800744e <HAL_UART_IRQHandler+0x10e>
 800753a:	07cd      	lsls	r5, r1, #31
 800753c:	d587      	bpl.n	800744e <HAL_UART_IRQHandler+0x10e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800753e:	2504      	movs	r5, #4
 8007540:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007542:	358c      	adds	r5, #140	@ 0x8c
 8007544:	46a9      	mov	r9, r5
 8007546:	5965      	ldr	r5, [r4, r5]
 8007548:	46a8      	mov	r8, r5
 800754a:	2502      	movs	r5, #2
 800754c:	4646      	mov	r6, r8
 800754e:	432e      	orrs	r6, r5
 8007550:	0035      	movs	r5, r6
 8007552:	464e      	mov	r6, r9
 8007554:	51a5      	str	r5, [r4, r6]
 8007556:	e77a      	b.n	800744e <HAL_UART_IRQHandler+0x10e>
        if (huart->RxISR != NULL)
 8007558:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800755a:	2b00      	cmp	r3, #0
 800755c:	d09c      	beq.n	8007498 <HAL_UART_IRQHandler+0x158>
          huart->RxISR(huart);
 800755e:	0020      	movs	r0, r4
 8007560:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007562:	6822      	ldr	r2, [r4, #0]
 8007564:	e798      	b.n	8007498 <HAL_UART_IRQHandler+0x158>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007566:	07dd      	lsls	r5, r3, #31
 8007568:	d400      	bmi.n	800756c <HAL_UART_IRQHandler+0x22c>
 800756a:	e75e      	b.n	800742a <HAL_UART_IRQHandler+0xea>
 800756c:	05c5      	lsls	r5, r0, #23
 800756e:	d400      	bmi.n	8007572 <HAL_UART_IRQHandler+0x232>
 8007570:	e75b      	b.n	800742a <HAL_UART_IRQHandler+0xea>
 8007572:	e750      	b.n	8007416 <HAL_UART_IRQHandler+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007574:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007578:	2201      	movs	r2, #1
 800757a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800757e:	6821      	ldr	r1, [r4, #0]
 8007580:	4d29      	ldr	r5, [pc, #164]	@ (8007628 <HAL_UART_IRQHandler+0x2e8>)
 8007582:	680b      	ldr	r3, [r1, #0]
 8007584:	402b      	ands	r3, r5
 8007586:	600b      	str	r3, [r1, #0]
 8007588:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007590:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007594:	6822      	ldr	r2, [r4, #0]
 8007596:	4825      	ldr	r0, [pc, #148]	@ (800762c <HAL_UART_IRQHandler+0x2ec>)
 8007598:	6893      	ldr	r3, [r2, #8]
 800759a:	4003      	ands	r3, r0
 800759c:	6093      	str	r3, [r2, #8]
 800759e:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d10a      	bne.n	80075be <HAL_UART_IRQHandler+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ac:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b0:	2010      	movs	r0, #16
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	6813      	ldr	r3, [r2, #0]
 80075b6:	4383      	bics	r3, r0
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80075be:	238c      	movs	r3, #140	@ 0x8c
 80075c0:	2220      	movs	r2, #32
 80075c2:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	2300      	movs	r3, #0
 80075c6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80075c8:	6763      	str	r3, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	2340      	movs	r3, #64	@ 0x40
 80075d0:	4213      	tst	r3, r2
 80075d2:	d019      	beq.n	8007608 <HAL_UART_IRQHandler+0x2c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d8:	2201      	movs	r2, #1
 80075da:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075de:	6821      	ldr	r1, [r4, #0]
 80075e0:	688a      	ldr	r2, [r1, #8]
 80075e2:	439a      	bics	r2, r3
 80075e4:	608a      	str	r2, [r1, #8]
 80075e6:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 80075ea:	2580      	movs	r5, #128	@ 0x80
 80075ec:	5960      	ldr	r0, [r4, r5]
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d00a      	beq.n	8007608 <HAL_UART_IRQHandler+0x2c8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007630 <HAL_UART_IRQHandler+0x2f0>)
 80075f4:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075f6:	f7fc fee9 	bl	80043cc <HAL_DMA_Abort_IT>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d100      	bne.n	8007600 <HAL_UART_IRQHandler+0x2c0>
 80075fe:	e6e2      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007600:	5960      	ldr	r0, [r4, r5]
 8007602:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007604:	4798      	blx	r3
 8007606:	e6de      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
          huart->ErrorCallback(huart);
 8007608:	23a4      	movs	r3, #164	@ 0xa4
 800760a:	0020      	movs	r0, r4
 800760c:	58e3      	ldr	r3, [r4, r3]
 800760e:	4798      	blx	r3
 8007610:	e6d9      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
    huart->TxFifoEmptyCallback(huart);
 8007612:	23bc      	movs	r3, #188	@ 0xbc
 8007614:	0020      	movs	r0, r4
 8007616:	58e3      	ldr	r3, [r4, r3]
 8007618:	4798      	blx	r3
    return;
 800761a:	e6d4      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
 800761c:	0000080f 	.word	0x0000080f
 8007620:	10000001 	.word	0x10000001
 8007624:	04000120 	.word	0x04000120
 8007628:	fffffedf 	.word	0xfffffedf
 800762c:	effffffe 	.word	0xeffffffe
 8007630:	08007089 	.word	0x08007089
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007634:	235c      	movs	r3, #92	@ 0x5c
 8007636:	225e      	movs	r2, #94	@ 0x5e
 8007638:	5ae1      	ldrh	r1, [r4, r3]
 800763a:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 800763c:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800763e:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8007640:	2a00      	cmp	r2, #0
 8007642:	d100      	bne.n	8007646 <HAL_UART_IRQHandler+0x306>
 8007644:	e6bf      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007646:	1ac9      	subs	r1, r1, r3
 8007648:	b28b      	uxth	r3, r1
 800764a:	4698      	mov	r8, r3
          && (nb_rx_data > 0U))
 800764c:	2b00      	cmp	r3, #0
 800764e:	d100      	bne.n	8007652 <HAL_UART_IRQHandler+0x312>
 8007650:	e6b9      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007652:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007656:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800765a:	6822      	ldr	r2, [r4, #0]
 800765c:	492d      	ldr	r1, [pc, #180]	@ (8007714 <HAL_UART_IRQHandler+0x3d4>)
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	400b      	ands	r3, r1
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007668:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766c:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	4929      	ldr	r1, [pc, #164]	@ (8007718 <HAL_UART_IRQHandler+0x3d8>)
 8007674:	6893      	ldr	r3, [r2, #8]
 8007676:	400b      	ands	r3, r1
 8007678:	6093      	str	r3, [r2, #8]
 800767a:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 800767e:	238c      	movs	r3, #140	@ 0x8c
 8007680:	2220      	movs	r2, #32
 8007682:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007684:	66e0      	str	r0, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8007686:	6760      	str	r0, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007688:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800768c:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007690:	6822      	ldr	r2, [r4, #0]
 8007692:	6813      	ldr	r3, [r2, #0]
 8007694:	43b3      	bics	r3, r6
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800769c:	2302      	movs	r3, #2
 800769e:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, nb_rx_data);
 80076a0:	33be      	adds	r3, #190	@ 0xbe
 80076a2:	4641      	mov	r1, r8
 80076a4:	0020      	movs	r0, r4
 80076a6:	58e3      	ldr	r3, [r4, r3]
 80076a8:	4798      	blx	r3
 80076aa:	e68c      	b.n	80073c6 <HAL_UART_IRQHandler+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ac:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b0:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	4f19      	ldr	r7, [pc, #100]	@ (800771c <HAL_UART_IRQHandler+0x3dc>)
 80076b8:	6801      	ldr	r1, [r0, #0]
 80076ba:	4039      	ands	r1, r7
 80076bc:	6001      	str	r1, [r0, #0]
 80076be:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c2:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c6:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	6820      	ldr	r0, [r4, #0]
 80076cc:	6881      	ldr	r1, [r0, #8]
 80076ce:	43a9      	bics	r1, r5
 80076d0:	6081      	str	r1, [r0, #8]
 80076d2:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d6:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076da:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076de:	6820      	ldr	r0, [r4, #0]
 80076e0:	6881      	ldr	r1, [r0, #8]
 80076e2:	4399      	bics	r1, r3
 80076e4:	6081      	str	r1, [r0, #8]
 80076e6:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 80076ea:	334c      	adds	r3, #76	@ 0x4c
 80076ec:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ee:	4643      	mov	r3, r8
 80076f0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f6:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	6813      	ldr	r3, [r2, #0]
 80076fe:	43b3      	bics	r3, r6
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007706:	4663      	mov	r3, ip
 8007708:	58e0      	ldr	r0, [r4, r3]
 800770a:	f7fc fe23 	bl	8004354 <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800770e:	465b      	mov	r3, fp
 8007710:	5ae1      	ldrh	r1, [r4, r3]
 8007712:	e6f8      	b.n	8007506 <HAL_UART_IRQHandler+0x1c6>
 8007714:	fffffedf 	.word	0xfffffedf
 8007718:	effffffe 	.word	0xeffffffe
 800771c:	fffffeff 	.word	0xfffffeff

08007720 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007720:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8007722:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007724:	071a      	lsls	r2, r3, #28
 8007726:	d506      	bpl.n	8007736 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007728:	6801      	ldr	r1, [r0, #0]
 800772a:	4c28      	ldr	r4, [pc, #160]	@ (80077cc <UART_AdvFeatureConfig+0xac>)
 800772c:	684a      	ldr	r2, [r1, #4]
 800772e:	4022      	ands	r2, r4
 8007730:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007732:	4322      	orrs	r2, r4
 8007734:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007736:	07da      	lsls	r2, r3, #31
 8007738:	d506      	bpl.n	8007748 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800773a:	6801      	ldr	r1, [r0, #0]
 800773c:	4c24      	ldr	r4, [pc, #144]	@ (80077d0 <UART_AdvFeatureConfig+0xb0>)
 800773e:	684a      	ldr	r2, [r1, #4]
 8007740:	4022      	ands	r2, r4
 8007742:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007744:	4322      	orrs	r2, r4
 8007746:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007748:	079a      	lsls	r2, r3, #30
 800774a:	d506      	bpl.n	800775a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800774c:	6801      	ldr	r1, [r0, #0]
 800774e:	4c21      	ldr	r4, [pc, #132]	@ (80077d4 <UART_AdvFeatureConfig+0xb4>)
 8007750:	684a      	ldr	r2, [r1, #4]
 8007752:	4022      	ands	r2, r4
 8007754:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007756:	4322      	orrs	r2, r4
 8007758:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800775a:	075a      	lsls	r2, r3, #29
 800775c:	d506      	bpl.n	800776c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800775e:	6801      	ldr	r1, [r0, #0]
 8007760:	4c1d      	ldr	r4, [pc, #116]	@ (80077d8 <UART_AdvFeatureConfig+0xb8>)
 8007762:	684a      	ldr	r2, [r1, #4]
 8007764:	4022      	ands	r2, r4
 8007766:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007768:	4322      	orrs	r2, r4
 800776a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800776c:	06da      	lsls	r2, r3, #27
 800776e:	d506      	bpl.n	800777e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007770:	6801      	ldr	r1, [r0, #0]
 8007772:	4c1a      	ldr	r4, [pc, #104]	@ (80077dc <UART_AdvFeatureConfig+0xbc>)
 8007774:	688a      	ldr	r2, [r1, #8]
 8007776:	4022      	ands	r2, r4
 8007778:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800777a:	4322      	orrs	r2, r4
 800777c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800777e:	069a      	lsls	r2, r3, #26
 8007780:	d506      	bpl.n	8007790 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007782:	6801      	ldr	r1, [r0, #0]
 8007784:	4c16      	ldr	r4, [pc, #88]	@ (80077e0 <UART_AdvFeatureConfig+0xc0>)
 8007786:	688a      	ldr	r2, [r1, #8]
 8007788:	4022      	ands	r2, r4
 800778a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800778c:	4322      	orrs	r2, r4
 800778e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007790:	065a      	lsls	r2, r3, #25
 8007792:	d50a      	bpl.n	80077aa <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007794:	6801      	ldr	r1, [r0, #0]
 8007796:	4d13      	ldr	r5, [pc, #76]	@ (80077e4 <UART_AdvFeatureConfig+0xc4>)
 8007798:	684a      	ldr	r2, [r1, #4]
 800779a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800779c:	402a      	ands	r2, r5
 800779e:	4322      	orrs	r2, r4
 80077a0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077a2:	2280      	movs	r2, #128	@ 0x80
 80077a4:	0352      	lsls	r2, r2, #13
 80077a6:	4294      	cmp	r4, r2
 80077a8:	d009      	beq.n	80077be <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077aa:	061b      	lsls	r3, r3, #24
 80077ac:	d506      	bpl.n	80077bc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077ae:	6802      	ldr	r2, [r0, #0]
 80077b0:	490d      	ldr	r1, [pc, #52]	@ (80077e8 <UART_AdvFeatureConfig+0xc8>)
 80077b2:	6853      	ldr	r3, [r2, #4]
 80077b4:	400b      	ands	r3, r1
 80077b6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80077b8:	430b      	orrs	r3, r1
 80077ba:	6053      	str	r3, [r2, #4]
}
 80077bc:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077be:	684a      	ldr	r2, [r1, #4]
 80077c0:	4c0a      	ldr	r4, [pc, #40]	@ (80077ec <UART_AdvFeatureConfig+0xcc>)
 80077c2:	4022      	ands	r2, r4
 80077c4:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80077c6:	4322      	orrs	r2, r4
 80077c8:	604a      	str	r2, [r1, #4]
 80077ca:	e7ee      	b.n	80077aa <UART_AdvFeatureConfig+0x8a>
 80077cc:	ffff7fff 	.word	0xffff7fff
 80077d0:	fffdffff 	.word	0xfffdffff
 80077d4:	fffeffff 	.word	0xfffeffff
 80077d8:	fffbffff 	.word	0xfffbffff
 80077dc:	ffffefff 	.word	0xffffefff
 80077e0:	ffffdfff 	.word	0xffffdfff
 80077e4:	ffefffff 	.word	0xffefffff
 80077e8:	fff7ffff 	.word	0xfff7ffff
 80077ec:	ff9fffff 	.word	0xff9fffff

080077f0 <UART_CheckIdleState>:
{
 80077f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f2:	2390      	movs	r3, #144	@ 0x90
 80077f4:	2200      	movs	r2, #0
{
 80077f6:	46c6      	mov	lr, r8
 80077f8:	0004      	movs	r4, r0
 80077fa:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80077fe:	f7fb fef5 	bl	80035ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007802:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007804:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	0712      	lsls	r2, r2, #28
 800780a:	d411      	bmi.n	8007830 <UART_CheckIdleState+0x40>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	0752      	lsls	r2, r2, #29
 8007810:	d43e      	bmi.n	8007890 <UART_CheckIdleState+0xa0>
  huart->gState = HAL_UART_STATE_READY;
 8007812:	2320      	movs	r3, #32
 8007814:	2288      	movs	r2, #136	@ 0x88
 8007816:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007818:	3204      	adds	r2, #4
 800781a:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781c:	2300      	movs	r3, #0
  return HAL_OK;
 800781e:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007820:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007822:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8007824:	2384      	movs	r3, #132	@ 0x84
 8007826:	2200      	movs	r2, #0
 8007828:	54e2      	strb	r2, [r4, r3]
}
 800782a:	bc80      	pop	{r7}
 800782c:	46b8      	mov	r8, r7
 800782e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	69da      	ldr	r2, [r3, #28]
 8007832:	0292      	lsls	r2, r2, #10
 8007834:	d4ea      	bmi.n	800780c <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007836:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007838:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800783a:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800783c:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783e:	04b6      	lsls	r6, r6, #18
 8007840:	e010      	b.n	8007864 <UART_CheckIdleState+0x74>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4217      	tst	r7, r2
 8007848:	d009      	beq.n	800785e <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800784a:	4641      	mov	r1, r8
 800784c:	69da      	ldr	r2, [r3, #28]
 800784e:	4211      	tst	r1, r2
 8007850:	d159      	bne.n	8007906 <UART_CheckIdleState+0x116>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007852:	2280      	movs	r2, #128	@ 0x80
 8007854:	69d9      	ldr	r1, [r3, #28]
 8007856:	0112      	lsls	r2, r2, #4
 8007858:	4211      	tst	r1, r2
 800785a:	d000      	beq.n	800785e <UART_CheckIdleState+0x6e>
 800785c:	e085      	b.n	800796a <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	0292      	lsls	r2, r2, #10
 8007862:	d4d3      	bmi.n	800780c <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007864:	f7fb fec2 	bl	80035ec <HAL_GetTick>
 8007868:	1b40      	subs	r0, r0, r5
 800786a:	42b0      	cmp	r0, r6
 800786c:	d3e9      	bcc.n	8007842 <UART_CheckIdleState+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007872:	2301      	movs	r3, #1
 8007874:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007878:	2080      	movs	r0, #128	@ 0x80
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	4383      	bics	r3, r0
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8007886:	2388      	movs	r3, #136	@ 0x88
 8007888:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800788a:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800788c:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800788e:	e7c9      	b.n	8007824 <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	025b      	lsls	r3, r3, #9
 8007894:	d4bd      	bmi.n	8007812 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007896:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007898:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800789a:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800789c:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789e:	04b6      	lsls	r6, r6, #18
 80078a0:	e011      	b.n	80078c6 <UART_CheckIdleState+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4217      	tst	r7, r2
 80078a8:	d00a      	beq.n	80078c0 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078aa:	4641      	mov	r1, r8
 80078ac:	69da      	ldr	r2, [r3, #28]
 80078ae:	4211      	tst	r1, r2
 80078b0:	d000      	beq.n	80078b4 <UART_CheckIdleState+0xc4>
 80078b2:	e08b      	b.n	80079cc <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078b4:	2280      	movs	r2, #128	@ 0x80
 80078b6:	69d9      	ldr	r1, [r3, #28]
 80078b8:	0112      	lsls	r2, r2, #4
 80078ba:	4211      	tst	r1, r2
 80078bc:	d000      	beq.n	80078c0 <UART_CheckIdleState+0xd0>
 80078be:	e0b7      	b.n	8007a30 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	025b      	lsls	r3, r3, #9
 80078c4:	d4a5      	bmi.n	8007812 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c6:	f7fb fe91 	bl	80035ec <HAL_GetTick>
 80078ca:	1b40      	subs	r0, r0, r5
 80078cc:	42b0      	cmp	r0, r6
 80078ce:	d3e8      	bcc.n	80078a2 <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d4:	2201      	movs	r2, #1
 80078d6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078da:	6821      	ldr	r1, [r4, #0]
 80078dc:	4d6d      	ldr	r5, [pc, #436]	@ (8007a94 <UART_CheckIdleState+0x2a4>)
 80078de:	680b      	ldr	r3, [r1, #0]
 80078e0:	402b      	ands	r3, r5
 80078e2:	600b      	str	r3, [r1, #0]
 80078e4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ec:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f0:	6821      	ldr	r1, [r4, #0]
 80078f2:	688b      	ldr	r3, [r1, #8]
 80078f4:	4393      	bics	r3, r2
 80078f6:	608b      	str	r3, [r1, #8]
 80078f8:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80078fc:	238c      	movs	r3, #140	@ 0x8c
 80078fe:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8007900:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8007902:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8007904:	e78e      	b.n	8007824 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007906:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007908:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790c:	2201      	movs	r2, #1
 800790e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007912:	6821      	ldr	r1, [r4, #0]
 8007914:	4d5f      	ldr	r5, [pc, #380]	@ (8007a94 <UART_CheckIdleState+0x2a4>)
 8007916:	680b      	ldr	r3, [r1, #0]
 8007918:	402b      	ands	r3, r5
 800791a:	600b      	str	r3, [r1, #0]
 800791c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007920:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007924:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007928:	6822      	ldr	r2, [r4, #0]
 800792a:	485b      	ldr	r0, [pc, #364]	@ (8007a98 <UART_CheckIdleState+0x2a8>)
 800792c:	6893      	ldr	r3, [r2, #8]
 800792e:	4003      	ands	r3, r0
 8007930:	6093      	str	r3, [r2, #8]
 8007932:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007936:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d10a      	bne.n	8007952 <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800793c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007940:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007944:	2010      	movs	r0, #16
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	6813      	ldr	r3, [r2, #0]
 800794a:	4383      	bics	r3, r0
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8007952:	238c      	movs	r3, #140	@ 0x8c
 8007954:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007956:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007958:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795a:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800795c:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8007960:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007962:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8007964:	3a0c      	subs	r2, #12
 8007966:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8007968:	e781      	b.n	800786e <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800796a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800796c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007970:	2201      	movs	r2, #1
 8007972:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007976:	6821      	ldr	r1, [r4, #0]
 8007978:	4d46      	ldr	r5, [pc, #280]	@ (8007a94 <UART_CheckIdleState+0x2a4>)
 800797a:	680b      	ldr	r3, [r1, #0]
 800797c:	402b      	ands	r3, r5
 800797e:	600b      	str	r3, [r1, #0]
 8007980:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007984:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007988:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800798c:	6822      	ldr	r2, [r4, #0]
 800798e:	4842      	ldr	r0, [pc, #264]	@ (8007a98 <UART_CheckIdleState+0x2a8>)
 8007990:	6893      	ldr	r3, [r2, #8]
 8007992:	4003      	ands	r3, r0
 8007994:	6093      	str	r3, [r2, #8]
 8007996:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800799c:	2b01      	cmp	r3, #1
 800799e:	d10a      	bne.n	80079b6 <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	2010      	movs	r0, #16
 80079aa:	6822      	ldr	r2, [r4, #0]
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	4383      	bics	r3, r0
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80079b6:	2220      	movs	r2, #32
 80079b8:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079ba:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 80079bc:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079be:	2300      	movs	r3, #0
 80079c0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80079c2:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079c4:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80079c6:	3264      	adds	r2, #100	@ 0x64
 80079c8:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80079ca:	e750      	b.n	800786e <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079cc:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d2:	2201      	movs	r2, #1
 80079d4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079d8:	6821      	ldr	r1, [r4, #0]
 80079da:	4d2e      	ldr	r5, [pc, #184]	@ (8007a94 <UART_CheckIdleState+0x2a4>)
 80079dc:	680b      	ldr	r3, [r1, #0]
 80079de:	402b      	ands	r3, r5
 80079e0:	600b      	str	r3, [r1, #0]
 80079e2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ea:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079ee:	6822      	ldr	r2, [r4, #0]
 80079f0:	4829      	ldr	r0, [pc, #164]	@ (8007a98 <UART_CheckIdleState+0x2a8>)
 80079f2:	6893      	ldr	r3, [r2, #8]
 80079f4:	4003      	ands	r3, r0
 80079f6:	6093      	str	r3, [r2, #8]
 80079f8:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10a      	bne.n	8007a18 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a02:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a06:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0a:	2010      	movs	r0, #16
 8007a0c:	6822      	ldr	r2, [r4, #0]
 8007a0e:	6813      	ldr	r3, [r2, #0]
 8007a10:	4383      	bics	r3, r0
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8007a18:	238c      	movs	r3, #140	@ 0x8c
 8007a1a:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a1c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a20:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a22:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a24:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8007a26:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a28:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8007a2a:	3a0c      	subs	r2, #12
 8007a2c:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8007a2e:	e74f      	b.n	80078d0 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a30:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a32:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a36:	2201      	movs	r2, #1
 8007a38:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a3c:	6821      	ldr	r1, [r4, #0]
 8007a3e:	4d15      	ldr	r5, [pc, #84]	@ (8007a94 <UART_CheckIdleState+0x2a4>)
 8007a40:	680b      	ldr	r3, [r1, #0]
 8007a42:	402b      	ands	r3, r5
 8007a44:	600b      	str	r3, [r1, #0]
 8007a46:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a4a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a52:	6822      	ldr	r2, [r4, #0]
 8007a54:	4810      	ldr	r0, [pc, #64]	@ (8007a98 <UART_CheckIdleState+0x2a8>)
 8007a56:	6893      	ldr	r3, [r2, #8]
 8007a58:	4003      	ands	r3, r0
 8007a5a:	6093      	str	r3, [r2, #8]
 8007a5c:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a60:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d10a      	bne.n	8007a7c <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a66:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6e:	2010      	movs	r0, #16
 8007a70:	6822      	ldr	r2, [r4, #0]
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	4383      	bics	r3, r0
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a80:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8007a82:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a84:	2300      	movs	r3, #0
 8007a86:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8007a88:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a8a:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8007a8c:	3264      	adds	r2, #100	@ 0x64
 8007a8e:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8007a90:	e71e      	b.n	80078d0 <UART_CheckIdleState+0xe0>
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	fffffedf 	.word	0xfffffedf
 8007a98:	effffffe 	.word	0xeffffffe

08007a9c <HAL_UART_Init>:
{
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8007aa0:	d03f      	beq.n	8007b22 <HAL_UART_Init+0x86>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007aa2:	2388      	movs	r3, #136	@ 0x88
 8007aa4:	58c3      	ldr	r3, [r0, r3]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d03d      	beq.n	8007b26 <HAL_UART_Init+0x8a>
  huart->gState = HAL_UART_STATE_BUSY;
 8007aaa:	2388      	movs	r3, #136	@ 0x88
 8007aac:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8007aae:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007ab0:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8007ab2:	682b      	ldr	r3, [r5, #0]
 8007ab4:	3a23      	subs	r2, #35	@ 0x23
 8007ab6:	4393      	bics	r3, r2
 8007ab8:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d000      	beq.n	8007ac2 <HAL_UART_Init+0x26>
 8007ac0:	e09b      	b.n	8007bfa <HAL_UART_Init+0x15e>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac2:	6921      	ldr	r1, [r4, #16]
 8007ac4:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ac6:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6961      	ldr	r1, [r4, #20]
 8007acc:	69e0      	ldr	r0, [r4, #28]
 8007ace:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ad0:	499d      	ldr	r1, [pc, #628]	@ (8007d48 <HAL_UART_Init+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ad2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ad4:	400a      	ands	r2, r1
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ada:	686b      	ldr	r3, [r5, #4]
 8007adc:	4a9b      	ldr	r2, [pc, #620]	@ (8007d4c <HAL_UART_Init+0x2b0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ade:	499c      	ldr	r1, [pc, #624]	@ (8007d50 <HAL_UART_Init+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	68e2      	ldr	r2, [r4, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ae8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007aea:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007aec:	428d      	cmp	r5, r1
 8007aee:	d100      	bne.n	8007af2 <HAL_UART_Init+0x56>
 8007af0:	e099      	b.n	8007c26 <HAL_UART_Init+0x18a>
    tmpreg |= huart->Init.OneBitSampling;
 8007af2:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af4:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8007af6:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af8:	4e96      	ldr	r6, [pc, #600]	@ (8007d54 <HAL_UART_Init+0x2b8>)
 8007afa:	4031      	ands	r1, r6
 8007afc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007afe:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b00:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b02:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007b04:	438b      	bics	r3, r1
 8007b06:	4313      	orrs	r3, r2
 8007b08:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b0a:	4b93      	ldr	r3, [pc, #588]	@ (8007d58 <HAL_UART_Init+0x2bc>)
 8007b0c:	429d      	cmp	r5, r3
 8007b0e:	d037      	beq.n	8007b80 <HAL_UART_Init+0xe4>
 8007b10:	4b92      	ldr	r3, [pc, #584]	@ (8007d5c <HAL_UART_Init+0x2c0>)
 8007b12:	429d      	cmp	r5, r3
 8007b14:	d100      	bne.n	8007b18 <HAL_UART_Init+0x7c>
 8007b16:	e07b      	b.n	8007c10 <HAL_UART_Init+0x174>
  huart->NbRxDataToProcess = 1;
 8007b18:	4b91      	ldr	r3, [pc, #580]	@ (8007d60 <HAL_UART_Init+0x2c4>)
 8007b1a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b20:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 8007b22:	2001      	movs	r0, #1
}
 8007b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8007b26:	2284      	movs	r2, #132	@ 0x84
 8007b28:	5483      	strb	r3, [r0, r2]
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007b2a:	4b8e      	ldr	r3, [pc, #568]	@ (8007d64 <HAL_UART_Init+0x2c8>)
 8007b2c:	3210      	adds	r2, #16
 8007b2e:	5083      	str	r3, [r0, r2]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007b30:	4b8d      	ldr	r3, [pc, #564]	@ (8007d68 <HAL_UART_Init+0x2cc>)
 8007b32:	3204      	adds	r2, #4
 8007b34:	5083      	str	r3, [r0, r2]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007b36:	4b8d      	ldr	r3, [pc, #564]	@ (8007d6c <HAL_UART_Init+0x2d0>)
 8007b38:	3204      	adds	r2, #4
 8007b3a:	5083      	str	r3, [r0, r2]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8007d70 <HAL_UART_Init+0x2d4>)
 8007b3e:	3204      	adds	r2, #4
 8007b40:	5083      	str	r3, [r0, r2]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007b42:	4b8c      	ldr	r3, [pc, #560]	@ (8007d74 <HAL_UART_Init+0x2d8>)
 8007b44:	3204      	adds	r2, #4
 8007b46:	5083      	str	r3, [r0, r2]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007b48:	4b8b      	ldr	r3, [pc, #556]	@ (8007d78 <HAL_UART_Init+0x2dc>)
 8007b4a:	3204      	adds	r2, #4
 8007b4c:	5083      	str	r3, [r0, r2]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8007d7c <HAL_UART_Init+0x2e0>)
 8007b50:	3204      	adds	r2, #4
 8007b52:	5083      	str	r3, [r0, r2]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007b54:	4b8a      	ldr	r3, [pc, #552]	@ (8007d80 <HAL_UART_Init+0x2e4>)
 8007b56:	3204      	adds	r2, #4
 8007b58:	5083      	str	r3, [r0, r2]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8007d84 <HAL_UART_Init+0x2e8>)
 8007b5c:	3204      	adds	r2, #4
 8007b5e:	5083      	str	r3, [r0, r2]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007b60:	4b89      	ldr	r3, [pc, #548]	@ (8007d88 <HAL_UART_Init+0x2ec>)
 8007b62:	3204      	adds	r2, #4
 8007b64:	5083      	str	r3, [r0, r2]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007b66:	4b89      	ldr	r3, [pc, #548]	@ (8007d8c <HAL_UART_Init+0x2f0>)
 8007b68:	3204      	adds	r2, #4
 8007b6a:	5083      	str	r3, [r0, r2]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007b6c:	4b88      	ldr	r3, [pc, #544]	@ (8007d90 <HAL_UART_Init+0x2f4>)
 8007b6e:	3204      	adds	r2, #4
 8007b70:	5083      	str	r3, [r0, r2]
    if (huart->MspInitCallback == NULL)
 8007b72:	3204      	adds	r2, #4
 8007b74:	5883      	ldr	r3, [r0, r2]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d052      	beq.n	8007c20 <HAL_UART_Init+0x184>
    huart->MspInitCallback(huart);
 8007b7a:	0020      	movs	r0, r4
 8007b7c:	4798      	blx	r3
 8007b7e:	e794      	b.n	8007aaa <HAL_UART_Init+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b80:	4b84      	ldr	r3, [pc, #528]	@ (8007d94 <HAL_UART_Init+0x2f8>)
 8007b82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b84:	2303      	movs	r3, #3
 8007b86:	400b      	ands	r3, r1
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d03a      	beq.n	8007c02 <HAL_UART_Init+0x166>
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d100      	bne.n	8007b92 <HAL_UART_Init+0xf6>
 8007b90:	e09d      	b.n	8007cce <HAL_UART_Init+0x232>
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d13c      	bne.n	8007c10 <HAL_UART_Init+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b96:	2380      	movs	r3, #128	@ 0x80
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	4298      	cmp	r0, r3
 8007b9c:	d100      	bne.n	8007ba0 <HAL_UART_Init+0x104>
 8007b9e:	e09c      	b.n	8007cda <HAL_UART_Init+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007ba0:	f7fd fb96 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d100      	bne.n	8007baa <HAL_UART_Init+0x10e>
 8007ba8:	e08b      	b.n	8007cc2 <HAL_UART_Init+0x226>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007baa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007bac:	4b7a      	ldr	r3, [pc, #488]	@ (8007d98 <HAL_UART_Init+0x2fc>)
 8007bae:	0052      	lsls	r2, r2, #1
 8007bb0:	5ad1      	ldrh	r1, [r2, r3]
 8007bb2:	f7f8 faa7 	bl	8000104 <__udivsi3>
 8007bb6:	6865      	ldr	r5, [r4, #4]
 8007bb8:	086b      	lsrs	r3, r5, #1
 8007bba:	18c0      	adds	r0, r0, r3
 8007bbc:	0029      	movs	r1, r5
 8007bbe:	f7f8 faa1 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc2:	0002      	movs	r2, r0
 8007bc4:	4b75      	ldr	r3, [pc, #468]	@ (8007d9c <HAL_UART_Init+0x300>)
 8007bc6:	3a10      	subs	r2, #16
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d8a5      	bhi.n	8007b18 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8007bd0:	4a63      	ldr	r2, [pc, #396]	@ (8007d60 <HAL_UART_Init+0x2c4>)
 8007bd2:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007bd8:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	4970      	ldr	r1, [pc, #448]	@ (8007da0 <HAL_UART_Init+0x304>)
  return (UART_CheckIdleState(huart));
 8007bde:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be0:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007be2:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	438a      	bics	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	3929      	subs	r1, #41	@ 0x29
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007bf4:	f7ff fdfc 	bl	80077f0 <UART_CheckIdleState>
 8007bf8:	e794      	b.n	8007b24 <HAL_UART_Init+0x88>
    UART_AdvFeatureConfig(huart);
 8007bfa:	0020      	movs	r0, r4
 8007bfc:	f7ff fd90 	bl	8007720 <UART_AdvFeatureConfig>
 8007c00:	e75f      	b.n	8007ac2 <HAL_UART_Init+0x26>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c02:	2380      	movs	r3, #128	@ 0x80
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	4298      	cmp	r0, r3
 8007c08:	d100      	bne.n	8007c0c <HAL_UART_Init+0x170>
 8007c0a:	e089      	b.n	8007d20 <HAL_UART_Init+0x284>
        pclk = (uint32_t) HSI_VALUE;
 8007c0c:	4865      	ldr	r0, [pc, #404]	@ (8007da4 <HAL_UART_Init+0x308>)
 8007c0e:	e7cd      	b.n	8007bac <HAL_UART_Init+0x110>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c10:	2380      	movs	r3, #128	@ 0x80
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	4298      	cmp	r0, r3
 8007c16:	d100      	bne.n	8007c1a <HAL_UART_Init+0x17e>
 8007c18:	e08a      	b.n	8007d30 <HAL_UART_Init+0x294>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c1a:	f7fd fc6f 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
        break;
 8007c1e:	e7c1      	b.n	8007ba4 <HAL_UART_Init+0x108>
      huart->MspInitCallback = HAL_UART_MspInit;
 8007c20:	4b61      	ldr	r3, [pc, #388]	@ (8007da8 <HAL_UART_Init+0x30c>)
 8007c22:	5083      	str	r3, [r0, r2]
 8007c24:	e7a9      	b.n	8007b7a <HAL_UART_Init+0xde>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c26:	68a9      	ldr	r1, [r5, #8]
 8007c28:	484a      	ldr	r0, [pc, #296]	@ (8007d54 <HAL_UART_Init+0x2b8>)
 8007c2a:	4001      	ands	r1, r0
 8007c2c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c2e:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c30:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c34:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c36:	438b      	bics	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c38:	2180      	movs	r1, #128	@ 0x80
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c3e:	4b55      	ldr	r3, [pc, #340]	@ (8007d94 <HAL_UART_Init+0x2f8>)
 8007c40:	0100      	lsls	r0, r0, #4
 8007c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c44:	0109      	lsls	r1, r1, #4
 8007c46:	4003      	ands	r3, r0
 8007c48:	428b      	cmp	r3, r1
 8007c4a:	d07a      	beq.n	8007d42 <HAL_UART_Init+0x2a6>
 8007c4c:	d873      	bhi.n	8007d36 <HAL_UART_Init+0x29a>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d062      	beq.n	8007d18 <HAL_UART_Init+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007c52:	f7fd fb3d 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
 8007c56:	0005      	movs	r5, r0
    if (pclk != 0U)
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	d063      	beq.n	8007d24 <HAL_UART_Init+0x288>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c5c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8007d98 <HAL_UART_Init+0x2fc>)
 8007c60:	0052      	lsls	r2, r2, #1
 8007c62:	5ad6      	ldrh	r6, [r2, r3]
 8007c64:	0028      	movs	r0, r5
 8007c66:	0031      	movs	r1, r6
 8007c68:	f7f8 fa4c 	bl	8000104 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c6c:	6867      	ldr	r7, [r4, #4]
 8007c6e:	007b      	lsls	r3, r7, #1
 8007c70:	19db      	adds	r3, r3, r7
 8007c72:	4298      	cmp	r0, r3
 8007c74:	d200      	bcs.n	8007c78 <HAL_UART_Init+0x1dc>
 8007c76:	e74f      	b.n	8007b18 <HAL_UART_Init+0x7c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c78:	033b      	lsls	r3, r7, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c7a:	4298      	cmp	r0, r3
 8007c7c:	d900      	bls.n	8007c80 <HAL_UART_Init+0x1e4>
 8007c7e:	e74b      	b.n	8007b18 <HAL_UART_Init+0x7c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c80:	0032      	movs	r2, r6
 8007c82:	2300      	movs	r3, #0
 8007c84:	0028      	movs	r0, r5
 8007c86:	2100      	movs	r1, #0
 8007c88:	f7f8 fac8 	bl	800021c <__aeabi_uldivmod>
 8007c8c:	2600      	movs	r6, #0
 8007c8e:	0e05      	lsrs	r5, r0, #24
 8007c90:	020b      	lsls	r3, r1, #8
 8007c92:	432b      	orrs	r3, r5
 8007c94:	0202      	lsls	r2, r0, #8
 8007c96:	087d      	lsrs	r5, r7, #1
 8007c98:	1952      	adds	r2, r2, r5
 8007c9a:	4173      	adcs	r3, r6
 8007c9c:	0010      	movs	r0, r2
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	003a      	movs	r2, r7
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f7f8 faba 	bl	800021c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ca8:	4b40      	ldr	r3, [pc, #256]	@ (8007dac <HAL_UART_Init+0x310>)
 8007caa:	18c2      	adds	r2, r0, r3
 8007cac:	4b40      	ldr	r3, [pc, #256]	@ (8007db0 <HAL_UART_Init+0x314>)
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d900      	bls.n	8007cb4 <HAL_UART_Init+0x218>
 8007cb2:	e731      	b.n	8007b18 <HAL_UART_Init+0x7c>
          huart->Instance->BRR = usartdiv;
 8007cb4:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8007cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d60 <HAL_UART_Init+0x2c4>)
          huart->Instance->BRR = usartdiv;
 8007cb8:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8007cba:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007cbc:	6766      	str	r6, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007cbe:	67a6      	str	r6, [r4, #120]	@ 0x78
  return ret;
 8007cc0:	e78b      	b.n	8007bda <HAL_UART_Init+0x13e>
  huart->NbRxDataToProcess = 1;
 8007cc2:	4b27      	ldr	r3, [pc, #156]	@ (8007d60 <HAL_UART_Init+0x2c4>)
  huart->RxISR = NULL;
 8007cc4:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007cc6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007cc8:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	e785      	b.n	8007bda <HAL_UART_Init+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cce:	2380      	movs	r3, #128	@ 0x80
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	4298      	cmp	r0, r3
 8007cd4:	d006      	beq.n	8007ce4 <HAL_UART_Init+0x248>
        pclk = (uint32_t) LSE_VALUE;
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	e768      	b.n	8007bac <HAL_UART_Init+0x110>
        pclk = HAL_RCC_GetSysClockFreq();
 8007cda:	f7fd faf9 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0ef      	beq.n	8007cc2 <HAL_UART_Init+0x226>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8007d98 <HAL_UART_Init+0x2fc>)
 8007ce6:	0052      	lsls	r2, r2, #1
 8007ce8:	5ad1      	ldrh	r1, [r2, r3]
 8007cea:	f7f8 fa0b 	bl	8000104 <__udivsi3>
 8007cee:	6865      	ldr	r5, [r4, #4]
 8007cf0:	0040      	lsls	r0, r0, #1
 8007cf2:	086b      	lsrs	r3, r5, #1
 8007cf4:	18c0      	adds	r0, r0, r3
 8007cf6:	0029      	movs	r1, r5
 8007cf8:	f7f8 fa04 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	4b27      	ldr	r3, [pc, #156]	@ (8007d9c <HAL_UART_Init+0x300>)
 8007d00:	3a10      	subs	r2, #16
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d900      	bls.n	8007d08 <HAL_UART_Init+0x26c>
 8007d06:	e707      	b.n	8007b18 <HAL_UART_Init+0x7c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d08:	4a2a      	ldr	r2, [pc, #168]	@ (8007db4 <HAL_UART_Init+0x318>)
        huart->Instance->BRR = brrtemp;
 8007d0a:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d0c:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d0e:	0700      	lsls	r0, r0, #28
 8007d10:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8007d12:	4302      	orrs	r2, r0
 8007d14:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8007d16:	e75b      	b.n	8007bd0 <HAL_UART_Init+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d18:	f7fd fbf0 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8007d1c:	0005      	movs	r5, r0
        break;
 8007d1e:	e79b      	b.n	8007c58 <HAL_UART_Init+0x1bc>
        pclk = (uint32_t) HSI_VALUE;
 8007d20:	4820      	ldr	r0, [pc, #128]	@ (8007da4 <HAL_UART_Init+0x308>)
 8007d22:	e7df      	b.n	8007ce4 <HAL_UART_Init+0x248>
  huart->NbRxDataToProcess = 1;
 8007d24:	4b0e      	ldr	r3, [pc, #56]	@ (8007d60 <HAL_UART_Init+0x2c4>)
  huart->RxISR = NULL;
 8007d26:	6765      	str	r5, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007d28:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d2a:	67a5      	str	r5, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	e754      	b.n	8007bda <HAL_UART_Init+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d30:	f7fd fbe4 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
        break;
 8007d34:	e7d3      	b.n	8007cde <HAL_UART_Init+0x242>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d36:	4283      	cmp	r3, r0
 8007d38:	d000      	beq.n	8007d3c <HAL_UART_Init+0x2a0>
 8007d3a:	e6ed      	b.n	8007b18 <HAL_UART_Init+0x7c>
        pclk = (uint32_t) LSE_VALUE;
 8007d3c:	2580      	movs	r5, #128	@ 0x80
 8007d3e:	022d      	lsls	r5, r5, #8
 8007d40:	e78d      	b.n	8007c5e <HAL_UART_Init+0x1c2>
        pclk = (uint32_t) HSI_VALUE;
 8007d42:	4d18      	ldr	r5, [pc, #96]	@ (8007da4 <HAL_UART_Init+0x308>)
 8007d44:	e78b      	b.n	8007c5e <HAL_UART_Init+0x1c2>
 8007d46:	46c0      	nop			@ (mov r8, r8)
 8007d48:	cfff69f3 	.word	0xcfff69f3
 8007d4c:	ffffcfff 	.word	0xffffcfff
 8007d50:	40008000 	.word	0x40008000
 8007d54:	11fff4ff 	.word	0x11fff4ff
 8007d58:	40013800 	.word	0x40013800
 8007d5c:	40004400 	.word	0x40004400
 8007d60:	00010001 	.word	0x00010001
 8007d64:	080070a9 	.word	0x080070a9
 8007d68:	080070a5 	.word	0x080070a5
 8007d6c:	080070b1 	.word	0x080070b1
 8007d70:	080070ad 	.word	0x080070ad
 8007d74:	080070b5 	.word	0x080070b5
 8007d78:	080070b9 	.word	0x080070b9
 8007d7c:	080070bd 	.word	0x080070bd
 8007d80:	080070a1 	.word	0x080070a1
 8007d84:	08007db9 	.word	0x08007db9
 8007d88:	08007dbd 	.word	0x08007dbd
 8007d8c:	08007dc1 	.word	0x08007dc1
 8007d90:	08006fc1 	.word	0x08006fc1
 8007d94:	40021000 	.word	0x40021000
 8007d98:	08008980 	.word	0x08008980
 8007d9c:	0000ffef 	.word	0x0000ffef
 8007da0:	ffffb7ff 	.word	0xffffb7ff
 8007da4:	00f42400 	.word	0x00f42400
 8007da8:	08003059 	.word	0x08003059
 8007dac:	fffffd00 	.word	0xfffffd00
 8007db0:	000ffcff 	.word	0x000ffcff
 8007db4:	0000fff0 	.word	0x0000fff0

08007db8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007db8:	4770      	bx	lr
 8007dba:	46c0      	nop			@ (mov r8, r8)

08007dbc <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8007dbc:	4770      	bx	lr
 8007dbe:	46c0      	nop			@ (mov r8, r8)

08007dc0 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8007dc0:	4770      	bx	lr
 8007dc2:	46c0      	nop			@ (mov r8, r8)

08007dc4 <memset>:
 8007dc4:	0003      	movs	r3, r0
 8007dc6:	1882      	adds	r2, r0, r2
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d100      	bne.n	8007dce <memset+0xa>
 8007dcc:	4770      	bx	lr
 8007dce:	7019      	strb	r1, [r3, #0]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	e7f9      	b.n	8007dc8 <memset+0x4>

08007dd4 <__libc_init_array>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	4c0c      	ldr	r4, [pc, #48]	@ (8007e0c <__libc_init_array+0x38>)
 8007dda:	4d0d      	ldr	r5, [pc, #52]	@ (8007e10 <__libc_init_array+0x3c>)
 8007ddc:	1b64      	subs	r4, r4, r5
 8007dde:	10a4      	asrs	r4, r4, #2
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	d109      	bne.n	8007df8 <__libc_init_array+0x24>
 8007de4:	2600      	movs	r6, #0
 8007de6:	f000 f823 	bl	8007e30 <_init>
 8007dea:	4c0a      	ldr	r4, [pc, #40]	@ (8007e14 <__libc_init_array+0x40>)
 8007dec:	4d0a      	ldr	r5, [pc, #40]	@ (8007e18 <__libc_init_array+0x44>)
 8007dee:	1b64      	subs	r4, r4, r5
 8007df0:	10a4      	asrs	r4, r4, #2
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	d105      	bne.n	8007e02 <__libc_init_array+0x2e>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	00b3      	lsls	r3, r6, #2
 8007dfa:	58eb      	ldr	r3, [r5, r3]
 8007dfc:	4798      	blx	r3
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7ee      	b.n	8007de0 <__libc_init_array+0xc>
 8007e02:	00b3      	lsls	r3, r6, #2
 8007e04:	58eb      	ldr	r3, [r5, r3]
 8007e06:	4798      	blx	r3
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7f2      	b.n	8007df2 <__libc_init_array+0x1e>
 8007e0c:	080089a0 	.word	0x080089a0
 8007e10:	080089a0 	.word	0x080089a0
 8007e14:	080089a4 	.word	0x080089a4
 8007e18:	080089a0 	.word	0x080089a0

08007e1c <memcpy>:
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d100      	bne.n	8007e26 <memcpy+0xa>
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	5ccc      	ldrb	r4, [r1, r3]
 8007e28:	54c4      	strb	r4, [r0, r3]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	e7f8      	b.n	8007e20 <memcpy+0x4>
	...

08007e30 <_init>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	46c0      	nop			@ (mov r8, r8)
 8007e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e36:	bc08      	pop	{r3}
 8007e38:	469e      	mov	lr, r3
 8007e3a:	4770      	bx	lr

08007e3c <_fini>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr
