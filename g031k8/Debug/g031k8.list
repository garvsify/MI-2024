
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065bc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c8  080071c8  00009418  2**0
                  CONTENTS
  4 .ARM          00000008  080071c8  080071c8  000081c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d0  080071d0  00009418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d0  080071d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071d4  080071d4  000081d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000418  20000000  080071d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000418  080075f0  00009418  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf8  080075f0  00009bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009418  2**0
                  CONTENTS, READONLY
 12 .debug_info   000282cd  00000000  00000000  00009440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d0b  00000000  00000000  0003170d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00036418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b63  00000000  00000000  00037770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ab2  00000000  00000000  000392d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028120  00000000  00000000  00052d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8f7  00000000  00000000  0007aea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a79c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  0011a7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000f1a3  00000000  00000000  0011db54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0012ccf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000418 	.word	0x20000418
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006660 	.word	0x08006660

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000041c 	.word	0x2000041c
 8000100:	08006660 	.word	0x08006660

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile char rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 8000448:	b510      	push	{r4, lr}

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800044a:	2201      	movs	r2, #1
 800044c:	4902      	ldr	r1, [pc, #8]	@ (8000458 <Start_UART_Receive+0x10>)
 800044e:	4803      	ldr	r0, [pc, #12]	@ (800045c <Start_UART_Receive+0x14>)
 8000450:	f005 fb14 	bl	8005a7c <HAL_UART_Receive_DMA>

	return 1;
}
 8000454:	2001      	movs	r0, #1
 8000456:	bd10      	pop	{r4, pc}
 8000458:	20000434 	.word	0x20000434
 800045c:	20000554 	.word	0x20000554

08000460 <Speed_Pot_Check>:

	static uint16_t first_speed_measurement;

	static uint16_t second_speed_measurement;

	if(speed_pot_adc_measurement_num == 0){
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <Speed_Pot_Check+0x5c>)
 8000462:	781a      	ldrb	r2, [r3, #0]
 8000464:	2a00      	cmp	r2, #0
 8000466:	d108      	bne.n	800047a <Speed_Pot_Check+0x1a>

		first_speed_measurement = params_ptr->speed;
 8000468:	8901      	ldrh	r1, [r0, #8]
 800046a:	4a15      	ldr	r2, [pc, #84]	@ (80004c0 <Speed_Pot_Check+0x60>)

		speed_pot_adc_measurement_num++;
	}
	else if(speed_pot_adc_measurement_num == 1){

		second_speed_measurement = params_ptr->speed;
 800046c:	8011      	strh	r1, [r2, #0]

		speed_pot_adc_measurement_num++;
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	3201      	adds	r2, #1
 8000472:	b2d2      	uxtb	r2, r2
 8000474:	701a      	strb	r2, [r3, #0]
				IP_CAP_events_detection_timeout = NO;
			}
		}
	}
	return 1;
}
 8000476:	2001      	movs	r0, #1
 8000478:	4770      	bx	lr
	else if(speed_pot_adc_measurement_num == 1){
 800047a:	781a      	ldrb	r2, [r3, #0]
 800047c:	2a01      	cmp	r2, #1
 800047e:	d014      	beq.n	80004aa <Speed_Pot_Check+0x4a>
	else if(speed_pot_adc_measurement_num == 2){
 8000480:	781a      	ldrb	r2, [r3, #0]
 8000482:	2a02      	cmp	r2, #2
 8000484:	d1f7      	bne.n	8000476 <Speed_Pot_Check+0x16>
		speed_pot_adc_measurement_num = 0;
 8000486:	2100      	movs	r1, #0
		if(first_speed_measurement > second_speed_measurement){
 8000488:	4a0e      	ldr	r2, [pc, #56]	@ (80004c4 <Speed_Pot_Check+0x64>)
		speed_pot_adc_measurement_num = 0;
 800048a:	7019      	strb	r1, [r3, #0]
		if(first_speed_measurement > second_speed_measurement){
 800048c:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <Speed_Pot_Check+0x60>)
 800048e:	8812      	ldrh	r2, [r2, #0]
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	4293      	cmp	r3, r2
 8000494:	d90c      	bls.n	80004b0 <Speed_Pot_Check+0x50>
			if(first_speed_measurement - second_speed_measurement > SPEED_TOLERANCE){
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	2b05      	cmp	r3, #5
 800049a:	ddec      	ble.n	8000476 <Speed_Pot_Check+0x16>
				state = STATE_0;
 800049c:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <Speed_Pot_Check+0x68>)
 800049e:	7019      	strb	r1, [r3, #0]
				first_sync_complete = NO;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <Speed_Pot_Check+0x6c>)
 80004a2:	7019      	strb	r1, [r3, #0]
				IP_CAP_events_detection_timeout = NO;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	@ (80004d0 <Speed_Pot_Check+0x70>)
 80004a6:	7019      	strb	r1, [r3, #0]
 80004a8:	e7e5      	b.n	8000476 <Speed_Pot_Check+0x16>
		second_speed_measurement = params_ptr->speed;
 80004aa:	8901      	ldrh	r1, [r0, #8]
 80004ac:	4a05      	ldr	r2, [pc, #20]	@ (80004c4 <Speed_Pot_Check+0x64>)
 80004ae:	e7dd      	b.n	800046c <Speed_Pot_Check+0xc>
		else if(second_speed_measurement > first_speed_measurement){
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d2e0      	bcs.n	8000476 <Speed_Pot_Check+0x16>
			if(second_speed_measurement - first_speed_measurement > SPEED_TOLERANCE){
 80004b4:	1ad2      	subs	r2, r2, r3
 80004b6:	2a05      	cmp	r2, #5
 80004b8:	dddd      	ble.n	8000476 <Speed_Pot_Check+0x16>
 80004ba:	e7ef      	b.n	800049c <Speed_Pot_Check+0x3c>
 80004bc:	2000043a 	.word	0x2000043a
 80004c0:	20000438 	.word	0x20000438
 80004c4:	20000436 	.word	0x20000436
 80004c8:	20000bf2 	.word	0x20000bf2
 80004cc:	20000be6 	.word	0x20000be6
 80004d0:	2000043b 	.word	0x2000043b

080004d4 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 80004d4:	b510      	push	{r4, lr}

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80004d6:	2180      	movs	r1, #128	@ 0x80
uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 80004d8:	0004      	movs	r4, r0
	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80004da:	20a0      	movs	r0, #160	@ 0xa0
 80004dc:	00c9      	lsls	r1, r1, #3
 80004de:	05c0      	lsls	r0, r0, #23
 80004e0:	f002 fde6 	bl	80030b0 <HAL_GPIO_ReadPin>

	if(switch_state == 0){
 80004e4:	2800      	cmp	r0, #0
 80004e6:	d10d      	bne.n	8000504 <Check_Tap_Tempo_Switch_State+0x30>

		if(tap_tempo_switch_state_counter != 0){
 80004e8:	4a11      	ldr	r2, [pc, #68]	@ (8000530 <Check_Tap_Tempo_Switch_State+0x5c>)
 80004ea:	7813      	ldrb	r3, [r2, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d015      	beq.n	800051c <Check_Tap_Tempo_Switch_State+0x48>

			tap_tempo_switch_state_counter--;
 80004f0:	3b01      	subs	r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	7013      	strb	r3, [r2, #0]
				extend_rising_edge++;
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d010      	beq.n	800051c <Check_Tap_Tempo_Switch_State+0x48>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80004fa:	2b0a      	cmp	r3, #10
 80004fc:	d110      	bne.n	8000520 <Check_Tap_Tempo_Switch_State+0x4c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 80004fe:	2300      	movs	r3, #0
 8000500:	7023      	strb	r3, [r4, #0]
 8000502:	e00d      	b.n	8000520 <Check_Tap_Tempo_Switch_State+0x4c>
		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8000504:	490a      	ldr	r1, [pc, #40]	@ (8000530 <Check_Tap_Tempo_Switch_State+0x5c>)
 8000506:	780b      	ldrb	r3, [r1, #0]
 8000508:	2b0a      	cmp	r3, #10
 800050a:	d0f8      	beq.n	80004fe <Check_Tap_Tempo_Switch_State+0x2a>
			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 800050c:	4809      	ldr	r0, [pc, #36]	@ (8000534 <Check_Tap_Tempo_Switch_State+0x60>)
 800050e:	7802      	ldrb	r2, [r0, #0]
 8000510:	2a0a      	cmp	r2, #10
 8000512:	d007      	beq.n	8000524 <Check_Tap_Tempo_Switch_State+0x50>
				extend_rising_edge++;
 8000514:	3201      	adds	r2, #1
 8000516:	7002      	strb	r2, [r0, #0]
	if(tap_tempo_switch_state_counter == 0){
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <Check_Tap_Tempo_Switch_State+0x4c>
		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 800051c:	2301      	movs	r3, #1
 800051e:	7023      	strb	r3, [r4, #0]
	}

	return 1;
}
 8000520:	2001      	movs	r0, #1
 8000522:	bd10      	pop	{r4, pc}
				extend_rising_edge = 0;
 8000524:	2200      	movs	r2, #0
				tap_tempo_switch_state_counter++;
 8000526:	3301      	adds	r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	700b      	strb	r3, [r1, #0]
				extend_rising_edge = 0;
 800052c:	7002      	strb	r2, [r0, #0]
 800052e:	e7e2      	b.n	80004f6 <Check_Tap_Tempo_Switch_State+0x22>
 8000530:	20000001 	.word	0x20000001
 8000534:	20000435 	.word	0x20000435

08000538 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8000538:	b500      	push	{lr}
 800053a:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053c:	2238      	movs	r2, #56	@ 0x38
 800053e:	2100      	movs	r1, #0
 8000540:	a804      	add	r0, sp, #16
 8000542:	f006 f857 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	2210      	movs	r2, #16
 8000548:	2100      	movs	r1, #0
 800054a:	4668      	mov	r0, sp
 800054c:	f006 f852 	bl	80065f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2080      	movs	r0, #128	@ 0x80
 8000552:	0080      	lsls	r0, r0, #2
 8000554:	f003 f840 	bl	80035d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000560:	3306      	adds	r3, #6
 8000562:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	029b      	lsls	r3, r3, #10
 8000568:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800056a:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800056e:	04db      	lsls	r3, r3, #19
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000572:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000574:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800057a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057c:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000580:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000584:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000586:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f003 f856 	bl	8003638 <HAL_RCC_OscConfig>
 800058c:	2800      	cmp	r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000590:	b672      	cpsid	i

void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000592:	e7fe      	b.n	8000592 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	2207      	movs	r2, #7
 8000596:	2302      	movs	r3, #2
 8000598:	9200      	str	r2, [sp, #0]
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a0:	2102      	movs	r1, #2
 80005a2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	9202      	str	r2, [sp, #8]
 80005a6:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a8:	f003 fafc 	bl	8003ba4 <HAL_RCC_ClockConfig>
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x7c>
 80005b0:	b672      	cpsid	i
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <SystemClock_Config+0x7a>
}
 80005b4:	b013      	add	sp, #76	@ 0x4c
 80005b6:	bd00      	pop	{pc}

080005b8 <MX_ADC1_Init>:
{
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80005bc:	220c      	movs	r2, #12
 80005be:	2100      	movs	r1, #0
 80005c0:	a801      	add	r0, sp, #4
 80005c2:	f006 f817 	bl	80065f4 <memset>
  hadc1.Instance = ADC1;
 80005c6:	4c33      	ldr	r4, [pc, #204]	@ (8000694 <MX_ADC1_Init+0xdc>)
 80005c8:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <MX_ADC1_Init+0xe0>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005ca:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 80005cc:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005ce:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.NbrOfConversion = 5;
 80005d0:	2105      	movs	r1, #5
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005d2:	0392      	lsls	r2, r2, #14
 80005d4:	6122      	str	r2, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d6:	2200      	movs	r2, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	05db      	lsls	r3, r3, #23
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005da:	2508      	movs	r5, #8
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005dc:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	2300      	movs	r3, #0
  hadc1.Init.NbrOfConversion = 5;
 80005e0:	61e1      	str	r1, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	311b      	adds	r1, #27
 80005e4:	5462      	strb	r2, [r4, r1]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e6:	310c      	adds	r1, #12
 80005e8:	5462      	strb	r2, [r4, r1]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 80005ec:	3110      	adds	r1, #16
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	60e3      	str	r3, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005f2:	6165      	str	r5, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005f4:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f6:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f8:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005fc:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005fe:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000600:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000602:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000604:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000606:	f001 fd3b 	bl	8002080 <HAL_ADC_Init>
 800060a:	2800      	cmp	r0, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x5a>
 800060e:	b672      	cpsid	i
  while (1)
 8000610:	e7fe      	b.n	8000610 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_0;
 8000612:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	9002      	str	r0, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000616:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	a901      	add	r1, sp, #4
 800061a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 800061c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	f001 fea9 	bl	8002374 <HAL_ADC_ConfigChannel>
 8000622:	2800      	cmp	r0, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0x72>
 8000626:	b672      	cpsid	i
  while (1)
 8000628:	e7fe      	b.n	8000628 <MX_ADC1_Init+0x70>
  sConfig.Channel = ADC_CHANNEL_1;
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_ADC1_Init+0xe4>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800062c:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_1;
 800062e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000630:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	0020      	movs	r0, r4
 8000634:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000636:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	f001 fe9c 	bl	8002374 <HAL_ADC_ConfigChannel>
 800063c:	2800      	cmp	r0, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x8c>
 8000640:	b672      	cpsid	i
  while (1)
 8000642:	e7fe      	b.n	8000642 <MX_ADC1_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_4;
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_ADC1_Init+0xe8>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000646:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	a901      	add	r1, sp, #4
 800064a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 800064c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800064e:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	f001 fe90 	bl	8002374 <HAL_ADC_ConfigChannel>
 8000654:	2800      	cmp	r0, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xa4>
 8000658:	b672      	cpsid	i
  while (1)
 800065a:	e7fe      	b.n	800065a <MX_ADC1_Init+0xa2>
  sConfig.Channel = ADC_CHANNEL_5;
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_ADC1_Init+0xec>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800065e:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_5;
 8000660:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000662:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	0020      	movs	r0, r4
 8000666:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000668:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	f001 fe83 	bl	8002374 <HAL_ADC_ConfigChannel>
 800066e:	2800      	cmp	r0, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xbe>
 8000672:	b672      	cpsid	i
  while (1)
 8000674:	e7fe      	b.n	8000674 <MX_ADC1_Init+0xbc>
  sConfig.Channel = ADC_CHANNEL_6;
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_ADC1_Init+0xf0>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000678:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_6;
 800067a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800067c:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067e:	0020      	movs	r0, r4
 8000680:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000682:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	f001 fe76 	bl	8002374 <HAL_ADC_ConfigChannel>
 8000688:	2800      	cmp	r0, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0xd8>
 800068c:	b672      	cpsid	i
  while (1)
 800068e:	e7fe      	b.n	800068e <MX_ADC1_Init+0xd6>
}
 8000690:	b005      	add	sp, #20
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	20000ae4 	.word	0x20000ae4
 8000698:	40012400 	.word	0x40012400
 800069c:	04000002 	.word	0x04000002
 80006a0:	10000010 	.word	0x10000010
 80006a4:	14000020 	.word	0x14000020
 80006a8:	18000040 	.word	0x18000040

080006ac <MX_TIM16_Init>:
{
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	b097      	sub	sp, #92	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b0:	221c      	movs	r2, #28
 80006b2:	2100      	movs	r1, #0
 80006b4:	4668      	mov	r0, sp
 80006b6:	f005 ff9d 	bl	80065f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ba:	2234      	movs	r2, #52	@ 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	a808      	add	r0, sp, #32
 80006c0:	f005 ff98 	bl	80065f4 <memset>
  htim16.Instance = TIM16;
 80006c4:	4c23      	ldr	r4, [pc, #140]	@ (8000754 <MX_TIM16_Init+0xa8>)
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <MX_TIM16_Init+0xac>)
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80006c8:	2280      	movs	r2, #128	@ 0x80
  htim16.Instance = TIM16;
 80006ca:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = 0;
 80006cc:	2300      	movs	r3, #0
  htim16.Init.Period = 255;
 80006ce:	25ff      	movs	r5, #255	@ 0xff
  htim16.Init.Prescaler = 0;
 80006d0:	6063      	str	r3, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	60a3      	str	r3, [r4, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80006d4:	0092      	lsls	r2, r2, #2
  htim16.Init.RepetitionCounter = 0;
 80006d6:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006d8:	0020      	movs	r0, r4
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006da:	3380      	adds	r3, #128	@ 0x80
  htim16.Init.Period = 255;
 80006dc:	60e5      	str	r5, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80006de:	6122      	str	r2, [r4, #16]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006e2:	f003 fc4d 	bl	8003f80 <HAL_TIM_Base_Init>
 80006e6:	2800      	cmp	r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM16_Init+0x42>
 80006ea:	b672      	cpsid	i
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MX_TIM16_Init+0x40>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80006ee:	0020      	movs	r0, r4
 80006f0:	f003 fd6e 	bl	80041d0 <HAL_TIM_OC_Init>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM16_Init+0x50>
 80006f8:	b672      	cpsid	i
  while (1)
 80006fa:	e7fe      	b.n	80006fa <MX_TIM16_Init+0x4e>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fc:	2200      	movs	r2, #0
 80006fe:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000700:	9000      	str	r0, [sp, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000704:	9003      	str	r0, [sp, #12]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000706:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000708:	4669      	mov	r1, sp
 800070a:	0020      	movs	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070c:	9204      	str	r2, [sp, #16]
 800070e:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 255;
 8000710:	9501      	str	r5, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000712:	f004 faad 	bl	8004c70 <HAL_TIM_OC_ConfigChannel>
 8000716:	2800      	cmp	r0, #0
 8000718:	d001      	beq.n	800071e <MX_TIM16_Init+0x72>
 800071a:	b672      	cpsid	i
  while (1)
 800071c:	e7fe      	b.n	800071c <MX_TIM16_Init+0x70>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 800071e:	2108      	movs	r1, #8
 8000720:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000722:	9008      	str	r0, [sp, #32]
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000724:	6993      	ldr	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000726:	9009      	str	r0, [sp, #36]	@ 0x24
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000728:	438b      	bics	r3, r1
 800072a:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000730:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 8000732:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000734:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000736:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000738:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800073a:	a908      	add	r1, sp, #32
 800073c:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800073e:	920c      	str	r2, [sp, #48]	@ 0x30
 8000740:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000742:	f004 fff3 	bl	800572c <HAL_TIMEx_ConfigBreakDeadTime>
 8000746:	2800      	cmp	r0, #0
 8000748:	d001      	beq.n	800074e <MX_TIM16_Init+0xa2>
 800074a:	b672      	cpsid	i
  while (1)
 800074c:	e7fe      	b.n	800074c <MX_TIM16_Init+0xa0>
}
 800074e:	b017      	add	sp, #92	@ 0x5c
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	20000854 	.word	0x20000854
 8000758:	40014400 	.word	0x40014400

0800075c <MX_TIM2_Init>:
{
 800075c:	b510      	push	{r4, lr}
 800075e:	b08c      	sub	sp, #48	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000760:	2210      	movs	r2, #16
 8000762:	2100      	movs	r1, #0
 8000764:	a808      	add	r0, sp, #32
 8000766:	f005 ff45 	bl	80065f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076a:	220c      	movs	r2, #12
 800076c:	2100      	movs	r1, #0
 800076e:	a801      	add	r0, sp, #4
 8000770:	f005 ff40 	bl	80065f4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000774:	2210      	movs	r2, #16
 8000776:	2100      	movs	r1, #0
 8000778:	a804      	add	r0, sp, #16
 800077a:	f005 ff3b 	bl	80065f4 <memset>
  htim2.Instance = TIM2;
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	4c22      	ldr	r4, [pc, #136]	@ (800080c <MX_TIM2_Init+0xb0>)
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000786:	233f      	movs	r3, #63	@ 0x3f
 8000788:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	2300      	movs	r3, #0
 800078c:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 2097152 - 1;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <MX_TIM2_Init+0xb4>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000790:	0020      	movs	r0, r4
  htim2.Init.Period = 2097152 - 1;
 8000792:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000794:	2380      	movs	r3, #128	@ 0x80
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800079a:	3b81      	subs	r3, #129	@ 0x81
 800079c:	3bff      	subs	r3, #255	@ 0xff
 800079e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a0:	f003 fbee 	bl	8003f80 <HAL_TIM_Base_Init>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x50>
 80007a8:	b672      	cpsid	i
  while (1)
 80007aa:	e7fe      	b.n	80007aa <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ac:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ae:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b0:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b2:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b6:	f004 fe2f 	bl	8005418 <HAL_TIM_ConfigClockSource>
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x66>
 80007be:	b672      	cpsid	i
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <MX_TIM2_Init+0x64>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007c2:	0020      	movs	r0, r4
 80007c4:	f003 fffe 	bl	80047c4 <HAL_TIM_IC_Init>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x74>
 80007cc:	b672      	cpsid	i
  while (1)
 80007ce:	e7fe      	b.n	80007ce <MX_TIM2_Init+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d4:	a901      	add	r1, sp, #4
 80007d6:	0020      	movs	r0, r4
 80007d8:	f004 ff70 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0x88>
 80007e0:	b672      	cpsid	i
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <MX_TIM2_Init+0x86>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80007e4:	2202      	movs	r2, #2
 80007e6:	2301      	movs	r3, #1
 80007e8:	9204      	str	r2, [sp, #16]
 80007ea:	9305      	str	r3, [sp, #20]
 80007ec:	2200      	movs	r2, #0
 80007ee:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007f0:	0020      	movs	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80007f2:	9206      	str	r2, [sp, #24]
 80007f4:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007f6:	a904      	add	r1, sp, #16
 80007f8:	2200      	movs	r2, #0
 80007fa:	f004 fb8b 	bl	8004f14 <HAL_TIM_IC_ConfigChannel>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0xaa>
 8000802:	b672      	cpsid	i
  while (1)
 8000804:	e7fe      	b.n	8000804 <MX_TIM2_Init+0xa8>
}
 8000806:	b00c      	add	sp, #48	@ 0x30
 8000808:	bd10      	pop	{r4, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	20000798 	.word	0x20000798
 8000810:	001fffff 	.word	0x001fffff

08000814 <MX_TIM3_Init>:
{
 8000814:	b510      	push	{r4, lr}
 8000816:	b090      	sub	sp, #64	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000818:	2210      	movs	r2, #16
 800081a:	2100      	movs	r1, #0
 800081c:	a804      	add	r0, sp, #16
 800081e:	f005 fee9 	bl	80065f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000822:	220c      	movs	r2, #12
 8000824:	2100      	movs	r1, #0
 8000826:	a801      	add	r0, sp, #4
 8000828:	f005 fee4 	bl	80065f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082c:	221c      	movs	r2, #28
 800082e:	2100      	movs	r1, #0
 8000830:	a808      	add	r0, sp, #32
 8000832:	f005 fedf 	bl	80065f4 <memset>
  htim3.Instance = TIM3;
 8000836:	4c23      	ldr	r4, [pc, #140]	@ (80008c4 <MX_TIM3_Init+0xb0>)
 8000838:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_TIM3_Init+0xb4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800083a:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 800083c:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 800083e:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <MX_TIM3_Init+0xb8>)
 8000840:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	2300      	movs	r3, #0
 8000844:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 4096 - 1;
 8000846:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_TIM3_Init+0xbc>)
 8000848:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800084a:	2380      	movs	r3, #128	@ 0x80
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000850:	3b81      	subs	r3, #129	@ 0x81
 8000852:	3bff      	subs	r3, #255	@ 0xff
 8000854:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000856:	f003 fb93 	bl	8003f80 <HAL_TIM_Base_Init>
 800085a:	2800      	cmp	r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x4e>
 800085e:	b672      	cpsid	i
  while (1)
 8000860:	e7fe      	b.n	8000860 <MX_TIM3_Init+0x4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000864:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000866:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000868:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800086c:	f004 fdd4 	bl	8005418 <HAL_TIM_ConfigClockSource>
 8000870:	2800      	cmp	r0, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0x64>
 8000874:	b672      	cpsid	i
  while (1)
 8000876:	e7fe      	b.n	8000876 <MX_TIM3_Init+0x62>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000878:	0020      	movs	r0, r4
 800087a:	f003 fca9 	bl	80041d0 <HAL_TIM_OC_Init>
 800087e:	2800      	cmp	r0, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM3_Init+0x72>
 8000882:	b672      	cpsid	i
  while (1)
 8000884:	e7fe      	b.n	8000884 <MX_TIM3_Init+0x70>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088a:	a901      	add	r1, sp, #4
 800088c:	0020      	movs	r0, r4
 800088e:	f004 ff15 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	2800      	cmp	r0, #0
 8000894:	d001      	beq.n	800089a <MX_TIM3_Init+0x86>
 8000896:	b672      	cpsid	i
  while (1)
 8000898:	e7fe      	b.n	8000898 <MX_TIM3_Init+0x84>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800089a:	2200      	movs	r2, #0
 800089c:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089e:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a0:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	a908      	add	r1, sp, #32
 80008a4:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008a6:	9208      	str	r2, [sp, #32]
 80008a8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008aa:	f004 f9e1 	bl	8004c70 <HAL_TIM_OC_ConfigChannel>
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0xa2>
 80008b2:	b672      	cpsid	i
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MX_TIM3_Init+0xa0>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80008b6:	2108      	movs	r1, #8
 80008b8:	6822      	ldr	r2, [r4, #0]
 80008ba:	6993      	ldr	r3, [r2, #24]
 80008bc:	438b      	bics	r3, r1
 80008be:	6193      	str	r3, [r2, #24]
}
 80008c0:	b010      	add	sp, #64	@ 0x40
 80008c2:	bd10      	pop	{r4, pc}
 80008c4:	200006dc 	.word	0x200006dc
 80008c8:	40000400 	.word	0x40000400
 80008cc:	00007fff 	.word	0x00007fff
 80008d0:	00000fff 	.word	0x00000fff

080008d4 <MX_TIM1_Init>:
{
 80008d4:	b5d0      	push	{r4, r6, r7, lr}
 80008d6:	b09c      	sub	sp, #112	@ 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d8:	2210      	movs	r2, #16
 80008da:	2100      	movs	r1, #0
 80008dc:	a804      	add	r0, sp, #16
 80008de:	f005 fe89 	bl	80065f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e2:	220c      	movs	r2, #12
 80008e4:	2100      	movs	r1, #0
 80008e6:	4668      	mov	r0, sp
 80008e8:	f005 fe84 	bl	80065f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ec:	221c      	movs	r2, #28
 80008ee:	2100      	movs	r1, #0
 80008f0:	a808      	add	r0, sp, #32
 80008f2:	f005 fe7f 	bl	80065f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f6:	2234      	movs	r2, #52	@ 0x34
 80008f8:	2100      	movs	r1, #0
 80008fa:	a80f      	add	r0, sp, #60	@ 0x3c
 80008fc:	f005 fe7a 	bl	80065f4 <memset>
  htim1.Instance = TIM1;
 8000900:	4c3a      	ldr	r4, [pc, #232]	@ (80009ec <MX_TIM1_Init+0x118>)
 8000902:	4b3b      	ldr	r3, [pc, #236]	@ (80009f0 <MX_TIM1_Init+0x11c>)
  htim1.Init.Period = 1024 - 1;
 8000904:	4a3b      	ldr	r2, [pc, #236]	@ (80009f4 <MX_TIM1_Init+0x120>)
  htim1.Instance = TIM1;
 8000906:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 1024 - 1;
 8000908:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = 0;
 800090a:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800090c:	2280      	movs	r2, #128	@ 0x80
  htim1.Init.Prescaler = 0;
 800090e:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000912:	0052      	lsls	r2, r2, #1
  htim1.Init.RepetitionCounter = 0;
 8000914:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000916:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000918:	3380      	adds	r3, #128	@ 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800091a:	6122      	str	r2, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800091e:	f003 fb2f 	bl	8003f80 <HAL_TIM_Base_Init>
 8000922:	2800      	cmp	r0, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x56>
 8000926:	b672      	cpsid	i
  while (1)
 8000928:	e7fe      	b.n	8000928 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800092c:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000930:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000934:	f004 fd70 	bl	8005418 <HAL_TIM_ConfigClockSource>
 8000938:	2800      	cmp	r0, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x6c>
 800093c:	b672      	cpsid	i
  while (1)
 800093e:	e7fe      	b.n	800093e <MX_TIM1_Init+0x6a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000940:	0020      	movs	r0, r4
 8000942:	f003 fe0f 	bl	8004564 <HAL_TIM_PWM_Init>
 8000946:	2800      	cmp	r0, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x7a>
 800094a:	b672      	cpsid	i
  while (1)
 800094c:	e7fe      	b.n	800094c <MX_TIM1_Init+0x78>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2600      	movs	r6, #0
 8000950:	2700      	movs	r7, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	9002      	str	r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000954:	4669      	mov	r1, sp
 8000956:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	9600      	str	r6, [sp, #0]
 800095a:	9701      	str	r7, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800095c:	f004 feae 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	2800      	cmp	r0, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x94>
 8000964:	b672      	cpsid	i
  while (1)
 8000966:	e7fe      	b.n	8000966 <MX_TIM1_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000968:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 800096a:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800096e:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000970:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000972:	2204      	movs	r2, #4
 8000974:	0020      	movs	r0, r4
 8000976:	a908      	add	r1, sp, #32
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000978:	960c      	str	r6, [sp, #48]	@ 0x30
 800097a:	970d      	str	r7, [sp, #52]	@ 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097c:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800097e:	f004 fba7 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8000982:	2800      	cmp	r0, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0xb6>
 8000986:	b672      	cpsid	i
  while (1)
 8000988:	e7fe      	b.n	8000988 <MX_TIM1_Init+0xb4>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	4e1a      	ldr	r6, [pc, #104]	@ (80009f8 <MX_TIM1_Init+0x124>)
 800098e:	6993      	ldr	r3, [r2, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000990:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000992:	4033      	ands	r3, r6
 8000994:	6193      	str	r3, [r2, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000996:	a908      	add	r1, sp, #32
 8000998:	220c      	movs	r2, #12
 800099a:	f004 fb99 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0xd2>
 80009a2:	b672      	cpsid	i
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MX_TIM1_Init+0xd0>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80009a6:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a8:	900f      	str	r0, [sp, #60]	@ 0x3c
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80009aa:	69d3      	ldr	r3, [r2, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ac:	9010      	str	r0, [sp, #64]	@ 0x40
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80009ae:	4033      	ands	r3, r6
 80009b0:	61d3      	str	r3, [r2, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009b8:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ba:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 80009bc:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009be:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009c0:	9015      	str	r0, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009c2:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009c4:	9017      	str	r0, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009c6:	049b      	lsls	r3, r3, #18
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009c8:	9019      	str	r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009ca:	901a      	str	r0, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009cc:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ce:	a90f      	add	r1, sp, #60	@ 0x3c
 80009d0:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009d2:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009d4:	f004 feaa 	bl	800572c <HAL_TIMEx_ConfigBreakDeadTime>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x10c>
 80009dc:	b672      	cpsid	i
  while (1)
 80009de:	e7fe      	b.n	80009de <MX_TIM1_Init+0x10a>
  HAL_TIM_MspPostInit(&htim1);
 80009e0:	0020      	movs	r0, r4
 80009e2:	f000 ffe1 	bl	80019a8 <HAL_TIM_MspPostInit>
}
 80009e6:	b01c      	add	sp, #112	@ 0x70
 80009e8:	bdd0      	pop	{r4, r6, r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	20000620 	.word	0x20000620
 80009f0:	40012c00 	.word	0x40012c00
 80009f4:	000003ff 	.word	0x000003ff
 80009f8:	fffff7ff 	.word	0xfffff7ff

080009fc <MX_TIM17_Init>:
{
 80009fc:	b530      	push	{r4, r5, lr}
 80009fe:	b097      	sub	sp, #92	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a00:	221c      	movs	r2, #28
 8000a02:	2100      	movs	r1, #0
 8000a04:	4668      	mov	r0, sp
 8000a06:	f005 fdf5 	bl	80065f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0a:	2234      	movs	r2, #52	@ 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	a808      	add	r0, sp, #32
 8000a10:	f005 fdf0 	bl	80065f4 <memset>
  htim17.Instance = TIM17;
 8000a14:	4c23      	ldr	r4, [pc, #140]	@ (8000aa4 <MX_TIM17_Init+0xa8>)
 8000a16:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <MX_TIM17_Init+0xac>)
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a18:	2280      	movs	r2, #128	@ 0x80
  htim17.Instance = TIM17;
 8000a1a:	6023      	str	r3, [r4, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <MX_TIM17_Init+0xb0>)
  htim17.Init.Period = TIM17_OVERFLOW_LENGTH - 1;
 8000a1e:	2516      	movs	r5, #22
  htim17.Init.Prescaler = (512*64)- 1;
 8000a20:	6063      	str	r3, [r4, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	2300      	movs	r3, #0
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a24:	0092      	lsls	r2, r2, #2
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	60a3      	str	r3, [r4, #8]
  htim17.Init.RepetitionCounter = 0;
 8000a28:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a2a:	0020      	movs	r0, r4
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a2c:	3380      	adds	r3, #128	@ 0x80
  htim17.Init.Period = TIM17_OVERFLOW_LENGTH - 1;
 8000a2e:	60e5      	str	r5, [r4, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a30:	6122      	str	r2, [r4, #16]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a32:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a34:	f003 faa4 	bl	8003f80 <HAL_TIM_Base_Init>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM17_Init+0x44>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <MX_TIM17_Init+0x42>
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000a40:	0020      	movs	r0, r4
 8000a42:	f003 fbc5 	bl	80041d0 <HAL_TIM_OC_Init>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM17_Init+0x52>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MX_TIM17_Init+0x50>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a52:	9000      	str	r0, [sp, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a54:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a56:	9003      	str	r0, [sp, #12]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a58:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	4669      	mov	r1, sp
 8000a5c:	0020      	movs	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5e:	9204      	str	r2, [sp, #16]
 8000a60:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = TIM17_OVERFLOW_LENGTH - 1;
 8000a62:	9501      	str	r5, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a64:	f004 f904 	bl	8004c70 <HAL_TIM_OC_ConfigChannel>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM17_Init+0x74>
 8000a6c:	b672      	cpsid	i
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <MX_TIM17_Init+0x72>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000a70:	2108      	movs	r1, #8
 8000a72:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a74:	9008      	str	r0, [sp, #32]
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000a76:	6993      	ldr	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a78:	9009      	str	r0, [sp, #36]	@ 0x24
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a82:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a84:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a86:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a88:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a8a:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000a8c:	a908      	add	r1, sp, #32
 8000a8e:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a90:	920c      	str	r2, [sp, #48]	@ 0x30
 8000a92:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000a94:	f004 fe4a 	bl	800572c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM17_Init+0xa4>
 8000a9c:	b672      	cpsid	i
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <MX_TIM17_Init+0xa2>
}
 8000aa0:	b017      	add	sp, #92	@ 0x5c
 8000aa2:	bd30      	pop	{r4, r5, pc}
 8000aa4:	20000910 	.word	0x20000910
 8000aa8:	40014800 	.word	0x40014800
 8000aac:	00007fff 	.word	0x00007fff

08000ab0 <MX_TIM14_Init>:
{
 8000ab0:	b510      	push	{r4, lr}
 8000ab2:	b088      	sub	sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab4:	221c      	movs	r2, #28
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4668      	mov	r0, sp
 8000aba:	f005 fd9b 	bl	80065f4 <memset>
  htim14.Instance = TIM14;
 8000abe:	4c16      	ldr	r4, [pc, #88]	@ (8000b18 <MX_TIM14_Init+0x68>)
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <MX_TIM14_Init+0x6c>)
  htim14.Init.Period = TIM14_OVERFLOW_LENGTH - 1;
 8000ac2:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <MX_TIM14_Init+0x70>)
  htim14.Instance = TIM14;
 8000ac4:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <MX_TIM14_Init+0x74>)
  htim14.Init.Period = TIM14_OVERFLOW_LENGTH - 1;
 8000ac8:	60e2      	str	r2, [r4, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000aca:	2280      	movs	r2, #128	@ 0x80
  htim14.Init.Prescaler = (512 * 64) - 1;
 8000acc:	6063      	str	r3, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	2300      	movs	r3, #0
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ad0:	0092      	lsls	r2, r2, #2
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ad2:	0020      	movs	r0, r4
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	60a3      	str	r3, [r4, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ad6:	6122      	str	r2, [r4, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ada:	f003 fa51 	bl	8003f80 <HAL_TIM_Base_Init>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM14_Init+0x36>
 8000ae2:	b672      	cpsid	i
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MX_TIM14_Init+0x34>
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f003 fb72 	bl	80041d0 <HAL_TIM_OC_Init>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM14_Init+0x44>
 8000af0:	b672      	cpsid	i
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <MX_TIM14_Init+0x42>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000af4:	2200      	movs	r2, #0
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_TIM14_Init+0x70>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af8:	9002      	str	r0, [sp, #8]
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000afa:	9200      	str	r2, [sp, #0]
 8000afc:	9301      	str	r3, [sp, #4]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afe:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	2200      	movs	r2, #0
 8000b02:	4669      	mov	r1, sp
 8000b04:	0020      	movs	r0, r4
 8000b06:	f004 f8b3 	bl	8004c70 <HAL_TIM_OC_ConfigChannel>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM14_Init+0x62>
 8000b0e:	b672      	cpsid	i
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MX_TIM14_Init+0x60>
}
 8000b12:	b008      	add	sp, #32
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	200009cc 	.word	0x200009cc
 8000b1c:	40002000 	.word	0x40002000
 8000b20:	00000801 	.word	0x00000801
 8000b24:	00007fff 	.word	0x00007fff

08000b28 <MX_GPIO_Init>:
{
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	46c6      	mov	lr, r8
 8000b2c:	b500      	push	{lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	2214      	movs	r2, #20
 8000b32:	2100      	movs	r1, #0
 8000b34:	a804      	add	r0, sp, #16
 8000b36:	f005 fd5d 	bl	80065f4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	4b42      	ldr	r3, [pc, #264]	@ (8000c48 <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4311      	orrs	r1, r2
 8000b46:	6359      	str	r1, [r3, #52]	@ 0x34
 8000b48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	26a0      	movs	r6, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	400a      	ands	r2, r1
 8000b4e:	9200      	str	r2, [sp, #0]
 8000b50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b52:	2220      	movs	r2, #32
 8000b54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b56:	2740      	movs	r7, #64	@ 0x40
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b58:	4311      	orrs	r1, r2
 8000b5a:	6359      	str	r1, [r3, #52]	@ 0x34
 8000b5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b60:	400a      	ands	r2, r1
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b68:	432a      	orrs	r2, r5
 8000b6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b6e:	402a      	ands	r2, r5
 8000b70:	9202      	str	r2, [sp, #8]
 8000b72:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	2202      	movs	r2, #2
 8000b76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	6359      	str	r1, [r3, #52]	@ 0x34
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b7e:	2140      	movs	r1, #64	@ 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	401a      	ands	r2, r3
 8000b82:	9203      	str	r2, [sp, #12]
 8000b84:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b86:	4b31      	ldr	r3, [pc, #196]	@ (8000c4c <MX_GPIO_Init+0x124>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	4698      	mov	r8, r3
 8000b8e:	f002 fa95 	bl	80030bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000b92:	2388      	movs	r3, #136	@ 0x88
 8000b94:	2204      	movs	r2, #4
 8000b96:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000b98:	a904      	add	r1, sp, #16
 8000b9a:	482d      	ldr	r0, [pc, #180]	@ (8000c50 <MX_GPIO_Init+0x128>)
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000b9c:	9204      	str	r2, [sp, #16]
 8000b9e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f002 f993 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8000ba6:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8000baa:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bac:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8000bae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f002 f989 	bl	8002ecc <HAL_GPIO_Init>
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000bba:	4640      	mov	r0, r8
 8000bbc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LD3_Pin;
 8000bbe:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f002 f981 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	2384      	movs	r3, #132	@ 0x84
 8000bce:	00d2      	lsls	r2, r2, #3
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8000bd2:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8000bd6:	9204      	str	r2, [sp, #16]
 8000bd8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bda:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f002 f976 	bl	8002ecc <HAL_GPIO_Init>
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8000be0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <MX_GPIO_Init+0x12c>)
 8000be2:	a904      	add	r1, sp, #16
 8000be4:	0018      	movs	r0, r3
 8000be6:	4698      	mov	r8, r3
  GPIO_InitStruct.Pin = MONITOR_Pin;
 8000be8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f002 f96c 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bf4:	23c4      	movs	r3, #196	@ 0xc4
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bf8:	3740      	adds	r7, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bfa:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c00:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f002 f961 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8000c0a:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8000c0e:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8000c10:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8000c12:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f002 f957 	bl	8002ecc <HAL_GPIO_Init>
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	0030      	movs	r0, r6
 8000c20:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8000c22:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f002 f94f 	bl	8002ecc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 8000c2e:	2202      	movs	r2, #2
 8000c30:	2102      	movs	r1, #2
 8000c32:	2007      	movs	r0, #7
 8000c34:	f001 ff38 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c38:	2007      	movs	r0, #7
 8000c3a:	f001 ff5f 	bl	8002afc <HAL_NVIC_EnableIRQ>
}
 8000c3e:	b00a      	add	sp, #40	@ 0x28
 8000c40:	bc80      	pop	{r7}
 8000c42:	46b8      	mov	r8, r7
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	50000800 	.word	0x50000800
 8000c50:	50001400 	.word	0x50001400
 8000c54:	50000400 	.word	0x50000400

08000c58 <Error_Handler>:
 8000c58:	b672      	cpsid	i
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <Error_Handler+0x2>

08000c5c <System_Init>:
  {

  }
}

void System_Init(void){
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	b082      	sub	sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c60:	f001 f98c 	bl	8001f7c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000c64:	f7ff fc68 	bl	8000538 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c68:	f7ff ff5e 	bl	8000b28 <MX_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8000da0 <System_Init+0x144>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c70:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000c74:	4319      	orrs	r1, r3
 8000c76:	6391      	str	r1, [r2, #56]	@ 0x38
 8000c78:	6b92      	ldr	r2, [r2, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c7a:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c84:	f001 ff10 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c88:	2009      	movs	r0, #9
 8000c8a:	f001 ff37 	bl	8002afc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8000c8e:	2202      	movs	r2, #2
 8000c90:	2102      	movs	r1, #2
 8000c92:	200a      	movs	r0, #10
 8000c94:	f001 ff08 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f001 ff2f 	bl	8002afc <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8000c9e:	4c41      	ldr	r4, [pc, #260]	@ (8000da4 <System_Init+0x148>)
 8000ca0:	4b41      	ldr	r3, [pc, #260]	@ (8000da8 <System_Init+0x14c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca2:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8000ca4:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 8000ca6:	2396      	movs	r3, #150	@ 0x96
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cac:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cae:	0020      	movs	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb0:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb2:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb4:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb6:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb8:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cba:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbc:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbe:	6263      	str	r3, [r4, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc2:	f005 faff 	bl	80062c4 <HAL_UART_Init>
 8000cc6:	1e05      	subs	r5, r0, #0
 8000cc8:	d001      	beq.n	8000cce <System_Init+0x72>
 8000cca:	b672      	cpsid	i
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <System_Init+0x70>
	MX_DMA_Init();
	MX_USART2_UART_Init();
	MX_ADC1_Init();
 8000cce:	f7ff fc73 	bl	80005b8 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8000cd2:	f7ff fceb 	bl	80006ac <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8000cd6:	f7ff fd41 	bl	800075c <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8000cda:	f7ff fd9b 	bl	8000814 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 8000cde:	f7ff fdf9 	bl	80008d4 <MX_TIM1_Init>
	MX_TIM17_Init();
 8000ce2:	f7ff fe8b 	bl	80009fc <MX_TIM17_Init>
	MX_TIM14_Init();
 8000ce6:	f7ff fee3 	bl	8000ab0 <MX_TIM14_Init>
  hlptim1.Instance = LPTIM1;
 8000cea:	4e30      	ldr	r6, [pc, #192]	@ (8000dac <System_Init+0x150>)
 8000cec:	4b30      	ldr	r3, [pc, #192]	@ (8000db0 <System_Init+0x154>)
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000cee:	2200      	movs	r2, #0
  hlptim1.Instance = LPTIM1;
 8000cf0:	6033      	str	r3, [r6, #0]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8000cf2:	23e0      	movs	r3, #224	@ 0xe0
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	60b3      	str	r3, [r6, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <System_Init+0x158>)
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000cfa:	0030      	movs	r0, r6
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000cfc:	6173      	str	r3, [r6, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000cfe:	2380      	movs	r3, #128	@ 0x80
 8000d00:	03db      	lsls	r3, r3, #15
 8000d02:	6232      	str	r2, [r6, #32]
 8000d04:	6273      	str	r3, [r6, #36]	@ 0x24
 8000d06:	2200      	movs	r2, #0
 8000d08:	2300      	movs	r3, #0
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000d0a:	6075      	str	r5, [r6, #4]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000d0c:	62b2      	str	r2, [r6, #40]	@ 0x28
 8000d0e:	62f3      	str	r3, [r6, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000d10:	6335      	str	r5, [r6, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000d12:	f002 fa01 	bl	8003118 <HAL_LPTIM_Init>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d001      	beq.n	8000d1e <System_Init+0xc2>
 8000d1a:	b672      	cpsid	i
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <System_Init+0xc0>
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8000d1e:	2202      	movs	r2, #2
 8000d20:	2102      	movs	r1, #2
 8000d22:	2011      	movs	r0, #17
 8000d24:	f001 fec0 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000d28:	2011      	movs	r0, #17
 8000d2a:	f001 fee7 	bl	8002afc <HAL_NVIC_EnableIRQ>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000d2e:	4d22      	ldr	r5, [pc, #136]	@ (8000db8 <System_Init+0x15c>)
 8000d30:	0028      	movs	r0, r5
 8000d32:	f001 fde5 	bl	8002900 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8000d36:	210e      	movs	r1, #14
 8000d38:	4a20      	ldr	r2, [pc, #128]	@ (8000dbc <System_Init+0x160>)
 8000d3a:	4821      	ldr	r0, [pc, #132]	@ (8000dc0 <System_Init+0x164>)
 8000d3c:	f004 fc3c 	bl	80055b8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8000d40:	2100      	movs	r1, #0
 8000d42:	0028      	movs	r0, r5
 8000d44:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc4 <System_Init+0x168>)
 8000d46:	f001 fadd 	bl	8002304 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8000d4a:	4d1f      	ldr	r5, [pc, #124]	@ (8000dc8 <System_Init+0x16c>)
 8000d4c:	2112      	movs	r1, #18
 8000d4e:	0028      	movs	r0, r5
 8000d50:	4a1e      	ldr	r2, [pc, #120]	@ (8000dcc <System_Init+0x170>)
 8000d52:	f004 fc31 	bl	80055b8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8000d56:	210e      	movs	r1, #14
 8000d58:	0028      	movs	r0, r5
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <System_Init+0x174>)
 8000d5c:	f004 fc2c 	bl	80055b8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8000d60:	2114      	movs	r1, #20
 8000d62:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd4 <System_Init+0x178>)
 8000d64:	481c      	ldr	r0, [pc, #112]	@ (8000dd8 <System_Init+0x17c>)
 8000d66:	f004 fc27 	bl	80055b8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	0020      	movs	r0, r4
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <System_Init+0x180>)
 8000d70:	f004 fe32 	bl	80059d8 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8000d74:	2103      	movs	r1, #3
 8000d76:	0020      	movs	r0, r4
 8000d78:	4a19      	ldr	r2, [pc, #100]	@ (8000de0 <System_Init+0x184>)
 8000d7a:	f004 fe2d 	bl	80059d8 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8000d7e:	2102      	movs	r1, #2
 8000d80:	0030      	movs	r0, r6
 8000d82:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <System_Init+0x188>)
 8000d84:	f002 faa8 	bl	80032d8 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8000d88:	2114      	movs	r1, #20
 8000d8a:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <System_Init+0x18c>)
 8000d8c:	4817      	ldr	r0, [pc, #92]	@ (8000dec <System_Init+0x190>)
 8000d8e:	f004 fc13 	bl	80055b8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 8000d92:	2114      	movs	r1, #20
 8000d94:	4a16      	ldr	r2, [pc, #88]	@ (8000df0 <System_Init+0x194>)
 8000d96:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <System_Init+0x198>)
 8000d98:	f004 fc0e 	bl	80055b8 <HAL_TIM_RegisterCallback>
}
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd70      	pop	{r4, r5, r6, pc}
 8000da0:	40021000 	.word	0x40021000
 8000da4:	20000554 	.word	0x20000554
 8000da8:	40004400 	.word	0x40004400
 8000dac:	20000440 	.word	0x20000440
 8000db0:	40007c00 	.word	0x40007c00
 8000db4:	0000ffff 	.word	0x0000ffff
 8000db8:	20000ae4 	.word	0x20000ae4
 8000dbc:	08000df9 	.word	0x08000df9
 8000dc0:	20000854 	.word	0x20000854
 8000dc4:	08000e35 	.word	0x08000e35
 8000dc8:	20000798 	.word	0x20000798
 8000dcc:	08000eb1 	.word	0x08000eb1
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f71 	.word	0x08000f71
 8000dd8:	200006dc 	.word	0x200006dc
 8000ddc:	08000fe9 	.word	0x08000fe9
 8000de0:	08000ff5 	.word	0x08000ff5
 8000de4:	080010b1 	.word	0x080010b1
 8000de8:	0800115d 	.word	0x0800115d
 8000dec:	20000910 	.word	0x20000910
 8000df0:	08001175 	.word	0x08001175
 8000df4:	200009cc 	.word	0x200009cc

08000df8 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8000df8:	b510      	push	{r4, lr}
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8000dfa:	4c09      	ldr	r4, [pc, #36]	@ (8000e20 <TIM16_callback+0x28>)
 8000dfc:	0020      	movs	r0, r4
 8000dfe:	f000 fa85 	bl	800130c <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8000e02:	2100      	movs	r1, #0
 8000e04:	0020      	movs	r0, r4
 8000e06:	f000 fa99 	bl	800133c <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	4905      	ldr	r1, [pc, #20]	@ (8000e24 <TIM16_callback+0x2c>)
 8000e0e:	f000 fb23 	bl	8001458 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8000e12:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <TIM16_callback+0x30>)
 8000e14:	4905      	ldr	r1, [pc, #20]	@ (8000e2c <TIM16_callback+0x34>)
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <TIM16_callback+0x38>)
 8000e1a:	f001 fc8d 	bl	8002738 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8000e1e:	bd10      	pop	{r4, pc}
 8000e20:	20000bc4 	.word	0x20000bc4
 8000e24:	20000004 	.word	0x20000004
 8000e28:	08006678 	.word	0x08006678
 8000e2c:	20000be8 	.word	0x20000be8
 8000e30:	20000ae4 	.word	0x20000ae4

08000e34 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8000e34:	b510      	push	{r4, lr}
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8000e36:	f001 fd1d 	bl	8002874 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params, &delay_line, ADCResultsDMA);
 8000e3a:	4c16      	ldr	r4, [pc, #88]	@ (8000e94 <ADC_DMA_conversion_complete_callback+0x60>)
 8000e3c:	4a16      	ldr	r2, [pc, #88]	@ (8000e98 <ADC_DMA_conversion_complete_callback+0x64>)
 8000e3e:	0020      	movs	r0, r4
 8000e40:	4916      	ldr	r1, [pc, #88]	@ (8000e9c <ADC_DMA_conversion_complete_callback+0x68>)
 8000e42:	f000 fb65 	bl	8001510 <Process_ADC_Conversion_Values>

	if((state == STATE_0) || ((state != STATE_0) && (first_sync_complete == NO))){
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <ADC_DMA_conversion_complete_callback+0x6c>)
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d006      	beq.n	8000e5c <ADC_DMA_conversion_complete_callback+0x28>
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	d010      	beq.n	8000e76 <ADC_DMA_conversion_complete_callback+0x42>
 8000e54:	4a13      	ldr	r2, [pc, #76]	@ (8000ea4 <ADC_DMA_conversion_complete_callback+0x70>)
 8000e56:	7812      	ldrb	r2, [r2, #0]
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d10c      	bne.n	8000e76 <ADC_DMA_conversion_complete_callback+0x42>

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8000e5c:	0020      	movs	r0, r4
 8000e5e:	f000 fa3d 	bl	80012dc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>

		params.raw_start_value = params_working.raw_start_value;
		params.raw_prescaler = params_working.raw_prescaler;
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8000e62:	0020      	movs	r0, r4
 8000e64:	f000 feb0 	bl	8001bc8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(initial_ADC_conversion_complete == NO){
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <ADC_DMA_conversion_complete_callback+0x74>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d101      	bne.n	8000e74 <ADC_DMA_conversion_complete_callback+0x40>
		initial_ADC_conversion_complete = YES;
 8000e70:	3201      	adds	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8000e74:	bd10      	pop	{r4, pc}
	else if((state != STATE_0) && (first_sync_complete == YES)){
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f2      	beq.n	8000e62 <ADC_DMA_conversion_complete_callback+0x2e>
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <ADC_DMA_conversion_complete_callback+0x70>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d1ee      	bne.n	8000e62 <ADC_DMA_conversion_complete_callback+0x2e>
		params.raw_start_value = params_working.raw_start_value;
 8000e84:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <ADC_DMA_conversion_complete_callback+0x78>)
 8000e86:	8a53      	ldrh	r3, [r2, #18]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	8263      	strh	r3, [r4, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8000e8c:	8b53      	ldrh	r3, [r2, #26]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	8363      	strh	r3, [r4, #26]
 8000e92:	e7e6      	b.n	8000e62 <ADC_DMA_conversion_complete_callback+0x2e>
 8000e94:	20000bc4 	.word	0x20000bc4
 8000e98:	20000be8 	.word	0x20000be8
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	20000bf2 	.word	0x20000bf2
 8000ea4:	20000be6 	.word	0x20000be6
 8000ea8:	20000be7 	.word	0x20000be7
 8000eac:	20000b7c 	.word	0x20000b7c

08000eb0 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000eb0:	2100      	movs	r1, #0
void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8000eb2:	b570      	push	{r4, r5, r6, lr}
	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000eb4:	f004 fb68 	bl	8005588 <HAL_TIM_ReadCapturedValue>
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <TIM2_ch1_IP_capture_callback+0x7c>)

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8000eba:	491d      	ldr	r1, [pc, #116]	@ (8000f30 <TIM2_ch1_IP_capture_callback+0x80>)
	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ebc:	6018      	str	r0, [r3, #0]
	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0a5b      	lsrs	r3, r3, #9
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	800b      	strh	r3, [r1, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(input_capture_event == FIRST){ //edge detected is the first
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <TIM2_ch1_IP_capture_callback+0x84>)
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	b2d0      	uxtb	r0, r2
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d107      	bne.n	8000ee0 <TIM2_ch1_IP_capture_callback+0x30>

		__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
		input_capture_measurement_is_ongoing = YES;
 8000ed0:	2101      	movs	r1, #1
		__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8000ed2:	4a19      	ldr	r2, [pc, #100]	@ (8000f38 <TIM2_ch1_IP_capture_callback+0x88>)
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	6250      	str	r0, [r2, #36]	@ 0x24
		input_capture_measurement_is_ongoing = YES;
 8000ed8:	4a18      	ldr	r2, [pc, #96]	@ (8000f3c <TIM2_ch1_IP_capture_callback+0x8c>)
 8000eda:	7011      	strb	r1, [r2, #0]
		input_capture_event = SECOND;
 8000edc:	7019      	strb	r1, [r3, #0]
				//begin processing
				input_capture_processing_can_be_started = YES;
			}
		}
	}
}
 8000ede:	bd70      	pop	{r4, r5, r6, pc}
		input_capture_event = FIRST; //reset event name
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
		input_capture_measurement_is_ongoing = NO;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <TIM2_ch1_IP_capture_callback+0x8c>)
		if(input_capture_measurement_reelapse_is_ongoing == YES){
 8000ee6:	4c16      	ldr	r4, [pc, #88]	@ (8000f40 <TIM2_ch1_IP_capture_callback+0x90>)
		input_capture_measurement_is_ongoing = NO;
 8000ee8:	701a      	strb	r2, [r3, #0]
		if(input_capture_measurement_reelapse_is_ongoing == YES){
 8000eea:	7823      	ldrb	r3, [r4, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d013      	beq.n	8000f18 <TIM2_ch1_IP_capture_callback+0x68>
			if(interrupt_period < HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is less than 129, then the desired speed is not reproducable, do not proceed witj ip capture
 8000ef0:	880b      	ldrh	r3, [r1, #0]
 8000ef2:	2b80      	cmp	r3, #128	@ 0x80
 8000ef4:	d802      	bhi.n	8000efc <TIM2_ch1_IP_capture_callback+0x4c>
				input_capture_processing_can_be_started = NO;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <TIM2_ch1_IP_capture_callback+0x94>)
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	e7f0      	b.n	8000ede <TIM2_ch1_IP_capture_callback+0x2e>
				__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000efc:	4812      	ldr	r0, [pc, #72]	@ (8000f48 <TIM2_ch1_IP_capture_callback+0x98>)
 8000efe:	6805      	ldr	r5, [r0, #0]
 8000f00:	626a      	str	r2, [r5, #36]	@ 0x24
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period); //measured value divided by 512
 8000f02:	880b      	ldrh	r3, [r1, #0]
				Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000f04:	2100      	movs	r1, #0
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period); //measured value divided by 512
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	636b      	str	r3, [r5, #52]	@ 0x34
				Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000f0a:	f000 ffaf 	bl	8001e6c <Start_OC_TIM>
				input_capture_measurement_reelapse_is_ongoing = YES;
 8000f0e:	2301      	movs	r3, #1
				input_capture_processing_can_be_started = YES;
 8000f10:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <TIM2_ch1_IP_capture_callback+0x94>)
				input_capture_measurement_reelapse_is_ongoing = YES;
 8000f12:	7023      	strb	r3, [r4, #0]
				input_capture_processing_can_be_started = YES;
 8000f14:	7013      	strb	r3, [r2, #0]
}
 8000f16:	e7e2      	b.n	8000ede <TIM2_ch1_IP_capture_callback+0x2e>
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000f18:	480b      	ldr	r0, [pc, #44]	@ (8000f48 <TIM2_ch1_IP_capture_callback+0x98>)
 8000f1a:	6804      	ldr	r4, [r0, #0]
 8000f1c:	6262      	str	r2, [r4, #36]	@ 0x24
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8000f1e:	880b      	ldrh	r3, [r1, #0]
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000f20:	2100      	movs	r1, #0
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	6363      	str	r3, [r4, #52]	@ 0x34
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000f26:	f000 ffa1 	bl	8001e6c <Start_OC_TIM>
 8000f2a:	e7d8      	b.n	8000ede <TIM2_ch1_IP_capture_callback+0x2e>
 8000f2c:	20000b74 	.word	0x20000b74
 8000f30:	20000b6e 	.word	0x20000b6e
 8000f34:	20000b78 	.word	0x20000b78
 8000f38:	20000798 	.word	0x20000798
 8000f3c:	20000b72 	.word	0x20000b72
 8000f40:	20000b71 	.word	0x20000b71
 8000f44:	20000b70 	.word	0x20000b70
 8000f48:	200006dc 	.word	0x200006dc

08000f4c <TIM2_ch1_overflow_callback>:

void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){

	if(input_capture_measurement_is_ongoing == YES && input_capture_event == SECOND){
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <TIM2_ch1_overflow_callback+0x1c>)
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	2a01      	cmp	r2, #1
 8000f52:	d000      	beq.n	8000f56 <TIM2_ch1_overflow_callback+0xa>
		//Thus, reset everything requiring the user to press the switch again to start another capture

		input_capture_measurement_is_ongoing = NO;
		input_capture_event = FIRST;
	}
}
 8000f54:	4770      	bx	lr
	if(input_capture_measurement_is_ongoing == YES && input_capture_event == SECOND){
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <TIM2_ch1_overflow_callback+0x20>)
 8000f58:	7811      	ldrb	r1, [r2, #0]
 8000f5a:	2901      	cmp	r1, #1
 8000f5c:	d1fa      	bne.n	8000f54 <TIM2_ch1_overflow_callback+0x8>
		input_capture_measurement_is_ongoing = NO;
 8000f5e:	2100      	movs	r1, #0
 8000f60:	7019      	strb	r1, [r3, #0]
		input_capture_event = FIRST;
 8000f62:	7011      	strb	r1, [r2, #0]
}
 8000f64:	e7f6      	b.n	8000f54 <TIM2_ch1_overflow_callback+0x8>
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	20000b72 	.word	0x20000b72
 8000f6c:	20000b78 	.word	0x20000b78

08000f70 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8000f70:	b570      	push	{r4, r5, r6, lr}
	//force update of timers to sync the wave to the TIM3 reelapse interrupt

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
	Set_Oscillator_Values(&params_to_be_loaded);
 8000f72:	4d13      	ldr	r5, [pc, #76]	@ (8000fc0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x50>)
 8000f74:	0028      	movs	r0, r5
 8000f76:	f000 f9c9 	bl	800130c <Set_Oscillator_Values>

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x54>)
 8000f7e:	f000 ff7f 	bl	8001e80 <Stop_OC_TIM>

	input_capture_measurement_reelapse_is_ongoing = NO;
 8000f82:	2200      	movs	r2, #0
 8000f84:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x58>)

	Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8000f86:	0028      	movs	r0, r5
 8000f88:	4910      	ldr	r1, [pc, #64]	@ (8000fcc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x5c>)
	input_capture_measurement_reelapse_is_ongoing = NO;
 8000f8a:	701a      	strb	r2, [r3, #0]
	Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8000f8c:	f000 f95c 	bl	8001248 <Copy_Params_Structs>
	Copy_Params_Structs(&params_to_be_loaded, &params);
 8000f90:	4c0f      	ldr	r4, [pc, #60]	@ (8000fd0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x60>)
 8000f92:	0028      	movs	r0, r5
 8000f94:	0021      	movs	r1, r4
 8000f96:	f000 f957 	bl	8001248 <Copy_Params_Structs>
	first_sync_complete = YES;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x64>)

	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	0020      	movs	r0, r4
	first_sync_complete = YES;
 8000fa2:	701a      	strb	r2, [r3, #0]
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8000fa4:	f000 f9ca 	bl	800133c <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8000fa8:	0020      	movs	r0, r4
 8000faa:	490b      	ldr	r1, [pc, #44]	@ (8000fd8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x68>)
 8000fac:	f000 fa54 	bl	8001458 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6c>)
 8000fb2:	490b      	ldr	r1, [pc, #44]	@ (8000fe0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x70>)
 8000fb4:	781a      	ldrb	r2, [r3, #0]
 8000fb6:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x74>)
 8000fb8:	f001 fbbe 	bl	8002738 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	20000ba0 	.word	0x20000ba0
 8000fc4:	200006dc 	.word	0x200006dc
 8000fc8:	20000b71 	.word	0x20000b71
 8000fcc:	20000b7c 	.word	0x20000b7c
 8000fd0:	20000bc4 	.word	0x20000bc4
 8000fd4:	20000be6 	.word	0x20000be6
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	08006678 	.word	0x08006678
 8000fe0:	20000be8 	.word	0x20000be8
 8000fe4:	20000ae4 	.word	0x20000ae4

08000fe8 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){

	UART_DMA_TX_is_complete = YES;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4b01      	ldr	r3, [pc, #4]	@ (8000ff0 <UART2_TX_transfer_complete_callback+0x8>)
 8000fec:	701a      	strb	r2, [r3, #0]
}
 8000fee:	4770      	bx	lr
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8000ff4:	b510      	push	{r4, lr}

	if(rx_buffer[0] == 'y'){
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <UART2_RX_transfer_complete_callback+0x24>)
 8000ff8:	780b      	ldrb	r3, [r1, #0]
 8000ffa:	2b79      	cmp	r3, #121	@ 0x79
 8000ffc:	d106      	bne.n	800100c <UART2_RX_transfer_complete_callback+0x18>

		params.final_prescaler = 64;
 8000ffe:	2240      	movs	r2, #64	@ 0x40
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <UART2_RX_transfer_complete_callback+0x28>)
 8001002:	839a      	strh	r2, [r3, #28]
		params.final_start_value = 127;
 8001004:	323f      	adds	r2, #63	@ 0x3f
 8001006:	829a      	strh	r2, [r3, #20]
		rx_buffer[0] = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	700b      	strb	r3, [r1, #0]
	}
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800100c:	2201      	movs	r2, #1
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <UART2_RX_transfer_complete_callback+0x2c>)
 8001010:	f004 fd34 	bl	8005a7c <HAL_UART_Receive_DMA>
}
 8001014:	bd10      	pop	{r4, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	20000434 	.word	0x20000434
 800101c:	20000bc4 	.word	0x20000bc4
 8001020:	20000554 	.word	0x20000554

08001024 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8001024:	b510      	push	{r4, lr}

	//DISABLE EXTI INTERRUPTS - in EXTI Callback before

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8001026:	2880      	cmp	r0, #128	@ 0x80
 8001028:	d000      	beq.n	800102c <HAL_GPIO_EXTI_Falling_Callback+0x8>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);

		//Start_OC_TIM(&htim17, TIM_CHANNEL_1);
	}
}
 800102a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	20a0      	movs	r0, #160	@ 0xa0
 8001030:	2201      	movs	r2, #1
 8001032:	0089      	lsls	r1, r1, #2
 8001034:	05c0      	lsls	r0, r0, #23
 8001036:	f002 f841 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	@ 0x40
 800103e:	4802      	ldr	r0, [pc, #8]	@ (8001048 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 8001040:	f002 f83c 	bl	80030bc <HAL_GPIO_WritePin>
}
 8001044:	e7f1      	b.n	800102a <HAL_GPIO_EXTI_Falling_Callback+0x6>
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	50000800 	.word	0x50000800

0800104c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800104c:	b510      	push	{r4, lr}

	//DISABLE EXTI INTERRUPTS - in EXTI Callback before

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 800104e:	2880      	cmp	r0, #128	@ 0x80
 8001050:	d000      	beq.n	8001054 <HAL_GPIO_EXTI_Rising_Callback+0x8>
			Start_OC_TIM(&htim14, TIM_CHANNEL_1);

			IP_CAP_events_detection_timeout = NO;
		}
	}
}
 8001052:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001054:	2180      	movs	r1, #128	@ 0x80
 8001056:	20a0      	movs	r0, #160	@ 0xa0
 8001058:	2200      	movs	r2, #0
 800105a:	0089      	lsls	r1, r1, #2
 800105c:	05c0      	lsls	r0, r0, #23
 800105e:	f002 f82d 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001062:	2201      	movs	r2, #1
 8001064:	2140      	movs	r1, #64	@ 0x40
 8001066:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 8001068:	f002 f828 	bl	80030bc <HAL_GPIO_WritePin>
		if(state == STATE_2){
 800106c:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	2a02      	cmp	r2, #2
 8001072:	d00e      	beq.n	8001092 <HAL_GPIO_EXTI_Rising_Callback+0x46>
		else if(state == STATE_0){
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	b2d4      	uxtb	r4, r2
 8001078:	2a00      	cmp	r2, #0
 800107a:	d1ea      	bne.n	8001052 <HAL_GPIO_EXTI_Rising_Callback+0x6>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 800107c:	480a      	ldr	r0, [pc, #40]	@ (80010a8 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
			state = STATE_2;
 800107e:	3202      	adds	r2, #2
 8001080:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001082:	6803      	ldr	r3, [r0, #0]
			Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001086:	625c      	str	r4, [r3, #36]	@ 0x24
			Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8001088:	f000 fef0 	bl	8001e6c <Start_OC_TIM>
			IP_CAP_events_detection_timeout = NO;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 800108e:	701c      	strb	r4, [r3, #0]
}
 8001090:	e7df      	b.n	8001052 <HAL_GPIO_EXTI_Rising_Callback+0x6>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	2300      	movs	r3, #0
 8001098:	6253      	str	r3, [r2, #36]	@ 0x24
			IP_CAP_events_detection_timeout = NO;
 800109a:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 800109c:	7013      	strb	r3, [r2, #0]
 800109e:	e7d8      	b.n	8001052 <HAL_GPIO_EXTI_Rising_Callback+0x6>
 80010a0:	50000800 	.word	0x50000800
 80010a4:	20000bf2 	.word	0x20000bf2
 80010a8:	200009cc 	.word	0x200009cc
 80010ac:	2000043b 	.word	0x2000043b

080010b0 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 80010b0:	b510      	push	{r4, lr}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	if((state == STATE_0) && (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin) == 0){ //can only go into state 1 if no other 'ip cap' source is active
 80010b2:	4c24      	ldr	r4, [pc, #144]	@ (8001144 <LPTIM1_callback+0x94>)
 80010b4:	7823      	ldrb	r3, [r4, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d02c      	beq.n	8001114 <LPTIM1_callback+0x64>
		state = STATE_1;
	}

	//don't add conditional for STATE_0

	if(IP_CAP_events_detection_timeout == YES && state != STATE_0){
 80010ba:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <LPTIM1_callback+0x98>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d008      	beq.n	80010d4 <LPTIM1_callback+0x24>

		Speed_Pot_Check(&params);
	}


	if(state == STATE_1){
 80010c2:	7823      	ldrb	r3, [r4, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d00e      	beq.n	80010e6 <LPTIM1_callback+0x36>


	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80010c8:	22fa      	movs	r2, #250	@ 0xfa
 80010ca:	21fa      	movs	r1, #250	@ 0xfa
 80010cc:	481f      	ldr	r0, [pc, #124]	@ (800114c <LPTIM1_callback+0x9c>)
 80010ce:	f002 fa1f 	bl	8003510 <HAL_LPTIM_SetOnce_Start_IT>

}
 80010d2:	bd10      	pop	{r4, pc}
	if(IP_CAP_events_detection_timeout == YES && state != STATE_0){
 80010d4:	7823      	ldrb	r3, [r4, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f3      	beq.n	80010c2 <LPTIM1_callback+0x12>
		Speed_Pot_Check(&params);
 80010da:	481d      	ldr	r0, [pc, #116]	@ (8001150 <LPTIM1_callback+0xa0>)
 80010dc:	f7ff f9c0 	bl	8000460 <Speed_Pot_Check>
	if(state == STATE_1){
 80010e0:	7823      	ldrb	r3, [r4, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d1f0      	bne.n	80010c8 <LPTIM1_callback+0x18>
		Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 80010e6:	4c1b      	ldr	r4, [pc, #108]	@ (8001154 <LPTIM1_callback+0xa4>)
 80010e8:	0020      	movs	r0, r4
 80010ea:	f7ff f9f3 	bl	80004d4 <Check_Tap_Tempo_Switch_State>
		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 80010ee:	7823      	ldrb	r3, [r4, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d01a      	beq.n	800112a <LPTIM1_callback+0x7a>
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 80010f4:	7823      	ldrb	r3, [r4, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1e6      	bne.n	80010c8 <LPTIM1_callback+0x18>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 80010fa:	2180      	movs	r1, #128	@ 0x80
 80010fc:	20a0      	movs	r0, #160	@ 0xa0
 80010fe:	2201      	movs	r2, #1
 8001100:	0089      	lsls	r1, r1, #2
 8001102:	05c0      	lsls	r0, r0, #23
 8001104:	f001 ffda 	bl	80030bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2140      	movs	r1, #64	@ 0x40
 800110c:	4812      	ldr	r0, [pc, #72]	@ (8001158 <LPTIM1_callback+0xa8>)
 800110e:	f001 ffd5 	bl	80030bc <HAL_GPIO_WritePin>
 8001112:	e7d9      	b.n	80010c8 <LPTIM1_callback+0x18>
	if((state == STATE_0) && (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin) == 0){ //can only go into state 1 if no other 'ip cap' source is active
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	20a0      	movs	r0, #160	@ 0xa0
 8001118:	00c9      	lsls	r1, r1, #3
 800111a:	05c0      	lsls	r0, r0, #23
 800111c:	f001 ffc8 	bl	80030b0 <HAL_GPIO_ReadPin>
 8001120:	2800      	cmp	r0, #0
 8001122:	d1ca      	bne.n	80010ba <LPTIM1_callback+0xa>
		state = STATE_1;
 8001124:	2301      	movs	r3, #1
 8001126:	7023      	strb	r3, [r4, #0]
 8001128:	e7c7      	b.n	80010ba <LPTIM1_callback+0xa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800112a:	2180      	movs	r1, #128	@ 0x80
 800112c:	20a0      	movs	r0, #160	@ 0xa0
 800112e:	2200      	movs	r2, #0
 8001130:	0089      	lsls	r1, r1, #2
 8001132:	05c0      	lsls	r0, r0, #23
 8001134:	f001 ffc2 	bl	80030bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	2140      	movs	r1, #64	@ 0x40
 800113c:	4806      	ldr	r0, [pc, #24]	@ (8001158 <LPTIM1_callback+0xa8>)
 800113e:	f001 ffbd 	bl	80030bc <HAL_GPIO_WritePin>
 8001142:	e7c1      	b.n	80010c8 <LPTIM1_callback+0x18>
 8001144:	20000bf2 	.word	0x20000bf2
 8001148:	2000043b 	.word	0x2000043b
 800114c:	20000440 	.word	0x20000440
 8001150:	20000bc4 	.word	0x20000bc4
 8001154:	20000b6c 	.word	0x20000b6c
 8001158:	50000800 	.word	0x50000800

0800115c <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 800115c:	b510      	push	{r4, lr}

	Stop_OC_TIM(&htim17, TIM_CHANNEL_1);
 800115e:	2100      	movs	r1, #0
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <TIM17_callback+0x14>)
 8001162:	f000 fe8d 	bl	8001e80 <Stop_OC_TIM>

	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001166:	2007      	movs	r0, #7
 8001168:	f001 fcc8 	bl	8002afc <HAL_NVIC_EnableIRQ>

	__HAL_TIM_SET_COUNTER(&htim17, 0);

	Start_OC_TIM(&htim17, TIM_CHANNEL_1);*/

}
 800116c:	bd10      	pop	{r4, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	20000910 	.word	0x20000910

08001174 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8001174:	b510      	push	{r4, lr}

	Stop_OC_TIM(&htim14, TIM_CHANNEL_1);
 8001176:	2100      	movs	r1, #0
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <TIM14_callback+0x1c>)
 800117a:	f000 fe81 	bl	8001e80 <Stop_OC_TIM>

	IP_CAP_events_detection_timeout = YES;
 800117e:	2201      	movs	r2, #1
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <TIM14_callback+0x20>)

	HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
 8001182:	2140      	movs	r1, #64	@ 0x40
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <TIM14_callback+0x24>)
	IP_CAP_events_detection_timeout = YES;
 8001186:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
 8001188:	f001 ff98 	bl	80030bc <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COUNTER(&htim14, 0);

	Start_OC_TIM(&htim14, TIM_CHANNEL_1);*/

}
 800118c:	bd10      	pop	{r4, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	200009cc 	.word	0x200009cc
 8001194:	2000043b 	.word	0x2000043b
 8001198:	50000400 	.word	0x50000400

0800119c <Input_Capture_Processing>:
volatile enum Validate input_capture_processing_can_be_started = NO;

volatile uint16_t interrupt_period = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params* params_ptr){
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	466b      	mov	r3, sp

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	input_capture_processing_can_be_started = NO; //reset flag
 80011a2:	2200      	movs	r2, #0
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params* params_ptr){
 80011a4:	1d9d      	adds	r5, r3, #6
	input_capture_processing_can_be_started = NO; //reset flag
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <Input_Capture_Processing+0x78>)
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params* params_ptr){
 80011a8:	8028      	strh	r0, [r5, #0]
	input_capture_processing_can_be_started = NO; //reset flag
 80011aa:	701a      	strb	r2, [r3, #0]

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 80011ac:	8828      	ldrh	r0, [r5, #0]
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params* params_ptr){
 80011ae:	000f      	movs	r7, r1
	if(isPrime(interrupt_period_value) == YES){
 80011b0:	b280      	uxth	r0, r0
 80011b2:	f000 fe6f 	bl	8001e94 <isPrime>
 80011b6:	2801      	cmp	r0, #1
 80011b8:	d103      	bne.n	80011c2 <Input_Capture_Processing+0x26>

		interrupt_period_value += 1;
 80011ba:	882b      	ldrh	r3, [r5, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	b29b      	uxth	r3, r3
 80011c0:	802b      	strh	r3, [r5, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 80011c2:	2480      	movs	r4, #128	@ 0x80
 80011c4:	882e      	ldrh	r6, [r5, #0]
 80011c6:	0064      	lsls	r4, r4, #1
 80011c8:	01b6      	lsls	r6, r6, #6

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 80011ca:	e003      	b.n	80011d4 <Input_Capture_Processing+0x38>
 80011cc:	3c01      	subs	r4, #1
 80011ce:	b2a4      	uxth	r4, r4
 80011d0:	2c7f      	cmp	r4, #127	@ 0x7f
 80011d2:	d00e      	beq.n	80011f2 <Input_Capture_Processing+0x56>

		interrupt_period_value = 256 - i;
 80011d4:	802c      	strh	r4, [r5, #0]
		uint16_t remainder = N % interrupt_period_value;
 80011d6:	8829      	ldrh	r1, [r5, #0]
 80011d8:	0030      	movs	r0, r6
 80011da:	b289      	uxth	r1, r1
 80011dc:	f7ff f818 	bl	8000210 <__aeabi_uidivmod>

		if(remainder == 0){ //check if no remainder -> integer
 80011e0:	2900      	cmp	r1, #0
 80011e2:	d1f3      	bne.n	80011cc <Input_Capture_Processing+0x30>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 80011e4:	8829      	ldrh	r1, [r5, #0]
 80011e6:	0030      	movs	r0, r6
 80011e8:	b289      	uxth	r1, r1
 80011ea:	f7fe ff8b 	bl	8000104 <__udivsi3>
 80011ee:	b280      	uxth	r0, r0
 80011f0:	8378      	strh	r0, [r7, #26]
			break;
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	882a      	ldrh	r2, [r5, #0]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	b29b      	uxth	r3, r3

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 80011fc:	2101      	movs	r1, #1
	params_ptr->raw_start_value = 256 - interrupt_period_value;
 80011fe:	827b      	strh	r3, [r7, #18]
	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8001200:	0038      	movs	r0, r7
 8001202:	f000 f89b 	bl	800133c <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8001206:	0038      	movs	r0, r7
 8001208:	f000 fcde 	bl	8001bc8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
}
 800120c:	2001      	movs	r0, #1
 800120e:	b003      	add	sp, #12
 8001210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	20000b70 	.word	0x20000b70

08001218 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8001218:	b570      	push	{r4, r5, r6, lr}
	return ok;
}

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 800121a:	4d0a      	ldr	r5, [pc, #40]	@ (8001244 <Start_Input_Capture_Timer+0x2c>)
 800121c:	0028      	movs	r0, r5
 800121e:	f002 ffa5 	bl	800416c <HAL_TIM_Base_Start_IT>
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8001222:	2100      	movs	r1, #0
	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8001224:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8001226:	0028      	movs	r0, r5
 8001228:	f003 fb94 	bl	8004954 <HAL_TIM_IC_Start_IT>
 800122c:	4004      	ands	r4, r0
 800122e:	b2e4      	uxtb	r4, r4

	if(ok_AND != HAL_OK){
 8001230:	2c00      	cmp	r4, #0
 8001232:	d101      	bne.n	8001238 <Start_Input_Capture_Timer+0x20>
}
 8001234:	0020      	movs	r0, r4
 8001236:	bd70      	pop	{r4, r5, r6, pc}

		Error_Handler();
 8001238:	f7ff fd0e 	bl	8000c58 <Error_Handler>
		Error_Handler();
 800123c:	f7ff fd0c 	bl	8000c58 <Error_Handler>
 8001240:	e7f8      	b.n	8001234 <Start_Input_Capture_Timer+0x1c>
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	20000798 	.word	0x20000798

08001248 <Copy_Params_Structs>:
	}

	return ok_AND;
}

uint8_t Copy_Params_Structs(struct Params* src_ptr, struct Params* dst_ptr){
 8001248:	0003      	movs	r3, r0
 800124a:	b510      	push	{r4, lr}
 800124c:	0008      	movs	r0, r1

	*dst_ptr = *src_ptr;
 800124e:	2222      	movs	r2, #34	@ 0x22
 8001250:	0019      	movs	r1, r3
 8001252:	f005 f9fb 	bl	800664c <memcpy>

	return 1;
}
 8001256:	2001      	movs	r0, #1
 8001258:	bd10      	pop	{r4, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)

0800125c <main>:
#include "main.h"

//const char one_byte_data = 'j';

int main(void)
{
 800125c:	b570      	push	{r4, r5, r6, lr}
	//SYSTEM INIT
	System_Init();
 800125e:	f7ff fcfd 	bl	8000c5c <System_Init>

	//STARTUP
	Startup();
 8001262:	f000 f97b 	bl	800155c <Startup>
 8001266:	4c06      	ldr	r4, [pc, #24]	@ (8001280 <main+0x24>)
 8001268:	4e06      	ldr	r6, [pc, #24]	@ (8001284 <main+0x28>)
 800126a:	4d07      	ldr	r5, [pc, #28]	@ (8001288 <main+0x2c>)

			UART_DMA_TX_is_complete = NO;
			HAL_UART_Transmit_DMA(&huart2, (const uint8_t*)&one_byte_data, sizeof(one_byte_data));
		}*/

		if(input_capture_processing_can_be_started == YES){
 800126c:	7823      	ldrb	r3, [r4, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d1fc      	bne.n	800126c <main+0x10>

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8001272:	8830      	ldrh	r0, [r6, #0]
 8001274:	0029      	movs	r1, r5
 8001276:	b280      	uxth	r0, r0
 8001278:	f7ff ff90 	bl	800119c <Input_Capture_Processing>
 800127c:	e7f6      	b.n	800126c <main+0x10>
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	20000b70 	.word	0x20000b70
 8001284:	20000b6e 	.word	0x20000b6e
 8001288:	20000ba0 	.word	0x20000ba0

0800128c <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_finish_offset = FINAL_INDEX + 1, //initial value is 512th index, one larger than the index of the final sample
								.duty_delay_line_read_pointer_offset = 0}; //determined in running

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 800128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128e:	0016      	movs	r6, r2
 8001290:	0005      	movs	r5, r0
 8001292:	000f      	movs	r7, r1
	uint8_t ok_OR = 0;
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8001294:	f002 ff3c 	bl	8004110 <HAL_TIM_Base_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8001298:	0039      	movs	r1, r7
	ok_OR |= HAL_TIM_Base_Start(TIM);
 800129a:	0004      	movs	r4, r0
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 800129c:	0028      	movs	r0, r5
 800129e:	f003 fa29 	bl	80046f4 <HAL_TIM_PWM_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 80012a2:	0031      	movs	r1, r6
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 80012a4:	4304      	orrs	r4, r0
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 80012a6:	0028      	movs	r0, r5
 80012a8:	f003 fa24 	bl	80046f4 <HAL_TIM_PWM_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 80012ac:	b2e4      	uxtb	r4, r4
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 80012ae:	4304      	orrs	r4, r0
 80012b0:	b2e4      	uxtb	r4, r4

	if(ok_OR != HAL_OK){
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d101      	bne.n	80012ba <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x2e>

		Error_Handler();
	}

	return ok_OR;
}
 80012b6:	0020      	movs	r0, r4
 80012b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Error_Handler();
 80012ba:	f7ff fccd 	bl	8000c58 <Error_Handler>
 80012be:	e7fa      	b.n	80012b6 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x2a>

080012c0 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 80012c0:	b510      	push	{r4, lr}
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80012c2:	2100      	movs	r1, #0
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <Start_Freq_Gen_Timer+0x18>)
 80012c6:	f000 fdd1 	bl	8001e6c <Start_OC_TIM>
 80012ca:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 80012cc:	d101      	bne.n	80012d2 <Start_Freq_Gen_Timer+0x12>

		Error_Handler();
	}

	return ok;
}
 80012ce:	0020      	movs	r0, r4
 80012d0:	bd10      	pop	{r4, pc}
		Error_Handler();
 80012d2:	f7ff fcc1 	bl	8000c58 <Error_Handler>
 80012d6:	e7fa      	b.n	80012ce <Start_Freq_Gen_Timer+0xe>
 80012d8:	20000854 	.word	0x20000854

080012dc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

	uint32_t speed_control = 0;
	uint8_t how_many_128 = 0;

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 80012dc:	8902      	ldrh	r2, [r0, #8]
 80012de:	0093      	lsls	r3, r2, #2
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	019b      	lsls	r3, r3, #6
 80012e4:	189b      	adds	r3, r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	189b      	adds	r3, r3, r2
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 80012ea:	0c59      	lsrs	r1, r3, #17
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 80012ec:	b2ca      	uxtb	r2, r1
 80012ee:	01d2      	lsls	r2, r2, #7
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 80012f0:	0a9b      	lsrs	r3, r3, #10
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	8243      	strh	r3, [r0, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 80012f8:	22ff      	movs	r2, #255	@ 0xff
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	400a      	ands	r2, r1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4113      	asrs	r3, r2
 8001302:	b29b      	uxth	r3, r3
 8001304:	8343      	strh	r3, [r0, #26]

    return 1;
}
 8001306:	2001      	movs	r0, #1
 8001308:	4770      	bx	lr
 800130a:	46c0      	nop			@ (mov r8, r8)

0800130c <Set_Oscillator_Values>:
uint8_t Set_Oscillator_Values(struct Params* params_ptr){

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 800130c:	4909      	ldr	r1, [pc, #36]	@ (8001334 <Set_Oscillator_Values+0x28>)
 800130e:	8b03      	ldrh	r3, [r0, #24]
 8001310:	680a      	ldr	r2, [r1, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001316:	8b03      	ldrh	r3, [r0, #24]
 8001318:	60cb      	str	r3, [r1, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 800131a:	8bc3      	ldrh	r3, [r0, #30]
 800131c:	b29b      	uxth	r3, r3
 800131e:	6293      	str	r3, [r2, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8001320:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <Set_Oscillator_Values+0x2c>)
 8001322:	8843      	ldrh	r3, [r0, #2]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	6393      	str	r3, [r2, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 800132a:	8883      	ldrh	r3, [r0, #4]

	return 1;
}
 800132c:	2001      	movs	r0, #1
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 800132e:	b29b      	uxth	r3, r3
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001332:	4770      	bx	lr
 8001334:	20000854 	.word	0x20000854
 8001338:	20000620 	.word	0x20000620

0800133c <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){

	if(mode == REGULAR_MODE){
 800133c:	2900      	cmp	r1, #0
 800133e:	d11e      	bne.n	800137e <Calculate_Next_Main_Oscillator_Values+0x42>

		params_ptr->index++;
 8001340:	89c3      	ldrh	r3, [r0, #14]
 8001342:	3301      	adds	r3, #1
 8001344:	b29b      	uxth	r3, r3
 8001346:	81c3      	strh	r3, [r0, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	89c2      	ldrh	r2, [r0, #14]
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	429a      	cmp	r2, r3
 8001350:	d053      	beq.n	80013fa <Calculate_Next_Main_Oscillator_Values+0xbe>
			params_ptr->index = 0;
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8001352:	89c3      	ldrh	r3, [r0, #14]
 8001354:	b29a      	uxth	r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d04c      	beq.n	80013f4 <Calculate_Next_Main_Oscillator_Values+0xb8>
			params_ptr->quadrant = FIRST_QUADRANT;
			params_ptr->halfcycle = FIRST_HALFCYCLE;
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 800135a:	89c3      	ldrh	r3, [r0, #14]
 800135c:	2b80      	cmp	r3, #128	@ 0x80
 800135e:	d04e      	beq.n	80013fe <Calculate_Next_Main_Oscillator_Values+0xc2>
			params_ptr->quadrant = SECOND_QUADRANT;
			params_ptr->halfcycle = FIRST_HALFCYCLE;
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	89c2      	ldrh	r2, [r0, #14]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	429a      	cmp	r2, r3
 8001368:	d051      	beq.n	800140e <Calculate_Next_Main_Oscillator_Values+0xd2>
			params_ptr->quadrant = FIRST_QUADRANT;
			params_ptr->halfcycle = SECOND_HALFCYCLE;
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 800136a:	23c0      	movs	r3, #192	@ 0xc0
 800136c:	89c2      	ldrh	r2, [r0, #14]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	429a      	cmp	r2, r3
 8001372:	d108      	bne.n	8001386 <Calculate_Next_Main_Oscillator_Values+0x4a>
			params_ptr->quadrant = SECOND_QUADRANT;
 8001374:	3b80      	subs	r3, #128	@ 0x80
 8001376:	3bff      	subs	r3, #255	@ 0xff
 8001378:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 800137a:	7403      	strb	r3, [r0, #16]
 800137c:	e003      	b.n	8001386 <Calculate_Next_Main_Oscillator_Values+0x4a>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 800137e:	2901      	cmp	r1, #1
 8001380:	d050      	beq.n	8001424 <Calculate_Next_Main_Oscillator_Values+0xe8>
			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
		}
	}
	else if(mode == STARTUP_MODE){
 8001382:	2902      	cmp	r1, #2
 8001384:	d032      	beq.n	80013ec <Calculate_Next_Main_Oscillator_Values+0xb0>
			params_ptr->halfcycle = FIRST_HALFCYCLE;
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8001386:	7983      	ldrb	r3, [r0, #6]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d117      	bne.n	80013bc <Calculate_Next_Main_Oscillator_Values+0x80>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 800138c:	89c2      	ldrh	r2, [r0, #14]
 800138e:	4b2f      	ldr	r3, [pc, #188]	@ (800144c <Calculate_Next_Main_Oscillator_Values+0x110>)
 8001390:	0052      	lsls	r2, r2, #1
 8001392:	5ad3      	ldrh	r3, [r2, r3]
 8001394:	8003      	strh	r3, [r0, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8001396:	7a83      	ldrb	r3, [r0, #10]
 8001398:	2b7f      	cmp	r3, #127	@ 0x7f
 800139a:	d01e      	beq.n	80013da <Calculate_Next_Main_Oscillator_Values+0x9e>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
		}
		else if(params_ptr->depth != 0){
 800139c:	7a83      	ldrb	r3, [r0, #10]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d021      	beq.n	80013e6 <Calculate_Next_Main_Oscillator_Values+0xaa>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 80013a2:	8803      	ldrh	r3, [r0, #0]
 80013a4:	7a82      	ldrb	r2, [r0, #10]
 80013a6:	435a      	muls	r2, r3
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 80013a8:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <Calculate_Next_Main_Oscillator_Values+0x114>)
 80013aa:	09d2      	lsrs	r2, r2, #7
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	8003      	strh	r3, [r0, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 80013b2:	8803      	ldrh	r3, [r0, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	8043      	strh	r3, [r0, #2]

	return 1;
}
 80013b8:	2001      	movs	r0, #1
 80013ba:	4770      	bx	lr
	else if(params_ptr->waveshape == SINE_MODE){
 80013bc:	7983      	ldrb	r3, [r0, #6]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d02a      	beq.n	8001418 <Calculate_Next_Main_Oscillator_Values+0xdc>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 80013c2:	7983      	ldrb	r3, [r0, #6]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d03a      	beq.n	800143e <Calculate_Next_Main_Oscillator_Values+0x102>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 80013c8:	7983      	ldrb	r3, [r0, #6]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d1e3      	bne.n	8001396 <Calculate_Next_Main_Oscillator_Values+0x5a>
 80013ce:	89c3      	ldrh	r3, [r0, #14]
 80013d0:	2bff      	cmp	r3, #255	@ 0xff
 80013d2:	d9e0      	bls.n	8001396 <Calculate_Next_Main_Oscillator_Values+0x5a>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 80013d4:	2300      	movs	r3, #0
 80013d6:	8003      	strh	r3, [r0, #0]
 80013d8:	e7dd      	b.n	8001396 <Calculate_Next_Main_Oscillator_Values+0x5a>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 80013da:	8802      	ldrh	r2, [r0, #0]
 80013dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <Calculate_Next_Main_Oscillator_Values+0x114>)
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	8003      	strh	r3, [r0, #0]
 80013e4:	e7e5      	b.n	80013b2 <Calculate_Next_Main_Oscillator_Values+0x76>
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <Calculate_Next_Main_Oscillator_Values+0x114>)
 80013e8:	8003      	strh	r3, [r0, #0]
 80013ea:	e7e2      	b.n	80013b2 <Calculate_Next_Main_Oscillator_Values+0x76>
		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80013ec:	89c3      	ldrh	r3, [r0, #14]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1c8      	bne.n	8001386 <Calculate_Next_Main_Oscillator_Values+0x4a>
			params_ptr->quadrant = FIRST_QUADRANT;
 80013f4:	7442      	strb	r2, [r0, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80013f6:	7402      	strb	r2, [r0, #16]
 80013f8:	e7c5      	b.n	8001386 <Calculate_Next_Main_Oscillator_Values+0x4a>
			params_ptr->index = 0;
 80013fa:	81c1      	strh	r1, [r0, #14]
 80013fc:	e7a9      	b.n	8001352 <Calculate_Next_Main_Oscillator_Values+0x16>
			params_ptr->quadrant = SECOND_QUADRANT;
 80013fe:	3b7f      	subs	r3, #127	@ 0x7f
 8001400:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8001402:	2300      	movs	r3, #0
 8001404:	7403      	strb	r3, [r0, #16]
 8001406:	e7be      	b.n	8001386 <Calculate_Next_Main_Oscillator_Values+0x4a>
			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8001408:	23a7      	movs	r3, #167	@ 0xa7
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	81c3      	strh	r3, [r0, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 800140e:	2300      	movs	r3, #0
 8001410:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8001412:	3301      	adds	r3, #1
 8001414:	7403      	strb	r3, [r0, #16]
 8001416:	e7b6      	b.n	8001386 <Calculate_Next_Main_Oscillator_Values+0x4a>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8001418:	89c2      	ldrh	r2, [r0, #14]
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <Calculate_Next_Main_Oscillator_Values+0x118>)
 800141c:	0052      	lsls	r2, r2, #1
 800141e:	5ad3      	ldrh	r3, [r2, r3]
 8001420:	8003      	strh	r3, [r0, #0]
 8001422:	e7b8      	b.n	8001396 <Calculate_Next_Main_Oscillator_Values+0x5a>
		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8001424:	7983      	ldrb	r3, [r0, #6]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d0ee      	beq.n	8001408 <Calculate_Next_Main_Oscillator_Values+0xcc>
 800142a:	7983      	ldrb	r3, [r0, #6]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0eb      	beq.n	8001408 <Calculate_Next_Main_Oscillator_Values+0xcc>
			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	81c3      	strh	r3, [r0, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8001436:	2300      	movs	r3, #0
 8001438:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 800143a:	7401      	strb	r1, [r0, #16]
 800143c:	e7a3      	b.n	8001386 <Calculate_Next_Main_Oscillator_Values+0x4a>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 800143e:	89c3      	ldrh	r3, [r0, #14]
 8001440:	2bff      	cmp	r3, #255	@ 0xff
 8001442:	d8c1      	bhi.n	80013c8 <Calculate_Next_Main_Oscillator_Values+0x8c>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8001444:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <Calculate_Next_Main_Oscillator_Values+0x114>)
 8001446:	8003      	strh	r3, [r0, #0]
 8001448:	e7a5      	b.n	8001396 <Calculate_Next_Main_Oscillator_Values+0x5a>
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	0800667c 	.word	0x0800667c
 8001450:	000003ff 	.word	0x000003ff
 8001454:	08006a7c 	.word	0x08006a7c

08001458 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8001458:	b530      	push	{r4, r5, lr}

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 800145a:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa8>)
 800145c:	5aca      	ldrh	r2, [r1, r3]
 800145e:	2a00      	cmp	r2, #0
 8001460:	d027      	beq.n	80014b2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x5a>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8001462:	5acb      	ldrh	r3, [r1, r3]
 8001464:	8802      	ldrh	r2, [r0, #0]
 8001466:	3b01      	subs	r3, #1
 8001468:	b292      	uxth	r2, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	525a      	strh	r2, [r3, r1]
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa8>)
 8001470:	5aca      	ldrh	r2, [r1, r3]
 8001472:	2a00      	cmp	r2, #0
 8001474:	d126      	bne.n	80014c4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x6c>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	52ca      	strh	r2, [r1, r3]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800147c:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xac>)
 800147e:	5a8b      	ldrh	r3, [r1, r2]
 8001480:	3b01      	subs	r3, #1
 8001482:	b29b      	uxth	r3, r3
 8001484:	528b      	strh	r3, [r1, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + delay_line_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8001486:	4c1e      	ldr	r4, [pc, #120]	@ (8001500 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa8>)
 8001488:	4a1f      	ldr	r2, [pc, #124]	@ (8001508 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb0>)
 800148a:	5b0b      	ldrh	r3, [r1, r4]
 800148c:	5a8d      	ldrh	r5, [r1, r2]
 800148e:	195b      	adds	r3, r3, r5
 8001490:	2580      	movs	r5, #128	@ 0x80
 8001492:	00ad      	lsls	r5, r5, #2
 8001494:	42ab      	cmp	r3, r5
 8001496:	dd21      	ble.n	80014dc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x84>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + delay_line_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8001498:	5b0b      	ldrh	r3, [r1, r4]
 800149a:	5a8a      	ldrh	r2, [r1, r2]
 800149c:	189b      	adds	r3, r3, r2
 800149e:	4a1b      	ldr	r2, [pc, #108]	@ (800150c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 80014a0:	4694      	mov	ip, r2
 80014a2:	4463      	add	r3, ip
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	18cb      	adds	r3, r1, r3
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	8083      	strh	r3, [r0, #4]
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + delay_line_ptr->duty_delay_line_read_pointer_offset);
		}

	return 1;
}
 80014ae:	2001      	movs	r0, #1
 80014b0:	bd30      	pop	{r4, r5, pc}
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	8803      	ldrh	r3, [r0, #0]
 80014b6:	00d2      	lsls	r2, r2, #3
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	528b      	strh	r3, [r1, r2]
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa8>)
 80014be:	5aca      	ldrh	r2, [r1, r3]
 80014c0:	2a00      	cmp	r2, #0
 80014c2:	d0d8      	beq.n	8001476 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x1e>
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 80014c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xac>)
 80014c6:	5a8c      	ldrh	r4, [r1, r2]
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d110      	bne.n	80014ee <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x96>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 80014cc:	2480      	movs	r4, #128	@ 0x80
 80014ce:	00a4      	lsls	r4, r4, #2
 80014d0:	528c      	strh	r4, [r1, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 80014d2:	5aca      	ldrh	r2, [r1, r3]
 80014d4:	3a01      	subs	r2, #1
 80014d6:	b292      	uxth	r2, r2
 80014d8:	52ca      	strh	r2, [r1, r3]
 80014da:	e7d4      	b.n	8001486 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + delay_line_ptr->duty_delay_line_read_pointer_offset);
 80014dc:	5b0b      	ldrh	r3, [r1, r4]
 80014de:	5a8a      	ldrh	r2, [r1, r2]
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	18c9      	adds	r1, r1, r3
 80014e6:	880b      	ldrh	r3, [r1, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	8083      	strh	r3, [r0, #4]
 80014ec:	e7df      	b.n	80014ae <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x56>
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 80014ee:	5acc      	ldrh	r4, [r1, r3]
 80014f0:	3c01      	subs	r4, #1
 80014f2:	b2a4      	uxth	r4, r4
 80014f4:	52cc      	strh	r4, [r1, r3]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 80014f6:	5a8b      	ldrh	r3, [r1, r2]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	528b      	strh	r3, [r1, r2]
 80014fe:	e7c2      	b.n	8001486 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
 8001500:	00000402 	.word	0x00000402
 8001504:	00000404 	.word	0x00000404
 8001508:	00000406 	.word	0x00000406
 800150c:	7ffffe00 	.word	0x7ffffe00

08001510 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, struct Delay_Line* delay_line_ptr, volatile uint16_t* ADCResultsDMA_ptr){

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8001510:	8813      	ldrh	r3, [r2, #0]
 8001512:	095b      	lsrs	r3, r3, #5

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8001514:	2b2a      	cmp	r3, #42	@ 0x2a
 8001516:	d814      	bhi.n	8001542 <Process_ADC_Conversion_Values+0x32>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8001518:	2300      	movs	r3, #0
 800151a:	7183      	strb	r3, [r0, #6]
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
		params_ptr->waveshape = SQUARE_MODE; //square wave
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800151c:	8853      	ldrh	r3, [r2, #2]
 800151e:	095b      	lsrs	r3, r3, #5
	temp_speed <<= 3; //convert to 10-bit
 8001520:	00db      	lsls	r3, r3, #3
	params_ptr->speed = temp_speed;
 8001522:	8103      	strh	r3, [r0, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8001524:	8893      	ldrh	r3, [r2, #4]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	b2db      	uxtb	r3, r3
		params_ptr->depth = temp_depth;
 800152a:	7283      	strb	r3, [r0, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800152c:	88d3      	ldrh	r3, [r2, #6]
 800152e:	095b      	lsrs	r3, r3, #5
		temp_symmetry <<= 1; //convert to 8-bit
 8001530:	005b      	lsls	r3, r3, #1
		params_ptr->symmetry = temp_symmetry;
 8001532:	8183      	strh	r3, [r0, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8001534:	8913      	ldrh	r3, [r2, #8]
	temp_delay <<= 2; //convert to 9-bit
	delay_line_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <Process_ADC_Conversion_Values+0x48>)
	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8001538:	095b      	lsrs	r3, r3, #5
	temp_delay <<= 2; //convert to 9-bit
 800153a:	009b      	lsls	r3, r3, #2

	return 1;
}
 800153c:	2001      	movs	r0, #1
	delay_line_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 800153e:	528b      	strh	r3, [r1, r2]
}
 8001540:	4770      	bx	lr
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8001542:	2b55      	cmp	r3, #85	@ 0x55
 8001544:	d802      	bhi.n	800154c <Process_ADC_Conversion_Values+0x3c>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8001546:	2301      	movs	r3, #1
 8001548:	7183      	strb	r3, [r0, #6]
 800154a:	e7e7      	b.n	800151c <Process_ADC_Conversion_Values+0xc>
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	d8e5      	bhi.n	800151c <Process_ADC_Conversion_Values+0xc>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8001550:	2302      	movs	r3, #2
 8001552:	7183      	strb	r3, [r0, #6]
 8001554:	e7e2      	b.n	800151c <Process_ADC_Conversion_Values+0xc>
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	00000406 	.word	0x00000406

0800155c <Startup>:
#include "startup.h"

#include "stm32g0xx_ll_lptim.h"

uint8_t Startup(void){
 800155c:	b570      	push	{r4, r5, r6, lr}

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800155e:	2007      	movs	r0, #7
 8001560:	f001 fad8 	bl	8002b14 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8001564:	2101      	movs	r1, #1
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <Startup+0xe4>)
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16


	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8001568:	20a0      	movs	r0, #160	@ 0xa0
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 800156a:	681a      	ldr	r2, [r3, #0]
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 800156c:	05c0      	lsls	r0, r0, #23
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 800156e:	68d3      	ldr	r3, [r2, #12]
 8001570:	430b      	orrs	r3, r1
 8001572:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8001574:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <Startup+0xe8>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68d3      	ldr	r3, [r2, #12]
 800157a:	430b      	orrs	r3, r1
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 800157c:	2180      	movs	r1, #128	@ 0x80
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 800157e:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8001580:	0089      	lsls	r1, r1, #2
 8001582:	2201      	movs	r2, #1
 8001584:	f001 fd9a 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8001588:	2180      	movs	r1, #128	@ 0x80
 800158a:	20a0      	movs	r0, #160	@ 0xa0
 800158c:	2201      	movs	r2, #1
 800158e:	0149      	lsls	r1, r1, #5
 8001590:	05c0      	lsls	r0, r0, #23
 8001592:	f001 fd93 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8001596:	20a0      	movs	r0, #160	@ 0xa0
 8001598:	2200      	movs	r2, #0
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	05c0      	lsls	r0, r0, #23
 800159e:	f001 fd8d 	bl	80030bc <HAL_GPIO_WritePin>


	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <Startup+0xec>)
 80015a4:	4929      	ldr	r1, [pc, #164]	@ (800164c <Startup+0xf0>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4829      	ldr	r0, [pc, #164]	@ (8001650 <Startup+0xf4>)
 80015aa:	f001 f8c5 	bl	8002738 <HAL_ADC_Start_DMA>

	//WAIT
	while(initial_ADC_conversion_complete == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 80015ae:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <Startup+0xf8>)
 80015b0:	7813      	ldrb	r3, [r2, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0fc      	beq.n	80015b0 <Startup+0x54>
 80015b6:	2200      	movs	r2, #0
 80015b8:	4c27      	ldr	r4, [pc, #156]	@ (8001658 <Startup+0xfc>)
 80015ba:	4d28      	ldr	r5, [pc, #160]	@ (800165c <Startup+0x100>)

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 80015bc:	4828      	ldr	r0, [pc, #160]	@ (8001660 <Startup+0x104>)
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80015be:	4929      	ldr	r1, [pc, #164]	@ (8001664 <Startup+0x108>)
 80015c0:	e009      	b.n	80015d6 <Startup+0x7a>
			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 80015c2:	02b3      	lsls	r3, r6, #10
 80015c4:	1b9b      	subs	r3, r3, r6
 80015c6:	121b      	asrs	r3, r3, #8
 80015c8:	1ac3      	subs	r3, r0, r3
 80015ca:	0056      	lsls	r6, r2, #1
 80015cc:	b29b      	uxth	r3, r3
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80015ce:	3201      	adds	r2, #1
			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 80015d0:	53ab      	strh	r3, [r5, r6]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80015d2:	428a      	cmp	r2, r1
 80015d4:	d00d      	beq.n	80015f2 <Startup+0x96>
		if(params.waveshape == SQUARE_MODE){
 80015d6:	79a3      	ldrb	r3, [r4, #6]
			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 80015d8:	7aa6      	ldrb	r6, [r4, #10]
		if(params.waveshape == SQUARE_MODE){
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d1f1      	bne.n	80015c2 <Startup+0x66>
			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 80015de:	02b3      	lsls	r3, r6, #10
 80015e0:	1b9b      	subs	r3, r3, r6
 80015e2:	11db      	asrs	r3, r3, #7
 80015e4:	1ac3      	subs	r3, r0, r3
 80015e6:	0056      	lsls	r6, r2, #1
 80015e8:	b29b      	uxth	r3, r3
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80015ea:	3201      	adds	r2, #1
			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 80015ec:	53ab      	strh	r3, [r5, r6]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80015ee:	428a      	cmp	r2, r1
 80015f0:	d1f1      	bne.n	80015d6 <Startup+0x7a>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 80015f2:	2102      	movs	r1, #2
 80015f4:	0020      	movs	r0, r4
 80015f6:	f7ff fea1 	bl	800133c <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80015fa:	0029      	movs	r1, r5
 80015fc:	0020      	movs	r0, r4
 80015fe:	f7ff ff2b 	bl	8001458 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8001602:	0020      	movs	r0, r4
 8001604:	f7ff fe82 	bl	800130c <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8001608:	220c      	movs	r2, #12
 800160a:	2104      	movs	r1, #4
 800160c:	4816      	ldr	r0, [pc, #88]	@ (8001668 <Startup+0x10c>)
 800160e:	f7ff fe3d 	bl	800128c <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8001612:	f7ff fe55 	bl	80012c0 <Start_Freq_Gen_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8001616:	f000 fc5d 	bl	8001ed4 <Global_Interrupt_Enable>

	//START UART RECEIVE
	Start_UART_Receive();
 800161a:	f7fe ff15 	bl	8000448 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 800161e:	f7ff fdfb 	bl	8001218 <Start_Input_Capture_Timer>


	#if TAPCLK_ON_OR_OFF == ON

		//ENABLE TAP-TEMPO SWITCH CHECKING
		HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8001622:	22fa      	movs	r2, #250	@ 0xfa
 8001624:	21fa      	movs	r1, #250	@ 0xfa
 8001626:	4811      	ldr	r0, [pc, #68]	@ (800166c <Startup+0x110>)
 8001628:	f001 ff72 	bl	8003510 <HAL_LPTIM_SetOnce_Start_IT>


	#endif

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800162c:	2007      	movs	r0, #7
 800162e:	f001 fa65 	bl	8002afc <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2140      	movs	r1, #64	@ 0x40
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <Startup+0x114>)
 8001638:	f001 fd40 	bl	80030bc <HAL_GPIO_WritePin>
	//DEBUG
	/*__HAL_TIM_SET_COUNTER(&htim14, 0);
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);*/

	return 1;
}
 800163c:	2001      	movs	r0, #1
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	20000798 	.word	0x20000798
 8001644:	20000854 	.word	0x20000854
 8001648:	08006678 	.word	0x08006678
 800164c:	20000be8 	.word	0x20000be8
 8001650:	20000ae4 	.word	0x20000ae4
 8001654:	20000be7 	.word	0x20000be7
 8001658:	20000bc4 	.word	0x20000bc4
 800165c:	20000004 	.word	0x20000004
 8001660:	000003ff 	.word	0x000003ff
 8001664:	00000201 	.word	0x00000201
 8001668:	20000620 	.word	0x20000620
 800166c:	20000440 	.word	0x20000440
 8001670:	50000400 	.word	0x50000400

08001674 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001674:	2201      	movs	r2, #1
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_MspInit+0x2c>)
{
 8001678:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800167c:	4311      	orrs	r1, r2
 800167e:	6419      	str	r1, [r3, #64]	@ 0x40
 8001680:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001682:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	9200      	str	r2, [sp, #0]
 8001688:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800168c:	0549      	lsls	r1, r1, #21
 800168e:	430a      	orrs	r2, r1
 8001690:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001694:	400b      	ands	r3, r1
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	b002      	add	sp, #8
 800169c:	4770      	bx	lr
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a4:	b530      	push	{r4, r5, lr}
 80016a6:	0004      	movs	r4, r0
 80016a8:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	2214      	movs	r2, #20
 80016ac:	2100      	movs	r1, #0
 80016ae:	a802      	add	r0, sp, #8
 80016b0:	f004 ffa0 	bl	80065f4 <memset>
  if(hadc->Instance==ADC1)
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <HAL_ADC_MspInit+0x90>)
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016bc:	b009      	add	sp, #36	@ 0x24
 80016be:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80016c0:	2180      	movs	r1, #128	@ 0x80
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <HAL_ADC_MspInit+0x94>)
 80016c4:	0349      	lsls	r1, r1, #13
 80016c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80016ca:	430a      	orrs	r2, r1
 80016cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80016ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 80016d2:	400a      	ands	r2, r1
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	2201      	movs	r2, #1
 80016da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016dc:	4311      	orrs	r1, r2
 80016de:	6359      	str	r1, [r3, #52]	@ 0x34
 80016e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	401a      	ands	r2, r3
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016ea:	2273      	movs	r2, #115	@ 0x73
 80016ec:	2303      	movs	r3, #3
 80016ee:	9202      	str	r2, [sp, #8]
 80016f0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f001 fbeb 	bl	8002ecc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80016f6:	4d11      	ldr	r5, [pc, #68]	@ (800173c <HAL_ADC_MspInit+0x98>)
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016fa:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 80016fc:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016fe:	2305      	movs	r3, #5
 8001700:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001702:	2300      	movs	r3, #0
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001704:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001706:	3280      	adds	r2, #128	@ 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001708:	60ab      	str	r3, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800170a:	60eb      	str	r3, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800170c:	616a      	str	r2, [r5, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800170e:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001710:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001712:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001714:	00d2      	lsls	r2, r2, #3
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001716:	019b      	lsls	r3, r3, #6
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001718:	0028      	movs	r0, r5
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800171a:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800171c:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800171e:	f001 fa23 	bl	8002b68 <HAL_DMA_Init>
 8001722:	2800      	cmp	r0, #0
 8001724:	d102      	bne.n	800172c <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001726:	6525      	str	r5, [r4, #80]	@ 0x50
 8001728:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800172a:	e7c7      	b.n	80016bc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800172c:	f7ff fa94 	bl	8000c58 <Error_Handler>
 8001730:	e7f9      	b.n	8001726 <HAL_ADC_MspInit+0x82>
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	40012400 	.word	0x40012400
 8001738:	40021000 	.word	0x40021000
 800173c:	20000a88 	.word	0x20000a88
 8001740:	40020008 	.word	0x40020008

08001744 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001744:	b510      	push	{r4, lr}
 8001746:	0004      	movs	r4, r0
 8001748:	b094      	sub	sp, #80	@ 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	2214      	movs	r2, #20
 800174c:	2100      	movs	r1, #0
 800174e:	a804      	add	r0, sp, #16
 8001750:	f004 ff50 	bl	80065f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001754:	2228      	movs	r2, #40	@ 0x28
 8001756:	2100      	movs	r1, #0
 8001758:	a80a      	add	r0, sp, #40	@ 0x28
 800175a:	f004 ff4b 	bl	80065f4 <memset>
  if(hlptim->Instance==LPTIM1)
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <HAL_LPTIM_MspInit+0xe4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d004      	beq.n	8001770 <HAL_LPTIM_MspInit+0x2c>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
  else if(hlptim->Instance==LPTIM2)
 8001766:	4a31      	ldr	r2, [pc, #196]	@ (800182c <HAL_LPTIM_MspInit+0xe8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d02b      	beq.n	80017c4 <HAL_LPTIM_MspInit+0x80>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 800176c:	b014      	add	sp, #80	@ 0x50
 800176e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001770:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001772:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001778:	f002 faf0 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 800177c:	2800      	cmp	r0, #0
 800177e:	d14c      	bne.n	800181a <HAL_LPTIM_MspInit+0xd6>
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_LPTIM_MspInit+0xec>)
 8001784:	0612      	lsls	r2, r2, #24
 8001786:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	482a      	ldr	r0, [pc, #168]	@ (8001834 <HAL_LPTIM_MspInit+0xf0>)
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800178a:	430a      	orrs	r2, r1
 800178c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800178e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001790:	0fd2      	lsrs	r2, r2, #31
 8001792:	07d2      	lsls	r2, r2, #31
 8001794:	9200      	str	r2, [sp, #0]
 8001796:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	2202      	movs	r2, #2
 800179a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800179c:	4311      	orrs	r1, r2
 800179e:	6359      	str	r1, [r3, #52]	@ 0x34
 80017a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	401a      	ands	r2, r3
 80017a6:	9201      	str	r2, [sp, #4]
 80017a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017aa:	2201      	movs	r2, #1
 80017ac:	2302      	movs	r3, #2
 80017ae:	9204      	str	r2, [sp, #16]
 80017b0:	9305      	str	r3, [sp, #20]
 80017b2:	2200      	movs	r2, #0
 80017b4:	2300      	movs	r3, #0
 80017b6:	9206      	str	r2, [sp, #24]
 80017b8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 80017ba:	2305      	movs	r3, #5
 80017bc:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f001 fb85 	bl	8002ecc <HAL_GPIO_Init>
 80017c2:	e7d3      	b.n	800176c <HAL_LPTIM_MspInit+0x28>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80017c4:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c6:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	f002 fac6 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d125      	bne.n	8001820 <HAL_LPTIM_MspInit+0xdc>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80017d4:	2180      	movs	r1, #128	@ 0x80
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <HAL_LPTIM_MspInit+0xec>)
 80017d8:	05c9      	lsls	r1, r1, #23
 80017da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80017de:	430a      	orrs	r2, r1
 80017e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80017e6:	400a      	ands	r2, r1
 80017e8:	9202      	str	r2, [sp, #8]
 80017ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	2201      	movs	r2, #1
 80017ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017f0:	4311      	orrs	r1, r2
 80017f2:	6359      	str	r1, [r3, #52]	@ 0x34
 80017f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	401a      	ands	r2, r3
 80017fa:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017fc:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001800:	2302      	movs	r3, #2
 8001802:	0052      	lsls	r2, r2, #1
 8001804:	9204      	str	r2, [sp, #16]
 8001806:	9305      	str	r3, [sp, #20]
 8001808:	2200      	movs	r2, #0
 800180a:	2300      	movs	r3, #0
 800180c:	9206      	str	r2, [sp, #24]
 800180e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8001810:	2305      	movs	r3, #5
 8001812:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f001 fb5a 	bl	8002ecc <HAL_GPIO_Init>
}
 8001818:	e7a8      	b.n	800176c <HAL_LPTIM_MspInit+0x28>
      Error_Handler();
 800181a:	f7ff fa1d 	bl	8000c58 <Error_Handler>
 800181e:	e7af      	b.n	8001780 <HAL_LPTIM_MspInit+0x3c>
      Error_Handler();
 8001820:	f7ff fa1a 	bl	8000c58 <Error_Handler>
 8001824:	e7d6      	b.n	80017d4 <HAL_LPTIM_MspInit+0x90>
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	40007c00 	.word	0x40007c00
 800182c:	40009400 	.word	0x40009400
 8001830:	40021000 	.word	0x40021000
 8001834:	50000400 	.word	0x50000400

08001838 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b510      	push	{r4, lr}
 800183a:	0004      	movs	r4, r0
 800183c:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	2214      	movs	r2, #20
 8001840:	2100      	movs	r1, #0
 8001842:	a808      	add	r0, sp, #32
 8001844:	f004 fed6 	bl	80065f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001848:	2228      	movs	r2, #40	@ 0x28
 800184a:	2100      	movs	r1, #0
 800184c:	a80e      	add	r0, sp, #56	@ 0x38
 800184e:	f004 fed1 	bl	80065f4 <memset>
  if(htim_base->Instance==TIM1)
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	4a4e      	ldr	r2, [pc, #312]	@ (8001990 <HAL_TIM_Base_MspInit+0x158>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d025      	beq.n	80018a6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800185a:	2280      	movs	r2, #128	@ 0x80
 800185c:	05d2      	lsls	r2, r2, #23
 800185e:	4293      	cmp	r3, r2
 8001860:	d034      	beq.n	80018cc <HAL_TIM_Base_MspInit+0x94>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
    }
  else if(htim_base->Instance==TIM3)
 8001862:	4a4c      	ldr	r2, [pc, #304]	@ (8001994 <HAL_TIM_Base_MspInit+0x15c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d057      	beq.n	8001918 <HAL_TIM_Base_MspInit+0xe0>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8001868:	4a4b      	ldr	r2, [pc, #300]	@ (8001998 <HAL_TIM_Base_MspInit+0x160>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d008      	beq.n	8001880 <HAL_TIM_Base_MspInit+0x48>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 800186e:	4a4b      	ldr	r2, [pc, #300]	@ (800199c <HAL_TIM_Base_MspInit+0x164>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d063      	beq.n	800193c <HAL_TIM_Base_MspInit+0x104>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8001874:	4a4a      	ldr	r2, [pc, #296]	@ (80019a0 <HAL_TIM_Base_MspInit+0x168>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d100      	bne.n	800187c <HAL_TIM_Base_MspInit+0x44>
 800187a:	e072      	b.n	8001962 <HAL_TIM_Base_MspInit+0x12a>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 800187c:	b018      	add	sp, #96	@ 0x60
 800187e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <HAL_TIM_Base_MspInit+0x16c>)
 8001884:	0289      	lsls	r1, r1, #10
 8001886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001888:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 800188a:	430a      	orrs	r2, r1
 800188c:	641a      	str	r2, [r3, #64]	@ 0x40
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001892:	400b      	ands	r3, r1
 8001894:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001896:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001898:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800189a:	f001 f905 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800189e:	2015      	movs	r0, #21
 80018a0:	f001 f92c 	bl	8002afc <HAL_NVIC_EnableIRQ>
 80018a4:	e7ea      	b.n	800187c <HAL_TIM_Base_MspInit+0x44>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80018a6:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a8:	a80e      	add	r0, sp, #56	@ 0x38
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80018aa:	039b      	lsls	r3, r3, #14
 80018ac:	930e      	str	r3, [sp, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ae:	f002 fa55 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d168      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b6:	2180      	movs	r1, #128	@ 0x80
 80018b8:	4b3a      	ldr	r3, [pc, #232]	@ (80019a4 <HAL_TIM_Base_MspInit+0x16c>)
 80018ba:	0109      	lsls	r1, r1, #4
 80018bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018be:	430a      	orrs	r2, r1
 80018c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	400b      	ands	r3, r1
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	9b01      	ldr	r3, [sp, #4]
 80018ca:	e7d7      	b.n	800187c <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018cc:	2201      	movs	r2, #1
 80018ce:	4b35      	ldr	r3, [pc, #212]	@ (80019a4 <HAL_TIM_Base_MspInit+0x16c>)
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80018d0:	2080      	movs	r0, #128	@ 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80018d4:	0200      	lsls	r0, r0, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d6:	4311      	orrs	r1, r2
 80018d8:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80018da:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80018dc:	4011      	ands	r1, r2
 80018de:	9102      	str	r1, [sp, #8]
 80018e0:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018e4:	4311      	orrs	r1, r2
 80018e6:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80018e8:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80018ec:	9008      	str	r0, [sp, #32]
 80018ee:	9109      	str	r1, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4013      	ands	r3, r2
 80018f2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80018f4:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018f8:	2302      	movs	r3, #2
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80018fa:	a908      	add	r1, sp, #32
 80018fc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 80018fe:	920a      	str	r2, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001900:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8001902:	f001 fae3 	bl	8002ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8001906:	2202      	movs	r2, #2
 8001908:	2102      	movs	r1, #2
 800190a:	200f      	movs	r0, #15
 800190c:	f001 f8cc 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001910:	200f      	movs	r0, #15
 8001912:	f001 f8f3 	bl	8002afc <HAL_NVIC_EnableIRQ>
 8001916:	e7b1      	b.n	800187c <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001918:	2302      	movs	r3, #2
 800191a:	4a22      	ldr	r2, [pc, #136]	@ (80019a4 <HAL_TIM_Base_MspInit+0x16c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800191c:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 800191e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001920:	4319      	orrs	r1, r3
 8001922:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001924:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001926:	2100      	movs	r1, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001928:	4013      	ands	r3, r2
 800192a:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001930:	f001 f8ba 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001934:	2010      	movs	r0, #16
 8001936:	f001 f8e1 	bl	8002afc <HAL_NVIC_EnableIRQ>
 800193a:	e79f      	b.n	800187c <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800193c:	2180      	movs	r1, #128	@ 0x80
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_TIM_Base_MspInit+0x16c>)
 8001940:	02c9      	lsls	r1, r1, #11
 8001942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8001944:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001946:	430a      	orrs	r2, r1
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 800194c:	2203      	movs	r2, #3
    __HAL_RCC_TIM17_CLK_ENABLE();
 800194e:	400b      	ands	r3, r1
 8001950:	9306      	str	r3, [sp, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8001952:	2103      	movs	r1, #3
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001954:	9b06      	ldr	r3, [sp, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8001956:	f001 f8a7 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800195a:	2016      	movs	r0, #22
 800195c:	f001 f8ce 	bl	8002afc <HAL_NVIC_EnableIRQ>
 8001960:	e78c      	b.n	800187c <HAL_TIM_Base_MspInit+0x44>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8001962:	2180      	movs	r1, #128	@ 0x80
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <HAL_TIM_Base_MspInit+0x16c>)
 8001966:	0209      	lsls	r1, r1, #8
 8001968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 800196a:	2013      	movs	r0, #19
      __HAL_RCC_TIM14_CLK_ENABLE();
 800196c:	430a      	orrs	r2, r1
 800196e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8001972:	2203      	movs	r2, #3
      __HAL_RCC_TIM14_CLK_ENABLE();
 8001974:	400b      	ands	r3, r1
 8001976:	9307      	str	r3, [sp, #28]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8001978:	2103      	movs	r1, #3
      __HAL_RCC_TIM14_CLK_ENABLE();
 800197a:	9b07      	ldr	r3, [sp, #28]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 800197c:	f001 f894 	bl	8002aa8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001980:	2013      	movs	r0, #19
 8001982:	f001 f8bb 	bl	8002afc <HAL_NVIC_EnableIRQ>
}
 8001986:	e779      	b.n	800187c <HAL_TIM_Base_MspInit+0x44>
      Error_Handler();
 8001988:	f7ff f966 	bl	8000c58 <Error_Handler>
 800198c:	e793      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x7e>
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	40012c00 	.word	0x40012c00
 8001994:	40000400 	.word	0x40000400
 8001998:	40014400 	.word	0x40014400
 800199c:	40014800 	.word	0x40014800
 80019a0:	40002000 	.word	0x40002000
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019a8:	b530      	push	{r4, r5, lr}
 80019aa:	0004      	movs	r4, r0
 80019ac:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	2214      	movs	r2, #20
 80019b0:	2100      	movs	r1, #0
 80019b2:	a802      	add	r0, sp, #8
 80019b4:	f004 fe1e 	bl	80065f4 <memset>
  if(htim->Instance==TIM1)
 80019b8:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <HAL_TIM_MspPostInit+0x6c>)
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019c0:	b009      	add	sp, #36	@ 0x24
 80019c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <HAL_TIM_MspPostInit+0x70>)
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80019ca:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80019ce:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	432a      	orrs	r2, r5
 80019d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80019d6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	402a      	ands	r2, r5
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019e0:	4322      	orrs	r2, r4
 80019e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 80019e6:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4023      	ands	r3, r4
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 80019ee:	2302      	movs	r3, #2
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	9202      	str	r2, [sp, #8]
 80019f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019f6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f001 fa68 	bl	8002ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 80019fc:	2308      	movs	r3, #8
 80019fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8001a02:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <HAL_TIM_MspPostInit+0x74>)
 8001a04:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a0c:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f001 fa5d 	bl	8002ecc <HAL_GPIO_Init>
}
 8001a12:	e7d5      	b.n	80019c0 <HAL_TIM_MspPostInit+0x18>
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	50000400 	.word	0x50000400

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b530      	push	{r4, r5, lr}
 8001a22:	0004      	movs	r4, r0
 8001a24:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	2214      	movs	r2, #20
 8001a28:	2100      	movs	r1, #0
 8001a2a:	a802      	add	r0, sp, #8
 8001a2c:	f004 fde2 	bl	80065f4 <memset>
  if(huart->Instance==USART2)
 8001a30:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a38:	b009      	add	sp, #36	@ 0x24
 8001a3a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3c:	2180      	movs	r1, #128	@ 0x80
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_UART_MspInit+0xd8>)
 8001a40:	0289      	lsls	r1, r1, #10
 8001a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001a44:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a46:	430a      	orrs	r2, r1
 8001a48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	9200      	str	r2, [sp, #0]
 8001a50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2201      	movs	r2, #1
 8001a54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a56:	4311      	orrs	r1, r2
 8001a58:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001a5a:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001a5e:	9002      	str	r0, [sp, #8]
 8001a60:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4013      	ands	r3, r2
 8001a66:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	05c0      	lsls	r0, r0, #23
 8001a6a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a70:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f001 fa2b 	bl	8002ecc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001a76:	4d21      	ldr	r5, [pc, #132]	@ (8001afc <HAL_UART_MspInit+0xdc>)
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <HAL_UART_MspInit+0xe0>)
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001a7c:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001a7e:	2334      	movs	r3, #52	@ 0x34
 8001a80:	606b      	str	r3, [r5, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60ab      	str	r3, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a86:	60eb      	str	r3, [r5, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a88:	616b      	str	r3, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8a:	61ab      	str	r3, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a8c:	61eb      	str	r3, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a8e:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a90:	0028      	movs	r0, r5
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a92:	015b      	lsls	r3, r3, #5
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a94:	612a      	str	r2, [r5, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a96:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a98:	f001 f866 	bl	8002b68 <HAL_DMA_Init>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d122      	bne.n	8001ae6 <HAL_UART_MspInit+0xc6>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001aa0:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <HAL_UART_MspInit+0xe4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001aa4:	50a5      	str	r5, [r4, r2]
 8001aa6:	62ac      	str	r4, [r5, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8001aa8:	4d17      	ldr	r5, [pc, #92]	@ (8001b08 <HAL_UART_MspInit+0xe8>)
 8001aaa:	602b      	str	r3, [r5, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001aac:	2335      	movs	r3, #53	@ 0x35
 8001aae:	606b      	str	r3, [r5, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab0:	3b25      	subs	r3, #37	@ 0x25
 8001ab2:	60ab      	str	r3, [r5, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60eb      	str	r3, [r5, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab8:	616b      	str	r3, [r5, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aba:	61ab      	str	r3, [r5, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001abc:	61eb      	str	r3, [r5, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001abe:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ac0:	0028      	movs	r0, r5
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ac2:	015b      	lsls	r3, r3, #5
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac4:	612a      	str	r2, [r5, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ac6:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ac8:	f001 f84e 	bl	8002b68 <HAL_DMA_Init>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d10d      	bne.n	8001aec <HAL_UART_MspInit+0xcc>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ad6:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8001ad8:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8001ada:	f000 ffe5 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ade:	201c      	movs	r0, #28
 8001ae0:	f001 f80c 	bl	8002afc <HAL_NVIC_EnableIRQ>
}
 8001ae4:	e7a8      	b.n	8001a38 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001ae6:	f7ff f8b7 	bl	8000c58 <Error_Handler>
 8001aea:	e7d9      	b.n	8001aa0 <HAL_UART_MspInit+0x80>
      Error_Handler();
 8001aec:	f7ff f8b4 	bl	8000c58 <Error_Handler>
 8001af0:	e7ee      	b.n	8001ad0 <HAL_UART_MspInit+0xb0>
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	40004400 	.word	0x40004400
 8001af8:	40021000 	.word	0x40021000
 8001afc:	200004f8 	.word	0x200004f8
 8001b00:	4002001c 	.word	0x4002001c
 8001b04:	40020030 	.word	0x40020030
 8001b08:	2000049c 	.word	0x2000049c

08001b0c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler>
 8001b0e:	46c0      	nop			@ (mov r8, r8)

08001b10 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <HardFault_Handler>
 8001b12:	46c0      	nop			@ (mov r8, r8)

08001b14 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b14:	4770      	bx	lr
 8001b16:	46c0      	nop			@ (mov r8, r8)

08001b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001b18:	4770      	bx	lr
 8001b1a:	46c0      	nop			@ (mov r8, r8)

08001b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 fa41 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bd10      	pop	{r4, pc}

08001b24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8001b26:	2080      	movs	r0, #128	@ 0x80
 8001b28:	f001 face 	bl	80030c8 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b2c:	bd10      	pop	{r4, pc}
 8001b2e:	46c0      	nop			@ (mov r8, r8)

08001b30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b32:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <DMA1_Channel1_IRQHandler+0xc>)
 8001b34:	f001 f96e 	bl	8002e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b38:	bd10      	pop	{r4, pc}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	20000a88 	.word	0x20000a88

08001b40 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001b40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b42:	4803      	ldr	r0, [pc, #12]	@ (8001b50 <DMA1_Channel2_3_IRQHandler+0x10>)
 8001b44:	f001 f966 	bl	8002e14 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001b4a:	f001 f963 	bl	8002e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001b4e:	bd10      	pop	{r4, pc}
 8001b50:	200004f8 	.word	0x200004f8
 8001b54:	2000049c 	.word	0x2000049c

08001b58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b5a:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <TIM2_IRQHandler+0xc>)
 8001b5c:	f002 ffae 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	20000798 	.word	0x20000798

08001b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b6a:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <TIM3_IRQHandler+0xc>)
 8001b6c:	f002 ffa6 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b70:	bd10      	pop	{r4, pc}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	200006dc 	.word	0x200006dc

08001b78 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001b78:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b7a:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <TIM16_IRQHandler+0xc>)
 8001b7c:	f002 ff9e 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001b80:	bd10      	pop	{r4, pc}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	20000854 	.word	0x20000854

08001b88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b8a:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <USART2_IRQHandler+0xc>)
 8001b8c:	f003 fff6 	bl	8005b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b90:	bd10      	pop	{r4, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	20000554 	.word	0x20000554

08001b98 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8001b98:	b510      	push	{r4, lr}
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001b9a:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <LPTIM1_IRQHandler+0xc>)
 8001b9c:	f001 fb40 	bl	8003220 <HAL_LPTIM_IRQHandler>
}
 8001ba0:	bd10      	pop	{r4, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	20000440 	.word	0x20000440

08001ba8 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8001ba8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001baa:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <TIM17_IRQHandler+0xc>)
 8001bac:	f002 ff86 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	20000910 	.word	0x20000910

08001bb8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001bb8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001bba:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <TIM14_IRQHandler+0xc>)
 8001bbc:	f002 ff7e 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001bc0:	bd10      	pop	{r4, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	200009cc 	.word	0x200009cc

08001bc8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
    }
    return 1;
}

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	46d6      	mov	lr, sl
 8001bcc:	464f      	mov	r7, r9
 8001bce:	4646      	mov	r6, r8
 8001bd0:	b5c0      	push	{r6, r7, lr}

			uint8_t pot_rotation_corrected = 0;
			enum Symmetry_Status symmetry_status = CW;

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8001bd2:	8982      	ldrh	r2, [r0, #12]
			else{ //adc is 128-255
				symmetry_status = CCW;
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8001bd4:	7983      	ldrb	r3, [r0, #6]
uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8001bd6:	0004      	movs	r4, r0
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8001bd8:	b292      	uxth	r2, r2
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d054      	beq.n	8001c88 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc0>
 8001bde:	7983      	ldrb	r3, [r0, #6]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d051      	beq.n	8001c88 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc0>

						symmetry_type_for_halfcycle = LENGTHEN;
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8001be4:	7983      	ldrb	r3, [r0, #6]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d100      	bne.n	8001bec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x24>
 8001bea:	e0ce      	b.n	8001d8a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1c2>
						symmetry_type_for_halfcycle = LENGTHEN;
					}
				}
			}

			if(symmetry_status == CW){
 8001bec:	2700      	movs	r7, #0
 8001bee:	2a7f      	cmp	r2, #127	@ 0x7f
 8001bf0:	d854      	bhi.n	8001c9c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd4>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8001bf2:	227f      	movs	r2, #127	@ 0x7f
 8001bf4:	89a3      	ldrh	r3, [r4, #12]
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	b2d2      	uxtb	r2, r2

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8001bfa:	8a65      	ldrh	r5, [r4, #18]
 8001bfc:	b2ab      	uxth	r3, r5
 8001bfe:	4698      	mov	r8, r3
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	1b5d      	subs	r5, r3, r5
 8001c06:	b2ad      	uxth	r5, r5

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8001c08:	436a      	muls	r2, r5
 8001c0a:	0056      	lsls	r6, r2, #1
 8001c0c:	18b6      	adds	r6, r6, r2
 8001c0e:	1076      	asrs	r6, r6, #1

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8001c10:	b2b2      	uxth	r2, r6
 8001c12:	0a12      	lsrs	r2, r2, #8
 8001c14:	4691      	mov	r9, r2


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001c16:	1aaa      	subs	r2, r5, r2

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8001c18:	444d      	add	r5, r9
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001c1a:	b292      	uxth	r2, r2


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001c1c:	0436      	lsls	r6, r6, #16
			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8001c1e:	b2ad      	uxth	r5, r5
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001c20:	4692      	mov	sl, r2
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001c22:	0c36      	lsrs	r6, r6, #16
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8001c24:	2dff      	cmp	r5, #255	@ 0xff
 8001c26:	d800      	bhi.n	8001c2a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62>
 8001c28:	e07f      	b.n	8001d2a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x162>
 8001c2a:	429d      	cmp	r5, r3
 8001c2c:	d100      	bne.n	8001c30 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x68>
 8001c2e:	e0db      	b.n	8001de8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x220>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001c30:	2108      	movs	r1, #8
 8001c32:	0030      	movs	r0, r6
 8001c34:	f000 f948 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001c38:	2880      	cmp	r0, #128	@ 0x80
 8001c3a:	d100      	bne.n	8001c3e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x76>
 8001c3c:	e0c1      	b.n	8001dc2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1fa>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001c3e:	2108      	movs	r1, #8
 8001c40:	0030      	movs	r0, r6
 8001c42:	f000 f941 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d040      	beq.n	8001ccc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x104>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001c4a:	2108      	movs	r1, #8
 8001c4c:	0030      	movs	r0, r6
 8001c4e:	f000 f93b 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001c52:	287f      	cmp	r0, #127	@ 0x7f
 8001c54:	d93a      	bls.n	8001ccc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x104>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001c56:	2108      	movs	r1, #8
 8001c58:	0030      	movs	r0, r6
 8001c5a:	f000 f935 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001c5e:	2880      	cmp	r0, #128	@ 0x80
 8001c60:	d900      	bls.n	8001c64 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8001c62:	e0ae      	b.n	8001dc2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1fa>
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8001c64:	2f00      	cmp	r7, #0
 8001c66:	d000      	beq.n	8001c6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa2>
 8001c68:	e0a6      	b.n	8001db8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f0>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	4652      	mov	r2, sl
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	82a3      	strh	r3, [r4, #20]
    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8001c76:	2320      	movs	r3, #32
 8001c78:	5ce2      	ldrb	r2, [r4, r3]
 8001c7a:	2a01      	cmp	r2, #1
 8001c7c:	d13b      	bne.n	8001cf6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12e>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8001c7e:	8b63      	ldrh	r3, [r4, #26]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	83a3      	strh	r3, [r4, #28]
 8001c86:	e03c      	b.n	8001d02 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x13a>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8001c88:	7c23      	ldrb	r3, [r4, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xdc>
 8001c8e:	7c63      	ldrb	r3, [r4, #17]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xdc>
					if(symmetry_status == CW){
 8001c94:	2700      	movs	r7, #0
 8001c96:	2a7f      	cmp	r2, #127	@ 0x7f
 8001c98:	d800      	bhi.n	8001c9c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd4>
 8001c9a:	e07d      	b.n	8001d98 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d0>
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8001c9c:	89a2      	ldrh	r2, [r4, #12]
 8001c9e:	3a80      	subs	r2, #128	@ 0x80
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	e7aa      	b.n	8001bfa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x32>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8001ca4:	7c23      	ldrb	r3, [r4, #16]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d05a      	beq.n	8001d60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x198>
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8001caa:	7c23      	ldrb	r3, [r4, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xee>
 8001cb0:	7c63      	ldrb	r3, [r4, #17]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d005      	beq.n	8001cc2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xfa>
 8001cb6:	7c23      	ldrb	r3, [r4, #16]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d197      	bne.n	8001bec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x24>
 8001cbc:	7c63      	ldrb	r3, [r4, #17]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d194      	bne.n	8001bec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x24>
						symmetry_type_for_halfcycle = LENGTHEN;
 8001cc2:	2701      	movs	r7, #1
					if(symmetry_status == CW){
 8001cc4:	2a7f      	cmp	r2, #127	@ 0x7f
 8001cc6:	d8e9      	bhi.n	8001c9c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd4>
 8001cc8:	2700      	movs	r7, #0
 8001cca:	e792      	b.n	8001bf2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2a>
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001ccc:	0028      	movs	r0, r5
 8001cce:	2101      	movs	r1, #1
 8001cd0:	f000 f8fa 	bl	8001ec8 <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001cd4:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = DO_NOTHING;
 8001cd6:	2320      	movs	r3, #32
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d145      	bne.n	8001d68 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1a0>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8001cdc:	2f00      	cmp	r7, #0
 8001cde:	d100      	bne.n	8001ce2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11a>
 8001ce0:	e094      	b.n	8001e0c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x244>
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	54e2      	strb	r2, [r4, r3]
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8001ce6:	33e0      	adds	r3, #224	@ 0xe0
 8001ce8:	1b5b      	subs	r3, r3, r5
 8001cea:	b29b      	uxth	r3, r3

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8001cec:	82a3      	strh	r3, [r4, #20]
    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8001cee:	2320      	movs	r3, #32
 8001cf0:	5ce2      	ldrb	r2, [r4, r3]
 8001cf2:	2a01      	cmp	r2, #1
 8001cf4:	d0c3      	beq.n	8001c7e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb6>
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8001cf6:	5ce3      	ldrb	r3, [r4, r3]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x13a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8001cfc:	8b63      	ldrh	r3, [r4, #26]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	83a3      	strh	r3, [r4, #28]
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	8aa2      	ldrh	r2, [r4, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	82e3      	strh	r3, [r4, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8001d0e:	8ae3      	ldrh	r3, [r4, #22]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;

    return 1;
}
 8001d10:	2001      	movs	r0, #1
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	8323      	strh	r3, [r4, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8001d18:	8ba3      	ldrh	r3, [r4, #28]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	83e3      	strh	r3, [r4, #30]
}
 8001d20:	bce0      	pop	{r5, r6, r7}
 8001d22:	46ba      	mov	sl, r7
 8001d24:	46b1      	mov	r9, r6
 8001d26:	46a8      	mov	r8, r5
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	0030      	movs	r0, r6
 8001d2e:	f000 f8cb 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001d32:	2880      	cmp	r0, #128	@ 0x80
 8001d34:	d135      	bne.n	8001da2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1da>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8001d36:	2320      	movs	r3, #32
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001d38:	2f00      	cmp	r7, #0
 8001d3a:	d12f      	bne.n	8001d9c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d4>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8001d3c:	54e7      	strb	r7, [r4, r3]
	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8001d3e:	89e0      	ldrh	r0, [r4, #14]
 8001d40:	2101      	movs	r1, #1
 8001d42:	b280      	uxth	r0, r0
 8001d44:	f000 f8c0 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001d48:	4643      	mov	r3, r8
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	3bff      	subs	r3, #255	@ 0xff
 8001d4e:	444b      	add	r3, r9
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d165      	bne.n	8001e22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x25a>
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8001d56:	3301      	adds	r3, #1
 8001d58:	33ff      	adds	r3, #255	@ 0xff
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	82a3      	strh	r3, [r4, #20]
 8001d5e:	e7c6      	b.n	8001cee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x126>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8001d60:	7c63      	ldrb	r3, [r4, #17]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d1a1      	bne.n	8001caa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
 8001d66:	e795      	b.n	8001c94 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xcc>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8001d68:	2f00      	cmp	r7, #0
 8001d6a:	d04f      	beq.n	8001e0c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x244>
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	54e2      	strb	r2, [r4, r3]
	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8001d70:	89e0      	ldrh	r0, [r4, #14]
 8001d72:	2101      	movs	r1, #1
 8001d74:	b280      	uxth	r0, r0
 8001d76:	f000 f8a7 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	d16f      	bne.n	8001e5e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x296>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	1b5b      	subs	r3, r3, r5
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	82a3      	strh	r3, [r4, #20]
 8001d88:	e7b1      	b.n	8001cee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x126>
				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8001d8a:	7c03      	ldrb	r3, [r0, #16]
 8001d8c:	b2df      	uxtb	r7, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d197      	bne.n	8001cc2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xfa>
					if(symmetry_status == CW){
 8001d92:	2a7f      	cmp	r2, #127	@ 0x7f
 8001d94:	d900      	bls.n	8001d98 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d0>
 8001d96:	e781      	b.n	8001c9c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd4>
						symmetry_type_for_halfcycle = LENGTHEN;
 8001d98:	2701      	movs	r7, #1
 8001d9a:	e72a      	b.n	8001bf2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2a>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8001da0:	e7e6      	b.n	8001d70 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1a8>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001da2:	2108      	movs	r1, #8
 8001da4:	0030      	movs	r0, r6
 8001da6:	f000 f88f 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d13e      	bne.n	8001e2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x264>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8001dae:	2320      	movs	r3, #32
 8001db0:	54e0      	strb	r0, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8001db2:	2f00      	cmp	r7, #0
 8001db4:	d100      	bne.n	8001db8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f0>
 8001db6:	e758      	b.n	8001c6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa2>
	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	1b5b      	subs	r3, r3, r5
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	e794      	b.n	8001cec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x124>
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001dc2:	3501      	adds	r5, #1
 8001dc4:	b2ad      	uxth	r5, r5
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001dc6:	0028      	movs	r0, r5
 8001dc8:	2101      	movs	r1, #1
 8001dca:	f000 f87d 	bl	8001ec8 <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001dce:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = DO_NOTHING;
 8001dd0:	2320      	movs	r3, #32
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	d122      	bne.n	8001e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x254>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8001dd6:	2f00      	cmp	r7, #0
 8001dd8:	d000      	beq.n	8001ddc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x214>
 8001dda:	e782      	b.n	8001ce2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11a>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8001ddc:	54e7      	strb	r7, [r4, r3]
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001dde:	4653      	mov	r3, sl
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	469a      	mov	sl, r3
 8001de6:	e740      	b.n	8001c6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa2>
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8001de8:	2108      	movs	r1, #8
 8001dea:	0030      	movs	r0, r6
 8001dec:	f000 f86c 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d09a      	beq.n	8001d2a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x162>
			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8001df4:	2108      	movs	r1, #8
 8001df6:	0030      	movs	r0, r6
 8001df8:	f000 f866 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d000      	beq.n	8001e02 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x23a>
 8001e00:	e716      	b.n	8001c30 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x68>
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8001e02:	2300      	movs	r3, #0
 8001e04:	2f00      	cmp	r7, #0
 8001e06:	d000      	beq.n	8001e0a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x242>
 8001e08:	e770      	b.n	8001cec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x124>
 8001e0a:	e72e      	b.n	8001c6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa2>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8001e0c:	54e7      	strb	r7, [r4, r3]
	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	4652      	mov	r2, sl
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	82a3      	strh	r3, [r4, #20]
 8001e1a:	e72c      	b.n	8001c76 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xae>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8001e1c:	2f00      	cmp	r7, #0
 8001e1e:	d1a5      	bne.n	8001d6c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1a4>
 8001e20:	e7dc      	b.n	8001ddc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x214>
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8001e22:	3302      	adds	r3, #2
 8001e24:	33ff      	adds	r3, #255	@ 0xff
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	82a3      	strh	r3, [r4, #20]
 8001e2a:	e760      	b.n	8001cee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x126>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001e2c:	2108      	movs	r1, #8
 8001e2e:	0030      	movs	r0, r6
 8001e30:	f000 f84a 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001e34:	287f      	cmp	r0, #127	@ 0x7f
 8001e36:	d806      	bhi.n	8001e46 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27e>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8001e3e:	2f00      	cmp	r7, #0
 8001e40:	d100      	bne.n	8001e44 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27c>
 8001e42:	e712      	b.n	8001c6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa2>
 8001e44:	e74f      	b.n	8001ce6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11e>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001e46:	2108      	movs	r1, #8
 8001e48:	0030      	movs	r0, r6
 8001e4a:	f000 f83d 	bl	8001ec8 <unsigned_bitwise_modulo>
 8001e4e:	2880      	cmp	r0, #128	@ 0x80
 8001e50:	d800      	bhi.n	8001e54 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x28c>
 8001e52:	e707      	b.n	8001c64 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8001e54:	2320      	movs	r3, #32
 8001e56:	2200      	movs	r2, #0
 8001e58:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8001e5a:	2f00      	cmp	r7, #0
 8001e5c:	d0bf      	beq.n	8001dde <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x216>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8001e5e:	23ff      	movs	r3, #255	@ 0xff
 8001e60:	1b5b      	subs	r3, r3, r5
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	e742      	b.n	8001cec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x124>
 8001e66:	46c0      	nop			@ (mov r8, r8)

08001e68 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e68:	4770      	bx	lr
 8001e6a:	46c0      	nop			@ (mov r8, r8)

08001e6c <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001e6c:	b510      	push	{r4, lr}

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8001e6e:	f002 fa77 	bl	8004360 <HAL_TIM_OC_Start_IT>
 8001e72:	1e04      	subs	r4, r0, #0
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8001e74:	d101      	bne.n	8001e7a <Start_OC_TIM+0xe>

		Error_Handler();
	}

	return ok;
}
 8001e76:	0020      	movs	r0, r4
 8001e78:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001e7a:	f7fe feed 	bl	8000c58 <Error_Handler>
 8001e7e:	e7fa      	b.n	8001e76 <Start_OC_TIM+0xa>

08001e80 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001e80:	b510      	push	{r4, lr}

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8001e82:	f002 faef 	bl	8004464 <HAL_TIM_OC_Stop_IT>
 8001e86:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 8001e88:	d101      	bne.n	8001e8e <Stop_OC_TIM+0xe>

		Error_Handler();
	}

	return ok;
}
 8001e8a:	0020      	movs	r0, r4
 8001e8c:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001e8e:	f7fe fee3 	bl	8000c58 <Error_Handler>
 8001e92:	e7fa      	b.n	8001e8a <Stop_OC_TIM+0xa>

08001e94 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	0005      	movs	r5, r0
    for (uint16_t d = 2; d * d <= x; d++) {
 8001e98:	2803      	cmp	r0, #3
 8001e9a:	d910      	bls.n	8001ebe <isPrime+0x2a>
        if (x % d == 0)
 8001e9c:	07c3      	lsls	r3, r0, #31
 8001e9e:	d510      	bpl.n	8001ec2 <isPrime+0x2e>
    for (uint16_t d = 2; d * d <= x; d++) {
 8001ea0:	2402      	movs	r4, #2
 8001ea2:	e006      	b.n	8001eb2 <isPrime+0x1e>
        if (x % d == 0)
 8001ea4:	0021      	movs	r1, r4
 8001ea6:	0028      	movs	r0, r5
 8001ea8:	f7fe f9b2 	bl	8000210 <__aeabi_uidivmod>
 8001eac:	b289      	uxth	r1, r1
 8001eae:	2900      	cmp	r1, #0
 8001eb0:	d007      	beq.n	8001ec2 <isPrime+0x2e>
    for (uint16_t d = 2; d * d <= x; d++) {
 8001eb2:	3401      	adds	r4, #1
 8001eb4:	b2a4      	uxth	r4, r4
 8001eb6:	0023      	movs	r3, r4
 8001eb8:	4363      	muls	r3, r4
 8001eba:	42ab      	cmp	r3, r5
 8001ebc:	ddf2      	ble.n	8001ea4 <isPrime+0x10>
            return NO;
    }
    return YES;
 8001ebe:	2001      	movs	r0, #1
}
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
            return NO;
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	e7fc      	b.n	8001ec0 <isPrime+0x2c>
 8001ec6:	46c0      	nop			@ (mov r8, r8)

08001ec8 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){

    return dividend & ((1 << base_2_exponent) - 1);
 8001ec8:	2301      	movs	r3, #1
 8001eca:	408b      	lsls	r3, r1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	4018      	ands	r0, r3
}
 8001ed0:	4770      	bx	lr
 8001ed2:	46c0      	nop			@ (mov r8, r8)

08001ed4 <Global_Interrupt_Enable>:
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed4:	b662      	cpsie	i

uint8_t Global_Interrupt_Enable(void){

	__enable_irq();
	return 1;
}
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	4770      	bx	lr
 8001eda:	46c0      	nop			@ (mov r8, r8)

08001edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001edc:	480d      	ldr	r0, [pc, #52]	@ (8001f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ede:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee0:	f7ff ffc2 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee4:	480c      	ldr	r0, [pc, #48]	@ (8001f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ee6:	490d      	ldr	r1, [pc, #52]	@ (8001f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <LoopForever+0xe>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001efc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f28 <LoopForever+0x16>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f0a:	f004 fb7b 	bl	8006604 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f0e:	f7ff f9a5 	bl	800125c <main>

08001f12 <LoopForever>:

LoopForever:
  b LoopForever
 8001f12:	e7fe      	b.n	8001f12 <LoopForever>
  ldr   r0, =_estack
 8001f14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8001f20:	080071d8 	.word	0x080071d8
  ldr r2, =_sbss
 8001f24:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8001f28:	20000bf8 	.word	0x20000bf8

08001f2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_IRQHandler>
	...

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f32:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <HAL_InitTick+0x40>)
{
 8001f34:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001f36:	7819      	ldrb	r1, [r3, #0]
 8001f38:	2900      	cmp	r1, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f3c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f40:	20fa      	movs	r0, #250	@ 0xfa
 8001f42:	0080      	lsls	r0, r0, #2
 8001f44:	f7fe f8de 	bl	8000104 <__udivsi3>
 8001f48:	4d0a      	ldr	r5, [pc, #40]	@ (8001f74 <HAL_InitTick+0x44>)
 8001f4a:	0001      	movs	r1, r0
 8001f4c:	6828      	ldr	r0, [r5, #0]
 8001f4e:	f7fe f8d9 	bl	8000104 <__udivsi3>
 8001f52:	f000 fdef 	bl	8002b34 <HAL_SYSTICK_Config>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	2c03      	cmp	r4, #3
 8001f5c:	d8ee      	bhi.n	8001f3c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5e:	3801      	subs	r0, #1
 8001f60:	2200      	movs	r2, #0
 8001f62:	0021      	movs	r1, r4
 8001f64:	f000 fda0 	bl	8002aa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <HAL_InitTick+0x48>)
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	601c      	str	r4, [r3, #0]
  return status;
 8001f6e:	e7e6      	b.n	8001f3e <HAL_InitTick+0xe>
 8001f70:	20000410 	.word	0x20000410
 8001f74:	2000040c 	.word	0x2000040c
 8001f78:	20000414 	.word	0x20000414

08001f7c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	4a08      	ldr	r2, [pc, #32]	@ (8001fa0 <HAL_Init+0x24>)
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	6811      	ldr	r1, [r2, #0]
{
 8001f84:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f86:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f88:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8c:	f7ff ffd0 	bl	8001f30 <HAL_InitTick>
 8001f90:	1e04      	subs	r4, r0, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001f94:	2401      	movs	r4, #1
}
 8001f96:	0020      	movs	r0, r4
 8001f98:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8001f9a:	f7ff fb6b 	bl	8001674 <HAL_MspInit>
 8001f9e:	e7fa      	b.n	8001f96 <HAL_Init+0x1a>
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001fa4:	4a03      	ldr	r2, [pc, #12]	@ (8001fb4 <HAL_IncTick+0x10>)
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <HAL_IncTick+0x14>)
 8001fa8:	6811      	ldr	r1, [r2, #0]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	185b      	adds	r3, r3, r1
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	4770      	bx	lr
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	20000bf4 	.word	0x20000bf4
 8001fb8:	20000410 	.word	0x20000410

08001fbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fbc:	4b01      	ldr	r3, [pc, #4]	@ (8001fc4 <HAL_GetTick+0x8>)
 8001fbe:	6818      	ldr	r0, [r3, #0]
}
 8001fc0:	4770      	bx	lr
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	20000bf4 	.word	0x20000bf4

08001fc8 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fc8:	2150      	movs	r1, #80	@ 0x50
{
 8001fca:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fcc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8001fce:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fd0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001fd2:	4211      	tst	r1, r2
 8001fd4:	d10d      	bne.n	8001ff2 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4313      	orrs	r3, r2
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001fde:	22c0      	movs	r2, #192	@ 0xc0
 8001fe0:	6583      	str	r3, [r0, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fe2:	6803      	ldr	r3, [r0, #0]
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	68d9      	ldr	r1, [r3, #12]
 8001fe8:	4211      	tst	r1, r2
 8001fea:	d00d      	beq.n	8002008 <ADC_DMAConvCplt+0x40>
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8001fec:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8001fee:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ff0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ff2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001ff4:	06d2      	lsls	r2, r2, #27
 8001ff6:	d502      	bpl.n	8001ffe <ADC_DMAConvCplt+0x36>
      hadc->ErrorCallback(hadc);
 8001ff8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8001ffa:	4798      	blx	r3
 8001ffc:	e7f8      	b.n	8001ff0 <ADC_DMAConvCplt+0x28>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ffe:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002000:	0018      	movs	r0, r3
 8002002:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002004:	4790      	blx	r2
}
 8002006:	e7f3      	b.n	8001ff0 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002008:	7e82      	ldrb	r2, [r0, #26]
 800200a:	2a00      	cmp	r2, #0
 800200c:	d1ee      	bne.n	8001fec <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	0712      	lsls	r2, r2, #28
 8002012:	d5eb      	bpl.n	8001fec <ADC_DMAConvCplt+0x24>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	0752      	lsls	r2, r2, #29
 8002018:	d508      	bpl.n	800202c <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201a:	2220      	movs	r2, #32
 800201c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800201e:	4313      	orrs	r3, r2
 8002020:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002024:	3a1f      	subs	r2, #31
 8002026:	4313      	orrs	r3, r2
 8002028:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800202a:	e7df      	b.n	8001fec <ADC_DMAConvCplt+0x24>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800202c:	210c      	movs	r1, #12
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	438a      	bics	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002034:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002036:	4a03      	ldr	r2, [pc, #12]	@ (8002044 <ADC_DMAConvCplt+0x7c>)
 8002038:	4013      	ands	r3, r2
 800203a:	3204      	adds	r2, #4
 800203c:	32ff      	adds	r2, #255	@ 0xff
 800203e:	4313      	orrs	r3, r2
 8002040:	6583      	str	r3, [r0, #88]	@ 0x58
 8002042:	e7d3      	b.n	8001fec <ADC_DMAConvCplt+0x24>
 8002044:	fffffefe 	.word	0xfffffefe

08002048 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002048:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204a:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 800204c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800204e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002050:	bd10      	pop	{r4, pc}
 8002052:	46c0      	nop			@ (mov r8, r8)

08002054 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002054:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002056:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002058:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800205a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800205c:	4313      	orrs	r3, r2
 800205e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002060:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002062:	3a3c      	subs	r2, #60	@ 0x3c
 8002064:	4313      	orrs	r3, r2
 8002066:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8002068:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800206a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800206c:	bd10      	pop	{r4, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)

08002070 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002070:	4770      	bx	lr
 8002072:	46c0      	nop			@ (mov r8, r8)

08002074 <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8002074:	4770      	bx	lr
 8002076:	46c0      	nop			@ (mov r8, r8)

08002078 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8002078:	4770      	bx	lr
 800207a:	46c0      	nop			@ (mov r8, r8)

0800207c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 800207c:	4770      	bx	lr
 800207e:	46c0      	nop			@ (mov r8, r8)

08002080 <HAL_ADC_Init>:
{
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	46d6      	mov	lr, sl
 8002084:	464f      	mov	r7, r9
 8002086:	4646      	mov	r6, r8
  __IO uint32_t wait_loop_index = 0UL;
 8002088:	2300      	movs	r3, #0
{
 800208a:	b5c0      	push	{r6, r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8002090:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002092:	d044      	beq.n	800211e <HAL_ADC_Init+0x9e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002094:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_ADC_Init+0x4c>
    if (hadc->MspInitCallback == NULL)
 800209a:	2280      	movs	r2, #128	@ 0x80
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800209c:	4b89      	ldr	r3, [pc, #548]	@ (80022c4 <HAL_ADC_Init+0x244>)
 800209e:	6643      	str	r3, [r0, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80020a0:	4b89      	ldr	r3, [pc, #548]	@ (80022c8 <HAL_ADC_Init+0x248>)
 80020a2:	6683      	str	r3, [r0, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80020a4:	4b89      	ldr	r3, [pc, #548]	@ (80022cc <HAL_ADC_Init+0x24c>)
 80020a6:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80020a8:	4b89      	ldr	r3, [pc, #548]	@ (80022d0 <HAL_ADC_Init+0x250>)
 80020aa:	6703      	str	r3, [r0, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80020ac:	4b89      	ldr	r3, [pc, #548]	@ (80022d4 <HAL_ADC_Init+0x254>)
 80020ae:	6743      	str	r3, [r0, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80020b0:	4b89      	ldr	r3, [pc, #548]	@ (80022d8 <HAL_ADC_Init+0x258>)
 80020b2:	6783      	str	r3, [r0, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80020b4:	4b89      	ldr	r3, [pc, #548]	@ (80022dc <HAL_ADC_Init+0x25c>)
 80020b6:	67c3      	str	r3, [r0, #124]	@ 0x7c
    if (hadc->MspInitCallback == NULL)
 80020b8:	5883      	ldr	r3, [r0, r2]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d100      	bne.n	80020c0 <HAL_ADC_Init+0x40>
 80020be:	e0e3      	b.n	8002288 <HAL_ADC_Init+0x208>
    hadc->MspInitCallback(hadc);
 80020c0:	0020      	movs	r0, r4
 80020c2:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 80020c4:	2300      	movs	r3, #0
    hadc->Lock = HAL_UNLOCKED;
 80020c6:	2254      	movs	r2, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80020c8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80020ca:	54a3      	strb	r3, [r4, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020cc:	2380      	movs	r3, #128	@ 0x80
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ce:	6825      	ldr	r5, [r4, #0]
 80020d0:	055b      	lsls	r3, r3, #21
 80020d2:	68aa      	ldr	r2, [r5, #8]
 80020d4:	421a      	tst	r2, r3
 80020d6:	d115      	bne.n	8002104 <HAL_ADC_Init+0x84>
  MODIFY_REG(ADCx->CR,
 80020d8:	68aa      	ldr	r2, [r5, #8]
 80020da:	4981      	ldr	r1, [pc, #516]	@ (80022e0 <HAL_ADC_Init+0x260>)
 80020dc:	400a      	ands	r2, r1
 80020de:	4313      	orrs	r3, r2
 80020e0:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e2:	4b80      	ldr	r3, [pc, #512]	@ (80022e4 <HAL_ADC_Init+0x264>)
 80020e4:	4980      	ldr	r1, [pc, #512]	@ (80022e8 <HAL_ADC_Init+0x268>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	f7fe f80c 	bl	8000104 <__udivsi3>
 80020ec:	3001      	adds	r0, #1
 80020ee:	0040      	lsls	r0, r0, #1
 80020f0:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80020f2:	9b01      	ldr	r3, [sp, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_ADC_Init+0x84>
      wait_loop_index--;
 80020f8:	9b01      	ldr	r3, [sp, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80020fe:	9b01      	ldr	r3, [sp, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f9      	bne.n	80020f8 <HAL_ADC_Init+0x78>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002104:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002106:	2000      	movs	r0, #0
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	d400      	bmi.n	800210e <HAL_ADC_Init+0x8e>
 800210c:	e09d      	b.n	800224a <HAL_ADC_Init+0x1ca>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210e:	68ab      	ldr	r3, [r5, #8]
 8002110:	075b      	lsls	r3, r3, #29
 8002112:	d50b      	bpl.n	800212c <HAL_ADC_Init+0xac>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002114:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	2210      	movs	r2, #16
 8002118:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800211a:	4313      	orrs	r3, r2
 800211c:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800211e:	2001      	movs	r0, #1
}
 8002120:	b002      	add	sp, #8
 8002122:	bce0      	pop	{r5, r6, r7}
 8002124:	46ba      	mov	sl, r7
 8002126:	46b1      	mov	r9, r6
 8002128:	46a8      	mov	r8, r5
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800212c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800212e:	06db      	lsls	r3, r3, #27
 8002130:	d4f1      	bmi.n	8002116 <HAL_ADC_Init+0x96>
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002134:	4a6d      	ldr	r2, [pc, #436]	@ (80022ec <HAL_ADC_Init+0x26c>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002136:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8002138:	4013      	ands	r3, r2
 800213a:	3206      	adds	r2, #6
 800213c:	32ff      	adds	r2, #255	@ 0xff
 800213e:	4313      	orrs	r3, r2
 8002140:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002142:	68ab      	ldr	r3, [r5, #8]
 8002144:	07db      	lsls	r3, r3, #31
 8002146:	d45c      	bmi.n	8002202 <HAL_ADC_Init+0x182>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002148:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800214a:	68a2      	ldr	r2, [r4, #8]
 800214c:	1e7b      	subs	r3, r7, #1
 800214e:	419f      	sbcs	r7, r3
 8002150:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002152:	7ea6      	ldrb	r6, [r4, #26]
 8002154:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002156:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002158:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800215a:	039b      	lsls	r3, r3, #14
 800215c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800215e:	7e63      	ldrb	r3, [r4, #25]
 8002160:	03db      	lsls	r3, r3, #15
 8002162:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002164:	0373      	lsls	r3, r6, #13
 8002166:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002168:	2900      	cmp	r1, #0
 800216a:	da00      	bge.n	800216e <HAL_ADC_Init+0xee>
 800216c:	e098      	b.n	80022a0 <HAL_ADC_Init+0x220>
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	039b      	lsls	r3, r3, #14
 8002172:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002174:	232c      	movs	r3, #44	@ 0x2c
 8002176:	5ce3      	ldrb	r3, [r4, r3]
 8002178:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800217a:	4313      	orrs	r3, r2
 800217c:	433b      	orrs	r3, r7
 800217e:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002180:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002182:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002184:	5de2      	ldrb	r2, [r4, r7]
 8002186:	2a01      	cmp	r2, #1
 8002188:	d100      	bne.n	800218c <HAL_ADC_Init+0x10c>
 800218a:	e08d      	b.n	80022a8 <HAL_ADC_Init+0x228>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800218e:	2a00      	cmp	r2, #0
 8002190:	d005      	beq.n	800219e <HAL_ADC_Init+0x11e>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002192:	26e0      	movs	r6, #224	@ 0xe0
 8002194:	0076      	lsls	r6, r6, #1
 8002196:	4032      	ands	r2, r6
 8002198:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800219a:	4332      	orrs	r2, r6
 800219c:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 800219e:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 80021a0:	68ea      	ldr	r2, [r5, #12]
 80021a2:	4e53      	ldr	r6, [pc, #332]	@ (80022f0 <HAL_ADC_Init+0x270>)
 80021a4:	4032      	ands	r2, r6
 80021a6:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021a8:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 80021aa:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021ac:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 80021ae:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021b0:	0fb3      	lsrs	r3, r6, #30
 80021b2:	079b      	lsls	r3, r3, #30
 80021b4:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80021b6:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021b8:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80021ba:	2f01      	cmp	r7, #1
 80021bc:	d109      	bne.n	80021d2 <HAL_ADC_Init+0x152>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80021be:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80021c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021c2:	433b      	orrs	r3, r7
 80021c4:	431a      	orrs	r2, r3
 80021c6:	4653      	mov	r3, sl
 80021c8:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 80021ca:	433a      	orrs	r2, r7
 80021cc:	431a      	orrs	r2, r3
 80021ce:	4663      	mov	r3, ip
 80021d0:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 80021d2:	692b      	ldr	r3, [r5, #16]
 80021d4:	4f47      	ldr	r7, [pc, #284]	@ (80022f4 <HAL_ADC_Init+0x274>)
 80021d6:	403b      	ands	r3, r7
 80021d8:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80021da:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80021dc:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80021de:	0073      	lsls	r3, r6, #1
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	05d2      	lsls	r2, r2, #23
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00c      	beq.n	8002202 <HAL_ADC_Init+0x182>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	061b      	lsls	r3, r3, #24
 80021ec:	429e      	cmp	r6, r3
 80021ee:	d008      	beq.n	8002202 <HAL_ADC_Init+0x182>
        MODIFY_REG(ADC1_COMMON->CCR,
 80021f0:	4a41      	ldr	r2, [pc, #260]	@ (80022f8 <HAL_ADC_Init+0x278>)
 80021f2:	4f42      	ldr	r7, [pc, #264]	@ (80022fc <HAL_ADC_Init+0x27c>)
 80021f4:	6813      	ldr	r3, [r2, #0]
 80021f6:	403b      	ands	r3, r7
 80021f8:	27f0      	movs	r7, #240	@ 0xf0
 80021fa:	03bf      	lsls	r7, r7, #14
 80021fc:	403e      	ands	r6, r7
 80021fe:	4333      	orrs	r3, r6
 8002200:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 8002202:	2607      	movs	r6, #7
 8002204:	2770      	movs	r7, #112	@ 0x70
 8002206:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002208:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800220a:	43b3      	bics	r3, r6
 800220c:	4313      	orrs	r3, r2
 800220e:	616b      	str	r3, [r5, #20]
 8002210:	696e      	ldr	r6, [r5, #20]
 8002212:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002214:	43be      	bics	r6, r7
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4333      	orrs	r3, r6
 800221a:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800221c:	2900      	cmp	r1, #0
 800221e:	d122      	bne.n	8002266 <HAL_ADC_Init+0x1e6>
      SET_BIT(hadc->Instance->CHSELR,
 8002220:	2310      	movs	r3, #16
 8002222:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002224:	425b      	negs	r3, r3
 8002226:	430b      	orrs	r3, r1
 8002228:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800222a:	2307      	movs	r3, #7
 800222c:	6969      	ldr	r1, [r5, #20]
 800222e:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002230:	429a      	cmp	r2, r3
 8002232:	d02c      	beq.n	800228e <HAL_ADC_Init+0x20e>
      ADC_STATE_CLR_SET(hadc->State,
 8002234:	2212      	movs	r2, #18
 8002236:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002238:	4393      	bics	r3, r2
 800223a:	3a02      	subs	r2, #2
 800223c:	4313      	orrs	r3, r2
 800223e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002242:	3a0f      	subs	r2, #15
 8002244:	4313      	orrs	r3, r2
 8002246:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8002248:	e769      	b.n	800211e <HAL_ADC_Init+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	2210      	movs	r2, #16
 800224c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800224e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002250:	4313      	orrs	r3, r2
 8002252:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002254:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002256:	3a0f      	subs	r2, #15
 8002258:	4313      	orrs	r3, r2
 800225a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800225c:	68ab      	ldr	r3, [r5, #8]
 800225e:	075b      	lsls	r3, r3, #29
 8002260:	d400      	bmi.n	8002264 <HAL_ADC_Init+0x1e4>
 8002262:	e763      	b.n	800212c <HAL_ADC_Init+0xac>
 8002264:	e756      	b.n	8002114 <HAL_ADC_Init+0x94>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	039b      	lsls	r3, r3, #14
 800226a:	4299      	cmp	r1, r3
 800226c:	d1dd      	bne.n	800222a <HAL_ADC_Init+0x1aa>
      MODIFY_REG(hadc->Instance->CHSELR,
 800226e:	211c      	movs	r1, #28
 8002270:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002272:	69e3      	ldr	r3, [r4, #28]
 8002274:	3b01      	subs	r3, #1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4019      	ands	r1, r3
 800227a:	2310      	movs	r3, #16
 800227c:	425b      	negs	r3, r3
 800227e:	408b      	lsls	r3, r1
 8002280:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002282:	430b      	orrs	r3, r1
 8002284:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002286:	e7d0      	b.n	800222a <HAL_ADC_Init+0x1aa>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_ADC_Init+0x280>)
 800228a:	5083      	str	r3, [r0, r2]
 800228c:	e718      	b.n	80020c0 <HAL_ADC_Init+0x40>
      ADC_CLEAR_ERRORCODE(hadc);
 800228e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002290:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002292:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002294:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002296:	4393      	bics	r3, r2
 8002298:	3a02      	subs	r2, #2
 800229a:	4313      	orrs	r3, r2
 800229c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800229e:	e73f      	b.n	8002120 <HAL_ADC_Init+0xa0>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022a0:	004b      	lsls	r3, r1, #1
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	469c      	mov	ip, r3
 80022a6:	e765      	b.n	8002174 <HAL_ADC_Init+0xf4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022a8:	2e00      	cmp	r6, #0
 80022aa:	d103      	bne.n	80022b4 <HAL_ADC_Init+0x234>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	0252      	lsls	r2, r2, #9
 80022b0:	4313      	orrs	r3, r2
 80022b2:	e76b      	b.n	800218c <HAL_ADC_Init+0x10c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b4:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 80022b6:	433e      	orrs	r6, r7
 80022b8:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 80022bc:	4332      	orrs	r2, r6
 80022be:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80022c0:	e764      	b.n	800218c <HAL_ADC_Init+0x10c>
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	08002075 	.word	0x08002075
 80022c8:	08002079 	.word	0x08002079
 80022cc:	0800207d 	.word	0x0800207d
 80022d0:	08002071 	.word	0x08002071
 80022d4:	08002a9d 	.word	0x08002a9d
 80022d8:	08002aa1 	.word	0x08002aa1
 80022dc:	08002aa5 	.word	0x08002aa5
 80022e0:	6fffffe8 	.word	0x6fffffe8
 80022e4:	2000040c 	.word	0x2000040c
 80022e8:	00030d40 	.word	0x00030d40
 80022ec:	fffffefd 	.word	0xfffffefd
 80022f0:	ffde0201 	.word	0xffde0201
 80022f4:	1ffffc02 	.word	0x1ffffc02
 80022f8:	40012708 	.word	0x40012708
 80022fc:	ffc3ffff 	.word	0xffc3ffff
 8002300:	080016a5 	.word	0x080016a5

08002304 <HAL_ADC_RegisterCallback>:
  if (pCallback == NULL)
 8002304:	2a00      	cmp	r2, #0
 8002306:	d00f      	beq.n	8002328 <HAL_ADC_RegisterCallback+0x24>
  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8002308:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800230a:	07db      	lsls	r3, r3, #31
 800230c:	d505      	bpl.n	800231a <HAL_ADC_RegisterCallback+0x16>
    switch (CallbackID)
 800230e:	290a      	cmp	r1, #10
 8002310:	d80a      	bhi.n	8002328 <HAL_ADC_RegisterCallback+0x24>
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <HAL_ADC_RegisterCallback+0x6c>)
 8002314:	0089      	lsls	r1, r1, #2
 8002316:	585b      	ldr	r3, [r3, r1]
 8002318:	469f      	mov	pc, r3
  else if (HAL_ADC_STATE_RESET == hadc->State)
 800231a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <HAL_ADC_RegisterCallback+0x24>
    switch (CallbackID)
 8002320:	2909      	cmp	r1, #9
 8002322:	d00b      	beq.n	800233c <HAL_ADC_RegisterCallback+0x38>
 8002324:	290a      	cmp	r1, #10
 8002326:	d005      	beq.n	8002334 <HAL_ADC_RegisterCallback+0x30>
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002328:	2210      	movs	r2, #16
 800232a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800232c:	4313      	orrs	r3, r2
 800232e:	65c3      	str	r3, [r0, #92]	@ 0x5c
    return HAL_ERROR;
 8002330:	2001      	movs	r0, #1
}
 8002332:	4770      	bx	lr
        hadc->MspDeInitCallback = pCallback;
 8002334:	2384      	movs	r3, #132	@ 0x84
 8002336:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2000      	movs	r0, #0
 800233a:	e7fa      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
        hadc->MspInitCallback = pCallback;
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2000      	movs	r0, #0
 8002342:	e7f6      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
        hadc->ErrorCallback = pCallback;
 8002344:	6702      	str	r2, [r0, #112]	@ 0x70
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2000      	movs	r0, #0
 8002348:	e7f3      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindow2Callback = pCallback;
 800234a:	6742      	str	r2, [r0, #116]	@ 0x74
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2000      	movs	r0, #0
 800234e:	e7f0      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindow3Callback = pCallback;
 8002350:	6782      	str	r2, [r0, #120]	@ 0x78
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2000      	movs	r0, #0
 8002354:	e7ed      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
        hadc->EndOfSamplingCallback = pCallback;
 8002356:	67c2      	str	r2, [r0, #124]	@ 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2000      	movs	r0, #0
 800235a:	e7ea      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
        hadc->ConvHalfCpltCallback = pCallback;
 800235c:	6682      	str	r2, [r0, #104]	@ 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2000      	movs	r0, #0
 8002360:	e7e7      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindowCallback = pCallback;
 8002362:	66c2      	str	r2, [r0, #108]	@ 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8002364:	2000      	movs	r0, #0
 8002366:	e7e4      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
        hadc->ConvCpltCallback = pCallback;
 8002368:	6642      	str	r2, [r0, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 800236a:	2000      	movs	r0, #0
 800236c:	e7e1      	b.n	8002332 <HAL_ADC_RegisterCallback+0x2e>
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	08006edc 	.word	0x08006edc

08002374 <HAL_ADC_ConfigChannel>:
{
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	46de      	mov	lr, fp
 8002378:	4657      	mov	r7, sl
 800237a:	464e      	mov	r6, r9
 800237c:	4645      	mov	r5, r8
  __IO uint32_t wait_loop_index = 0UL;
 800237e:	2300      	movs	r3, #0
{
 8002380:	0004      	movs	r4, r0
 8002382:	b5e0      	push	{r5, r6, r7, lr}
 8002384:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8002386:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8002388:	3354      	adds	r3, #84	@ 0x54
 800238a:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800238c:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 800238e:	2a01      	cmp	r2, #1
 8002390:	d100      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x20>
 8002392:	e09a      	b.n	80024ca <HAL_ADC_ConfigChannel+0x156>
 8002394:	2201      	movs	r2, #1
 8002396:	54e2      	strb	r2, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	3203      	adds	r2, #3
 800239c:	689e      	ldr	r6, [r3, #8]
 800239e:	4232      	tst	r2, r6
 80023a0:	d00e      	beq.n	80023c0 <HAL_ADC_ConfigChannel+0x4c>
    tmp_hal_status = HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80023a6:	321c      	adds	r2, #28
 80023a8:	4313      	orrs	r3, r2
 80023aa:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80023ac:	2354      	movs	r3, #84	@ 0x54
 80023ae:	2200      	movs	r2, #0
 80023b0:	54e2      	strb	r2, [r4, r3]
}
 80023b2:	b005      	add	sp, #20
 80023b4:	bcf0      	pop	{r4, r5, r6, r7}
 80023b6:	46bb      	mov	fp, r7
 80023b8:	46b2      	mov	sl, r6
 80023ba:	46a9      	mov	r9, r5
 80023bc:	46a0      	mov	r8, r4
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80023c0:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023c2:	4390      	bics	r0, r2
 80023c4:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80023c6:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 80023c8:	2e02      	cmp	r6, #2
 80023ca:	d05e      	beq.n	800248a <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80023cc:	0347      	lsls	r7, r0, #13
 80023ce:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023d0:	2780      	movs	r7, #128	@ 0x80
 80023d2:	9500      	str	r5, [sp, #0]
 80023d4:	063f      	lsls	r7, r7, #24
 80023d6:	45bc      	cmp	ip, r7
 80023d8:	d053      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80023da:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 80023dc:	46bb      	mov	fp, r7
 80023de:	271f      	movs	r7, #31
 80023e0:	46b8      	mov	r8, r7
 80023e2:	4037      	ands	r7, r6
 80023e4:	46ba      	mov	sl, r7
 80023e6:	270f      	movs	r7, #15
 80023e8:	4655      	mov	r5, sl
 80023ea:	40af      	lsls	r7, r5
 80023ec:	43fd      	mvns	r5, r7
 80023ee:	46bc      	mov	ip, r7
 80023f0:	9501      	str	r5, [sp, #4]
 80023f2:	465f      	mov	r7, fp
 80023f4:	4665      	mov	r5, ip
 80023f6:	43af      	bics	r7, r5
 80023f8:	9d00      	ldr	r5, [sp, #0]
 80023fa:	46b9      	mov	r9, r7
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	d166      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x15a>
 8002400:	4645      	mov	r5, r8
 8002402:	0e82      	lsrs	r2, r0, #26
 8002404:	4015      	ands	r5, r2
 8002406:	002a      	movs	r2, r5
 8002408:	4655      	mov	r5, sl
 800240a:	40aa      	lsls	r2, r5
 800240c:	464d      	mov	r5, r9
 800240e:	4315      	orrs	r5, r2
 8002410:	46a9      	mov	r9, r5
 8002412:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002414:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002416:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002418:	69e2      	ldr	r2, [r4, #28]
 800241a:	3601      	adds	r6, #1
 800241c:	4296      	cmp	r6, r2
 800241e:	d808      	bhi.n	8002432 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 8002420:	4656      	mov	r6, sl
 8002422:	0082      	lsls	r2, r0, #2
 8002424:	0f12      	lsrs	r2, r2, #28
 8002426:	40b2      	lsls	r2, r6
 8002428:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800242a:	9e01      	ldr	r6, [sp, #4]
 800242c:	4035      	ands	r5, r6
 800242e:	432a      	orrs	r2, r5
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8002432:	0205      	lsls	r5, r0, #8
 8002434:	688a      	ldr	r2, [r1, #8]
 8002436:	0029      	movs	r1, r5
 8002438:	695e      	ldr	r6, [r3, #20]
 800243a:	402a      	ands	r2, r5
 800243c:	4d66      	ldr	r5, [pc, #408]	@ (80025d8 <HAL_ADC_ConfigChannel+0x264>)
 800243e:	438e      	bics	r6, r1
 8002440:	402a      	ands	r2, r5
 8002442:	4332      	orrs	r2, r6
 8002444:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002446:	2800      	cmp	r0, #0
 8002448:	db01      	blt.n	800244e <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244a:	2000      	movs	r0, #0
 800244c:	e7ae      	b.n	80023ac <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800244e:	21e0      	movs	r1, #224	@ 0xe0
 8002450:	4d62      	ldr	r5, [pc, #392]	@ (80025dc <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002452:	4a63      	ldr	r2, [pc, #396]	@ (80025e0 <HAL_ADC_ConfigChannel+0x26c>)
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	0449      	lsls	r1, r1, #17
 8002458:	4019      	ands	r1, r3
 800245a:	4290      	cmp	r0, r2
 800245c:	d04c      	beq.n	80024f8 <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800245e:	4a61      	ldr	r2, [pc, #388]	@ (80025e4 <HAL_ADC_ConfigChannel+0x270>)
 8002460:	4290      	cmp	r0, r2
 8002462:	d040      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002464:	4a60      	ldr	r2, [pc, #384]	@ (80025e8 <HAL_ADC_ConfigChannel+0x274>)
 8002466:	4290      	cmp	r0, r2
 8002468:	d1ef      	bne.n	800244a <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800246a:	2280      	movs	r2, #128	@ 0x80
 800246c:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800246e:	4213      	tst	r3, r2
 8002470:	d1eb      	bne.n	800244a <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002472:	682b      	ldr	r3, [r5, #0]
 8002474:	485d      	ldr	r0, [pc, #372]	@ (80025ec <HAL_ADC_ConfigChannel+0x278>)
 8002476:	4003      	ands	r3, r0
 8002478:	430b      	orrs	r3, r1
 800247a:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247c:	2000      	movs	r0, #0
 800247e:	602a      	str	r2, [r5, #0]
 8002480:	e794      	b.n	80023ac <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002484:	432a      	orrs	r2, r5
 8002486:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002488:	e7d3      	b.n	8002432 <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800248a:	2280      	movs	r2, #128	@ 0x80
 800248c:	0612      	lsls	r2, r2, #24
 800248e:	4594      	cmp	ip, r2
 8002490:	d104      	bne.n	800249c <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002492:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002494:	0341      	lsls	r1, r0, #13
 8002496:	0b49      	lsrs	r1, r1, #13
 8002498:	438a      	bics	r2, r1
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800249c:	2800      	cmp	r0, #0
 800249e:	dad4      	bge.n	800244a <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024a0:	4a4e      	ldr	r2, [pc, #312]	@ (80025dc <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a2:	494f      	ldr	r1, [pc, #316]	@ (80025e0 <HAL_ADC_ConfigChannel+0x26c>)
 80024a4:	6813      	ldr	r3, [r2, #0]
 80024a6:	4288      	cmp	r0, r1
 80024a8:	d023      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80024aa:	494e      	ldr	r1, [pc, #312]	@ (80025e4 <HAL_ADC_ConfigChannel+0x270>)
 80024ac:	4288      	cmp	r0, r1
 80024ae:	d04a      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80024b0:	494d      	ldr	r1, [pc, #308]	@ (80025e8 <HAL_ADC_ConfigChannel+0x274>)
 80024b2:	4288      	cmp	r0, r1
 80024b4:	d1c9      	bne.n	800244a <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b6:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	0440      	lsls	r0, r0, #17
 80024bc:	4003      	ands	r3, r0
 80024be:	484b      	ldr	r0, [pc, #300]	@ (80025ec <HAL_ADC_ConfigChannel+0x278>)
 80024c0:	4001      	ands	r1, r0
 80024c2:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c4:	2000      	movs	r0, #0
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e770      	b.n	80023ac <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 80024ca:	2002      	movs	r0, #2
 80024cc:	e771      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024ce:	2501      	movs	r5, #1
 80024d0:	4205      	tst	r5, r0
 80024d2:	d19e      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x9e>
 80024d4:	2702      	movs	r7, #2
 80024d6:	4207      	tst	r7, r0
 80024d8:	d02d      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x1c2>
 80024da:	4652      	mov	r2, sl
 80024dc:	4095      	lsls	r5, r2
 80024de:	464a      	mov	r2, r9
 80024e0:	432a      	orrs	r2, r5
 80024e2:	4691      	mov	r9, r2
 80024e4:	e795      	b.n	8002412 <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024e6:	2280      	movs	r2, #128	@ 0x80
 80024e8:	0452      	lsls	r2, r2, #17
 80024ea:	4213      	tst	r3, r2
 80024ec:	d0c1      	beq.n	8002472 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ee:	2000      	movs	r0, #0
 80024f0:	e75c      	b.n	80023ac <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f2:	20a0      	movs	r0, #160	@ 0xa0
 80024f4:	6811      	ldr	r1, [r2, #0]
 80024f6:	e7e0      	b.n	80024ba <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024fc:	4213      	tst	r3, r2
 80024fe:	d1a4      	bne.n	800244a <HAL_ADC_ConfigChannel+0xd6>
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	483a      	ldr	r0, [pc, #232]	@ (80025ec <HAL_ADC_ConfigChannel+0x278>)
 8002504:	4003      	ands	r3, r0
 8002506:	430b      	orrs	r3, r1
 8002508:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800250a:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_ADC_ConfigChannel+0x27c>)
 800250c:	602a      	str	r2, [r5, #0]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	4938      	ldr	r1, [pc, #224]	@ (80025f4 <HAL_ADC_ConfigChannel+0x280>)
 8002512:	f7fd fdf7 	bl	8000104 <__udivsi3>
 8002516:	3001      	adds	r0, #1
 8002518:	0043      	lsls	r3, r0, #1
 800251a:	181b      	adds	r3, r3, r0
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8002520:	9b03      	ldr	r3, [sp, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d091      	beq.n	800244a <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 8002526:	9b03      	ldr	r3, [sp, #12]
 8002528:	3b01      	subs	r3, #1
 800252a:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 800252c:	9b03      	ldr	r3, [sp, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f9      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002532:	2000      	movs	r0, #0
 8002534:	e73a      	b.n	80023ac <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002536:	4202      	tst	r2, r0
 8002538:	d009      	beq.n	800254e <HAL_ADC_ConfigChannel+0x1da>
 800253a:	4652      	mov	r2, sl
 800253c:	4097      	lsls	r7, r2
 800253e:	464a      	mov	r2, r9
 8002540:	433a      	orrs	r2, r7
 8002542:	4691      	mov	r9, r2
 8002544:	e765      	b.n	8002412 <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002546:	20c0      	movs	r0, #192	@ 0xc0
 8002548:	6811      	ldr	r1, [r2, #0]
 800254a:	0400      	lsls	r0, r0, #16
 800254c:	e7b6      	b.n	80024bc <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800254e:	0702      	lsls	r2, r0, #28
 8002550:	d501      	bpl.n	8002556 <HAL_ADC_ConfigChannel+0x1e2>
 8002552:	2203      	movs	r2, #3
 8002554:	e758      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 8002556:	06c2      	lsls	r2, r0, #27
 8002558:	d501      	bpl.n	800255e <HAL_ADC_ConfigChannel+0x1ea>
 800255a:	2204      	movs	r2, #4
 800255c:	e754      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 800255e:	0682      	lsls	r2, r0, #26
 8002560:	d501      	bpl.n	8002566 <HAL_ADC_ConfigChannel+0x1f2>
 8002562:	2205      	movs	r2, #5
 8002564:	e750      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 8002566:	0642      	lsls	r2, r0, #25
 8002568:	d501      	bpl.n	800256e <HAL_ADC_ConfigChannel+0x1fa>
 800256a:	2206      	movs	r2, #6
 800256c:	e74c      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 800256e:	0602      	lsls	r2, r0, #24
 8002570:	d501      	bpl.n	8002576 <HAL_ADC_ConfigChannel+0x202>
 8002572:	2207      	movs	r2, #7
 8002574:	e748      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 8002576:	05c2      	lsls	r2, r0, #23
 8002578:	d501      	bpl.n	800257e <HAL_ADC_ConfigChannel+0x20a>
 800257a:	2208      	movs	r2, #8
 800257c:	e744      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 800257e:	0582      	lsls	r2, r0, #22
 8002580:	d501      	bpl.n	8002586 <HAL_ADC_ConfigChannel+0x212>
 8002582:	2209      	movs	r2, #9
 8002584:	e740      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 8002586:	0542      	lsls	r2, r0, #21
 8002588:	d501      	bpl.n	800258e <HAL_ADC_ConfigChannel+0x21a>
 800258a:	220a      	movs	r2, #10
 800258c:	e73c      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 800258e:	0502      	lsls	r2, r0, #20
 8002590:	d501      	bpl.n	8002596 <HAL_ADC_ConfigChannel+0x222>
 8002592:	220b      	movs	r2, #11
 8002594:	e738      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 8002596:	04c2      	lsls	r2, r0, #19
 8002598:	d501      	bpl.n	800259e <HAL_ADC_ConfigChannel+0x22a>
 800259a:	220c      	movs	r2, #12
 800259c:	e734      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 800259e:	0482      	lsls	r2, r0, #18
 80025a0:	d501      	bpl.n	80025a6 <HAL_ADC_ConfigChannel+0x232>
 80025a2:	220d      	movs	r2, #13
 80025a4:	e730      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 80025a6:	0442      	lsls	r2, r0, #17
 80025a8:	d501      	bpl.n	80025ae <HAL_ADC_ConfigChannel+0x23a>
 80025aa:	220e      	movs	r2, #14
 80025ac:	e72c      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 80025ae:	0402      	lsls	r2, r0, #16
 80025b0:	d504      	bpl.n	80025bc <HAL_ADC_ConfigChannel+0x248>
 80025b2:	465a      	mov	r2, fp
 80025b4:	4665      	mov	r5, ip
 80025b6:	432a      	orrs	r2, r5
 80025b8:	4691      	mov	r9, r2
 80025ba:	e72a      	b.n	8002412 <HAL_ADC_ConfigChannel+0x9e>
 80025bc:	03c2      	lsls	r2, r0, #15
 80025be:	d501      	bpl.n	80025c4 <HAL_ADC_ConfigChannel+0x250>
 80025c0:	2210      	movs	r2, #16
 80025c2:	e721      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 80025c4:	0382      	lsls	r2, r0, #14
 80025c6:	d501      	bpl.n	80025cc <HAL_ADC_ConfigChannel+0x258>
 80025c8:	2211      	movs	r2, #17
 80025ca:	e71d      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 80025cc:	0342      	lsls	r2, r0, #13
 80025ce:	d400      	bmi.n	80025d2 <HAL_ADC_ConfigChannel+0x25e>
 80025d0:	e71f      	b.n	8002412 <HAL_ADC_ConfigChannel+0x9e>
 80025d2:	2212      	movs	r2, #18
 80025d4:	e718      	b.n	8002408 <HAL_ADC_ConfigChannel+0x94>
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	07ffff00 	.word	0x07ffff00
 80025dc:	40012708 	.word	0x40012708
 80025e0:	b0001000 	.word	0xb0001000
 80025e4:	b8004000 	.word	0xb8004000
 80025e8:	b4002000 	.word	0xb4002000
 80025ec:	fe3fffff 	.word	0xfe3fffff
 80025f0:	2000040c 	.word	0x2000040c
 80025f4:	00030d40 	.word	0x00030d40

080025f8 <ADC_ConversionStop>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80025f8:	6802      	ldr	r2, [r0, #0]
{
 80025fa:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025fc:	6893      	ldr	r3, [r2, #8]
 80025fe:	0004      	movs	r4, r0
 8002600:	075b      	lsls	r3, r3, #29
 8002602:	d516      	bpl.n	8002632 <ADC_ConversionStop+0x3a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002604:	6893      	ldr	r3, [r2, #8]
 8002606:	079b      	lsls	r3, r3, #30
 8002608:	d515      	bpl.n	8002636 <ADC_ConversionStop+0x3e>
    tickstart = HAL_GetTick();
 800260a:	f7ff fcd7 	bl	8001fbc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800260e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002610:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	075b      	lsls	r3, r3, #29
 8002616:	d50c      	bpl.n	8002632 <ADC_ConversionStop+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002618:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800261a:	f7ff fccf 	bl	8001fbc <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800261e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002620:	1b80      	subs	r0, r0, r6
 8002622:	2802      	cmp	r0, #2
 8002624:	d902      	bls.n	800262c <ADC_ConversionStop+0x34>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	4215      	tst	r5, r2
 800262a:	d112      	bne.n	8002652 <ADC_ConversionStop+0x5a>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	421d      	tst	r5, r3
 8002630:	d1f3      	bne.n	800261a <ADC_ConversionStop+0x22>
  return HAL_OK;
 8002632:	2000      	movs	r0, #0
}
 8002634:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8002636:	6893      	ldr	r3, [r2, #8]
 8002638:	490b      	ldr	r1, [pc, #44]	@ (8002668 <ADC_ConversionStop+0x70>)
 800263a:	400b      	ands	r3, r1
 800263c:	2110      	movs	r1, #16
 800263e:	430b      	orrs	r3, r1
 8002640:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002642:	f7ff fcbb 	bl	8001fbc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002646:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002648:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	075b      	lsls	r3, r3, #29
 800264e:	d4e3      	bmi.n	8002618 <ADC_ConversionStop+0x20>
 8002650:	e7ef      	b.n	8002632 <ADC_ConversionStop+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	2210      	movs	r2, #16
 8002654:	6da3      	ldr	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002658:	4313      	orrs	r3, r2
 800265a:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800265e:	3a0f      	subs	r2, #15
 8002660:	4313      	orrs	r3, r2
 8002662:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8002664:	e7e6      	b.n	8002634 <ADC_ConversionStop+0x3c>
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	7fffffe8 	.word	0x7fffffe8

0800266c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 800266c:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800266e:	2201      	movs	r2, #1
{
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002672:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002674:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002676:	6803      	ldr	r3, [r0, #0]
{
 8002678:	0004      	movs	r4, r0
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	420a      	tst	r2, r1
 800267e:	d11f      	bne.n	80026c0 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002680:	6898      	ldr	r0, [r3, #8]
 8002682:	4928      	ldr	r1, [pc, #160]	@ (8002724 <ADC_Enable+0xb8>)
 8002684:	4208      	tst	r0, r1
 8002686:	d11e      	bne.n	80026c6 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8002688:	6899      	ldr	r1, [r3, #8]
 800268a:	4827      	ldr	r0, [pc, #156]	@ (8002728 <ADC_Enable+0xbc>)
 800268c:	4001      	ands	r1, r0
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002692:	4b26      	ldr	r3, [pc, #152]	@ (800272c <ADC_Enable+0xc0>)
 8002694:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	d50f      	bpl.n	80026ba <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269a:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <ADC_Enable+0xc4>)
 800269c:	4925      	ldr	r1, [pc, #148]	@ (8002734 <ADC_Enable+0xc8>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	f7fd fd30 	bl	8000104 <__udivsi3>
 80026a4:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80026a6:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80026a8:	9b01      	ldr	r3, [sp, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <ADC_Enable+0x4e>
        wait_loop_index--;
 80026ae:	9b01      	ldr	r3, [sp, #4]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80026b4:	9b01      	ldr	r3, [sp, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026ba:	7e63      	ldrb	r3, [r4, #25]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10b      	bne.n	80026d8 <ADC_Enable+0x6c>
  return HAL_OK;
 80026c0:	2000      	movs	r0, #0
}
 80026c2:	b003      	add	sp, #12
 80026c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c6:	2110      	movs	r1, #16
 80026c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80026ca:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026cc:	430b      	orrs	r3, r1
 80026ce:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80026d2:	4313      	orrs	r3, r2
 80026d4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80026d6:	e7f4      	b.n	80026c2 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 80026d8:	f7ff fc70 	bl	8001fbc <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026dc:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80026de:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	07d2      	lsls	r2, r2, #31
 80026e4:	d4ec      	bmi.n	80026c0 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026e6:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 80026e8:	4f0f      	ldr	r7, [pc, #60]	@ (8002728 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	4215      	tst	r5, r2
 80026ee:	d103      	bne.n	80026f8 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	403a      	ands	r2, r7
 80026f4:	432a      	orrs	r2, r5
 80026f6:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026f8:	f7ff fc60 	bl	8001fbc <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026fc:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026fe:	1b80      	subs	r0, r0, r6
 8002700:	2802      	cmp	r0, #2
 8002702:	d902      	bls.n	800270a <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4215      	tst	r5, r2
 8002708:	d003      	beq.n	8002712 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4215      	tst	r5, r2
 800270e:	d0ec      	beq.n	80026ea <ADC_Enable+0x7e>
 8002710:	e7d6      	b.n	80026c0 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	2210      	movs	r2, #16
 8002714:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002716:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002718:	4313      	orrs	r3, r2
 800271a:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800271e:	432b      	orrs	r3, r5
 8002720:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8002722:	e7ce      	b.n	80026c2 <ADC_Enable+0x56>
 8002724:	80000017 	.word	0x80000017
 8002728:	7fffffe8 	.word	0x7fffffe8
 800272c:	40012708 	.word	0x40012708
 8002730:	2000040c 	.word	0x2000040c
 8002734:	00030d40 	.word	0x00030d40

08002738 <HAL_ADC_Start_DMA>:
{
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273a:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800273c:	6805      	ldr	r5, [r0, #0]
{
 800273e:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002740:	68ae      	ldr	r6, [r5, #8]
 8002742:	4688      	mov	r8, r1
 8002744:	0017      	movs	r7, r2
    __HAL_LOCK(hadc);
 8002746:	2002      	movs	r0, #2
{
 8002748:	b500      	push	{lr}
 800274a:	0776      	lsls	r6, r6, #29
 800274c:	d414      	bmi.n	8002778 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 800274e:	2254      	movs	r2, #84	@ 0x54
 8002750:	5ca3      	ldrb	r3, [r4, r2]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d010      	beq.n	8002778 <HAL_ADC_Start_DMA+0x40>
 8002756:	2301      	movs	r3, #1
 8002758:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800275a:	68ea      	ldr	r2, [r5, #12]
 800275c:	4213      	tst	r3, r2
 800275e:	d106      	bne.n	800276e <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002760:	68aa      	ldr	r2, [r5, #8]
 8002762:	4213      	tst	r3, r2
 8002764:	d131      	bne.n	80027ca <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002766:	2201      	movs	r2, #1
 8002768:	68eb      	ldr	r3, [r5, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 800276e:	0020      	movs	r0, r4
 8002770:	f7ff ff7c 	bl	800266c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002774:	2800      	cmp	r0, #0
 8002776:	d002      	beq.n	800277e <HAL_ADC_Start_DMA+0x46>
}
 8002778:	bc80      	pop	{r7}
 800277a:	46b8      	mov	r8, r7
 800277c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800277e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002780:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002782:	6d25      	ldr	r5, [r4, #80]	@ 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8002784:	401a      	ands	r2, r3
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4313      	orrs	r3, r2
 800278c:	65a3      	str	r3, [r4, #88]	@ 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800278e:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002790:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002792:	62eb      	str	r3, [r5, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002794:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002796:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002798:	632b      	str	r3, [r5, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800279c:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800279e:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027a0:	231c      	movs	r3, #28
 80027a2:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 80027a4:	3338      	adds	r3, #56	@ 0x38
 80027a6:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027a8:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027aa:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027b0:	4642      	mov	r2, r8
 80027b2:	003b      	movs	r3, r7
 80027b4:	3140      	adds	r1, #64	@ 0x40
 80027b6:	f000 fa4d 	bl	8002c54 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80027ba:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80027bc:	490a      	ldr	r1, [pc, #40]	@ (80027e8 <HAL_ADC_Start_DMA+0xb0>)
 80027be:	6893      	ldr	r3, [r2, #8]
 80027c0:	400b      	ands	r3, r1
 80027c2:	2104      	movs	r1, #4
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6093      	str	r3, [r2, #8]
}
 80027c8:	e7d6      	b.n	8002778 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 80027ca:	68ab      	ldr	r3, [r5, #8]
 80027cc:	4a06      	ldr	r2, [pc, #24]	@ (80027e8 <HAL_ADC_Start_DMA+0xb0>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	4303      	orrs	r3, r0
 80027d2:	60ab      	str	r3, [r5, #8]
}
 80027d4:	e7c7      	b.n	8002766 <HAL_ADC_Start_DMA+0x2e>
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	fffff0fe 	.word	0xfffff0fe
 80027dc:	08001fc9 	.word	0x08001fc9
 80027e0:	08002049 	.word	0x08002049
 80027e4:	08002055 	.word	0x08002055
 80027e8:	7fffffe8 	.word	0x7fffffe8

080027ec <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027ec:	2202      	movs	r2, #2
{
 80027ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027f0:	6803      	ldr	r3, [r0, #0]
{
 80027f2:	0004      	movs	r4, r0
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	420a      	tst	r2, r1
 80027f8:	d002      	beq.n	8002800 <ADC_Disable+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027fa:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80027fc:	2000      	movs	r0, #0
}
 80027fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002800:	2101      	movs	r1, #1
 8002802:	6898      	ldr	r0, [r3, #8]
 8002804:	4201      	tst	r1, r0
 8002806:	d0f9      	beq.n	80027fc <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002808:	2705      	movs	r7, #5
 800280a:	6898      	ldr	r0, [r3, #8]
 800280c:	4007      	ands	r7, r0
 800280e:	2f01      	cmp	r7, #1
 8002810:	d008      	beq.n	8002824 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002812:	2210      	movs	r2, #16
 8002814:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002818:	4313      	orrs	r3, r2
 800281a:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800281e:	430b      	orrs	r3, r1
 8002820:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8002822:	e7ec      	b.n	80027fe <ADC_Disable+0x12>
  MODIFY_REG(ADCx->CR,
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	4812      	ldr	r0, [pc, #72]	@ (8002870 <ADC_Disable+0x84>)
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002828:	2501      	movs	r5, #1
 800282a:	4001      	ands	r1, r0
 800282c:	430a      	orrs	r2, r1
 800282e:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002830:	2203      	movs	r2, #3
 8002832:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002834:	f7ff fbc2 	bl	8001fbc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002838:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800283a:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	421f      	tst	r7, r3
 8002840:	d0dc      	beq.n	80027fc <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002842:	f7ff fbbb 	bl	8001fbc <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002846:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002848:	1b80      	subs	r0, r0, r6
 800284a:	2802      	cmp	r0, #2
 800284c:	d902      	bls.n	8002854 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	4215      	tst	r5, r2
 8002852:	d103      	bne.n	800285c <ADC_Disable+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	421d      	tst	r5, r3
 8002858:	d1f3      	bne.n	8002842 <ADC_Disable+0x56>
 800285a:	e7cf      	b.n	80027fc <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285c:	2210      	movs	r2, #16
 800285e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002860:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002862:	4313      	orrs	r3, r2
 8002864:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002868:	432b      	orrs	r3, r5
 800286a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800286c:	e7c7      	b.n	80027fe <ADC_Disable+0x12>
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	7fffffe8 	.word	0x7fffffe8

08002874 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8002874:	2354      	movs	r3, #84	@ 0x54
{
 8002876:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002878:	5cc2      	ldrb	r2, [r0, r3]
{
 800287a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800287c:	2a01      	cmp	r2, #1
 800287e:	d025      	beq.n	80028cc <HAL_ADC_Stop_DMA+0x58>
 8002880:	2201      	movs	r2, #1
 8002882:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002884:	f7ff feb8 	bl	80025f8 <ADC_ConversionStop>
 8002888:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 800288a:	d11a      	bne.n	80028c2 <HAL_ADC_Stop_DMA+0x4e>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800288c:	2325      	movs	r3, #37	@ 0x25
 800288e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002890:	5cc3      	ldrb	r3, [r0, r3]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d01c      	beq.n	80028d0 <HAL_ADC_Stop_DMA+0x5c>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002896:	2110      	movs	r1, #16
 8002898:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 800289a:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800289c:	6853      	ldr	r3, [r2, #4]
 800289e:	438b      	bics	r3, r1
 80028a0:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 80028a2:	f7ff ffa3 	bl	80027ec <ADC_Disable>
 80028a6:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 80028a8:	d106      	bne.n	80028b8 <HAL_ADC_Stop_DMA+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 80028aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028ac:	4a13      	ldr	r2, [pc, #76]	@ (80028fc <HAL_ADC_Stop_DMA+0x88>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	3204      	adds	r2, #4
 80028b2:	32ff      	adds	r2, #255	@ 0xff
 80028b4:	4313      	orrs	r3, r2
 80028b6:	65a3      	str	r3, [r4, #88]	@ 0x58
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80028b8:	2101      	movs	r1, #1
 80028ba:	6822      	ldr	r2, [r4, #0]
 80028bc:	68d3      	ldr	r3, [r2, #12]
 80028be:	438b      	bics	r3, r1
 80028c0:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 80028c2:	2354      	movs	r3, #84	@ 0x54
 80028c4:	2200      	movs	r2, #0
 80028c6:	54e2      	strb	r2, [r4, r3]
}
 80028c8:	0028      	movs	r0, r5
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 80028cc:	2502      	movs	r5, #2
 80028ce:	e7fb      	b.n	80028c8 <HAL_ADC_Stop_DMA+0x54>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80028d0:	f000 fa28 	bl	8002d24 <HAL_DMA_Abort>
 80028d4:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 80028d6:	d0de      	beq.n	8002896 <HAL_ADC_Stop_DMA+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028d8:	2240      	movs	r2, #64	@ 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80028da:	2110      	movs	r1, #16
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      (void)ADC_Disable(hadc);
 80028de:	0020      	movs	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028e0:	4313      	orrs	r3, r2
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80028e2:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028e4:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80028e6:	6853      	ldr	r3, [r2, #4]
 80028e8:	438b      	bics	r3, r1
 80028ea:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 80028ec:	f7ff ff7e 	bl	80027ec <ADC_Disable>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80028f0:	2101      	movs	r1, #1
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	68d3      	ldr	r3, [r2, #12]
 80028f6:	438b      	bics	r3, r1
 80028f8:	60d3      	str	r3, [r2, #12]
 80028fa:	e7e2      	b.n	80028c2 <HAL_ADC_Stop_DMA+0x4e>
 80028fc:	fffffefe 	.word	0xfffffefe

08002900 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002902:	46de      	mov	lr, fp
 8002904:	4657      	mov	r7, sl
 8002906:	464e      	mov	r6, r9
 8002908:	4645      	mov	r5, r8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800290a:	2300      	movs	r3, #0
{
 800290c:	b5e0      	push	{r5, r6, r7, lr}
 800290e:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8002910:	9302      	str	r3, [sp, #8]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002912:	3354      	adds	r3, #84	@ 0x54
 8002914:	5cc2      	ldrb	r2, [r0, r3]
{
 8002916:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002918:	2a01      	cmp	r2, #1
 800291a:	d100      	bne.n	800291e <HAL_ADCEx_Calibration_Start+0x1e>
 800291c:	e0af      	b.n	8002a7e <HAL_ADCEx_Calibration_Start+0x17e>
 800291e:	2701      	movs	r7, #1
 8002920:	54c7      	strb	r7, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002922:	f7ff ff63 	bl	80027ec <ADC_Disable>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002926:	003d      	movs	r5, r7

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002928:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 800292a:	9001      	str	r0, [sp, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	4015      	ands	r5, r2
 8002930:	4217      	tst	r7, r2
 8002932:	d136      	bne.n	80029a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002934:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002936:	4953      	ldr	r1, [pc, #332]	@ (8002a84 <HAL_ADCEx_Calibration_Start+0x184>)
  MODIFY_REG(ADCx->CR,
 8002938:	2080      	movs	r0, #128	@ 0x80
 800293a:	400a      	ands	r2, r1
 800293c:	3106      	adds	r1, #6
 800293e:	31ff      	adds	r1, #255	@ 0xff
 8002940:	430a      	orrs	r2, r1
 8002942:	65a2      	str	r2, [r4, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002944:	68da      	ldr	r2, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002946:	4950      	ldr	r1, [pc, #320]	@ (8002a88 <HAL_ADCEx_Calibration_Start+0x188>)
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002948:	4693      	mov	fp, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800294a:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800294c:	277f      	movs	r7, #127	@ 0x7f
 800294e:	400a      	ands	r2, r1
 8002950:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CR,
 8002952:	4a4e      	ldr	r2, [pc, #312]	@ (8002a8c <HAL_ADCEx_Calibration_Start+0x18c>)
 8002954:	2108      	movs	r1, #8
 8002956:	4694      	mov	ip, r2

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
      {
        wait_loop_index++;
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002958:	4a4d      	ldr	r2, [pc, #308]	@ (8002a90 <HAL_ADCEx_Calibration_Start+0x190>)
 800295a:	0600      	lsls	r0, r0, #24
 800295c:	4692      	mov	sl, r2
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800295e:	22b4      	movs	r2, #180	@ 0xb4
 8002960:	4691      	mov	r9, r2
 8002962:	e006      	b.n	8002972 <HAL_ADCEx_Calibration_Start+0x72>
 8002964:	464a      	mov	r2, r9
 8002966:	589a      	ldr	r2, [r3, r2]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002968:	3901      	subs	r1, #1
 800296a:	403a      	ands	r2, r7

          return HAL_ERROR;
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800296c:	18ad      	adds	r5, r5, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800296e:	2900      	cmp	r1, #0
 8002970:	d026      	beq.n	80029c0 <HAL_ADCEx_Calibration_Start+0xc0>
  MODIFY_REG(ADCx->CR,
 8002972:	4666      	mov	r6, ip
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	4032      	ands	r2, r6
 8002978:	4302      	orrs	r2, r0
 800297a:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	2a00      	cmp	r2, #0
 8002980:	daf0      	bge.n	8002964 <HAL_ADCEx_Calibration_Start+0x64>
        wait_loop_index++;
 8002982:	9a02      	ldr	r2, [sp, #8]
 8002984:	3201      	adds	r2, #1
 8002986:	9202      	str	r2, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002988:	9a02      	ldr	r2, [sp, #8]
 800298a:	4552      	cmp	r2, sl
 800298c:	d9f6      	bls.n	800297c <HAL_ADCEx_Calibration_Start+0x7c>
          ADC_STATE_CLR_SET(hadc->State,
 800298e:	2212      	movs	r2, #18
 8002990:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002992:	4393      	bics	r3, r2
 8002994:	3a02      	subs	r2, #2
 8002996:	4313      	orrs	r3, r2
 8002998:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800299a:	2200      	movs	r2, #0
 800299c:	2354      	movs	r3, #84	@ 0x54
 800299e:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80029a0:	e059      	b.n	8002a56 <HAL_ADCEx_Calibration_Start+0x156>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	2210      	movs	r2, #16
 80029a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80029a6:	4313      	orrs	r3, r2
 80029a8:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80029aa:	2354      	movs	r3, #84	@ 0x54
 80029ac:	2200      	movs	r2, #0
 80029ae:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 80029b0:	9801      	ldr	r0, [sp, #4]
 80029b2:	b005      	add	sp, #20
 80029b4:	bcf0      	pop	{r4, r5, r6, r7}
 80029b6:	46bb      	mov	fp, r7
 80029b8:	46b2      	mov	sl, r6
 80029ba:	46a9      	mov	r9, r5
 80029bc:	46a0      	mov	r8, r4
 80029be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	4832      	ldr	r0, [pc, #200]	@ (8002a8c <HAL_ADCEx_Calibration_Start+0x18c>)
    calibration_factor_accumulated /= calibration_index;
 80029c4:	08e9      	lsrs	r1, r5, #3
 80029c6:	4002      	ands	r2, r0
 80029c8:	2001      	movs	r0, #1
 80029ca:	4302      	orrs	r2, r0
 80029cc:	609a      	str	r2, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80029ce:	2280      	movs	r2, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80029d0:	691d      	ldr	r5, [r3, #16]
 80029d2:	05d2      	lsls	r2, r2, #23
 80029d4:	4295      	cmp	r5, r2
 80029d6:	d218      	bcs.n	8002a0a <HAL_ADCEx_Calibration_Start+0x10a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80029d8:	25f0      	movs	r5, #240	@ 0xf0
 80029da:	4a2e      	ldr	r2, [pc, #184]	@ (8002a94 <HAL_ADCEx_Calibration_Start+0x194>)
 80029dc:	03ad      	lsls	r5, r5, #14
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	402a      	ands	r2, r5
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80029e2:	25e0      	movs	r5, #224	@ 0xe0
 80029e4:	036d      	lsls	r5, r5, #13
 80029e6:	42aa      	cmp	r2, r5
 80029e8:	d30f      	bcc.n	8002a0a <HAL_ADCEx_Calibration_Start+0x10a>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80029ea:	0c92      	lsrs	r2, r2, #18
 80029ec:	3a03      	subs	r2, #3
 80029ee:	4090      	lsls	r0, r2
 80029f0:	9003      	str	r0, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 80029f2:	9a03      	ldr	r2, [sp, #12]
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	9203      	str	r2, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 80029f8:	9a03      	ldr	r2, [sp, #12]
 80029fa:	2a00      	cmp	r2, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_ADCEx_Calibration_Start+0x10a>
          delay_cpu_cycles--;
 80029fe:	9a03      	ldr	r2, [sp, #12]
 8002a00:	3a01      	subs	r2, #1
 8002a02:	9203      	str	r2, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 8002a04:	9a03      	ldr	r2, [sp, #12]
 8002a06:	2a00      	cmp	r2, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 8002a0a:	22b4      	movs	r2, #180	@ 0xb4
 8002a0c:	207f      	movs	r0, #127	@ 0x7f
 8002a0e:	589d      	ldr	r5, [r3, r2]
 8002a10:	4385      	bics	r5, r0
 8002a12:	430d      	orrs	r5, r1
 8002a14:	509d      	str	r5, [r3, r2]
  MODIFY_REG(ADCx->CR,
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	491c      	ldr	r1, [pc, #112]	@ (8002a8c <HAL_ADCEx_Calibration_Start+0x18c>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002a22:	f7ff facb 	bl	8001fbc <HAL_GetTick>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a26:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002a28:	0005      	movs	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	07d2      	lsls	r2, r2, #31
 8002a2e:	d519      	bpl.n	8002a64 <HAL_ADCEx_Calibration_Start+0x164>
 8002a30:	2301      	movs	r3, #1
 8002a32:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a34:	f7ff fac2 	bl	8001fbc <HAL_GetTick>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a38:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a3a:	1b40      	subs	r0, r0, r5
 8002a3c:	2802      	cmp	r0, #2
 8002a3e:	d90d      	bls.n	8002a5c <HAL_ADCEx_Calibration_Start+0x15c>
 8002a40:	2201      	movs	r2, #1
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	420a      	tst	r2, r1
 8002a46:	d009      	beq.n	8002a5c <HAL_ADCEx_Calibration_Start+0x15c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a48:	2110      	movs	r1, #16
 8002a4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a50:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002a52:	4313      	orrs	r3, r2
 8002a54:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	e7a9      	b.n	80029b0 <HAL_ADCEx_Calibration_Start+0xb0>
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	4211      	tst	r1, r2
 8002a62:	d1e7      	bne.n	8002a34 <HAL_ADCEx_Calibration_Start+0x134>
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002a64:	465f      	mov	r7, fp
 8002a66:	490c      	ldr	r1, [pc, #48]	@ (8002a98 <HAL_ADCEx_Calibration_Start+0x198>)
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002a68:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002a6a:	400f      	ands	r7, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002a6c:	4317      	orrs	r7, r2
    ADC_STATE_CLR_SET(hadc->State,
 8002a6e:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002a70:	60df      	str	r7, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002a72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a74:	4393      	bics	r3, r2
 8002a76:	3a02      	subs	r2, #2
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002a7c:	e795      	b.n	80029aa <HAL_ADCEx_Calibration_Start+0xaa>
  __HAL_LOCK(hadc);
 8002a7e:	2302      	movs	r3, #2
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	e795      	b.n	80029b0 <HAL_ADCEx_Calibration_Start+0xb0>
 8002a84:	fffffefd 	.word	0xfffffefd
 8002a88:	ffff7ffc 	.word	0xffff7ffc
 8002a8c:	7fffffe8 	.word	0x7fffffe8
 8002a90:	0002f1ff 	.word	0x0002f1ff
 8002a94:	40012708 	.word	0x40012708
 8002a98:	00008003 	.word	0x00008003

08002a9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a9c:	4770      	bx	lr
 8002a9e:	46c0      	nop			@ (mov r8, r8)

08002aa0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8002aa0:	4770      	bx	lr
 8002aa2:	46c0      	nop			@ (mov r8, r8)

08002aa4 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8002aa4:	4770      	bx	lr
 8002aa6:	46c0      	nop			@ (mov r8, r8)

08002aa8 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa8:	22ff      	movs	r2, #255	@ 0xff
 8002aaa:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b510      	push	{r4, lr}
 8002aae:	0014      	movs	r4, r2
 8002ab0:	4003      	ands	r3, r0
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ab6:	0189      	lsls	r1, r1, #6
 8002ab8:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aba:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002abc:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	db0b      	blt.n	8002ada <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <HAL_NVIC_SetPriority+0x4c>)
 8002ac4:	21c0      	movs	r1, #192	@ 0xc0
 8002ac6:	469c      	mov	ip, r3
 8002ac8:	0880      	lsrs	r0, r0, #2
 8002aca:	0080      	lsls	r0, r0, #2
 8002acc:	4460      	add	r0, ip
 8002ace:	0089      	lsls	r1, r1, #2
 8002ad0:	5843      	ldr	r3, [r0, r1]
 8002ad2:	4023      	ands	r3, r4
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002ad8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ada:	230f      	movs	r3, #15
 8002adc:	4906      	ldr	r1, [pc, #24]	@ (8002af8 <HAL_NVIC_SetPriority+0x50>)
 8002ade:	4003      	ands	r3, r0
 8002ae0:	468c      	mov	ip, r1
 8002ae2:	3b08      	subs	r3, #8
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4463      	add	r3, ip
 8002aea:	69d9      	ldr	r1, [r3, #28]
 8002aec:	400c      	ands	r4, r1
 8002aee:	4314      	orrs	r4, r2
 8002af0:	61dc      	str	r4, [r3, #28]
 8002af2:	e7f1      	b.n	8002ad8 <HAL_NVIC_SetPriority+0x30>
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002afc:	2800      	cmp	r0, #0
 8002afe:	db05      	blt.n	8002b0c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b00:	221f      	movs	r2, #31
 8002b02:	2301      	movs	r3, #1
 8002b04:	4002      	ands	r2, r0
 8002b06:	4093      	lsls	r3, r2
 8002b08:	4a01      	ldr	r2, [pc, #4]	@ (8002b10 <HAL_NVIC_EnableIRQ+0x14>)
 8002b0a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b0c:	4770      	bx	lr
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b14:	2800      	cmp	r0, #0
 8002b16:	db0a      	blt.n	8002b2e <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b18:	221f      	movs	r2, #31
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4002      	ands	r2, r0
 8002b1e:	4093      	lsls	r3, r2
 8002b20:	2280      	movs	r2, #128	@ 0x80
 8002b22:	4903      	ldr	r1, [pc, #12]	@ (8002b30 <HAL_NVIC_DisableIRQ+0x1c>)
 8002b24:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b2a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	2280      	movs	r2, #128	@ 0x80
 8002b36:	1e43      	subs	r3, r0, #1
 8002b38:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d20e      	bcs.n	8002b5e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b40:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b44:	4807      	ldr	r0, [pc, #28]	@ (8002b64 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b46:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b48:	6a03      	ldr	r3, [r0, #32]
 8002b4a:	0609      	lsls	r1, r1, #24
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b56:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b58:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002b5e:	4770      	bx	lr
 8002b60:	e000e010 	.word	0xe000e010
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6a:	46c6      	mov	lr, r8
 8002b6c:	0004      	movs	r4, r0
 8002b6e:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d060      	beq.n	8002c36 <HAL_DMA_Init+0xce>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b74:	6805      	ldr	r5, [r0, #0]
 8002b76:	4b31      	ldr	r3, [pc, #196]	@ (8002c3c <HAL_DMA_Init+0xd4>)
 8002b78:	2114      	movs	r1, #20
 8002b7a:	18e8      	adds	r0, r5, r3
 8002b7c:	f7fd fac2 	bl	8000104 <__udivsi3>
 8002b80:	0083      	lsls	r3, r0, #2
 8002b82:	6423      	str	r3, [r4, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b84:	2202      	movs	r2, #2
 8002b86:	2325      	movs	r3, #37	@ 0x25
 8002b88:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b8a:	682b      	ldr	r3, [r5, #0]
 8002b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c40 <HAL_DMA_Init+0xd8>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002b8e:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b90:	4013      	ands	r3, r2
 8002b92:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002b94:	68e3      	ldr	r3, [r4, #12]
 8002b96:	6921      	ldr	r1, [r4, #16]
 8002b98:	4333      	orrs	r3, r6
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	6961      	ldr	r1, [r4, #20]
 8002b9e:	682a      	ldr	r2, [r5, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	69a1      	ldr	r1, [r4, #24]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	69e1      	ldr	r1, [r4, #28]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6a21      	ldr	r1, [r4, #32]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bb2:	4b24      	ldr	r3, [pc, #144]	@ (8002c44 <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bb4:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bb6:	469c      	mov	ip, r3
 8002bb8:	4460      	add	r0, ip
 8002bba:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bbc:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bbe:	4b22      	ldr	r3, [pc, #136]	@ (8002c48 <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bc0:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bc2:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bc4:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bc6:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bc8:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bca:	f7fd fa9b 	bl	8000104 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bce:	231f      	movs	r3, #31
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4003      	ands	r3, r0
 8002bd4:	0010      	movs	r0, r2
 8002bd6:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bd8:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bda:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bdc:	01db      	lsls	r3, r3, #7
 8002bde:	429e      	cmp	r6, r3
 8002be0:	d01f      	beq.n	8002c22 <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002be2:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be4:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002be6:	6861      	ldr	r1, [r4, #4]
 8002be8:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bea:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bec:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bee:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bf0:	2903      	cmp	r1, #3
 8002bf2:	d81b      	bhi.n	8002c2c <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bf4:	4915      	ldr	r1, [pc, #84]	@ (8002c4c <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bf6:	4816      	ldr	r0, [pc, #88]	@ (8002c50 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bf8:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bfe:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c00:	0089      	lsls	r1, r1, #2
 8002c02:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c04:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c06:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c08:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c0a:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	2225      	movs	r2, #37	@ 0x25
 8002c10:	2101      	movs	r1, #1
  return HAL_OK;
 8002c12:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c14:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002c16:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8002c18:	3a01      	subs	r2, #1
 8002c1a:	54a3      	strb	r3, [r4, r2]
}
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	46b8      	mov	r8, r7
 8002c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c22:	2300      	movs	r3, #0
 8002c24:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c26:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c28:	4643      	mov	r3, r8
 8002c2a:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c30:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c32:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002c34:	e7ea      	b.n	8002c0c <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 8002c36:	2001      	movs	r0, #1
 8002c38:	e7f0      	b.n	8002c1c <HAL_DMA_Init+0xb4>
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	bffdfff8 	.word	0xbffdfff8
 8002c40:	ffff800f 	.word	0xffff800f
 8002c44:	10008200 	.word	0x10008200
 8002c48:	40020880 	.word	0x40020880
 8002c4c:	1000823f 	.word	0x1000823f
 8002c50:	40020940 	.word	0x40020940

08002c54 <HAL_DMA_Start_IT>:
{
 8002c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c56:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 8002c58:	2424      	movs	r4, #36	@ 0x24
{
 8002c5a:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 8002c5c:	5d05      	ldrb	r5, [r0, r4]
 8002c5e:	2d01      	cmp	r5, #1
 8002c60:	d04f      	beq.n	8002d02 <HAL_DMA_Start_IT+0xae>
 8002c62:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8002c64:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 8002c66:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 8002c68:	5d85      	ldrb	r5, [r0, r6]
 8002c6a:	b2ef      	uxtb	r7, r5
 8002c6c:	2d01      	cmp	r5, #1
 8002c6e:	d007      	beq.n	8002c80 <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002c74:	2300      	movs	r3, #0
 8002c76:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 8002c78:	2001      	movs	r0, #1
}
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	46b8      	mov	r8, r7
 8002c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c80:	3c22      	subs	r4, #34	@ 0x22
 8002c82:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c84:	2400      	movs	r4, #0
 8002c86:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002c88:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c8a:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8002c8c:	6825      	ldr	r5, [r4, #0]
 8002c8e:	43bd      	bics	r5, r7
 8002c90:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c92:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8002c94:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8002c96:	6d06      	ldr	r6, [r0, #80]	@ 0x50
 8002c98:	2e00      	cmp	r6, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8002c9e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
 8002ca0:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002ca2:	4d1f      	ldr	r5, [pc, #124]	@ (8002d20 <HAL_DMA_Start_IT+0xcc>)
 8002ca4:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8002ca6:	46ac      	mov	ip, r5
 8002ca8:	686d      	ldr	r5, [r5, #4]
 8002caa:	46a8      	mov	r8, r5
 8002cac:	251c      	movs	r5, #28
 8002cae:	402f      	ands	r7, r5
 8002cb0:	3d1b      	subs	r5, #27
 8002cb2:	40bd      	lsls	r5, r7
 8002cb4:	4647      	mov	r7, r8
 8002cb6:	433d      	orrs	r5, r7
 8002cb8:	4667      	mov	r7, ip
 8002cba:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002cbc:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cbe:	6883      	ldr	r3, [r0, #8]
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d020      	beq.n	8002d06 <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 8002cc4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cc6:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8002cc8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01e      	beq.n	8002d0c <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cce:	220e      	movs	r2, #14
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cd6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	03db      	lsls	r3, r3, #15
 8002cdc:	d504      	bpl.n	8002ce8 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	6811      	ldr	r1, [r2, #0]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002ce8:	2e00      	cmp	r6, #0
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	6832      	ldr	r2, [r6, #0]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	6023      	str	r3, [r4, #0]
 8002d00:	e7bb      	b.n	8002c7a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8002d02:	2002      	movs	r0, #2
 8002d04:	e7b9      	b.n	8002c7a <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8002d06:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002d08:	60e1      	str	r1, [r4, #12]
 8002d0a:	e7dd      	b.n	8002cc8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	4393      	bics	r3, r2
 8002d12:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	3206      	adds	r2, #6
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	6023      	str	r3, [r4, #0]
 8002d1c:	e7db      	b.n	8002cd6 <HAL_DMA_Start_IT+0x82>
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	40020000 	.word	0x40020000

08002d24 <HAL_DMA_Abort>:
{
 8002d24:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d032      	beq.n	8002d90 <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d2a:	2325      	movs	r3, #37	@ 0x25
 8002d2c:	5cc3      	ldrb	r3, [r0, r3]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d129      	bne.n	8002d86 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d32:	210e      	movs	r1, #14
 8002d34:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d36:	4c17      	ldr	r4, [pc, #92]	@ (8002d94 <HAL_DMA_Abort+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d38:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002d3a:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3c:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d3e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d40:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d42:	680b      	ldr	r3, [r1, #0]
 8002d44:	4023      	ands	r3, r4
 8002d46:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	4399      	bics	r1, r3
 8002d4e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002d50:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002d52:	4911      	ldr	r1, [pc, #68]	@ (8002d98 <HAL_DMA_Abort+0x74>)
 8002d54:	4032      	ands	r2, r6
 8002d56:	4093      	lsls	r3, r2
 8002d58:	684d      	ldr	r5, [r1, #4]
 8002d5a:	432b      	orrs	r3, r5
 8002d5c:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d5e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002d60:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002d62:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002d64:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4022      	ands	r2, r4
 8002d6e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d70:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002d72:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002d74:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002d76:	2325      	movs	r3, #37	@ 0x25
 8002d78:	2201      	movs	r2, #1
 8002d7a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8002d82:	2000      	movs	r0, #0
}
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d86:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8002d88:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002d8c:	3320      	adds	r3, #32
 8002d8e:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8002d90:	2001      	movs	r0, #1
 8002d92:	e7f7      	b.n	8002d84 <HAL_DMA_Abort+0x60>
 8002d94:	fffffeff 	.word	0xfffffeff
 8002d98:	40020000 	.word	0x40020000

08002d9c <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d9c:	2325      	movs	r3, #37	@ 0x25
{
 8002d9e:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002da0:	5cc3      	ldrb	r3, [r0, r3]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da6:	2304      	movs	r3, #4
 8002da8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8002daa:	2001      	movs	r0, #1
}
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dae:	210e      	movs	r1, #14
 8002db0:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002db2:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db4:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002db6:	4c15      	ldr	r4, [pc, #84]	@ (8002e0c <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db8:	438b      	bics	r3, r1
 8002dba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	6811      	ldr	r1, [r2, #0]
 8002dc0:	4399      	bics	r1, r3
 8002dc2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dc4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002dc6:	680a      	ldr	r2, [r1, #0]
 8002dc8:	4022      	ands	r2, r4
 8002dca:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002dcc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002dce:	4910      	ldr	r1, [pc, #64]	@ (8002e10 <HAL_DMA_Abort_IT+0x74>)
 8002dd0:	4032      	ands	r2, r6
 8002dd2:	4093      	lsls	r3, r2
 8002dd4:	684d      	ldr	r5, [r1, #4]
 8002dd6:	432b      	orrs	r3, r5
 8002dd8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dda:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002ddc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002dde:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002de0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4022      	ands	r2, r4
 8002dea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002dee:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002df0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002df2:	2325      	movs	r3, #37	@ 0x25
 8002df4:	2201      	movs	r2, #1
 8002df6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8002dfe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d000      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8002e04:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	2000      	movs	r0, #0
 8002e08:	e7d0      	b.n	8002dac <HAL_DMA_Abort_IT+0x10>
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	fffffeff 	.word	0xfffffeff
 8002e10:	40020000 	.word	0x40020000

08002e14 <HAL_DMA_IRQHandler>:
{
 8002e14:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e16:	211c      	movs	r1, #28
 8002e18:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8002e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec8 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8002e1c:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8002e1e:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8002e22:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e24:	400b      	ands	r3, r1
 8002e26:	0021      	movs	r1, r4
 8002e28:	4099      	lsls	r1, r3
 8002e2a:	420a      	tst	r2, r1
 8002e2c:	d010      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x3c>
 8002e2e:	422c      	tst	r4, r5
 8002e30:	d00e      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e32:	6833      	ldr	r3, [r6, #0]
 8002e34:	069b      	lsls	r3, r3, #26
 8002e36:	d402      	bmi.n	8002e3e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e38:	6833      	ldr	r3, [r6, #0]
 8002e3a:	43a3      	bics	r3, r4
 8002e3c:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002e3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ec8 <HAL_DMA_IRQHandler+0xb4>)
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002e46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d000      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002e4c:	4798      	blx	r3
}
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e50:	2402      	movs	r4, #2
 8002e52:	0021      	movs	r1, r4
 8002e54:	4099      	lsls	r1, r3
 8002e56:	420a      	tst	r2, r1
 8002e58:	d017      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x76>
 8002e5a:	422c      	tst	r4, r5
 8002e5c:	d015      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e5e:	6833      	ldr	r3, [r6, #0]
 8002e60:	069b      	lsls	r3, r3, #26
 8002e62:	d406      	bmi.n	8002e72 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e64:	220a      	movs	r2, #10
 8002e66:	6833      	ldr	r3, [r6, #0]
 8002e68:	4393      	bics	r3, r2
 8002e6a:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002e6c:	2325      	movs	r3, #37	@ 0x25
 8002e6e:	3a09      	subs	r2, #9
 8002e70:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002e72:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <HAL_DMA_IRQHandler+0xb4>)
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	4311      	orrs	r1, r2
 8002e78:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2324      	movs	r3, #36	@ 0x24
 8002e7e:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8002e80:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0e3      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002e86:	4798      	blx	r3
  return;
 8002e88:	e7e1      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002e8a:	2108      	movs	r1, #8
 8002e8c:	000c      	movs	r4, r1
 8002e8e:	409c      	lsls	r4, r3
 8002e90:	4222      	tst	r2, r4
 8002e92:	d0dc      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3a>
 8002e94:	4229      	tst	r1, r5
 8002e96:	d0da      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e98:	6832      	ldr	r2, [r6, #0]
 8002e9a:	3106      	adds	r1, #6
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	0015      	movs	r5, r2
 8002ea4:	409d      	lsls	r5, r3
 8002ea6:	002b      	movs	r3, r5
 8002ea8:	4907      	ldr	r1, [pc, #28]	@ (8002ec8 <HAL_DMA_IRQHandler+0xb4>)
 8002eaa:	684c      	ldr	r4, [r1, #4]
 8002eac:	4323      	orrs	r3, r4
 8002eae:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002eb2:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8002ebc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0c5      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002ec2:	4798      	blx	r3
  return;
 8002ec4:	e7c3      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3a>
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	40020000 	.word	0x40020000

08002ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ece:	46de      	mov	lr, fp
 8002ed0:	4657      	mov	r7, sl
 8002ed2:	464e      	mov	r6, r9
 8002ed4:	4645      	mov	r5, r8
 8002ed6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed8:	680c      	ldr	r4, [r1, #0]
{
 8002eda:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8002edc:	2300      	movs	r3, #0
{
 8002ede:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee0:	2c00      	cmp	r4, #0
 8002ee2:	d068      	beq.n	8002fb6 <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	4694      	mov	ip, r2
 8002eea:	4022      	ands	r2, r4
 8002eec:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8002eee:	4662      	mov	r2, ip
 8002ef0:	4214      	tst	r4, r2
 8002ef2:	d05c      	beq.n	8002fae <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ef4:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef6:	465a      	mov	r2, fp
 8002ef8:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002efa:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002efc:	6855      	ldr	r5, [r2, #4]
 8002efe:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f00:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f02:	402a      	ands	r2, r5
 8002f04:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f06:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f08:	2e01      	cmp	r6, #1
 8002f0a:	d95b      	bls.n	8002fc4 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f0c:	2a03      	cmp	r2, #3
 8002f0e:	d000      	beq.n	8002f12 <HAL_GPIO_Init+0x46>
 8002f10:	e0ad      	b.n	800306e <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f12:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8002f14:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f16:	9900      	ldr	r1, [sp, #0]
 8002f18:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f1a:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8002f1c:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1e:	22c0      	movs	r2, #192	@ 0xc0
 8002f20:	0292      	lsls	r2, r2, #10
 8002f22:	4215      	tst	r5, r2
 8002f24:	d043      	beq.n	8002fae <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f26:	2703      	movs	r7, #3
 8002f28:	260f      	movs	r6, #15
 8002f2a:	495d      	ldr	r1, [pc, #372]	@ (80030a0 <HAL_GPIO_Init+0x1d4>)
 8002f2c:	401f      	ands	r7, r3
 8002f2e:	468c      	mov	ip, r1
 8002f30:	00ff      	lsls	r7, r7, #3
 8002f32:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8002f34:	089a      	lsrs	r2, r3, #2
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4462      	add	r2, ip
 8002f3a:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f3c:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f3e:	26a0      	movs	r6, #160	@ 0xa0
 8002f40:	05f6      	lsls	r6, r6, #23
 8002f42:	42b0      	cmp	r0, r6
 8002f44:	d00e      	beq.n	8002f64 <HAL_GPIO_Init+0x98>
 8002f46:	4e57      	ldr	r6, [pc, #348]	@ (80030a4 <HAL_GPIO_Init+0x1d8>)
 8002f48:	42b0      	cmp	r0, r6
 8002f4a:	d100      	bne.n	8002f4e <HAL_GPIO_Init+0x82>
 8002f4c:	e0a0      	b.n	8003090 <HAL_GPIO_Init+0x1c4>
 8002f4e:	4e56      	ldr	r6, [pc, #344]	@ (80030a8 <HAL_GPIO_Init+0x1dc>)
 8002f50:	42b0      	cmp	r0, r6
 8002f52:	d100      	bne.n	8002f56 <HAL_GPIO_Init+0x8a>
 8002f54:	e0a0      	b.n	8003098 <HAL_GPIO_Init+0x1cc>
 8002f56:	4e55      	ldr	r6, [pc, #340]	@ (80030ac <HAL_GPIO_Init+0x1e0>)
 8002f58:	42b0      	cmp	r0, r6
 8002f5a:	d100      	bne.n	8002f5e <HAL_GPIO_Init+0x92>
 8002f5c:	e094      	b.n	8003088 <HAL_GPIO_Init+0x1bc>
 8002f5e:	2605      	movs	r6, #5
 8002f60:	40be      	lsls	r6, r7
 8002f62:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f64:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8002f66:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8002f68:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8002f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80030a0 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f6c:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8002f6e:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8002f70:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f72:	4235      	tst	r5, r6
 8002f74:	d000      	beq.n	8002f78 <HAL_GPIO_Init+0xac>
 8002f76:	e077      	b.n	8003068 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8002f78:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002f7a:	4e49      	ldr	r6, [pc, #292]	@ (80030a0 <HAL_GPIO_Init+0x1d4>)
 8002f7c:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8002f7e:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f80:	2680      	movs	r6, #128	@ 0x80
 8002f82:	03b6      	lsls	r6, r6, #14
 8002f84:	4235      	tst	r5, r6
 8002f86:	d16c      	bne.n	8003062 <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8002f88:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002f8a:	4e45      	ldr	r6, [pc, #276]	@ (80030a0 <HAL_GPIO_Init+0x1d4>)
 8002f8c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f8e:	2284      	movs	r2, #132	@ 0x84
 8002f90:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f92:	03af      	lsls	r7, r5, #14
 8002f94:	d462      	bmi.n	800305c <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8002f96:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002f98:	2784      	movs	r7, #132	@ 0x84
 8002f9a:	4e41      	ldr	r6, [pc, #260]	@ (80030a0 <HAL_GPIO_Init+0x1d4>)
 8002f9c:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fa2:	03ed      	lsls	r5, r5, #15
 8002fa4:	d456      	bmi.n	8003054 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8002fa6:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002fa8:	2180      	movs	r1, #128	@ 0x80
 8002faa:	4d3d      	ldr	r5, [pc, #244]	@ (80030a0 <HAL_GPIO_Init+0x1d4>)
 8002fac:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fae:	0022      	movs	r2, r4
      }
    }

    position++;
 8002fb0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb2:	40da      	lsrs	r2, r3
 8002fb4:	d196      	bne.n	8002ee4 <HAL_GPIO_Init+0x18>
  }
}
 8002fb6:	b003      	add	sp, #12
 8002fb8:	bcf0      	pop	{r4, r5, r6, r7}
 8002fba:	46bb      	mov	fp, r7
 8002fbc:	46b2      	mov	sl, r6
 8002fbe:	46a9      	mov	r9, r5
 8002fc0:	46a0      	mov	r8, r4
 8002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8002fc4:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fc6:	000e      	movs	r6, r1
 8002fc8:	9900      	ldr	r1, [sp, #0]
 8002fca:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fcc:	4659      	mov	r1, fp
 8002fce:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fd0:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fd2:	000e      	movs	r6, r1
 8002fd4:	40be      	lsls	r6, r7
 8002fd6:	46b0      	mov	r8, r6
 8002fd8:	464e      	mov	r6, r9
 8002fda:	4641      	mov	r1, r8
 8002fdc:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8002fde:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002fe0:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe2:	000e      	movs	r6, r1
 8002fe4:	4661      	mov	r1, ip
 8002fe6:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe8:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fea:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fec:	000e      	movs	r6, r1
 8002fee:	2101      	movs	r1, #1
 8002ff0:	400e      	ands	r6, r1
 8002ff2:	409e      	lsls	r6, r3
 8002ff4:	46b4      	mov	ip, r6
 8002ff6:	4646      	mov	r6, r8
 8002ff8:	4661      	mov	r1, ip
 8002ffa:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8002ffc:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002ffe:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003000:	000e      	movs	r6, r1
 8003002:	9900      	ldr	r1, [sp, #0]
 8003004:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003006:	4659      	mov	r1, fp
 8003008:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800300a:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800300c:	000e      	movs	r6, r1
 800300e:	40be      	lsls	r6, r7
 8003010:	46b4      	mov	ip, r6
 8003012:	4646      	mov	r6, r8
 8003014:	4661      	mov	r1, ip
 8003016:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8003018:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301a:	2a02      	cmp	r2, #2
 800301c:	d000      	beq.n	8003020 <HAL_GPIO_Init+0x154>
 800301e:	e778      	b.n	8002f12 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8003020:	08d9      	lsrs	r1, r3, #3
 8003022:	0089      	lsls	r1, r1, #2
 8003024:	468c      	mov	ip, r1
 8003026:	4484      	add	ip, r0
 8003028:	4661      	mov	r1, ip
 800302a:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800302c:	2107      	movs	r1, #7
 800302e:	4019      	ands	r1, r3
 8003030:	0089      	lsls	r1, r1, #2
 8003032:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8003034:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003036:	210f      	movs	r1, #15
 8003038:	4646      	mov	r6, r8
 800303a:	40b1      	lsls	r1, r6
 800303c:	9e01      	ldr	r6, [sp, #4]
 800303e:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003040:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003042:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003044:	4646      	mov	r6, r8
 8003046:	6909      	ldr	r1, [r1, #16]
 8003048:	40b1      	lsls	r1, r6
 800304a:	9e01      	ldr	r6, [sp, #4]
 800304c:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 800304e:	4661      	mov	r1, ip
 8003050:	620e      	str	r6, [r1, #32]
 8003052:	e75e      	b.n	8002f12 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8003054:	4651      	mov	r1, sl
 8003056:	4311      	orrs	r1, r2
 8003058:	000a      	movs	r2, r1
 800305a:	e7a5      	b.n	8002fa8 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 800305c:	4656      	mov	r6, sl
 800305e:	4332      	orrs	r2, r6
 8003060:	e79a      	b.n	8002f98 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8003062:	4656      	mov	r6, sl
 8003064:	4332      	orrs	r2, r6
 8003066:	e790      	b.n	8002f8a <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8003068:	4656      	mov	r6, sl
 800306a:	4332      	orrs	r2, r6
 800306c:	e785      	b.n	8002f7a <HAL_GPIO_Init+0xae>
 800306e:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8003070:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003072:	4031      	ands	r1, r6
 8003074:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003076:	4659      	mov	r1, fp
 8003078:	6889      	ldr	r1, [r1, #8]
 800307a:	40b9      	lsls	r1, r7
 800307c:	468c      	mov	ip, r1
 800307e:	4641      	mov	r1, r8
 8003080:	4666      	mov	r6, ip
 8003082:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8003084:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003086:	e744      	b.n	8002f12 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003088:	2603      	movs	r6, #3
 800308a:	40be      	lsls	r6, r7
 800308c:	4331      	orrs	r1, r6
 800308e:	e769      	b.n	8002f64 <HAL_GPIO_Init+0x98>
 8003090:	2601      	movs	r6, #1
 8003092:	40be      	lsls	r6, r7
 8003094:	4331      	orrs	r1, r6
 8003096:	e765      	b.n	8002f64 <HAL_GPIO_Init+0x98>
 8003098:	2602      	movs	r6, #2
 800309a:	40be      	lsls	r6, r7
 800309c:	4331      	orrs	r1, r6
 800309e:	e761      	b.n	8002f64 <HAL_GPIO_Init+0x98>
 80030a0:	40021800 	.word	0x40021800
 80030a4:	50000400 	.word	0x50000400
 80030a8:	50000800 	.word	0x50000800
 80030ac:	50000c00 	.word	0x50000c00

080030b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80030b0:	6900      	ldr	r0, [r0, #16]
 80030b2:	4008      	ands	r0, r1
 80030b4:	1e43      	subs	r3, r0, #1
 80030b6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80030b8:	b2c0      	uxtb	r0, r0
}
 80030ba:	4770      	bx	lr

080030bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030bc:	2a00      	cmp	r2, #0
 80030be:	d001      	beq.n	80030c4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030c0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030c4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80030c6:	e7fc      	b.n	80030c2 <HAL_GPIO_WritePin+0x6>

080030c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 80030ca:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80030cc:	68da      	ldr	r2, [r3, #12]
{
 80030ce:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80030d0:	4210      	tst	r0, r2
 80030d2:	d104      	bne.n	80030de <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	4222      	tst	r2, r4
 80030da:	d107      	bne.n	80030ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 80030dc:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80030de:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80030e0:	f7fd ffb4 	bl	800104c <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	4222      	tst	r2, r4
 80030ea:	d0f7      	beq.n	80030dc <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80030ec:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80030ee:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80030f0:	f7fd ff98 	bl	8001024 <HAL_GPIO_EXTI_Falling_Callback>
}
 80030f4:	e7f2      	b.n	80030dc <HAL_GPIO_EXTI_IRQHandler+0x14>
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	40021800 	.word	0x40021800

080030fc <HAL_LPTIM_DirectionDownCallback>:
/**
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
 80030fc:	4770      	bx	lr
 80030fe:	46c0      	nop			@ (mov r8, r8)

08003100 <HAL_LPTIM_CompareMatchCallback>:
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
 8003100:	4770      	bx	lr
 8003102:	46c0      	nop			@ (mov r8, r8)

08003104 <HAL_LPTIM_AutoReloadMatchCallback>:
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
 8003104:	4770      	bx	lr
 8003106:	46c0      	nop			@ (mov r8, r8)

08003108 <HAL_LPTIM_TriggerCallback>:
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
 8003108:	4770      	bx	lr
 800310a:	46c0      	nop			@ (mov r8, r8)

0800310c <HAL_LPTIM_CompareWriteCallback>:
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800310c:	4770      	bx	lr
 800310e:	46c0      	nop			@ (mov r8, r8)

08003110 <HAL_LPTIM_AutoReloadWriteCallback>:
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
 8003110:	4770      	bx	lr
 8003112:	46c0      	nop			@ (mov r8, r8)

08003114 <HAL_LPTIM_DirectionUpCallback>:
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
 8003114:	4770      	bx	lr
 8003116:	46c0      	nop			@ (mov r8, r8)

08003118 <HAL_LPTIM_Init>:
{
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	1e04      	subs	r4, r0, #0
  if (hlptim == NULL)
 800311c:	d062      	beq.n	80031e4 <HAL_LPTIM_Init+0xcc>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800311e:	2336      	movs	r3, #54	@ 0x36
 8003120:	5cc3      	ldrb	r3, [r0, r3]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d114      	bne.n	8003152 <HAL_LPTIM_Init+0x3a>
    hlptim->Lock = HAL_UNLOCKED;
 8003128:	3335      	adds	r3, #53	@ 0x35
 800312a:	54c2      	strb	r2, [r0, r3]
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 800312c:	4b30      	ldr	r3, [pc, #192]	@ (80031f0 <HAL_LPTIM_Init+0xd8>)
 800312e:	6403      	str	r3, [r0, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 8003130:	4b30      	ldr	r3, [pc, #192]	@ (80031f4 <HAL_LPTIM_Init+0xdc>)
 8003132:	6443      	str	r3, [r0, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8003134:	4b30      	ldr	r3, [pc, #192]	@ (80031f8 <HAL_LPTIM_Init+0xe0>)
 8003136:	6483      	str	r3, [r0, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8003138:	4b30      	ldr	r3, [pc, #192]	@ (80031fc <HAL_LPTIM_Init+0xe4>)
 800313a:	64c3      	str	r3, [r0, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 800313c:	4b30      	ldr	r3, [pc, #192]	@ (8003200 <HAL_LPTIM_Init+0xe8>)
 800313e:	6503      	str	r3, [r0, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8003140:	4b30      	ldr	r3, [pc, #192]	@ (8003204 <HAL_LPTIM_Init+0xec>)
 8003142:	6543      	str	r3, [r0, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8003144:	4b30      	ldr	r3, [pc, #192]	@ (8003208 <HAL_LPTIM_Init+0xf0>)
 8003146:	6583      	str	r3, [r0, #88]	@ 0x58
    if (hlptim->MspInitCallback == NULL)
 8003148:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04c      	beq.n	80031e8 <HAL_LPTIM_Init+0xd0>
    hlptim->MspInitCallback(hlptim);
 800314e:	0020      	movs	r0, r4
 8003150:	4798      	blx	r3
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003152:	2336      	movs	r3, #54	@ 0x36
 8003154:	2202      	movs	r2, #2
 8003156:	54e2      	strb	r2, [r4, r3]
  tmpcfgr = hlptim->Instance->CFGR;
 8003158:	6820      	ldr	r0, [r4, #0]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800315a:	6865      	ldr	r5, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 800315c:	68c3      	ldr	r3, [r0, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800315e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003160:	2d01      	cmp	r5, #1
 8003162:	d038      	beq.n	80031d6 <HAL_LPTIM_Init+0xbe>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	0412      	lsls	r2, r2, #16
 8003168:	4296      	cmp	r6, r2
 800316a:	d034      	beq.n	80031d6 <HAL_LPTIM_Init+0xbe>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800316c:	6961      	ldr	r1, [r4, #20]
 800316e:	4a27      	ldr	r2, [pc, #156]	@ (800320c <HAL_LPTIM_Init+0xf4>)
 8003170:	4291      	cmp	r1, r2
 8003172:	d001      	beq.n	8003178 <HAL_LPTIM_Init+0x60>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003174:	4a26      	ldr	r2, [pc, #152]	@ (8003210 <HAL_LPTIM_Init+0xf8>)
 8003176:	4013      	ands	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003178:	4a26      	ldr	r2, [pc, #152]	@ (8003214 <HAL_LPTIM_Init+0xfc>)
              hlptim->Init.UpdateMode      |
 800317a:	68a7      	ldr	r7, [r4, #8]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800317c:	401a      	ands	r2, r3
              hlptim->Init.UpdateMode      |
 800317e:	002b      	movs	r3, r5
 8003180:	4333      	orrs	r3, r6
 8003182:	433b      	orrs	r3, r7
 8003184:	6a27      	ldr	r7, [r4, #32]
 8003186:	433b      	orrs	r3, r7
 8003188:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800318a:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800318c:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800318e:	2d00      	cmp	r5, #0
 8003190:	d018      	beq.n	80031c4 <HAL_LPTIM_Init+0xac>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003192:	2d01      	cmp	r5, #1
 8003194:	d11a      	bne.n	80031cc <HAL_LPTIM_Init+0xb4>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003196:	68e2      	ldr	r2, [r4, #12]
 8003198:	6925      	ldr	r5, [r4, #16]
 800319a:	432a      	orrs	r2, r5
 800319c:	4313      	orrs	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800319e:	4a1b      	ldr	r2, [pc, #108]	@ (800320c <HAL_LPTIM_Init+0xf4>)
 80031a0:	4291      	cmp	r1, r2
 80031a2:	d004      	beq.n	80031ae <HAL_LPTIM_Init+0x96>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031a4:	69a2      	ldr	r2, [r4, #24]
 80031a6:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 80031a8:	69e2      	ldr	r2, [r4, #28]
 80031aa:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031ac:	430b      	orrs	r3, r1
  if (hlptim->Instance == LPTIM1)
 80031ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003218 <HAL_LPTIM_Init+0x100>)
  hlptim->Instance->CFGR = tmpcfgr;
 80031b0:	60c3      	str	r3, [r0, #12]
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80031b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if (hlptim->Instance == LPTIM1)
 80031b4:	4290      	cmp	r0, r2
 80031b6:	d011      	beq.n	80031dc <HAL_LPTIM_Init+0xc4>
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80031b8:	6243      	str	r3, [r0, #36]	@ 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80031ba:	2336      	movs	r3, #54	@ 0x36
 80031bc:	2201      	movs	r2, #1
  return HAL_OK;
 80031be:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80031c0:	54e2      	strb	r2, [r4, r3]
}
 80031c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80031c4:	69e2      	ldr	r2, [r4, #28]
 80031c6:	6925      	ldr	r5, [r4, #16]
 80031c8:	432a      	orrs	r2, r5
 80031ca:	4313      	orrs	r3, r2
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80031cc:	2280      	movs	r2, #128	@ 0x80
 80031ce:	0412      	lsls	r2, r2, #16
 80031d0:	4296      	cmp	r6, r2
 80031d2:	d1e4      	bne.n	800319e <HAL_LPTIM_Init+0x86>
 80031d4:	e7df      	b.n	8003196 <HAL_LPTIM_Init+0x7e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80031d6:	221e      	movs	r2, #30
 80031d8:	4393      	bics	r3, r2
 80031da:	e7c7      	b.n	800316c <HAL_LPTIM_Init+0x54>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80031dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80031de:	4313      	orrs	r3, r2
 80031e0:	6243      	str	r3, [r0, #36]	@ 0x24
 80031e2:	e7ea      	b.n	80031ba <HAL_LPTIM_Init+0xa2>
    return HAL_ERROR;
 80031e4:	2001      	movs	r0, #1
 80031e6:	e7ec      	b.n	80031c2 <HAL_LPTIM_Init+0xaa>
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <HAL_LPTIM_Init+0x104>)
 80031ea:	6383      	str	r3, [r0, #56]	@ 0x38
 80031ec:	e7af      	b.n	800314e <HAL_LPTIM_Init+0x36>
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	08003101 	.word	0x08003101
 80031f4:	08003105 	.word	0x08003105
 80031f8:	08003109 	.word	0x08003109
 80031fc:	0800310d 	.word	0x0800310d
 8003200:	08003111 	.word	0x08003111
 8003204:	08003115 	.word	0x08003115
 8003208:	080030fd 	.word	0x080030fd
 800320c:	0000ffff 	.word	0x0000ffff
 8003210:	ffff1f3f 	.word	0xffff1f3f
 8003214:	ff19f1fe 	.word	0xff19f1fe
 8003218:	40007c00 	.word	0x40007c00
 800321c:	08001745 	.word	0x08001745

08003220 <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003220:	2201      	movs	r2, #1
 8003222:	6803      	ldr	r3, [r0, #0]
{
 8003224:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003226:	6819      	ldr	r1, [r3, #0]
{
 8003228:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800322a:	420a      	tst	r2, r1
 800322c:	d002      	beq.n	8003234 <HAL_LPTIM_IRQHandler+0x14>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800322e:	6899      	ldr	r1, [r3, #8]
 8003230:	420a      	tst	r2, r1
 8003232:	d14c      	bne.n	80032ce <HAL_LPTIM_IRQHandler+0xae>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003234:	2202      	movs	r2, #2
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	420a      	tst	r2, r1
 800323a:	d002      	beq.n	8003242 <HAL_LPTIM_IRQHandler+0x22>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	420a      	tst	r2, r1
 8003240:	d13f      	bne.n	80032c2 <HAL_LPTIM_IRQHandler+0xa2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003242:	2204      	movs	r2, #4
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	420a      	tst	r2, r1
 8003248:	d002      	beq.n	8003250 <HAL_LPTIM_IRQHandler+0x30>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800324a:	6899      	ldr	r1, [r3, #8]
 800324c:	420a      	tst	r2, r1
 800324e:	d132      	bne.n	80032b6 <HAL_LPTIM_IRQHandler+0x96>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003250:	2208      	movs	r2, #8
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	420a      	tst	r2, r1
 8003256:	d002      	beq.n	800325e <HAL_LPTIM_IRQHandler+0x3e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	420a      	tst	r2, r1
 800325c:	d125      	bne.n	80032aa <HAL_LPTIM_IRQHandler+0x8a>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800325e:	2210      	movs	r2, #16
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	420a      	tst	r2, r1
 8003264:	d002      	beq.n	800326c <HAL_LPTIM_IRQHandler+0x4c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	420a      	tst	r2, r1
 800326a:	d118      	bne.n	800329e <HAL_LPTIM_IRQHandler+0x7e>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800326c:	2220      	movs	r2, #32
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	420a      	tst	r2, r1
 8003272:	d002      	beq.n	800327a <HAL_LPTIM_IRQHandler+0x5a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	420a      	tst	r2, r1
 8003278:	d10b      	bne.n	8003292 <HAL_LPTIM_IRQHandler+0x72>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800327a:	2240      	movs	r2, #64	@ 0x40
 800327c:	6819      	ldr	r1, [r3, #0]
 800327e:	420a      	tst	r2, r1
 8003280:	d006      	beq.n	8003290 <HAL_LPTIM_IRQHandler+0x70>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	420a      	tst	r2, r1
 8003286:	d003      	beq.n	8003290 <HAL_LPTIM_IRQHandler+0x70>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003288:	605a      	str	r2, [r3, #4]
      hlptim->DirectionDownCallback(hlptim);
 800328a:	0020      	movs	r0, r4
 800328c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800328e:	4798      	blx	r3
}
 8003290:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003292:	605a      	str	r2, [r3, #4]
      hlptim->DirectionUpCallback(hlptim);
 8003294:	0020      	movs	r0, r4
 8003296:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003298:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	e7ed      	b.n	800327a <HAL_LPTIM_IRQHandler+0x5a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800329e:	605a      	str	r2, [r3, #4]
      hlptim->AutoReloadWriteCallback(hlptim);
 80032a0:	0020      	movs	r0, r4
 80032a2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80032a4:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	e7e0      	b.n	800326c <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80032aa:	605a      	str	r2, [r3, #4]
      hlptim->CompareWriteCallback(hlptim);
 80032ac:	0020      	movs	r0, r4
 80032ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80032b0:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	e7d3      	b.n	800325e <HAL_LPTIM_IRQHandler+0x3e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80032b6:	605a      	str	r2, [r3, #4]
      hlptim->TriggerCallback(hlptim);
 80032b8:	0020      	movs	r0, r4
 80032ba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80032bc:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	e7c6      	b.n	8003250 <HAL_LPTIM_IRQHandler+0x30>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80032c2:	605a      	str	r2, [r3, #4]
      hlptim->AutoReloadMatchCallback(hlptim);
 80032c4:	0020      	movs	r0, r4
 80032c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80032c8:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	e7b9      	b.n	8003242 <HAL_LPTIM_IRQHandler+0x22>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80032ce:	605a      	str	r2, [r3, #4]
      hlptim->CompareMatchCallback(hlptim);
 80032d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80032d2:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	e7ad      	b.n	8003234 <HAL_LPTIM_IRQHandler+0x14>

080032d8 <HAL_LPTIM_RegisterCallback>:
{
 80032d8:	0003      	movs	r3, r0
 80032da:	b530      	push	{r4, r5, lr}
  if (pCallback == NULL)
 80032dc:	2a00      	cmp	r2, #0
 80032de:	d019      	beq.n	8003314 <HAL_LPTIM_RegisterCallback+0x3c>
  if (hlptim->State == HAL_LPTIM_STATE_READY)
 80032e0:	2536      	movs	r5, #54	@ 0x36
 80032e2:	5d44      	ldrb	r4, [r0, r5]
 80032e4:	b2e0      	uxtb	r0, r4
 80032e6:	2c01      	cmp	r4, #1
 80032e8:	d008      	beq.n	80032fc <HAL_LPTIM_RegisterCallback+0x24>
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80032ea:	5d5c      	ldrb	r4, [r3, r5]
    return HAL_ERROR;
 80032ec:	2001      	movs	r0, #1
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80032ee:	2c00      	cmp	r4, #0
 80032f0:	d103      	bne.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
    switch (CallbackID)
 80032f2:	2900      	cmp	r1, #0
 80032f4:	d00b      	beq.n	800330e <HAL_LPTIM_RegisterCallback+0x36>
 80032f6:	2901      	cmp	r1, #1
 80032f8:	d006      	beq.n	8003308 <HAL_LPTIM_RegisterCallback+0x30>
}
 80032fa:	bd30      	pop	{r4, r5, pc}
    switch (CallbackID)
 80032fc:	2908      	cmp	r1, #8
 80032fe:	d8fc      	bhi.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
 8003300:	4810      	ldr	r0, [pc, #64]	@ (8003344 <HAL_LPTIM_RegisterCallback+0x6c>)
 8003302:	0089      	lsls	r1, r1, #2
 8003304:	5841      	ldr	r1, [r0, r1]
 8003306:	468f      	mov	pc, r1
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2000      	movs	r0, #0
        hlptim->MspDeInitCallback = pCallback;
 800330a:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800330c:	e7f5      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2000      	movs	r0, #0
        hlptim->MspInitCallback = pCallback;
 8003310:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003312:	e7f2      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
    return HAL_ERROR;
 8003314:	2001      	movs	r0, #1
 8003316:	e7f0      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2000      	movs	r0, #0
        hlptim->DirectionDownCallback = pCallback;
 800331a:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800331c:	e7ed      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2000      	movs	r0, #0
        hlptim->CompareMatchCallback = pCallback;
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8003322:	e7ea      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2000      	movs	r0, #0
        hlptim->AutoReloadMatchCallback = pCallback;
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8003328:	e7e7      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2000      	movs	r0, #0
        hlptim->TriggerCallback = pCallback;
 800332c:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800332e:	e7e4      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2000      	movs	r0, #0
        hlptim->CompareWriteCallback = pCallback;
 8003332:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003334:	e7e1      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003336:	2000      	movs	r0, #0
        hlptim->AutoReloadWriteCallback = pCallback;
 8003338:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800333a:	e7de      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2000      	movs	r0, #0
        hlptim->DirectionUpCallback = pCallback;
 800333e:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003340:	e7db      	b.n	80032fa <HAL_LPTIM_RegisterCallback+0x22>
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	08006f08 	.word	0x08006f08

08003348 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	4645      	mov	r5, r8
 800334c:	46de      	mov	lr, fp
 800334e:	4657      	mov	r7, sl
 8003350:	464e      	mov	r6, r9
 8003352:	b5e0      	push	{r5, r6, r7, lr}
 8003354:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335a:	2301      	movs	r3, #1
 800335c:	f383 8810 	msr	PRIMASK, r3
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003360:	4b63      	ldr	r3, [pc, #396]	@ (80034f0 <LPTIM_Disable+0x1a8>)
 8003362:	6804      	ldr	r4, [r0, #0]
 8003364:	429c      	cmp	r4, r3
 8003366:	d067      	beq.n	8003438 <LPTIM_Disable+0xf0>
 8003368:	4b62      	ldr	r3, [pc, #392]	@ (80034f4 <LPTIM_Disable+0x1ac>)
 800336a:	429c      	cmp	r4, r3
 800336c:	d100      	bne.n	8003370 <LPTIM_Disable+0x28>
 800336e:	e08e      	b.n	800348e <LPTIM_Disable+0x146>
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003370:	68a3      	ldr	r3, [r4, #8]
 8003372:	469a      	mov	sl, r3
  tmpCFGR = hlptim->Instance->CFGR;
 8003374:	68e3      	ldr	r3, [r4, #12]
  tmpCMP = hlptim->Instance->CMP;
 8003376:	6966      	ldr	r6, [r4, #20]
  tmpCFGR = hlptim->Instance->CFGR;
 8003378:	4699      	mov	r9, r3
  tmpARR = hlptim->Instance->ARR;
 800337a:	69a3      	ldr	r3, [r4, #24]
 800337c:	469b      	mov	fp, r3
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800337e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003380:	4698      	mov	r8, r3
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003382:	465b      	mov	r3, fp
 8003384:	4333      	orrs	r3, r6
 8003386:	d045      	beq.n	8003414 <LPTIM_Disable+0xcc>
#endif /* LPTIM2 */
      default:
        break;
    }

    if (tmpCMP != 0UL)
 8003388:	2e00      	cmp	r6, #0
 800338a:	d01a      	beq.n	80033c2 <LPTIM_Disable+0x7a>
  tmpCMP = hlptim->Instance->CMP;
 800338c:	0032      	movs	r2, r6
  uint32_t tmpclksource = 0;
 800338e:	2600      	movs	r6, #0
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003390:	2101      	movs	r1, #1
 8003392:	6923      	ldr	r3, [r4, #16]
 8003394:	430b      	orrs	r3, r1
 8003396:	6123      	str	r3, [r4, #16]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003398:	4b57      	ldr	r3, [pc, #348]	@ (80034f8 <LPTIM_Disable+0x1b0>)
 800339a:	4958      	ldr	r1, [pc, #352]	@ (80034fc <LPTIM_Disable+0x1b4>)
 800339c:	6818      	ldr	r0, [r3, #0]
      hlptim->Instance->CMP = tmpCMP;
 800339e:	6162      	str	r2, [r4, #20]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80033a0:	f7fc feb0 	bl	8000104 <__udivsi3>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80033a4:	2108      	movs	r1, #8
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80033a6:	0143      	lsls	r3, r0, #5
 80033a8:	1a1b      	subs	r3, r3, r0
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	181b      	adds	r3, r3, r0
 80033ae:	00db      	lsls	r3, r3, #3
    count--;
 80033b0:	3b01      	subs	r3, #1
    if (count == 0UL)
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d100      	bne.n	80033b8 <LPTIM_Disable+0x70>
 80033b6:	e095      	b.n	80034e4 <LPTIM_Disable+0x19c>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	4211      	tst	r1, r2
 80033bc:	d0f8      	beq.n	80033b0 <LPTIM_Disable+0x68>
      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80033be:	2308      	movs	r3, #8
 80033c0:	6063      	str	r3, [r4, #4]
    }

    if (tmpARR != 0UL)
 80033c2:	465b      	mov	r3, fp
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d019      	beq.n	80033fc <LPTIM_Disable+0xb4>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80033c8:	2201      	movs	r2, #1
 80033ca:	6923      	ldr	r3, [r4, #16]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80033cc:	494b      	ldr	r1, [pc, #300]	@ (80034fc <LPTIM_Disable+0x1b4>)
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80033ce:	4313      	orrs	r3, r2
 80033d0:	6123      	str	r3, [r4, #16]
      hlptim->Instance->ARR = tmpARR;
 80033d2:	465b      	mov	r3, fp
 80033d4:	61a3      	str	r3, [r4, #24]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80033d6:	4b48      	ldr	r3, [pc, #288]	@ (80034f8 <LPTIM_Disable+0x1b0>)
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	f7fc fe93 	bl	8000104 <__udivsi3>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80033de:	2110      	movs	r1, #16
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80033e0:	0143      	lsls	r3, r0, #5
 80033e2:	1a1b      	subs	r3, r3, r0
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	181b      	adds	r3, r3, r0
 80033e8:	00db      	lsls	r3, r3, #3
    count--;
 80033ea:	3b01      	subs	r3, #1
    if (count == 0UL)
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d100      	bne.n	80033f2 <LPTIM_Disable+0xaa>
 80033f0:	e073      	b.n	80034da <LPTIM_Disable+0x192>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80033f2:	6822      	ldr	r2, [r4, #0]
 80033f4:	4211      	tst	r1, r2
 80033f6:	d0f8      	beq.n	80033ea <LPTIM_Disable+0xa2>
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80033f8:	2310      	movs	r3, #16
 80033fa:	6063      	str	r3, [r4, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80033fc:	4b3c      	ldr	r3, [pc, #240]	@ (80034f0 <LPTIM_Disable+0x1a8>)
 80033fe:	429c      	cmp	r4, r3
 8003400:	d03e      	beq.n	8003480 <LPTIM_Disable+0x138>
 8003402:	4b3c      	ldr	r3, [pc, #240]	@ (80034f4 <LPTIM_Disable+0x1ac>)
 8003404:	429c      	cmp	r4, r3
 8003406:	d105      	bne.n	8003414 <LPTIM_Disable+0xcc>
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
        break;
#if defined(LPTIM2)
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8003408:	4a3d      	ldr	r2, [pc, #244]	@ (8003500 <LPTIM_Disable+0x1b8>)
 800340a:	493e      	ldr	r1, [pc, #248]	@ (8003504 <LPTIM_Disable+0x1bc>)
 800340c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800340e:	400b      	ands	r3, r1
 8003410:	4333      	orrs	r3, r6
 8003412:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003414:	2201      	movs	r2, #1
 8003416:	6923      	ldr	r3, [r4, #16]
 8003418:	4393      	bics	r3, r2
 800341a:	6123      	str	r3, [r4, #16]
  hlptim->Instance->IER = tmpIER;
 800341c:	4653      	mov	r3, sl
 800341e:	60a3      	str	r3, [r4, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8003420:	464b      	mov	r3, r9
 8003422:	60e3      	str	r3, [r4, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8003424:	4643      	mov	r3, r8
 8003426:	6263      	str	r3, [r4, #36]	@ 0x24
 8003428:	f387 8810 	msr	PRIMASK, r7

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800342c:	bcf0      	pop	{r4, r5, r6, r7}
 800342e:	46bb      	mov	fp, r7
 8003430:	46b2      	mov	sl, r6
 8003432:	46a9      	mov	r9, r5
 8003434:	46a0      	mov	r8, r4
 8003436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003438:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <LPTIM_Disable+0x1b8>)
 800343a:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
  tmpIER = hlptim->Instance->IER;
 800343c:	68a2      	ldr	r2, [r4, #8]
 800343e:	4692      	mov	sl, r2
  tmpCFGR = hlptim->Instance->CFGR;
 8003440:	68e2      	ldr	r2, [r4, #12]
 8003442:	4691      	mov	r9, r2
  tmpCMP = hlptim->Instance->CMP;
 8003444:	6962      	ldr	r2, [r4, #20]
  tmpARR = hlptim->Instance->ARR;
 8003446:	69a1      	ldr	r1, [r4, #24]
 8003448:	468b      	mov	fp, r1
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800344a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800344c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800344e:	4688      	mov	r8, r1
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003450:	2180      	movs	r1, #128	@ 0x80
 8003452:	0609      	lsls	r1, r1, #24
 8003454:	4301      	orrs	r1, r0
 8003456:	62d9      	str	r1, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003458:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800345a:	0049      	lsls	r1, r1, #1
 800345c:	0849      	lsrs	r1, r1, #1
 800345e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003460:	4659      	mov	r1, fp
 8003462:	4311      	orrs	r1, r2
 8003464:	d0d6      	beq.n	8003414 <LPTIM_Disable+0xcc>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003466:	21c0      	movs	r1, #192	@ 0xc0
 8003468:	0309      	lsls	r1, r1, #12
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800346a:	4827      	ldr	r0, [pc, #156]	@ (8003508 <LPTIM_Disable+0x1c0>)
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800346c:	400e      	ands	r6, r1
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800346e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003470:	4001      	ands	r1, r0
 8003472:	6559      	str	r1, [r3, #84]	@ 0x54
    if (tmpCMP != 0UL)
 8003474:	2a00      	cmp	r2, #0
 8003476:	d000      	beq.n	800347a <LPTIM_Disable+0x132>
 8003478:	e78a      	b.n	8003390 <LPTIM_Disable+0x48>
    if (tmpARR != 0UL)
 800347a:	465b      	mov	r3, fp
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1a3      	bne.n	80033c8 <LPTIM_Disable+0x80>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003480:	4a1f      	ldr	r2, [pc, #124]	@ (8003500 <LPTIM_Disable+0x1b8>)
 8003482:	4921      	ldr	r1, [pc, #132]	@ (8003508 <LPTIM_Disable+0x1c0>)
 8003484:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003486:	400b      	ands	r3, r1
 8003488:	4333      	orrs	r3, r6
 800348a:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 800348c:	e7c2      	b.n	8003414 <LPTIM_Disable+0xcc>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800348e:	4b1c      	ldr	r3, [pc, #112]	@ (8003500 <LPTIM_Disable+0x1b8>)
 8003490:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
  tmpIER = hlptim->Instance->IER;
 8003492:	68a2      	ldr	r2, [r4, #8]
 8003494:	4692      	mov	sl, r2
  tmpCFGR = hlptim->Instance->CFGR;
 8003496:	68e2      	ldr	r2, [r4, #12]
 8003498:	4691      	mov	r9, r2
  tmpCMP = hlptim->Instance->CMP;
 800349a:	6962      	ldr	r2, [r4, #20]
  tmpARR = hlptim->Instance->ARR;
 800349c:	69a1      	ldr	r1, [r4, #24]
 800349e:	468b      	mov	fp, r1
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80034a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80034a2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80034a4:	4688      	mov	r8, r1
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80034a6:	2180      	movs	r1, #128	@ 0x80
 80034a8:	05c9      	lsls	r1, r1, #23
 80034aa:	4301      	orrs	r1, r0
 80034ac:	62d9      	str	r1, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80034ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034b0:	4816      	ldr	r0, [pc, #88]	@ (800350c <LPTIM_Disable+0x1c4>)
 80034b2:	4001      	ands	r1, r0
 80034b4:	62d9      	str	r1, [r3, #44]	@ 0x2c
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80034b6:	4659      	mov	r1, fp
 80034b8:	4311      	orrs	r1, r2
 80034ba:	d0ab      	beq.n	8003414 <LPTIM_Disable+0xcc>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80034bc:	21c0      	movs	r1, #192	@ 0xc0
 80034be:	0389      	lsls	r1, r1, #14
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80034c0:	4810      	ldr	r0, [pc, #64]	@ (8003504 <LPTIM_Disable+0x1bc>)
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80034c2:	400e      	ands	r6, r1
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80034c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034c6:	4001      	ands	r1, r0
 80034c8:	6559      	str	r1, [r3, #84]	@ 0x54
    if (tmpCMP != 0UL)
 80034ca:	2a00      	cmp	r2, #0
 80034cc:	d000      	beq.n	80034d0 <LPTIM_Disable+0x188>
 80034ce:	e75f      	b.n	8003390 <LPTIM_Disable+0x48>
    if (tmpARR != 0UL)
 80034d0:	465b      	mov	r3, fp
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d000      	beq.n	80034d8 <LPTIM_Disable+0x190>
 80034d6:	e777      	b.n	80033c8 <LPTIM_Disable+0x80>
 80034d8:	e796      	b.n	8003408 <LPTIM_Disable+0xc0>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80034da:	6823      	ldr	r3, [r4, #0]
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80034dc:	2203      	movs	r2, #3
 80034de:	2336      	movs	r3, #54	@ 0x36
 80034e0:	54ea      	strb	r2, [r5, r3]
 80034e2:	e789      	b.n	80033f8 <LPTIM_Disable+0xb0>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80034e4:	6823      	ldr	r3, [r4, #0]
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80034e6:	2203      	movs	r2, #3
 80034e8:	2336      	movs	r3, #54	@ 0x36
 80034ea:	54ea      	strb	r2, [r5, r3]
 80034ec:	e767      	b.n	80033be <LPTIM_Disable+0x76>
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	40007c00 	.word	0x40007c00
 80034f4:	40009400 	.word	0x40009400
 80034f8:	2000040c 	.word	0x2000040c
 80034fc:	00004e20 	.word	0x00004e20
 8003500:	40021000 	.word	0x40021000
 8003504:	ffcfffff 	.word	0xffcfffff
 8003508:	fff3ffff 	.word	0xfff3ffff
 800350c:	bfffffff 	.word	0xbfffffff

08003510 <HAL_LPTIM_SetOnce_Start_IT>:
{
 8003510:	b570      	push	{r4, r5, r6, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003512:	2336      	movs	r3, #54	@ 0x36
{
 8003514:	0016      	movs	r6, r2
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003516:	2202      	movs	r2, #2
 8003518:	54c2      	strb	r2, [r0, r3]
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 800351a:	2380      	movs	r3, #128	@ 0x80
 800351c:	6804      	ldr	r4, [r0, #0]
 800351e:	035b      	lsls	r3, r3, #13
 8003520:	68e2      	ldr	r2, [r4, #12]
{
 8003522:	0005      	movs	r5, r0
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8003524:	4313      	orrs	r3, r2
  __HAL_LPTIM_ENABLE(hlptim);
 8003526:	2201      	movs	r2, #1
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8003528:	60e3      	str	r3, [r4, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 800352a:	6923      	ldr	r3, [r4, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	6123      	str	r3, [r4, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003530:	2310      	movs	r3, #16
 8003532:	6063      	str	r3, [r4, #4]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003534:	4b25      	ldr	r3, [pc, #148]	@ (80035cc <HAL_LPTIM_SetOnce_Start_IT+0xbc>)
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003536:	61a1      	str	r1, [r4, #24]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	4925      	ldr	r1, [pc, #148]	@ (80035d0 <HAL_LPTIM_SetOnce_Start_IT+0xc0>)
 800353c:	f7fc fde2 	bl	8000104 <__udivsi3>
 8003540:	0143      	lsls	r3, r0, #5
 8003542:	1a1b      	subs	r3, r3, r0
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	181b      	adds	r3, r3, r0
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	001a      	movs	r2, r3
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800354c:	2010      	movs	r0, #16
    count--;
 800354e:	3a01      	subs	r2, #1
    if (count == 0UL)
 8003550:	2a00      	cmp	r2, #0
 8003552:	d037      	beq.n	80035c4 <HAL_LPTIM_SetOnce_Start_IT+0xb4>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003554:	6821      	ldr	r1, [r4, #0]
 8003556:	4208      	tst	r0, r1
 8003558:	d0f9      	beq.n	800354e <HAL_LPTIM_SetOnce_Start_IT+0x3e>
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800355a:	2208      	movs	r2, #8
 800355c:	6062      	str	r2, [r4, #4]
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800355e:	6166      	str	r6, [r4, #20]
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003560:	2608      	movs	r6, #8
    count--;
 8003562:	3b01      	subs	r3, #1
    if (count == 0UL)
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02d      	beq.n	80035c4 <HAL_LPTIM_SetOnce_Start_IT+0xb4>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	4216      	tst	r6, r2
 800356c:	d0f9      	beq.n	8003562 <HAL_LPTIM_SetOnce_Start_IT+0x52>
  __HAL_LPTIM_DISABLE(hlptim);
 800356e:	0028      	movs	r0, r5
 8003570:	f7ff feea 	bl	8003348 <LPTIM_Disable>
  return hlptim->State;
 8003574:	2336      	movs	r3, #54	@ 0x36
 8003576:	5ceb      	ldrb	r3, [r5, r3]
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003578:	2b03      	cmp	r3, #3
 800357a:	d024      	beq.n	80035c6 <HAL_LPTIM_SetOnce_Start_IT+0xb6>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800357c:	2110      	movs	r1, #16
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8003586:	689a      	ldr	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003588:	390e      	subs	r1, #14
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 800358a:	4332      	orrs	r2, r6
 800358c:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	3901      	subs	r1, #1
 8003598:	430a      	orrs	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800359c:	6969      	ldr	r1, [r5, #20]
 800359e:	4a0d      	ldr	r2, [pc, #52]	@ (80035d4 <HAL_LPTIM_SetOnce_Start_IT+0xc4>)
 80035a0:	4291      	cmp	r1, r2
 80035a2:	d003      	beq.n	80035ac <HAL_LPTIM_SetOnce_Start_IT+0x9c>
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 80035a4:	2104      	movs	r1, #4
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 80035ac:	2101      	movs	r1, #1
  __HAL_LPTIM_START_SINGLE(hlptim);
 80035ae:	2002      	movs	r0, #2
  __HAL_LPTIM_ENABLE(hlptim);
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_START_SINGLE(hlptim);
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	4302      	orrs	r2, r0
 80035ba:	611a      	str	r2, [r3, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80035bc:	2336      	movs	r3, #54	@ 0x36
  return HAL_OK;
 80035be:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80035c0:	54e9      	strb	r1, [r5, r3]
}
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80035c4:	6823      	ldr	r3, [r4, #0]
    return HAL_TIMEOUT;
 80035c6:	2003      	movs	r0, #3
 80035c8:	e7fb      	b.n	80035c2 <HAL_LPTIM_SetOnce_Start_IT+0xb2>
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	2000040c 	.word	0x2000040c
 80035d0:	00004e20 	.word	0x00004e20
 80035d4:	0000ffff 	.word	0x0000ffff

080035d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80035da:	4c13      	ldr	r4, [pc, #76]	@ (8003628 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80035dc:	4a13      	ldr	r2, [pc, #76]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x54>)
 80035de:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80035e0:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80035e2:	4013      	ands	r3, r2
 80035e4:	4303      	orrs	r3, r0
 80035e6:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4298      	cmp	r0, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 80035f0:	0028      	movs	r0, r5
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0x58>)
 80035f6:	490f      	ldr	r1, [pc, #60]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	0058      	lsls	r0, r3, #1
 80035fc:	18c0      	adds	r0, r0, r3
 80035fe:	0040      	lsls	r0, r0, #1
 8003600:	f7fc fd80 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003604:	2280      	movs	r2, #128	@ 0x80
 8003606:	6963      	ldr	r3, [r4, #20]
 8003608:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800360a:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800360c:	4213      	tst	r3, r2
 800360e:	d102      	bne.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8003610:	e7ee      	b.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8003612:	2800      	cmp	r0, #0
 8003614:	d005      	beq.n	8003622 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003616:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8003618:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800361a:	4213      	tst	r3, r2
 800361c:	d1f9      	bne.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 800361e:	2500      	movs	r5, #0
 8003620:	e7e6      	b.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8003622:	2503      	movs	r5, #3
 8003624:	e7e4      	b.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x18>
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	40007000 	.word	0x40007000
 800362c:	fffff9ff 	.word	0xfffff9ff
 8003630:	2000040c 	.word	0x2000040c
 8003634:	000f4240 	.word	0x000f4240

08003638 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	46ce      	mov	lr, r9
 800363c:	4647      	mov	r7, r8
 800363e:	b580      	push	{r7, lr}
 8003640:	0004      	movs	r4, r0
 8003642:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003644:	2800      	cmp	r0, #0
 8003646:	d027      	beq.n	8003698 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003648:	6803      	ldr	r3, [r0, #0]
 800364a:	07da      	lsls	r2, r3, #31
 800364c:	d511      	bpl.n	8003672 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364e:	2238      	movs	r2, #56	@ 0x38
 8003650:	49c0      	ldr	r1, [pc, #768]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 8003652:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003654:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003656:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003658:	2a10      	cmp	r2, #16
 800365a:	d100      	bne.n	800365e <HAL_RCC_OscConfig+0x26>
 800365c:	e0cc      	b.n	80037f8 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800365e:	2a08      	cmp	r2, #8
 8003660:	d000      	beq.n	8003664 <HAL_RCC_OscConfig+0x2c>
 8003662:	e0cd      	b.n	8003800 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	4abb      	ldr	r2, [pc, #748]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	0392      	lsls	r2, r2, #14
 800366a:	d502      	bpl.n	8003672 <HAL_RCC_OscConfig+0x3a>
 800366c:	6862      	ldr	r2, [r4, #4]
 800366e:	2a00      	cmp	r2, #0
 8003670:	d012      	beq.n	8003698 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003672:	079a      	lsls	r2, r3, #30
 8003674:	d532      	bpl.n	80036dc <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	2338      	movs	r3, #56	@ 0x38
 8003678:	4ab6      	ldr	r2, [pc, #728]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 800367a:	6891      	ldr	r1, [r2, #8]
 800367c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800367e:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003680:	2b10      	cmp	r3, #16
 8003682:	d100      	bne.n	8003686 <HAL_RCC_OscConfig+0x4e>
 8003684:	e10b      	b.n	800389e <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003686:	2b00      	cmp	r3, #0
 8003688:	d000      	beq.n	800368c <HAL_RCC_OscConfig+0x54>
 800368a:	e10d      	b.n	80038a8 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368c:	6813      	ldr	r3, [r2, #0]
 800368e:	055b      	lsls	r3, r3, #21
 8003690:	d508      	bpl.n	80036a4 <HAL_RCC_OscConfig+0x6c>
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8003698:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800369a:	b003      	add	sp, #12
 800369c:	bcc0      	pop	{r6, r7}
 800369e:	46b9      	mov	r9, r7
 80036a0:	46b0      	mov	r8, r6
 80036a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	6851      	ldr	r1, [r2, #4]
 80036a6:	6963      	ldr	r3, [r4, #20]
 80036a8:	48ab      	ldr	r0, [pc, #684]	@ (8003958 <HAL_RCC_OscConfig+0x320>)
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	4001      	ands	r1, r0
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80036b2:	4aa8      	ldr	r2, [pc, #672]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 80036b4:	49a9      	ldr	r1, [pc, #676]	@ (800395c <HAL_RCC_OscConfig+0x324>)
 80036b6:	6813      	ldr	r3, [r2, #0]
 80036b8:	400b      	ands	r3, r1
 80036ba:	6921      	ldr	r1, [r4, #16]
 80036bc:	430b      	orrs	r3, r1
 80036be:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	4aa7      	ldr	r2, [pc, #668]	@ (8003960 <HAL_RCC_OscConfig+0x328>)
 80036c4:	049b      	lsls	r3, r3, #18
 80036c6:	0f5b      	lsrs	r3, r3, #29
 80036c8:	40da      	lsrs	r2, r3
 80036ca:	49a6      	ldr	r1, [pc, #664]	@ (8003964 <HAL_RCC_OscConfig+0x32c>)
 80036cc:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036ce:	4ba6      	ldr	r3, [pc, #664]	@ (8003968 <HAL_RCC_OscConfig+0x330>)
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	f7fe fc2d 	bl	8001f30 <HAL_InitTick>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d1de      	bne.n	8003698 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	071a      	lsls	r2, r3, #28
 80036de:	d46d      	bmi.n	80037bc <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e0:	075b      	lsls	r3, r3, #29
 80036e2:	d545      	bpl.n	8003770 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80036e4:	2338      	movs	r3, #56	@ 0x38
 80036e6:	4a9b      	ldr	r2, [pc, #620]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 80036e8:	6891      	ldr	r1, [r2, #8]
 80036ea:	400b      	ands	r3, r1
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d100      	bne.n	80036f2 <HAL_RCC_OscConfig+0xba>
 80036f0:	e0cc      	b.n	800388c <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036f2:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80036f4:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036f6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80036f8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80036fa:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036fc:	4219      	tst	r1, r3
 80036fe:	d108      	bne.n	8003712 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003702:	4319      	orrs	r1, r3
 8003704:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8003706:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003708:	4013      	ands	r3, r2
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800370e:	2301      	movs	r3, #1
 8003710:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003712:	2780      	movs	r7, #128	@ 0x80
 8003714:	4e95      	ldr	r6, [pc, #596]	@ (800396c <HAL_RCC_OscConfig+0x334>)
 8003716:	007f      	lsls	r7, r7, #1
 8003718:	6833      	ldr	r3, [r6, #0]
 800371a:	423b      	tst	r3, r7
 800371c:	d100      	bne.n	8003720 <HAL_RCC_OscConfig+0xe8>
 800371e:	e0ff      	b.n	8003920 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003720:	68a3      	ldr	r3, [r4, #8]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d100      	bne.n	8003728 <HAL_RCC_OscConfig+0xf0>
 8003726:	e0e5      	b.n	80038f4 <HAL_RCC_OscConfig+0x2bc>
 8003728:	2b05      	cmp	r3, #5
 800372a:	d100      	bne.n	800372e <HAL_RCC_OscConfig+0xf6>
 800372c:	e1d1      	b.n	8003ad2 <HAL_RCC_OscConfig+0x49a>
 800372e:	2101      	movs	r1, #1
 8003730:	4e88      	ldr	r6, [pc, #544]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 8003732:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8003734:	438a      	bics	r2, r1
 8003736:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8003738:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 800373a:	3103      	adds	r1, #3
 800373c:	438a      	bics	r2, r1
 800373e:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003740:	2b00      	cmp	r3, #0
 8003742:	d000      	beq.n	8003746 <HAL_RCC_OscConfig+0x10e>
 8003744:	e0da      	b.n	80038fc <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8003746:	f7fe fc39 	bl	8001fbc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800374a:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 800374c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800374e:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	4d87      	ldr	r5, [pc, #540]	@ (8003970 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003752:	e005      	b.n	8003760 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fe fc32 	bl	8001fbc <HAL_GetTick>
 8003758:	1bc0      	subs	r0, r0, r7
 800375a:	42a8      	cmp	r0, r5
 800375c:	d900      	bls.n	8003760 <HAL_RCC_OscConfig+0x128>
 800375e:	e0ee      	b.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003760:	4642      	mov	r2, r8
 8003762:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8003764:	421a      	tst	r2, r3
 8003766:	d1f5      	bne.n	8003754 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8003768:	464b      	mov	r3, r9
 800376a:	2b01      	cmp	r3, #1
 800376c:	d100      	bne.n	8003770 <HAL_RCC_OscConfig+0x138>
 800376e:	e16a      	b.n	8003a46 <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003770:	69e3      	ldr	r3, [r4, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d020      	beq.n	80037b8 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003776:	2238      	movs	r2, #56	@ 0x38
 8003778:	4d76      	ldr	r5, [pc, #472]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 800377a:	68a9      	ldr	r1, [r5, #8]
 800377c:	400a      	ands	r2, r1
 800377e:	2a10      	cmp	r2, #16
 8003780:	d100      	bne.n	8003784 <HAL_RCC_OscConfig+0x14c>
 8003782:	e11d      	b.n	80039c0 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003784:	2b02      	cmp	r3, #2
 8003786:	d100      	bne.n	800378a <HAL_RCC_OscConfig+0x152>
 8003788:	e163      	b.n	8003a52 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 800378a:	682b      	ldr	r3, [r5, #0]
 800378c:	4a79      	ldr	r2, [pc, #484]	@ (8003974 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003790:	4013      	ands	r3, r2
 8003792:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003794:	f7fe fc12 	bl	8001fbc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003798:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800379a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379c:	e005      	b.n	80037aa <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379e:	f7fe fc0d 	bl	8001fbc <HAL_GetTick>
 80037a2:	1b00      	subs	r0, r0, r4
 80037a4:	2802      	cmp	r0, #2
 80037a6:	d900      	bls.n	80037aa <HAL_RCC_OscConfig+0x172>
 80037a8:	e0c9      	b.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037aa:	682b      	ldr	r3, [r5, #0]
 80037ac:	4233      	tst	r3, r6
 80037ae:	d1f6      	bne.n	800379e <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80037b0:	68eb      	ldr	r3, [r5, #12]
 80037b2:	4a71      	ldr	r2, [pc, #452]	@ (8003978 <HAL_RCC_OscConfig+0x340>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 80037b8:	2000      	movs	r0, #0
 80037ba:	e76e      	b.n	800369a <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037bc:	2238      	movs	r2, #56	@ 0x38
 80037be:	4d65      	ldr	r5, [pc, #404]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 80037c0:	68a9      	ldr	r1, [r5, #8]
 80037c2:	400a      	ands	r2, r1
 80037c4:	2a18      	cmp	r2, #24
 80037c6:	d043      	beq.n	8003850 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c8:	69a3      	ldr	r3, [r4, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d100      	bne.n	80037d0 <HAL_RCC_OscConfig+0x198>
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 80037d0:	2201      	movs	r2, #1
 80037d2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80037d6:	4313      	orrs	r3, r2
 80037d8:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80037da:	f7fe fbef 	bl	8001fbc <HAL_GetTick>
 80037de:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e0:	e005      	b.n	80037ee <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e2:	f7fe fbeb 	bl	8001fbc <HAL_GetTick>
 80037e6:	1b80      	subs	r0, r0, r6
 80037e8:	2802      	cmp	r0, #2
 80037ea:	d900      	bls.n	80037ee <HAL_RCC_OscConfig+0x1b6>
 80037ec:	e0a7      	b.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ee:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80037f0:	421f      	tst	r7, r3
 80037f2:	d0f6      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	e773      	b.n	80036e0 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f8:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80037fa:	0789      	lsls	r1, r1, #30
 80037fc:	d100      	bne.n	8003800 <HAL_RCC_OscConfig+0x1c8>
 80037fe:	e731      	b.n	8003664 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	0252      	lsls	r2, r2, #9
 8003806:	4293      	cmp	r3, r2
 8003808:	d02b      	beq.n	8003862 <HAL_RCC_OscConfig+0x22a>
 800380a:	21a0      	movs	r1, #160	@ 0xa0
 800380c:	02c9      	lsls	r1, r1, #11
 800380e:	428b      	cmp	r3, r1
 8003810:	d100      	bne.n	8003814 <HAL_RCC_OscConfig+0x1dc>
 8003812:	e103      	b.n	8003a1c <HAL_RCC_OscConfig+0x3e4>
 8003814:	4d4f      	ldr	r5, [pc, #316]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 8003816:	4959      	ldr	r1, [pc, #356]	@ (800397c <HAL_RCC_OscConfig+0x344>)
 8003818:	682a      	ldr	r2, [r5, #0]
 800381a:	400a      	ands	r2, r1
 800381c:	602a      	str	r2, [r5, #0]
 800381e:	682a      	ldr	r2, [r5, #0]
 8003820:	4957      	ldr	r1, [pc, #348]	@ (8003980 <HAL_RCC_OscConfig+0x348>)
 8003822:	400a      	ands	r2, r1
 8003824:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11f      	bne.n	800386a <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 800382a:	f7fe fbc7 	bl	8001fbc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003830:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003832:	02bf      	lsls	r7, r7, #10
 8003834:	e004      	b.n	8003840 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003836:	f7fe fbc1 	bl	8001fbc <HAL_GetTick>
 800383a:	1b80      	subs	r0, r0, r6
 800383c:	2864      	cmp	r0, #100	@ 0x64
 800383e:	d87e      	bhi.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	423b      	tst	r3, r7
 8003844:	d1f7      	bne.n	8003836 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	079a      	lsls	r2, r3, #30
 800384a:	d400      	bmi.n	800384e <HAL_RCC_OscConfig+0x216>
 800384c:	e746      	b.n	80036dc <HAL_RCC_OscConfig+0xa4>
 800384e:	e712      	b.n	8003676 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003850:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8003852:	0792      	lsls	r2, r2, #30
 8003854:	d400      	bmi.n	8003858 <HAL_RCC_OscConfig+0x220>
 8003856:	e743      	b.n	80036e0 <HAL_RCC_OscConfig+0xa8>
 8003858:	69a2      	ldr	r2, [r4, #24]
 800385a:	2a00      	cmp	r2, #0
 800385c:	d000      	beq.n	8003860 <HAL_RCC_OscConfig+0x228>
 800385e:	e73f      	b.n	80036e0 <HAL_RCC_OscConfig+0xa8>
 8003860:	e71a      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003862:	4a3c      	ldr	r2, [pc, #240]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 8003864:	6811      	ldr	r1, [r2, #0]
 8003866:	430b      	orrs	r3, r1
 8003868:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800386a:	f7fe fba7 	bl	8001fbc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003870:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003872:	4f38      	ldr	r7, [pc, #224]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 8003874:	02b6      	lsls	r6, r6, #10
 8003876:	e004      	b.n	8003882 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fba0 	bl	8001fbc <HAL_GetTick>
 800387c:	1b40      	subs	r0, r0, r5
 800387e:	2864      	cmp	r0, #100	@ 0x64
 8003880:	d85d      	bhi.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	4233      	tst	r3, r6
 8003886:	d0f7      	beq.n	8003878 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	e7dd      	b.n	8003848 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800388c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800388e:	079b      	lsls	r3, r3, #30
 8003890:	d400      	bmi.n	8003894 <HAL_RCC_OscConfig+0x25c>
 8003892:	e76d      	b.n	8003770 <HAL_RCC_OscConfig+0x138>
 8003894:	68a3      	ldr	r3, [r4, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d000      	beq.n	800389c <HAL_RCC_OscConfig+0x264>
 800389a:	e769      	b.n	8003770 <HAL_RCC_OscConfig+0x138>
 800389c:	e6fc      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389e:	3b0d      	subs	r3, #13
 80038a0:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d100      	bne.n	80038a8 <HAL_RCC_OscConfig+0x270>
 80038a6:	e0c3      	b.n	8003a30 <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a8:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038aa:	4d2a      	ldr	r5, [pc, #168]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d073      	beq.n	8003998 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038b6:	4013      	ands	r3, r2
 80038b8:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ba:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038bc:	4313      	orrs	r3, r2
 80038be:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	682a      	ldr	r2, [r5, #0]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038ca:	f7fe fb77 	bl	8001fbc <HAL_GetTick>
 80038ce:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d0:	e004      	b.n	80038dc <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fe fb73 	bl	8001fbc <HAL_GetTick>
 80038d6:	1b80      	subs	r0, r0, r6
 80038d8:	2802      	cmp	r0, #2
 80038da:	d830      	bhi.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	423b      	tst	r3, r7
 80038e0:	d0f7      	beq.n	80038d2 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	686a      	ldr	r2, [r5, #4]
 80038e4:	6963      	ldr	r3, [r4, #20]
 80038e6:	491c      	ldr	r1, [pc, #112]	@ (8003958 <HAL_RCC_OscConfig+0x320>)
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	400a      	ands	r2, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	e6f3      	b.n	80036dc <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	4917      	ldr	r1, [pc, #92]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
 80038f6:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 80038f8:	4313      	orrs	r3, r2
 80038fa:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80038fc:	f7fe fb5e 	bl	8001fbc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003900:	4b14      	ldr	r3, [pc, #80]	@ (8003954 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8003902:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003904:	4698      	mov	r8, r3
 8003906:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	4d19      	ldr	r5, [pc, #100]	@ (8003970 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390a:	e004      	b.n	8003916 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fe fb56 	bl	8001fbc <HAL_GetTick>
 8003910:	1b80      	subs	r0, r0, r6
 8003912:	42a8      	cmp	r0, r5
 8003914:	d813      	bhi.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003916:	4643      	mov	r3, r8
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	421f      	tst	r7, r3
 800391c:	d0f6      	beq.n	800390c <HAL_RCC_OscConfig+0x2d4>
 800391e:	e723      	b.n	8003768 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003920:	6833      	ldr	r3, [r6, #0]
 8003922:	433b      	orrs	r3, r7
 8003924:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003926:	f7fe fb49 	bl	8001fbc <HAL_GetTick>
 800392a:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392c:	6833      	ldr	r3, [r6, #0]
 800392e:	423b      	tst	r3, r7
 8003930:	d000      	beq.n	8003934 <HAL_RCC_OscConfig+0x2fc>
 8003932:	e6f5      	b.n	8003720 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fe fb42 	bl	8001fbc <HAL_GetTick>
 8003938:	1b40      	subs	r0, r0, r5
 800393a:	2802      	cmp	r0, #2
 800393c:	d9f6      	bls.n	800392c <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 800393e:	2003      	movs	r0, #3
 8003940:	e6ab      	b.n	800369a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8003942:	2201      	movs	r2, #1
 8003944:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003946:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8003948:	4393      	bics	r3, r2
 800394a:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800394c:	f7fe fb36 	bl	8001fbc <HAL_GetTick>
 8003950:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003952:	e01c      	b.n	800398e <HAL_RCC_OscConfig+0x356>
 8003954:	40021000 	.word	0x40021000
 8003958:	ffff80ff 	.word	0xffff80ff
 800395c:	ffffc7ff 	.word	0xffffc7ff
 8003960:	00f42400 	.word	0x00f42400
 8003964:	2000040c 	.word	0x2000040c
 8003968:	20000414 	.word	0x20000414
 800396c:	40007000 	.word	0x40007000
 8003970:	00001388 	.word	0x00001388
 8003974:	feffffff 	.word	0xfeffffff
 8003978:	eefefffc 	.word	0xeefefffc
 800397c:	fffeffff 	.word	0xfffeffff
 8003980:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003984:	f7fe fb1a 	bl	8001fbc <HAL_GetTick>
 8003988:	1b80      	subs	r0, r0, r6
 800398a:	2802      	cmp	r0, #2
 800398c:	d8d7      	bhi.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800398e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003990:	421f      	tst	r7, r3
 8003992:	d1f7      	bne.n	8003984 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	e6a3      	b.n	80036e0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	4a55      	ldr	r2, [pc, #340]	@ (8003af0 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 800399e:	4013      	ands	r3, r2
 80039a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039a2:	f7fe fb0b 	bl	8001fbc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a6:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80039a8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039aa:	e004      	b.n	80039b6 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ac:	f7fe fb06 	bl	8001fbc <HAL_GetTick>
 80039b0:	1b80      	subs	r0, r0, r6
 80039b2:	2802      	cmp	r0, #2
 80039b4:	d8c3      	bhi.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	423b      	tst	r3, r7
 80039ba:	d1f7      	bne.n	80039ac <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	e68d      	b.n	80036dc <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d100      	bne.n	80039c6 <HAL_RCC_OscConfig+0x38e>
 80039c4:	e668      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80039c8:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	6a21      	ldr	r1, [r4, #32]
 80039cc:	4002      	ands	r2, r0
 80039ce:	428a      	cmp	r2, r1
 80039d0:	d000      	beq.n	80039d4 <HAL_RCC_OscConfig+0x39c>
 80039d2:	e661      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d4:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d8:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	428a      	cmp	r2, r1
 80039dc:	d000      	beq.n	80039e0 <HAL_RCC_OscConfig+0x3a8>
 80039de:	e65b      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e0:	21fe      	movs	r1, #254	@ 0xfe
 80039e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80039e4:	01c9      	lsls	r1, r1, #7
 80039e6:	4001      	ands	r1, r0
 80039e8:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ea:	4291      	cmp	r1, r2
 80039ec:	d000      	beq.n	80039f0 <HAL_RCC_OscConfig+0x3b8>
 80039ee:	e653      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039f0:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039f4:	0392      	lsls	r2, r2, #14
 80039f6:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f8:	428a      	cmp	r2, r1
 80039fa:	d000      	beq.n	80039fe <HAL_RCC_OscConfig+0x3c6>
 80039fc:	e64c      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039fe:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a02:	0512      	lsls	r2, r2, #20
 8003a04:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a06:	428a      	cmp	r2, r1
 8003a08:	d000      	beq.n	8003a0c <HAL_RCC_OscConfig+0x3d4>
 8003a0a:	e645      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a0e:	0f40      	lsrs	r0, r0, #29
 8003a10:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a12:	1ac0      	subs	r0, r0, r3
 8003a14:	1e43      	subs	r3, r0, #1
 8003a16:	4198      	sbcs	r0, r3
 8003a18:	b2c0      	uxtb	r0, r0
 8003a1a:	e63e      	b.n	800369a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	2180      	movs	r1, #128	@ 0x80
 8003a1e:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <HAL_RCC_OscConfig+0x4bc>)
 8003a20:	02c9      	lsls	r1, r1, #11
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4301      	orrs	r1, r0
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a2e:	e71c      	b.n	800386a <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	6813      	ldr	r3, [r2, #0]
 8003a32:	055b      	lsls	r3, r3, #21
 8003a34:	d457      	bmi.n	8003ae6 <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a36:	6851      	ldr	r1, [r2, #4]
 8003a38:	6963      	ldr	r3, [r4, #20]
 8003a3a:	482f      	ldr	r0, [pc, #188]	@ (8003af8 <HAL_RCC_OscConfig+0x4c0>)
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	4001      	ands	r1, r0
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a44:	e643      	b.n	80036ce <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	4a2b      	ldr	r2, [pc, #172]	@ (8003af4 <HAL_RCC_OscConfig+0x4bc>)
 8003a48:	492c      	ldr	r1, [pc, #176]	@ (8003afc <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003a50:	e68e      	b.n	8003770 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	4a2a      	ldr	r2, [pc, #168]	@ (8003b00 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a56:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003a58:	4013      	ands	r3, r2
 8003a5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a5c:	f7fe faae 	bl	8001fbc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a60:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003a62:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a64:	e005      	b.n	8003a72 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fe faa9 	bl	8001fbc <HAL_GetTick>
 8003a6a:	1b80      	subs	r0, r0, r6
 8003a6c:	2802      	cmp	r0, #2
 8003a6e:	d900      	bls.n	8003a72 <HAL_RCC_OscConfig+0x43a>
 8003a70:	e765      	b.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a72:	682b      	ldr	r3, [r5, #0]
 8003a74:	423b      	tst	r3, r7
 8003a76:	d1f6      	bne.n	8003a66 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a78:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a7a:	6a23      	ldr	r3, [r4, #32]
 8003a7c:	68ea      	ldr	r2, [r5, #12]
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	4920      	ldr	r1, [pc, #128]	@ (8003b04 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	4e1c      	ldr	r6, [pc, #112]	@ (8003af4 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a84:	400a      	ands	r2, r1
 8003a86:	4313      	orrs	r3, r2
 8003a88:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003a92:	4313      	orrs	r3, r2
 8003a94:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003a96:	0212      	lsls	r2, r2, #8
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	682a      	ldr	r2, [r5, #0]
 8003aa0:	045b      	lsls	r3, r3, #17
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003aa6:	2380      	movs	r3, #128	@ 0x80
 8003aa8:	68ea      	ldr	r2, [r5, #12]
 8003aaa:	055b      	lsls	r3, r3, #21
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fa84 	bl	8001fbc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab4:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003ab6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab8:	04ad      	lsls	r5, r5, #18
 8003aba:	e005      	b.n	8003ac8 <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe fa7e 	bl	8001fbc <HAL_GetTick>
 8003ac0:	1b00      	subs	r0, r0, r4
 8003ac2:	2802      	cmp	r0, #2
 8003ac4:	d900      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x490>
 8003ac6:	e73a      	b.n	800393e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac8:	6833      	ldr	r3, [r6, #0]
 8003aca:	422b      	tst	r3, r5
 8003acc:	d0f6      	beq.n	8003abc <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 8003ace:	2000      	movs	r0, #0
 8003ad0:	e5e3      	b.n	800369a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	4b07      	ldr	r3, [pc, #28]	@ (8003af4 <HAL_RCC_OscConfig+0x4bc>)
 8003ad6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ade:	3903      	subs	r1, #3
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae4:	e70a      	b.n	80038fc <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae6:	68e3      	ldr	r3, [r4, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1a4      	bne.n	8003a36 <HAL_RCC_OscConfig+0x3fe>
 8003aec:	e5d4      	b.n	8003698 <HAL_RCC_OscConfig+0x60>
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	fffffeff 	.word	0xfffffeff
 8003af4:	40021000 	.word	0x40021000
 8003af8:	ffff80ff 	.word	0xffff80ff
 8003afc:	efffffff 	.word	0xefffffff
 8003b00:	feffffff 	.word	0xfeffffff
 8003b04:	11c1808c 	.word	0x11c1808c

08003b08 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b08:	2338      	movs	r3, #56	@ 0x38
 8003b0a:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8003b0c:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b0e:	6891      	ldr	r1, [r2, #8]
 8003b10:	420b      	tst	r3, r1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b14:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b16:	4820      	ldr	r0, [pc, #128]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b18:	049b      	lsls	r3, r3, #18
 8003b1a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b1c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8003b1e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b20:	6891      	ldr	r1, [r2, #8]
 8003b22:	4019      	ands	r1, r3
 8003b24:	2908      	cmp	r1, #8
 8003b26:	d014      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b28:	6891      	ldr	r1, [r2, #8]
 8003b2a:	4019      	ands	r1, r3
 8003b2c:	2910      	cmp	r1, #16
 8003b2e:	d012      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b30:	6891      	ldr	r1, [r2, #8]
 8003b32:	4019      	ands	r1, r3
 8003b34:	2920      	cmp	r1, #32
 8003b36:	d024      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b38:	6890      	ldr	r0, [r2, #8]
 8003b3a:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8003b3c:	3818      	subs	r0, #24
 8003b3e:	1e43      	subs	r3, r0, #1
 8003b40:	4198      	sbcs	r0, r3
 8003b42:	4b16      	ldr	r3, [pc, #88]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b44:	4240      	negs	r0, r0
 8003b46:	4018      	ands	r0, r3
 8003b48:	23fa      	movs	r3, #250	@ 0xfa
 8003b4a:	01db      	lsls	r3, r3, #7
 8003b4c:	469c      	mov	ip, r3
 8003b4e:	4460      	add	r0, ip
 8003b50:	e7e5      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003b52:	4813      	ldr	r0, [pc, #76]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b54:	e7e3      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b56:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b58:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b5a:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b5c:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b5e:	0649      	lsls	r1, r1, #25
 8003b60:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b62:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b64:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b66:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8003b68:	079b      	lsls	r3, r3, #30
 8003b6a:	d00d      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b6c:	480a      	ldr	r0, [pc, #40]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x90>)
 8003b6e:	f7fc fac9 	bl	8000104 <__udivsi3>
 8003b72:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003b74:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003b76:	68d9      	ldr	r1, [r3, #12]
 8003b78:	0f49      	lsrs	r1, r1, #29
 8003b7a:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8003b7c:	f7fc fac2 	bl	8000104 <__udivsi3>
  return sysclockfreq;
 8003b80:	e7cd      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8003b82:	2080      	movs	r0, #128	@ 0x80
 8003b84:	0200      	lsls	r0, r0, #8
 8003b86:	e7ca      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b88:	4805      	ldr	r0, [pc, #20]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b8a:	f7fc fabb 	bl	8000104 <__udivsi3>
 8003b8e:	4360      	muls	r0, r4
        break;
 8003b90:	e7f0      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x6c>
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	40021000 	.word	0x40021000
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	ffff8300 	.word	0xffff8300
 8003ba0:	007a1200 	.word	0x007a1200

08003ba4 <HAL_RCC_ClockConfig>:
{
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	46ce      	mov	lr, r9
 8003ba8:	4647      	mov	r7, r8
 8003baa:	0005      	movs	r5, r0
 8003bac:	000c      	movs	r4, r1
 8003bae:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d026      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	2207      	movs	r2, #7
 8003bb6:	4e57      	ldr	r6, [pc, #348]	@ (8003d14 <HAL_RCC_ClockConfig+0x170>)
 8003bb8:	6833      	ldr	r3, [r6, #0]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	d35e      	bcc.n	8003c7e <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	079a      	lsls	r2, r3, #30
 8003bc4:	d50e      	bpl.n	8003be4 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc6:	075a      	lsls	r2, r3, #29
 8003bc8:	d505      	bpl.n	8003bd6 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bca:	22e0      	movs	r2, #224	@ 0xe0
 8003bcc:	4952      	ldr	r1, [pc, #328]	@ (8003d18 <HAL_RCC_ClockConfig+0x174>)
 8003bce:	01d2      	lsls	r2, r2, #7
 8003bd0:	6888      	ldr	r0, [r1, #8]
 8003bd2:	4302      	orrs	r2, r0
 8003bd4:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd6:	4950      	ldr	r1, [pc, #320]	@ (8003d18 <HAL_RCC_ClockConfig+0x174>)
 8003bd8:	4850      	ldr	r0, [pc, #320]	@ (8003d1c <HAL_RCC_ClockConfig+0x178>)
 8003bda:	688a      	ldr	r2, [r1, #8]
 8003bdc:	4002      	ands	r2, r0
 8003bde:	68a8      	ldr	r0, [r5, #8]
 8003be0:	4302      	orrs	r2, r0
 8003be2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be4:	07db      	lsls	r3, r3, #31
 8003be6:	d52b      	bpl.n	8003c40 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be8:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bea:	4a4b      	ldr	r2, [pc, #300]	@ (8003d18 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d100      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x4e>
 8003bf0:	e07c      	b.n	8003cec <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d007      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d000      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x58>
 8003bfa:	e07d      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	0552      	lsls	r2, r2, #21
 8003c00:	d404      	bmi.n	8003c0c <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003c02:	2001      	movs	r0, #1
 8003c04:	e037      	b.n	8003c76 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	0192      	lsls	r2, r2, #6
 8003c0a:	d5fa      	bpl.n	8003c02 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c0c:	2107      	movs	r1, #7
 8003c0e:	4e42      	ldr	r6, [pc, #264]	@ (8003d18 <HAL_RCC_ClockConfig+0x174>)
 8003c10:	68b2      	ldr	r2, [r6, #8]
 8003c12:	438a      	bics	r2, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003c18:	f7fe f9d0 	bl	8001fbc <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1c:	2338      	movs	r3, #56	@ 0x38
 8003c1e:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	4b3f      	ldr	r3, [pc, #252]	@ (8003d20 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003c22:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e004      	b.n	8003c32 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7fe f9c8 	bl	8001fbc <HAL_GetTick>
 8003c2c:	1bc0      	subs	r0, r0, r7
 8003c2e:	4548      	cmp	r0, r9
 8003c30:	d83b      	bhi.n	8003caa <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4643      	mov	r3, r8
 8003c34:	68b2      	ldr	r2, [r6, #8]
 8003c36:	401a      	ands	r2, r3
 8003c38:	686b      	ldr	r3, [r5, #4]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1f3      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	2207      	movs	r2, #7
 8003c42:	4e34      	ldr	r6, [pc, #208]	@ (8003d14 <HAL_RCC_ClockConfig+0x170>)
 8003c44:	6833      	ldr	r3, [r6, #0]
 8003c46:	4013      	ands	r3, r2
 8003c48:	42a3      	cmp	r3, r4
 8003c4a:	d838      	bhi.n	8003cbe <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	075b      	lsls	r3, r3, #29
 8003c50:	d42d      	bmi.n	8003cae <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c52:	f7ff ff59 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8003c56:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <HAL_RCC_ClockConfig+0x174>)
 8003c58:	4a32      	ldr	r2, [pc, #200]	@ (8003d24 <HAL_RCC_ClockConfig+0x180>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4932      	ldr	r1, [pc, #200]	@ (8003d28 <HAL_RCC_ClockConfig+0x184>)
 8003c5e:	051b      	lsls	r3, r3, #20
 8003c60:	0f1b      	lsrs	r3, r3, #28
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	589b      	ldr	r3, [r3, r2]
 8003c66:	221f      	movs	r2, #31
 8003c68:	4013      	ands	r3, r2
 8003c6a:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d2c <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c6e:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	f7fe f95d 	bl	8001f30 <HAL_InitTick>
}
 8003c76:	bcc0      	pop	{r6, r7}
 8003c78:	46b9      	mov	r9, r7
 8003c7a:	46b0      	mov	r8, r6
 8003c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	6833      	ldr	r3, [r6, #0]
 8003c80:	4393      	bics	r3, r2
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003c86:	f7fe f999 	bl	8001fbc <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8e:	4b24      	ldr	r3, [pc, #144]	@ (8003d20 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003c90:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c92:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c94:	4642      	mov	r2, r8
 8003c96:	6833      	ldr	r3, [r6, #0]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	42a3      	cmp	r3, r4
 8003c9c:	d100      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0xfc>
 8003c9e:	e78f      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca0:	f7fe f98c 	bl	8001fbc <HAL_GetTick>
 8003ca4:	1bc0      	subs	r0, r0, r7
 8003ca6:	4548      	cmp	r0, r9
 8003ca8:	d9f4      	bls.n	8003c94 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8003caa:	2003      	movs	r0, #3
 8003cac:	e7e3      	b.n	8003c76 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003cae:	4a1a      	ldr	r2, [pc, #104]	@ (8003d18 <HAL_RCC_ClockConfig+0x174>)
 8003cb0:	491f      	ldr	r1, [pc, #124]	@ (8003d30 <HAL_RCC_ClockConfig+0x18c>)
 8003cb2:	6893      	ldr	r3, [r2, #8]
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	68e9      	ldr	r1, [r5, #12]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6093      	str	r3, [r2, #8]
 8003cbc:	e7c9      	b.n	8003c52 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	6833      	ldr	r3, [r6, #0]
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	4323      	orrs	r3, r4
 8003cc4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003cc6:	f7fe f979 	bl	8001fbc <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cca:	2307      	movs	r3, #7
 8003ccc:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cce:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003cd0:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd2:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	6833      	ldr	r3, [r6, #0]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	42a3      	cmp	r3, r4
 8003cdc:	d0b6      	beq.n	8003c4c <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cde:	f7fe f96d 	bl	8001fbc <HAL_GetTick>
 8003ce2:	1bc0      	subs	r0, r0, r7
 8003ce4:	4548      	cmp	r0, r9
 8003ce6:	d9f5      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8003ce8:	2003      	movs	r0, #3
 8003cea:	e7c4      	b.n	8003c76 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	0392      	lsls	r2, r2, #14
 8003cf0:	d500      	bpl.n	8003cf4 <HAL_RCC_ClockConfig+0x150>
 8003cf2:	e78b      	b.n	8003c0c <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	e7be      	b.n	8003c76 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cfe:	0792      	lsls	r2, r2, #30
 8003d00:	d500      	bpl.n	8003d04 <HAL_RCC_ClockConfig+0x160>
 8003d02:	e783      	b.n	8003c0c <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
 8003d06:	e7b6      	b.n	8003c76 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d08:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003d0a:	0792      	lsls	r2, r2, #30
 8003d0c:	d500      	bpl.n	8003d10 <HAL_RCC_ClockConfig+0x16c>
 8003d0e:	e77d      	b.n	8003c0c <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
 8003d12:	e7b0      	b.n	8003c76 <HAL_RCC_ClockConfig+0xd2>
 8003d14:	40022000 	.word	0x40022000
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	fffff0ff 	.word	0xfffff0ff
 8003d20:	00001388 	.word	0x00001388
 8003d24:	08006e9c 	.word	0x08006e9c
 8003d28:	2000040c 	.word	0x2000040c
 8003d2c:	20000414 	.word	0x20000414
 8003d30:	ffff8fff 	.word	0xffff8fff

08003d34 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d36:	4907      	ldr	r1, [pc, #28]	@ (8003d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d3a:	4a07      	ldr	r2, [pc, #28]	@ (8003d58 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d3c:	045b      	lsls	r3, r3, #17
 8003d3e:	0f5b      	lsrs	r3, r3, #29
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	585b      	ldr	r3, [r3, r1]
 8003d44:	211f      	movs	r1, #31
 8003d46:	6810      	ldr	r0, [r2, #0]
 8003d48:	400b      	ands	r3, r1
 8003d4a:	40d8      	lsrs	r0, r3
}
 8003d4c:	4770      	bx	lr
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08006e7c 	.word	0x08006e7c
 8003d58:	2000040c 	.word	0x2000040c

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5e:	46d6      	mov	lr, sl
 8003d60:	464f      	mov	r7, r9
 8003d62:	4646      	mov	r6, r8
 8003d64:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d66:	6803      	ldr	r3, [r0, #0]
{
 8003d68:	0004      	movs	r4, r0
 8003d6a:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d6c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d6e:	039a      	lsls	r2, r3, #14
 8003d70:	d552      	bpl.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xbc>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d72:	2280      	movs	r2, #128	@ 0x80
 8003d74:	4b69      	ldr	r3, [pc, #420]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d76:	0552      	lsls	r2, r2, #21
 8003d78:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8003d7a:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7c:	4211      	tst	r1, r2
 8003d7e:	d100      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003d80:	e0a4      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d82:	2780      	movs	r7, #128	@ 0x80
 8003d84:	4d66      	ldr	r5, [pc, #408]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d86:	007f      	lsls	r7, r7, #1
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	433b      	orrs	r3, r7
 8003d8c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d8e:	f7fe f915 	bl	8001fbc <HAL_GetTick>
 8003d92:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d94:	e005      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fe f911 	bl	8001fbc <HAL_GetTick>
 8003d9a:	1b80      	subs	r0, r0, r6
 8003d9c:	2802      	cmp	r0, #2
 8003d9e:	d900      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003da0:	e09e      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x184>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da2:	682b      	ldr	r3, [r5, #0]
 8003da4:	423b      	tst	r3, r7
 8003da6:	d0f6      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003da8:	4d5c      	ldr	r5, [pc, #368]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003daa:	23c0      	movs	r3, #192	@ 0xc0
 8003dac:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003db4:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db6:	421a      	tst	r2, r3
 8003db8:	d023      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003dba:	4288      	cmp	r0, r1
 8003dbc:	d021      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dbe:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc2:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 8003dc4:	0240      	lsls	r0, r0, #9
 8003dc6:	4330      	orrs	r0, r6
 8003dc8:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dca:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dcc:	4a55      	ldr	r2, [pc, #340]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dce:	4e56      	ldr	r6, [pc, #344]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dd0:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd2:	4030      	ands	r0, r6
 8003dd4:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dd6:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dd8:	07db      	lsls	r3, r3, #31
 8003dda:	d512      	bpl.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe f8ee 	bl	8001fbc <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de0:	2302      	movs	r3, #2
 8003de2:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	4b51      	ldr	r3, [pc, #324]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
        tickstart = HAL_GetTick();
 8003de6:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dea:	e005      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fe f8e6 	bl	8001fbc <HAL_GetTick>
 8003df0:	1b80      	subs	r0, r0, r6
 8003df2:	4548      	cmp	r0, r9
 8003df4:	d900      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003df6:	e073      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x184>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df8:	4642      	mov	r2, r8
 8003dfa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003dfc:	421a      	tst	r2, r3
 8003dfe:	d0f5      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x90>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e00:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003e02:	4a46      	ldr	r2, [pc, #280]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e04:	4847      	ldr	r0, [pc, #284]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e06:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003e08:	4003      	ands	r3, r0
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e0e:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e10:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e12:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8003e14:	2a01      	cmp	r2, #1
 8003e16:	d068      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e18:	07da      	lsls	r2, r3, #31
 8003e1a:	d506      	bpl.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e1c:	2503      	movs	r5, #3
 8003e1e:	493f      	ldr	r1, [pc, #252]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e20:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003e22:	43aa      	bics	r2, r5
 8003e24:	6865      	ldr	r5, [r4, #4]
 8003e26:	432a      	orrs	r2, r5
 8003e28:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e2a:	06da      	lsls	r2, r3, #27
 8003e2c:	d506      	bpl.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e2e:	493b      	ldr	r1, [pc, #236]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e30:	4d3f      	ldr	r5, [pc, #252]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e32:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003e34:	402a      	ands	r2, r5
 8003e36:	68a5      	ldr	r5, [r4, #8]
 8003e38:	432a      	orrs	r2, r5
 8003e3a:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e3c:	059a      	lsls	r2, r3, #22
 8003e3e:	d506      	bpl.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e40:	4936      	ldr	r1, [pc, #216]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e42:	4d3c      	ldr	r5, [pc, #240]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e44:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003e46:	402a      	ands	r2, r5
 8003e48:	6965      	ldr	r5, [r4, #20]
 8003e4a:	432a      	orrs	r2, r5
 8003e4c:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e4e:	055a      	lsls	r2, r3, #21
 8003e50:	d506      	bpl.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e52:	4932      	ldr	r1, [pc, #200]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e54:	4d38      	ldr	r5, [pc, #224]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003e56:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003e58:	402a      	ands	r2, r5
 8003e5a:	69a5      	ldr	r5, [r4, #24]
 8003e5c:	432a      	orrs	r2, r5
 8003e5e:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e60:	069a      	lsls	r2, r3, #26
 8003e62:	d506      	bpl.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e64:	492d      	ldr	r1, [pc, #180]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e66:	4d35      	ldr	r5, [pc, #212]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e68:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003e6a:	402a      	ands	r2, r5
 8003e6c:	68e5      	ldr	r5, [r4, #12]
 8003e6e:	432a      	orrs	r2, r5
 8003e70:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e72:	045a      	lsls	r2, r3, #17
 8003e74:	d50a      	bpl.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e76:	4929      	ldr	r1, [pc, #164]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e78:	69e5      	ldr	r5, [r4, #28]
 8003e7a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003e7c:	0092      	lsls	r2, r2, #2
 8003e7e:	0892      	lsrs	r2, r2, #2
 8003e80:	432a      	orrs	r2, r5
 8003e82:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003e84:	2280      	movs	r2, #128	@ 0x80
 8003e86:	05d2      	lsls	r2, r2, #23
 8003e88:	4295      	cmp	r5, r2
 8003e8a:	d034      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e8c:	029a      	lsls	r2, r3, #10
 8003e8e:	d50a      	bpl.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e90:	4922      	ldr	r1, [pc, #136]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e92:	4e2b      	ldr	r6, [pc, #172]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003e94:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003e96:	6a25      	ldr	r5, [r4, #32]
 8003e98:	4032      	ands	r2, r6
 8003e9a:	432a      	orrs	r2, r5
 8003e9c:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003e9e:	2280      	movs	r2, #128	@ 0x80
 8003ea0:	03d2      	lsls	r2, r2, #15
 8003ea2:	4295      	cmp	r5, r2
 8003ea4:	d02d      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003ea6:	051b      	lsls	r3, r3, #20
 8003ea8:	d50a      	bpl.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003eac:	6921      	ldr	r1, [r4, #16]
 8003eae:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003eb0:	4c24      	ldr	r4, [pc, #144]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003eb2:	4023      	ands	r3, r4
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003eb8:	2380      	movs	r3, #128	@ 0x80
 8003eba:	01db      	lsls	r3, r3, #7
 8003ebc:	4299      	cmp	r1, r3
 8003ebe:	d026      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8003ec0:	b002      	add	sp, #8
 8003ec2:	bce0      	pop	{r5, r6, r7}
 8003ec4:	46ba      	mov	sl, r7
 8003ec6:	46b1      	mov	r9, r6
 8003ec8:	46a8      	mov	r8, r5
 8003eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ecc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	469a      	mov	sl, r3
 8003ede:	e750      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 8003ee0:	4652      	mov	r2, sl
        status = ret;
 8003ee2:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ee4:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8003ee6:	2a01      	cmp	r2, #1
 8003ee8:	d196      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eea:	490c      	ldr	r1, [pc, #48]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003eec:	4d16      	ldr	r5, [pc, #88]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003eee:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8003ef0:	402a      	ands	r2, r5
 8003ef2:	63ca      	str	r2, [r1, #60]	@ 0x3c
 8003ef4:	e790      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ef6:	2280      	movs	r2, #128	@ 0x80
 8003ef8:	68cd      	ldr	r5, [r1, #12]
 8003efa:	0252      	lsls	r2, r2, #9
 8003efc:	432a      	orrs	r2, r5
 8003efe:	60ca      	str	r2, [r1, #12]
 8003f00:	e7c4      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	68cd      	ldr	r5, [r1, #12]
 8003f06:	0452      	lsls	r2, r2, #17
 8003f08:	432a      	orrs	r2, r5
 8003f0a:	60ca      	str	r2, [r1, #12]
 8003f0c:	e7cb      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f0e:	2380      	movs	r3, #128	@ 0x80
 8003f10:	68d1      	ldr	r1, [r2, #12]
 8003f12:	025b      	lsls	r3, r3, #9
 8003f14:	430b      	orrs	r3, r1
 8003f16:	60d3      	str	r3, [r2, #12]
  return status;
 8003f18:	e7d2      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40007000 	.word	0x40007000
 8003f24:	fffffcff 	.word	0xfffffcff
 8003f28:	fffeffff 	.word	0xfffeffff
 8003f2c:	00001388 	.word	0x00001388
 8003f30:	fffff3ff 	.word	0xfffff3ff
 8003f34:	fff3ffff 	.word	0xfff3ffff
 8003f38:	ffcfffff 	.word	0xffcfffff
 8003f3c:	ffffcfff 	.word	0xffffcfff
 8003f40:	ffbfffff 	.word	0xffbfffff
 8003f44:	ffff3fff 	.word	0xffff3fff
 8003f48:	efffffff 	.word	0xefffffff

08003f4c <HAL_TIM_OC_MspInit>:
/**
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8003f4c:	4770      	bx	lr
 8003f4e:	46c0      	nop			@ (mov r8, r8)

08003f50 <HAL_TIM_PWM_MspInit>:
/**
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8003f50:	4770      	bx	lr
 8003f52:	46c0      	nop			@ (mov r8, r8)

08003f54 <HAL_TIM_IC_MspInit>:
/**
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8003f54:	4770      	bx	lr
 8003f56:	46c0      	nop			@ (mov r8, r8)

08003f58 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8003f58:	4770      	bx	lr
 8003f5a:	46c0      	nop			@ (mov r8, r8)

08003f5c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
/**
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003f5c:	4770      	bx	lr
 8003f5e:	46c0      	nop			@ (mov r8, r8)

08003f60 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003f60:	4770      	bx	lr
 8003f62:	46c0      	nop			@ (mov r8, r8)

08003f64 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003f64:	4770      	bx	lr
 8003f66:	46c0      	nop			@ (mov r8, r8)

08003f68 <HAL_TIM_IC_CaptureHalfCpltCallback>:
/**
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003f68:	4770      	bx	lr
 8003f6a:	46c0      	nop			@ (mov r8, r8)

08003f6c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003f6c:	4770      	bx	lr
 8003f6e:	46c0      	nop			@ (mov r8, r8)

08003f70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/**
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003f70:	4770      	bx	lr
 8003f72:	46c0      	nop			@ (mov r8, r8)

08003f74 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003f74:	4770      	bx	lr
 8003f76:	46c0      	nop			@ (mov r8, r8)

08003f78 <HAL_TIM_TriggerHalfCpltCallback>:
/**
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003f78:	4770      	bx	lr
 8003f7a:	46c0      	nop			@ (mov r8, r8)

08003f7c <HAL_TIM_ErrorCallback>:
/**
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8003f7c:	4770      	bx	lr
 8003f7e:	46c0      	nop			@ (mov r8, r8)

08003f80 <HAL_TIM_Base_Init>:
{
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003f84:	d100      	bne.n	8003f88 <HAL_TIM_Base_Init+0x8>
 8003f86:	e093      	b.n	80040b0 <HAL_TIM_Base_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f88:	233d      	movs	r3, #61	@ 0x3d
 8003f8a:	5cc3      	ldrb	r3, [r0, r3]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d130      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8003f92:	333c      	adds	r3, #60	@ 0x3c
 8003f94:	54c2      	strb	r2, [r0, r3]
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003f96:	2284      	movs	r2, #132	@ 0x84
 8003f98:	4b48      	ldr	r3, [pc, #288]	@ (80040bc <HAL_TIM_Base_Init+0x13c>)
 8003f9a:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003f9c:	4b48      	ldr	r3, [pc, #288]	@ (80040c0 <HAL_TIM_Base_Init+0x140>)
 8003f9e:	3204      	adds	r2, #4
 8003fa0:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003fa2:	4b48      	ldr	r3, [pc, #288]	@ (80040c4 <HAL_TIM_Base_Init+0x144>)
 8003fa4:	3204      	adds	r2, #4
 8003fa6:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003fa8:	4b47      	ldr	r3, [pc, #284]	@ (80040c8 <HAL_TIM_Base_Init+0x148>)
 8003faa:	3204      	adds	r2, #4
 8003fac:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003fae:	4b47      	ldr	r3, [pc, #284]	@ (80040cc <HAL_TIM_Base_Init+0x14c>)
 8003fb0:	3204      	adds	r2, #4
 8003fb2:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003fb4:	4b46      	ldr	r3, [pc, #280]	@ (80040d0 <HAL_TIM_Base_Init+0x150>)
 8003fb6:	3204      	adds	r2, #4
 8003fb8:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003fba:	4b46      	ldr	r3, [pc, #280]	@ (80040d4 <HAL_TIM_Base_Init+0x154>)
 8003fbc:	3204      	adds	r2, #4
 8003fbe:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003fc0:	4b45      	ldr	r3, [pc, #276]	@ (80040d8 <HAL_TIM_Base_Init+0x158>)
 8003fc2:	3204      	adds	r2, #4
 8003fc4:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003fc6:	4b45      	ldr	r3, [pc, #276]	@ (80040dc <HAL_TIM_Base_Init+0x15c>)
 8003fc8:	3204      	adds	r2, #4
 8003fca:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003fcc:	4b44      	ldr	r3, [pc, #272]	@ (80040e0 <HAL_TIM_Base_Init+0x160>)
 8003fce:	3204      	adds	r2, #4
 8003fd0:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003fd2:	4b44      	ldr	r3, [pc, #272]	@ (80040e4 <HAL_TIM_Base_Init+0x164>)
 8003fd4:	3204      	adds	r2, #4
 8003fd6:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003fd8:	4b43      	ldr	r3, [pc, #268]	@ (80040e8 <HAL_TIM_Base_Init+0x168>)
 8003fda:	3204      	adds	r2, #4
 8003fdc:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003fde:	4b43      	ldr	r3, [pc, #268]	@ (80040ec <HAL_TIM_Base_Init+0x16c>)
 8003fe0:	3204      	adds	r2, #4
 8003fe2:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003fe4:	4b42      	ldr	r3, [pc, #264]	@ (80040f0 <HAL_TIM_Base_Init+0x170>)
 8003fe6:	3204      	adds	r2, #4
 8003fe8:	5083      	str	r3, [r0, r2]
    if (htim->Base_MspInitCallback == NULL)
 8003fea:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d061      	beq.n	80040b4 <HAL_TIM_Base_Init+0x134>
    htim->Base_MspInitCallback(htim);
 8003ff0:	0020      	movs	r0, r4
 8003ff2:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	233d      	movs	r3, #61	@ 0x3d
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffa:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ffc:	4e3d      	ldr	r6, [pc, #244]	@ (80040f4 <HAL_TIM_Base_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 8003ffe:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004000:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8004002:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004004:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004006:	42b3      	cmp	r3, r6
 8004008:	d041      	beq.n	800408e <HAL_TIM_Base_Init+0x10e>
 800400a:	2680      	movs	r6, #128	@ 0x80
 800400c:	05f6      	lsls	r6, r6, #23
 800400e:	42b3      	cmp	r3, r6
 8004010:	d034      	beq.n	800407c <HAL_TIM_Base_Init+0xfc>
 8004012:	4e39      	ldr	r6, [pc, #228]	@ (80040f8 <HAL_TIM_Base_Init+0x178>)
 8004014:	42b3      	cmp	r3, r6
 8004016:	d031      	beq.n	800407c <HAL_TIM_Base_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004018:	4e38      	ldr	r6, [pc, #224]	@ (80040fc <HAL_TIM_Base_Init+0x17c>)
 800401a:	42b3      	cmp	r3, r6
 800401c:	d032      	beq.n	8004084 <HAL_TIM_Base_Init+0x104>
 800401e:	4e38      	ldr	r6, [pc, #224]	@ (8004100 <HAL_TIM_Base_Init+0x180>)
 8004020:	42b3      	cmp	r3, r6
 8004022:	d038      	beq.n	8004096 <HAL_TIM_Base_Init+0x116>
 8004024:	4e37      	ldr	r6, [pc, #220]	@ (8004104 <HAL_TIM_Base_Init+0x184>)
 8004026:	42b3      	cmp	r3, r6
 8004028:	d035      	beq.n	8004096 <HAL_TIM_Base_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800402a:	2680      	movs	r6, #128	@ 0x80
 800402c:	43b2      	bics	r2, r6
 800402e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004030:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004032:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004034:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004036:	2201      	movs	r2, #1
 8004038:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800403a:	6919      	ldr	r1, [r3, #16]
 800403c:	420a      	tst	r2, r1
 800403e:	d002      	beq.n	8004046 <HAL_TIM_Base_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004040:	6919      	ldr	r1, [r3, #16]
 8004042:	4391      	bics	r1, r2
 8004044:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004046:	2301      	movs	r3, #1
 8004048:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800404a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800404c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404e:	3a0a      	subs	r2, #10
 8004050:	54a3      	strb	r3, [r4, r2]
 8004052:	3201      	adds	r2, #1
 8004054:	54a3      	strb	r3, [r4, r2]
 8004056:	3201      	adds	r2, #1
 8004058:	54a3      	strb	r3, [r4, r2]
 800405a:	3201      	adds	r2, #1
 800405c:	54a3      	strb	r3, [r4, r2]
 800405e:	3201      	adds	r2, #1
 8004060:	54a3      	strb	r3, [r4, r2]
 8004062:	3201      	adds	r2, #1
 8004064:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004066:	3201      	adds	r2, #1
 8004068:	54a3      	strb	r3, [r4, r2]
 800406a:	3201      	adds	r2, #1
 800406c:	54a3      	strb	r3, [r4, r2]
 800406e:	3201      	adds	r2, #1
 8004070:	54a3      	strb	r3, [r4, r2]
 8004072:	3201      	adds	r2, #1
 8004074:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004076:	3a0a      	subs	r2, #10
 8004078:	54a3      	strb	r3, [r4, r2]
}
 800407a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800407c:	2670      	movs	r6, #112	@ 0x70
 800407e:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004080:	68a6      	ldr	r6, [r4, #8]
 8004082:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004084:	4e20      	ldr	r6, [pc, #128]	@ (8004108 <HAL_TIM_Base_Init+0x188>)
 8004086:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004088:	6926      	ldr	r6, [r4, #16]
 800408a:	4332      	orrs	r2, r6
 800408c:	e7cd      	b.n	800402a <HAL_TIM_Base_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408e:	2670      	movs	r6, #112	@ 0x70
 8004090:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004092:	68a6      	ldr	r6, [r4, #8]
 8004094:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	4e1c      	ldr	r6, [pc, #112]	@ (8004108 <HAL_TIM_Base_Init+0x188>)
 8004098:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409a:	6926      	ldr	r6, [r4, #16]
 800409c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800409e:	2680      	movs	r6, #128	@ 0x80
 80040a0:	43b2      	bics	r2, r6
 80040a2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80040a4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040a8:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80040aa:	6962      	ldr	r2, [r4, #20]
 80040ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80040ae:	e7c2      	b.n	8004036 <HAL_TIM_Base_Init+0xb6>
    return HAL_ERROR;
 80040b0:	2001      	movs	r0, #1
 80040b2:	e7e2      	b.n	800407a <HAL_TIM_Base_Init+0xfa>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80040b4:	4b15      	ldr	r3, [pc, #84]	@ (800410c <HAL_TIM_Base_Init+0x18c>)
 80040b6:	64c3      	str	r3, [r0, #76]	@ 0x4c
 80040b8:	e79a      	b.n	8003ff0 <HAL_TIM_Base_Init+0x70>
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	08003f59 	.word	0x08003f59
 80040c0:	08003f5d 	.word	0x08003f5d
 80040c4:	08003f75 	.word	0x08003f75
 80040c8:	08003f79 	.word	0x08003f79
 80040cc:	08003f65 	.word	0x08003f65
 80040d0:	08003f69 	.word	0x08003f69
 80040d4:	08003f61 	.word	0x08003f61
 80040d8:	08003f6d 	.word	0x08003f6d
 80040dc:	08003f71 	.word	0x08003f71
 80040e0:	08003f7d 	.word	0x08003f7d
 80040e4:	080057ed 	.word	0x080057ed
 80040e8:	080057f1 	.word	0x080057f1
 80040ec:	080057f5 	.word	0x080057f5
 80040f0:	080057f9 	.word	0x080057f9
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40002000 	.word	0x40002000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800
 8004108:	fffffcff 	.word	0xfffffcff
 800410c:	08001839 	.word	0x08001839

08004110 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004110:	213d      	movs	r1, #61	@ 0x3d
{
 8004112:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8004114:	5c42      	ldrb	r2, [r0, r1]
{
 8004116:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 800411a:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800411c:	2a01      	cmp	r2, #1
 800411e:	d110      	bne.n	8004142 <HAL_TIM_Base_Start+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	3201      	adds	r2, #1
 8004122:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a0e      	ldr	r2, [pc, #56]	@ (8004160 <HAL_TIM_Base_Start+0x50>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <HAL_TIM_Base_Start+0x34>
 800412c:	2280      	movs	r2, #128	@ 0x80
 800412e:	05d2      	lsls	r2, r2, #23
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <HAL_TIM_Base_Start+0x34>
 8004134:	4a0b      	ldr	r2, [pc, #44]	@ (8004164 <HAL_TIM_Base_Start+0x54>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4322      	orrs	r2, r4
 800413e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004140:	2000      	movs	r0, #0
}
 8004142:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	4908      	ldr	r1, [pc, #32]	@ (8004168 <HAL_TIM_Base_Start+0x58>)
 8004148:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	2a06      	cmp	r2, #6
 800414c:	d0f8      	beq.n	8004140 <HAL_TIM_Base_Start+0x30>
 800414e:	3907      	subs	r1, #7
 8004150:	428a      	cmp	r2, r1
 8004152:	d0f5      	beq.n	8004140 <HAL_TIM_Base_Start+0x30>
      __HAL_TIM_ENABLE(htim);
 8004154:	2101      	movs	r1, #1
 8004156:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004158:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e7f0      	b.n	8004142 <HAL_TIM_Base_Start+0x32>
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40000400 	.word	0x40000400
 8004168:	00010007 	.word	0x00010007

0800416c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800416c:	213d      	movs	r1, #61	@ 0x3d
{
 800416e:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8004170:	5c42      	ldrb	r2, [r0, r1]
{
 8004172:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8004174:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8004176:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004178:	2a01      	cmp	r2, #1
 800417a:	d113      	bne.n	80041a4 <HAL_TIM_Base_Start_IT+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	3201      	adds	r2, #1
 800417e:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	4322      	orrs	r2, r4
 8004186:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004188:	4a0e      	ldr	r2, [pc, #56]	@ (80041c4 <HAL_TIM_Base_Start_IT+0x58>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x3a>
 800418e:	2280      	movs	r2, #128	@ 0x80
 8004190:	05d2      	lsls	r2, r2, #23
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x3a>
 8004196:	4a0c      	ldr	r2, [pc, #48]	@ (80041c8 <HAL_TIM_Base_Start_IT+0x5c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4322      	orrs	r2, r4
 80041a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80041a2:	2000      	movs	r0, #0
}
 80041a4:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	4908      	ldr	r1, [pc, #32]	@ (80041cc <HAL_TIM_Base_Start_IT+0x60>)
 80041aa:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	2a06      	cmp	r2, #6
 80041ae:	d0f8      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x36>
 80041b0:	3907      	subs	r1, #7
 80041b2:	428a      	cmp	r2, r1
 80041b4:	d0f5      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x36>
      __HAL_TIM_ENABLE(htim);
 80041b6:	2101      	movs	r1, #1
 80041b8:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80041ba:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80041bc:	430a      	orrs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e7f0      	b.n	80041a4 <HAL_TIM_Base_Start_IT+0x38>
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	00010007 	.word	0x00010007

080041d0 <HAL_TIM_OC_Init>:
{
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80041d4:	d100      	bne.n	80041d8 <HAL_TIM_OC_Init+0x8>
 80041d6:	e093      	b.n	8004300 <HAL_TIM_OC_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 80041d8:	233d      	movs	r3, #61	@ 0x3d
 80041da:	5cc3      	ldrb	r3, [r0, r3]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d130      	bne.n	8004244 <HAL_TIM_OC_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 80041e2:	333c      	adds	r3, #60	@ 0x3c
 80041e4:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80041e6:	2284      	movs	r2, #132	@ 0x84
 80041e8:	4b48      	ldr	r3, [pc, #288]	@ (800430c <HAL_TIM_OC_Init+0x13c>)
 80041ea:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80041ec:	4b48      	ldr	r3, [pc, #288]	@ (8004310 <HAL_TIM_OC_Init+0x140>)
 80041ee:	3204      	adds	r2, #4
 80041f0:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80041f2:	4b48      	ldr	r3, [pc, #288]	@ (8004314 <HAL_TIM_OC_Init+0x144>)
 80041f4:	3204      	adds	r2, #4
 80041f6:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80041f8:	4b47      	ldr	r3, [pc, #284]	@ (8004318 <HAL_TIM_OC_Init+0x148>)
 80041fa:	3204      	adds	r2, #4
 80041fc:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80041fe:	4b47      	ldr	r3, [pc, #284]	@ (800431c <HAL_TIM_OC_Init+0x14c>)
 8004200:	3204      	adds	r2, #4
 8004202:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004204:	4b46      	ldr	r3, [pc, #280]	@ (8004320 <HAL_TIM_OC_Init+0x150>)
 8004206:	3204      	adds	r2, #4
 8004208:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800420a:	4b46      	ldr	r3, [pc, #280]	@ (8004324 <HAL_TIM_OC_Init+0x154>)
 800420c:	3204      	adds	r2, #4
 800420e:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004210:	4b45      	ldr	r3, [pc, #276]	@ (8004328 <HAL_TIM_OC_Init+0x158>)
 8004212:	3204      	adds	r2, #4
 8004214:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004216:	4b45      	ldr	r3, [pc, #276]	@ (800432c <HAL_TIM_OC_Init+0x15c>)
 8004218:	3204      	adds	r2, #4
 800421a:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800421c:	4b44      	ldr	r3, [pc, #272]	@ (8004330 <HAL_TIM_OC_Init+0x160>)
 800421e:	3204      	adds	r2, #4
 8004220:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004222:	4b44      	ldr	r3, [pc, #272]	@ (8004334 <HAL_TIM_OC_Init+0x164>)
 8004224:	3204      	adds	r2, #4
 8004226:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004228:	4b43      	ldr	r3, [pc, #268]	@ (8004338 <HAL_TIM_OC_Init+0x168>)
 800422a:	3204      	adds	r2, #4
 800422c:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800422e:	4b43      	ldr	r3, [pc, #268]	@ (800433c <HAL_TIM_OC_Init+0x16c>)
 8004230:	3204      	adds	r2, #4
 8004232:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004234:	4b42      	ldr	r3, [pc, #264]	@ (8004340 <HAL_TIM_OC_Init+0x170>)
 8004236:	3204      	adds	r2, #4
 8004238:	5083      	str	r3, [r0, r2]
    if (htim->OC_MspInitCallback == NULL)
 800423a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d061      	beq.n	8004304 <HAL_TIM_OC_Init+0x134>
    htim->OC_MspInitCallback(htim);
 8004240:	0020      	movs	r0, r4
 8004242:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	233d      	movs	r3, #61	@ 0x3d
 8004246:	2202      	movs	r2, #2
 8004248:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800424a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	4e3d      	ldr	r6, [pc, #244]	@ (8004344 <HAL_TIM_OC_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 800424e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004250:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8004252:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004254:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004256:	42b3      	cmp	r3, r6
 8004258:	d041      	beq.n	80042de <HAL_TIM_OC_Init+0x10e>
 800425a:	2680      	movs	r6, #128	@ 0x80
 800425c:	05f6      	lsls	r6, r6, #23
 800425e:	42b3      	cmp	r3, r6
 8004260:	d034      	beq.n	80042cc <HAL_TIM_OC_Init+0xfc>
 8004262:	4e39      	ldr	r6, [pc, #228]	@ (8004348 <HAL_TIM_OC_Init+0x178>)
 8004264:	42b3      	cmp	r3, r6
 8004266:	d031      	beq.n	80042cc <HAL_TIM_OC_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004268:	4e38      	ldr	r6, [pc, #224]	@ (800434c <HAL_TIM_OC_Init+0x17c>)
 800426a:	42b3      	cmp	r3, r6
 800426c:	d032      	beq.n	80042d4 <HAL_TIM_OC_Init+0x104>
 800426e:	4e38      	ldr	r6, [pc, #224]	@ (8004350 <HAL_TIM_OC_Init+0x180>)
 8004270:	42b3      	cmp	r3, r6
 8004272:	d038      	beq.n	80042e6 <HAL_TIM_OC_Init+0x116>
 8004274:	4e37      	ldr	r6, [pc, #220]	@ (8004354 <HAL_TIM_OC_Init+0x184>)
 8004276:	42b3      	cmp	r3, r6
 8004278:	d035      	beq.n	80042e6 <HAL_TIM_OC_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800427a:	2680      	movs	r6, #128	@ 0x80
 800427c:	43b2      	bics	r2, r6
 800427e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004280:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004282:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004284:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004286:	2201      	movs	r2, #1
 8004288:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800428a:	6919      	ldr	r1, [r3, #16]
 800428c:	420a      	tst	r2, r1
 800428e:	d002      	beq.n	8004296 <HAL_TIM_OC_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004290:	6919      	ldr	r1, [r3, #16]
 8004292:	4391      	bics	r1, r2
 8004294:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004296:	2301      	movs	r3, #1
 8004298:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800429a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429e:	3a0a      	subs	r2, #10
 80042a0:	54a3      	strb	r3, [r4, r2]
 80042a2:	3201      	adds	r2, #1
 80042a4:	54a3      	strb	r3, [r4, r2]
 80042a6:	3201      	adds	r2, #1
 80042a8:	54a3      	strb	r3, [r4, r2]
 80042aa:	3201      	adds	r2, #1
 80042ac:	54a3      	strb	r3, [r4, r2]
 80042ae:	3201      	adds	r2, #1
 80042b0:	54a3      	strb	r3, [r4, r2]
 80042b2:	3201      	adds	r2, #1
 80042b4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b6:	3201      	adds	r2, #1
 80042b8:	54a3      	strb	r3, [r4, r2]
 80042ba:	3201      	adds	r2, #1
 80042bc:	54a3      	strb	r3, [r4, r2]
 80042be:	3201      	adds	r2, #1
 80042c0:	54a3      	strb	r3, [r4, r2]
 80042c2:	3201      	adds	r2, #1
 80042c4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	3a0a      	subs	r2, #10
 80042c8:	54a3      	strb	r3, [r4, r2]
}
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042cc:	2670      	movs	r6, #112	@ 0x70
 80042ce:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80042d0:	68a6      	ldr	r6, [r4, #8]
 80042d2:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d4:	4e20      	ldr	r6, [pc, #128]	@ (8004358 <HAL_TIM_OC_Init+0x188>)
 80042d6:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d8:	6926      	ldr	r6, [r4, #16]
 80042da:	4332      	orrs	r2, r6
 80042dc:	e7cd      	b.n	800427a <HAL_TIM_OC_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042de:	2670      	movs	r6, #112	@ 0x70
 80042e0:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80042e2:	68a6      	ldr	r6, [r4, #8]
 80042e4:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e6:	4e1c      	ldr	r6, [pc, #112]	@ (8004358 <HAL_TIM_OC_Init+0x188>)
 80042e8:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ea:	6926      	ldr	r6, [r4, #16]
 80042ec:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ee:	2680      	movs	r6, #128	@ 0x80
 80042f0:	43b2      	bics	r2, r6
 80042f2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80042f4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042f8:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80042fa:	6962      	ldr	r2, [r4, #20]
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80042fe:	e7c2      	b.n	8004286 <HAL_TIM_OC_Init+0xb6>
    return HAL_ERROR;
 8004300:	2001      	movs	r0, #1
 8004302:	e7e2      	b.n	80042ca <HAL_TIM_OC_Init+0xfa>
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8004304:	4b15      	ldr	r3, [pc, #84]	@ (800435c <HAL_TIM_OC_Init+0x18c>)
 8004306:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8004308:	e79a      	b.n	8004240 <HAL_TIM_OC_Init+0x70>
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	08003f59 	.word	0x08003f59
 8004310:	08003f5d 	.word	0x08003f5d
 8004314:	08003f75 	.word	0x08003f75
 8004318:	08003f79 	.word	0x08003f79
 800431c:	08003f65 	.word	0x08003f65
 8004320:	08003f69 	.word	0x08003f69
 8004324:	08003f61 	.word	0x08003f61
 8004328:	08003f6d 	.word	0x08003f6d
 800432c:	08003f71 	.word	0x08003f71
 8004330:	08003f7d 	.word	0x08003f7d
 8004334:	080057ed 	.word	0x080057ed
 8004338:	080057f1 	.word	0x080057f1
 800433c:	080057f5 	.word	0x080057f5
 8004340:	080057f9 	.word	0x080057f9
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40000400 	.word	0x40000400
 800434c:	40002000 	.word	0x40002000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800
 8004358:	fffffcff 	.word	0xfffffcff
 800435c:	08003f4d 	.word	0x08003f4d

08004360 <HAL_TIM_OC_Start_IT>:
{
 8004360:	b510      	push	{r4, lr}
 8004362:	2910      	cmp	r1, #16
 8004364:	d803      	bhi.n	800436e <HAL_TIM_OC_Start_IT+0xe>
 8004366:	4a39      	ldr	r2, [pc, #228]	@ (800444c <HAL_TIM_OC_Start_IT+0xec>)
 8004368:	008b      	lsls	r3, r1, #2
 800436a:	58d3      	ldr	r3, [r2, r3]
 800436c:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800436e:	2343      	movs	r3, #67	@ 0x43
 8004370:	5cc2      	ldrb	r2, [r0, r3]
 8004372:	2a01      	cmp	r2, #1
 8004374:	d101      	bne.n	800437a <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004376:	2202      	movs	r2, #2
 8004378:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800437a:	2001      	movs	r0, #1
}
 800437c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800437e:	233e      	movs	r3, #62	@ 0x3e
 8004380:	5cc2      	ldrb	r2, [r0, r3]
 8004382:	2a01      	cmp	r2, #1
 8004384:	d1f9      	bne.n	800437a <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004386:	2402      	movs	r4, #2
 8004388:	54c4      	strb	r4, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800438a:	6803      	ldr	r3, [r0, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	4322      	orrs	r2, r4
 8004390:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004392:	221f      	movs	r2, #31
 8004394:	4011      	ands	r1, r2
 8004396:	3a1e      	subs	r2, #30
 8004398:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800439a:	6a19      	ldr	r1, [r3, #32]
 800439c:	4391      	bics	r1, r2
 800439e:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043a0:	6a19      	ldr	r1, [r3, #32]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004450 <HAL_TIM_OC_Start_IT+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d049      	beq.n	8004440 <HAL_TIM_OC_Start_IT+0xe0>
 80043ac:	4a29      	ldr	r2, [pc, #164]	@ (8004454 <HAL_TIM_OC_Start_IT+0xf4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d040      	beq.n	8004434 <HAL_TIM_OC_Start_IT+0xd4>
 80043b2:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <HAL_TIM_OC_Start_IT+0xf8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d03d      	beq.n	8004434 <HAL_TIM_OC_Start_IT+0xd4>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b8:	2280      	movs	r2, #128	@ 0x80
 80043ba:	05d2      	lsls	r2, r2, #23
 80043bc:	4293      	cmp	r3, r2
 80043be:	d002      	beq.n	80043c6 <HAL_TIM_OC_Start_IT+0x66>
 80043c0:	4a26      	ldr	r2, [pc, #152]	@ (800445c <HAL_TIM_OC_Start_IT+0xfc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d107      	bne.n	80043d6 <HAL_TIM_OC_Start_IT+0x76>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	4925      	ldr	r1, [pc, #148]	@ (8004460 <HAL_TIM_OC_Start_IT+0x100>)
 80043ca:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	2a06      	cmp	r2, #6
 80043ce:	d006      	beq.n	80043de <HAL_TIM_OC_Start_IT+0x7e>
 80043d0:	3907      	subs	r1, #7
 80043d2:	428a      	cmp	r2, r1
 80043d4:	d003      	beq.n	80043de <HAL_TIM_OC_Start_IT+0x7e>
        __HAL_TIM_ENABLE(htim);
 80043d6:	2101      	movs	r1, #1
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]
    return HAL_ERROR;
 80043de:	2000      	movs	r0, #0
 80043e0:	e7cc      	b.n	800437c <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043e2:	233f      	movs	r3, #63	@ 0x3f
 80043e4:	5cc2      	ldrb	r2, [r0, r3]
 80043e6:	2a01      	cmp	r2, #1
 80043e8:	d1c7      	bne.n	800437a <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ea:	2202      	movs	r2, #2
 80043ec:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043ee:	6803      	ldr	r3, [r0, #0]
 80043f0:	2004      	movs	r0, #4
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	4302      	orrs	r2, r0
 80043f6:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 80043f8:	e7cb      	b.n	8004392 <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043fa:	2340      	movs	r3, #64	@ 0x40
 80043fc:	5cc2      	ldrb	r2, [r0, r3]
 80043fe:	2a01      	cmp	r2, #1
 8004400:	d1bb      	bne.n	800437a <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004402:	2202      	movs	r2, #2
 8004404:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004406:	6803      	ldr	r3, [r0, #0]
 8004408:	2008      	movs	r0, #8
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	4302      	orrs	r2, r0
 800440e:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004410:	e7bf      	b.n	8004392 <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004412:	2341      	movs	r3, #65	@ 0x41
 8004414:	5cc2      	ldrb	r2, [r0, r3]
 8004416:	2a01      	cmp	r2, #1
 8004418:	d1af      	bne.n	800437a <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800441a:	2202      	movs	r2, #2
 800441c:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800441e:	6803      	ldr	r3, [r0, #0]
 8004420:	2010      	movs	r0, #16
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	4302      	orrs	r2, r0
 8004426:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004428:	e7b3      	b.n	8004392 <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800442a:	2342      	movs	r3, #66	@ 0x42
 800442c:	5cc2      	ldrb	r2, [r0, r3]
 800442e:	2a01      	cmp	r2, #1
 8004430:	d0a1      	beq.n	8004376 <HAL_TIM_OC_Start_IT+0x16>
 8004432:	e7a2      	b.n	800437a <HAL_TIM_OC_Start_IT+0x1a>
      __HAL_TIM_MOE_ENABLE(htim);
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004438:	0212      	lsls	r2, r2, #8
 800443a:	430a      	orrs	r2, r1
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443e:	e7ca      	b.n	80043d6 <HAL_TIM_OC_Start_IT+0x76>
      __HAL_TIM_MOE_ENABLE(htim);
 8004440:	2280      	movs	r2, #128	@ 0x80
 8004442:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004444:	0212      	lsls	r2, r2, #8
 8004446:	430a      	orrs	r2, r1
 8004448:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444a:	e7bc      	b.n	80043c6 <HAL_TIM_OC_Start_IT+0x66>
 800444c:	08006f2c 	.word	0x08006f2c
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800
 800445c:	40000400 	.word	0x40000400
 8004460:	00010007 	.word	0x00010007

08004464 <HAL_TIM_OC_Stop_IT>:
{
 8004464:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8004466:	2908      	cmp	r1, #8
 8004468:	d004      	beq.n	8004474 <HAL_TIM_OC_Stop_IT+0x10>
 800446a:	d845      	bhi.n	80044f8 <HAL_TIM_OC_Stop_IT+0x94>
 800446c:	2900      	cmp	r1, #0
 800446e:	d052      	beq.n	8004516 <HAL_TIM_OC_Stop_IT+0xb2>
 8004470:	2904      	cmp	r1, #4
 8004472:	d14e      	bne.n	8004512 <HAL_TIM_OC_Stop_IT+0xae>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004474:	6805      	ldr	r5, [r0, #0]
 8004476:	68eb      	ldr	r3, [r5, #12]
 8004478:	438b      	bics	r3, r1
 800447a:	60eb      	str	r3, [r5, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800447c:	241f      	movs	r4, #31
 800447e:	2201      	movs	r2, #1
 8004480:	400c      	ands	r4, r1
 8004482:	40a2      	lsls	r2, r4
  TIMx->CCER &= ~tmp;
 8004484:	6a2b      	ldr	r3, [r5, #32]
 8004486:	4393      	bics	r3, r2
 8004488:	622b      	str	r3, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800448a:	6a2b      	ldr	r3, [r5, #32]
 800448c:	622b      	str	r3, [r5, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800448e:	4b2f      	ldr	r3, [pc, #188]	@ (800454c <HAL_TIM_OC_Stop_IT+0xe8>)
 8004490:	429d      	cmp	r5, r3
 8004492:	d020      	beq.n	80044d6 <HAL_TIM_OC_Stop_IT+0x72>
 8004494:	4b2e      	ldr	r3, [pc, #184]	@ (8004550 <HAL_TIM_OC_Stop_IT+0xec>)
 8004496:	429d      	cmp	r5, r3
 8004498:	d01d      	beq.n	80044d6 <HAL_TIM_OC_Stop_IT+0x72>
 800449a:	4b2e      	ldr	r3, [pc, #184]	@ (8004554 <HAL_TIM_OC_Stop_IT+0xf0>)
 800449c:	429d      	cmp	r5, r3
 800449e:	d01a      	beq.n	80044d6 <HAL_TIM_OC_Stop_IT+0x72>
    __HAL_TIM_DISABLE(htim);
 80044a0:	6a2a      	ldr	r2, [r5, #32]
 80044a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004558 <HAL_TIM_OC_Stop_IT+0xf4>)
 80044a4:	421a      	tst	r2, r3
 80044a6:	d107      	bne.n	80044b8 <HAL_TIM_OC_Stop_IT+0x54>
 80044a8:	6a2a      	ldr	r2, [r5, #32]
 80044aa:	4b2c      	ldr	r3, [pc, #176]	@ (800455c <HAL_TIM_OC_Stop_IT+0xf8>)
 80044ac:	421a      	tst	r2, r3
 80044ae:	d103      	bne.n	80044b8 <HAL_TIM_OC_Stop_IT+0x54>
 80044b0:	2201      	movs	r2, #1
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	4393      	bics	r3, r2
 80044b6:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d025      	beq.n	8004508 <HAL_TIM_OC_Stop_IT+0xa4>
 80044bc:	2904      	cmp	r1, #4
 80044be:	d035      	beq.n	800452c <HAL_TIM_OC_Stop_IT+0xc8>
 80044c0:	2908      	cmp	r1, #8
 80044c2:	d02e      	beq.n	8004522 <HAL_TIM_OC_Stop_IT+0xbe>
 80044c4:	290c      	cmp	r1, #12
 80044c6:	d036      	beq.n	8004536 <HAL_TIM_OC_Stop_IT+0xd2>
 80044c8:	2910      	cmp	r1, #16
 80044ca:	d039      	beq.n	8004540 <HAL_TIM_OC_Stop_IT+0xdc>
 80044cc:	2343      	movs	r3, #67	@ 0x43
 80044ce:	2201      	movs	r2, #1
 80044d0:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 80044d2:	2000      	movs	r0, #0
 80044d4:	e01e      	b.n	8004514 <HAL_TIM_OC_Stop_IT+0xb0>
      __HAL_TIM_MOE_DISABLE(htim);
 80044d6:	6a2a      	ldr	r2, [r5, #32]
 80044d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004558 <HAL_TIM_OC_Stop_IT+0xf4>)
 80044da:	421a      	tst	r2, r3
 80044dc:	d1e0      	bne.n	80044a0 <HAL_TIM_OC_Stop_IT+0x3c>
 80044de:	6a2a      	ldr	r2, [r5, #32]
 80044e0:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <HAL_TIM_OC_Stop_IT+0xf8>)
 80044e2:	421a      	tst	r2, r3
 80044e4:	d1dc      	bne.n	80044a0 <HAL_TIM_OC_Stop_IT+0x3c>
 80044e6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80044e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004560 <HAL_TIM_OC_Stop_IT+0xfc>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 80044ee:	6a2a      	ldr	r2, [r5, #32]
 80044f0:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_TIM_OC_Stop_IT+0xf4>)
 80044f2:	421a      	tst	r2, r3
 80044f4:	d1e0      	bne.n	80044b8 <HAL_TIM_OC_Stop_IT+0x54>
 80044f6:	e7d7      	b.n	80044a8 <HAL_TIM_OC_Stop_IT+0x44>
  switch (Channel)
 80044f8:	290c      	cmp	r1, #12
 80044fa:	d10a      	bne.n	8004512 <HAL_TIM_OC_Stop_IT+0xae>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80044fc:	2210      	movs	r2, #16
 80044fe:	6805      	ldr	r5, [r0, #0]
 8004500:	68eb      	ldr	r3, [r5, #12]
 8004502:	4393      	bics	r3, r2
 8004504:	60eb      	str	r3, [r5, #12]
  if (status == HAL_OK)
 8004506:	e7b9      	b.n	800447c <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	233e      	movs	r3, #62	@ 0x3e
 800450a:	2201      	movs	r2, #1
 800450c:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 800450e:	2000      	movs	r0, #0
 8004510:	e000      	b.n	8004514 <HAL_TIM_OC_Stop_IT+0xb0>
 8004512:	2001      	movs	r0, #1
}
 8004514:	bd30      	pop	{r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004516:	2202      	movs	r2, #2
 8004518:	6805      	ldr	r5, [r0, #0]
 800451a:	68eb      	ldr	r3, [r5, #12]
 800451c:	4393      	bics	r3, r2
 800451e:	60eb      	str	r3, [r5, #12]
  if (status == HAL_OK)
 8004520:	e7ac      	b.n	800447c <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004522:	2340      	movs	r3, #64	@ 0x40
 8004524:	2201      	movs	r2, #1
 8004526:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8004528:	2000      	movs	r0, #0
 800452a:	e7f3      	b.n	8004514 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	233f      	movs	r3, #63	@ 0x3f
 800452e:	2201      	movs	r2, #1
 8004530:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8004532:	2000      	movs	r0, #0
 8004534:	e7ee      	b.n	8004514 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004536:	2341      	movs	r3, #65	@ 0x41
 8004538:	2201      	movs	r2, #1
 800453a:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 800453c:	2000      	movs	r0, #0
 800453e:	e7e9      	b.n	8004514 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	2342      	movs	r3, #66	@ 0x42
 8004542:	2201      	movs	r2, #1
 8004544:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8004546:	2000      	movs	r0, #0
 8004548:	e7e4      	b.n	8004514 <HAL_TIM_OC_Stop_IT+0xb0>
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800
 8004558:	00001111 	.word	0x00001111
 800455c:	00000444 	.word	0x00000444
 8004560:	ffff7fff 	.word	0xffff7fff

08004564 <HAL_TIM_PWM_Init>:
{
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004568:	d100      	bne.n	800456c <HAL_TIM_PWM_Init+0x8>
 800456a:	e093      	b.n	8004694 <HAL_TIM_PWM_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 800456c:	233d      	movs	r3, #61	@ 0x3d
 800456e:	5cc3      	ldrb	r3, [r0, r3]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d130      	bne.n	80045d8 <HAL_TIM_PWM_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8004576:	333c      	adds	r3, #60	@ 0x3c
 8004578:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800457a:	2284      	movs	r2, #132	@ 0x84
 800457c:	4b48      	ldr	r3, [pc, #288]	@ (80046a0 <HAL_TIM_PWM_Init+0x13c>)
 800457e:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004580:	4b48      	ldr	r3, [pc, #288]	@ (80046a4 <HAL_TIM_PWM_Init+0x140>)
 8004582:	3204      	adds	r2, #4
 8004584:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004586:	4b48      	ldr	r3, [pc, #288]	@ (80046a8 <HAL_TIM_PWM_Init+0x144>)
 8004588:	3204      	adds	r2, #4
 800458a:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800458c:	4b47      	ldr	r3, [pc, #284]	@ (80046ac <HAL_TIM_PWM_Init+0x148>)
 800458e:	3204      	adds	r2, #4
 8004590:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004592:	4b47      	ldr	r3, [pc, #284]	@ (80046b0 <HAL_TIM_PWM_Init+0x14c>)
 8004594:	3204      	adds	r2, #4
 8004596:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004598:	4b46      	ldr	r3, [pc, #280]	@ (80046b4 <HAL_TIM_PWM_Init+0x150>)
 800459a:	3204      	adds	r2, #4
 800459c:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800459e:	4b46      	ldr	r3, [pc, #280]	@ (80046b8 <HAL_TIM_PWM_Init+0x154>)
 80045a0:	3204      	adds	r2, #4
 80045a2:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80045a4:	4b45      	ldr	r3, [pc, #276]	@ (80046bc <HAL_TIM_PWM_Init+0x158>)
 80045a6:	3204      	adds	r2, #4
 80045a8:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80045aa:	4b45      	ldr	r3, [pc, #276]	@ (80046c0 <HAL_TIM_PWM_Init+0x15c>)
 80045ac:	3204      	adds	r2, #4
 80045ae:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80045b0:	4b44      	ldr	r3, [pc, #272]	@ (80046c4 <HAL_TIM_PWM_Init+0x160>)
 80045b2:	3204      	adds	r2, #4
 80045b4:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80045b6:	4b44      	ldr	r3, [pc, #272]	@ (80046c8 <HAL_TIM_PWM_Init+0x164>)
 80045b8:	3204      	adds	r2, #4
 80045ba:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80045bc:	4b43      	ldr	r3, [pc, #268]	@ (80046cc <HAL_TIM_PWM_Init+0x168>)
 80045be:	3204      	adds	r2, #4
 80045c0:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80045c2:	4b43      	ldr	r3, [pc, #268]	@ (80046d0 <HAL_TIM_PWM_Init+0x16c>)
 80045c4:	3204      	adds	r2, #4
 80045c6:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80045c8:	4b42      	ldr	r3, [pc, #264]	@ (80046d4 <HAL_TIM_PWM_Init+0x170>)
 80045ca:	3204      	adds	r2, #4
 80045cc:	5083      	str	r3, [r0, r2]
    if (htim->PWM_MspInitCallback == NULL)
 80045ce:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d061      	beq.n	8004698 <HAL_TIM_PWM_Init+0x134>
    htim->PWM_MspInitCallback(htim);
 80045d4:	0020      	movs	r0, r4
 80045d6:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	233d      	movs	r3, #61	@ 0x3d
 80045da:	2202      	movs	r2, #2
 80045dc:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045de:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e0:	4e3d      	ldr	r6, [pc, #244]	@ (80046d8 <HAL_TIM_PWM_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 80045e2:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e4:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80045e6:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e8:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ea:	42b3      	cmp	r3, r6
 80045ec:	d041      	beq.n	8004672 <HAL_TIM_PWM_Init+0x10e>
 80045ee:	2680      	movs	r6, #128	@ 0x80
 80045f0:	05f6      	lsls	r6, r6, #23
 80045f2:	42b3      	cmp	r3, r6
 80045f4:	d034      	beq.n	8004660 <HAL_TIM_PWM_Init+0xfc>
 80045f6:	4e39      	ldr	r6, [pc, #228]	@ (80046dc <HAL_TIM_PWM_Init+0x178>)
 80045f8:	42b3      	cmp	r3, r6
 80045fa:	d031      	beq.n	8004660 <HAL_TIM_PWM_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045fc:	4e38      	ldr	r6, [pc, #224]	@ (80046e0 <HAL_TIM_PWM_Init+0x17c>)
 80045fe:	42b3      	cmp	r3, r6
 8004600:	d032      	beq.n	8004668 <HAL_TIM_PWM_Init+0x104>
 8004602:	4e38      	ldr	r6, [pc, #224]	@ (80046e4 <HAL_TIM_PWM_Init+0x180>)
 8004604:	42b3      	cmp	r3, r6
 8004606:	d038      	beq.n	800467a <HAL_TIM_PWM_Init+0x116>
 8004608:	4e37      	ldr	r6, [pc, #220]	@ (80046e8 <HAL_TIM_PWM_Init+0x184>)
 800460a:	42b3      	cmp	r3, r6
 800460c:	d035      	beq.n	800467a <HAL_TIM_PWM_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460e:	2680      	movs	r6, #128	@ 0x80
 8004610:	43b2      	bics	r2, r6
 8004612:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004614:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004616:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004618:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800461a:	2201      	movs	r2, #1
 800461c:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800461e:	6919      	ldr	r1, [r3, #16]
 8004620:	420a      	tst	r2, r1
 8004622:	d002      	beq.n	800462a <HAL_TIM_PWM_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004624:	6919      	ldr	r1, [r3, #16]
 8004626:	4391      	bics	r1, r2
 8004628:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462a:	2301      	movs	r3, #1
 800462c:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800462e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004630:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	3a0a      	subs	r2, #10
 8004634:	54a3      	strb	r3, [r4, r2]
 8004636:	3201      	adds	r2, #1
 8004638:	54a3      	strb	r3, [r4, r2]
 800463a:	3201      	adds	r2, #1
 800463c:	54a3      	strb	r3, [r4, r2]
 800463e:	3201      	adds	r2, #1
 8004640:	54a3      	strb	r3, [r4, r2]
 8004642:	3201      	adds	r2, #1
 8004644:	54a3      	strb	r3, [r4, r2]
 8004646:	3201      	adds	r2, #1
 8004648:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	3201      	adds	r2, #1
 800464c:	54a3      	strb	r3, [r4, r2]
 800464e:	3201      	adds	r2, #1
 8004650:	54a3      	strb	r3, [r4, r2]
 8004652:	3201      	adds	r2, #1
 8004654:	54a3      	strb	r3, [r4, r2]
 8004656:	3201      	adds	r2, #1
 8004658:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800465a:	3a0a      	subs	r2, #10
 800465c:	54a3      	strb	r3, [r4, r2]
}
 800465e:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004660:	2670      	movs	r6, #112	@ 0x70
 8004662:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004664:	68a6      	ldr	r6, [r4, #8]
 8004666:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004668:	4e20      	ldr	r6, [pc, #128]	@ (80046ec <HAL_TIM_PWM_Init+0x188>)
 800466a:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466c:	6926      	ldr	r6, [r4, #16]
 800466e:	4332      	orrs	r2, r6
 8004670:	e7cd      	b.n	800460e <HAL_TIM_PWM_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004672:	2670      	movs	r6, #112	@ 0x70
 8004674:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004676:	68a6      	ldr	r6, [r4, #8]
 8004678:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800467a:	4e1c      	ldr	r6, [pc, #112]	@ (80046ec <HAL_TIM_PWM_Init+0x188>)
 800467c:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467e:	6926      	ldr	r6, [r4, #16]
 8004680:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004682:	2680      	movs	r6, #128	@ 0x80
 8004684:	43b2      	bics	r2, r6
 8004686:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004688:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800468a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800468c:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800468e:	6962      	ldr	r2, [r4, #20]
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30
 8004692:	e7c2      	b.n	800461a <HAL_TIM_PWM_Init+0xb6>
    return HAL_ERROR;
 8004694:	2001      	movs	r0, #1
 8004696:	e7e2      	b.n	800465e <HAL_TIM_PWM_Init+0xfa>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004698:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <HAL_TIM_PWM_Init+0x18c>)
 800469a:	6643      	str	r3, [r0, #100]	@ 0x64
 800469c:	e79a      	b.n	80045d4 <HAL_TIM_PWM_Init+0x70>
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	08003f59 	.word	0x08003f59
 80046a4:	08003f5d 	.word	0x08003f5d
 80046a8:	08003f75 	.word	0x08003f75
 80046ac:	08003f79 	.word	0x08003f79
 80046b0:	08003f65 	.word	0x08003f65
 80046b4:	08003f69 	.word	0x08003f69
 80046b8:	08003f61 	.word	0x08003f61
 80046bc:	08003f6d 	.word	0x08003f6d
 80046c0:	08003f71 	.word	0x08003f71
 80046c4:	08003f7d 	.word	0x08003f7d
 80046c8:	080057ed 	.word	0x080057ed
 80046cc:	080057f1 	.word	0x080057f1
 80046d0:	080057f5 	.word	0x080057f5
 80046d4:	080057f9 	.word	0x080057f9
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40002000 	.word	0x40002000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800
 80046ec:	fffffcff 	.word	0xfffffcff
 80046f0:	08003f51 	.word	0x08003f51

080046f4 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80046f4:	2910      	cmp	r1, #16
 80046f6:	d803      	bhi.n	8004700 <HAL_TIM_PWM_Start+0xc>
 80046f8:	4a2c      	ldr	r2, [pc, #176]	@ (80047ac <HAL_TIM_PWM_Start+0xb8>)
 80046fa:	008b      	lsls	r3, r1, #2
 80046fc:	58d3      	ldr	r3, [r2, r3]
 80046fe:	469f      	mov	pc, r3
 8004700:	2343      	movs	r3, #67	@ 0x43
 8004702:	5cc2      	ldrb	r2, [r0, r3]
 8004704:	2a01      	cmp	r2, #1
 8004706:	d12e      	bne.n	8004766 <HAL_TIM_PWM_Start+0x72>
 8004708:	2202      	movs	r2, #2
 800470a:	54c2      	strb	r2, [r0, r3]
 800470c:	221f      	movs	r2, #31
 800470e:	4011      	ands	r1, r2
 8004710:	3a1e      	subs	r2, #30
 8004712:	408a      	lsls	r2, r1
 8004714:	6803      	ldr	r3, [r0, #0]
 8004716:	6a19      	ldr	r1, [r3, #32]
 8004718:	4391      	bics	r1, r2
 800471a:	6219      	str	r1, [r3, #32]
 800471c:	6a19      	ldr	r1, [r3, #32]
 800471e:	430a      	orrs	r2, r1
 8004720:	621a      	str	r2, [r3, #32]
 8004722:	4a23      	ldr	r2, [pc, #140]	@ (80047b0 <HAL_TIM_PWM_Start+0xbc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d03a      	beq.n	800479e <HAL_TIM_PWM_Start+0xaa>
 8004728:	4a22      	ldr	r2, [pc, #136]	@ (80047b4 <HAL_TIM_PWM_Start+0xc0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d031      	beq.n	8004792 <HAL_TIM_PWM_Start+0x9e>
 800472e:	4a22      	ldr	r2, [pc, #136]	@ (80047b8 <HAL_TIM_PWM_Start+0xc4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d02e      	beq.n	8004792 <HAL_TIM_PWM_Start+0x9e>
 8004734:	2280      	movs	r2, #128	@ 0x80
 8004736:	05d2      	lsls	r2, r2, #23
 8004738:	4293      	cmp	r3, r2
 800473a:	d002      	beq.n	8004742 <HAL_TIM_PWM_Start+0x4e>
 800473c:	4a1f      	ldr	r2, [pc, #124]	@ (80047bc <HAL_TIM_PWM_Start+0xc8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d107      	bne.n	8004752 <HAL_TIM_PWM_Start+0x5e>
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	491e      	ldr	r1, [pc, #120]	@ (80047c0 <HAL_TIM_PWM_Start+0xcc>)
 8004746:	400a      	ands	r2, r1
 8004748:	2a06      	cmp	r2, #6
 800474a:	d006      	beq.n	800475a <HAL_TIM_PWM_Start+0x66>
 800474c:	3907      	subs	r1, #7
 800474e:	428a      	cmp	r2, r1
 8004750:	d003      	beq.n	800475a <HAL_TIM_PWM_Start+0x66>
 8004752:	2101      	movs	r1, #1
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	2000      	movs	r0, #0
 800475c:	4770      	bx	lr
 800475e:	233e      	movs	r3, #62	@ 0x3e
 8004760:	5cc2      	ldrb	r2, [r0, r3]
 8004762:	2a01      	cmp	r2, #1
 8004764:	d0d0      	beq.n	8004708 <HAL_TIM_PWM_Start+0x14>
 8004766:	2001      	movs	r0, #1
 8004768:	e7f8      	b.n	800475c <HAL_TIM_PWM_Start+0x68>
 800476a:	233f      	movs	r3, #63	@ 0x3f
 800476c:	5cc2      	ldrb	r2, [r0, r3]
 800476e:	2a01      	cmp	r2, #1
 8004770:	d0ca      	beq.n	8004708 <HAL_TIM_PWM_Start+0x14>
 8004772:	e7f8      	b.n	8004766 <HAL_TIM_PWM_Start+0x72>
 8004774:	2340      	movs	r3, #64	@ 0x40
 8004776:	5cc2      	ldrb	r2, [r0, r3]
 8004778:	2a01      	cmp	r2, #1
 800477a:	d0c5      	beq.n	8004708 <HAL_TIM_PWM_Start+0x14>
 800477c:	e7f3      	b.n	8004766 <HAL_TIM_PWM_Start+0x72>
 800477e:	2341      	movs	r3, #65	@ 0x41
 8004780:	5cc2      	ldrb	r2, [r0, r3]
 8004782:	2a01      	cmp	r2, #1
 8004784:	d0c0      	beq.n	8004708 <HAL_TIM_PWM_Start+0x14>
 8004786:	e7ee      	b.n	8004766 <HAL_TIM_PWM_Start+0x72>
 8004788:	2342      	movs	r3, #66	@ 0x42
 800478a:	5cc2      	ldrb	r2, [r0, r3]
 800478c:	2a01      	cmp	r2, #1
 800478e:	d0bb      	beq.n	8004708 <HAL_TIM_PWM_Start+0x14>
 8004790:	e7e9      	b.n	8004766 <HAL_TIM_PWM_Start+0x72>
 8004792:	2280      	movs	r2, #128	@ 0x80
 8004794:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004796:	0212      	lsls	r2, r2, #8
 8004798:	430a      	orrs	r2, r1
 800479a:	645a      	str	r2, [r3, #68]	@ 0x44
 800479c:	e7d9      	b.n	8004752 <HAL_TIM_PWM_Start+0x5e>
 800479e:	2280      	movs	r2, #128	@ 0x80
 80047a0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80047a2:	0212      	lsls	r2, r2, #8
 80047a4:	430a      	orrs	r2, r1
 80047a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80047a8:	e7cb      	b.n	8004742 <HAL_TIM_PWM_Start+0x4e>
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	08006f70 	.word	0x08006f70
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800
 80047bc:	40000400 	.word	0x40000400
 80047c0:	00010007 	.word	0x00010007

080047c4 <HAL_TIM_IC_Init>:
{
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80047c8:	d100      	bne.n	80047cc <HAL_TIM_IC_Init+0x8>
 80047ca:	e093      	b.n	80048f4 <HAL_TIM_IC_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 80047cc:	233d      	movs	r3, #61	@ 0x3d
 80047ce:	5cc3      	ldrb	r3, [r0, r3]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d130      	bne.n	8004838 <HAL_TIM_IC_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 80047d6:	333c      	adds	r3, #60	@ 0x3c
 80047d8:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80047da:	2284      	movs	r2, #132	@ 0x84
 80047dc:	4b48      	ldr	r3, [pc, #288]	@ (8004900 <HAL_TIM_IC_Init+0x13c>)
 80047de:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80047e0:	4b48      	ldr	r3, [pc, #288]	@ (8004904 <HAL_TIM_IC_Init+0x140>)
 80047e2:	3204      	adds	r2, #4
 80047e4:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80047e6:	4b48      	ldr	r3, [pc, #288]	@ (8004908 <HAL_TIM_IC_Init+0x144>)
 80047e8:	3204      	adds	r2, #4
 80047ea:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80047ec:	4b47      	ldr	r3, [pc, #284]	@ (800490c <HAL_TIM_IC_Init+0x148>)
 80047ee:	3204      	adds	r2, #4
 80047f0:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80047f2:	4b47      	ldr	r3, [pc, #284]	@ (8004910 <HAL_TIM_IC_Init+0x14c>)
 80047f4:	3204      	adds	r2, #4
 80047f6:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80047f8:	4b46      	ldr	r3, [pc, #280]	@ (8004914 <HAL_TIM_IC_Init+0x150>)
 80047fa:	3204      	adds	r2, #4
 80047fc:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80047fe:	4b46      	ldr	r3, [pc, #280]	@ (8004918 <HAL_TIM_IC_Init+0x154>)
 8004800:	3204      	adds	r2, #4
 8004802:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004804:	4b45      	ldr	r3, [pc, #276]	@ (800491c <HAL_TIM_IC_Init+0x158>)
 8004806:	3204      	adds	r2, #4
 8004808:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800480a:	4b45      	ldr	r3, [pc, #276]	@ (8004920 <HAL_TIM_IC_Init+0x15c>)
 800480c:	3204      	adds	r2, #4
 800480e:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004810:	4b44      	ldr	r3, [pc, #272]	@ (8004924 <HAL_TIM_IC_Init+0x160>)
 8004812:	3204      	adds	r2, #4
 8004814:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004816:	4b44      	ldr	r3, [pc, #272]	@ (8004928 <HAL_TIM_IC_Init+0x164>)
 8004818:	3204      	adds	r2, #4
 800481a:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800481c:	4b43      	ldr	r3, [pc, #268]	@ (800492c <HAL_TIM_IC_Init+0x168>)
 800481e:	3204      	adds	r2, #4
 8004820:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004822:	4b43      	ldr	r3, [pc, #268]	@ (8004930 <HAL_TIM_IC_Init+0x16c>)
 8004824:	3204      	adds	r2, #4
 8004826:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004828:	4b42      	ldr	r3, [pc, #264]	@ (8004934 <HAL_TIM_IC_Init+0x170>)
 800482a:	3204      	adds	r2, #4
 800482c:	5083      	str	r3, [r0, r2]
    if (htim->IC_MspInitCallback == NULL)
 800482e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004830:	2b00      	cmp	r3, #0
 8004832:	d061      	beq.n	80048f8 <HAL_TIM_IC_Init+0x134>
    htim->IC_MspInitCallback(htim);
 8004834:	0020      	movs	r0, r4
 8004836:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	233d      	movs	r3, #61	@ 0x3d
 800483a:	2202      	movs	r2, #2
 800483c:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004840:	4e3d      	ldr	r6, [pc, #244]	@ (8004938 <HAL_TIM_IC_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 8004842:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004844:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8004846:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004848:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800484a:	42b3      	cmp	r3, r6
 800484c:	d041      	beq.n	80048d2 <HAL_TIM_IC_Init+0x10e>
 800484e:	2680      	movs	r6, #128	@ 0x80
 8004850:	05f6      	lsls	r6, r6, #23
 8004852:	42b3      	cmp	r3, r6
 8004854:	d034      	beq.n	80048c0 <HAL_TIM_IC_Init+0xfc>
 8004856:	4e39      	ldr	r6, [pc, #228]	@ (800493c <HAL_TIM_IC_Init+0x178>)
 8004858:	42b3      	cmp	r3, r6
 800485a:	d031      	beq.n	80048c0 <HAL_TIM_IC_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485c:	4e38      	ldr	r6, [pc, #224]	@ (8004940 <HAL_TIM_IC_Init+0x17c>)
 800485e:	42b3      	cmp	r3, r6
 8004860:	d032      	beq.n	80048c8 <HAL_TIM_IC_Init+0x104>
 8004862:	4e38      	ldr	r6, [pc, #224]	@ (8004944 <HAL_TIM_IC_Init+0x180>)
 8004864:	42b3      	cmp	r3, r6
 8004866:	d038      	beq.n	80048da <HAL_TIM_IC_Init+0x116>
 8004868:	4e37      	ldr	r6, [pc, #220]	@ (8004948 <HAL_TIM_IC_Init+0x184>)
 800486a:	42b3      	cmp	r3, r6
 800486c:	d035      	beq.n	80048da <HAL_TIM_IC_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800486e:	2680      	movs	r6, #128	@ 0x80
 8004870:	43b2      	bics	r2, r6
 8004872:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004874:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004876:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004878:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800487a:	2201      	movs	r2, #1
 800487c:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800487e:	6919      	ldr	r1, [r3, #16]
 8004880:	420a      	tst	r2, r1
 8004882:	d002      	beq.n	800488a <HAL_TIM_IC_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004884:	6919      	ldr	r1, [r3, #16]
 8004886:	4391      	bics	r1, r2
 8004888:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488a:	2301      	movs	r3, #1
 800488c:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800488e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004890:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004892:	3a0a      	subs	r2, #10
 8004894:	54a3      	strb	r3, [r4, r2]
 8004896:	3201      	adds	r2, #1
 8004898:	54a3      	strb	r3, [r4, r2]
 800489a:	3201      	adds	r2, #1
 800489c:	54a3      	strb	r3, [r4, r2]
 800489e:	3201      	adds	r2, #1
 80048a0:	54a3      	strb	r3, [r4, r2]
 80048a2:	3201      	adds	r2, #1
 80048a4:	54a3      	strb	r3, [r4, r2]
 80048a6:	3201      	adds	r2, #1
 80048a8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048aa:	3201      	adds	r2, #1
 80048ac:	54a3      	strb	r3, [r4, r2]
 80048ae:	3201      	adds	r2, #1
 80048b0:	54a3      	strb	r3, [r4, r2]
 80048b2:	3201      	adds	r2, #1
 80048b4:	54a3      	strb	r3, [r4, r2]
 80048b6:	3201      	adds	r2, #1
 80048b8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80048ba:	3a0a      	subs	r2, #10
 80048bc:	54a3      	strb	r3, [r4, r2]
}
 80048be:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	2670      	movs	r6, #112	@ 0x70
 80048c2:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80048c4:	68a6      	ldr	r6, [r4, #8]
 80048c6:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c8:	4e20      	ldr	r6, [pc, #128]	@ (800494c <HAL_TIM_IC_Init+0x188>)
 80048ca:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048cc:	6926      	ldr	r6, [r4, #16]
 80048ce:	4332      	orrs	r2, r6
 80048d0:	e7cd      	b.n	800486e <HAL_TIM_IC_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d2:	2670      	movs	r6, #112	@ 0x70
 80048d4:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80048d6:	68a6      	ldr	r6, [r4, #8]
 80048d8:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80048da:	4e1c      	ldr	r6, [pc, #112]	@ (800494c <HAL_TIM_IC_Init+0x188>)
 80048dc:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	6926      	ldr	r6, [r4, #16]
 80048e0:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e2:	2680      	movs	r6, #128	@ 0x80
 80048e4:	43b2      	bics	r2, r6
 80048e6:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80048e8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ea:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048ec:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80048ee:	6962      	ldr	r2, [r4, #20]
 80048f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80048f2:	e7c2      	b.n	800487a <HAL_TIM_IC_Init+0xb6>
    return HAL_ERROR;
 80048f4:	2001      	movs	r0, #1
 80048f6:	e7e2      	b.n	80048be <HAL_TIM_IC_Init+0xfa>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80048f8:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <HAL_TIM_IC_Init+0x18c>)
 80048fa:	6543      	str	r3, [r0, #84]	@ 0x54
 80048fc:	e79a      	b.n	8004834 <HAL_TIM_IC_Init+0x70>
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	08003f59 	.word	0x08003f59
 8004904:	08003f5d 	.word	0x08003f5d
 8004908:	08003f75 	.word	0x08003f75
 800490c:	08003f79 	.word	0x08003f79
 8004910:	08003f65 	.word	0x08003f65
 8004914:	08003f69 	.word	0x08003f69
 8004918:	08003f61 	.word	0x08003f61
 800491c:	08003f6d 	.word	0x08003f6d
 8004920:	08003f71 	.word	0x08003f71
 8004924:	08003f7d 	.word	0x08003f7d
 8004928:	080057ed 	.word	0x080057ed
 800492c:	080057f1 	.word	0x080057f1
 8004930:	080057f5 	.word	0x080057f5
 8004934:	080057f9 	.word	0x080057f9
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40000400 	.word	0x40000400
 8004940:	40002000 	.word	0x40002000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800
 800494c:	fffffcff 	.word	0xfffffcff
 8004950:	08003f55 	.word	0x08003f55

08004954 <HAL_TIM_IC_Start_IT>:
{
 8004954:	b530      	push	{r4, r5, lr}
 8004956:	2910      	cmp	r1, #16
 8004958:	d816      	bhi.n	8004988 <HAL_TIM_IC_Start_IT+0x34>
 800495a:	4a53      	ldr	r2, [pc, #332]	@ (8004aa8 <HAL_TIM_IC_Start_IT+0x154>)
 800495c:	008b      	lsls	r3, r1, #2
 800495e:	58d3      	ldr	r3, [r2, r3]
 8004960:	469f      	mov	pc, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004962:	243e      	movs	r4, #62	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004964:	2244      	movs	r2, #68	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004966:	5d05      	ldrb	r5, [r0, r4]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004968:	5c83      	ldrb	r3, [r0, r2]
 800496a:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800496c:	2d01      	cmp	r5, #1
 800496e:	d001      	beq.n	8004974 <HAL_TIM_IC_Start_IT+0x20>
{
 8004970:	2001      	movs	r0, #1
}
 8004972:	bd30      	pop	{r4, r5, pc}
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004974:	2b01      	cmp	r3, #1
 8004976:	d1fb      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004978:	2502      	movs	r5, #2
 800497a:	5505      	strb	r5, [r0, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800497c:	5485      	strb	r5, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800497e:	6803      	ldr	r3, [r0, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	432a      	orrs	r2, r5
 8004984:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004986:	e022      	b.n	80049ce <HAL_TIM_IC_Start_IT+0x7a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004988:	2343      	movs	r3, #67	@ 0x43
 800498a:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800498c:	3304      	adds	r3, #4
 800498e:	5cc3      	ldrb	r3, [r0, r3]
 8004990:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004992:	2a01      	cmp	r2, #1
 8004994:	d1ec      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004996:	2b01      	cmp	r3, #1
 8004998:	d1ea      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800499a:	1f0b      	subs	r3, r1, #4
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d878      	bhi.n	8004a92 <HAL_TIM_IC_Start_IT+0x13e>
 80049a0:	4a42      	ldr	r2, [pc, #264]	@ (8004aac <HAL_TIM_IC_Start_IT+0x158>)
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	58d3      	ldr	r3, [r2, r3]
 80049a6:	469f      	mov	pc, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80049a8:	233f      	movs	r3, #63	@ 0x3f
 80049aa:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049ac:	3306      	adds	r3, #6
 80049ae:	5cc3      	ldrb	r3, [r0, r3]
 80049b0:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049b2:	2a01      	cmp	r2, #1
 80049b4:	d1dc      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d1da      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ba:	2302      	movs	r3, #2
 80049bc:	223f      	movs	r2, #63	@ 0x3f
 80049be:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c0:	3206      	adds	r2, #6
 80049c2:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049c4:	6803      	ldr	r3, [r0, #0]
 80049c6:	2004      	movs	r0, #4
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	4302      	orrs	r2, r0
 80049cc:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049ce:	221f      	movs	r2, #31
 80049d0:	2001      	movs	r0, #1
 80049d2:	400a      	ands	r2, r1
 80049d4:	0001      	movs	r1, r0
 80049d6:	4091      	lsls	r1, r2
 80049d8:	000a      	movs	r2, r1
  TIMx->CCER &= ~tmp;
 80049da:	6a19      	ldr	r1, [r3, #32]
 80049dc:	4391      	bics	r1, r2
 80049de:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049e0:	6a19      	ldr	r1, [r3, #32]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	621a      	str	r2, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e6:	4a32      	ldr	r2, [pc, #200]	@ (8004ab0 <HAL_TIM_IC_Start_IT+0x15c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d044      	beq.n	8004a76 <HAL_TIM_IC_Start_IT+0x122>
 80049ec:	2280      	movs	r2, #128	@ 0x80
 80049ee:	05d2      	lsls	r2, r2, #23
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d040      	beq.n	8004a76 <HAL_TIM_IC_Start_IT+0x122>
 80049f4:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab4 <HAL_TIM_IC_Start_IT+0x160>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d03d      	beq.n	8004a76 <HAL_TIM_IC_Start_IT+0x122>
      __HAL_TIM_ENABLE(htim);
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4302      	orrs	r2, r0
 80049fe:	601a      	str	r2, [r3, #0]
{
 8004a00:	2000      	movs	r0, #0
 8004a02:	e7b6      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x1e>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a04:	2342      	movs	r3, #66	@ 0x42
 8004a06:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a08:	3305      	adds	r3, #5
 8004a0a:	5cc3      	ldrb	r3, [r0, r3]
 8004a0c:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a0e:	2a01      	cmp	r2, #1
 8004a10:	d1ae      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d1ac      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a16:	2302      	movs	r3, #2
 8004a18:	2242      	movs	r2, #66	@ 0x42
 8004a1a:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1c:	3205      	adds	r2, #5
 8004a1e:	5483      	strb	r3, [r0, r2]
  switch (Channel)
 8004a20:	e7a6      	b.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a22:	2240      	movs	r2, #64	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a24:	2346      	movs	r3, #70	@ 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a26:	5c84      	ldrb	r4, [r0, r2]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a28:	5cc3      	ldrb	r3, [r0, r3]
 8004a2a:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a2c:	2c01      	cmp	r4, #1
 8004a2e:	d19f      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d19d      	bne.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a34:	2302      	movs	r3, #2
 8004a36:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a38:	2346      	movs	r3, #70	@ 0x46
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a3e:	6803      	ldr	r3, [r0, #0]
 8004a40:	2008      	movs	r0, #8
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	4302      	orrs	r2, r0
 8004a46:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004a48:	e7c1      	b.n	80049ce <HAL_TIM_IC_Start_IT+0x7a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a4a:	2341      	movs	r3, #65	@ 0x41
 8004a4c:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a4e:	3306      	adds	r3, #6
 8004a50:	5cc3      	ldrb	r3, [r0, r3]
 8004a52:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a54:	2a01      	cmp	r2, #1
 8004a56:	d000      	beq.n	8004a5a <HAL_TIM_IC_Start_IT+0x106>
 8004a58:	e78a      	b.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d000      	beq.n	8004a60 <HAL_TIM_IC_Start_IT+0x10c>
 8004a5e:	e787      	b.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a60:	2302      	movs	r3, #2
 8004a62:	2241      	movs	r2, #65	@ 0x41
 8004a64:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a66:	3206      	adds	r2, #6
 8004a68:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a6a:	6803      	ldr	r3, [r0, #0]
 8004a6c:	2010      	movs	r0, #16
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	4302      	orrs	r2, r0
 8004a72:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004a74:	e7ab      	b.n	80049ce <HAL_TIM_IC_Start_IT+0x7a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	490f      	ldr	r1, [pc, #60]	@ (8004ab8 <HAL_TIM_IC_Start_IT+0x164>)
 8004a7a:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7c:	2a06      	cmp	r2, #6
 8004a7e:	d0bf      	beq.n	8004a00 <HAL_TIM_IC_Start_IT+0xac>
 8004a80:	3907      	subs	r1, #7
 8004a82:	428a      	cmp	r2, r1
 8004a84:	d0bc      	beq.n	8004a00 <HAL_TIM_IC_Start_IT+0xac>
        __HAL_TIM_ENABLE(htim);
 8004a86:	2101      	movs	r1, #1
 8004a88:	681a      	ldr	r2, [r3, #0]
{
 8004a8a:	2000      	movs	r0, #0
        __HAL_TIM_ENABLE(htim);
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e76f      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a92:	2302      	movs	r3, #2
 8004a94:	2243      	movs	r2, #67	@ 0x43
 8004a96:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a98:	3204      	adds	r2, #4
 8004a9a:	5483      	strb	r3, [r0, r2]
  switch (Channel)
 8004a9c:	e768      	b.n	8004970 <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9e:	2340      	movs	r3, #64	@ 0x40
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	54c2      	strb	r2, [r0, r3]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa4:	e7c8      	b.n	8004a38 <HAL_TIM_IC_Start_IT+0xe4>
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	08006fb4 	.word	0x08006fb4
 8004aac:	08006ff8 	.word	0x08006ff8
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	00010007 	.word	0x00010007

08004abc <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004abc:	2202      	movs	r2, #2
{
 8004abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004ac0:	6803      	ldr	r3, [r0, #0]
{
 8004ac2:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004ac4:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ac6:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ac8:	422a      	tst	r2, r5
 8004aca:	d002      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x16>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004acc:	4232      	tst	r2, r6
 8004ace:	d000      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x16>
 8004ad0:	e0a6      	b.n	8004c20 <HAL_TIM_IRQHandler+0x164>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	422b      	tst	r3, r5
 8004ad6:	d002      	beq.n	8004ade <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ad8:	4233      	tst	r3, r6
 8004ada:	d000      	beq.n	8004ade <HAL_TIM_IRQHandler+0x22>
 8004adc:	e08a      	b.n	8004bf4 <HAL_TIM_IRQHandler+0x138>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ade:	2308      	movs	r3, #8
 8004ae0:	422b      	tst	r3, r5
 8004ae2:	d002      	beq.n	8004aea <HAL_TIM_IRQHandler+0x2e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ae4:	4233      	tst	r3, r6
 8004ae6:	d000      	beq.n	8004aea <HAL_TIM_IRQHandler+0x2e>
 8004ae8:	e070      	b.n	8004bcc <HAL_TIM_IRQHandler+0x110>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004aea:	2310      	movs	r3, #16
 8004aec:	422b      	tst	r3, r5
 8004aee:	d001      	beq.n	8004af4 <HAL_TIM_IRQHandler+0x38>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004af0:	4233      	tst	r3, r6
 8004af2:	d155      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0xe4>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004af4:	2301      	movs	r3, #1
 8004af6:	422b      	tst	r3, r5
 8004af8:	d001      	beq.n	8004afe <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004afa:	4233      	tst	r3, r6
 8004afc:	d135      	bne.n	8004b6a <HAL_TIM_IRQHandler+0xae>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004afe:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b00:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b02:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b04:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b06:	402f      	ands	r7, r5
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b08:	421d      	tst	r5, r3
 8004b0a:	d03d      	beq.n	8004b88 <HAL_TIM_IRQHandler+0xcc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b0c:	0633      	lsls	r3, r6, #24
 8004b0e:	d41b      	bmi.n	8004b48 <HAL_TIM_IRQHandler+0x8c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b10:	2340      	movs	r3, #64	@ 0x40
 8004b12:	422b      	tst	r3, r5
 8004b14:	d001      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b16:	4233      	tst	r3, r6
 8004b18:	d10d      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x7a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	422b      	tst	r3, r5
 8004b1e:	d009      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x78>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b20:	4233      	tst	r3, r6
 8004b22:	d007      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x78>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b24:	2221      	movs	r2, #33	@ 0x21
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	4252      	negs	r2, r2
 8004b2a:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8004b2c:	23ac      	movs	r3, #172	@ 0xac
 8004b2e:	0020      	movs	r0, r4
 8004b30:	58e3      	ldr	r3, [r4, r3]
 8004b32:	4798      	blx	r3
}
 8004b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b36:	2241      	movs	r2, #65	@ 0x41
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	4252      	negs	r2, r2
 8004b3c:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8004b3e:	238c      	movs	r3, #140	@ 0x8c
 8004b40:	0020      	movs	r0, r4
 8004b42:	58e3      	ldr	r3, [r4, r3]
 8004b44:	4798      	blx	r3
 8004b46:	e7e8      	b.n	8004b1a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	4a47      	ldr	r2, [pc, #284]	@ (8004c68 <HAL_TIM_IRQHandler+0x1ac>)
      htim->BreakCallback(htim);
 8004b4c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b4e:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8004b50:	23b4      	movs	r3, #180	@ 0xb4
 8004b52:	58e3      	ldr	r3, [r4, r3]
 8004b54:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b56:	2f00      	cmp	r7, #0
 8004b58:	d0da      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	4a43      	ldr	r2, [pc, #268]	@ (8004c6c <HAL_TIM_IRQHandler+0x1b0>)
      htim->Break2Callback(htim);
 8004b5e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8004b62:	23b8      	movs	r3, #184	@ 0xb8
 8004b64:	58e3      	ldr	r3, [r4, r3]
 8004b66:	4798      	blx	r3
 8004b68:	e7d2      	b.n	8004b10 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	4252      	negs	r2, r2
 8004b70:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8004b72:	2384      	movs	r3, #132	@ 0x84
 8004b74:	0020      	movs	r0, r4
 8004b76:	58e3      	ldr	r3, [r4, r3]
 8004b78:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b7a:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b7c:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b7e:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b80:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b82:	402f      	ands	r7, r5
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b84:	421d      	tst	r5, r3
 8004b86:	d1c1      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x50>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	d0c1      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b8c:	0633      	lsls	r3, r6, #24
 8004b8e:	d5bf      	bpl.n	8004b10 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	4a36      	ldr	r2, [pc, #216]	@ (8004c6c <HAL_TIM_IRQHandler+0x1b0>)
      htim->Break2Callback(htim);
 8004b94:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b96:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8004b98:	23b8      	movs	r3, #184	@ 0xb8
 8004b9a:	58e3      	ldr	r3, [r4, r3]
 8004b9c:	4798      	blx	r3
 8004b9e:	e7b7      	b.n	8004b10 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ba0:	2211      	movs	r2, #17
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	4252      	negs	r2, r2
 8004ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba8:	3219      	adds	r2, #25
 8004baa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bac:	69da      	ldr	r2, [r3, #28]
 8004bae:	23c0      	movs	r3, #192	@ 0xc0
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	421a      	tst	r2, r3
 8004bb4:	d153      	bne.n	8004c5e <HAL_TIM_IRQHandler+0x1a2>
        htim->OC_DelayElapsedCallback(htim);
 8004bb6:	239c      	movs	r3, #156	@ 0x9c
 8004bb8:	0020      	movs	r0, r4
 8004bba:	58e3      	ldr	r3, [r4, r3]
 8004bbc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004bbe:	23a0      	movs	r3, #160	@ 0xa0
 8004bc0:	0020      	movs	r0, r4
 8004bc2:	58e3      	ldr	r3, [r4, r3]
 8004bc4:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	7723      	strb	r3, [r4, #28]
 8004bca:	e793      	b.n	8004af4 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bcc:	2209      	movs	r2, #9
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	4252      	negs	r2, r2
 8004bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd4:	320d      	adds	r2, #13
 8004bd6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	079b      	lsls	r3, r3, #30
 8004bdc:	d13a      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x198>
        htim->OC_DelayElapsedCallback(htim);
 8004bde:	239c      	movs	r3, #156	@ 0x9c
 8004be0:	0020      	movs	r0, r4
 8004be2:	58e3      	ldr	r3, [r4, r3]
 8004be4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004be6:	23a0      	movs	r3, #160	@ 0xa0
 8004be8:	0020      	movs	r0, r4
 8004bea:	58e3      	ldr	r3, [r4, r3]
 8004bec:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	7723      	strb	r3, [r4, #28]
 8004bf2:	e77a      	b.n	8004aea <HAL_TIM_IRQHandler+0x2e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	4252      	negs	r2, r2
 8004bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bfc:	3207      	adds	r2, #7
 8004bfe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	23c0      	movs	r3, #192	@ 0xc0
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	421a      	tst	r2, r3
 8004c08:	d11f      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x18e>
        htim->OC_DelayElapsedCallback(htim);
 8004c0a:	239c      	movs	r3, #156	@ 0x9c
 8004c0c:	0020      	movs	r0, r4
 8004c0e:	58e3      	ldr	r3, [r4, r3]
 8004c10:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004c12:	23a0      	movs	r3, #160	@ 0xa0
 8004c14:	0020      	movs	r0, r4
 8004c16:	58e3      	ldr	r3, [r4, r3]
 8004c18:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	7723      	strb	r3, [r4, #28]
 8004c1e:	e75e      	b.n	8004ade <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c20:	3a05      	subs	r2, #5
 8004c22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c24:	3204      	adds	r2, #4
 8004c26:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	079b      	lsls	r3, r3, #30
 8004c2c:	d109      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x186>
          htim->OC_DelayElapsedCallback(htim);
 8004c2e:	239c      	movs	r3, #156	@ 0x9c
 8004c30:	58c3      	ldr	r3, [r0, r3]
 8004c32:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004c34:	23a0      	movs	r3, #160	@ 0xa0
 8004c36:	0020      	movs	r0, r4
 8004c38:	58e3      	ldr	r3, [r4, r3]
 8004c3a:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	7723      	strb	r3, [r4, #28]
 8004c40:	e747      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x16>
          htim->IC_CaptureCallback(htim);
 8004c42:	2394      	movs	r3, #148	@ 0x94
 8004c44:	58c3      	ldr	r3, [r0, r3]
 8004c46:	4798      	blx	r3
 8004c48:	e7f8      	b.n	8004c3c <HAL_TIM_IRQHandler+0x180>
        htim->IC_CaptureCallback(htim);
 8004c4a:	2394      	movs	r3, #148	@ 0x94
 8004c4c:	0020      	movs	r0, r4
 8004c4e:	58e3      	ldr	r3, [r4, r3]
 8004c50:	4798      	blx	r3
 8004c52:	e7e2      	b.n	8004c1a <HAL_TIM_IRQHandler+0x15e>
        htim->IC_CaptureCallback(htim);
 8004c54:	2394      	movs	r3, #148	@ 0x94
 8004c56:	0020      	movs	r0, r4
 8004c58:	58e3      	ldr	r3, [r4, r3]
 8004c5a:	4798      	blx	r3
 8004c5c:	e7c7      	b.n	8004bee <HAL_TIM_IRQHandler+0x132>
        htim->IC_CaptureCallback(htim);
 8004c5e:	2394      	movs	r3, #148	@ 0x94
 8004c60:	0020      	movs	r0, r4
 8004c62:	58e3      	ldr	r3, [r4, r3]
 8004c64:	4798      	blx	r3
 8004c66:	e7ae      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x10a>
 8004c68:	ffffdf7f 	.word	0xffffdf7f
 8004c6c:	fffffeff 	.word	0xfffffeff

08004c70 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004c70:	233c      	movs	r3, #60	@ 0x3c
{
 8004c72:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004c74:	5cc3      	ldrb	r3, [r0, r3]
{
 8004c76:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d100      	bne.n	8004c7e <HAL_TIM_OC_ConfigChannel+0xe>
 8004c7c:	e119      	b.n	8004eb2 <HAL_TIM_OC_ConfigChannel+0x242>
  switch (Channel)
 8004c7e:	2a14      	cmp	r2, #20
 8004c80:	d803      	bhi.n	8004c8a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004c82:	4b8d      	ldr	r3, [pc, #564]	@ (8004eb8 <HAL_TIM_OC_ConfigChannel+0x248>)
 8004c84:	0092      	lsls	r2, r2, #2
 8004c86:	589b      	ldr	r3, [r3, r2]
 8004c88:	469f      	mov	pc, r3
 8004c8a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004c8c:	233c      	movs	r3, #60	@ 0x3c
 8004c8e:	2200      	movs	r2, #0
 8004c90:	54e2      	strb	r2, [r4, r3]
}
 8004c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c94:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c96:	4d89      	ldr	r5, [pc, #548]	@ (8004ebc <HAL_TIM_OC_ConfigChannel+0x24c>)
  tmpccer = TIMx->CCER;
 8004c98:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	402a      	ands	r2, r5
 8004c9e:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ca0:	4d87      	ldr	r5, [pc, #540]	@ (8004ec0 <HAL_TIM_OC_ConfigChannel+0x250>)
  tmpcr2 =  TIMx->CR2;
 8004ca2:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004ca4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ca6:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	680d      	ldr	r5, [r1, #0]
 8004caa:	022d      	lsls	r5, r5, #8
 8004cac:	4315      	orrs	r5, r2
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cae:	4a85      	ldr	r2, [pc, #532]	@ (8004ec4 <HAL_TIM_OC_ConfigChannel+0x254>)
 8004cb0:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cb2:	688a      	ldr	r2, [r1, #8]
 8004cb4:	0512      	lsls	r2, r2, #20
 8004cb6:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb8:	4883      	ldr	r0, [pc, #524]	@ (8004ec8 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004cba:	4283      	cmp	r3, r0
 8004cbc:	d100      	bne.n	8004cc0 <HAL_TIM_OC_ConfigChannel+0x50>
 8004cbe:	e0c8      	b.n	8004e52 <HAL_TIM_OC_ConfigChannel+0x1e2>
 8004cc0:	4882      	ldr	r0, [pc, #520]	@ (8004ecc <HAL_TIM_OC_ConfigChannel+0x25c>)
 8004cc2:	4283      	cmp	r3, r0
 8004cc4:	d100      	bne.n	8004cc8 <HAL_TIM_OC_ConfigChannel+0x58>
 8004cc6:	e0c4      	b.n	8004e52 <HAL_TIM_OC_ConfigChannel+0x1e2>
 8004cc8:	4881      	ldr	r0, [pc, #516]	@ (8004ed0 <HAL_TIM_OC_ConfigChannel+0x260>)
 8004cca:	4283      	cmp	r3, r0
 8004ccc:	d100      	bne.n	8004cd0 <HAL_TIM_OC_ConfigChannel+0x60>
 8004cce:	e0c0      	b.n	8004e52 <HAL_TIM_OC_ConfigChannel+0x1e2>
  TIMx->CCR6 = OC_Config->Pulse;
 8004cd0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004cd2:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	2000      	movs	r0, #0
  TIMx->CCMR3 = tmpccmrx;
 8004cd6:	655d      	str	r5, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004cd8:	65d9      	str	r1, [r3, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 8004cda:	621a      	str	r2, [r3, #32]
 8004cdc:	e7d6      	b.n	8004c8c <HAL_TIM_OC_ConfigChannel+0x1c>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cde:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce2:	4e7c      	ldr	r6, [pc, #496]	@ (8004ed4 <HAL_TIM_OC_ConfigChannel+0x264>)
  tmpccer = TIMx->CCER;
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce6:	6a18      	ldr	r0, [r3, #32]
 8004ce8:	43a8      	bics	r0, r5
 8004cea:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004cec:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004cee:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cf0:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8004cf2:	680e      	ldr	r6, [r1, #0]
 8004cf4:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf6:	2602      	movs	r6, #2
 8004cf8:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8004cfa:	688e      	ldr	r6, [r1, #8]
 8004cfc:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cfe:	4e72      	ldr	r6, [pc, #456]	@ (8004ec8 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004d00:	42b3      	cmp	r3, r6
 8004d02:	d100      	bne.n	8004d06 <HAL_TIM_OC_ConfigChannel+0x96>
 8004d04:	e098      	b.n	8004e38 <HAL_TIM_OC_ConfigChannel+0x1c8>
 8004d06:	4e71      	ldr	r6, [pc, #452]	@ (8004ecc <HAL_TIM_OC_ConfigChannel+0x25c>)
 8004d08:	42b3      	cmp	r3, r6
 8004d0a:	d100      	bne.n	8004d0e <HAL_TIM_OC_ConfigChannel+0x9e>
 8004d0c:	e094      	b.n	8004e38 <HAL_TIM_OC_ConfigChannel+0x1c8>
 8004d0e:	4e70      	ldr	r6, [pc, #448]	@ (8004ed0 <HAL_TIM_OC_ConfigChannel+0x260>)
 8004d10:	42b3      	cmp	r3, r6
 8004d12:	d100      	bne.n	8004d16 <HAL_TIM_OC_ConfigChannel+0xa6>
 8004d14:	e090      	b.n	8004e38 <HAL_TIM_OC_ConfigChannel+0x1c8>
  TIMx->CCR1 = OC_Config->Pulse;
 8004d16:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004d18:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d1a:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004d1c:	6359      	str	r1, [r3, #52]	@ 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8004d20:	621a      	str	r2, [r3, #32]
 8004d22:	e7b3      	b.n	8004c8c <HAL_TIM_OC_ConfigChannel+0x1c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d24:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d26:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 8004d28:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2a:	6a18      	ldr	r0, [r3, #32]
 8004d2c:	43a8      	bics	r0, r5
 8004d2e:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d30:	4d69      	ldr	r5, [pc, #420]	@ (8004ed8 <HAL_TIM_OC_ConfigChannel+0x268>)
  tmpcr2 =  TIMx->CR2;
 8004d32:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004d34:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d36:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d38:	680d      	ldr	r5, [r1, #0]
 8004d3a:	022d      	lsls	r5, r5, #8
 8004d3c:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC2P;
 8004d3e:	2020      	movs	r0, #32
 8004d40:	4382      	bics	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d42:	6888      	ldr	r0, [r1, #8]
 8004d44:	0100      	lsls	r0, r0, #4
 8004d46:	4310      	orrs	r0, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d48:	4a5f      	ldr	r2, [pc, #380]	@ (8004ec8 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d100      	bne.n	8004d50 <HAL_TIM_OC_ConfigChannel+0xe0>
 8004d4e:	e08c      	b.n	8004e6a <HAL_TIM_OC_ConfigChannel+0x1fa>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d50:	4a5e      	ldr	r2, [pc, #376]	@ (8004ecc <HAL_TIM_OC_ConfigChannel+0x25c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d100      	bne.n	8004d58 <HAL_TIM_OC_ConfigChannel+0xe8>
 8004d56:	e08f      	b.n	8004e78 <HAL_TIM_OC_ConfigChannel+0x208>
 8004d58:	4a5d      	ldr	r2, [pc, #372]	@ (8004ed0 <HAL_TIM_OC_ConfigChannel+0x260>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d100      	bne.n	8004d60 <HAL_TIM_OC_ConfigChannel+0xf0>
 8004d5e:	e08b      	b.n	8004e78 <HAL_TIM_OC_ConfigChannel+0x208>
  TIMx->CCR2 = OC_Config->Pulse;
 8004d60:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004d62:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d64:	619d      	str	r5, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004d68:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e78e      	b.n	8004c8c <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6e:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d70:	4d5a      	ldr	r5, [pc, #360]	@ (8004edc <HAL_TIM_OC_ConfigChannel+0x26c>)
  tmpccer = TIMx->CCER;
 8004d72:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d74:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d76:	4e57      	ldr	r6, [pc, #348]	@ (8004ed4 <HAL_TIM_OC_ConfigChannel+0x264>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d78:	4028      	ands	r0, r5
 8004d7a:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004d7c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004d7e:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d80:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8004d82:	680e      	ldr	r6, [r1, #0]
 8004d84:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8004d86:	4856      	ldr	r0, [pc, #344]	@ (8004ee0 <HAL_TIM_OC_ConfigChannel+0x270>)
 8004d88:	4002      	ands	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d8a:	6888      	ldr	r0, [r1, #8]
 8004d8c:	0200      	lsls	r0, r0, #8
 8004d8e:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d90:	484d      	ldr	r0, [pc, #308]	@ (8004ec8 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004d92:	4283      	cmp	r3, r0
 8004d94:	d07e      	beq.n	8004e94 <HAL_TIM_OC_ConfigChannel+0x224>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d96:	484d      	ldr	r0, [pc, #308]	@ (8004ecc <HAL_TIM_OC_ConfigChannel+0x25c>)
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	d100      	bne.n	8004d9e <HAL_TIM_OC_ConfigChannel+0x12e>
 8004d9c:	e081      	b.n	8004ea2 <HAL_TIM_OC_ConfigChannel+0x232>
 8004d9e:	484c      	ldr	r0, [pc, #304]	@ (8004ed0 <HAL_TIM_OC_ConfigChannel+0x260>)
 8004da0:	4283      	cmp	r3, r0
 8004da2:	d07e      	beq.n	8004ea2 <HAL_TIM_OC_ConfigChannel+0x232>
  TIMx->CCR3 = OC_Config->Pulse;
 8004da4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004da6:	605d      	str	r5, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da8:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmrx;
 8004daa:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004dac:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8004dae:	621a      	str	r2, [r3, #32]
 8004db0:	e76c      	b.n	8004c8c <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004db2:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db4:	4d4b      	ldr	r5, [pc, #300]	@ (8004ee4 <HAL_TIM_OC_ConfigChannel+0x274>)
  tmpccer = TIMx->CCER;
 8004db6:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	402a      	ands	r2, r5
 8004dbc:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dbe:	4d46      	ldr	r5, [pc, #280]	@ (8004ed8 <HAL_TIM_OC_ConfigChannel+0x268>)
  tmpcr2 =  TIMx->CR2;
 8004dc0:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004dc2:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dc4:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc6:	680d      	ldr	r5, [r1, #0]
 8004dc8:	022d      	lsls	r5, r5, #8
 8004dca:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC4P;
 8004dcc:	4a46      	ldr	r2, [pc, #280]	@ (8004ee8 <HAL_TIM_OC_ConfigChannel+0x278>)
 8004dce:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd0:	688a      	ldr	r2, [r1, #8]
 8004dd2:	0312      	lsls	r2, r2, #12
 8004dd4:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd6:	483c      	ldr	r0, [pc, #240]	@ (8004ec8 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	d055      	beq.n	8004e88 <HAL_TIM_OC_ConfigChannel+0x218>
 8004ddc:	483b      	ldr	r0, [pc, #236]	@ (8004ecc <HAL_TIM_OC_ConfigChannel+0x25c>)
 8004dde:	4283      	cmp	r3, r0
 8004de0:	d052      	beq.n	8004e88 <HAL_TIM_OC_ConfigChannel+0x218>
 8004de2:	483b      	ldr	r0, [pc, #236]	@ (8004ed0 <HAL_TIM_OC_ConfigChannel+0x260>)
 8004de4:	4283      	cmp	r3, r0
 8004de6:	d04f      	beq.n	8004e88 <HAL_TIM_OC_ConfigChannel+0x218>
  TIMx->CCR4 = OC_Config->Pulse;
 8004de8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004dea:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmrx;
 8004dee:	61dd      	str	r5, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004df0:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8004df2:	621a      	str	r2, [r3, #32]
 8004df4:	e74a      	b.n	8004c8c <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004df6:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004df8:	4d3c      	ldr	r5, [pc, #240]	@ (8004eec <HAL_TIM_OC_ConfigChannel+0x27c>)
  tmpccer = TIMx->CCER;
 8004dfa:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	402a      	ands	r2, r5
 8004e00:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e02:	4d3b      	ldr	r5, [pc, #236]	@ (8004ef0 <HAL_TIM_OC_ConfigChannel+0x280>)
  tmpcr2 =  TIMx->CR2;
 8004e04:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004e06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e08:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004e0a:	680d      	ldr	r5, [r1, #0]
 8004e0c:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC5P;
 8004e0e:	4a39      	ldr	r2, [pc, #228]	@ (8004ef4 <HAL_TIM_OC_ConfigChannel+0x284>)
 8004e10:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e12:	688a      	ldr	r2, [r1, #8]
 8004e14:	0412      	lsls	r2, r2, #16
 8004e16:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	482b      	ldr	r0, [pc, #172]	@ (8004ec8 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004e1a:	4283      	cmp	r3, r0
 8004e1c:	d01f      	beq.n	8004e5e <HAL_TIM_OC_ConfigChannel+0x1ee>
 8004e1e:	482b      	ldr	r0, [pc, #172]	@ (8004ecc <HAL_TIM_OC_ConfigChannel+0x25c>)
 8004e20:	4283      	cmp	r3, r0
 8004e22:	d01c      	beq.n	8004e5e <HAL_TIM_OC_ConfigChannel+0x1ee>
 8004e24:	482a      	ldr	r0, [pc, #168]	@ (8004ed0 <HAL_TIM_OC_ConfigChannel+0x260>)
 8004e26:	4283      	cmp	r3, r0
 8004e28:	d019      	beq.n	8004e5e <HAL_TIM_OC_ConfigChannel+0x1ee>
  TIMx->CCR5 = OC_Config->Pulse;
 8004e2a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004e2c:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2e:	2000      	movs	r0, #0
  TIMx->CCMR3 = tmpccmrx;
 8004e30:	655d      	str	r5, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004e32:	6599      	str	r1, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 8004e34:	621a      	str	r2, [r3, #32]
 8004e36:	e729      	b.n	8004c8c <HAL_TIM_OC_ConfigChannel+0x1c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e38:	2608      	movs	r6, #8
 8004e3a:	43b2      	bics	r2, r6
    tmpccer |= OC_Config->OCNPolarity;
 8004e3c:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e3e:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004e40:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e42:	2604      	movs	r6, #4
 8004e44:	43b2      	bics	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e46:	4e2c      	ldr	r6, [pc, #176]	@ (8004ef8 <HAL_TIM_OC_ConfigChannel+0x288>)
 8004e48:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e4a:	694d      	ldr	r5, [r1, #20]
 8004e4c:	433d      	orrs	r5, r7
 8004e4e:	4335      	orrs	r5, r6
 8004e50:	e761      	b.n	8004d16 <HAL_TIM_OC_ConfigChannel+0xa6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e52:	482a      	ldr	r0, [pc, #168]	@ (8004efc <HAL_TIM_OC_ConfigChannel+0x28c>)
 8004e54:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e56:	694e      	ldr	r6, [r1, #20]
 8004e58:	02b6      	lsls	r6, r6, #10
 8004e5a:	4306      	orrs	r6, r0
 8004e5c:	e738      	b.n	8004cd0 <HAL_TIM_OC_ConfigChannel+0x60>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e5e:	4823      	ldr	r0, [pc, #140]	@ (8004eec <HAL_TIM_OC_ConfigChannel+0x27c>)
 8004e60:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e62:	694e      	ldr	r6, [r1, #20]
 8004e64:	0236      	lsls	r6, r6, #8
 8004e66:	4306      	orrs	r6, r0
 8004e68:	e7df      	b.n	8004e2a <HAL_TIM_OC_ConfigChannel+0x1ba>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e6a:	2280      	movs	r2, #128	@ 0x80
 8004e6c:	4390      	bics	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e6e:	68ca      	ldr	r2, [r1, #12]
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e74:	2240      	movs	r2, #64	@ 0x40
 8004e76:	4390      	bics	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e78:	4a21      	ldr	r2, [pc, #132]	@ (8004f00 <HAL_TIM_OC_ConfigChannel+0x290>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e7a:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e7c:	4032      	ands	r2, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e7e:	698e      	ldr	r6, [r1, #24]
 8004e80:	433e      	orrs	r6, r7
 8004e82:	00b6      	lsls	r6, r6, #2
 8004e84:	4316      	orrs	r6, r2
 8004e86:	e76b      	b.n	8004d60 <HAL_TIM_OC_ConfigChannel+0xf0>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e88:	481e      	ldr	r0, [pc, #120]	@ (8004f04 <HAL_TIM_OC_ConfigChannel+0x294>)
 8004e8a:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e8c:	694e      	ldr	r6, [r1, #20]
 8004e8e:	01b6      	lsls	r6, r6, #6
 8004e90:	4306      	orrs	r6, r0
 8004e92:	e7a9      	b.n	8004de8 <HAL_TIM_OC_ConfigChannel+0x178>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e94:	481c      	ldr	r0, [pc, #112]	@ (8004f08 <HAL_TIM_OC_ConfigChannel+0x298>)
 8004e96:	4002      	ands	r2, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e98:	68c8      	ldr	r0, [r1, #12]
 8004e9a:	0200      	lsls	r0, r0, #8
 8004e9c:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f0c <HAL_TIM_OC_ConfigChannel+0x29c>)
 8004ea0:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea2:	481b      	ldr	r0, [pc, #108]	@ (8004f10 <HAL_TIM_OC_ConfigChannel+0x2a0>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ea4:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea6:	4028      	ands	r0, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ea8:	698d      	ldr	r5, [r1, #24]
 8004eaa:	433d      	orrs	r5, r7
 8004eac:	012d      	lsls	r5, r5, #4
 8004eae:	4305      	orrs	r5, r0
 8004eb0:	e778      	b.n	8004da4 <HAL_TIM_OC_ConfigChannel+0x134>
  __HAL_LOCK(htim);
 8004eb2:	2002      	movs	r0, #2
 8004eb4:	e6ed      	b.n	8004c92 <HAL_TIM_OC_ConfigChannel+0x22>
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	0800702c 	.word	0x0800702c
 8004ebc:	ffefffff 	.word	0xffefffff
 8004ec0:	feff8fff 	.word	0xfeff8fff
 8004ec4:	ffdfffff 	.word	0xffdfffff
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800
 8004ed4:	fffeff8c 	.word	0xfffeff8c
 8004ed8:	feff8cff 	.word	0xfeff8cff
 8004edc:	fffffeff 	.word	0xfffffeff
 8004ee0:	fffffdff 	.word	0xfffffdff
 8004ee4:	ffffefff 	.word	0xffffefff
 8004ee8:	ffffdfff 	.word	0xffffdfff
 8004eec:	fffeffff 	.word	0xfffeffff
 8004ef0:	fffeff8f 	.word	0xfffeff8f
 8004ef4:	fffdffff 	.word	0xfffdffff
 8004ef8:	fffffcff 	.word	0xfffffcff
 8004efc:	fffbffff 	.word	0xfffbffff
 8004f00:	fffff3ff 	.word	0xfffff3ff
 8004f04:	ffffbfff 	.word	0xffffbfff
 8004f08:	fffff7ff 	.word	0xfffff7ff
 8004f0c:	fffffbff 	.word	0xfffffbff
 8004f10:	ffffcfff 	.word	0xffffcfff

08004f14 <HAL_TIM_IC_ConfigChannel>:
{
 8004f14:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004f16:	203c      	movs	r0, #60	@ 0x3c
{
 8004f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1a:	46ce      	mov	lr, r9
 8004f1c:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 8004f1e:	5c1c      	ldrb	r4, [r3, r0]
{
 8004f20:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 8004f22:	2c01      	cmp	r4, #1
 8004f24:	d100      	bne.n	8004f28 <HAL_TIM_IC_ConfigChannel+0x14>
 8004f26:	e0bf      	b.n	80050a8 <HAL_TIM_IC_ConfigChannel+0x194>
 8004f28:	2401      	movs	r4, #1
 8004f2a:	541c      	strb	r4, [r3, r0]
  if (Channel == TIM_CHANNEL_1)
 8004f2c:	2a00      	cmp	r2, #0
 8004f2e:	d00e      	beq.n	8004f4e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_2)
 8004f30:	2a04      	cmp	r2, #4
 8004f32:	d039      	beq.n	8004fa8 <HAL_TIM_IC_ConfigChannel+0x94>
  else if (Channel == TIM_CHANNEL_3)
 8004f34:	2a08      	cmp	r2, #8
 8004f36:	d100      	bne.n	8004f3a <HAL_TIM_IC_ConfigChannel+0x26>
 8004f38:	e08d      	b.n	8005056 <HAL_TIM_IC_ConfigChannel+0x142>
    status = HAL_ERROR;
 8004f3a:	2001      	movs	r0, #1
  else if (Channel == TIM_CHANNEL_4)
 8004f3c:	2a0c      	cmp	r2, #12
 8004f3e:	d05a      	beq.n	8004ff6 <HAL_TIM_IC_ConfigChannel+0xe2>
  __HAL_UNLOCK(htim);
 8004f40:	223c      	movs	r2, #60	@ 0x3c
 8004f42:	2100      	movs	r1, #0
 8004f44:	5499      	strb	r1, [r3, r2]
}
 8004f46:	bcc0      	pop	{r6, r7}
 8004f48:	46b9      	mov	r9, r7
 8004f4a:	46b0      	mov	r8, r6
 8004f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8004f4e:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 8004f50:	6848      	ldr	r0, [r1, #4]
  tmpccer = TIMx->CCER;
 8004f52:	6a15      	ldr	r5, [r2, #32]
                      sConfig->ICSelection,
 8004f54:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f56:	6a10      	ldr	r0, [r2, #32]
                      sConfig->ICPolarity,
 8004f58:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	43a0      	bics	r0, r4
                      sConfig->ICFilter);
 8004f5c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5e:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f60:	6990      	ldr	r0, [r2, #24]
 8004f62:	4684      	mov	ip, r0
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f64:	4851      	ldr	r0, [pc, #324]	@ (80050ac <HAL_TIM_IC_ConfigChannel+0x198>)
 8004f66:	4282      	cmp	r2, r0
 8004f68:	d06e      	beq.n	8005048 <HAL_TIM_IC_ConfigChannel+0x134>
 8004f6a:	2080      	movs	r0, #128	@ 0x80
 8004f6c:	05c0      	lsls	r0, r0, #23
 8004f6e:	4282      	cmp	r2, r0
 8004f70:	d06a      	beq.n	8005048 <HAL_TIM_IC_ConfigChannel+0x134>
 8004f72:	484f      	ldr	r0, [pc, #316]	@ (80050b0 <HAL_TIM_IC_ConfigChannel+0x19c>)
 8004f74:	4282      	cmp	r2, r0
 8004f76:	d067      	beq.n	8005048 <HAL_TIM_IC_ConfigChannel+0x134>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f78:	4660      	mov	r0, ip
 8004f7a:	4320      	orrs	r0, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f7c:	24f0      	movs	r4, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f7e:	013f      	lsls	r7, r7, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f80:	43a0      	bics	r0, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f82:	340f      	adds	r4, #15
 8004f84:	403c      	ands	r4, r7
 8004f86:	4304      	orrs	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f88:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8004f8a:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f8c:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8e:	4385      	bics	r5, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f90:	4030      	ands	r0, r6
 8004f92:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8004f94:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f96:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f98:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f9a:	43a0      	bics	r0, r4
 8004f9c:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f9e:	6990      	ldr	r0, [r2, #24]
 8004fa0:	4301      	orrs	r1, r0
 8004fa2:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e7cb      	b.n	8004f40 <HAL_TIM_IC_ConfigChannel+0x2c>
                      sConfig->ICFilter);
 8004fa8:	68c8      	ldr	r0, [r1, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004faa:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 8004fac:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fae:	2010      	movs	r0, #16
  tmpccer = TIMx->CCER;
 8004fb0:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb2:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICPolarity,
 8004fb4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb6:	4387      	bics	r7, r0
                      sConfig->ICSelection,
 8004fb8:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fba:	6217      	str	r7, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fbc:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fbe:	483d      	ldr	r0, [pc, #244]	@ (80050b4 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fc0:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fc2:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fc4:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fc6:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fc8:	4f3b      	ldr	r7, [pc, #236]	@ (80050b8 <HAL_TIM_IC_ConfigChannel+0x1a4>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fca:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fcc:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fce:	0c00      	lsrs	r0, r0, #16
 8004fd0:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd2:	24a0      	movs	r4, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fd4:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd6:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fd8:	4034      	ands	r4, r6
 8004fda:	432c      	orrs	r4, r5
  TIMx->CCMR1 = tmpccmr1 ;
 8004fdc:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8004fde:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fe0:	6990      	ldr	r0, [r2, #24]
 8004fe2:	4c36      	ldr	r4, [pc, #216]	@ (80050bc <HAL_TIM_IC_ConfigChannel+0x1a8>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fe4:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fe6:	4020      	ands	r0, r4
 8004fe8:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fea:	6990      	ldr	r0, [r2, #24]
 8004fec:	0209      	lsls	r1, r1, #8
 8004fee:	4301      	orrs	r1, r0
 8004ff0:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e7a4      	b.n	8004f40 <HAL_TIM_IC_ConfigChannel+0x2c>
                      sConfig->ICPolarity,
 8004ff6:	6808      	ldr	r0, [r1, #0]
    TIM_TI4_SetConfig(htim->Instance,
 8004ff8:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 8004ffa:	4680      	mov	r8, r0
  tmpccer = TIMx->CCER;
 8004ffc:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ffe:	4830      	ldr	r0, [pc, #192]	@ (80050c0 <HAL_TIM_IC_ConfigChannel+0x1ac>)
 8005000:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICSelection,
 8005002:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005004:	4007      	ands	r7, r0
                      sConfig->ICFilter);
 8005006:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005008:	6217      	str	r7, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 800500a:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800500c:	4829      	ldr	r0, [pc, #164]	@ (80050b4 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800500e:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005010:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005012:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005014:	4f28      	ldr	r7, [pc, #160]	@ (80050b8 <HAL_TIM_IC_ConfigChannel+0x1a4>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005016:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005018:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800501a:	0c24      	lsrs	r4, r4, #16
 800501c:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800501e:	4d29      	ldr	r5, [pc, #164]	@ (80050c4 <HAL_TIM_IC_ConfigChannel+0x1b0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005020:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005022:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005024:	26a0      	movs	r6, #160	@ 0xa0
 8005026:	0300      	lsls	r0, r0, #12
 8005028:	0236      	lsls	r6, r6, #8
 800502a:	4030      	ands	r0, r6
 800502c:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 800502e:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 8005030:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005032:	69d0      	ldr	r0, [r2, #28]
 8005034:	4c21      	ldr	r4, [pc, #132]	@ (80050bc <HAL_TIM_IC_ConfigChannel+0x1a8>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005036:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005038:	4020      	ands	r0, r4
 800503a:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800503c:	69d0      	ldr	r0, [r2, #28]
 800503e:	0209      	lsls	r1, r1, #8
 8005040:	4301      	orrs	r1, r0
 8005042:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005044:	2000      	movs	r0, #0
 8005046:	e77b      	b.n	8004f40 <HAL_TIM_IC_ConfigChannel+0x2c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005048:	2403      	movs	r4, #3
 800504a:	4660      	mov	r0, ip
 800504c:	43a0      	bics	r0, r4
 800504e:	0004      	movs	r4, r0
    tmpccmr1 |= TIM_ICSelection;
 8005050:	4648      	mov	r0, r9
 8005052:	4320      	orrs	r0, r4
 8005054:	e792      	b.n	8004f7c <HAL_TIM_IC_ConfigChannel+0x68>
    TIM_TI3_SetConfig(htim->Instance,
 8005056:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 8005058:	6808      	ldr	r0, [r1, #0]
  tmpccer = TIMx->CCER;
 800505a:	6a16      	ldr	r6, [r2, #32]
                      sConfig->ICPolarity,
 800505c:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800505e:	6a14      	ldr	r4, [r2, #32]
 8005060:	4819      	ldr	r0, [pc, #100]	@ (80050c8 <HAL_TIM_IC_ConfigChannel+0x1b4>)
                      sConfig->ICSelection,
 8005062:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005064:	4004      	ands	r4, r0
                      sConfig->ICFilter);
 8005066:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005068:	6214      	str	r4, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 800506a:	69d4      	ldr	r4, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800506c:	3005      	adds	r0, #5
 800506e:	30ff      	adds	r0, #255	@ 0xff
 8005070:	4384      	bics	r4, r0
  tmpccmr2 |= TIM_ICSelection;
 8005072:	4325      	orrs	r5, r4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005074:	24f0      	movs	r4, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005076:	013f      	lsls	r7, r7, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005078:	43a5      	bics	r5, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800507a:	340f      	adds	r4, #15
 800507c:	403c      	ands	r4, r7
 800507e:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005080:	4d12      	ldr	r5, [pc, #72]	@ (80050cc <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005082:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005084:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005086:	26a0      	movs	r6, #160	@ 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8005088:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800508a:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800508c:	0200      	lsls	r0, r0, #8
 800508e:	0136      	lsls	r6, r6, #4
 8005090:	4030      	ands	r0, r6
 8005092:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8005094:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005096:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005098:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800509a:	43a0      	bics	r0, r4
 800509c:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800509e:	69d0      	ldr	r0, [r2, #28]
 80050a0:	4301      	orrs	r1, r0
 80050a2:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2000      	movs	r0, #0
 80050a6:	e74b      	b.n	8004f40 <HAL_TIM_IC_ConfigChannel+0x2c>
  __HAL_LOCK(htim);
 80050a8:	2002      	movs	r0, #2
 80050aa:	e74c      	b.n	8004f46 <HAL_TIM_IC_ConfigChannel+0x32>
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40000400 	.word	0x40000400
 80050b4:	fffffcff 	.word	0xfffffcff
 80050b8:	ffff0fff 	.word	0xffff0fff
 80050bc:	fffff3ff 	.word	0xfffff3ff
 80050c0:	ffffefff 	.word	0xffffefff
 80050c4:	ffff5fff 	.word	0xffff5fff
 80050c8:	fffffeff 	.word	0xfffffeff
 80050cc:	fffff5ff 	.word	0xfffff5ff

080050d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80050d0:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80050d2:	203c      	movs	r0, #60	@ 0x3c
{
 80050d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80050d6:	5c1c      	ldrb	r4, [r3, r0]
 80050d8:	2c01      	cmp	r4, #1
 80050da:	d100      	bne.n	80050de <HAL_TIM_PWM_ConfigChannel+0xe>
 80050dc:	e16b      	b.n	80053b6 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 80050de:	2401      	movs	r4, #1
 80050e0:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 80050e2:	2a14      	cmp	r2, #20
 80050e4:	d803      	bhi.n	80050ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050e6:	48b5      	ldr	r0, [pc, #724]	@ (80053bc <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 80050e8:	0092      	lsls	r2, r2, #2
 80050ea:	5882      	ldr	r2, [r0, r2]
 80050ec:	4697      	mov	pc, r2
 80050ee:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80050f0:	223c      	movs	r2, #60	@ 0x3c
 80050f2:	2100      	movs	r1, #0
 80050f4:	5499      	strb	r1, [r3, r2]
}
 80050f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050f8:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050fa:	4db1      	ldr	r5, [pc, #708]	@ (80053c0 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
  tmpccer = TIMx->CCER;
 80050fc:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050fe:	6a10      	ldr	r0, [r2, #32]
 8005100:	4028      	ands	r0, r5
 8005102:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005104:	4daf      	ldr	r5, [pc, #700]	@ (80053c4 <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  tmpcr2 =  TIMx->CR2;
 8005106:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8005108:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800510a:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510c:	680d      	ldr	r5, [r1, #0]
 800510e:	022d      	lsls	r5, r5, #8
 8005110:	4305      	orrs	r5, r0
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005112:	48ad      	ldr	r0, [pc, #692]	@ (80053c8 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
 8005114:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005116:	6888      	ldr	r0, [r1, #8]
 8005118:	0500      	lsls	r0, r0, #20
 800511a:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	4cab      	ldr	r4, [pc, #684]	@ (80053cc <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 800511e:	42a2      	cmp	r2, r4
 8005120:	d100      	bne.n	8005124 <HAL_TIM_PWM_ConfigChannel+0x54>
 8005122:	e118      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x286>
 8005124:	4caa      	ldr	r4, [pc, #680]	@ (80053d0 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8005126:	42a2      	cmp	r2, r4
 8005128:	d100      	bne.n	800512c <HAL_TIM_PWM_ConfigChannel+0x5c>
 800512a:	e114      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x286>
 800512c:	4ca9      	ldr	r4, [pc, #676]	@ (80053d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 800512e:	42a2      	cmp	r2, r4
 8005130:	d100      	bne.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x64>
 8005132:	e110      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x286>
  TIMx->CCR6 = OC_Config->Pulse;
 8005134:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005136:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005138:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800513a:	65d4      	str	r4, [r2, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 800513c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800513e:	2080      	movs	r0, #128	@ 0x80
 8005140:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8005142:	0100      	lsls	r0, r0, #4
 8005144:	4320      	orrs	r0, r4
 8005146:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005148:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 800514a:	4ca3      	ldr	r4, [pc, #652]	@ (80053d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800514c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800514e:	4020      	ands	r0, r4
 8005150:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005152:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8005154:	0209      	lsls	r1, r1, #8
 8005156:	4301      	orrs	r1, r0
 8005158:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800515a:	2000      	movs	r0, #0
 800515c:	e7c8      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005160:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005162:	4e9e      	ldr	r6, [pc, #632]	@ (80053dc <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer = TIMx->CCER;
 8005164:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	6a14      	ldr	r4, [r2, #32]
 8005168:	43ac      	bics	r4, r5
 800516a:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800516c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800516e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005170:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8005172:	680e      	ldr	r6, [r1, #0]
 8005174:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8005176:	2602      	movs	r6, #2
 8005178:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 800517a:	688e      	ldr	r6, [r1, #8]
 800517c:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800517e:	4e93      	ldr	r6, [pc, #588]	@ (80053cc <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8005180:	42b2      	cmp	r2, r6
 8005182:	d100      	bne.n	8005186 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8005184:	e0da      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x26c>
 8005186:	4e92      	ldr	r6, [pc, #584]	@ (80053d0 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8005188:	42b2      	cmp	r2, r6
 800518a:	d100      	bne.n	800518e <HAL_TIM_PWM_ConfigChannel+0xbe>
 800518c:	e0d6      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x26c>
 800518e:	4e91      	ldr	r6, [pc, #580]	@ (80053d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8005190:	42b2      	cmp	r2, r6
 8005192:	d100      	bne.n	8005196 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8005194:	e0d2      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x26c>
  TIMx->CR2 = tmpcr2;
 8005196:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005198:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800519a:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800519c:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 800519e:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051a0:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80051a2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051a4:	6990      	ldr	r0, [r2, #24]
 80051a6:	4320      	orrs	r0, r4
 80051a8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051aa:	6990      	ldr	r0, [r2, #24]
 80051ac:	3c04      	subs	r4, #4
 80051ae:	43a0      	bics	r0, r4
 80051b0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b2:	6990      	ldr	r0, [r2, #24]
 80051b4:	4301      	orrs	r1, r0
 80051b6:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2000      	movs	r0, #0
 80051ba:	e799      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051bc:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051be:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 80051c0:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c2:	6a14      	ldr	r4, [r2, #32]
 80051c4:	43ac      	bics	r4, r5
 80051c6:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c8:	4d85      	ldr	r5, [pc, #532]	@ (80053e0 <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 80051ca:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80051cc:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ce:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d0:	680d      	ldr	r5, [r1, #0]
 80051d2:	022d      	lsls	r5, r5, #8
 80051d4:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80051d6:	2420      	movs	r4, #32
 80051d8:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051da:	688c      	ldr	r4, [r1, #8]
 80051dc:	0124      	lsls	r4, r4, #4
 80051de:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e0:	487a      	ldr	r0, [pc, #488]	@ (80053cc <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 80051e2:	4282      	cmp	r2, r0
 80051e4:	d100      	bne.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x118>
 80051e6:	e0c2      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x29e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	4879      	ldr	r0, [pc, #484]	@ (80053d0 <HAL_TIM_PWM_ConfigChannel+0x300>)
 80051ea:	4282      	cmp	r2, r0
 80051ec:	d100      	bne.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80051ee:	e0c5      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x2ac>
 80051f0:	4878      	ldr	r0, [pc, #480]	@ (80053d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 80051f2:	4282      	cmp	r2, r0
 80051f4:	d100      	bne.n	80051f8 <HAL_TIM_PWM_ConfigChannel+0x128>
 80051f6:	e0c1      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x2ac>
  TIMx->CCR2 = OC_Config->Pulse;
 80051f8:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80051fa:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80051fc:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80051fe:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005200:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 8005202:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005204:	6994      	ldr	r4, [r2, #24]
 8005206:	0100      	lsls	r0, r0, #4
 8005208:	4320      	orrs	r0, r4
 800520a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800520c:	6990      	ldr	r0, [r2, #24]
 800520e:	4c72      	ldr	r4, [pc, #456]	@ (80053d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005210:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005212:	4020      	ands	r0, r4
 8005214:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005216:	6990      	ldr	r0, [r2, #24]
 8005218:	0209      	lsls	r1, r1, #8
 800521a:	4301      	orrs	r1, r0
 800521c:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800521e:	2000      	movs	r0, #0
 8005220:	e766      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005222:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005224:	4d6f      	ldr	r5, [pc, #444]	@ (80053e4 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpccer = TIMx->CCER;
 8005226:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005228:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800522a:	4e6c      	ldr	r6, [pc, #432]	@ (80053dc <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800522c:	402c      	ands	r4, r5
 800522e:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005230:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005232:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005234:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8005236:	680e      	ldr	r6, [r1, #0]
 8005238:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 800523a:	4c6b      	ldr	r4, [pc, #428]	@ (80053e8 <HAL_TIM_PWM_ConfigChannel+0x318>)
 800523c:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523e:	688c      	ldr	r4, [r1, #8]
 8005240:	0224      	lsls	r4, r4, #8
 8005242:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005244:	4c61      	ldr	r4, [pc, #388]	@ (80053cc <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8005246:	42a2      	cmp	r2, r4
 8005248:	d100      	bne.n	800524c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800524a:	e0a5      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x2c8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524c:	4c60      	ldr	r4, [pc, #384]	@ (80053d0 <HAL_TIM_PWM_ConfigChannel+0x300>)
 800524e:	42a2      	cmp	r2, r4
 8005250:	d100      	bne.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005252:	e0a8      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8005254:	4c5f      	ldr	r4, [pc, #380]	@ (80053d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8005256:	42a2      	cmp	r2, r4
 8005258:	d100      	bne.n	800525c <HAL_TIM_PWM_ConfigChannel+0x18c>
 800525a:	e0a4      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CCR3 = OC_Config->Pulse;
 800525c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800525e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005260:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005262:	63d4      	str	r4, [r2, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005264:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8005266:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005268:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800526a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800526c:	4320      	orrs	r0, r4
 800526e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005270:	69d0      	ldr	r0, [r2, #28]
 8005272:	3c04      	subs	r4, #4
 8005274:	43a0      	bics	r0, r4
 8005276:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005278:	69d0      	ldr	r0, [r2, #28]
 800527a:	4301      	orrs	r1, r0
 800527c:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2000      	movs	r0, #0
 8005280:	e736      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005282:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005284:	4d59      	ldr	r5, [pc, #356]	@ (80053ec <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8005286:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005288:	6a10      	ldr	r0, [r2, #32]
 800528a:	4028      	ands	r0, r5
 800528c:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800528e:	4d54      	ldr	r5, [pc, #336]	@ (80053e0 <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8005290:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005292:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005294:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005296:	680d      	ldr	r5, [r1, #0]
 8005298:	022d      	lsls	r5, r5, #8
 800529a:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 800529c:	4854      	ldr	r0, [pc, #336]	@ (80053f0 <HAL_TIM_PWM_ConfigChannel+0x320>)
 800529e:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a0:	6888      	ldr	r0, [r1, #8]
 80052a2:	0300      	lsls	r0, r0, #12
 80052a4:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a6:	4c49      	ldr	r4, [pc, #292]	@ (80053cc <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 80052a8:	42a2      	cmp	r2, r4
 80052aa:	d06f      	beq.n	800538c <HAL_TIM_PWM_ConfigChannel+0x2bc>
 80052ac:	4c48      	ldr	r4, [pc, #288]	@ (80053d0 <HAL_TIM_PWM_ConfigChannel+0x300>)
 80052ae:	42a2      	cmp	r2, r4
 80052b0:	d06c      	beq.n	800538c <HAL_TIM_PWM_ConfigChannel+0x2bc>
 80052b2:	4c48      	ldr	r4, [pc, #288]	@ (80053d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 80052b4:	42a2      	cmp	r2, r4
 80052b6:	d069      	beq.n	800538c <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCR4 = OC_Config->Pulse;
 80052b8:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80052ba:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80052bc:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80052be:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80052c0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052c2:	2080      	movs	r0, #128	@ 0x80
 80052c4:	69d4      	ldr	r4, [r2, #28]
 80052c6:	0100      	lsls	r0, r0, #4
 80052c8:	4320      	orrs	r0, r4
 80052ca:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052cc:	69d0      	ldr	r0, [r2, #28]
 80052ce:	4c42      	ldr	r4, [pc, #264]	@ (80053d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052d2:	4020      	ands	r0, r4
 80052d4:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052d6:	69d0      	ldr	r0, [r2, #28]
 80052d8:	0209      	lsls	r1, r1, #8
 80052da:	4301      	orrs	r1, r0
 80052dc:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2000      	movs	r0, #0
 80052e0:	e706      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052e2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052e4:	4d43      	ldr	r5, [pc, #268]	@ (80053f4 <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 80052e6:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052e8:	6a10      	ldr	r0, [r2, #32]
 80052ea:	4028      	ands	r0, r5
 80052ec:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052ee:	4d42      	ldr	r5, [pc, #264]	@ (80053f8 <HAL_TIM_PWM_ConfigChannel+0x328>)
  tmpcr2 =  TIMx->CR2;
 80052f0:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80052f2:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052f4:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 80052f6:	680d      	ldr	r5, [r1, #0]
 80052f8:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC5P;
 80052fa:	4840      	ldr	r0, [pc, #256]	@ (80053fc <HAL_TIM_PWM_ConfigChannel+0x32c>)
 80052fc:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052fe:	6888      	ldr	r0, [r1, #8]
 8005300:	0400      	lsls	r0, r0, #16
 8005302:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	4c31      	ldr	r4, [pc, #196]	@ (80053cc <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8005306:	42a2      	cmp	r2, r4
 8005308:	d02b      	beq.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x292>
 800530a:	4c31      	ldr	r4, [pc, #196]	@ (80053d0 <HAL_TIM_PWM_ConfigChannel+0x300>)
 800530c:	42a2      	cmp	r2, r4
 800530e:	d028      	beq.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x292>
 8005310:	4c30      	ldr	r4, [pc, #192]	@ (80053d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8005312:	42a2      	cmp	r2, r4
 8005314:	d025      	beq.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x292>
  TIMx->CCR5 = OC_Config->Pulse;
 8005316:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005318:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 800531a:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800531c:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800531e:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8005320:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005322:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005324:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005326:	4320      	orrs	r0, r4
 8005328:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800532a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 800532c:	3c04      	subs	r4, #4
 800532e:	43a0      	bics	r0, r4
 8005330:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005332:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8005334:	4301      	orrs	r1, r0
 8005336:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8005338:	2000      	movs	r0, #0
 800533a:	e6d9      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpccer &= ~TIM_CCER_CC1NP;
 800533c:	2608      	movs	r6, #8
 800533e:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8005340:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8005342:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8005344:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005346:	2604      	movs	r6, #4
 8005348:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800534a:	4e2d      	ldr	r6, [pc, #180]	@ (8005400 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800534c:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800534e:	694d      	ldr	r5, [r1, #20]
 8005350:	433d      	orrs	r5, r7
 8005352:	4335      	orrs	r5, r6
 8005354:	e71f      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005356:	4c2b      	ldr	r4, [pc, #172]	@ (8005404 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8005358:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800535a:	694e      	ldr	r6, [r1, #20]
 800535c:	02b6      	lsls	r6, r6, #10
 800535e:	4326      	orrs	r6, r4
 8005360:	e6e8      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005362:	4c24      	ldr	r4, [pc, #144]	@ (80053f4 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8005364:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005366:	694e      	ldr	r6, [r1, #20]
 8005368:	0236      	lsls	r6, r6, #8
 800536a:	4326      	orrs	r6, r4
 800536c:	e7d3      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x246>
    tmpccer &= ~TIM_CCER_CC2NP;
 800536e:	2080      	movs	r0, #128	@ 0x80
 8005370:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005372:	68c8      	ldr	r0, [r1, #12]
 8005374:	0100      	lsls	r0, r0, #4
 8005376:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8005378:	2040      	movs	r0, #64	@ 0x40
 800537a:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800537c:	4822      	ldr	r0, [pc, #136]	@ (8005408 <HAL_TIM_PWM_ConfigChannel+0x338>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800537e:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005380:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005382:	698e      	ldr	r6, [r1, #24]
 8005384:	433e      	orrs	r6, r7
 8005386:	00b6      	lsls	r6, r6, #2
 8005388:	4306      	orrs	r6, r0
 800538a:	e735      	b.n	80051f8 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800538c:	4c1f      	ldr	r4, [pc, #124]	@ (800540c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800538e:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005390:	694e      	ldr	r6, [r1, #20]
 8005392:	01b6      	lsls	r6, r6, #6
 8005394:	4326      	orrs	r6, r4
 8005396:	e78f      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x1e8>
    tmpccer &= ~TIM_CCER_CC3NP;
 8005398:	4c1d      	ldr	r4, [pc, #116]	@ (8005410 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800539a:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800539c:	68cc      	ldr	r4, [r1, #12]
 800539e:	0224      	lsls	r4, r4, #8
 80053a0:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a2:	480d      	ldr	r0, [pc, #52]	@ (80053d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
 80053a4:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053a6:	4c1b      	ldr	r4, [pc, #108]	@ (8005414 <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053a8:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053aa:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ac:	698d      	ldr	r5, [r1, #24]
 80053ae:	433d      	orrs	r5, r7
 80053b0:	012d      	lsls	r5, r5, #4
 80053b2:	4325      	orrs	r5, r4
 80053b4:	e752      	b.n	800525c <HAL_TIM_PWM_ConfigChannel+0x18c>
  __HAL_LOCK(htim);
 80053b6:	2002      	movs	r0, #2
 80053b8:	e69d      	b.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x26>
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	08007080 	.word	0x08007080
 80053c0:	ffefffff 	.word	0xffefffff
 80053c4:	feff8fff 	.word	0xfeff8fff
 80053c8:	ffdfffff 	.word	0xffdfffff
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800
 80053d8:	fffffbff 	.word	0xfffffbff
 80053dc:	fffeff8c 	.word	0xfffeff8c
 80053e0:	feff8cff 	.word	0xfeff8cff
 80053e4:	fffffeff 	.word	0xfffffeff
 80053e8:	fffffdff 	.word	0xfffffdff
 80053ec:	ffffefff 	.word	0xffffefff
 80053f0:	ffffdfff 	.word	0xffffdfff
 80053f4:	fffeffff 	.word	0xfffeffff
 80053f8:	fffeff8f 	.word	0xfffeff8f
 80053fc:	fffdffff 	.word	0xfffdffff
 8005400:	fffffcff 	.word	0xfffffcff
 8005404:	fffbffff 	.word	0xfffbffff
 8005408:	fffff3ff 	.word	0xfffff3ff
 800540c:	ffffbfff 	.word	0xffffbfff
 8005410:	fffff7ff 	.word	0xfffff7ff
 8005414:	ffffcfff 	.word	0xffffcfff

08005418 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005418:	233c      	movs	r3, #60	@ 0x3c
{
 800541a:	b570      	push	{r4, r5, r6, lr}
 800541c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800541e:	5cc0      	ldrb	r0, [r0, r3]
 8005420:	2801      	cmp	r0, #1
 8005422:	d100      	bne.n	8005426 <HAL_TIM_ConfigClockSource+0xe>
 8005424:	e073      	b.n	800550e <HAL_TIM_ConfigClockSource+0xf6>
 8005426:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800542a:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	3301      	adds	r3, #1
 800542e:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8005430:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005432:	4d51      	ldr	r5, [pc, #324]	@ (8005578 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8005434:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005436:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005438:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800543a:	680b      	ldr	r3, [r1, #0]
 800543c:	2b60      	cmp	r3, #96	@ 0x60
 800543e:	d100      	bne.n	8005442 <HAL_TIM_ConfigClockSource+0x2a>
 8005440:	e067      	b.n	8005512 <HAL_TIM_ConfigClockSource+0xfa>
 8005442:	d81d      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x68>
 8005444:	2b40      	cmp	r3, #64	@ 0x40
 8005446:	d100      	bne.n	800544a <HAL_TIM_ConfigClockSource+0x32>
 8005448:	e07d      	b.n	8005546 <HAL_TIM_ConfigClockSource+0x12e>
 800544a:	d93f      	bls.n	80054cc <HAL_TIM_ConfigClockSource+0xb4>
 800544c:	2b50      	cmp	r3, #80	@ 0x50
 800544e:	d135      	bne.n	80054bc <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 8005450:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005452:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005454:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005456:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005458:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545a:	43a6      	bics	r6, r4
 800545c:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800545e:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005460:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005462:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005464:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005466:	240a      	movs	r4, #10
 8005468:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800546a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800546c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800546e:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005470:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005472:	4942      	ldr	r1, [pc, #264]	@ (800557c <HAL_TIM_ConfigClockSource+0x164>)
 8005474:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005476:	2157      	movs	r1, #87	@ 0x57
 8005478:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800547a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2000      	movs	r0, #0
 800547e:	e01e      	b.n	80054be <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8005480:	2480      	movs	r4, #128	@ 0x80
 8005482:	0164      	lsls	r4, r4, #5
 8005484:	42a3      	cmp	r3, r4
 8005486:	d0f9      	beq.n	800547c <HAL_TIM_ConfigClockSource+0x64>
 8005488:	2480      	movs	r4, #128	@ 0x80
 800548a:	01a4      	lsls	r4, r4, #6
 800548c:	42a3      	cmp	r3, r4
 800548e:	d12b      	bne.n	80054e8 <HAL_TIM_ConfigClockSource+0xd0>
  tmpsmcr = TIMx->SMCR;
 8005490:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005492:	4b3b      	ldr	r3, [pc, #236]	@ (8005580 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005494:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005496:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005498:	688b      	ldr	r3, [r1, #8]
 800549a:	68c9      	ldr	r1, [r1, #12]
 800549c:	432b      	orrs	r3, r5
 800549e:	0209      	lsls	r1, r1, #8
 80054a0:	430b      	orrs	r3, r1
 80054a2:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80054a4:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a6:	2380      	movs	r3, #128	@ 0x80
 80054a8:	6881      	ldr	r1, [r0, #8]
 80054aa:	01db      	lsls	r3, r3, #7
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2000      	movs	r0, #0
 80054b2:	e004      	b.n	80054be <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80054b4:	2110      	movs	r1, #16
 80054b6:	001c      	movs	r4, r3
 80054b8:	438c      	bics	r4, r1
 80054ba:	d00c      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 80054bc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80054be:	233d      	movs	r3, #61	@ 0x3d
 80054c0:	2101      	movs	r1, #1
 80054c2:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 80054c4:	2100      	movs	r1, #0
 80054c6:	3b01      	subs	r3, #1
 80054c8:	54d1      	strb	r1, [r2, r3]
}
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d002      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0xbe>
 80054d0:	d9f0      	bls.n	80054b4 <HAL_TIM_ConfigClockSource+0x9c>
 80054d2:	2b30      	cmp	r3, #48	@ 0x30
 80054d4:	d1f2      	bne.n	80054bc <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 80054d6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d8:	4c28      	ldr	r4, [pc, #160]	@ (800557c <HAL_TIM_ConfigClockSource+0x164>)
 80054da:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054dc:	430b      	orrs	r3, r1
 80054de:	2107      	movs	r1, #7
 80054e0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80054e2:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2000      	movs	r0, #0
 80054e6:	e7ea      	b.n	80054be <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80054e8:	2b70      	cmp	r3, #112	@ 0x70
 80054ea:	d1e7      	bne.n	80054bc <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 80054ec:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ee:	4b24      	ldr	r3, [pc, #144]	@ (8005580 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f2:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f4:	688b      	ldr	r3, [r1, #8]
 80054f6:	68c9      	ldr	r1, [r1, #12]
 80054f8:	432b      	orrs	r3, r5
 80054fa:	0209      	lsls	r1, r1, #8
 80054fc:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054fe:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005500:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8005502:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005504:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005506:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8005508:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2000      	movs	r0, #0
 800550c:	e7d7      	b.n	80054be <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 800550e:	2002      	movs	r0, #2
 8005510:	e7db      	b.n	80054ca <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005512:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8005514:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005516:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005518:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551a:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 800551c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005520:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005522:	4e18      	ldr	r6, [pc, #96]	@ (8005584 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005524:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005526:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005528:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552a:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800552c:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552e:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8005530:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8005532:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8005534:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005536:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005538:	4910      	ldr	r1, [pc, #64]	@ (800557c <HAL_TIM_ConfigClockSource+0x164>)
 800553a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800553c:	2167      	movs	r1, #103	@ 0x67
 800553e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005540:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2000      	movs	r0, #0
 8005544:	e7bb      	b.n	80054be <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8005546:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005548:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800554a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554c:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800554e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005550:	43a6      	bics	r6, r4
 8005552:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005554:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005556:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005558:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800555a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800555c:	240a      	movs	r4, #10
 800555e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005560:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8005562:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005564:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005566:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005568:	4904      	ldr	r1, [pc, #16]	@ (800557c <HAL_TIM_ConfigClockSource+0x164>)
 800556a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800556c:	2147      	movs	r1, #71	@ 0x47
 800556e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005570:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	2000      	movs	r0, #0
 8005574:	e7a3      	b.n	80054be <HAL_TIM_ConfigClockSource+0xa6>
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	ffce0088 	.word	0xffce0088
 800557c:	ffcfff8f 	.word	0xffcfff8f
 8005580:	ffff00ff 	.word	0xffff00ff
 8005584:	ffff0fff 	.word	0xffff0fff

08005588 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8005588:	2908      	cmp	r1, #8
 800558a:	d011      	beq.n	80055b0 <HAL_TIM_ReadCapturedValue+0x28>
 800558c:	d806      	bhi.n	800559c <HAL_TIM_ReadCapturedValue+0x14>
 800558e:	2900      	cmp	r1, #0
 8005590:	d00b      	beq.n	80055aa <HAL_TIM_ReadCapturedValue+0x22>
 8005592:	2904      	cmp	r1, #4
 8005594:	d107      	bne.n	80055a6 <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR2;
 8005596:	6803      	ldr	r3, [r0, #0]
 8005598:	6b98      	ldr	r0, [r3, #56]	@ 0x38
}
 800559a:	4770      	bx	lr
  switch (Channel)
 800559c:	290c      	cmp	r1, #12
 800559e:	d102      	bne.n	80055a6 <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR4;
 80055a0:	6803      	ldr	r3, [r0, #0]
 80055a2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  return tmpreg;
 80055a4:	e7f9      	b.n	800559a <HAL_TIM_ReadCapturedValue+0x12>
  switch (Channel)
 80055a6:	2000      	movs	r0, #0
 80055a8:	e7f7      	b.n	800559a <HAL_TIM_ReadCapturedValue+0x12>
      tmpreg =  htim->Instance->CCR1;
 80055aa:	6803      	ldr	r3, [r0, #0]
 80055ac:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 80055ae:	e7f4      	b.n	800559a <HAL_TIM_ReadCapturedValue+0x12>
      tmpreg =   htim->Instance->CCR3;
 80055b0:	6803      	ldr	r3, [r0, #0]
 80055b2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 80055b4:	e7f1      	b.n	800559a <HAL_TIM_ReadCapturedValue+0x12>
 80055b6:	46c0      	nop			@ (mov r8, r8)

080055b8 <HAL_TIM_RegisterCallback>:
{
 80055b8:	0003      	movs	r3, r0
 80055ba:	b530      	push	{r4, r5, lr}
  if (pCallback == NULL)
 80055bc:	2a00      	cmp	r2, #0
 80055be:	d00e      	beq.n	80055de <HAL_TIM_RegisterCallback+0x26>
  if (htim->State == HAL_TIM_STATE_READY)
 80055c0:	253d      	movs	r5, #61	@ 0x3d
 80055c2:	5d44      	ldrb	r4, [r0, r5]
 80055c4:	b2e0      	uxtb	r0, r4
 80055c6:	2c01      	cmp	r4, #1
 80055c8:	d00b      	beq.n	80055e2 <HAL_TIM_RegisterCallback+0x2a>
  else if (htim->State == HAL_TIM_STATE_RESET)
 80055ca:	5d5c      	ldrb	r4, [r3, r5]
    return HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
  else if (htim->State == HAL_TIM_STATE_RESET)
 80055ce:	2c00      	cmp	r4, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
    switch (CallbackID)
 80055d2:	290d      	cmp	r1, #13
 80055d4:	d804      	bhi.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
 80055d6:	4837      	ldr	r0, [pc, #220]	@ (80056b4 <HAL_TIM_RegisterCallback+0xfc>)
 80055d8:	0089      	lsls	r1, r1, #2
 80055da:	5841      	ldr	r1, [r0, r1]
 80055dc:	468f      	mov	pc, r1
    return HAL_ERROR;
 80055de:	2001      	movs	r0, #1
}
 80055e0:	bd30      	pop	{r4, r5, pc}
    switch (CallbackID)
 80055e2:	291b      	cmp	r1, #27
 80055e4:	d8fc      	bhi.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
 80055e6:	4834      	ldr	r0, [pc, #208]	@ (80056b8 <HAL_TIM_RegisterCallback+0x100>)
 80055e8:	0089      	lsls	r1, r1, #2
 80055ea:	5841      	ldr	r1, [r0, r1]
 80055ec:	468f      	mov	pc, r1
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2000      	movs	r0, #0
        htim->HallSensor_MspInitCallback   = pCallback;
 80055f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80055f2:	e7f5      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->HallSensor_MspDeInitCallback = pCallback;
 80055f4:	2180      	movs	r1, #128	@ 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80055f6:	2000      	movs	r0, #0
        htim->HallSensor_MspDeInitCallback = pCallback;
 80055f8:	505a      	str	r2, [r3, r1]
        break;
 80055fa:	e7f1      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 80055fc:	2000      	movs	r0, #0
        htim->Base_MspInitCallback         = pCallback;
 80055fe:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8005600:	e7ee      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005602:	2000      	movs	r0, #0
        htim->Base_MspDeInitCallback       = pCallback;
 8005604:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8005606:	e7eb      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005608:	2000      	movs	r0, #0
        htim->IC_MspInitCallback           = pCallback;
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800560c:	e7e8      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 800560e:	2000      	movs	r0, #0
        htim->IC_MspDeInitCallback         = pCallback;
 8005610:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8005612:	e7e5      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005614:	2000      	movs	r0, #0
        htim->OC_MspInitCallback           = pCallback;
 8005616:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8005618:	e7e2      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2000      	movs	r0, #0
        htim->OC_MspDeInitCallback         = pCallback;
 800561c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800561e:	e7df      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005620:	2000      	movs	r0, #0
        htim->PWM_MspInitCallback          = pCallback;
 8005622:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8005624:	e7dc      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2000      	movs	r0, #0
        htim->PWM_MspDeInitCallback        = pCallback;
 8005628:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800562a:	e7d9      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2000      	movs	r0, #0
        htim->OnePulse_MspInitCallback     = pCallback;
 800562e:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8005630:	e7d6      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005632:	2000      	movs	r0, #0
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005634:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8005636:	e7d3      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2000      	movs	r0, #0
        htim->Encoder_MspInitCallback      = pCallback;
 800563a:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800563c:	e7d0      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2000      	movs	r0, #0
        htim->Encoder_MspDeInitCallback    = pCallback;
 8005640:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8005642:	e7cd      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->PeriodElapsedCallback                = pCallback;
 8005644:	2184      	movs	r1, #132	@ 0x84
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2000      	movs	r0, #0
        htim->PeriodElapsedCallback                = pCallback;
 8005648:	505a      	str	r2, [r3, r1]
        break;
 800564a:	e7c9      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800564c:	2188      	movs	r1, #136	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;
 800564e:	2000      	movs	r0, #0
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005650:	505a      	str	r2, [r3, r1]
        break;
 8005652:	e7c5      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->Break2Callback                       = pCallback;
 8005654:	21b8      	movs	r1, #184	@ 0xb8
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2000      	movs	r0, #0
        htim->Break2Callback                       = pCallback;
 8005658:	505a      	str	r2, [r3, r1]
        break;
 800565a:	e7c1      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->BreakCallback                        = pCallback;
 800565c:	21b4      	movs	r1, #180	@ 0xb4
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2000      	movs	r0, #0
        htim->BreakCallback                        = pCallback;
 8005660:	505a      	str	r2, [r3, r1]
        break;
 8005662:	e7bd      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->CommutationCallback                  = pCallback;
 8005664:	21ac      	movs	r1, #172	@ 0xac
  HAL_StatusTypeDef status = HAL_OK;
 8005666:	2000      	movs	r0, #0
        htim->CommutationCallback                  = pCallback;
 8005668:	505a      	str	r2, [r3, r1]
        break;
 800566a:	e7b9      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->CommutationHalfCpltCallback          = pCallback;
 800566c:	21b0      	movs	r1, #176	@ 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2000      	movs	r0, #0
        htim->CommutationHalfCpltCallback          = pCallback;
 8005670:	505a      	str	r2, [r3, r1]
        break;
 8005672:	e7b5      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->TriggerCallback                      = pCallback;
 8005674:	218c      	movs	r1, #140	@ 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 8005676:	2000      	movs	r0, #0
        htim->TriggerCallback                      = pCallback;
 8005678:	505a      	str	r2, [r3, r1]
        break;
 800567a:	e7b1      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->TriggerHalfCpltCallback              = pCallback;
 800567c:	2190      	movs	r1, #144	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2000      	movs	r0, #0
        htim->TriggerHalfCpltCallback              = pCallback;
 8005680:	505a      	str	r2, [r3, r1]
        break;
 8005682:	e7ad      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->IC_CaptureCallback                   = pCallback;
 8005684:	2194      	movs	r1, #148	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2000      	movs	r0, #0
        htim->IC_CaptureCallback                   = pCallback;
 8005688:	505a      	str	r2, [r3, r1]
        break;
 800568a:	e7a9      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800568c:	2198      	movs	r1, #152	@ 0x98
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2000      	movs	r0, #0
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005690:	505a      	str	r2, [r3, r1]
        break;
 8005692:	e7a5      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->OC_DelayElapsedCallback              = pCallback;
 8005694:	219c      	movs	r1, #156	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2000      	movs	r0, #0
        htim->OC_DelayElapsedCallback              = pCallback;
 8005698:	505a      	str	r2, [r3, r1]
        break;
 800569a:	e7a1      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->PWM_PulseFinishedCallback            = pCallback;
 800569c:	21a0      	movs	r1, #160	@ 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 800569e:	2000      	movs	r0, #0
        htim->PWM_PulseFinishedCallback            = pCallback;
 80056a0:	505a      	str	r2, [r3, r1]
        break;
 80056a2:	e79d      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80056a4:	21a4      	movs	r1, #164	@ 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2000      	movs	r0, #0
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80056a8:	505a      	str	r2, [r3, r1]
        break;
 80056aa:	e799      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
        htim->ErrorCallback                        = pCallback;
 80056ac:	21a8      	movs	r1, #168	@ 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2000      	movs	r0, #0
        htim->ErrorCallback                        = pCallback;
 80056b0:	505a      	str	r2, [r3, r1]
        break;
 80056b2:	e795      	b.n	80055e0 <HAL_TIM_RegisterCallback+0x28>
 80056b4:	080070d4 	.word	0x080070d4
 80056b8:	0800710c 	.word	0x0800710c

080056bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056bc:	233c      	movs	r3, #60	@ 0x3c
{
 80056be:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80056c0:	5cc3      	ldrb	r3, [r0, r3]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d02a      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c6:	233d      	movs	r3, #61	@ 0x3d
 80056c8:	2202      	movs	r2, #2
 80056ca:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056cc:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056ce:	4d14      	ldr	r5, [pc, #80]	@ (8005720 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 80056d0:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d2:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80056d4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056d6:	42aa      	cmp	r2, r5
 80056d8:	d017      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 80056da:	2570      	movs	r5, #112	@ 0x70
 80056dc:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056de:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e0:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e2:	2380      	movs	r3, #128	@ 0x80
 80056e4:	05db      	lsls	r3, r3, #23
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d002      	beq.n	80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80056ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d104      	bne.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f4:	688b      	ldr	r3, [r1, #8]
 80056f6:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f8:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	233d      	movs	r3, #61	@ 0x3d
 80056fc:	2201      	movs	r2, #1
 80056fe:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005700:	2200      	movs	r2, #0
 8005702:	3b01      	subs	r3, #1
 8005704:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005706:	2000      	movs	r0, #0
}
 8005708:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800570a:	4d07      	ldr	r5, [pc, #28]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800570c:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800570e:	684d      	ldr	r5, [r1, #4]
 8005710:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005712:	2570      	movs	r5, #112	@ 0x70
 8005714:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005716:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 8005718:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571a:	e7e9      	b.n	80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 800571c:	2002      	movs	r0, #2
 800571e:	e7f3      	b.n	8005708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005720:	40012c00 	.word	0x40012c00
 8005724:	40000400 	.word	0x40000400
 8005728:	ff0fffff 	.word	0xff0fffff

0800572c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572c:	233c      	movs	r3, #60	@ 0x3c
{
 800572e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8005730:	5cc3      	ldrb	r3, [r0, r3]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d03d      	beq.n	80057b2 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005736:	4a20      	ldr	r2, [pc, #128]	@ (80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8005738:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800573a:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800573c:	4013      	ands	r3, r2
 800573e:	688a      	ldr	r2, [r1, #8]
 8005740:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005742:	4a1e      	ldr	r2, [pc, #120]	@ (80057bc <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8005744:	4013      	ands	r3, r2
 8005746:	684a      	ldr	r2, [r1, #4]
 8005748:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800574a:	4a1d      	ldr	r2, [pc, #116]	@ (80057c0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 800574c:	4013      	ands	r3, r2
 800574e:	680a      	ldr	r2, [r1, #0]
 8005750:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005752:	4a1c      	ldr	r2, [pc, #112]	@ (80057c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005754:	4013      	ands	r3, r2
 8005756:	690a      	ldr	r2, [r1, #16]
 8005758:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800575a:	4a1b      	ldr	r2, [pc, #108]	@ (80057c8 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 800575c:	4013      	ands	r3, r2
 800575e:	694a      	ldr	r2, [r1, #20]
 8005760:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005762:	4a1a      	ldr	r2, [pc, #104]	@ (80057cc <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8005764:	4013      	ands	r3, r2
 8005766:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005768:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800576a:	4a19      	ldr	r2, [pc, #100]	@ (80057d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800576c:	4013      	ands	r3, r2
 800576e:	698a      	ldr	r2, [r1, #24]
 8005770:	0412      	lsls	r2, r2, #16
 8005772:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005774:	4a17      	ldr	r2, [pc, #92]	@ (80057d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005776:	4013      	ands	r3, r2
 8005778:	69ca      	ldr	r2, [r1, #28]
 800577a:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800577c:	4a16      	ldr	r2, [pc, #88]	@ (80057d8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800577e:	4294      	cmp	r4, r2
 8005780:	d005      	beq.n	800578e <HAL_TIMEx_ConfigBreakDeadTime+0x62>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005782:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005784:	2200      	movs	r2, #0
 8005786:	233c      	movs	r3, #60	@ 0x3c
 8005788:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800578a:	2000      	movs	r0, #0
}
 800578c:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800578e:	4a13      	ldr	r2, [pc, #76]	@ (80057dc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005790:	4013      	ands	r3, r2
 8005792:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8005794:	0512      	lsls	r2, r2, #20
 8005796:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005798:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800579a:	401a      	ands	r2, r3
 800579c:	6a0b      	ldr	r3, [r1, #32]
 800579e:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057a0:	4b10      	ldr	r3, [pc, #64]	@ (80057e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80057a2:	401a      	ands	r2, r3
 80057a4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80057a6:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80057a8:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80057aa:	401a      	ands	r2, r3
 80057ac:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80057ae:	4313      	orrs	r3, r2
 80057b0:	e7e7      	b.n	8005782 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 80057b2:	2002      	movs	r0, #2
 80057b4:	e7ea      	b.n	800578c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	fffffcff 	.word	0xfffffcff
 80057bc:	fffffbff 	.word	0xfffffbff
 80057c0:	fffff7ff 	.word	0xfffff7ff
 80057c4:	ffffefff 	.word	0xffffefff
 80057c8:	ffffdfff 	.word	0xffffdfff
 80057cc:	ffffbfff 	.word	0xffffbfff
 80057d0:	fff0ffff 	.word	0xfff0ffff
 80057d4:	efffffff 	.word	0xefffffff
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	ff0fffff 	.word	0xff0fffff
 80057e0:	feffffff 	.word	0xfeffffff
 80057e4:	fdffffff 	.word	0xfdffffff
 80057e8:	dfffffff 	.word	0xdfffffff

080057ec <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80057ec:	4770      	bx	lr
 80057ee:	46c0      	nop			@ (mov r8, r8)

080057f0 <HAL_TIMEx_CommutHalfCpltCallback>:
/**
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
 80057f0:	4770      	bx	lr
 80057f2:	46c0      	nop			@ (mov r8, r8)

080057f4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80057f4:	4770      	bx	lr
 80057f6:	46c0      	nop			@ (mov r8, r8)

080057f8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80057f8:	4770      	bx	lr
 80057fa:	46c0      	nop			@ (mov r8, r8)

080057fc <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057fc:	4770      	bx	lr
 80057fe:	46c0      	nop			@ (mov r8, r8)

08005800 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005800:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005802:	681b      	ldr	r3, [r3, #0]
{
 8005804:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	2320      	movs	r3, #32
 800580a:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800580c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800580e:	4011      	ands	r1, r2
 8005810:	4213      	tst	r3, r2
 8005812:	d127      	bne.n	8005864 <UART_DMAReceiveCplt+0x64>
  {
    huart->RxXferCount = 0U;
 8005814:	225e      	movs	r2, #94	@ 0x5e
 8005816:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005818:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	3a5d      	subs	r2, #93	@ 0x5d
 800581e:	f382 8810 	msr	PRIMASK, r2

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005822:	6804      	ldr	r4, [r0, #0]
 8005824:	4e1d      	ldr	r6, [pc, #116]	@ (800589c <UART_DMAReceiveCplt+0x9c>)
 8005826:	6821      	ldr	r1, [r4, #0]
 8005828:	4031      	ands	r1, r6
 800582a:	6021      	str	r1, [r4, #0]
 800582c:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005830:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005834:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005838:	6804      	ldr	r4, [r0, #0]
 800583a:	68a1      	ldr	r1, [r4, #8]
 800583c:	4391      	bics	r1, r2
 800583e:	60a1      	str	r1, [r4, #8]
 8005840:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005844:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005848:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584c:	2540      	movs	r5, #64	@ 0x40
 800584e:	6801      	ldr	r1, [r0, #0]
 8005850:	688a      	ldr	r2, [r1, #8]
 8005852:	43aa      	bics	r2, r5
 8005854:	608a      	str	r2, [r1, #8]
 8005856:	f384 8810 	msr	PRIMASK, r4

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800585a:	228c      	movs	r2, #140	@ 0x8c
 800585c:	5083      	str	r3, [r0, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d00e      	beq.n	8005882 <UART_DMAReceiveCplt+0x82>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005864:	2300      	movs	r3, #0
 8005866:	6703      	str	r3, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005868:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d003      	beq.n	8005876 <UART_DMAReceiveCplt+0x76>
  else
  {
    /* In other cases : use Rx Complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx complete callback*/
    huart->RxCpltCallback(huart);
 800586e:	23a0      	movs	r3, #160	@ 0xa0
 8005870:	58c3      	ldr	r3, [r0, r3]
 8005872:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005874:	bd70      	pop	{r4, r5, r6, pc}
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005876:	335b      	adds	r3, #91	@ 0x5b
 8005878:	5ac1      	ldrh	r1, [r0, r3]
 800587a:	3364      	adds	r3, #100	@ 0x64
 800587c:	58c3      	ldr	r3, [r0, r3]
 800587e:	4798      	blx	r3
 8005880:	e7f8      	b.n	8005874 <UART_DMAReceiveCplt+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005882:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005886:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588a:	2410      	movs	r4, #16
 800588c:	6802      	ldr	r2, [r0, #0]
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	43a3      	bics	r3, r4
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	f381 8810 	msr	PRIMASK, r1
}
 8005898:	e7e4      	b.n	8005864 <UART_DMAReceiveCplt+0x64>
 800589a:	46c0      	nop			@ (mov r8, r8)
 800589c:	fffffeff 	.word	0xfffffeff

080058a0 <UART_DMARxHalfCplt>:
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80058a0:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058a2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80058a4:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80058a6:	6703      	str	r3, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d003      	beq.n	80058b6 <UART_DMARxHalfCplt+0x16>
  else
  {
    /* In other cases : use Rx Half Complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Half complete callback*/
    huart->RxHalfCpltCallback(huart);
 80058ae:	239c      	movs	r3, #156	@ 0x9c
 80058b0:	58c3      	ldr	r3, [r0, r3]
 80058b2:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058b4:	bd10      	pop	{r4, pc}
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80058b6:	335b      	adds	r3, #91	@ 0x5b
 80058b8:	5ac1      	ldrh	r1, [r0, r3]
 80058ba:	3364      	adds	r3, #100	@ 0x64
 80058bc:	58c3      	ldr	r3, [r0, r3]
 80058be:	0849      	lsrs	r1, r1, #1
 80058c0:	4798      	blx	r3
 80058c2:	e7f7      	b.n	80058b4 <UART_DMARxHalfCplt+0x14>

080058c4 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	225e      	movs	r2, #94	@ 0x5e
{
 80058c8:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058ca:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80058cc:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80058ce:	3a08      	subs	r2, #8
 80058d0:	5283      	strh	r3, [r0, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80058d2:	33a4      	adds	r3, #164	@ 0xa4
 80058d4:	58c3      	ldr	r3, [r0, r3]
 80058d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	46c0      	nop			@ (mov r8, r8)

080058dc <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 80058dc:	4770      	bx	lr
 80058de:	46c0      	nop			@ (mov r8, r8)

080058e0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80058e0:	4770      	bx	lr
 80058e2:	46c0      	nop			@ (mov r8, r8)

080058e4 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 80058e4:	4770      	bx	lr
 80058e6:	46c0      	nop			@ (mov r8, r8)

080058e8 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 80058e8:	4770      	bx	lr
 80058ea:	46c0      	nop			@ (mov r8, r8)

080058ec <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 80058ec:	4770      	bx	lr
 80058ee:	46c0      	nop			@ (mov r8, r8)

080058f0 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80058f0:	4770      	bx	lr
 80058f2:	46c0      	nop			@ (mov r8, r8)

080058f4 <HAL_UART_AbortCpltCallback>:
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 80058f4:	4770      	bx	lr
 80058f6:	46c0      	nop			@ (mov r8, r8)

080058f8 <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 80058f8:	4770      	bx	lr
 80058fa:	46c0      	nop			@ (mov r8, r8)

080058fc <UART_DMAError>:
{
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058fe:	2188      	movs	r1, #136	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005900:	238c      	movs	r3, #140	@ 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005902:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005904:	5845      	ldr	r5, [r0, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005906:	58c4      	ldr	r4, [r0, r3]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005908:	6803      	ldr	r3, [r0, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	0612      	lsls	r2, r2, #24
 800590e:	d501      	bpl.n	8005914 <UART_DMAError+0x18>
 8005910:	2d21      	cmp	r5, #33	@ 0x21
 8005912:	d00d      	beq.n	8005930 <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	065b      	lsls	r3, r3, #25
 8005918:	d501      	bpl.n	800591e <UART_DMAError+0x22>
 800591a:	2c22      	cmp	r4, #34	@ 0x22
 800591c:	d026      	beq.n	800596c <UART_DMAError+0x70>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800591e:	2290      	movs	r2, #144	@ 0x90
 8005920:	2110      	movs	r1, #16
 8005922:	5883      	ldr	r3, [r0, r2]
 8005924:	430b      	orrs	r3, r1
 8005926:	5083      	str	r3, [r0, r2]
  huart->ErrorCallback(huart);
 8005928:	23a4      	movs	r3, #164	@ 0xa4
 800592a:	58c3      	ldr	r3, [r0, r3]
 800592c:	4798      	blx	r3
}
 800592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->TxXferCount = 0U;
 8005930:	2356      	movs	r3, #86	@ 0x56
 8005932:	2200      	movs	r2, #0
 8005934:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005936:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	3201      	adds	r2, #1
 800593c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005940:	27c0      	movs	r7, #192	@ 0xc0
 8005942:	6805      	ldr	r5, [r0, #0]
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	43bb      	bics	r3, r7
 8005948:	602b      	str	r3, [r5, #0]
 800594a:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005952:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005956:	6802      	ldr	r2, [r0, #0]
 8005958:	4e1c      	ldr	r6, [pc, #112]	@ (80059cc <UART_DMAError+0xd0>)
 800595a:	6893      	ldr	r3, [r2, #8]
 800595c:	4033      	ands	r3, r6
 800595e:	6093      	str	r3, [r2, #8]
 8005960:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 8005964:	2320      	movs	r3, #32
 8005966:	5043      	str	r3, [r0, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005968:	6803      	ldr	r3, [r0, #0]
}
 800596a:	e7d3      	b.n	8005914 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800596c:	235e      	movs	r3, #94	@ 0x5e
 800596e:	2200      	movs	r2, #0
 8005970:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005972:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005976:	3201      	adds	r2, #1
 8005978:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800597c:	6801      	ldr	r1, [r0, #0]
 800597e:	4d14      	ldr	r5, [pc, #80]	@ (80059d0 <UART_DMAError+0xd4>)
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	402b      	ands	r3, r5
 8005984:	600b      	str	r3, [r1, #0]
 8005986:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005992:	6802      	ldr	r2, [r0, #0]
 8005994:	4c0f      	ldr	r4, [pc, #60]	@ (80059d4 <UART_DMAError+0xd8>)
 8005996:	6893      	ldr	r3, [r2, #8]
 8005998:	4023      	ands	r3, r4
 800599a:	6093      	str	r3, [r2, #8]
 800599c:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d10a      	bne.n	80059bc <UART_DMAError+0xc0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059aa:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ae:	2410      	movs	r4, #16
 80059b0:	6802      	ldr	r2, [r0, #0]
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	43a3      	bics	r3, r4
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80059bc:	238c      	movs	r3, #140	@ 0x8c
 80059be:	2220      	movs	r2, #32
 80059c0:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	2300      	movs	r3, #0
 80059c4:	66c3      	str	r3, [r0, #108]	@ 0x6c
  huart->RxISR = NULL;
 80059c6:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80059c8:	e7a9      	b.n	800591e <UART_DMAError+0x22>
 80059ca:	46c0      	nop			@ (mov r8, r8)
 80059cc:	ff7fffff 	.word	0xff7fffff
 80059d0:	fffffedf 	.word	0xfffffedf
 80059d4:	effffffe 	.word	0xeffffffe

080059d8 <HAL_UART_RegisterCallback>:
{
 80059d8:	b510      	push	{r4, lr}
  if (pCallback == NULL)
 80059da:	2a00      	cmp	r2, #0
 80059dc:	d006      	beq.n	80059ec <HAL_UART_RegisterCallback+0x14>
  if (huart->gState == HAL_UART_STATE_READY)
 80059de:	2388      	movs	r3, #136	@ 0x88
 80059e0:	58c4      	ldr	r4, [r0, r3]
 80059e2:	2c20      	cmp	r4, #32
 80059e4:	d011      	beq.n	8005a0a <HAL_UART_RegisterCallback+0x32>
  else if (huart->gState == HAL_UART_STATE_RESET)
 80059e6:	58c3      	ldr	r3, [r0, r3]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d006      	beq.n	80059fa <HAL_UART_RegisterCallback+0x22>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80059ec:	2290      	movs	r2, #144	@ 0x90
 80059ee:	2140      	movs	r1, #64	@ 0x40
 80059f0:	5883      	ldr	r3, [r0, r2]
 80059f2:	430b      	orrs	r3, r1
 80059f4:	5083      	str	r3, [r0, r2]
    return HAL_ERROR;
 80059f6:	2001      	movs	r0, #1
}
 80059f8:	bd10      	pop	{r4, pc}
    switch (CallbackID)
 80059fa:	290b      	cmp	r1, #11
 80059fc:	d00b      	beq.n	8005a16 <HAL_UART_RegisterCallback+0x3e>
 80059fe:	290c      	cmp	r1, #12
 8005a00:	d1f4      	bne.n	80059ec <HAL_UART_RegisterCallback+0x14>
        huart->MspDeInitCallback = pCallback;
 8005a02:	23c8      	movs	r3, #200	@ 0xc8
 8005a04:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2000      	movs	r0, #0
 8005a08:	e7f6      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
    switch (CallbackID)
 8005a0a:	290c      	cmp	r1, #12
 8005a0c:	d8ee      	bhi.n	80059ec <HAL_UART_RegisterCallback+0x14>
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <HAL_UART_RegisterCallback+0xa0>)
 8005a10:	0089      	lsls	r1, r1, #2
 8005a12:	585b      	ldr	r3, [r3, r1]
 8005a14:	469f      	mov	pc, r3
        huart->MspInitCallback = pCallback;
 8005a16:	23c4      	movs	r3, #196	@ 0xc4
 8005a18:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e7ec      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->TxHalfCpltCallback = pCallback;
 8005a1e:	2394      	movs	r3, #148	@ 0x94
 8005a20:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a22:	2000      	movs	r0, #0
 8005a24:	e7e8      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->TxCpltCallback = pCallback;
 8005a26:	2398      	movs	r3, #152	@ 0x98
 8005a28:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	e7e4      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->RxHalfCpltCallback = pCallback;
 8005a2e:	239c      	movs	r3, #156	@ 0x9c
 8005a30:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a32:	2000      	movs	r0, #0
 8005a34:	e7e0      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->RxCpltCallback = pCallback;
 8005a36:	23a0      	movs	r3, #160	@ 0xa0
 8005a38:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e7dc      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->ErrorCallback = pCallback;
 8005a3e:	23a4      	movs	r3, #164	@ 0xa4
 8005a40:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a42:	2000      	movs	r0, #0
 8005a44:	e7d8      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->AbortCpltCallback = pCallback;
 8005a46:	23a8      	movs	r3, #168	@ 0xa8
 8005a48:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	e7d4      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->AbortTransmitCpltCallback = pCallback;
 8005a4e:	23ac      	movs	r3, #172	@ 0xac
 8005a50:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2000      	movs	r0, #0
 8005a54:	e7d0      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->AbortReceiveCpltCallback = pCallback;
 8005a56:	23b0      	movs	r3, #176	@ 0xb0
 8005a58:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e7cc      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->WakeupCallback = pCallback;
 8005a5e:	23b4      	movs	r3, #180	@ 0xb4
 8005a60:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2000      	movs	r0, #0
 8005a64:	e7c8      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->RxFifoFullCallback = pCallback;
 8005a66:	23b8      	movs	r3, #184	@ 0xb8
 8005a68:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e7c4      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
        huart->TxFifoEmptyCallback = pCallback;
 8005a6e:	23bc      	movs	r3, #188	@ 0xbc
 8005a70:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a72:	2000      	movs	r0, #0
 8005a74:	e7c0      	b.n	80059f8 <HAL_UART_RegisterCallback+0x20>
 8005a76:	46c0      	nop			@ (mov r8, r8)
 8005a78:	0800717c 	.word	0x0800717c

08005a7c <HAL_UART_Receive_DMA>:
{
 8005a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7e:	000d      	movs	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a80:	218c      	movs	r1, #140	@ 0x8c
 8005a82:	5841      	ldr	r1, [r0, r1]
{
 8005a84:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a86:	2920      	cmp	r1, #32
 8005a88:	d160      	bne.n	8005b4c <HAL_UART_Receive_DMA+0xd0>
    if ((pData == NULL) || (Size == 0U))
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	d041      	beq.n	8005b12 <HAL_UART_Receive_DMA+0x96>
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	d03f      	beq.n	8005b12 <HAL_UART_Receive_DMA+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a92:	2380      	movs	r3, #128	@ 0x80
 8005a94:	6881      	ldr	r1, [r0, #8]
 8005a96:	015b      	lsls	r3, r3, #5
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	d104      	bne.n	8005aa6 <HAL_UART_Receive_DMA+0x2a>
 8005a9c:	6903      	ldr	r3, [r0, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_UART_Receive_DMA+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005aa2:	07eb      	lsls	r3, r5, #31
 8005aa4:	d435      	bmi.n	8005b12 <HAL_UART_Receive_DMA+0x96>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005aa8:	4930      	ldr	r1, [pc, #192]	@ (8005b6c <HAL_UART_Receive_DMA+0xf0>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	428b      	cmp	r3, r1
 8005ab0:	d00f      	beq.n	8005ad2 <HAL_UART_Receive_DMA+0x56>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	d50c      	bpl.n	8005ad2 <HAL_UART_Receive_DMA+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abc:	2301      	movs	r3, #1
 8005abe:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ac2:	2380      	movs	r3, #128	@ 0x80
 8005ac4:	6821      	ldr	r1, [r4, #0]
 8005ac6:	04db      	lsls	r3, r3, #19
 8005ac8:	680e      	ldr	r6, [r1, #0]
 8005aca:	4333      	orrs	r3, r6
 8005acc:	600b      	str	r3, [r1, #0]
 8005ace:	f380 8810 	msr	PRIMASK, r0
  huart->RxXferSize = Size;
 8005ad2:	235c      	movs	r3, #92	@ 0x5c
  huart->pRxBuffPtr = pData;
 8005ad4:	65a5      	str	r5, [r4, #88]	@ 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad6:	2122      	movs	r1, #34	@ 0x22
  huart->RxXferSize = Size;
 8005ad8:	52e2      	strh	r2, [r4, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	2790      	movs	r7, #144	@ 0x90
 8005adc:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ade:	268c      	movs	r6, #140	@ 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	51e3      	str	r3, [r4, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ae2:	51a1      	str	r1, [r4, r6]
  if (huart->hdmarx != NULL)
 8005ae4:	315e      	adds	r1, #94	@ 0x5e
 8005ae6:	5860      	ldr	r0, [r4, r1]
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d014      	beq.n	8005b16 <HAL_UART_Receive_DMA+0x9a>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005aec:	4920      	ldr	r1, [pc, #128]	@ (8005b70 <HAL_UART_Receive_DMA+0xf4>)
    huart->hdmarx->XferAbortCallback = NULL;
 8005aee:	6383      	str	r3, [r0, #56]	@ 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005af0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005af2:	4920      	ldr	r1, [pc, #128]	@ (8005b74 <HAL_UART_Receive_DMA+0xf8>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005af4:	0013      	movs	r3, r2
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005af6:	6301      	str	r1, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005af8:	491f      	ldr	r1, [pc, #124]	@ (8005b78 <HAL_UART_Receive_DMA+0xfc>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005afa:	002a      	movs	r2, r5
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005afc:	6341      	str	r1, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005afe:	6821      	ldr	r1, [r4, #0]
 8005b00:	3124      	adds	r1, #36	@ 0x24
 8005b02:	f7fd f8a7 	bl	8002c54 <HAL_DMA_Start_IT>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_UART_Receive_DMA+0x9a>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b0a:	2310      	movs	r3, #16
 8005b0c:	51e3      	str	r3, [r4, r7]
      huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	3310      	adds	r3, #16
 8005b10:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 8005b12:	2001      	movs	r0, #1
 8005b14:	e019      	b.n	8005b4a <HAL_UART_Receive_DMA+0xce>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d119      	bne.n	8005b50 <HAL_UART_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	2301      	movs	r3, #1
 8005b22:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b26:	6821      	ldr	r1, [r4, #0]
 8005b28:	688a      	ldr	r2, [r1, #8]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	608a      	str	r2, [r1, #8]
 8005b2e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b32:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3a:	2040      	movs	r0, #64	@ 0x40
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	6893      	ldr	r3, [r2, #8]
 8005b40:	4303      	orrs	r3, r0
 8005b42:	6093      	str	r3, [r2, #8]
 8005b44:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8005b48:	2000      	movs	r0, #0
}
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	e7fc      	b.n	8005b4a <HAL_UART_Receive_DMA+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b50:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b54:	2301      	movs	r3, #1
 8005b56:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	33ff      	adds	r3, #255	@ 0xff
 8005b5e:	6810      	ldr	r0, [r2, #0]
 8005b60:	4303      	orrs	r3, r0
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	f381 8810 	msr	PRIMASK, r1
}
 8005b68:	e7d8      	b.n	8005b1c <HAL_UART_Receive_DMA+0xa0>
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	40008000 	.word	0x40008000
 8005b70:	08005801 	.word	0x08005801
 8005b74:	080058a1 	.word	0x080058a1
 8005b78:	080058fd 	.word	0x080058fd

08005b7c <HAL_UART_IRQHandler>:
{
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	4645      	mov	r5, r8
 8005b80:	46de      	mov	lr, fp
 8005b82:	4657      	mov	r7, sl
 8005b84:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b86:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b88:	49ae      	ldr	r1, [pc, #696]	@ (8005e44 <HAL_UART_IRQHandler+0x2c8>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b8a:	69d3      	ldr	r3, [r2, #28]
{
 8005b8c:	0004      	movs	r4, r0
 8005b8e:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b90:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b92:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8005b94:	420b      	tst	r3, r1
 8005b96:	d14e      	bne.n	8005c36 <HAL_UART_IRQHandler+0xba>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b98:	2120      	movs	r1, #32
 8005b9a:	4219      	tst	r1, r3
 8005b9c:	d006      	beq.n	8005bac <HAL_UART_IRQHandler+0x30>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b9e:	2680      	movs	r6, #128	@ 0x80
 8005ba0:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ba2:	4001      	ands	r1, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ba4:	402e      	ands	r6, r5
 8005ba6:	4331      	orrs	r1, r6
 8005ba8:	d000      	beq.n	8005bac <HAL_UART_IRQHandler+0x30>
 8005baa:	e0e4      	b.n	8005d76 <HAL_UART_IRQHandler+0x1fa>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8005bae:	2e01      	cmp	r6, #1
 8005bb0:	d100      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x38>
 8005bb2:	e09b      	b.n	8005cec <HAL_UART_IRQHandler+0x170>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bb4:	2180      	movs	r1, #128	@ 0x80
 8005bb6:	0349      	lsls	r1, r1, #13
 8005bb8:	420b      	tst	r3, r1
 8005bba:	d128      	bne.n	8005c0e <HAL_UART_IRQHandler+0x92>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bbc:	2280      	movs	r2, #128	@ 0x80
 8005bbe:	421a      	tst	r2, r3
 8005bc0:	d006      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x54>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005bc2:	2180      	movs	r1, #128	@ 0x80
 8005bc4:	0409      	lsls	r1, r1, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bc6:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005bc8:	400d      	ands	r5, r1
 8005bca:	432a      	orrs	r2, r5
 8005bcc:	d000      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x54>
 8005bce:	e0d9      	b.n	8005d84 <HAL_UART_IRQHandler+0x208>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bd0:	2240      	movs	r2, #64	@ 0x40
 8005bd2:	421a      	tst	r2, r3
 8005bd4:	d023      	beq.n	8005c1e <HAL_UART_IRQHandler+0xa2>
 8005bd6:	4202      	tst	r2, r0
 8005bd8:	d021      	beq.n	8005c1e <HAL_UART_IRQHandler+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bda:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bde:	2301      	movs	r3, #1
 8005be0:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	680b      	ldr	r3, [r1, #0]
 8005be8:	4393      	bics	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]
 8005bec:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf0:	2388      	movs	r3, #136	@ 0x88
 8005bf2:	3a20      	subs	r2, #32
 8005bf4:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	67a3      	str	r3, [r4, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005bfa:	3398      	adds	r3, #152	@ 0x98
 8005bfc:	0020      	movs	r0, r4
 8005bfe:	58e3      	ldr	r3, [r4, r3]
 8005c00:	4798      	blx	r3
}
 8005c02:	bcf0      	pop	{r4, r5, r6, r7}
 8005c04:	46bb      	mov	fp, r7
 8005c06:	46b2      	mov	sl, r6
 8005c08:	46a9      	mov	r9, r5
 8005c0a:	46a0      	mov	r8, r4
 8005c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c0e:	026e      	lsls	r6, r5, #9
 8005c10:	d5d4      	bpl.n	8005bbc <HAL_UART_IRQHandler+0x40>
    huart->WakeupCallback(huart);
 8005c12:	23b4      	movs	r3, #180	@ 0xb4
 8005c14:	0020      	movs	r0, r4
 8005c16:	58e3      	ldr	r3, [r4, r3]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c18:	6211      	str	r1, [r2, #32]
    huart->WakeupCallback(huart);
 8005c1a:	4798      	blx	r3
    return;
 8005c1c:	e7f1      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	d502      	bpl.n	8005c28 <HAL_UART_IRQHandler+0xac>
 8005c22:	0042      	lsls	r2, r0, #1
 8005c24:	d500      	bpl.n	8005c28 <HAL_UART_IRQHandler+0xac>
 8005c26:	e107      	b.n	8005e38 <HAL_UART_IRQHandler+0x2bc>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c28:	01db      	lsls	r3, r3, #7
 8005c2a:	d5ea      	bpl.n	8005c02 <HAL_UART_IRQHandler+0x86>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	dae8      	bge.n	8005c02 <HAL_UART_IRQHandler+0x86>
    huart->RxFifoFullCallback(huart);
 8005c30:	23b8      	movs	r3, #184	@ 0xb8
 8005c32:	58e3      	ldr	r3, [r4, r3]
 8005c34:	e0a3      	b.n	8005d7e <HAL_UART_IRQHandler+0x202>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005c36:	4e84      	ldr	r6, [pc, #528]	@ (8005e48 <HAL_UART_IRQHandler+0x2cc>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c38:	4984      	ldr	r1, [pc, #528]	@ (8005e4c <HAL_UART_IRQHandler+0x2d0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005c3a:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c3c:	4001      	ands	r1, r0
 8005c3e:	4331      	orrs	r1, r6
 8005c40:	d0b4      	beq.n	8005bac <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c42:	2101      	movs	r1, #1
 8005c44:	4219      	tst	r1, r3
 8005c46:	d008      	beq.n	8005c5a <HAL_UART_IRQHandler+0xde>
 8005c48:	05c7      	lsls	r7, r0, #23
 8005c4a:	d506      	bpl.n	8005c5a <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c4c:	2790      	movs	r7, #144	@ 0x90
 8005c4e:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c50:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c52:	59e7      	ldr	r7, [r4, r7]
 8005c54:	4339      	orrs	r1, r7
 8005c56:	4667      	mov	r7, ip
 8005c58:	51e1      	str	r1, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c5a:	2104      	movs	r1, #4
 8005c5c:	000f      	movs	r7, r1
 8005c5e:	401f      	ands	r7, r3
 8005c60:	46bc      	mov	ip, r7
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c62:	2702      	movs	r7, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c64:	4689      	mov	r9, r1
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c66:	421f      	tst	r7, r3
 8005c68:	d073      	beq.n	8005d52 <HAL_UART_IRQHandler+0x1d6>
 8005c6a:	07e9      	lsls	r1, r5, #31
 8005c6c:	d50a      	bpl.n	8005c84 <HAL_UART_IRQHandler+0x108>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c6e:	2190      	movs	r1, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c70:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c72:	5867      	ldr	r7, [r4, r1]
 8005c74:	4688      	mov	r8, r1
 8005c76:	4649      	mov	r1, r9
 8005c78:	4339      	orrs	r1, r7
 8005c7a:	4647      	mov	r7, r8
 8005c7c:	51e1      	str	r1, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c7e:	4661      	mov	r1, ip
 8005c80:	2900      	cmp	r1, #0
 8005c82:	d16b      	bne.n	8005d5c <HAL_UART_IRQHandler+0x1e0>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c84:	2708      	movs	r7, #8
 8005c86:	421f      	tst	r7, r3
 8005c88:	d008      	beq.n	8005c9c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c8a:	2120      	movs	r1, #32
 8005c8c:	4001      	ands	r1, r0
 8005c8e:	4331      	orrs	r1, r6
 8005c90:	d004      	beq.n	8005c9c <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c92:	2690      	movs	r6, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c94:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c96:	59a1      	ldr	r1, [r4, r6]
 8005c98:	4339      	orrs	r1, r7
 8005c9a:	51a1      	str	r1, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c9c:	2180      	movs	r1, #128	@ 0x80
 8005c9e:	0109      	lsls	r1, r1, #4
 8005ca0:	420b      	tst	r3, r1
 8005ca2:	d007      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x138>
 8005ca4:	0146      	lsls	r6, r0, #5
 8005ca6:	d505      	bpl.n	8005cb4 <HAL_UART_IRQHandler+0x138>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ca8:	2690      	movs	r6, #144	@ 0x90
 8005caa:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cac:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cae:	59a1      	ldr	r1, [r4, r6]
 8005cb0:	4339      	orrs	r1, r7
 8005cb2:	51a1      	str	r1, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb4:	2190      	movs	r1, #144	@ 0x90
 8005cb6:	5861      	ldr	r1, [r4, r1]
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	d0a2      	beq.n	8005c02 <HAL_UART_IRQHandler+0x86>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cbc:	2120      	movs	r1, #32
 8005cbe:	4219      	tst	r1, r3
 8005cc0:	d005      	beq.n	8005cce <HAL_UART_IRQHandler+0x152>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cc2:	2380      	movs	r3, #128	@ 0x80
 8005cc4:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cc6:	4001      	ands	r1, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cc8:	402b      	ands	r3, r5
 8005cca:	4319      	orrs	r1, r3
 8005ccc:	d15e      	bne.n	8005d8c <HAL_UART_IRQHandler+0x210>
      errorcode = huart->ErrorCode;
 8005cce:	2690      	movs	r6, #144	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cd0:	2540      	movs	r5, #64	@ 0x40
      errorcode = huart->ErrorCode;
 8005cd2:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cd4:	6893      	ldr	r3, [r2, #8]
 8005cd6:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cd8:	2328      	movs	r3, #40	@ 0x28
 8005cda:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cdc:	431d      	orrs	r5, r3
 8005cde:	d15c      	bne.n	8005d9a <HAL_UART_IRQHandler+0x21e>
        huart->ErrorCallback(huart);
 8005ce0:	23a4      	movs	r3, #164	@ 0xa4
 8005ce2:	0020      	movs	r0, r4
 8005ce4:	58e3      	ldr	r3, [r4, r3]
 8005ce6:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	51a5      	str	r5, [r4, r6]
 8005cea:	e78a      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cec:	2710      	movs	r7, #16
 8005cee:	421f      	tst	r7, r3
 8005cf0:	d100      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x178>
 8005cf2:	e75f      	b.n	8005bb4 <HAL_UART_IRQHandler+0x38>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cf4:	4207      	tst	r7, r0
 8005cf6:	d100      	bne.n	8005cfa <HAL_UART_IRQHandler+0x17e>
 8005cf8:	e75c      	b.n	8005bb4 <HAL_UART_IRQHandler+0x38>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfa:	2340      	movs	r3, #64	@ 0x40
 8005cfc:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cfe:	6217      	str	r7, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	6892      	ldr	r2, [r2, #8]
 8005d02:	4010      	ands	r0, r2
 8005d04:	4213      	tst	r3, r2
 8005d06:	d100      	bne.n	8005d0a <HAL_UART_IRQHandler+0x18e>
 8005d08:	e0a8      	b.n	8005e5c <HAL_UART_IRQHandler+0x2e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d0a:	2280      	movs	r2, #128	@ 0x80
 8005d0c:	4694      	mov	ip, r2
 8005d0e:	58a2      	ldr	r2, [r4, r2]
 8005d10:	6810      	ldr	r0, [r2, #0]
 8005d12:	6842      	ldr	r2, [r0, #4]
 8005d14:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	d100      	bne.n	8005d1c <HAL_UART_IRQHandler+0x1a0>
 8005d1a:	e772      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d1c:	215c      	movs	r1, #92	@ 0x5c
 8005d1e:	468b      	mov	fp, r1
 8005d20:	5a61      	ldrh	r1, [r4, r1]
 8005d22:	4291      	cmp	r1, r2
 8005d24:	d800      	bhi.n	8005d28 <HAL_UART_IRQHandler+0x1ac>
 8005d26:	e76c      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
        huart->RxXferCount = nb_remaining_rx_data;
 8005d28:	255e      	movs	r5, #94	@ 0x5e
 8005d2a:	5362      	strh	r2, [r4, r5]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	0015      	movs	r5, r2
 8005d30:	6800      	ldr	r0, [r0, #0]
 8005d32:	4005      	ands	r5, r0
 8005d34:	46a8      	mov	r8, r5
 8005d36:	4202      	tst	r2, r0
 8005d38:	d100      	bne.n	8005d3c <HAL_UART_IRQHandler+0x1c0>
 8005d3a:	e0cb      	b.n	8005ed4 <HAL_UART_IRQHandler+0x358>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d40:	335c      	adds	r3, #92	@ 0x5c
 8005d42:	5ae3      	ldrh	r3, [r4, r3]
 8005d44:	0020      	movs	r0, r4
 8005d46:	1ac9      	subs	r1, r1, r3
 8005d48:	23c0      	movs	r3, #192	@ 0xc0
 8005d4a:	b289      	uxth	r1, r1
 8005d4c:	58e3      	ldr	r3, [r4, r3]
 8005d4e:	4798      	blx	r3
 8005d50:	e757      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d52:	4661      	mov	r1, ip
 8005d54:	2900      	cmp	r1, #0
 8005d56:	d095      	beq.n	8005c84 <HAL_UART_IRQHandler+0x108>
 8005d58:	07e9      	lsls	r1, r5, #31
 8005d5a:	d593      	bpl.n	8005c84 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d5c:	2104      	movs	r1, #4
 8005d5e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d60:	318c      	adds	r1, #140	@ 0x8c
 8005d62:	4689      	mov	r9, r1
 8005d64:	5861      	ldr	r1, [r4, r1]
 8005d66:	4688      	mov	r8, r1
 8005d68:	2102      	movs	r1, #2
 8005d6a:	4647      	mov	r7, r8
 8005d6c:	430f      	orrs	r7, r1
 8005d6e:	0039      	movs	r1, r7
 8005d70:	464f      	mov	r7, r9
 8005d72:	51e1      	str	r1, [r4, r7]
 8005d74:	e786      	b.n	8005c84 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8005d76:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d100      	bne.n	8005d7e <HAL_UART_IRQHandler+0x202>
 8005d7c:	e741      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
    huart->RxFifoFullCallback(huart);
 8005d7e:	0020      	movs	r0, r4
 8005d80:	4798      	blx	r3
    return;
 8005d82:	e73e      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
    if (huart->TxISR != NULL)
 8005d84:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f9      	bne.n	8005d7e <HAL_UART_IRQHandler+0x202>
 8005d8a:	e73a      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
        if (huart->RxISR != NULL)
 8005d8c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d09d      	beq.n	8005cce <HAL_UART_IRQHandler+0x152>
          huart->RxISR(huart);
 8005d92:	0020      	movs	r0, r4
 8005d94:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	e799      	b.n	8005cce <HAL_UART_IRQHandler+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005da4:	6821      	ldr	r1, [r4, #0]
 8005da6:	4d2a      	ldr	r5, [pc, #168]	@ (8005e50 <HAL_UART_IRQHandler+0x2d4>)
 8005da8:	680b      	ldr	r3, [r1, #0]
 8005daa:	402b      	ands	r3, r5
 8005dac:	600b      	str	r3, [r1, #0]
 8005dae:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	4825      	ldr	r0, [pc, #148]	@ (8005e54 <HAL_UART_IRQHandler+0x2d8>)
 8005dbe:	6893      	ldr	r3, [r2, #8]
 8005dc0:	4003      	ands	r3, r0
 8005dc2:	6093      	str	r3, [r2, #8]
 8005dc4:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10a      	bne.n	8005de4 <HAL_UART_IRQHandler+0x268>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd6:	2010      	movs	r0, #16
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	4383      	bics	r3, r0
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8005de4:	238c      	movs	r3, #140	@ 0x8c
 8005de6:	2220      	movs	r2, #32
 8005de8:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	2300      	movs	r3, #0
 8005dec:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8005dee:	6763      	str	r3, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	2340      	movs	r3, #64	@ 0x40
 8005df6:	4213      	tst	r3, r2
 8005df8:	d019      	beq.n	8005e2e <HAL_UART_IRQHandler+0x2b2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e04:	6821      	ldr	r1, [r4, #0]
 8005e06:	688a      	ldr	r2, [r1, #8]
 8005e08:	439a      	bics	r2, r3
 8005e0a:	608a      	str	r2, [r1, #8]
 8005e0c:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8005e10:	2580      	movs	r5, #128	@ 0x80
 8005e12:	5960      	ldr	r0, [r4, r5]
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_UART_IRQHandler+0x2b2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e18:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <HAL_UART_IRQHandler+0x2dc>)
 8005e1a:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e1c:	f7fc ffbe 	bl	8002d9c <HAL_DMA_Abort_IT>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d100      	bne.n	8005e26 <HAL_UART_IRQHandler+0x2aa>
 8005e24:	e6ed      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e26:	5960      	ldr	r0, [r4, r5]
 8005e28:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005e2a:	4798      	blx	r3
 8005e2c:	e6e9      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
          huart->ErrorCallback(huart);
 8005e2e:	23a4      	movs	r3, #164	@ 0xa4
 8005e30:	0020      	movs	r0, r4
 8005e32:	58e3      	ldr	r3, [r4, r3]
 8005e34:	4798      	blx	r3
 8005e36:	e6e4      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
    huart->TxFifoEmptyCallback(huart);
 8005e38:	23bc      	movs	r3, #188	@ 0xbc
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	58e3      	ldr	r3, [r4, r3]
 8005e3e:	4798      	blx	r3
    return;
 8005e40:	e6df      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	0000080f 	.word	0x0000080f
 8005e48:	10000001 	.word	0x10000001
 8005e4c:	04000120 	.word	0x04000120
 8005e50:	fffffedf 	.word	0xfffffedf
 8005e54:	effffffe 	.word	0xeffffffe
 8005e58:	080058c5 	.word	0x080058c5
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e5c:	235c      	movs	r3, #92	@ 0x5c
 8005e5e:	225e      	movs	r2, #94	@ 0x5e
 8005e60:	5ae1      	ldrh	r1, [r4, r3]
 8005e62:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8005e64:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e66:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	d100      	bne.n	8005e6e <HAL_UART_IRQHandler+0x2f2>
 8005e6c:	e6c9      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e6e:	1ac9      	subs	r1, r1, r3
 8005e70:	b28b      	uxth	r3, r1
 8005e72:	4698      	mov	r8, r3
          && (nb_rx_data > 0U))
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d100      	bne.n	8005e7a <HAL_UART_IRQHandler+0x2fe>
 8005e78:	e6c3      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e7a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7e:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	492d      	ldr	r1, [pc, #180]	@ (8005f3c <HAL_UART_IRQHandler+0x3c0>)
 8005e86:	6813      	ldr	r3, [r2, #0]
 8005e88:	400b      	ands	r3, r1
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e90:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e94:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	4929      	ldr	r1, [pc, #164]	@ (8005f40 <HAL_UART_IRQHandler+0x3c4>)
 8005e9c:	6893      	ldr	r3, [r2, #8]
 8005e9e:	400b      	ands	r3, r1
 8005ea0:	6093      	str	r3, [r2, #8]
 8005ea2:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8005ea6:	238c      	movs	r3, #140	@ 0x8c
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eac:	66e0      	str	r0, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8005eae:	6760      	str	r0, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb4:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb8:	6822      	ldr	r2, [r4, #0]
 8005eba:	6813      	ldr	r3, [r2, #0]
 8005ebc:	43bb      	bics	r3, r7
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, nb_rx_data);
 8005ec8:	33be      	adds	r3, #190	@ 0xbe
 8005eca:	4641      	mov	r1, r8
 8005ecc:	0020      	movs	r0, r4
 8005ece:	58e3      	ldr	r3, [r4, r3]
 8005ed0:	4798      	blx	r3
 8005ed2:	e696      	b.n	8005c02 <HAL_UART_IRQHandler+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ed4:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed8:	f386 8810 	msr	PRIMASK, r6
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005edc:	6820      	ldr	r0, [r4, #0]
 8005ede:	4d19      	ldr	r5, [pc, #100]	@ (8005f44 <HAL_UART_IRQHandler+0x3c8>)
 8005ee0:	6801      	ldr	r1, [r0, #0]
 8005ee2:	4029      	ands	r1, r5
 8005ee4:	6001      	str	r1, [r0, #0]
 8005ee6:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eea:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eee:	f386 8810 	msr	PRIMASK, r6
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	6881      	ldr	r1, [r0, #8]
 8005ef6:	43b1      	bics	r1, r6
 8005ef8:	6081      	str	r1, [r0, #8]
 8005efa:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005efe:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f02:	f386 8810 	msr	PRIMASK, r6
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f06:	6820      	ldr	r0, [r4, #0]
 8005f08:	6881      	ldr	r1, [r0, #8]
 8005f0a:	4399      	bics	r1, r3
 8005f0c:	6081      	str	r1, [r0, #8]
 8005f0e:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 8005f12:	334c      	adds	r3, #76	@ 0x4c
 8005f14:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f16:	4643      	mov	r3, r8
 8005f18:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1e:	f386 8810 	msr	PRIMASK, r6
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	6813      	ldr	r3, [r2, #0]
 8005f26:	43bb      	bics	r3, r7
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f2e:	4663      	mov	r3, ip
 8005f30:	58e0      	ldr	r0, [r4, r3]
 8005f32:	f7fc fef7 	bl	8002d24 <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f36:	465b      	mov	r3, fp
 8005f38:	5ae1      	ldrh	r1, [r4, r3]
 8005f3a:	e6ff      	b.n	8005d3c <HAL_UART_IRQHandler+0x1c0>
 8005f3c:	fffffedf 	.word	0xfffffedf
 8005f40:	effffffe 	.word	0xeffffffe
 8005f44:	fffffeff 	.word	0xfffffeff

08005f48 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f48:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8005f4a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f4c:	071a      	lsls	r2, r3, #28
 8005f4e:	d506      	bpl.n	8005f5e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f50:	6801      	ldr	r1, [r0, #0]
 8005f52:	4c28      	ldr	r4, [pc, #160]	@ (8005ff4 <UART_AdvFeatureConfig+0xac>)
 8005f54:	684a      	ldr	r2, [r1, #4]
 8005f56:	4022      	ands	r2, r4
 8005f58:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005f5a:	4322      	orrs	r2, r4
 8005f5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f5e:	07da      	lsls	r2, r3, #31
 8005f60:	d506      	bpl.n	8005f70 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f62:	6801      	ldr	r1, [r0, #0]
 8005f64:	4c24      	ldr	r4, [pc, #144]	@ (8005ff8 <UART_AdvFeatureConfig+0xb0>)
 8005f66:	684a      	ldr	r2, [r1, #4]
 8005f68:	4022      	ands	r2, r4
 8005f6a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005f6c:	4322      	orrs	r2, r4
 8005f6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f70:	079a      	lsls	r2, r3, #30
 8005f72:	d506      	bpl.n	8005f82 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f74:	6801      	ldr	r1, [r0, #0]
 8005f76:	4c21      	ldr	r4, [pc, #132]	@ (8005ffc <UART_AdvFeatureConfig+0xb4>)
 8005f78:	684a      	ldr	r2, [r1, #4]
 8005f7a:	4022      	ands	r2, r4
 8005f7c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005f7e:	4322      	orrs	r2, r4
 8005f80:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f82:	075a      	lsls	r2, r3, #29
 8005f84:	d506      	bpl.n	8005f94 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f86:	6801      	ldr	r1, [r0, #0]
 8005f88:	4c1d      	ldr	r4, [pc, #116]	@ (8006000 <UART_AdvFeatureConfig+0xb8>)
 8005f8a:	684a      	ldr	r2, [r1, #4]
 8005f8c:	4022      	ands	r2, r4
 8005f8e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005f90:	4322      	orrs	r2, r4
 8005f92:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f94:	06da      	lsls	r2, r3, #27
 8005f96:	d506      	bpl.n	8005fa6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f98:	6801      	ldr	r1, [r0, #0]
 8005f9a:	4c1a      	ldr	r4, [pc, #104]	@ (8006004 <UART_AdvFeatureConfig+0xbc>)
 8005f9c:	688a      	ldr	r2, [r1, #8]
 8005f9e:	4022      	ands	r2, r4
 8005fa0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005fa2:	4322      	orrs	r2, r4
 8005fa4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa6:	069a      	lsls	r2, r3, #26
 8005fa8:	d506      	bpl.n	8005fb8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005faa:	6801      	ldr	r1, [r0, #0]
 8005fac:	4c16      	ldr	r4, [pc, #88]	@ (8006008 <UART_AdvFeatureConfig+0xc0>)
 8005fae:	688a      	ldr	r2, [r1, #8]
 8005fb0:	4022      	ands	r2, r4
 8005fb2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005fb4:	4322      	orrs	r2, r4
 8005fb6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb8:	065a      	lsls	r2, r3, #25
 8005fba:	d50a      	bpl.n	8005fd2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fbc:	6801      	ldr	r1, [r0, #0]
 8005fbe:	4d13      	ldr	r5, [pc, #76]	@ (800600c <UART_AdvFeatureConfig+0xc4>)
 8005fc0:	684a      	ldr	r2, [r1, #4]
 8005fc2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005fc4:	402a      	ands	r2, r5
 8005fc6:	4322      	orrs	r2, r4
 8005fc8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fca:	2280      	movs	r2, #128	@ 0x80
 8005fcc:	0352      	lsls	r2, r2, #13
 8005fce:	4294      	cmp	r4, r2
 8005fd0:	d009      	beq.n	8005fe6 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fd2:	061b      	lsls	r3, r3, #24
 8005fd4:	d506      	bpl.n	8005fe4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fd6:	6802      	ldr	r2, [r0, #0]
 8005fd8:	490d      	ldr	r1, [pc, #52]	@ (8006010 <UART_AdvFeatureConfig+0xc8>)
 8005fda:	6853      	ldr	r3, [r2, #4]
 8005fdc:	400b      	ands	r3, r1
 8005fde:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6053      	str	r3, [r2, #4]
}
 8005fe4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe6:	684a      	ldr	r2, [r1, #4]
 8005fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8006014 <UART_AdvFeatureConfig+0xcc>)
 8005fea:	4022      	ands	r2, r4
 8005fec:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005fee:	4322      	orrs	r2, r4
 8005ff0:	604a      	str	r2, [r1, #4]
 8005ff2:	e7ee      	b.n	8005fd2 <UART_AdvFeatureConfig+0x8a>
 8005ff4:	ffff7fff 	.word	0xffff7fff
 8005ff8:	fffdffff 	.word	0xfffdffff
 8005ffc:	fffeffff 	.word	0xfffeffff
 8006000:	fffbffff 	.word	0xfffbffff
 8006004:	ffffefff 	.word	0xffffefff
 8006008:	ffffdfff 	.word	0xffffdfff
 800600c:	ffefffff 	.word	0xffefffff
 8006010:	fff7ffff 	.word	0xfff7ffff
 8006014:	ff9fffff 	.word	0xff9fffff

08006018 <UART_CheckIdleState>:
{
 8006018:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601a:	2390      	movs	r3, #144	@ 0x90
 800601c:	2200      	movs	r2, #0
{
 800601e:	46c6      	mov	lr, r8
 8006020:	0004      	movs	r4, r0
 8006022:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006024:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8006026:	f7fb ffc9 	bl	8001fbc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800602a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800602c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	0712      	lsls	r2, r2, #28
 8006032:	d411      	bmi.n	8006058 <UART_CheckIdleState+0x40>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	0752      	lsls	r2, r2, #29
 8006038:	d43e      	bmi.n	80060b8 <UART_CheckIdleState+0xa0>
  huart->gState = HAL_UART_STATE_READY;
 800603a:	2320      	movs	r3, #32
 800603c:	2288      	movs	r2, #136	@ 0x88
 800603e:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006040:	3204      	adds	r2, #4
 8006042:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006044:	2300      	movs	r3, #0
  return HAL_OK;
 8006046:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006048:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800604a:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 800604c:	2384      	movs	r3, #132	@ 0x84
 800604e:	2200      	movs	r2, #0
 8006050:	54e2      	strb	r2, [r4, r3]
}
 8006052:	bc80      	pop	{r7}
 8006054:	46b8      	mov	r8, r7
 8006056:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	0292      	lsls	r2, r2, #10
 800605c:	d4ea      	bmi.n	8006034 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605e:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006060:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006062:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006064:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006066:	04b6      	lsls	r6, r6, #18
 8006068:	e010      	b.n	800608c <UART_CheckIdleState+0x74>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4217      	tst	r7, r2
 8006070:	d009      	beq.n	8006086 <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006072:	4641      	mov	r1, r8
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	4211      	tst	r1, r2
 8006078:	d159      	bne.n	800612e <UART_CheckIdleState+0x116>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607a:	2280      	movs	r2, #128	@ 0x80
 800607c:	69d9      	ldr	r1, [r3, #28]
 800607e:	0112      	lsls	r2, r2, #4
 8006080:	4211      	tst	r1, r2
 8006082:	d000      	beq.n	8006086 <UART_CheckIdleState+0x6e>
 8006084:	e085      	b.n	8006192 <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	0292      	lsls	r2, r2, #10
 800608a:	d4d3      	bmi.n	8006034 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608c:	f7fb ff96 	bl	8001fbc <HAL_GetTick>
 8006090:	1b40      	subs	r0, r0, r5
 8006092:	42b0      	cmp	r0, r6
 8006094:	d3e9      	bcc.n	800606a <UART_CheckIdleState+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006096:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609a:	2301      	movs	r3, #1
 800609c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060a0:	2080      	movs	r0, #128	@ 0x80
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	6813      	ldr	r3, [r2, #0]
 80060a6:	4383      	bics	r3, r0
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80060ae:	2388      	movs	r3, #136	@ 0x88
 80060b0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80060b2:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80060b4:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80060b6:	e7c9      	b.n	800604c <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	025b      	lsls	r3, r3, #9
 80060bc:	d4bd      	bmi.n	800603a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060be:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060c0:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060c2:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060c4:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c6:	04b6      	lsls	r6, r6, #18
 80060c8:	e011      	b.n	80060ee <UART_CheckIdleState+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4217      	tst	r7, r2
 80060d0:	d00a      	beq.n	80060e8 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060d2:	4641      	mov	r1, r8
 80060d4:	69da      	ldr	r2, [r3, #28]
 80060d6:	4211      	tst	r1, r2
 80060d8:	d000      	beq.n	80060dc <UART_CheckIdleState+0xc4>
 80060da:	e08b      	b.n	80061f4 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060dc:	2280      	movs	r2, #128	@ 0x80
 80060de:	69d9      	ldr	r1, [r3, #28]
 80060e0:	0112      	lsls	r2, r2, #4
 80060e2:	4211      	tst	r1, r2
 80060e4:	d000      	beq.n	80060e8 <UART_CheckIdleState+0xd0>
 80060e6:	e0b7      	b.n	8006258 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	025b      	lsls	r3, r3, #9
 80060ec:	d4a5      	bmi.n	800603a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ee:	f7fb ff65 	bl	8001fbc <HAL_GetTick>
 80060f2:	1b40      	subs	r0, r0, r5
 80060f4:	42b0      	cmp	r0, r6
 80060f6:	d3e8      	bcc.n	80060ca <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fc:	2201      	movs	r2, #1
 80060fe:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006102:	6821      	ldr	r1, [r4, #0]
 8006104:	4d6d      	ldr	r5, [pc, #436]	@ (80062bc <UART_CheckIdleState+0x2a4>)
 8006106:	680b      	ldr	r3, [r1, #0]
 8006108:	402b      	ands	r3, r5
 800610a:	600b      	str	r3, [r1, #0]
 800610c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006110:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006114:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006118:	6821      	ldr	r1, [r4, #0]
 800611a:	688b      	ldr	r3, [r1, #8]
 800611c:	4393      	bics	r3, r2
 800611e:	608b      	str	r3, [r1, #8]
 8006120:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8006124:	238c      	movs	r3, #140	@ 0x8c
 8006126:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8006128:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800612a:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800612c:	e78e      	b.n	800604c <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800612e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006130:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006134:	2201      	movs	r2, #1
 8006136:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800613a:	6821      	ldr	r1, [r4, #0]
 800613c:	4d5f      	ldr	r5, [pc, #380]	@ (80062bc <UART_CheckIdleState+0x2a4>)
 800613e:	680b      	ldr	r3, [r1, #0]
 8006140:	402b      	ands	r3, r5
 8006142:	600b      	str	r3, [r1, #0]
 8006144:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006148:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006150:	6822      	ldr	r2, [r4, #0]
 8006152:	485b      	ldr	r0, [pc, #364]	@ (80062c0 <UART_CheckIdleState+0x2a8>)
 8006154:	6893      	ldr	r3, [r2, #8]
 8006156:	4003      	ands	r3, r0
 8006158:	6093      	str	r3, [r2, #8]
 800615a:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10a      	bne.n	800617a <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006164:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006168:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616c:	2010      	movs	r0, #16
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	6813      	ldr	r3, [r2, #0]
 8006172:	4383      	bics	r3, r0
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800617a:	238c      	movs	r3, #140	@ 0x8c
 800617c:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800617e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006180:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006182:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006184:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8006188:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800618a:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 800618c:	3a0c      	subs	r2, #12
 800618e:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8006190:	e781      	b.n	8006096 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006192:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006194:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006198:	2201      	movs	r2, #1
 800619a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	4d46      	ldr	r5, [pc, #280]	@ (80062bc <UART_CheckIdleState+0x2a4>)
 80061a2:	680b      	ldr	r3, [r1, #0]
 80061a4:	402b      	ands	r3, r5
 80061a6:	600b      	str	r3, [r1, #0]
 80061a8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	4842      	ldr	r0, [pc, #264]	@ (80062c0 <UART_CheckIdleState+0x2a8>)
 80061b8:	6893      	ldr	r3, [r2, #8]
 80061ba:	4003      	ands	r3, r0
 80061bc:	6093      	str	r3, [r2, #8]
 80061be:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d10a      	bne.n	80061de <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061cc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d0:	2010      	movs	r0, #16
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	6813      	ldr	r3, [r2, #0]
 80061d6:	4383      	bics	r3, r0
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80061de:	2220      	movs	r2, #32
 80061e0:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061e2:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 80061e4:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e6:	2300      	movs	r3, #0
 80061e8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80061ea:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ec:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80061ee:	3264      	adds	r2, #100	@ 0x64
 80061f0:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80061f2:	e750      	b.n	8006096 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061f4:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fa:	2201      	movs	r2, #1
 80061fc:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006200:	6821      	ldr	r1, [r4, #0]
 8006202:	4d2e      	ldr	r5, [pc, #184]	@ (80062bc <UART_CheckIdleState+0x2a4>)
 8006204:	680b      	ldr	r3, [r1, #0]
 8006206:	402b      	ands	r3, r5
 8006208:	600b      	str	r3, [r1, #0]
 800620a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006212:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	4829      	ldr	r0, [pc, #164]	@ (80062c0 <UART_CheckIdleState+0x2a8>)
 800621a:	6893      	ldr	r3, [r2, #8]
 800621c:	4003      	ands	r3, r0
 800621e:	6093      	str	r3, [r2, #8]
 8006220:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006224:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10a      	bne.n	8006240 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006232:	2010      	movs	r0, #16
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	4383      	bics	r3, r0
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8006240:	238c      	movs	r3, #140	@ 0x8c
 8006242:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006244:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006246:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006248:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800624a:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800624e:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006250:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8006252:	3a0c      	subs	r2, #12
 8006254:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8006256:	e74f      	b.n	80060f8 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006258:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800625e:	2201      	movs	r2, #1
 8006260:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006264:	6821      	ldr	r1, [r4, #0]
 8006266:	4d15      	ldr	r5, [pc, #84]	@ (80062bc <UART_CheckIdleState+0x2a4>)
 8006268:	680b      	ldr	r3, [r1, #0]
 800626a:	402b      	ands	r3, r5
 800626c:	600b      	str	r3, [r1, #0]
 800626e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006272:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006276:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	4810      	ldr	r0, [pc, #64]	@ (80062c0 <UART_CheckIdleState+0x2a8>)
 800627e:	6893      	ldr	r3, [r2, #8]
 8006280:	4003      	ands	r3, r0
 8006282:	6093      	str	r3, [r2, #8]
 8006284:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006288:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d10a      	bne.n	80062a4 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006292:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006296:	2010      	movs	r0, #16
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	4383      	bics	r3, r0
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80062a4:	2220      	movs	r2, #32
 80062a6:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062a8:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ac:	2300      	movs	r3, #0
 80062ae:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80062b0:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062b2:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80062b4:	3264      	adds	r2, #100	@ 0x64
 80062b6:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80062b8:	e71e      	b.n	80060f8 <UART_CheckIdleState+0xe0>
 80062ba:	46c0      	nop			@ (mov r8, r8)
 80062bc:	fffffedf 	.word	0xfffffedf
 80062c0:	effffffe 	.word	0xeffffffe

080062c4 <HAL_UART_Init>:
{
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80062c8:	d03e      	beq.n	8006348 <HAL_UART_Init+0x84>
  if (huart->gState == HAL_UART_STATE_RESET)
 80062ca:	2388      	movs	r3, #136	@ 0x88
 80062cc:	58c3      	ldr	r3, [r0, r3]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d03c      	beq.n	800634c <HAL_UART_Init+0x88>
  huart->gState = HAL_UART_STATE_BUSY;
 80062d2:	2388      	movs	r3, #136	@ 0x88
 80062d4:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80062d6:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80062d8:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	3a23      	subs	r2, #35	@ 0x23
 80062de:	4393      	bics	r3, r2
 80062e0:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d000      	beq.n	80062ea <HAL_UART_Init+0x26>
 80062e8:	e09b      	b.n	8006422 <HAL_UART_Init+0x15e>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062ea:	6921      	ldr	r1, [r4, #16]
 80062ec:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062ee:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6961      	ldr	r1, [r4, #20]
 80062f4:	69e0      	ldr	r0, [r4, #28]
 80062f6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f8:	499f      	ldr	r1, [pc, #636]	@ (8006578 <HAL_UART_Init+0x2b4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062fa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062fc:	400a      	ands	r2, r1
 80062fe:	4313      	orrs	r3, r2
 8006300:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006302:	686b      	ldr	r3, [r5, #4]
 8006304:	4a9d      	ldr	r2, [pc, #628]	@ (800657c <HAL_UART_Init+0x2b8>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006306:	499e      	ldr	r1, [pc, #632]	@ (8006580 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006308:	4013      	ands	r3, r2
 800630a:	68e2      	ldr	r2, [r4, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006310:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006312:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006314:	428d      	cmp	r5, r1
 8006316:	d100      	bne.n	800631a <HAL_UART_Init+0x56>
 8006318:	e091      	b.n	800643e <HAL_UART_Init+0x17a>
    tmpreg |= huart->Init.OneBitSampling;
 800631a:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800631c:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800631e:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006320:	4e98      	ldr	r6, [pc, #608]	@ (8006584 <HAL_UART_Init+0x2c0>)
 8006322:	4031      	ands	r1, r6
 8006324:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006326:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006328:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800632a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800632c:	438b      	bics	r3, r1
 800632e:	4313      	orrs	r3, r2
 8006330:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006332:	4b95      	ldr	r3, [pc, #596]	@ (8006588 <HAL_UART_Init+0x2c4>)
 8006334:	429d      	cmp	r5, r3
 8006336:	d036      	beq.n	80063a6 <HAL_UART_Init+0xe2>
 8006338:	4b94      	ldr	r3, [pc, #592]	@ (800658c <HAL_UART_Init+0x2c8>)
 800633a:	429d      	cmp	r5, r3
 800633c:	d03f      	beq.n	80063be <HAL_UART_Init+0xfa>
  huart->NbRxDataToProcess = 1;
 800633e:	4b94      	ldr	r3, [pc, #592]	@ (8006590 <HAL_UART_Init+0x2cc>)
 8006340:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8006346:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 8006348:	2001      	movs	r0, #1
}
 800634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800634c:	2284      	movs	r2, #132	@ 0x84
 800634e:	5483      	strb	r3, [r0, r2]
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006350:	4b90      	ldr	r3, [pc, #576]	@ (8006594 <HAL_UART_Init+0x2d0>)
 8006352:	3210      	adds	r2, #16
 8006354:	5083      	str	r3, [r0, r2]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006356:	4b90      	ldr	r3, [pc, #576]	@ (8006598 <HAL_UART_Init+0x2d4>)
 8006358:	3204      	adds	r2, #4
 800635a:	5083      	str	r3, [r0, r2]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800635c:	4b8f      	ldr	r3, [pc, #572]	@ (800659c <HAL_UART_Init+0x2d8>)
 800635e:	3204      	adds	r2, #4
 8006360:	5083      	str	r3, [r0, r2]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006362:	4b8f      	ldr	r3, [pc, #572]	@ (80065a0 <HAL_UART_Init+0x2dc>)
 8006364:	3204      	adds	r2, #4
 8006366:	5083      	str	r3, [r0, r2]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006368:	4b8e      	ldr	r3, [pc, #568]	@ (80065a4 <HAL_UART_Init+0x2e0>)
 800636a:	3204      	adds	r2, #4
 800636c:	5083      	str	r3, [r0, r2]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800636e:	4b8e      	ldr	r3, [pc, #568]	@ (80065a8 <HAL_UART_Init+0x2e4>)
 8006370:	3204      	adds	r2, #4
 8006372:	5083      	str	r3, [r0, r2]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006374:	4b8d      	ldr	r3, [pc, #564]	@ (80065ac <HAL_UART_Init+0x2e8>)
 8006376:	3204      	adds	r2, #4
 8006378:	5083      	str	r3, [r0, r2]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800637a:	4b8d      	ldr	r3, [pc, #564]	@ (80065b0 <HAL_UART_Init+0x2ec>)
 800637c:	3204      	adds	r2, #4
 800637e:	5083      	str	r3, [r0, r2]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006380:	4b8c      	ldr	r3, [pc, #560]	@ (80065b4 <HAL_UART_Init+0x2f0>)
 8006382:	3204      	adds	r2, #4
 8006384:	5083      	str	r3, [r0, r2]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8006386:	4b8c      	ldr	r3, [pc, #560]	@ (80065b8 <HAL_UART_Init+0x2f4>)
 8006388:	3204      	adds	r2, #4
 800638a:	5083      	str	r3, [r0, r2]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800638c:	4b8b      	ldr	r3, [pc, #556]	@ (80065bc <HAL_UART_Init+0x2f8>)
 800638e:	3204      	adds	r2, #4
 8006390:	5083      	str	r3, [r0, r2]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006392:	4b8b      	ldr	r3, [pc, #556]	@ (80065c0 <HAL_UART_Init+0x2fc>)
 8006394:	3204      	adds	r2, #4
 8006396:	5083      	str	r3, [r0, r2]
    if (huart->MspInitCallback == NULL)
 8006398:	3204      	adds	r2, #4
 800639a:	5883      	ldr	r3, [r0, r2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d04b      	beq.n	8006438 <HAL_UART_Init+0x174>
    huart->MspInitCallback(huart);
 80063a0:	0020      	movs	r0, r4
 80063a2:	4798      	blx	r3
 80063a4:	e795      	b.n	80062d2 <HAL_UART_Init+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063a6:	4b87      	ldr	r3, [pc, #540]	@ (80065c4 <HAL_UART_Init+0x300>)
 80063a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063aa:	2303      	movs	r3, #3
 80063ac:	400b      	ands	r3, r1
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d03b      	beq.n	800642a <HAL_UART_Init+0x166>
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d100      	bne.n	80063b8 <HAL_UART_Init+0xf4>
 80063b6:	e0a2      	b.n	80064fe <HAL_UART_Init+0x23a>
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d100      	bne.n	80063be <HAL_UART_Init+0xfa>
 80063bc:	e0a5      	b.n	800650a <HAL_UART_Init+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063be:	2380      	movs	r3, #128	@ 0x80
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	4298      	cmp	r0, r3
 80063c4:	d100      	bne.n	80063c8 <HAL_UART_Init+0x104>
 80063c6:	e0d2      	b.n	800656e <HAL_UART_Init+0x2aa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c8:	f7fd fcb4 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d100      	bne.n	80063d2 <HAL_UART_Init+0x10e>
 80063d0:	e08f      	b.n	80064f2 <HAL_UART_Init+0x22e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80063d4:	4b7c      	ldr	r3, [pc, #496]	@ (80065c8 <HAL_UART_Init+0x304>)
 80063d6:	0052      	lsls	r2, r2, #1
 80063d8:	5ad1      	ldrh	r1, [r2, r3]
 80063da:	f7f9 fe93 	bl	8000104 <__udivsi3>
 80063de:	6865      	ldr	r5, [r4, #4]
 80063e0:	086b      	lsrs	r3, r5, #1
 80063e2:	18c0      	adds	r0, r0, r3
 80063e4:	0029      	movs	r1, r5
 80063e6:	f7f9 fe8d 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ea:	0002      	movs	r2, r0
 80063ec:	4b77      	ldr	r3, [pc, #476]	@ (80065cc <HAL_UART_Init+0x308>)
 80063ee:	3a10      	subs	r2, #16
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d8a4      	bhi.n	800633e <HAL_UART_Init+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80063f8:	4a65      	ldr	r2, [pc, #404]	@ (8006590 <HAL_UART_Init+0x2cc>)
 80063fa:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80063fc:	2200      	movs	r2, #0
 80063fe:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8006400:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	4972      	ldr	r1, [pc, #456]	@ (80065d0 <HAL_UART_Init+0x30c>)
  return (UART_CheckIdleState(huart));
 8006406:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006408:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640a:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	438a      	bics	r2, r1
 8006412:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	3929      	subs	r1, #41	@ 0x29
 8006418:	430a      	orrs	r2, r1
 800641a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800641c:	f7ff fdfc 	bl	8006018 <UART_CheckIdleState>
 8006420:	e793      	b.n	800634a <HAL_UART_Init+0x86>
    UART_AdvFeatureConfig(huart);
 8006422:	0020      	movs	r0, r4
 8006424:	f7ff fd90 	bl	8005f48 <UART_AdvFeatureConfig>
 8006428:	e75f      	b.n	80062ea <HAL_UART_Init+0x26>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642a:	2380      	movs	r3, #128	@ 0x80
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	4298      	cmp	r0, r3
 8006430:	d100      	bne.n	8006434 <HAL_UART_Init+0x170>
 8006432:	e096      	b.n	8006562 <HAL_UART_Init+0x29e>
        pclk = (uint32_t) HSI_VALUE;
 8006434:	4867      	ldr	r0, [pc, #412]	@ (80065d4 <HAL_UART_Init+0x310>)
 8006436:	e7cd      	b.n	80063d4 <HAL_UART_Init+0x110>
      huart->MspInitCallback = HAL_UART_MspInit;
 8006438:	4b67      	ldr	r3, [pc, #412]	@ (80065d8 <HAL_UART_Init+0x314>)
 800643a:	5083      	str	r3, [r0, r2]
 800643c:	e7b0      	b.n	80063a0 <HAL_UART_Init+0xdc>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800643e:	68a9      	ldr	r1, [r5, #8]
 8006440:	4850      	ldr	r0, [pc, #320]	@ (8006584 <HAL_UART_Init+0x2c0>)
 8006442:	4001      	ands	r1, r0
 8006444:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006446:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006448:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800644a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800644c:	2080      	movs	r0, #128	@ 0x80
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800644e:	438b      	bics	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006450:	21c0      	movs	r1, #192	@ 0xc0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006452:	4313      	orrs	r3, r2
 8006454:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006456:	4b5b      	ldr	r3, [pc, #364]	@ (80065c4 <HAL_UART_Init+0x300>)
 8006458:	0109      	lsls	r1, r1, #4
 800645a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645c:	0100      	lsls	r0, r0, #4
 800645e:	400b      	ands	r3, r1
 8006460:	4283      	cmp	r3, r0
 8006462:	d100      	bne.n	8006466 <HAL_UART_Init+0x1a2>
 8006464:	e086      	b.n	8006574 <HAL_UART_Init+0x2b0>
 8006466:	d80d      	bhi.n	8006484 <HAL_UART_Init+0x1c0>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d07c      	beq.n	8006566 <HAL_UART_Init+0x2a2>
 800646c:	2280      	movs	r2, #128	@ 0x80
 800646e:	00d2      	lsls	r2, r2, #3
 8006470:	4293      	cmp	r3, r2
 8006472:	d000      	beq.n	8006476 <HAL_UART_Init+0x1b2>
 8006474:	e763      	b.n	800633e <HAL_UART_Init+0x7a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fd fb47 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 800647a:	0005      	movs	r5, r0
    if (pclk != 0U)
 800647c:	2d00      	cmp	r5, #0
 800647e:	d06a      	beq.n	8006556 <HAL_UART_Init+0x292>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006480:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006482:	e004      	b.n	800648e <HAL_UART_Init+0x1ca>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006484:	428b      	cmp	r3, r1
 8006486:	d000      	beq.n	800648a <HAL_UART_Init+0x1c6>
 8006488:	e759      	b.n	800633e <HAL_UART_Init+0x7a>
        pclk = (uint32_t) LSE_VALUE;
 800648a:	2580      	movs	r5, #128	@ 0x80
 800648c:	022d      	lsls	r5, r5, #8
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800648e:	4b4e      	ldr	r3, [pc, #312]	@ (80065c8 <HAL_UART_Init+0x304>)
 8006490:	0052      	lsls	r2, r2, #1
 8006492:	5ad6      	ldrh	r6, [r2, r3]
 8006494:	0028      	movs	r0, r5
 8006496:	0031      	movs	r1, r6
 8006498:	f7f9 fe34 	bl	8000104 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800649c:	6867      	ldr	r7, [r4, #4]
 800649e:	007b      	lsls	r3, r7, #1
 80064a0:	19db      	adds	r3, r3, r7
 80064a2:	4298      	cmp	r0, r3
 80064a4:	d200      	bcs.n	80064a8 <HAL_UART_Init+0x1e4>
 80064a6:	e74a      	b.n	800633e <HAL_UART_Init+0x7a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064a8:	033b      	lsls	r3, r7, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064aa:	4298      	cmp	r0, r3
 80064ac:	d900      	bls.n	80064b0 <HAL_UART_Init+0x1ec>
 80064ae:	e746      	b.n	800633e <HAL_UART_Init+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064b0:	0032      	movs	r2, r6
 80064b2:	2300      	movs	r3, #0
 80064b4:	0028      	movs	r0, r5
 80064b6:	2100      	movs	r1, #0
 80064b8:	f7f9 feb0 	bl	800021c <__aeabi_uldivmod>
 80064bc:	2600      	movs	r6, #0
 80064be:	0e05      	lsrs	r5, r0, #24
 80064c0:	020b      	lsls	r3, r1, #8
 80064c2:	432b      	orrs	r3, r5
 80064c4:	0202      	lsls	r2, r0, #8
 80064c6:	087d      	lsrs	r5, r7, #1
 80064c8:	1952      	adds	r2, r2, r5
 80064ca:	4173      	adcs	r3, r6
 80064cc:	0010      	movs	r0, r2
 80064ce:	0019      	movs	r1, r3
 80064d0:	003a      	movs	r2, r7
 80064d2:	2300      	movs	r3, #0
 80064d4:	f7f9 fea2 	bl	800021c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064d8:	4b40      	ldr	r3, [pc, #256]	@ (80065dc <HAL_UART_Init+0x318>)
 80064da:	18c2      	adds	r2, r0, r3
 80064dc:	4b40      	ldr	r3, [pc, #256]	@ (80065e0 <HAL_UART_Init+0x31c>)
 80064de:	429a      	cmp	r2, r3
 80064e0:	d900      	bls.n	80064e4 <HAL_UART_Init+0x220>
 80064e2:	e72c      	b.n	800633e <HAL_UART_Init+0x7a>
          huart->Instance->BRR = usartdiv;
 80064e4:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80064e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006590 <HAL_UART_Init+0x2cc>)
          huart->Instance->BRR = usartdiv;
 80064e8:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80064ea:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80064ec:	6766      	str	r6, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80064ee:	67a6      	str	r6, [r4, #120]	@ 0x78
  return ret;
 80064f0:	e787      	b.n	8006402 <HAL_UART_Init+0x13e>
  huart->NbRxDataToProcess = 1;
 80064f2:	4b27      	ldr	r3, [pc, #156]	@ (8006590 <HAL_UART_Init+0x2cc>)
  huart->RxISR = NULL;
 80064f4:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80064f6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80064f8:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	e781      	b.n	8006402 <HAL_UART_Init+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064fe:	2380      	movs	r3, #128	@ 0x80
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	4298      	cmp	r0, r3
 8006504:	d00a      	beq.n	800651c <HAL_UART_Init+0x258>
        pclk = (uint32_t) LSE_VALUE;
 8006506:	0018      	movs	r0, r3
 8006508:	e764      	b.n	80063d4 <HAL_UART_Init+0x110>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800650a:	2380      	movs	r3, #128	@ 0x80
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	4298      	cmp	r0, r3
 8006510:	d11e      	bne.n	8006550 <HAL_UART_Init+0x28c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006512:	f7fd faf9 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006516:	2800      	cmp	r0, #0
 8006518:	d0eb      	beq.n	80064f2 <HAL_UART_Init+0x22e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800651c:	4b2a      	ldr	r3, [pc, #168]	@ (80065c8 <HAL_UART_Init+0x304>)
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	5ad1      	ldrh	r1, [r2, r3]
 8006522:	f7f9 fdef 	bl	8000104 <__udivsi3>
 8006526:	6865      	ldr	r5, [r4, #4]
 8006528:	0040      	lsls	r0, r0, #1
 800652a:	086b      	lsrs	r3, r5, #1
 800652c:	18c0      	adds	r0, r0, r3
 800652e:	0029      	movs	r1, r5
 8006530:	f7f9 fde8 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006534:	0002      	movs	r2, r0
 8006536:	4b25      	ldr	r3, [pc, #148]	@ (80065cc <HAL_UART_Init+0x308>)
 8006538:	3a10      	subs	r2, #16
 800653a:	429a      	cmp	r2, r3
 800653c:	d900      	bls.n	8006540 <HAL_UART_Init+0x27c>
 800653e:	e6fe      	b.n	800633e <HAL_UART_Init+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006540:	4a28      	ldr	r2, [pc, #160]	@ (80065e4 <HAL_UART_Init+0x320>)
        huart->Instance->BRR = brrtemp;
 8006542:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006544:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006546:	0700      	lsls	r0, r0, #28
 8006548:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800654a:	4302      	orrs	r2, r0
 800654c:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 800654e:	e753      	b.n	80063f8 <HAL_UART_Init+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8006550:	f7fd fada 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
        break;
 8006554:	e73a      	b.n	80063cc <HAL_UART_Init+0x108>
  huart->NbRxDataToProcess = 1;
 8006556:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <HAL_UART_Init+0x2cc>)
  huart->RxISR = NULL;
 8006558:	6765      	str	r5, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800655a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800655c:	67a5      	str	r5, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	e74f      	b.n	8006402 <HAL_UART_Init+0x13e>
        pclk = (uint32_t) HSI_VALUE;
 8006562:	481c      	ldr	r0, [pc, #112]	@ (80065d4 <HAL_UART_Init+0x310>)
 8006564:	e7da      	b.n	800651c <HAL_UART_Init+0x258>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006566:	f7fd fbe5 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 800656a:	0005      	movs	r5, r0
        break;
 800656c:	e786      	b.n	800647c <HAL_UART_Init+0x1b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800656e:	f7fd fbe1 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
        break;
 8006572:	e7d0      	b.n	8006516 <HAL_UART_Init+0x252>
        pclk = (uint32_t) HSI_VALUE;
 8006574:	4d17      	ldr	r5, [pc, #92]	@ (80065d4 <HAL_UART_Init+0x310>)
 8006576:	e78a      	b.n	800648e <HAL_UART_Init+0x1ca>
 8006578:	cfff69f3 	.word	0xcfff69f3
 800657c:	ffffcfff 	.word	0xffffcfff
 8006580:	40008000 	.word	0x40008000
 8006584:	11fff4ff 	.word	0x11fff4ff
 8006588:	40013800 	.word	0x40013800
 800658c:	40004400 	.word	0x40004400
 8006590:	00010001 	.word	0x00010001
 8006594:	080058e5 	.word	0x080058e5
 8006598:	080058e1 	.word	0x080058e1
 800659c:	080058ed 	.word	0x080058ed
 80065a0:	080058e9 	.word	0x080058e9
 80065a4:	080058f1 	.word	0x080058f1
 80065a8:	080058f5 	.word	0x080058f5
 80065ac:	080058f9 	.word	0x080058f9
 80065b0:	080058dd 	.word	0x080058dd
 80065b4:	080065e9 	.word	0x080065e9
 80065b8:	080065ed 	.word	0x080065ed
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	080057fd 	.word	0x080057fd
 80065c4:	40021000 	.word	0x40021000
 80065c8:	080071b0 	.word	0x080071b0
 80065cc:	0000ffef 	.word	0x0000ffef
 80065d0:	ffffb7ff 	.word	0xffffb7ff
 80065d4:	00f42400 	.word	0x00f42400
 80065d8:	08001a21 	.word	0x08001a21
 80065dc:	fffffd00 	.word	0xfffffd00
 80065e0:	000ffcff 	.word	0x000ffcff
 80065e4:	0000fff0 	.word	0x0000fff0

080065e8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065e8:	4770      	bx	lr
 80065ea:	46c0      	nop			@ (mov r8, r8)

080065ec <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 80065ec:	4770      	bx	lr
 80065ee:	46c0      	nop			@ (mov r8, r8)

080065f0 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 80065f0:	4770      	bx	lr
 80065f2:	46c0      	nop			@ (mov r8, r8)

080065f4 <memset>:
 80065f4:	0003      	movs	r3, r0
 80065f6:	1882      	adds	r2, r0, r2
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	7019      	strb	r1, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	2600      	movs	r6, #0
 8006608:	4c0c      	ldr	r4, [pc, #48]	@ (800663c <__libc_init_array+0x38>)
 800660a:	4d0d      	ldr	r5, [pc, #52]	@ (8006640 <__libc_init_array+0x3c>)
 800660c:	1b64      	subs	r4, r4, r5
 800660e:	10a4      	asrs	r4, r4, #2
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	2600      	movs	r6, #0
 8006616:	f000 f823 	bl	8006660 <_init>
 800661a:	4c0a      	ldr	r4, [pc, #40]	@ (8006644 <__libc_init_array+0x40>)
 800661c:	4d0a      	ldr	r5, [pc, #40]	@ (8006648 <__libc_init_array+0x44>)
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	00b3      	lsls	r3, r6, #2
 800662a:	58eb      	ldr	r3, [r5, r3]
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	00b3      	lsls	r3, r6, #2
 8006634:	58eb      	ldr	r3, [r5, r3]
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	080071d0 	.word	0x080071d0
 8006640:	080071d0 	.word	0x080071d0
 8006644:	080071d4 	.word	0x080071d4
 8006648:	080071d0 	.word	0x080071d0

0800664c <memcpy>:
 800664c:	2300      	movs	r3, #0
 800664e:	b510      	push	{r4, lr}
 8006650:	429a      	cmp	r2, r3
 8006652:	d100      	bne.n	8006656 <memcpy+0xa>
 8006654:	bd10      	pop	{r4, pc}
 8006656:	5ccc      	ldrb	r4, [r1, r3]
 8006658:	54c4      	strb	r4, [r0, r3]
 800665a:	3301      	adds	r3, #1
 800665c:	e7f8      	b.n	8006650 <memcpy+0x4>
	...

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
