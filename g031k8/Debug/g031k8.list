
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab0  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  08008b70  08008b70  00009b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009410  08009410  0000b474  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009410  08009410  0000a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009418  08009418  0000b474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009418  08009418  0000a418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800941c  0800941c  0000a41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000474  20000000  08009420  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000008d4  20000478  08009894  0000b478  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d4c  08009894  0000bd4c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b474  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a10b  00000000  00000000  0000b49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b1c  00000000  00000000  000355a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d7f6  00000000  00000000  0003b0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  000488c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001905  00000000  00000000  00049fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e138  00000000  00000000  0004b8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008ae6  00000000  00000000  00069a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000724fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  00072540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000762e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000478 	.word	0x20000478
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008b44 	.word	0x08008b44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000047c 	.word	0x2000047c
 8000104:	08008b44 	.word	0x08008b44

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			@ (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_llsl>:
 8000248:	4091      	lsls	r1, r2
 800024a:	0003      	movs	r3, r0
 800024c:	4090      	lsls	r0, r2
 800024e:	469c      	mov	ip, r3
 8000250:	3a20      	subs	r2, #32
 8000252:	4093      	lsls	r3, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	4252      	negs	r2, r2
 8000258:	4663      	mov	r3, ip
 800025a:	40d3      	lsrs	r3, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	4770      	bx	lr

08000260 <__aeabi_uldivmod>:
 8000260:	2b00      	cmp	r3, #0
 8000262:	d111      	bne.n	8000288 <__aeabi_uldivmod+0x28>
 8000264:	2a00      	cmp	r2, #0
 8000266:	d10f      	bne.n	8000288 <__aeabi_uldivmod+0x28>
 8000268:	2900      	cmp	r1, #0
 800026a:	d100      	bne.n	800026e <__aeabi_uldivmod+0xe>
 800026c:	2800      	cmp	r0, #0
 800026e:	d002      	beq.n	8000276 <__aeabi_uldivmod+0x16>
 8000270:	2100      	movs	r1, #0
 8000272:	43c9      	mvns	r1, r1
 8000274:	0008      	movs	r0, r1
 8000276:	b407      	push	{r0, r1, r2}
 8000278:	4802      	ldr	r0, [pc, #8]	@ (8000284 <__aeabi_uldivmod+0x24>)
 800027a:	a102      	add	r1, pc, #8	@ (adr r1, 8000284 <__aeabi_uldivmod+0x24>)
 800027c:	1840      	adds	r0, r0, r1
 800027e:	9002      	str	r0, [sp, #8]
 8000280:	bd03      	pop	{r0, r1, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)
 8000284:	ffffffc1 	.word	0xffffffc1
 8000288:	b403      	push	{r0, r1}
 800028a:	4668      	mov	r0, sp
 800028c:	b501      	push	{r0, lr}
 800028e:	9802      	ldr	r0, [sp, #8]
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	9b01      	ldr	r3, [sp, #4]
 8000296:	469e      	mov	lr, r3
 8000298:	b002      	add	sp, #8
 800029a:	bc0c      	pop	{r2, r3}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			@ (mov r8, r8)

080002a0 <__udivmoddi4>:
 80002a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a2:	4657      	mov	r7, sl
 80002a4:	464e      	mov	r6, r9
 80002a6:	4645      	mov	r5, r8
 80002a8:	46de      	mov	lr, fp
 80002aa:	b5e0      	push	{r5, r6, r7, lr}
 80002ac:	0004      	movs	r4, r0
 80002ae:	000d      	movs	r5, r1
 80002b0:	4692      	mov	sl, r2
 80002b2:	4699      	mov	r9, r3
 80002b4:	b083      	sub	sp, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d830      	bhi.n	800031c <__udivmoddi4+0x7c>
 80002ba:	d02d      	beq.n	8000318 <__udivmoddi4+0x78>
 80002bc:	4649      	mov	r1, r9
 80002be:	4650      	mov	r0, sl
 80002c0:	f000 f8ba 	bl	8000438 <__clzdi2>
 80002c4:	0029      	movs	r1, r5
 80002c6:	0006      	movs	r6, r0
 80002c8:	0020      	movs	r0, r4
 80002ca:	f000 f8b5 	bl	8000438 <__clzdi2>
 80002ce:	1a33      	subs	r3, r6, r0
 80002d0:	4698      	mov	r8, r3
 80002d2:	3b20      	subs	r3, #32
 80002d4:	d434      	bmi.n	8000340 <__udivmoddi4+0xa0>
 80002d6:	469b      	mov	fp, r3
 80002d8:	4653      	mov	r3, sl
 80002da:	465a      	mov	r2, fp
 80002dc:	4093      	lsls	r3, r2
 80002de:	4642      	mov	r2, r8
 80002e0:	001f      	movs	r7, r3
 80002e2:	4653      	mov	r3, sl
 80002e4:	4093      	lsls	r3, r2
 80002e6:	001e      	movs	r6, r3
 80002e8:	42af      	cmp	r7, r5
 80002ea:	d83b      	bhi.n	8000364 <__udivmoddi4+0xc4>
 80002ec:	42af      	cmp	r7, r5
 80002ee:	d100      	bne.n	80002f2 <__udivmoddi4+0x52>
 80002f0:	e079      	b.n	80003e6 <__udivmoddi4+0x146>
 80002f2:	465b      	mov	r3, fp
 80002f4:	1ba4      	subs	r4, r4, r6
 80002f6:	41bd      	sbcs	r5, r7
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da00      	bge.n	80002fe <__udivmoddi4+0x5e>
 80002fc:	e076      	b.n	80003ec <__udivmoddi4+0x14c>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2301      	movs	r3, #1
 8000308:	465a      	mov	r2, fp
 800030a:	4093      	lsls	r3, r2
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	2301      	movs	r3, #1
 8000310:	4642      	mov	r2, r8
 8000312:	4093      	lsls	r3, r2
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	e029      	b.n	800036c <__udivmoddi4+0xcc>
 8000318:	4282      	cmp	r2, r0
 800031a:	d9cf      	bls.n	80002bc <__udivmoddi4+0x1c>
 800031c:	2200      	movs	r2, #0
 800031e:	2300      	movs	r3, #0
 8000320:	9200      	str	r2, [sp, #0]
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <__udivmoddi4+0x8e>
 800032a:	601c      	str	r4, [r3, #0]
 800032c:	605d      	str	r5, [r3, #4]
 800032e:	9800      	ldr	r0, [sp, #0]
 8000330:	9901      	ldr	r1, [sp, #4]
 8000332:	b003      	add	sp, #12
 8000334:	bcf0      	pop	{r4, r5, r6, r7}
 8000336:	46bb      	mov	fp, r7
 8000338:	46b2      	mov	sl, r6
 800033a:	46a9      	mov	r9, r5
 800033c:	46a0      	mov	r8, r4
 800033e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000340:	4642      	mov	r2, r8
 8000342:	469b      	mov	fp, r3
 8000344:	2320      	movs	r3, #32
 8000346:	1a9b      	subs	r3, r3, r2
 8000348:	4652      	mov	r2, sl
 800034a:	40da      	lsrs	r2, r3
 800034c:	4641      	mov	r1, r8
 800034e:	0013      	movs	r3, r2
 8000350:	464a      	mov	r2, r9
 8000352:	408a      	lsls	r2, r1
 8000354:	0017      	movs	r7, r2
 8000356:	4642      	mov	r2, r8
 8000358:	431f      	orrs	r7, r3
 800035a:	4653      	mov	r3, sl
 800035c:	4093      	lsls	r3, r2
 800035e:	001e      	movs	r6, r3
 8000360:	42af      	cmp	r7, r5
 8000362:	d9c3      	bls.n	80002ec <__udivmoddi4+0x4c>
 8000364:	2200      	movs	r2, #0
 8000366:	2300      	movs	r3, #0
 8000368:	9200      	str	r2, [sp, #0]
 800036a:	9301      	str	r3, [sp, #4]
 800036c:	4643      	mov	r3, r8
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0d8      	beq.n	8000324 <__udivmoddi4+0x84>
 8000372:	07fb      	lsls	r3, r7, #31
 8000374:	0872      	lsrs	r2, r6, #1
 8000376:	431a      	orrs	r2, r3
 8000378:	4646      	mov	r6, r8
 800037a:	087b      	lsrs	r3, r7, #1
 800037c:	e00e      	b.n	800039c <__udivmoddi4+0xfc>
 800037e:	42ab      	cmp	r3, r5
 8000380:	d101      	bne.n	8000386 <__udivmoddi4+0xe6>
 8000382:	42a2      	cmp	r2, r4
 8000384:	d80c      	bhi.n	80003a0 <__udivmoddi4+0x100>
 8000386:	1aa4      	subs	r4, r4, r2
 8000388:	419d      	sbcs	r5, r3
 800038a:	2001      	movs	r0, #1
 800038c:	1924      	adds	r4, r4, r4
 800038e:	416d      	adcs	r5, r5
 8000390:	2100      	movs	r1, #0
 8000392:	3e01      	subs	r6, #1
 8000394:	1824      	adds	r4, r4, r0
 8000396:	414d      	adcs	r5, r1
 8000398:	2e00      	cmp	r6, #0
 800039a:	d006      	beq.n	80003aa <__udivmoddi4+0x10a>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d9ee      	bls.n	800037e <__udivmoddi4+0xde>
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1924      	adds	r4, r4, r4
 80003a4:	416d      	adcs	r5, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d1f8      	bne.n	800039c <__udivmoddi4+0xfc>
 80003aa:	9800      	ldr	r0, [sp, #0]
 80003ac:	9901      	ldr	r1, [sp, #4]
 80003ae:	465b      	mov	r3, fp
 80003b0:	1900      	adds	r0, r0, r4
 80003b2:	4169      	adcs	r1, r5
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	db24      	blt.n	8000402 <__udivmoddi4+0x162>
 80003b8:	002b      	movs	r3, r5
 80003ba:	465a      	mov	r2, fp
 80003bc:	4644      	mov	r4, r8
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	002a      	movs	r2, r5
 80003c2:	40e2      	lsrs	r2, r4
 80003c4:	001c      	movs	r4, r3
 80003c6:	465b      	mov	r3, fp
 80003c8:	0015      	movs	r5, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	db2a      	blt.n	8000424 <__udivmoddi4+0x184>
 80003ce:	0026      	movs	r6, r4
 80003d0:	409e      	lsls	r6, r3
 80003d2:	0033      	movs	r3, r6
 80003d4:	0026      	movs	r6, r4
 80003d6:	4647      	mov	r7, r8
 80003d8:	40be      	lsls	r6, r7
 80003da:	0032      	movs	r2, r6
 80003dc:	1a80      	subs	r0, r0, r2
 80003de:	4199      	sbcs	r1, r3
 80003e0:	9000      	str	r0, [sp, #0]
 80003e2:	9101      	str	r1, [sp, #4]
 80003e4:	e79e      	b.n	8000324 <__udivmoddi4+0x84>
 80003e6:	42a3      	cmp	r3, r4
 80003e8:	d8bc      	bhi.n	8000364 <__udivmoddi4+0xc4>
 80003ea:	e782      	b.n	80002f2 <__udivmoddi4+0x52>
 80003ec:	4642      	mov	r2, r8
 80003ee:	2320      	movs	r3, #32
 80003f0:	2100      	movs	r1, #0
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	2200      	movs	r2, #0
 80003f6:	9100      	str	r1, [sp, #0]
 80003f8:	9201      	str	r2, [sp, #4]
 80003fa:	2201      	movs	r2, #1
 80003fc:	40da      	lsrs	r2, r3
 80003fe:	9201      	str	r2, [sp, #4]
 8000400:	e785      	b.n	800030e <__udivmoddi4+0x6e>
 8000402:	4642      	mov	r2, r8
 8000404:	2320      	movs	r3, #32
 8000406:	1a9b      	subs	r3, r3, r2
 8000408:	002a      	movs	r2, r5
 800040a:	4646      	mov	r6, r8
 800040c:	409a      	lsls	r2, r3
 800040e:	0023      	movs	r3, r4
 8000410:	40f3      	lsrs	r3, r6
 8000412:	4644      	mov	r4, r8
 8000414:	4313      	orrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	dad4      	bge.n	80003ce <__udivmoddi4+0x12e>
 8000424:	4642      	mov	r2, r8
 8000426:	002f      	movs	r7, r5
 8000428:	2320      	movs	r3, #32
 800042a:	0026      	movs	r6, r4
 800042c:	4097      	lsls	r7, r2
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	40de      	lsrs	r6, r3
 8000432:	003b      	movs	r3, r7
 8000434:	4333      	orrs	r3, r6
 8000436:	e7cd      	b.n	80003d4 <__udivmoddi4+0x134>

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	0008      	movs	r0, r1
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	@ (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <Initialise_Preset_Arrays>:
volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800048c:	2300      	movs	r3, #0
uint8_t Initialise_Preset_Arrays(void){
 800048e:	b510      	push	{r4, lr}
 8000490:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <Initialise_Preset_Arrays+0x60>)
 8000492:	4917      	ldr	r1, [pc, #92]	@ (80004f0 <Initialise_Preset_Arrays+0x64>)
 8000494:	4c17      	ldr	r4, [pc, #92]	@ (80004f4 <Initialise_Preset_Arrays+0x68>)
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000496:	2b03      	cmp	r3, #3
 8000498:	d824      	bhi.n	80004e4 <Initialise_Preset_Arrays+0x58>
 800049a:	1e58      	subs	r0, r3, #1
 800049c:	2802      	cmp	r0, #2
 800049e:	d803      	bhi.n	80004a8 <Initialise_Preset_Arrays+0x1c>
 80004a0:	f7ff fe3c 	bl	800011c <__gnu_thumb1_case_uqi>
 80004a4:	120b      	.short	0x120b
 80004a6:	19          	.byte	0x19
 80004a7:	00          	.byte	0x00

		if(i == 0){
			factory_presets_array[i] = &factory_preset_0;
 80004a8:	4813      	ldr	r0, [pc, #76]	@ (80004f8 <Initialise_Preset_Arrays+0x6c>)
 80004aa:	6010      	str	r0, [r2, #0]
			user_presets_array[i] = &user_preset_0;
 80004ac:	4813      	ldr	r0, [pc, #76]	@ (80004fc <Initialise_Preset_Arrays+0x70>)
 80004ae:	6008      	str	r0, [r1, #0]
			storage_user_presets_array[i] = &storage_user_preset_0;
 80004b0:	4813      	ldr	r0, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0x74>)
 80004b2:	6020      	str	r0, [r4, #0]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004b4:	3301      	adds	r3, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	e7ed      	b.n	8000496 <Initialise_Preset_Arrays+0xa>
		}
		else if(i == 1){
			factory_presets_array[i] = &factory_preset_1;
 80004ba:	4812      	ldr	r0, [pc, #72]	@ (8000504 <Initialise_Preset_Arrays+0x78>)
 80004bc:	6050      	str	r0, [r2, #4]
			user_presets_array[i] = &user_preset_1;
 80004be:	4812      	ldr	r0, [pc, #72]	@ (8000508 <Initialise_Preset_Arrays+0x7c>)
 80004c0:	6048      	str	r0, [r1, #4]
			storage_user_presets_array[i] = &storage_user_preset_1;
 80004c2:	4812      	ldr	r0, [pc, #72]	@ (800050c <Initialise_Preset_Arrays+0x80>)
 80004c4:	6060      	str	r0, [r4, #4]
 80004c6:	e7f5      	b.n	80004b4 <Initialise_Preset_Arrays+0x28>
		}
		else if(i == 2){
			factory_presets_array[i] = &factory_preset_2;
 80004c8:	4811      	ldr	r0, [pc, #68]	@ (8000510 <Initialise_Preset_Arrays+0x84>)
 80004ca:	6090      	str	r0, [r2, #8]
			user_presets_array[i] = &user_preset_2;
 80004cc:	4811      	ldr	r0, [pc, #68]	@ (8000514 <Initialise_Preset_Arrays+0x88>)
 80004ce:	6088      	str	r0, [r1, #8]
			storage_user_presets_array[i] = &storage_user_preset_2;
 80004d0:	4811      	ldr	r0, [pc, #68]	@ (8000518 <Initialise_Preset_Arrays+0x8c>)
 80004d2:	60a0      	str	r0, [r4, #8]
 80004d4:	e7ee      	b.n	80004b4 <Initialise_Preset_Arrays+0x28>
		}
		else if(i == 3){
			factory_presets_array[i] = &factory_preset_3;
 80004d6:	4811      	ldr	r0, [pc, #68]	@ (800051c <Initialise_Preset_Arrays+0x90>)
 80004d8:	60d0      	str	r0, [r2, #12]
			user_presets_array[i] = &user_preset_3;
 80004da:	4811      	ldr	r0, [pc, #68]	@ (8000520 <Initialise_Preset_Arrays+0x94>)
 80004dc:	60c8      	str	r0, [r1, #12]
			storage_user_presets_array[i] = &storage_user_preset_3;
 80004de:	4811      	ldr	r0, [pc, #68]	@ (8000524 <Initialise_Preset_Arrays+0x98>)
 80004e0:	60e0      	str	r0, [r4, #12]
 80004e2:	e7e7      	b.n	80004b4 <Initialise_Preset_Arrays+0x28>
 80004e4:	2b10      	cmp	r3, #16
 80004e6:	d1e5      	bne.n	80004b4 <Initialise_Preset_Arrays+0x28>
		}
	}

	return 1;
}
 80004e8:	2001      	movs	r0, #1
 80004ea:	bd10      	pop	{r4, pc}
 80004ec:	200004fc 	.word	0x200004fc
 80004f0:	200004ec 	.word	0x200004ec
 80004f4:	200004b4 	.word	0x200004b4
 80004f8:	08008b8f 	.word	0x08008b8f
 80004fc:	2000000f 	.word	0x2000000f
 8000500:	200004ac 	.word	0x200004ac
 8000504:	08008b8a 	.word	0x08008b8a
 8000508:	2000000a 	.word	0x2000000a
 800050c:	200004a7 	.word	0x200004a7
 8000510:	08008b85 	.word	0x08008b85
 8000514:	20000005 	.word	0x20000005
 8000518:	200004a2 	.word	0x200004a2
 800051c:	08008b80 	.word	0x08008b80
 8000520:	20000000 	.word	0x20000000
 8000524:	2000049d 	.word	0x2000049d

08000528 <Convert_All_Preset_Values>:
}


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 8000528:	7803      	ldrb	r3, [r0, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	700b      	strb	r3, [r1, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 800052e:	7843      	ldrb	r3, [r0, #1]
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	804b      	strh	r3, [r1, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000534:	7883      	ldrb	r3, [r0, #2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	710b      	strb	r3, [r1, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800053a:	78c3      	ldrb	r3, [r0, #3]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	80cb      	strh	r3, [r1, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 8000540:	7903      	ldrb	r3, [r0, #4]

	return 1;
}
 8000542:	2001      	movs	r0, #1
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	810b      	strh	r3, [r1, #8]
}
 8000548:	4770      	bx	lr

0800054a <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 800054a:	7983      	ldrb	r3, [r0, #6]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	700b      	strb	r3, [r1, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 8000550:	8903      	ldrh	r3, [r0, #8]
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	b2db      	uxtb	r3, r3
 8000556:	704b      	strb	r3, [r1, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 8000558:	7a83      	ldrb	r3, [r0, #10]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	708b      	strb	r3, [r1, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 800055e:	8983      	ldrh	r3, [r0, #12]
 8000560:	085b      	lsrs	r3, r3, #1
 8000562:	b2db      	uxtb	r3, r3
 8000564:	70cb      	strb	r3, [r1, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 8000566:	8c43      	ldrh	r3, [r0, #34]	@ 0x22

	return 1;
}
 8000568:	2001      	movs	r0, #1
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	b2db      	uxtb	r3, r3
 800056e:	710b      	strb	r3, [r1, #4]
}
 8000570:	4770      	bx	lr

08000572 <Pack_Preset_Into_Doubleword>:
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit

	return 1;
}

uint8_t Pack_Preset_Into_Doubleword(volatile struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 8000572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000574:	2400      	movs	r4, #0
 8000576:	000d      	movs	r5, r1

	uint64_t packed = 0;
 8000578:	0027      	movs	r7, r4
 800057a:	0026      	movs	r6, r4
uint8_t Pack_Preset_Into_Doubleword(volatile struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 800057c:	9001      	str	r0, [sp, #4]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){

		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 800057e:	9b01      	ldr	r3, [sp, #4]
 8000580:	00e2      	lsls	r2, r4, #3
 8000582:	5d18      	ldrb	r0, [r3, r4]
 8000584:	2100      	movs	r1, #0
 8000586:	f7ff fe5f 	bl	8000248 <__aeabi_llsl>
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 800058a:	3401      	adds	r4, #1
		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 800058c:	4307      	orrs	r7, r0
 800058e:	430e      	orrs	r6, r1
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000590:	2c05      	cmp	r4, #5
 8000592:	d1f4      	bne.n	800057e <Pack_Preset_Into_Doubleword+0xc>
	}

	*Doubleword_ptr = packed;
 8000594:	602f      	str	r7, [r5, #0]
 8000596:	606e      	str	r6, [r5, #4]

	return 1;
}
 8000598:	2001      	movs	r0, #1
 800059a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800059c <Read_and_Interpret_Preset_From_Flash>:

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800059c:	b570      	push	{r4, r5, r6, lr}
	uint8_t *preset = (uint8_t *)preset_ptr;

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work

		if(*(flash + i) > 0x7F){ //127
			*(preset + i) = 0x7F;
 800059e:	247f      	movs	r4, #127	@ 0x7f
uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 80005a0:	2300      	movs	r3, #0
			*(preset + i) = 0x7F;
 80005a2:	1c26      	adds	r6, r4, #0
 80005a4:	5c1d      	ldrb	r5, [r3, r0]
 80005a6:	1c32      	adds	r2, r6, #0
 80005a8:	42ac      	cmp	r4, r5
 80005aa:	d900      	bls.n	80005ae <Read_and_Interpret_Preset_From_Flash+0x12>
 80005ac:	1c2a      	adds	r2, r5, #0
 80005ae:	54ca      	strb	r2, [r1, r3]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 80005b0:	3301      	adds	r3, #1
 80005b2:	2b05      	cmp	r3, #5
 80005b4:	d1f6      	bne.n	80005a4 <Read_and_Interpret_Preset_From_Flash+0x8>
			*(preset + i) = *(flash + i);
		}
	}

	return 1;
}
 80005b6:	2001      	movs	r0, #1
 80005b8:	bd70      	pop	{r4, r5, r6, pc}

080005ba <Pack_Misc_Into_Doubleword>:

uint8_t Pack_Misc_Into_Doubleword(volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint64_t *Doubleword_ptr, uint8_t num_presets){
 80005ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	//This function will break if presets are bigger than 5

	uint64_t packed = 0;

	//USER PRESETS USED ARRAY
	for(uint8_t i = 0; i < num_presets; i++){
 80005bc:	2400      	movs	r4, #0
uint8_t Pack_Misc_Into_Doubleword(volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint64_t *Doubleword_ptr, uint8_t num_presets){
 80005be:	0006      	movs	r6, r0
 80005c0:	b085      	sub	sp, #20
 80005c2:	001f      	movs	r7, r3
 80005c4:	ab0a      	add	r3, sp, #40	@ 0x28
 80005c6:	781d      	ldrb	r5, [r3, #0]
 80005c8:	9102      	str	r1, [sp, #8]
 80005ca:	9203      	str	r2, [sp, #12]
	uint64_t packed = 0;
 80005cc:	9400      	str	r4, [sp, #0]
 80005ce:	9401      	str	r4, [sp, #4]
	for(uint8_t i = 0; i < num_presets; i++){
 80005d0:	b2e3      	uxtb	r3, r4
 80005d2:	429d      	cmp	r5, r3
 80005d4:	d82c      	bhi.n	8000630 <Pack_Misc_Into_Doubleword+0x76>
	}

	//START REQUIRED BEFORE MIDI CLK
	enum Validate start_required_before_midi_clk_status_bit = Get_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);

	uint8_t shift = num_presets << 3; //<< (4 * 8)
 80005d6:	00ec      	lsls	r4, r5, #3
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 80005d8:	b2e4      	uxtb	r4, r4
	enum Validate start_required_before_midi_clk_status_bit = Get_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	9802      	ldr	r0, [sp, #8]
 80005de:	f004 fbca 	bl	8004d76 <Get_Status_Bit>
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 80005e2:	0022      	movs	r2, r4
 80005e4:	2100      	movs	r1, #0
 80005e6:	f7ff fe2f 	bl	8000248 <__aeabi_llsl>
 80005ea:	000d      	movs	r5, r1

	//OMNI ON/OFF (MIDI CHANNEL VOICE MODE)
	enum Validate MIDI_channel_voice_mode_status_bit = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80005ec:	2180      	movs	r1, #128	@ 0x80
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 80005ee:	0006      	movs	r6, r0
	enum Validate MIDI_channel_voice_mode_status_bit = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80005f0:	00c9      	lsls	r1, r1, #3
 80005f2:	9802      	ldr	r0, [sp, #8]
 80005f4:	f004 fbbf 	bl	8004d76 <Get_Status_Bit>

	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)

	//MIDI BASIC CHANNEL
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 80005f8:	0022      	movs	r2, r4
 80005fa:	9b03      	ldr	r3, [sp, #12]
	enum Validate MIDI_channel_voice_mode_status_bit = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80005fc:	9002      	str	r0, [sp, #8]
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 80005fe:	7818      	ldrb	r0, [r3, #0]
 8000600:	3210      	adds	r2, #16
 8000602:	2100      	movs	r1, #0
 8000604:	b2c0      	uxtb	r0, r0
 8000606:	f7ff fe1f 	bl	8000248 <__aeabi_llsl>
	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)
 800060a:	0022      	movs	r2, r4
 800060c:	9b00      	ldr	r3, [sp, #0]
 800060e:	3208      	adds	r2, #8
 8000610:	4318      	orrs	r0, r3
 8000612:	9b01      	ldr	r3, [sp, #4]
 8000614:	4306      	orrs	r6, r0
 8000616:	4319      	orrs	r1, r3
 8000618:	430d      	orrs	r5, r1
 800061a:	9802      	ldr	r0, [sp, #8]
 800061c:	2100      	movs	r1, #0
 800061e:	f7ff fe13 	bl	8000248 <__aeabi_llsl>
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 8000622:	4330      	orrs	r0, r6
 8000624:	6038      	str	r0, [r7, #0]

	*Doubleword_ptr = packed;

	return 1;
}
 8000626:	2001      	movs	r0, #1
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 8000628:	4329      	orrs	r1, r5
 800062a:	6079      	str	r1, [r7, #4]
}
 800062c:	b005      	add	sp, #20
 800062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		packed |= ((uint64_t)user_presets_used_array_ptr[i] << (i << 3)); //<< (i*8)
 8000630:	1933      	adds	r3, r6, r4
 8000632:	7818      	ldrb	r0, [r3, #0]
 8000634:	00e2      	lsls	r2, r4, #3
 8000636:	2100      	movs	r1, #0
 8000638:	b2c0      	uxtb	r0, r0
 800063a:	f7ff fe05 	bl	8000248 <__aeabi_llsl>
 800063e:	9b00      	ldr	r3, [sp, #0]
 8000640:	3401      	adds	r4, #1
 8000642:	4303      	orrs	r3, r0
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	9b01      	ldr	r3, [sp, #4]
 8000648:	430b      	orrs	r3, r1
 800064a:	9301      	str	r3, [sp, #4]
	for(uint8_t i = 0; i < num_presets; i++){
 800064c:	e7c0      	b.n	80005d0 <Pack_Misc_Into_Doubleword+0x16>
	...

08000650 <Store_Single_Preset_In_Flash>:

uint8_t Store_Single_Preset_In_Flash(volatile struct Preset *preset, uint8_t preset_num){
 8000650:	b5f0      	push	{r4, r5, r6, r7, lr}

	//whole page has to be erased, so first store state of all presets (including one to be overwritten for simplicity)
	//as well as miscellaneous data

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &storage_user_preset_0);
 8000652:	4e5f      	ldr	r6, [pc, #380]	@ (80007d0 <Store_Single_Preset_In_Flash+0x180>)
uint8_t Store_Single_Preset_In_Flash(volatile struct Preset *preset, uint8_t preset_num){
 8000654:	b091      	sub	sp, #68	@ 0x44
 8000656:	9003      	str	r0, [sp, #12]
 8000658:	9105      	str	r1, [sp, #20]
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &storage_user_preset_0);
 800065a:	485e      	ldr	r0, [pc, #376]	@ (80007d4 <Store_Single_Preset_In_Flash+0x184>)
 800065c:	0031      	movs	r1, r6
 800065e:	f7ff ff9d 	bl	800059c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &storage_user_preset_1);
 8000662:	4d5d      	ldr	r5, [pc, #372]	@ (80007d8 <Store_Single_Preset_In_Flash+0x188>)
 8000664:	485d      	ldr	r0, [pc, #372]	@ (80007dc <Store_Single_Preset_In_Flash+0x18c>)
 8000666:	0029      	movs	r1, r5
 8000668:	f7ff ff98 	bl	800059c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &storage_user_preset_2);
 800066c:	4b5c      	ldr	r3, [pc, #368]	@ (80007e0 <Store_Single_Preset_In_Flash+0x190>)
 800066e:	485d      	ldr	r0, [pc, #372]	@ (80007e4 <Store_Single_Preset_In_Flash+0x194>)
 8000670:	0019      	movs	r1, r3
 8000672:	9304      	str	r3, [sp, #16]
 8000674:	f7ff ff92 	bl	800059c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &storage_user_preset_3);
 8000678:	4f5b      	ldr	r7, [pc, #364]	@ (80007e8 <Store_Single_Preset_In_Flash+0x198>)
 800067a:	485c      	ldr	r0, [pc, #368]	@ (80007ec <Store_Single_Preset_In_Flash+0x19c>)
 800067c:	0039      	movs	r1, r7
 800067e:	f7ff ff8d 	bl	800059c <Read_and_Interpret_Preset_From_Flash>

	uint64_t preset_packed = 0;
	uint64_t misc_packed = 0;
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	920a      	str	r2, [sp, #40]	@ 0x28
 8000688:	930b      	str	r3, [sp, #44]	@ 0x2c
	uint32_t errors = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	9307      	str	r3, [sp, #28]
	FLASH_EraseInitTypeDef erase_config = {.TypeErase = FLASH_CR_PER, .Banks = FLASH_CR_MER1, .Page = 31, .NbPages = 1};
 800068e:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <Store_Single_Preset_In_Flash+0x1a0>)
 8000690:	aa0c      	add	r2, sp, #48	@ 0x30
 8000692:	cb13      	ldmia	r3!, {r0, r1, r4}
 8000694:	c213      	stmia	r2!, {r0, r1, r4}
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Unlock();
 800069a:	f005 fb19 	bl	8005cd0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase_config, &errors); //all 0xF is no errors
 800069e:	a907      	add	r1, sp, #28
 80006a0:	a80c      	add	r0, sp, #48	@ 0x30
 80006a2:	f005 fbb5 	bl	8005e10 <HAL_FLASHEx_Erase>

	if(preset_num == 0){
 80006a6:	9b05      	ldr	r3, [sp, #20]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d82c      	bhi.n	8000706 <Store_Single_Preset_In_Flash+0xb6>
 80006ac:	0018      	movs	r0, r3
		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
	}
	else if(preset_num == 3){

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 80006ae:	a908      	add	r1, sp, #32
 80006b0:	f7ff fd34 	bl	800011c <__gnu_thumb1_case_uqi>
 80006b4:	684d3c02 	.word	0x684d3c02
		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 80006b8:	9803      	ldr	r0, [sp, #12]
 80006ba:	f7ff ff5a 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 80006be:	9a08      	ldr	r2, [sp, #32]
 80006c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80006c2:	4944      	ldr	r1, [pc, #272]	@ (80007d4 <Store_Single_Preset_In_Flash+0x184>)
 80006c4:	2001      	movs	r0, #1
 80006c6:	f005 fb4d 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 80006ca:	a908      	add	r1, sp, #32
 80006cc:	0028      	movs	r0, r5
 80006ce:	f7ff ff50 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 80006d2:	9a08      	ldr	r2, [sp, #32]
 80006d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80006d6:	4941      	ldr	r1, [pc, #260]	@ (80007dc <Store_Single_Preset_In_Flash+0x18c>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 80006d8:	2001      	movs	r0, #1
 80006da:	f005 fb43 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 80006de:	a908      	add	r1, sp, #32
 80006e0:	9804      	ldr	r0, [sp, #16]
 80006e2:	f7ff ff46 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 80006e6:	9a08      	ldr	r2, [sp, #32]
 80006e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80006ea:	493e      	ldr	r1, [pc, #248]	@ (80007e4 <Store_Single_Preset_In_Flash+0x194>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f005 fb39 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 80006f2:	a908      	add	r1, sp, #32
 80006f4:	0038      	movs	r0, r7
 80006f6:	f7ff ff3c 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 80006fa:	9a08      	ldr	r2, [sp, #32]
 80006fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80006fe:	493b      	ldr	r1, [pc, #236]	@ (80007ec <Store_Single_Preset_In_Flash+0x19c>)

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000700:	2001      	movs	r0, #1
 8000702:	f005 fb2f 	bl	8005d64 <HAL_FLASH_Program>
	}

	Pack_Misc_Into_Doubleword(user_presets_used_array, &statuses, &MIDI_basic_channel, &misc_packed, NUM_PRESETS);
 8000706:	2304      	movs	r3, #4
 8000708:	4a3a      	ldr	r2, [pc, #232]	@ (80007f4 <Store_Single_Preset_In_Flash+0x1a4>)
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	493a      	ldr	r1, [pc, #232]	@ (80007f8 <Store_Single_Preset_In_Flash+0x1a8>)
 800070e:	ab0a      	add	r3, sp, #40	@ 0x28
 8000710:	483a      	ldr	r0, [pc, #232]	@ (80007fc <Store_Single_Preset_In_Flash+0x1ac>)
 8000712:	f7ff ff52 	bl	80005ba <Pack_Misc_Into_Doubleword>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MISC_FLASH_MEMORY_ADDRESS, misc_packed);
 8000716:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800071a:	4939      	ldr	r1, [pc, #228]	@ (8000800 <Store_Single_Preset_In_Flash+0x1b0>)
 800071c:	2001      	movs	r0, #1
 800071e:	f005 fb21 	bl	8005d64 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8000722:	f005 fb53 	bl	8005dcc <HAL_FLASH_Lock>

	return 1;
}
 8000726:	2001      	movs	r0, #1
 8000728:	b011      	add	sp, #68	@ 0x44
 800072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 800072c:	9803      	ldr	r0, [sp, #12]
 800072e:	f7ff ff20 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000732:	9a08      	ldr	r2, [sp, #32]
 8000734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000736:	4929      	ldr	r1, [pc, #164]	@ (80007dc <Store_Single_Preset_In_Flash+0x18c>)
 8000738:	2001      	movs	r0, #1
 800073a:	f005 fb13 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 800073e:	a908      	add	r1, sp, #32
 8000740:	0030      	movs	r0, r6
 8000742:	f7ff ff16 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000746:	9a08      	ldr	r2, [sp, #32]
 8000748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800074a:	4922      	ldr	r1, [pc, #136]	@ (80007d4 <Store_Single_Preset_In_Flash+0x184>)
 800074c:	e7c4      	b.n	80006d8 <Store_Single_Preset_In_Flash+0x88>
		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 800074e:	9803      	ldr	r0, [sp, #12]
 8000750:	f7ff ff0f 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000754:	9a08      	ldr	r2, [sp, #32]
 8000756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000758:	4922      	ldr	r1, [pc, #136]	@ (80007e4 <Store_Single_Preset_In_Flash+0x194>)
 800075a:	2001      	movs	r0, #1
 800075c:	f005 fb02 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000760:	a908      	add	r1, sp, #32
 8000762:	0030      	movs	r0, r6
 8000764:	f7ff ff05 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000768:	9a08      	ldr	r2, [sp, #32]
 800076a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800076c:	4919      	ldr	r1, [pc, #100]	@ (80007d4 <Store_Single_Preset_In_Flash+0x184>)
 800076e:	2001      	movs	r0, #1
 8000770:	f005 faf8 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000774:	a908      	add	r1, sp, #32
 8000776:	0028      	movs	r0, r5
 8000778:	f7ff fefb 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 800077c:	9a08      	ldr	r2, [sp, #32]
 800077e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000780:	4916      	ldr	r1, [pc, #88]	@ (80007dc <Store_Single_Preset_In_Flash+0x18c>)
 8000782:	e7b3      	b.n	80006ec <Store_Single_Preset_In_Flash+0x9c>
		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000784:	9803      	ldr	r0, [sp, #12]
 8000786:	f7ff fef4 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 800078a:	9a08      	ldr	r2, [sp, #32]
 800078c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800078e:	4917      	ldr	r1, [pc, #92]	@ (80007ec <Store_Single_Preset_In_Flash+0x19c>)
 8000790:	2001      	movs	r0, #1
 8000792:	f005 fae7 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000796:	a908      	add	r1, sp, #32
 8000798:	0030      	movs	r0, r6
 800079a:	f7ff feea 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 800079e:	9a08      	ldr	r2, [sp, #32]
 80007a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80007a2:	490c      	ldr	r1, [pc, #48]	@ (80007d4 <Store_Single_Preset_In_Flash+0x184>)
 80007a4:	2001      	movs	r0, #1
 80007a6:	f005 fadd 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 80007aa:	a908      	add	r1, sp, #32
 80007ac:	0028      	movs	r0, r5
 80007ae:	f7ff fee0 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 80007b2:	9a08      	ldr	r2, [sp, #32]
 80007b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80007b6:	4909      	ldr	r1, [pc, #36]	@ (80007dc <Store_Single_Preset_In_Flash+0x18c>)
 80007b8:	2001      	movs	r0, #1
 80007ba:	f005 fad3 	bl	8005d64 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 80007be:	a908      	add	r1, sp, #32
 80007c0:	9804      	ldr	r0, [sp, #16]
 80007c2:	f7ff fed6 	bl	8000572 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 80007c6:	9a08      	ldr	r2, [sp, #32]
 80007c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80007ca:	4906      	ldr	r1, [pc, #24]	@ (80007e4 <Store_Single_Preset_In_Flash+0x194>)
 80007cc:	e798      	b.n	8000700 <Store_Single_Preset_In_Flash+0xb0>
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	200004ac 	.word	0x200004ac
 80007d4:	0800f800 	.word	0x0800f800
 80007d8:	200004a7 	.word	0x200004a7
 80007dc:	0800f808 	.word	0x0800f808
 80007e0:	200004a2 	.word	0x200004a2
 80007e4:	0800f810 	.word	0x0800f810
 80007e8:	2000049d 	.word	0x2000049d
 80007ec:	0800f818 	.word	0x0800f818
 80007f0:	08008b70 	.word	0x08008b70
 80007f4:	20000519 	.word	0x20000519
 80007f8:	20000d28 	.word	0x20000d28
 80007fc:	20000499 	.word	0x20000499
 8000800:	0800f820 	.word	0x0800f820

08000804 <Read_and_Interpret_Misc_From_Flash>:

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val,
										   volatile enum Validate *user_presets_used_array_ptr,
										   volatile uint32_t *statuses_ptr,
										   volatile enum MIDI_Channel *MIDI_basic_channel_ptr,
										   uint8_t num_presets){
 8000804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	ab0a      	add	r3, sp, #40	@ 0x28
 800080c:	781d      	ldrb	r5, [r3, #0]

	uint8_t *address = (uint8_t *)address_val;

	volatile uint8_t interpretted_value = 0;
 800080e:	ab02      	add	r3, sp, #8
 8000810:	1ddc      	adds	r4, r3, #7
 8000812:	2300      	movs	r3, #0
										   uint8_t num_presets){
 8000814:	0016      	movs	r6, r2
 8000816:	194a      	adds	r2, r1, r5
 8000818:	0007      	movs	r7, r0
	volatile uint8_t interpretted_value = 0;
 800081a:	7023      	strb	r3, [r4, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 800081c:	9201      	str	r2, [sp, #4]

		interpretted_value = *(address + i);
 800081e:	1a40      	subs	r0, r0, r1
	for(uint8_t i = 0; i < num_presets; i++){
 8000820:	9b01      	ldr	r3, [sp, #4]
 8000822:	4299      	cmp	r1, r3
 8000824:	d11e      	bne.n	8000864 <Read_and_Interpret_Misc_From_Flash+0x60>
			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000826:	5d7b      	ldrb	r3, [r7, r5]
 8000828:	7023      	strb	r3, [r4, #0]

	if(interpretted_value == (enum Validate)NO){
 800082a:	7823      	ldrb	r3, [r4, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d12a      	bne.n	8000886 <Read_and_Interpret_Misc_From_Flash+0x82>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	0030      	movs	r0, r6
 8000834:	f004 fac5 	bl	8004dc2 <Clear_Status_Bit>
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000838:	197d      	adds	r5, r7, r5
 800083a:	786b      	ldrb	r3, [r5, #1]
 800083c:	7023      	strb	r3, [r4, #0]

	if(interpretted_value == (enum Validate)YES){
 800083e:	7823      	ldrb	r3, [r4, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d12b      	bne.n	800089c <Read_and_Interpret_Misc_From_Flash+0x98>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000844:	2180      	movs	r1, #128	@ 0x80
 8000846:	0030      	movs	r0, r6
 8000848:	00c9      	lsls	r1, r1, #3
 800084a:	f004 faa8 	bl	8004d9e <Set_Status_Bit>
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 800084e:	78ab      	ldrb	r3, [r5, #2]
 8000850:	7023      	strb	r3, [r4, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000852:	7823      	ldrb	r3, [r4, #0]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d92d      	bls.n	80008b4 <Read_and_Interpret_Misc_From_Flash+0xb0>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000858:	2300      	movs	r3, #0

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
	}

	return 1;
}
 800085a:	2001      	movs	r0, #1
		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 800085c:	9a00      	ldr	r2, [sp, #0]
 800085e:	7013      	strb	r3, [r2, #0]
}
 8000860:	b005      	add	sp, #20
 8000862:	bdf0      	pop	{r4, r5, r6, r7, pc}
		interpretted_value = *(address + i);
 8000864:	5c42      	ldrb	r2, [r0, r1]
 8000866:	7022      	strb	r2, [r4, #0]
		if(interpretted_value == (enum Validate)YES){
 8000868:	7822      	ldrb	r2, [r4, #0]
 800086a:	b2d3      	uxtb	r3, r2
 800086c:	2a01      	cmp	r2, #1
 800086e:	d102      	bne.n	8000876 <Read_and_Interpret_Misc_From_Flash+0x72>
			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 8000870:	700b      	strb	r3, [r1, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000872:	3101      	adds	r1, #1
 8000874:	e7d4      	b.n	8000820 <Read_and_Interpret_Misc_From_Flash+0x1c>
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000876:	7822      	ldrb	r2, [r4, #0]
 8000878:	2aff      	cmp	r2, #255	@ 0xff
 800087a:	d002      	beq.n	8000882 <Read_and_Interpret_Misc_From_Flash+0x7e>
 800087c:	7822      	ldrb	r2, [r4, #0]
 800087e:	2a00      	cmp	r2, #0
 8000880:	d1f7      	bne.n	8000872 <Read_and_Interpret_Misc_From_Flash+0x6e>
			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 8000882:	2300      	movs	r3, #0
 8000884:	e7f4      	b.n	8000870 <Read_and_Interpret_Misc_From_Flash+0x6c>
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000886:	7823      	ldrb	r3, [r4, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d002      	beq.n	8000892 <Read_and_Interpret_Misc_From_Flash+0x8e>
 800088c:	7823      	ldrb	r3, [r4, #0]
 800088e:	2bff      	cmp	r3, #255	@ 0xff
 8000890:	d1d2      	bne.n	8000838 <Read_and_Interpret_Misc_From_Flash+0x34>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	0030      	movs	r0, r6
 8000896:	f004 fa82 	bl	8004d9e <Set_Status_Bit>
 800089a:	e7cd      	b.n	8000838 <Read_and_Interpret_Misc_From_Flash+0x34>
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 800089c:	7823      	ldrb	r3, [r4, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <Read_and_Interpret_Misc_From_Flash+0xa4>
 80008a2:	7823      	ldrb	r3, [r4, #0]
 80008a4:	2bff      	cmp	r3, #255	@ 0xff
 80008a6:	d1d2      	bne.n	800084e <Read_and_Interpret_Misc_From_Flash+0x4a>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 80008a8:	2180      	movs	r1, #128	@ 0x80
 80008aa:	0030      	movs	r0, r6
 80008ac:	00c9      	lsls	r1, r1, #3
 80008ae:	f004 fa88 	bl	8004dc2 <Clear_Status_Bit>
 80008b2:	e7cc      	b.n	800084e <Read_and_Interpret_Misc_From_Flash+0x4a>
		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 80008b4:	7823      	ldrb	r3, [r4, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	e7cf      	b.n	800085a <Read_and_Interpret_Misc_From_Flash+0x56>

080008ba <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 80008ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80008bc:	0005      	movs	r5, r0
 80008be:	0017      	movs	r7, r2
 80008c0:	000c      	movs	r4, r1
 80008c2:	001e      	movs	r6, r3
 80008c4:	ab08      	add	r3, sp, #32
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	18cb      	adds	r3, r1, r3
 80008ca:	9301      	str	r3, [sp, #4]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 80008cc:	9b01      	ldr	r3, [sp, #4]
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d101      	bne.n	80008d6 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x1c>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
		}
	}

	return 1;
}
 80008d2:	2001      	movs	r0, #1
 80008d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 80008d6:	7823      	ldrb	r3, [r4, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d108      	bne.n	80008ee <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x34>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 80008dc:	0029      	movs	r1, r5
 80008de:	6830      	ldr	r0, [r6, #0]
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 80008e0:	f7ff fe22 	bl	8000528 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 80008e4:	3604      	adds	r6, #4
 80008e6:	350a      	adds	r5, #10
 80008e8:	3704      	adds	r7, #4
 80008ea:	3401      	adds	r4, #1
 80008ec:	e7ee      	b.n	80008cc <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x12>
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 80008ee:	7823      	ldrb	r3, [r4, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f7      	bne.n	80008e4 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x2a>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 80008f4:	0029      	movs	r1, r5
 80008f6:	6838      	ldr	r0, [r7, #0]
 80008f8:	e7f2      	b.n	80008e0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x26>
	...

080008fc <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 80008fc:	b510      	push	{r4, lr}

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 80008fe:	4909      	ldr	r1, [pc, #36]	@ (8000924 <Read_and_Interpret_User_Presets_From_Flash+0x28>)
 8000900:	4809      	ldr	r0, [pc, #36]	@ (8000928 <Read_and_Interpret_User_Presets_From_Flash+0x2c>)
 8000902:	f7ff fe4b 	bl	800059c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000906:	4909      	ldr	r1, [pc, #36]	@ (800092c <Read_and_Interpret_User_Presets_From_Flash+0x30>)
 8000908:	4809      	ldr	r0, [pc, #36]	@ (8000930 <Read_and_Interpret_User_Presets_From_Flash+0x34>)
 800090a:	f7ff fe47 	bl	800059c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 800090e:	4909      	ldr	r1, [pc, #36]	@ (8000934 <Read_and_Interpret_User_Presets_From_Flash+0x38>)
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000912:	f7ff fe43 	bl	800059c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000916:	4909      	ldr	r1, [pc, #36]	@ (800093c <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 800091a:	f7ff fe3f 	bl	800059c <Read_and_Interpret_Preset_From_Flash>

	return 1;
}
 800091e:	2001      	movs	r0, #1
 8000920:	bd10      	pop	{r4, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	2000000f 	.word	0x2000000f
 8000928:	0800f800 	.word	0x0800f800
 800092c:	2000000a 	.word	0x2000000a
 8000930:	0800f808 	.word	0x0800f808
 8000934:	20000005 	.word	0x20000005
 8000938:	0800f810 	.word	0x0800f810
 800093c:	20000000 	.word	0x20000000
 8000940:	0800f818 	.word	0x0800f818

08000944 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000944:	7803      	ldrb	r3, [r0, #0]
 8000946:	2b2a      	cmp	r3, #42	@ 0x2a
 8000948:	d803      	bhi.n	8000952 <Update_Waveshape_with_CC_Value+0xe>
		params_ptr->waveshape = TRIANGLE_MODE;
 800094a:	2300      	movs	r3, #0
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
		params_ptr->waveshape = SINE_MODE;
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
		params_ptr->waveshape = SQUARE_MODE;
 800094c:	718b      	strb	r3, [r1, #6]
	}

	return 1;
}
 800094e:	2001      	movs	r0, #1
 8000950:	4770      	bx	lr
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000952:	7803      	ldrb	r3, [r0, #0]
 8000954:	2b55      	cmp	r3, #85	@ 0x55
 8000956:	d801      	bhi.n	800095c <Update_Waveshape_with_CC_Value+0x18>
		params_ptr->waveshape = SINE_MODE;
 8000958:	2301      	movs	r3, #1
 800095a:	e7f7      	b.n	800094c <Update_Waveshape_with_CC_Value+0x8>
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 800095c:	7803      	ldrb	r3, [r0, #0]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	dbf4      	blt.n	800094e <Update_Waveshape_with_CC_Value+0xa>
		params_ptr->waveshape = SQUARE_MODE;
 8000964:	2302      	movs	r3, #2
 8000966:	e7f1      	b.n	800094c <Update_Waveshape_with_CC_Value+0x8>

08000968 <Update_Params_Based_On_Mode_Selected>:
	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000968:	4a4f      	ldr	r2, [pc, #316]	@ (8000aa8 <Update_Params_Based_On_Mode_Selected+0x140>)
uint8_t Update_Params_Based_On_Mode_Selected(void){
 800096a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(waveshape_fsm.current_state == MANUAL_MODE){
 800096c:	7813      	ldrb	r3, [r2, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d104      	bne.n	800097c <Update_Params_Based_On_Mode_Selected+0x14>
		params.waveshape = params_manual.waveshape;
 8000972:	4b4e      	ldr	r3, [pc, #312]	@ (8000aac <Update_Params_Based_On_Mode_Selected+0x144>)
 8000974:	494e      	ldr	r1, [pc, #312]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 8000976:	799b      	ldrb	r3, [r3, #6]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	718b      	strb	r3, [r1, #6]
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 800097c:	4f4d      	ldr	r7, [pc, #308]	@ (8000ab4 <Update_Params_Based_On_Mode_Selected+0x14c>)
 800097e:	783b      	ldrb	r3, [r7, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d104      	bne.n	800098e <Update_Params_Based_On_Mode_Selected+0x26>
		params.speed = params_manual.speed;
 8000984:	4b49      	ldr	r3, [pc, #292]	@ (8000aac <Update_Params_Based_On_Mode_Selected+0x144>)
 8000986:	494a      	ldr	r1, [pc, #296]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 8000988:	891b      	ldrh	r3, [r3, #8]
 800098a:	b29b      	uxth	r3, r3
 800098c:	810b      	strh	r3, [r1, #8]
	if(depth_fsm.current_state == MANUAL_MODE){
 800098e:	4e4a      	ldr	r6, [pc, #296]	@ (8000ab8 <Update_Params_Based_On_Mode_Selected+0x150>)
 8000990:	7833      	ldrb	r3, [r6, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d104      	bne.n	80009a0 <Update_Params_Based_On_Mode_Selected+0x38>
		params.depth = params_manual.depth;
 8000996:	4b45      	ldr	r3, [pc, #276]	@ (8000aac <Update_Params_Based_On_Mode_Selected+0x144>)
 8000998:	4945      	ldr	r1, [pc, #276]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 800099a:	7a9b      	ldrb	r3, [r3, #10]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	728b      	strb	r3, [r1, #10]
	if(symmetry_fsm.current_state == MANUAL_MODE){
 80009a0:	4d46      	ldr	r5, [pc, #280]	@ (8000abc <Update_Params_Based_On_Mode_Selected+0x154>)
 80009a2:	782b      	ldrb	r3, [r5, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d104      	bne.n	80009b2 <Update_Params_Based_On_Mode_Selected+0x4a>
		params.symmetry = params_manual.symmetry;
 80009a8:	4b40      	ldr	r3, [pc, #256]	@ (8000aac <Update_Params_Based_On_Mode_Selected+0x144>)
 80009aa:	4941      	ldr	r1, [pc, #260]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 80009ac:	899b      	ldrh	r3, [r3, #12]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	818b      	strh	r3, [r1, #12]
	if(phase_fsm.current_state == MANUAL_MODE){
 80009b2:	4c43      	ldr	r4, [pc, #268]	@ (8000ac0 <Update_Params_Based_On_Mode_Selected+0x158>)
 80009b4:	7823      	ldrb	r3, [r4, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d104      	bne.n	80009c4 <Update_Params_Based_On_Mode_Selected+0x5c>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 80009ba:	4b3c      	ldr	r3, [pc, #240]	@ (8000aac <Update_Params_Based_On_Mode_Selected+0x144>)
 80009bc:	493c      	ldr	r1, [pc, #240]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 80009be:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	844b      	strh	r3, [r1, #34]	@ 0x22
	if(waveshape_fsm.current_state == PC_MODE){
 80009c4:	7813      	ldrb	r3, [r2, #0]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d109      	bne.n	80009de <Update_Params_Based_On_Mode_Selected+0x76>
	params_ptr->waveshape = preset_converted_ptr->waveshape;
 80009ca:	210a      	movs	r1, #10
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80009cc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac4 <Update_Params_Based_On_Mode_Selected+0x15c>)
 80009ce:	7818      	ldrb	r0, [r3, #0]
	params_ptr->waveshape = preset_converted_ptr->waveshape;
 80009d0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac8 <Update_Params_Based_On_Mode_Selected+0x160>)
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80009d2:	3801      	subs	r0, #1
	params_ptr->waveshape = preset_converted_ptr->waveshape;
 80009d4:	4341      	muls	r1, r0
 80009d6:	5ccb      	ldrb	r3, [r1, r3]
 80009d8:	4935      	ldr	r1, [pc, #212]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	718b      	strb	r3, [r1, #6]
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80009de:	783b      	ldrb	r3, [r7, #0]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d10a      	bne.n	80009fa <Update_Params_Based_On_Mode_Selected+0x92>
	params_ptr->speed = preset_converted_ptr->speed;
 80009e4:	210a      	movs	r1, #10
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80009e6:	4b37      	ldr	r3, [pc, #220]	@ (8000ac4 <Update_Params_Based_On_Mode_Selected+0x15c>)
 80009e8:	7818      	ldrb	r0, [r3, #0]
	params_ptr->speed = preset_converted_ptr->speed;
 80009ea:	4b37      	ldr	r3, [pc, #220]	@ (8000ac8 <Update_Params_Based_On_Mode_Selected+0x160>)
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80009ec:	3801      	subs	r0, #1
	params_ptr->speed = preset_converted_ptr->speed;
 80009ee:	4341      	muls	r1, r0
 80009f0:	185b      	adds	r3, r3, r1
 80009f2:	885b      	ldrh	r3, [r3, #2]
 80009f4:	492e      	ldr	r1, [pc, #184]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	810b      	strh	r3, [r1, #8]
	if(depth_fsm.current_state == PC_MODE){
 80009fa:	7833      	ldrb	r3, [r6, #0]
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d10a      	bne.n	8000a16 <Update_Params_Based_On_Mode_Selected+0xae>
	params_ptr->depth = preset_converted_ptr->depth;
 8000a00:	210a      	movs	r1, #10
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000a02:	4b30      	ldr	r3, [pc, #192]	@ (8000ac4 <Update_Params_Based_On_Mode_Selected+0x15c>)
 8000a04:	7818      	ldrb	r0, [r3, #0]
	params_ptr->depth = preset_converted_ptr->depth;
 8000a06:	4b30      	ldr	r3, [pc, #192]	@ (8000ac8 <Update_Params_Based_On_Mode_Selected+0x160>)
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000a08:	3801      	subs	r0, #1
	params_ptr->depth = preset_converted_ptr->depth;
 8000a0a:	4341      	muls	r1, r0
 8000a0c:	185b      	adds	r3, r3, r1
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	4927      	ldr	r1, [pc, #156]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	728b      	strb	r3, [r1, #10]
	if(symmetry_fsm.current_state == PC_MODE){
 8000a16:	782b      	ldrb	r3, [r5, #0]
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d10a      	bne.n	8000a32 <Update_Params_Based_On_Mode_Selected+0xca>
	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000a1c:	210a      	movs	r1, #10
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000a1e:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <Update_Params_Based_On_Mode_Selected+0x15c>)
 8000a20:	7818      	ldrb	r0, [r3, #0]
	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000a22:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <Update_Params_Based_On_Mode_Selected+0x160>)
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000a24:	3801      	subs	r0, #1
	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000a26:	4341      	muls	r1, r0
 8000a28:	185b      	adds	r3, r3, r1
 8000a2a:	88db      	ldrh	r3, [r3, #6]
 8000a2c:	4920      	ldr	r1, [pc, #128]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	818b      	strh	r3, [r1, #12]
	if(phase_fsm.current_state == PC_MODE){
 8000a32:	7823      	ldrb	r3, [r4, #0]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d10a      	bne.n	8000a4e <Update_Params_Based_On_Mode_Selected+0xe6>
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000a38:	210a      	movs	r1, #10
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000a3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <Update_Params_Based_On_Mode_Selected+0x15c>)
 8000a3c:	7818      	ldrb	r0, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000a3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ac8 <Update_Params_Based_On_Mode_Selected+0x160>)
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000a40:	3801      	subs	r0, #1
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000a42:	4341      	muls	r1, r0
 8000a44:	185b      	adds	r3, r3, r1
 8000a46:	891b      	ldrh	r3, [r3, #8]
 8000a48:	4919      	ldr	r1, [pc, #100]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	844b      	strh	r3, [r1, #34]	@ 0x22
	if(waveshape_fsm.current_state == CC_MODE){
 8000a4e:	7813      	ldrb	r3, [r2, #0]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d103      	bne.n	8000a5c <Update_Params_Based_On_Mode_Selected+0xf4>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 8000a54:	4916      	ldr	r1, [pc, #88]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
 8000a56:	481d      	ldr	r0, [pc, #116]	@ (8000acc <Update_Params_Based_On_Mode_Selected+0x164>)
 8000a58:	f7ff ff74 	bl	8000944 <Update_Waveshape_with_CC_Value>
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000a5c:	783b      	ldrb	r3, [r7, #0]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d104      	bne.n	8000a6c <Update_Params_Based_On_Mode_Selected+0x104>

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint16_t speed = (uint16_t)*data;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <Update_Params_Based_On_Mode_Selected+0x164>)

	speed <<= 3; //convert to 10-bit
	params_ptr->speed = speed;
 8000a64:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
	uint16_t speed = (uint16_t)*data;
 8000a66:	785b      	ldrb	r3, [r3, #1]
	speed <<= 3; //convert to 10-bit
 8000a68:	00db      	lsls	r3, r3, #3
	params_ptr->speed = speed;
 8000a6a:	8113      	strh	r3, [r2, #8]
	if(depth_fsm.current_state == CC_MODE){
 8000a6c:	7833      	ldrb	r3, [r6, #0]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d104      	bne.n	8000a7c <Update_Params_Based_On_Mode_Selected+0x114>
	return 1;
}

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t depth = (uint8_t)*data;
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <Update_Params_Based_On_Mode_Selected+0x164>)
	params_ptr->depth = depth;
 8000a74:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
	uint8_t depth = (uint8_t)*data;
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	b2db      	uxtb	r3, r3
	params_ptr->depth = depth;
 8000a7a:	7293      	strb	r3, [r2, #10]
	if(symmetry_fsm.current_state == CC_MODE){
 8000a7c:	782b      	ldrb	r3, [r5, #0]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d106      	bne.n	8000a90 <Update_Params_Based_On_Mode_Selected+0x128>
	return 1;
}

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t symmetry = (uint8_t)*data;
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <Update_Params_Based_On_Mode_Selected+0x164>)

	symmetry <<= 1; //convert to 8-bit
	params_ptr->symmetry = symmetry;
 8000a84:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
	uint8_t symmetry = (uint8_t)*data;
 8000a86:	78db      	ldrb	r3, [r3, #3]
	symmetry <<= 1; //convert to 8-bit
 8000a88:	005b      	lsls	r3, r3, #1
	params_ptr->symmetry = symmetry;
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	8193      	strh	r3, [r2, #12]
	if(phase_fsm.current_state == CC_MODE){
 8000a90:	7823      	ldrb	r3, [r4, #0]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d106      	bne.n	8000aa4 <Update_Params_Based_On_Mode_Selected+0x13c>
	return 1;
}

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t phase = (uint8_t)*data;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <Update_Params_Based_On_Mode_Selected+0x164>)

	phase <<= 2; //convert to 9-bit
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000a98:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <Update_Params_Based_On_Mode_Selected+0x148>)
	uint8_t phase = (uint8_t)*data;
 8000a9a:	791b      	ldrb	r3, [r3, #4]
	phase <<= 2; //convert to 9-bit
 8000a9c:	009b      	lsls	r3, r3, #2
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	8453      	strh	r3, [r2, #34]	@ 0x22
}
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa8:	20000428 	.word	0x20000428
 8000aac:	20000cc8 	.word	0x20000cc8
 8000ab0:	20000cec 	.word	0x20000cec
 8000ab4:	2000042c 	.word	0x2000042c
 8000ab8:	2000042a 	.word	0x2000042a
 8000abc:	20000426 	.word	0x20000426
 8000ac0:	20000424 	.word	0x20000424
 8000ac4:	200004b1 	.word	0x200004b1
 8000ac8:	200004c4 	.word	0x200004c4
 8000acc:	20000494 	.word	0x20000494

08000ad0 <Set_Waveshape_to_CC_Mode_and_Value>:
	return 1;
}

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <Set_Waveshape_to_CC_Mode_and_Value+0x18>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000ad8:	2202      	movs	r2, #2
 8000ada:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000adc:	7802      	ldrb	r2, [r0, #0]
 8000ade:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <Set_Waveshape_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 8000ae0:	2001      	movs	r0, #1
	CC_array[WAVESHAPE_ARR] = *data;
 8000ae2:	701a      	strb	r2, [r3, #0]
}
 8000ae4:	4770      	bx	lr
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	20000428 	.word	0x20000428
 8000aec:	20000494 	.word	0x20000494

08000af0 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <Set_Speed_to_CC_Mode_and_Value+0x18>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000af8:	2202      	movs	r2, #2
 8000afa:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000afc:	7802      	ldrb	r2, [r0, #0]
 8000afe:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <Set_Speed_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 8000b00:	2001      	movs	r0, #1
	CC_array[SPEED_ARR] = *data;
 8000b02:	705a      	strb	r2, [r3, #1]
}
 8000b04:	4770      	bx	lr
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	2000042c 	.word	0x2000042c
 8000b0c:	20000494 	.word	0x20000494

08000b10 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){

	depth_fsm.prev_state = depth_fsm.current_state;
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <Set_Depth_to_CC_Mode_and_Value+0x18>)
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000b18:	2202      	movs	r2, #2
 8000b1a:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000b1c:	7802      	ldrb	r2, [r0, #0]
 8000b1e:	4b03      	ldr	r3, [pc, #12]	@ (8000b2c <Set_Depth_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 8000b20:	2001      	movs	r0, #1
	CC_array[DEPTH_ARR] = *data;
 8000b22:	709a      	strb	r2, [r3, #2]
}
 8000b24:	4770      	bx	lr
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	2000042a 	.word	0x2000042a
 8000b2c:	20000494 	.word	0x20000494

08000b30 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <Set_Symmetry_to_CC_Mode_and_Value+0x18>)
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000b38:	2202      	movs	r2, #2
 8000b3a:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000b3c:	7802      	ldrb	r2, [r0, #0]
 8000b3e:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <Set_Symmetry_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 8000b40:	2001      	movs	r0, #1
	CC_array[SYMMETRY_ARR] = *data;
 8000b42:	70da      	strb	r2, [r3, #3]
}
 8000b44:	4770      	bx	lr
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	20000426 	.word	0x20000426
 8000b4c:	20000494 	.word	0x20000494

08000b50 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){

	phase_fsm.prev_state = phase_fsm.current_state;
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <Set_Phase_to_CC_Mode_and_Value+0x18>)
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000b58:	2202      	movs	r2, #2
 8000b5a:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000b5c:	7802      	ldrb	r2, [r0, #0]
 8000b5e:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Set_Phase_to_CC_Mode_and_Value+0x1c>)

	return 1;
}
 8000b60:	2001      	movs	r0, #1
	CC_array[PHASE_ARR] = *data;
 8000b62:	711a      	strb	r2, [r3, #4]
}
 8000b64:	4770      	bx	lr
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	20000424 	.word	0x20000424
 8000b6c:	20000494 	.word	0x20000494

08000b70 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <Set_All_Pots_to_PC_Mode+0x38>)

	phase_fsm.prev_state = phase_fsm.current_state;
	phase_fsm.current_state = PC_MODE;

	return 1;
}
 8000b72:	2001      	movs	r0, #1
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000b74:	7813      	ldrb	r3, [r2, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	7053      	strb	r3, [r2, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	7013      	strb	r3, [r2, #0]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bac <Set_All_Pots_to_PC_Mode+0x3c>)
 8000b80:	7811      	ldrb	r1, [r2, #0]
 8000b82:	b2c9      	uxtb	r1, r1
 8000b84:	7051      	strb	r1, [r2, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000b86:	7013      	strb	r3, [r2, #0]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000b88:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <Set_All_Pots_to_PC_Mode+0x40>)
 8000b8a:	7811      	ldrb	r1, [r2, #0]
 8000b8c:	b2c9      	uxtb	r1, r1
 8000b8e:	7051      	strb	r1, [r2, #1]
	depth_fsm.current_state = PC_MODE;
 8000b90:	7013      	strb	r3, [r2, #0]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <Set_All_Pots_to_PC_Mode+0x44>)
 8000b94:	7811      	ldrb	r1, [r2, #0]
 8000b96:	b2c9      	uxtb	r1, r1
 8000b98:	7051      	strb	r1, [r2, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000b9a:	7013      	strb	r3, [r2, #0]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	@ (8000bb8 <Set_All_Pots_to_PC_Mode+0x48>)
 8000b9e:	7811      	ldrb	r1, [r2, #0]
 8000ba0:	b2c9      	uxtb	r1, r1
 8000ba2:	7051      	strb	r1, [r2, #1]
	phase_fsm.current_state = PC_MODE;
 8000ba4:	7013      	strb	r3, [r2, #0]
}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000428 	.word	0x20000428
 8000bac:	2000042c 	.word	0x2000042c
 8000bb0:	2000042a 	.word	0x2000042a
 8000bb4:	20000426 	.word	0x20000426
 8000bb8:	20000424 	.word	0x20000424

08000bbc <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8000bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bbe:	0004      	movs	r4, r0
	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;

	*(user_presets_used_array_ptr + preset_index) = YES;
 8000bc0:	2701      	movs	r7, #1
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8000bc2:	001e      	movs	r6, r3
	uint8_t preset_index = (uint8_t)preset - 1;
 8000bc4:	3c01      	subs	r4, #1
	*(user_presets_used_array_ptr + preset_index) = YES;
 8000bc6:	b2e4      	uxtb	r4, r4
 8000bc8:	1913      	adds	r3, r2, r4
 8000bca:	701f      	strb	r7, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8000bcc:	00a4      	lsls	r4, r4, #2
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8000bce:	0008      	movs	r0, r1
	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8000bd0:	59a1      	ldr	r1, [r4, r6]
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8000bd2:	0015      	movs	r5, r2
	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8000bd4:	f7ff fcb9 	bl	800054a <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 8000bd8:	2304      	movs	r3, #4
 8000bda:	0029      	movs	r1, r5
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	9a08      	ldr	r2, [sp, #32]
 8000be0:	0033      	movs	r3, r6
 8000be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000be4:	f7ff fe69 	bl	80008ba <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
}
 8000be8:	0038      	movs	r0, r7
 8000bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000bec <Set_to_PC_Mode>:

uint8_t Set_to_PC_Mode(enum Preset_Selected preset){
 8000bec:	b510      	push	{r4, lr}

	preset_selected = preset;
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <Set_to_PC_Mode+0x1c>)
 8000bf0:	7018      	strb	r0, [r3, #0]
	Set_All_Pots_to_PC_Mode();
 8000bf2:	f7ff ffbd 	bl	8000b70 <Set_All_Pots_to_PC_Mode>
	Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <Set_to_PC_Mode+0x20>)
 8000bfa:	f004 f8e2 	bl	8004dc2 <Clear_Status_Bit>
	Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8000bfe:	f7ff feb3 	bl	8000968 <Update_Params_Based_On_Mode_Selected>

	return 1;
}
 8000c02:	2001      	movs	r0, #1
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	200004b1 	.word	0x200004b1
 8000c0c:	20000d28 	.word	0x20000d28

08000c10 <Set_LED_to_State>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t Set_LED_to_State(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 8000c10:	b530      	push	{r4, r5, lr}

	if(desired_state == LED_CONFIRM){
 8000c12:	2907      	cmp	r1, #7
 8000c14:	d114      	bne.n	8000c40 <Set_LED_to_State+0x30>

		if(LED_fsm.current_state != LED_CONFIRM){
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <Set_LED_to_State+0x48>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d00a      	beq.n	8000c34 <Set_LED_to_State+0x24>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000c1e:	2400      	movs	r4, #0
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000c20:	2596      	movs	r5, #150	@ 0x96
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <Set_LED_to_State+0x4c>)
 8000c24:	681a      	ldr	r2, [r3, #0]
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <Set_LED_to_State+0x50>)
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000c28:	6254      	str	r4, [r2, #36]	@ 0x24
	else{

		if(LED_FSM_ptr->current_state != desired_state){

			__HAL_TIM_SET_COUNTER(&htim14, 0);
			led_blink_period = LED_BLINK_PERIOD;
 8000c2a:	601d      	str	r5, [r3, #0]
			LED_counter = 0;
 8000c2c:	4d0d      	ldr	r5, [pc, #52]	@ (8000c64 <Set_LED_to_State+0x54>)
 8000c2e:	702c      	strb	r4, [r5, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6353      	str	r3, [r2, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8000c34:	7803      	ldrb	r3, [r0, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	7043      	strb	r3, [r0, #1]
	LED_FSM_ptr->current_state = desired_state;
 8000c3a:	7001      	strb	r1, [r0, #0]

	return 1;
}
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	bd30      	pop	{r4, r5, pc}
		if(LED_FSM_ptr->current_state != desired_state){
 8000c40:	7803      	ldrb	r3, [r0, #0]
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d0f6      	beq.n	8000c34 <Set_LED_to_State+0x24>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000c46:	2400      	movs	r4, #0
			led_blink_period = LED_BLINK_PERIOD;
 8000c48:	2596      	movs	r5, #150	@ 0x96
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000c4a:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <Set_LED_to_State+0x4c>)
			led_blink_period = LED_BLINK_PERIOD;
 8000c4c:	006d      	lsls	r5, r5, #1
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000c4e:	681a      	ldr	r2, [r3, #0]
			led_blink_period = LED_BLINK_PERIOD;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <Set_LED_to_State+0x50>)
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000c52:	6254      	str	r4, [r2, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 8000c54:	e7e9      	b.n	8000c2a <Set_LED_to_State+0x1a>
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	20000420 	.word	0x20000420
 8000c5c:	20000ac4 	.word	0x20000ac4
 8000c60:	20000014 	.word	0x20000014
 8000c64:	2000050c 	.word	0x2000050c

08000c68 <Is_Status_Byte>:
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){

	uint8_t MSB = *data;
 8000c68:	7800      	ldrb	r0, [r0, #0]
	}
	else{ //data byte

		return (enum Validate)NO;
	}
}
 8000c6a:	09c0      	lsrs	r0, r0, #7
 8000c6c:	4770      	bx	lr

08000c6e <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){

	uint8_t MSB = *data;
 8000c6e:	7803      	ldrb	r3, [r0, #0]
	}
	else{ //data byte

		return (enum Validate)YES;
	}
}
 8000c70:	2001      	movs	r0, #1
	MSB >>= 7;
 8000c72:	09db      	lsrs	r3, r3, #7
}
 8000c74:	4058      	eors	r0, r3
 8000c76:	4770      	bx	lr

08000c78 <Is_PC_Status_Byte>:

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
	temp_data = *data >> 4;
 8000c78:	7800      	ldrb	r0, [r0, #0]

	if(temp_data == source){
 8000c7a:	0900      	lsrs	r0, r0, #4
 8000c7c:	380c      	subs	r0, #12
 8000c7e:	4243      	negs	r3, r0
 8000c80:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000c82:	b2c0      	uxtb	r0, r0
 8000c84:	4770      	bx	lr

08000c86 <Is_CC_Status_Byte>:

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
	temp_data = *data >> 4;
 8000c86:	7800      	ldrb	r0, [r0, #0]

	if(temp_data == source){
 8000c88:	0900      	lsrs	r0, r0, #4
 8000c8a:	380b      	subs	r0, #11
 8000c8c:	4243      	negs	r3, r0
 8000c8e:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000c90:	b2c0      	uxtb	r0, r0
 8000c92:	4770      	bx	lr

08000c94 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000c94:	7802      	ldrb	r2, [r0, #0]
enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000c96:	0003      	movs	r3, r0

			return (enum Validate)YES;
		}
		else{

			return (enum Validate)NO;
 8000c98:	2000      	movs	r0, #0
	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000c9a:	2a77      	cmp	r2, #119	@ 0x77
 8000c9c:	d90e      	bls.n	8000cbc <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>
		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000c9e:	781a      	ldrb	r2, [r3, #0]
			return (enum Validate)YES;
 8000ca0:	3001      	adds	r0, #1
		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000ca2:	2a79      	cmp	r2, #121	@ 0x79
 8000ca4:	d00a      	beq.n	8000cbc <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>
		else if(*first_data_byte == LOCAL_CONTROL){
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	2a7a      	cmp	r2, #122	@ 0x7a
 8000caa:	d007      	beq.n	8000cbc <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>
		else if(*first_data_byte == OMNI_MODE_ON){
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	2a7d      	cmp	r2, #125	@ 0x7d
 8000cb0:	d004      	beq.n	8000cbc <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000cb2:	7818      	ldrb	r0, [r3, #0]
 8000cb4:	387c      	subs	r0, #124	@ 0x7c
 8000cb6:	4243      	negs	r3, r0
 8000cb8:	4158      	adcs	r0, r3
 8000cba:	b2c0      	uxtb	r0, r0
	}
	else{

		return (enum Validate)NO;
	}
}
 8000cbc:	4770      	bx	lr

08000cbe <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000cbe:	7802      	ldrb	r2, [r0, #0]
enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000cc0:	0003      	movs	r3, r0

		return (enum Validate)NO;
 8000cc2:	2000      	movs	r0, #0
	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000cc4:	2a77      	cmp	r2, #119	@ 0x77
 8000cc6:	d811      	bhi.n	8000cec <Is_Utilised_CC_First_Data_Byte+0x2e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000cc8:	781a      	ldrb	r2, [r3, #0]

			return (enum Validate)YES;
 8000cca:	3001      	adds	r0, #1
		if(*first_data_byte == WAVESHAPE_CC){
 8000ccc:	2a14      	cmp	r2, #20
 8000cce:	d00d      	beq.n	8000cec <Is_Utilised_CC_First_Data_Byte+0x2e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	2a15      	cmp	r2, #21
 8000cd4:	d00a      	beq.n	8000cec <Is_Utilised_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == DEPTH_CC){
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	2a16      	cmp	r2, #22
 8000cda:	d007      	beq.n	8000cec <Is_Utilised_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	2a17      	cmp	r2, #23
 8000ce0:	d004      	beq.n	8000cec <Is_Utilised_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == PHASE_CC){
 8000ce2:	7818      	ldrb	r0, [r3, #0]
 8000ce4:	3818      	subs	r0, #24
 8000ce6:	4243      	negs	r3, r0
 8000ce8:	4158      	adcs	r0, r3
 8000cea:	b2c0      	uxtb	r0, r0
		else{

			return (enum Validate)NO;
		}
	}
}
 8000cec:	4770      	bx	lr

08000cee <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000cee:	7803      	ldrb	r3, [r0, #0]
 8000cf0:	2b79      	cmp	r3, #121	@ 0x79
 8000cf2:	d101      	bne.n	8000cf8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0xa>
			return (enum Validate)NO;
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){

		if((*second_data_byte == 0)){
 8000cf4:	7808      	ldrb	r0, [r1, #0]
 8000cf6:	e008      	b.n	8000d0a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x1c>
	else if(*first_data_byte == LOCAL_CONTROL){
 8000cf8:	7803      	ldrb	r3, [r0, #0]
 8000cfa:	2b7a      	cmp	r3, #122	@ 0x7a
 8000cfc:	d109      	bne.n	8000d12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x24>
		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000cfe:	780b      	ldrb	r3, [r1, #0]
			return (enum Validate)YES;
 8000d00:	2001      	movs	r0, #1
		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00c      	beq.n	8000d20 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x32>
 8000d06:	7808      	ldrb	r0, [r1, #0]
 8000d08:	387f      	subs	r0, #127	@ 0x7f
		if((*second_data_byte == 0)){
 8000d0a:	4243      	negs	r3, r0
 8000d0c:	4158      	adcs	r0, r3
 8000d0e:	b2c0      	uxtb	r0, r0
 8000d10:	e006      	b.n	8000d20 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x32>
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000d12:	7803      	ldrb	r3, [r0, #0]
 8000d14:	2b7c      	cmp	r3, #124	@ 0x7c
 8000d16:	d0ed      	beq.n	8000cf4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x6>
	else if(*first_data_byte == OMNI_MODE_ON){
 8000d18:	7803      	ldrb	r3, [r0, #0]
			return (enum Validate)NO;
 8000d1a:	2000      	movs	r0, #0
	else if(*first_data_byte == OMNI_MODE_ON){
 8000d1c:	2b7d      	cmp	r3, #125	@ 0x7d
 8000d1e:	d0e9      	beq.n	8000cf4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x6>
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
	}
}
 8000d20:	4770      	bx	lr

08000d22 <Is_Sysex_Start_Status_Byte>:
	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8000d22:	7800      	ldrb	r0, [r0, #0]
 8000d24:	38f0      	subs	r0, #240	@ 0xf0
 8000d26:	4243      	negs	r3, r0
 8000d28:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000d2a:	b2c0      	uxtb	r0, r0
 8000d2c:	4770      	bx	lr

08000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000d2e:	b082      	sub	sp, #8
 8000d30:	466b      	mov	r3, sp

	uint8_t ch = *data & 0x0F;
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;

	if(ch == b_ch){
 8000d32:	220f      	movs	r2, #15
enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000d34:	71d9      	strb	r1, [r3, #7]
	uint8_t ch = *data & 0x0F;
 8000d36:	7800      	ldrb	r0, [r0, #0]
enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000d38:	3307      	adds	r3, #7
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 8000d3a:	781b      	ldrb	r3, [r3, #0]
	if(ch == b_ch){
 8000d3c:	4010      	ands	r0, r2
 8000d3e:	1ac0      	subs	r0, r0, r3
 8000d40:	4243      	negs	r3, r0
 8000d42:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000d44:	b2c0      	uxtb	r0, r0
 8000d46:	b002      	add	sp, #8
 8000d48:	4770      	bx	lr

08000d4a <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8000d4a:	2200      	movs	r2, #0

	uint16_t sum = 0;
 8000d4c:	0013      	movs	r3, r2

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 8000d4e:	5c81      	ldrb	r1, [r0, r2]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8000d50:	3201      	adds	r2, #1
		sum += MIDI_data_struct->MIDI_data_buffer[i];
 8000d52:	18cb      	adds	r3, r1, r3
 8000d54:	b29b      	uxth	r3, r3
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8000d56:	2a0a      	cmp	r2, #10
 8000d58:	d1f9      	bne.n	8000d4e <Is_Data_Buffer_Empty+0x4>
	}

	if(sum == 0){
 8000d5a:	425a      	negs	r2, r3
 8000d5c:	4153      	adcs	r3, r2
	}
	else{

		return (enum Validate)NO;
	}
}
 8000d5e:	b2d8      	uxtb	r0, r3
 8000d60:	4770      	bx	lr

08000d62 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8000d62:	2300      	movs	r3, #0

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8000d64:	001a      	movs	r2, r3
 8000d66:	54c2      	strb	r2, [r0, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8000d68:	3301      	adds	r3, #1
 8000d6a:	2b0a      	cmp	r3, #10
 8000d6c:	d1fb      	bne.n	8000d66 <Clear_Data_Buffer+0x4>
	}

	return 1;
}
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4770      	bx	lr

08000d72 <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){

	if(*PC_data < size_of_factory_or_user_array){
 8000d72:	7800      	ldrb	r0, [r0, #0]
	}
	else{

		return (enum Validate)NO;
	}
}
 8000d74:	4288      	cmp	r0, r1
 8000d76:	4180      	sbcs	r0, r0
 8000d78:	4240      	negs	r0, r0
 8000d7a:	4770      	bx	lr

08000d7c <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8000d7c:	7802      	ldrb	r2, [r0, #0]
enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8000d7e:	0003      	movs	r3, r0
		return (enum Validate)YES;
 8000d80:	2001      	movs	r0, #1
	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8000d82:	2af8      	cmp	r2, #248	@ 0xf8
 8000d84:	d010      	beq.n	8000da8 <Is_System_Real_Time_Status_Byte+0x2c>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	2afa      	cmp	r2, #250	@ 0xfa
 8000d8a:	d00d      	beq.n	8000da8 <Is_System_Real_Time_Status_Byte+0x2c>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	2afb      	cmp	r2, #251	@ 0xfb
 8000d90:	d00a      	beq.n	8000da8 <Is_System_Real_Time_Status_Byte+0x2c>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	2afc      	cmp	r2, #252	@ 0xfc
 8000d96:	d007      	beq.n	8000da8 <Is_System_Real_Time_Status_Byte+0x2c>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d9c:	d004      	beq.n	8000da8 <Is_System_Real_Time_Status_Byte+0x2c>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8000d9e:	7818      	ldrb	r0, [r3, #0]
 8000da0:	38ff      	subs	r0, #255	@ 0xff
 8000da2:	4243      	negs	r3, r0
 8000da4:	4158      	adcs	r0, r3
 8000da6:	b2c0      	uxtb	r0, r0
		return (enum Validate)YES;
	}
	else{
		return (enum Validate)NO;
	}
}
 8000da8:	4770      	bx	lr

08000daa <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000daa:	2180      	movs	r1, #128	@ 0x80
enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 8000dac:	b510      	push	{r4, lr}
	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000dae:	00c9      	lsls	r1, r1, #3
 8000db0:	f003 ffe1 	bl	8004d76 <Get_Status_Bit>

	if(omni_mode == 1){
 8000db4:	3801      	subs	r0, #1
 8000db6:	4243      	negs	r3, r0
 8000db8:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000dba:	b2c0      	uxtb	r0, r0
 8000dbc:	bd10      	pop	{r4, pc}

08000dbe <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8000dbe:	b570      	push	{r4, r5, r6, lr}
 8000dc0:	000c      	movs	r4, r1

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8000dc2:	2180      	movs	r1, #128	@ 0x80
uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8000dc4:	0005      	movs	r5, r0
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8000dc6:	0049      	lsls	r1, r1, #1
 8000dc8:	0020      	movs	r0, r4
 8000dca:	f003 fffa 	bl	8004dc2 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 8000dce:	2180      	movs	r1, #128	@ 0x80
 8000dd0:	0020      	movs	r0, r4
 8000dd2:	0089      	lsls	r1, r1, #2
 8000dd4:	f003 fff5 	bl	8004dc2 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8000dd8:	2300      	movs	r3, #0

	return 1;
}
 8000dda:	2001      	movs	r0, #1
	*midi_counter_ptr = 0;
 8000ddc:	602b      	str	r3, [r5, #0]
}
 8000dde:	bd70      	pop	{r4, r5, r6, pc}

08000de0 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8000de0:	b530      	push	{r4, r5, lr}

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000de2:	4d11      	ldr	r5, [pc, #68]	@ (8000e28 <Reset_All_Controllers+0x48>)
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000de4:	4c11      	ldr	r4, [pc, #68]	@ (8000e2c <Reset_All_Controllers+0x4c>)
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000de6:	782b      	ldrb	r3, [r5, #0]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <Reset_All_Controllers+0x50>)
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	706b      	strb	r3, [r5, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000dee:	7823      	ldrb	r3, [r4, #0]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000df0:	4910      	ldr	r1, [pc, #64]	@ (8000e34 <Reset_All_Controllers+0x54>)
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	7063      	strb	r3, [r4, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000df6:	7803      	ldrb	r3, [r0, #0]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000df8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e38 <Reset_All_Controllers+0x58>)
	depth_fsm.prev_state = depth_fsm.current_state;
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	7043      	strb	r3, [r0, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000dfe:	780b      	ldrb	r3, [r1, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	704b      	strb	r3, [r1, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000e04:	7813      	ldrb	r3, [r2, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	7053      	strb	r3, [r2, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	702b      	strb	r3, [r5, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000e0e:	7023      	strb	r3, [r4, #0]
	depth_fsm.current_state = CC_MODE;
 8000e10:	7003      	strb	r3, [r0, #0]
	symmetry_fsm.current_state = CC_MODE;
 8000e12:	700b      	strb	r3, [r1, #0]
	phase_fsm.current_state = CC_MODE;
 8000e14:	7013      	strb	r3, [r2, #0]

	uint8_t data = 127 >> 1;

	for(uint8_t index = 0; index < NUM_POTS; index++){

		CC_array[index] = data;
 8000e16:	223f      	movs	r2, #63	@ 0x3f
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <Reset_All_Controllers+0x5c>)
	}

	return 1;
}
 8000e1a:	2001      	movs	r0, #1
		CC_array[index] = data;
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	705a      	strb	r2, [r3, #1]
 8000e20:	709a      	strb	r2, [r3, #2]
 8000e22:	70da      	strb	r2, [r3, #3]
 8000e24:	711a      	strb	r2, [r3, #4]
}
 8000e26:	bd30      	pop	{r4, r5, pc}
 8000e28:	20000428 	.word	0x20000428
 8000e2c:	2000042c 	.word	0x2000042c
 8000e30:	2000042a 	.word	0x2000042a
 8000e34:	20000426 	.word	0x20000426
 8000e38:	20000424 	.word	0x20000424
 8000e3c:	20000494 	.word	0x20000494

08000e40 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 8000e40:	b530      	push	{r4, r5, lr}

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000e42:	4d0d      	ldr	r5, [pc, #52]	@ (8000e78 <Set_Local_Control+0x38>)
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000e44:	4c0d      	ldr	r4, [pc, #52]	@ (8000e7c <Set_Local_Control+0x3c>)
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000e46:	782b      	ldrb	r3, [r5, #0]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000e48:	490d      	ldr	r1, [pc, #52]	@ (8000e80 <Set_Local_Control+0x40>)
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	706b      	strb	r3, [r5, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000e4e:	7823      	ldrb	r3, [r4, #0]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000e50:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <Set_Local_Control+0x44>)
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	7063      	strb	r3, [r4, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000e56:	780b      	ldrb	r3, [r1, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	704b      	strb	r3, [r1, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000e5c:	7813      	ldrb	r3, [r2, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	7053      	strb	r3, [r2, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <Set_Local_Control+0x48>)
 8000e64:	7818      	ldrb	r0, [r3, #0]
 8000e66:	b2c0      	uxtb	r0, r0
 8000e68:	7058      	strb	r0, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	7028      	strb	r0, [r5, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8000e6e:	7020      	strb	r0, [r4, #0]
	depth_fsm.current_state = MANUAL_MODE;
 8000e70:	7008      	strb	r0, [r1, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8000e72:	7010      	strb	r0, [r2, #0]
	phase_fsm.current_state = MANUAL_MODE;
 8000e74:	7018      	strb	r0, [r3, #0]

	return 1;
}
 8000e76:	bd30      	pop	{r4, r5, pc}
 8000e78:	20000428 	.word	0x20000428
 8000e7c:	2000042c 	.word	0x2000042c
 8000e80:	2000042a 	.word	0x2000042a
 8000e84:	20000426 	.word	0x20000426
 8000e88:	20000424 	.word	0x20000424

08000e8c <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000e8c:	2180      	movs	r1, #128	@ 0x80
uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8000e8e:	b510      	push	{r4, lr}
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000e90:	00c9      	lsls	r1, r1, #3
 8000e92:	f003 ff96 	bl	8004dc2 <Clear_Status_Bit>

	return 1;
}
 8000e96:	2001      	movs	r0, #1
 8000e98:	bd10      	pop	{r4, pc}

08000e9a <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000e9a:	2180      	movs	r1, #128	@ 0x80
uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 8000e9c:	b510      	push	{r4, lr}
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000e9e:	00c9      	lsls	r1, r1, #3
 8000ea0:	f003 ff7d 	bl	8004d9e <Set_Status_Bit>

	return 1;
}
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	bd10      	pop	{r4, pc}

08000ea8 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 8000ea8:	b510      	push	{r4, lr}

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4902      	ldr	r1, [pc, #8]	@ (8000eb8 <Start_UART_Receive+0x10>)
 8000eae:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <Start_UART_Receive+0x14>)
 8000eb0:	f007 fdda 	bl	8008a68 <HAL_UART_Receive_DMA>

	return 1;
}
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	bd10      	pop	{r4, pc}
 8000eb8:	2000051a 	.word	0x2000051a
 8000ebc:	2000064c 	.word	0x2000064c

08000ec0 <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t __attribute__((optimize("O0")))Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	000a      	movs	r2, r1
 8000eca:	1cfb      	adds	r3, r7, #3
 8000ecc:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 8000ede:	2117      	movs	r1, #23
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 8000eee:	1cfb      	adds	r3, r7, #3
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10d      	bne.n	8000f12 <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8000ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80010ac <Pot_Check+0x1ec>)
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8000efa:	4b6d      	ldr	r3, [pc, #436]	@ (80010b0 <Pot_Check+0x1f0>)
 8000efc:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 8000efe:	4b6d      	ldr	r3, [pc, #436]	@ (80010b4 <Pot_Check+0x1f4>)
 8000f00:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2264      	movs	r2, #100	@ 0x64
 8000f0a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8000f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80010b8 <Pot_Check+0x1f8>)
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	e04e      	b.n	8000fb0 <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 8000f12:	1cfb      	adds	r3, r7, #3
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10f      	bne.n	8000f3a <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8000f1a:	4b68      	ldr	r3, [pc, #416]	@ (80010bc <Pot_Check+0x1fc>)
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8000f1e:	4b68      	ldr	r3, [pc, #416]	@ (80010c0 <Pot_Check+0x200>)
 8000f20:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8000f22:	4b68      	ldr	r3, [pc, #416]	@ (80010c4 <Pot_Check+0x204>)
 8000f24:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8000f2c:	2317      	movs	r3, #23
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2264      	movs	r2, #100	@ 0x64
 8000f32:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8000f34:	4b64      	ldr	r3, [pc, #400]	@ (80010c8 <Pot_Check+0x208>)
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e03a      	b.n	8000fb0 <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8000f3a:	1cfb      	adds	r3, r7, #3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d10f      	bne.n	8000f62 <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 8000f42:	4b62      	ldr	r3, [pc, #392]	@ (80010cc <Pot_Check+0x20c>)
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 8000f46:	4b62      	ldr	r3, [pc, #392]	@ (80010d0 <Pot_Check+0x210>)
 8000f48:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8000f4a:	4b62      	ldr	r3, [pc, #392]	@ (80010d4 <Pot_Check+0x214>)
 8000f4c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3304      	adds	r3, #4
 8000f52:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8000f54:	2317      	movs	r3, #23
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	2264      	movs	r2, #100	@ 0x64
 8000f5a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8000f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80010d8 <Pot_Check+0x218>)
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	e026      	b.n	8000fb0 <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 8000f62:	1cfb      	adds	r3, r7, #3
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d10f      	bne.n	8000f8a <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8000f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80010dc <Pot_Check+0x21c>)
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80010e0 <Pot_Check+0x220>)
 8000f70:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 8000f72:	4b5c      	ldr	r3, [pc, #368]	@ (80010e4 <Pot_Check+0x224>)
 8000f74:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3306      	adds	r3, #6
 8000f7a:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8000f7c:	2317      	movs	r3, #23
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	2264      	movs	r2, #100	@ 0x64
 8000f82:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8000f84:	4b58      	ldr	r3, [pc, #352]	@ (80010e8 <Pot_Check+0x228>)
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e012      	b.n	8000fb0 <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8000f8a:	1cfb      	adds	r3, r7, #3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d10e      	bne.n	8000fb0 <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 8000f92:	4b56      	ldr	r3, [pc, #344]	@ (80010ec <Pot_Check+0x22c>)
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8000f96:	4b56      	ldr	r3, [pc, #344]	@ (80010f0 <Pot_Check+0x230>)
 8000f98:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8000f9a:	4b56      	ldr	r3, [pc, #344]	@ (80010f4 <Pot_Check+0x234>)
 8000f9c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3308      	adds	r3, #8
 8000fa2:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8000fa4:	2317      	movs	r3, #23
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2264      	movs	r2, #100	@ 0x64
 8000faa:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8000fac:	4b52      	ldr	r3, [pc, #328]	@ (80010f8 <Pot_Check+0x238>)
 8000fae:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e066      	b.n	80010a0 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10b      	bne.n	8000ff4 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3301      	adds	r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e055      	b.n	80010a0 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d150      	bne.n	80010a0 <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001004:	200a      	movs	r0, #10
 8001006:	183b      	adds	r3, r7, r0
 8001008:	2200      	movs	r2, #0
 800100a:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	881a      	ldrh	r2, [r3, #0]
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d907      	bls.n	8001028 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101a:	8819      	ldrh	r1, [r3, #0]
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	881a      	ldrh	r2, [r3, #0]
 8001020:	183b      	adds	r3, r7, r0
 8001022:	1a8a      	subs	r2, r1, r2
 8001024:	801a      	strh	r2, [r3, #0]
 8001026:	e00d      	b.n	8001044 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	881a      	ldrh	r2, [r3, #0]
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d907      	bls.n	8001044 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	8819      	ldrh	r1, [r3, #0]
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	230a      	movs	r3, #10
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	1a8a      	subs	r2, r1, r2
 8001042:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 8001044:	2317      	movs	r3, #23
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	220a      	movs	r2, #10
 800104e:	18ba      	adds	r2, r7, r2
 8001050:	8812      	ldrh	r2, [r2, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d924      	bls.n	80010a0 <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d008      	beq.n	800106e <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e018      	b.n	80010a0 <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d015      	beq.n	80010a0 <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8001082:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <Pot_Check+0x23c>)
 8001084:	2120      	movs	r1, #32
 8001086:	0018      	movs	r0, r3
 8001088:	f003 fe9b 	bl	8004dc2 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <Pot_Check+0x23c>)
 800108e:	2140      	movs	r1, #64	@ 0x40
 8001090:	0018      	movs	r0, r3
 8001092:	f003 fe96 	bl	8004dc2 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <Pot_Check+0x23c>)
 8001098:	2108      	movs	r1, #8
 800109a:	0018      	movs	r0, r3
 800109c:	f003 fe91 	bl	8004dc2 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b00a      	add	sp, #40	@ 0x28
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	2000051c 	.word	0x2000051c
 80010b0:	2000051e 	.word	0x2000051e
 80010b4:	20000536 	.word	0x20000536
 80010b8:	20000428 	.word	0x20000428
 80010bc:	20000520 	.word	0x20000520
 80010c0:	20000522 	.word	0x20000522
 80010c4:	20000535 	.word	0x20000535
 80010c8:	2000042c 	.word	0x2000042c
 80010cc:	20000524 	.word	0x20000524
 80010d0:	20000526 	.word	0x20000526
 80010d4:	20000534 	.word	0x20000534
 80010d8:	2000042a 	.word	0x2000042a
 80010dc:	20000528 	.word	0x20000528
 80010e0:	2000052a 	.word	0x2000052a
 80010e4:	20000533 	.word	0x20000533
 80010e8:	20000426 	.word	0x20000426
 80010ec:	2000052c 	.word	0x2000052c
 80010f0:	2000052e 	.word	0x2000052e
 80010f4:	20000532 	.word	0x20000532
 80010f8:	20000424 	.word	0x20000424
 80010fc:	20000d28 	.word	0x20000d28

08001100 <Check_Tap_Tempo_Switch_State>:

uint8_t __attribute__((optimize("O0")))Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001108:	250f      	movs	r5, #15
 800110a:	197c      	adds	r4, r7, r5
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	00da      	lsls	r2, r3, #3
 8001110:	23a0      	movs	r3, #160	@ 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f004 ff76 	bl	8006008 <HAL_GPIO_ReadPin>
 800111c:	0003      	movs	r3, r0
 800111e:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001120:	197b      	adds	r3, r7, r5
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10a      	bne.n	800113e <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <Check_Tap_Tempo_Switch_State+0x98>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01e      	beq.n	800116e <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <Check_Tap_Tempo_Switch_State+0x98>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <Check_Tap_Tempo_Switch_State+0x98>)
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e017      	b.n	800116e <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <Check_Tap_Tempo_Switch_State+0x98>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b0e      	cmp	r3, #14
 8001144:	d013      	beq.n	800116e <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <Check_Tap_Tempo_Switch_State+0x9c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d109      	bne.n	8001162 <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <Check_Tap_Tempo_Switch_State+0x98>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <Check_Tap_Tempo_Switch_State+0x98>)
 8001158:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <Check_Tap_Tempo_Switch_State+0x9c>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e005      	b.n	800116e <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <Check_Tap_Tempo_Switch_State+0x9c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <Check_Tap_Tempo_Switch_State+0x9c>)
 800116c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <Check_Tap_Tempo_Switch_State+0x98>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e006      	b.n	800118c <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <Check_Tap_Tempo_Switch_State+0x98>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b0e      	cmp	r3, #14
 8001184:	d102      	bne.n	800118c <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 800118c:	2301      	movs	r3, #1
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b004      	add	sp, #16
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	20000018 	.word	0x20000018
 800119c:	20000530 	.word	0x20000530

080011a0 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 80011a0:	b510      	push	{r4, lr}
 80011a2:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a4:	2238      	movs	r2, #56	@ 0x38
 80011a6:	2100      	movs	r1, #0
 80011a8:	a804      	add	r0, sp, #16
 80011aa:	f007 fc94 	bl	8008ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ae:	2210      	movs	r2, #16
 80011b0:	2100      	movs	r1, #0
 80011b2:	4668      	mov	r0, sp
 80011b4:	f007 fc8f 	bl	8008ad6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2080      	movs	r0, #128	@ 0x80
 80011ba:	0080      	lsls	r0, r0, #2
 80011bc:	f005 f966 	bl	800648c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2380      	movs	r3, #128	@ 0x80
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011ca:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011cc:	3308      	adds	r3, #8
 80011ce:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	029b      	lsls	r3, r3, #10
 80011d4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80011d6:	23c0      	movs	r3, #192	@ 0xc0
 80011d8:	04db      	lsls	r3, r3, #19
 80011da:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011dc:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011de:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e2:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e6:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e8:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ec:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ee:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f005 f978 	bl	80064e4 <HAL_RCC_OscConfig>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i

void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fa:	e7fe      	b.n	80011fa <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fe:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001200:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001202:	0021      	movs	r1, r4
 8001204:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120a:	f005 fbd3 	bl	80069b4 <HAL_RCC_ClockConfig>
 800120e:	2800      	cmp	r0, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x76>
 8001212:	b672      	cpsid	i
  while (1)
 8001214:	e7fe      	b.n	8001214 <SystemClock_Config+0x74>
}
 8001216:	b012      	add	sp, #72	@ 0x48
 8001218:	bd10      	pop	{r4, pc}
	...

0800121c <MX_ADC1_Init>:
{
 800121c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	250c      	movs	r5, #12
 8001220:	2100      	movs	r1, #0
 8001222:	002a      	movs	r2, r5
 8001224:	a801      	add	r0, sp, #4
 8001226:	f007 fc56 	bl	8008ad6 <memset>
  hadc1.Instance = ADC1;
 800122a:	4c33      	ldr	r4, [pc, #204]	@ (80012f8 <MX_ADC1_Init+0xdc>)
 800122c:	4b33      	ldr	r3, [pc, #204]	@ (80012fc <MX_ADC1_Init+0xe0>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800122e:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 8001230:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001232:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001234:	0392      	lsls	r2, r2, #14
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001236:	05db      	lsls	r3, r3, #23
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001238:	6122      	str	r2, [r4, #16]
  hadc1.Init.NbrOfConversion = 5;
 800123a:	2205      	movs	r2, #5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800123c:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800123e:	2300      	movs	r3, #0
  hadc1.Init.NbrOfConversion = 5;
 8001240:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001242:	1c62      	adds	r2, r4, #1
 8001244:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001246:	0022      	movs	r2, r4
 8001248:	322c      	adds	r2, #44	@ 0x2c
 800124a:	7013      	strb	r3, [r2, #0]
  hadc1.Init.OversamplingMode = DISABLE;
 800124c:	0022      	movs	r2, r4
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800124e:	2608      	movs	r6, #8
  hadc1.Init.OversamplingMode = DISABLE;
 8001250:	323c      	adds	r2, #60	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001252:	0020      	movs	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001254:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001256:	60e3      	str	r3, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001258:	6166      	str	r6, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800125a:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800125c:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125e:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001260:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001262:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001264:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001266:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001268:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800126a:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	f003 fe8c 	bl	8004f88 <HAL_ADC_Init>
 8001270:	2800      	cmp	r0, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x5c>
 8001274:	b672      	cpsid	i
  while (1)
 8001276:	e7fe      	b.n	8001276 <MX_ADC1_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_0;
 8001278:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127a:	9002      	str	r0, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800127c:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127e:	a901      	add	r1, sp, #4
 8001280:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001282:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	f003 ffe8 	bl	8005258 <HAL_ADC_ConfigChannel>
 8001288:	2800      	cmp	r0, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x74>
 800128c:	b672      	cpsid	i
  while (1)
 800128e:	e7fe      	b.n	800128e <MX_ADC1_Init+0x72>
  sConfig.Channel = ADC_CHANNEL_1;
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <MX_ADC1_Init+0xe4>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001292:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_1;
 8001294:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001296:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	0020      	movs	r0, r4
 800129a:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800129c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	f003 ffdb 	bl	8005258 <HAL_ADC_ConfigChannel>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC1_Init+0x8e>
 80012a6:	b672      	cpsid	i
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MX_ADC1_Init+0x8c>
  sConfig.Channel = ADC_CHANNEL_4;
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_ADC1_Init+0xe8>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012ac:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	a901      	add	r1, sp, #4
 80012b0:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80012b2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012b4:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b6:	f003 ffcf 	bl	8005258 <HAL_ADC_ConfigChannel>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0xa6>
 80012be:	b672      	cpsid	i
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_5;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_ADC1_Init+0xec>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012c4:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	a901      	add	r1, sp, #4
 80012c8:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80012ca:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012cc:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ce:	f003 ffc3 	bl	8005258 <HAL_ADC_ConfigChannel>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0xbe>
 80012d6:	b672      	cpsid	i
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MX_ADC1_Init+0xbc>
  sConfig.Channel = ADC_CHANNEL_6;
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_ADC1_Init+0xf0>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012dc:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_6;
 80012de:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012e0:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	0020      	movs	r0, r4
 80012e4:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012e6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	f003 ffb6 	bl	8005258 <HAL_ADC_ConfigChannel>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0xd8>
 80012f0:	b672      	cpsid	i
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <MX_ADC1_Init+0xd6>
}
 80012f4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	20000bdc 	.word	0x20000bdc
 80012fc:	40012400 	.word	0x40012400
 8001300:	04000002 	.word	0x04000002
 8001304:	10000010 	.word	0x10000010
 8001308:	14000020 	.word	0x14000020
 800130c:	18000040 	.word	0x18000040

08001310 <MX_TIM16_Init>:
{
 8001310:	b530      	push	{r4, r5, lr}
 8001312:	b095      	sub	sp, #84	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001314:	221c      	movs	r2, #28
 8001316:	2100      	movs	r1, #0
 8001318:	4668      	mov	r0, sp
 800131a:	f007 fbdc 	bl	8008ad6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800131e:	2234      	movs	r2, #52	@ 0x34
 8001320:	2100      	movs	r1, #0
 8001322:	a807      	add	r0, sp, #28
 8001324:	f007 fbd7 	bl	8008ad6 <memset>
  htim16.Instance = TIM16;
 8001328:	4c21      	ldr	r4, [pc, #132]	@ (80013b0 <MX_TIM16_Init+0xa0>)
 800132a:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <MX_TIM16_Init+0xa4>)
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800132c:	2280      	movs	r2, #128	@ 0x80
  htim16.Instance = TIM16;
 800132e:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = 0;
 8001330:	2300      	movs	r3, #0
  htim16.Init.Period = 255;
 8001332:	25ff      	movs	r5, #255	@ 0xff
  htim16.Init.Prescaler = 0;
 8001334:	6063      	str	r3, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	60a3      	str	r3, [r4, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001338:	0092      	lsls	r2, r2, #2
  htim16.Init.RepetitionCounter = 0;
 800133a:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800133c:	0020      	movs	r0, r4
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800133e:	3380      	adds	r3, #128	@ 0x80
  htim16.Init.Period = 255;
 8001340:	60e5      	str	r5, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001342:	6122      	str	r2, [r4, #16]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001344:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001346:	f006 fc7f 	bl	8007c48 <HAL_TIM_Base_Init>
 800134a:	2800      	cmp	r0, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM16_Init+0x42>
 800134e:	b672      	cpsid	i
  while (1)
 8001350:	e7fe      	b.n	8001350 <MX_TIM16_Init+0x40>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001352:	0020      	movs	r0, r4
 8001354:	f006 fcac 	bl	8007cb0 <HAL_TIM_OC_Init>
 8001358:	1e02      	subs	r2, r0, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM16_Init+0x50>
 800135c:	b672      	cpsid	i
  while (1)
 800135e:	e7fe      	b.n	800135e <MX_TIM16_Init+0x4e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001360:	9000      	str	r0, [sp, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001362:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001364:	9003      	str	r0, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001366:	9004      	str	r0, [sp, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001368:	9005      	str	r0, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136a:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136c:	4669      	mov	r1, sp
 800136e:	0020      	movs	r0, r4
  sConfigOC.Pulse = 255;
 8001370:	9501      	str	r5, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	f005 fffd 	bl	8007370 <HAL_TIM_OC_ConfigChannel>
 8001376:	2800      	cmp	r0, #0
 8001378:	d001      	beq.n	800137e <MX_TIM16_Init+0x6e>
 800137a:	b672      	cpsid	i
  while (1)
 800137c:	e7fe      	b.n	800137c <MX_TIM16_Init+0x6c>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 800137e:	2108      	movs	r1, #8
 8001380:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001382:	9007      	str	r0, [sp, #28]
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001384:	6993      	ldr	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001386:	9008      	str	r0, [sp, #32]
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001388:	438b      	bics	r3, r1
 800138a:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138c:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138e:	9009      	str	r0, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.DeadTime = 0;
 8001390:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001392:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001394:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001396:	900d      	str	r0, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001398:	9013      	str	r0, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800139a:	a907      	add	r1, sp, #28
 800139c:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800139e:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80013a0:	f006 fd56 	bl	8007e50 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM16_Init+0x9c>
 80013a8:	b672      	cpsid	i
  while (1)
 80013aa:	e7fe      	b.n	80013aa <MX_TIM16_Init+0x9a>
}
 80013ac:	b015      	add	sp, #84	@ 0x54
 80013ae:	bd30      	pop	{r4, r5, pc}
 80013b0:	2000094c 	.word	0x2000094c
 80013b4:	40014400 	.word	0x40014400

080013b8 <MX_TIM2_Init>:
{
 80013b8:	b510      	push	{r4, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013bc:	2210      	movs	r2, #16
 80013be:	2100      	movs	r1, #0
 80013c0:	a804      	add	r0, sp, #16
 80013c2:	f007 fb88 	bl	8008ad6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c6:	220c      	movs	r2, #12
 80013c8:	2100      	movs	r1, #0
 80013ca:	a801      	add	r0, sp, #4
 80013cc:	f007 fb83 	bl	8008ad6 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013d0:	2210      	movs	r2, #16
 80013d2:	2100      	movs	r1, #0
 80013d4:	a808      	add	r0, sp, #32
 80013d6:	f007 fb7e 	bl	8008ad6 <memset>
  htim2.Instance = TIM2;
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	4c21      	ldr	r4, [pc, #132]	@ (8001464 <MX_TIM2_Init+0xac>)
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 64 - 1;
 80013e2:	233f      	movs	r3, #63	@ 0x3f
 80013e4:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 2097152 - 1;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_TIM2_Init+0xb0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ec:	0020      	movs	r0, r4
  htim2.Init.Period = 2097152 - 1;
 80013ee:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f6:	3b81      	subs	r3, #129	@ 0x81
 80013f8:	3bff      	subs	r3, #255	@ 0xff
 80013fa:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013fc:	f006 fc24 	bl	8007c48 <HAL_TIM_Base_Init>
 8001400:	2800      	cmp	r0, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x50>
 8001404:	b672      	cpsid	i
  while (1)
 8001406:	e7fe      	b.n	8001406 <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140e:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001412:	f006 f943 	bl	800769c <HAL_TIM_ConfigClockSource>
 8001416:	2800      	cmp	r0, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x66>
 800141a:	b672      	cpsid	i
  while (1)
 800141c:	e7fe      	b.n	800141c <MX_TIM2_Init+0x64>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800141e:	0020      	movs	r0, r4
 8001420:	f006 fcae 	bl	8007d80 <HAL_TIM_IC_Init>
 8001424:	2800      	cmp	r0, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x74>
 8001428:	b672      	cpsid	i
  while (1)
 800142a:	e7fe      	b.n	800142a <MX_TIM2_Init+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001430:	a901      	add	r1, sp, #4
 8001432:	0020      	movs	r0, r4
 8001434:	f006 fcd8 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	1e02      	subs	r2, r0, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x88>
 800143c:	b672      	cpsid	i
  while (1)
 800143e:	e7fe      	b.n	800143e <MX_TIM2_Init+0x86>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001440:	2302      	movs	r3, #2
 8001442:	9308      	str	r3, [sp, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001444:	3b01      	subs	r3, #1
 8001446:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001448:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigIC.ICFilter = 15;
 800144a:	330e      	adds	r3, #14
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800144c:	0020      	movs	r0, r4
 800144e:	a908      	add	r1, sp, #32
  sConfigIC.ICFilter = 15;
 8001450:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	f006 f86d 	bl	8007530 <HAL_TIM_IC_ConfigChannel>
 8001456:	2800      	cmp	r0, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0xa6>
 800145a:	b672      	cpsid	i
  while (1)
 800145c:	e7fe      	b.n	800145c <MX_TIM2_Init+0xa4>
}
 800145e:	b00c      	add	sp, #48	@ 0x30
 8001460:	bd10      	pop	{r4, pc}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	20000890 	.word	0x20000890
 8001468:	001fffff 	.word	0x001fffff

0800146c <MX_TIM3_Init>:
{
 800146c:	b510      	push	{r4, lr}
 800146e:	b08e      	sub	sp, #56	@ 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001470:	2210      	movs	r2, #16
 8001472:	2100      	movs	r1, #0
 8001474:	a803      	add	r0, sp, #12
 8001476:	f007 fb2e 	bl	8008ad6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	220c      	movs	r2, #12
 800147c:	2100      	movs	r1, #0
 800147e:	4668      	mov	r0, sp
 8001480:	f007 fb29 	bl	8008ad6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001484:	221c      	movs	r2, #28
 8001486:	2100      	movs	r1, #0
 8001488:	a807      	add	r0, sp, #28
 800148a:	f007 fb24 	bl	8008ad6 <memset>
  htim3.Instance = TIM3;
 800148e:	4c22      	ldr	r4, [pc, #136]	@ (8001518 <MX_TIM3_Init+0xac>)
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <MX_TIM3_Init+0xb0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001492:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8001494:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <MX_TIM3_Init+0xb4>)
 8001498:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	2300      	movs	r3, #0
 800149c:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 4096 - 1;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_TIM3_Init+0xb8>)
 80014a0:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a8:	3b81      	subs	r3, #129	@ 0x81
 80014aa:	3bff      	subs	r3, #255	@ 0xff
 80014ac:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ae:	f006 fbcb 	bl	8007c48 <HAL_TIM_Base_Init>
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x4e>
 80014b6:	b672      	cpsid	i
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MX_TIM3_Init+0x4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ba:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014bc:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014be:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014c0:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c2:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014c4:	f006 f8ea 	bl	800769c <HAL_TIM_ConfigClockSource>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x64>
 80014cc:	b672      	cpsid	i
  while (1)
 80014ce:	e7fe      	b.n	80014ce <MX_TIM3_Init+0x62>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80014d0:	0020      	movs	r0, r4
 80014d2:	f006 fbed 	bl	8007cb0 <HAL_TIM_OC_Init>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x72>
 80014da:	b672      	cpsid	i
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MX_TIM3_Init+0x70>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	9000      	str	r0, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	9002      	str	r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e2:	4669      	mov	r1, sp
 80014e4:	0020      	movs	r0, r4
 80014e6:	f006 fc7f 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	1e02      	subs	r2, r0, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM3_Init+0x86>
 80014ee:	b672      	cpsid	i
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MX_TIM3_Init+0x84>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014f2:	9007      	str	r0, [sp, #28]
  sConfigOC.Pulse = 0;
 80014f4:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f8:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fa:	a907      	add	r1, sp, #28
 80014fc:	0020      	movs	r0, r4
 80014fe:	f005 ff37 	bl	8007370 <HAL_TIM_OC_ConfigChannel>
 8001502:	2800      	cmp	r0, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x9e>
 8001506:	b672      	cpsid	i
  while (1)
 8001508:	e7fe      	b.n	8001508 <MX_TIM3_Init+0x9c>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 800150a:	2108      	movs	r1, #8
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	6993      	ldr	r3, [r2, #24]
 8001510:	438b      	bics	r3, r1
 8001512:	6193      	str	r3, [r2, #24]
}
 8001514:	b00e      	add	sp, #56	@ 0x38
 8001516:	bd10      	pop	{r4, pc}
 8001518:	200007d4 	.word	0x200007d4
 800151c:	40000400 	.word	0x40000400
 8001520:	00007fff 	.word	0x00007fff
 8001524:	00000fff 	.word	0x00000fff

08001528 <MX_TIM1_Init>:
{
 8001528:	b530      	push	{r4, r5, lr}
 800152a:	b09d      	sub	sp, #116	@ 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152c:	2210      	movs	r2, #16
 800152e:	2100      	movs	r1, #0
 8001530:	a804      	add	r0, sp, #16
 8001532:	f007 fad0 	bl	8008ad6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	220c      	movs	r2, #12
 8001538:	2100      	movs	r1, #0
 800153a:	a801      	add	r0, sp, #4
 800153c:	f007 facb 	bl	8008ad6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001540:	221c      	movs	r2, #28
 8001542:	2100      	movs	r1, #0
 8001544:	a808      	add	r0, sp, #32
 8001546:	f007 fac6 	bl	8008ad6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800154a:	2234      	movs	r2, #52	@ 0x34
 800154c:	2100      	movs	r1, #0
 800154e:	a80f      	add	r0, sp, #60	@ 0x3c
 8001550:	f007 fac1 	bl	8008ad6 <memset>
  htim1.Instance = TIM1;
 8001554:	4c39      	ldr	r4, [pc, #228]	@ (800163c <MX_TIM1_Init+0x114>)
 8001556:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <MX_TIM1_Init+0x118>)
  htim1.Init.Period = 1024 - 1;
 8001558:	4a3a      	ldr	r2, [pc, #232]	@ (8001644 <MX_TIM1_Init+0x11c>)
  htim1.Instance = TIM1;
 800155a:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 1024 - 1;
 800155c:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = 0;
 800155e:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001560:	2280      	movs	r2, #128	@ 0x80
  htim1.Init.Prescaler = 0;
 8001562:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001566:	0052      	lsls	r2, r2, #1
  htim1.Init.RepetitionCounter = 0;
 8001568:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800156a:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800156c:	3380      	adds	r3, #128	@ 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800156e:	6122      	str	r2, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001570:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001572:	f006 fb69 	bl	8007c48 <HAL_TIM_Base_Init>
 8001576:	2800      	cmp	r0, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x56>
 800157a:	b672      	cpsid	i
  while (1)
 800157c:	e7fe      	b.n	800157c <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001580:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001584:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001588:	f006 f888 	bl	800769c <HAL_TIM_ConfigClockSource>
 800158c:	2800      	cmp	r0, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x6c>
 8001590:	b672      	cpsid	i
  while (1)
 8001592:	e7fe      	b.n	8001592 <MX_TIM1_Init+0x6a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001594:	0020      	movs	r0, r4
 8001596:	f006 fbbf 	bl	8007d18 <HAL_TIM_PWM_Init>
 800159a:	2800      	cmp	r0, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0x7a>
 800159e:	b672      	cpsid	i
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MX_TIM1_Init+0x78>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a4:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a8:	a901      	add	r1, sp, #4
 80015aa:	0020      	movs	r0, r4
 80015ac:	f006 fc1c 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x90>
 80015b4:	b672      	cpsid	i
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <MX_TIM1_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 80015ba:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015be:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c2:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c6:	2204      	movs	r2, #4
 80015c8:	0020      	movs	r0, r4
 80015ca:	a908      	add	r1, sp, #32
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ce:	f005 ff01 	bl	80073d4 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0xb2>
 80015d6:	b672      	cpsid	i
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MX_TIM1_Init+0xb0>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80015da:	6822      	ldr	r2, [r4, #0]
 80015dc:	4d1a      	ldr	r5, [pc, #104]	@ (8001648 <MX_TIM1_Init+0x120>)
 80015de:	6993      	ldr	r3, [r2, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015e0:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80015e2:	402b      	ands	r3, r5
 80015e4:	6193      	str	r3, [r2, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015e6:	a908      	add	r1, sp, #32
 80015e8:	220c      	movs	r2, #12
 80015ea:	f005 fef3 	bl	80073d4 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0xce>
 80015f2:	b672      	cpsid	i
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MX_TIM1_Init+0xcc>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80015f6:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f8:	900f      	str	r0, [sp, #60]	@ 0x3c
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80015fa:	69d3      	ldr	r3, [r2, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fc:	9010      	str	r0, [sp, #64]	@ 0x40
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80015fe:	402b      	ands	r3, r5
 8001600:	61d3      	str	r3, [r2, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	019b      	lsls	r3, r3, #6
 8001606:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001608:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160a:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800160e:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001610:	9015      	str	r0, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001612:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001614:	9017      	str	r0, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001616:	049b      	lsls	r3, r3, #18
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001618:	9019      	str	r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800161a:	901a      	str	r0, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161c:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800161e:	a90f      	add	r1, sp, #60	@ 0x3c
 8001620:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001622:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001624:	f006 fc14 	bl	8007e50 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	2800      	cmp	r0, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x108>
 800162c:	b672      	cpsid	i
  while (1)
 800162e:	e7fe      	b.n	800162e <MX_TIM1_Init+0x106>
  HAL_TIM_MspPostInit(&htim1);
 8001630:	0020      	movs	r0, r4
 8001632:	f003 f837 	bl	80046a4 <HAL_TIM_MspPostInit>
}
 8001636:	b01d      	add	sp, #116	@ 0x74
 8001638:	bd30      	pop	{r4, r5, pc}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	20000718 	.word	0x20000718
 8001640:	40012c00 	.word	0x40012c00
 8001644:	000003ff 	.word	0x000003ff
 8001648:	fffff7ff 	.word	0xfffff7ff

0800164c <MX_TIM17_Init>:
{
 800164c:	b530      	push	{r4, r5, lr}
 800164e:	b095      	sub	sp, #84	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001650:	221c      	movs	r2, #28
 8001652:	2100      	movs	r1, #0
 8001654:	4668      	mov	r0, sp
 8001656:	f007 fa3e 	bl	8008ad6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165a:	2234      	movs	r2, #52	@ 0x34
 800165c:	2100      	movs	r1, #0
 800165e:	a807      	add	r0, sp, #28
 8001660:	f007 fa39 	bl	8008ad6 <memset>
  htim17.Instance = TIM17;
 8001664:	4c21      	ldr	r4, [pc, #132]	@ (80016ec <MX_TIM17_Init+0xa0>)
 8001666:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <MX_TIM17_Init+0xa4>)
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001668:	2280      	movs	r2, #128	@ 0x80
  htim17.Instance = TIM17;
 800166a:	6023      	str	r3, [r4, #0]
  htim17.Init.Prescaler = 0;
 800166c:	2300      	movs	r3, #0
  htim17.Init.Period = TIM17_PERIOD_COUNT;
 800166e:	4d21      	ldr	r5, [pc, #132]	@ (80016f4 <MX_TIM17_Init+0xa8>)
  htim17.Init.Prescaler = 0;
 8001670:	6063      	str	r3, [r4, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	60a3      	str	r3, [r4, #8]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001674:	0092      	lsls	r2, r2, #2
  htim17.Init.RepetitionCounter = 0;
 8001676:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001678:	0020      	movs	r0, r4
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800167a:	3380      	adds	r3, #128	@ 0x80
  htim17.Init.Period = TIM17_PERIOD_COUNT;
 800167c:	60e5      	str	r5, [r4, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800167e:	6122      	str	r2, [r4, #16]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001680:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001682:	f006 fae1 	bl	8007c48 <HAL_TIM_Base_Init>
 8001686:	2800      	cmp	r0, #0
 8001688:	d001      	beq.n	800168e <MX_TIM17_Init+0x42>
 800168a:	b672      	cpsid	i
  while (1)
 800168c:	e7fe      	b.n	800168c <MX_TIM17_Init+0x40>
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800168e:	0020      	movs	r0, r4
 8001690:	f006 fb0e 	bl	8007cb0 <HAL_TIM_OC_Init>
 8001694:	1e02      	subs	r2, r0, #0
 8001696:	d001      	beq.n	800169c <MX_TIM17_Init+0x50>
 8001698:	b672      	cpsid	i
  while (1)
 800169a:	e7fe      	b.n	800169a <MX_TIM17_Init+0x4e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800169c:	9000      	str	r0, [sp, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169e:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a0:	9003      	str	r0, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a2:	9004      	str	r0, [sp, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a4:	9005      	str	r0, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a6:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a8:	4669      	mov	r1, sp
 80016aa:	0020      	movs	r0, r4
  sConfigOC.Pulse = TIM17_PERIOD_COUNT;
 80016ac:	9501      	str	r5, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ae:	f005 fe5f 	bl	8007370 <HAL_TIM_OC_ConfigChannel>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM17_Init+0x6e>
 80016b6:	b672      	cpsid	i
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MX_TIM17_Init+0x6c>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80016ba:	2308      	movs	r3, #8
 80016bc:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016be:	9007      	str	r0, [sp, #28]
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80016c0:	6991      	ldr	r1, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c2:	9008      	str	r0, [sp, #32]
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c8:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ca:	9009      	str	r0, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.DeadTime = 0;
 80016cc:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ce:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d0:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d2:	900d      	str	r0, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d4:	9013      	str	r0, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80016d6:	a907      	add	r1, sp, #28
 80016d8:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016da:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80016dc:	f006 fbb8 	bl	8007e50 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM17_Init+0x9c>
 80016e4:	b672      	cpsid	i
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <MX_TIM17_Init+0x9a>
}
 80016e8:	b015      	add	sp, #84	@ 0x54
 80016ea:	bd30      	pop	{r4, r5, pc}
 80016ec:	20000a08 	.word	0x20000a08
 80016f0:	40014800 	.word	0x40014800
 80016f4:	00002710 	.word	0x00002710

080016f8 <MX_LPTIM1_Init>:
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80016f8:	22e0      	movs	r2, #224	@ 0xe0
  hlptim1.Instance = LPTIM1;
 80016fa:	4810      	ldr	r0, [pc, #64]	@ (800173c <MX_LPTIM1_Init+0x44>)
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80016fc:	0112      	lsls	r2, r2, #4
{
 80016fe:	b510      	push	{r4, lr}
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001700:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001702:	4a0f      	ldr	r2, [pc, #60]	@ (8001740 <MX_LPTIM1_Init+0x48>)
  hlptim1.Instance = LPTIM1;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_LPTIM1_Init+0x4c>)
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001706:	6142      	str	r2, [r0, #20]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001708:	2280      	movs	r2, #128	@ 0x80
  hlptim1.Instance = LPTIM1;
 800170a:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800170c:	2300      	movs	r3, #0
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 800170e:	03d2      	lsls	r2, r2, #15
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001710:	6043      	str	r3, [r0, #4]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001712:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001714:	6242      	str	r2, [r0, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001716:	6283      	str	r3, [r0, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001718:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800171a:	6303      	str	r3, [r0, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800171c:	f004 fcba 	bl	8006094 <HAL_LPTIM_Init>
 8001720:	2800      	cmp	r0, #0
 8001722:	d001      	beq.n	8001728 <MX_LPTIM1_Init+0x30>
 8001724:	b672      	cpsid	i
  while (1)
 8001726:	e7fe      	b.n	8001726 <MX_LPTIM1_Init+0x2e>
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001728:	2202      	movs	r2, #2
 800172a:	0011      	movs	r1, r2
 800172c:	2011      	movs	r0, #17
 800172e:	f004 f8cb 	bl	80058c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001732:	2011      	movs	r0, #17
 8001734:	f004 f8f2 	bl	800591c <HAL_NVIC_EnableIRQ>
}
 8001738:	bd10      	pop	{r4, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	20000538 	.word	0x20000538
 8001740:	0000ffff 	.word	0x0000ffff
 8001744:	40007c00 	.word	0x40007c00

08001748 <MX_TIM14_Init>:
{
 8001748:	b530      	push	{r4, r5, lr}
 800174a:	b089      	sub	sp, #36	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174c:	221c      	movs	r2, #28
 800174e:	2100      	movs	r1, #0
 8001750:	a801      	add	r0, sp, #4
 8001752:	f007 f9c0 	bl	8008ad6 <memset>
  htim14.Init.Period = led_blink_period;
 8001756:	4d16      	ldr	r5, [pc, #88]	@ (80017b0 <MX_TIM14_Init+0x68>)
  htim14.Instance = TIM14;
 8001758:	4c16      	ldr	r4, [pc, #88]	@ (80017b4 <MX_TIM14_Init+0x6c>)
 800175a:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <MX_TIM14_Init+0x70>)
  htim14.Init.Period = led_blink_period;
 800175c:	682a      	ldr	r2, [r5, #0]
  htim14.Instance = TIM14;
 800175e:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001760:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <MX_TIM14_Init+0x74>)
  htim14.Init.Period = led_blink_period;
 8001762:	60e2      	str	r2, [r4, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001764:	2280      	movs	r2, #128	@ 0x80
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001766:	6063      	str	r3, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	2300      	movs	r3, #0
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800176a:	0092      	lsls	r2, r2, #2
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800176c:	0020      	movs	r0, r4
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	60a3      	str	r3, [r4, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001770:	6122      	str	r2, [r4, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001774:	f006 fa68 	bl	8007c48 <HAL_TIM_Base_Init>
 8001778:	2800      	cmp	r0, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM14_Init+0x38>
 800177c:	b672      	cpsid	i
  while (1)
 800177e:	e7fe      	b.n	800177e <MX_TIM14_Init+0x36>
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001780:	0020      	movs	r0, r4
 8001782:	f006 fa95 	bl	8007cb0 <HAL_TIM_OC_Init>
 8001786:	1e02      	subs	r2, r0, #0
 8001788:	d001      	beq.n	800178e <MX_TIM14_Init+0x46>
 800178a:	b672      	cpsid	i
  while (1)
 800178c:	e7fe      	b.n	800178c <MX_TIM14_Init+0x44>
  sConfigOC.Pulse = led_blink_period - 1;
 800178e:	682b      	ldr	r3, [r5, #0]
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001790:	9001      	str	r0, [sp, #4]
  sConfigOC.Pulse = led_blink_period - 1;
 8001792:	3b01      	subs	r3, #1
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001794:	9003      	str	r0, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001796:	9005      	str	r0, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001798:	a901      	add	r1, sp, #4
 800179a:	0020      	movs	r0, r4
  sConfigOC.Pulse = led_blink_period - 1;
 800179c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179e:	f005 fde7 	bl	8007370 <HAL_TIM_OC_ConfigChannel>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM14_Init+0x62>
 80017a6:	b672      	cpsid	i
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MX_TIM14_Init+0x60>
}
 80017aa:	b009      	add	sp, #36	@ 0x24
 80017ac:	bd30      	pop	{r4, r5, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	20000014 	.word	0x20000014
 80017b4:	20000ac4 	.word	0x20000ac4
 80017b8:	40002000 	.word	0x40002000
 80017bc:	00007fff 	.word	0x00007fff

080017c0 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 80017c0:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <MX_USART2_UART_Init+0x30>)
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_USART2_UART_Init+0x34>)
{
 80017c4:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80017c6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 31250;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <MX_USART2_UART_Init+0x38>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ca:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 31250;
 80017cc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d0:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d6:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d8:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017da:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017dc:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017de:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e0:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e2:	f007 f8ab 	bl	800893c <HAL_UART_Init>
 80017e6:	2800      	cmp	r0, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART2_UART_Init+0x2e>
 80017ea:	b672      	cpsid	i
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MX_USART2_UART_Init+0x2c>
}
 80017ee:	bd10      	pop	{r4, pc}
 80017f0:	2000064c 	.word	0x2000064c
 80017f4:	40004400 	.word	0x40004400
 80017f8:	00007a12 	.word	0x00007a12

080017fc <MX_DMA_Init>:
{
 80017fc:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	2101      	movs	r1, #1
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MX_DMA_Init+0x38>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001802:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001806:	430a      	orrs	r2, r1
 8001808:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180e:	400b      	ands	r3, r1
 8001810:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001812:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001814:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001816:	f004 f857 	bl	80058c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800181a:	2009      	movs	r0, #9
 800181c:	f004 f87e 	bl	800591c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8001820:	2202      	movs	r2, #2
 8001822:	200a      	movs	r0, #10
 8001824:	0011      	movs	r1, r2
 8001826:	f004 f84f 	bl	80058c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800182a:	200a      	movs	r0, #10
 800182c:	f004 f876 	bl	800591c <HAL_NVIC_EnableIRQ>
}
 8001830:	bd07      	pop	{r0, r1, r2, pc}
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	40021000 	.word	0x40021000

08001838 <MX_GPIO_Init>:
{
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	2404      	movs	r4, #4
{
 800183c:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	2214      	movs	r2, #20
 8001840:	2100      	movs	r1, #0
 8001842:	a805      	add	r0, sp, #20
 8001844:	f007 f947 	bl	8008ad6 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001848:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184c:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	4b42      	ldr	r3, [pc, #264]	@ (8001958 <MX_GPIO_Init+0x120>)
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001850:	4842      	ldr	r0, [pc, #264]	@ (800195c <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8001854:	27a0      	movs	r7, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4322      	orrs	r2, r4
 8001858:	635a      	str	r2, [r3, #52]	@ 0x34
 800185a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 800185c:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4022      	ands	r2, r4
 8001860:	9201      	str	r2, [sp, #4]
 8001862:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001866:	430a      	orrs	r2, r1
 8001868:	635a      	str	r2, [r3, #52]	@ 0x34
 800186a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800186c:	400a      	ands	r2, r1
 800186e:	9202      	str	r2, [sp, #8]
 8001870:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001874:	1849      	adds	r1, r1, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	432a      	orrs	r2, r5
 8001878:	635a      	str	r2, [r3, #52]	@ 0x34
 800187a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800187c:	402a      	ands	r2, r5
 800187e:	9203      	str	r2, [sp, #12]
 8001880:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001884:	4332      	orrs	r2, r6
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34
 8001888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	4033      	ands	r3, r6
 800188e:	9304      	str	r3, [sp, #16]
 8001890:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001892:	f004 fbbf 	bl	8006014 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001896:	2388      	movs	r3, #136	@ 0x88
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8001898:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189c:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800189e:	a905      	add	r1, sp, #20
 80018a0:	482f      	ldr	r0, [pc, #188]	@ (8001960 <MX_GPIO_Init+0x128>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f004 fafd 	bl	8005ea4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80018aa:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80018ac:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80018ae:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80018b0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80018b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f004 faf3 	bl	8005ea4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin;
 80018be:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80018c0:	a905      	add	r1, sp, #20
 80018c2:	4826      	ldr	r0, [pc, #152]	@ (800195c <MX_GPIO_Init+0x124>)
  GPIO_InitStruct.Pin = LD3_Pin;
 80018c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f004 faea 	bl	8005ea4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80018d0:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80018d2:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80018d4:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80018d6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80018d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018dc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80018de:	f004 fae1 	bl	8005ea4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MONITOR_Pin;
 80018e2:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80018e4:	a905      	add	r1, sp, #20
 80018e6:	481f      	ldr	r0, [pc, #124]	@ (8001964 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pin = MONITOR_Pin;
 80018e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f004 fad8 	bl	8005ea4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 80018f4:	2310      	movs	r3, #16
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 80018f6:	a905      	add	r1, sp, #20
 80018f8:	481a      	ldr	r0, [pc, #104]	@ (8001964 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 80018fa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 8001902:	f004 facf 	bl	8005ea4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800190a:	23c4      	movs	r3, #196	@ 0xc4
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800190c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800190e:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8001910:	4814      	ldr	r0, [pc, #80]	@ (8001964 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001912:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8001914:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8001918:	f004 fac4 	bl	8005ea4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 800191c:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 800191e:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8001920:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8001922:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8001924:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 800192c:	f004 faba 	bl	8005ea4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8001930:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8001932:	0038      	movs	r0, r7
 8001934:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8001936:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 800193e:	f004 fab1 	bl	8005ea4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 8001942:	0032      	movs	r2, r6
 8001944:	0031      	movs	r1, r6
 8001946:	2007      	movs	r0, #7
 8001948:	f003 ffbe 	bl	80058c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800194c:	2007      	movs	r0, #7
 800194e:	f003 ffe5 	bl	800591c <HAL_NVIC_EnableIRQ>
}
 8001952:	b00b      	add	sp, #44	@ 0x2c
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	40021000 	.word	0x40021000
 800195c:	50000800 	.word	0x50000800
 8001960:	50001400 	.word	0x50001400
 8001964:	50000400 	.word	0x50000400

08001968 <Error_Handler>:
 8001968:	b672      	cpsid	i
  while (1)
 800196a:	e7fe      	b.n	800196a <Error_Handler+0x2>

0800196c <System_Init>:
  {

  }
}

void System_Init(void){
 800196c:	b510      	push	{r4, lr}
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800196e:	f003 fa8d 	bl	8004e8c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001972:	f7ff fc15 	bl	80011a0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001976:	f7ff ff5f 	bl	8001838 <MX_GPIO_Init>
	MX_DMA_Init();
 800197a:	f7ff ff3f 	bl	80017fc <MX_DMA_Init>
	MX_USART2_UART_Init();
 800197e:	f7ff ff1f 	bl	80017c0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001982:	f7ff fc4b 	bl	800121c <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8001986:	f7ff fcc3 	bl	8001310 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 800198a:	f7ff fd15 	bl	80013b8 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 800198e:	f7ff fd6d 	bl	800146c <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 8001992:	f7ff fdc9 	bl	8001528 <MX_TIM1_Init>
	MX_TIM17_Init();
 8001996:	f7ff fe59 	bl	800164c <MX_TIM17_Init>
	MX_TIM14_Init();
 800199a:	f7ff fed5 	bl	8001748 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 800199e:	f7ff feab 	bl	80016f8 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80019a2:	4c1c      	ldr	r4, [pc, #112]	@ (8001a14 <System_Init+0xa8>)
 80019a4:	0020      	movs	r0, r4
 80019a6:	f003 fed9 	bl	800575c <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80019aa:	210e      	movs	r1, #14
 80019ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001a18 <System_Init+0xac>)
 80019ae:	481b      	ldr	r0, [pc, #108]	@ (8001a1c <System_Init+0xb0>)
 80019b0:	f005 fbf5 	bl	800719e <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80019b4:	2100      	movs	r1, #0
 80019b6:	0020      	movs	r0, r4
 80019b8:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <System_Init+0xb4>)
 80019ba:	f003 fc1b 	bl	80051f4 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 80019be:	4c19      	ldr	r4, [pc, #100]	@ (8001a24 <System_Init+0xb8>)
 80019c0:	2112      	movs	r1, #18
 80019c2:	0020      	movs	r0, r4
 80019c4:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <System_Init+0xbc>)
 80019c6:	f005 fbea 	bl	800719e <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 80019ca:	210e      	movs	r1, #14
 80019cc:	0020      	movs	r0, r4
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <System_Init+0xc0>)
 80019d0:	f005 fbe5 	bl	800719e <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 80019d4:	2114      	movs	r1, #20
 80019d6:	4a16      	ldr	r2, [pc, #88]	@ (8001a30 <System_Init+0xc4>)
 80019d8:	4816      	ldr	r0, [pc, #88]	@ (8001a34 <System_Init+0xc8>)
 80019da:	f005 fbe0 	bl	800719e <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 80019de:	4c16      	ldr	r4, [pc, #88]	@ (8001a38 <System_Init+0xcc>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	0020      	movs	r0, r4
 80019e4:	4a15      	ldr	r2, [pc, #84]	@ (8001a3c <System_Init+0xd0>)
 80019e6:	f006 fb8e 	bl	8008106 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 80019ea:	2103      	movs	r1, #3
 80019ec:	0020      	movs	r0, r4
 80019ee:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <System_Init+0xd4>)
 80019f0:	f006 fb89 	bl	8008106 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 80019f4:	2102      	movs	r1, #2
 80019f6:	4a13      	ldr	r2, [pc, #76]	@ (8001a44 <System_Init+0xd8>)
 80019f8:	4813      	ldr	r0, [pc, #76]	@ (8001a48 <System_Init+0xdc>)
 80019fa:	f004 fc25 	bl	8006248 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 80019fe:	2114      	movs	r1, #20
 8001a00:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <System_Init+0xe0>)
 8001a02:	4813      	ldr	r0, [pc, #76]	@ (8001a50 <System_Init+0xe4>)
 8001a04:	f005 fbcb 	bl	800719e <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 8001a08:	2114      	movs	r1, #20
 8001a0a:	4a12      	ldr	r2, [pc, #72]	@ (8001a54 <System_Init+0xe8>)
 8001a0c:	4812      	ldr	r0, [pc, #72]	@ (8001a58 <System_Init+0xec>)
 8001a0e:	f005 fbc6 	bl	800719e <HAL_TIM_RegisterCallback>
}
 8001a12:	bd10      	pop	{r4, pc}
 8001a14:	20000bdc 	.word	0x20000bdc
 8001a18:	08001a5d 	.word	0x08001a5d
 8001a1c:	2000094c 	.word	0x2000094c
 8001a20:	08001ac1 	.word	0x08001ac1
 8001a24:	20000890 	.word	0x20000890
 8001a28:	08001b7d 	.word	0x08001b7d
 8001a2c:	08001c99 	.word	0x08001c99
 8001a30:	08001da5 	.word	0x08001da5
 8001a34:	200007d4 	.word	0x200007d4
 8001a38:	2000064c 	.word	0x2000064c
 8001a3c:	08001ee1 	.word	0x08001ee1
 8001a40:	08001ef1 	.word	0x08001ef1
 8001a44:	080032d1 	.word	0x080032d1
 8001a48:	20000538 	.word	0x20000538
 8001a4c:	08003a01 	.word	0x08003a01
 8001a50:	20000a08 	.word	0x20000a08
 8001a54:	08003a49 	.word	0x08003a49
 8001a58:	20000ac4 	.word	0x20000ac4

08001a5c <TIM16_callback>:
#include "custom_callbacks.h"

void __attribute__((optimize("O0")))TIM16_callback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MONITOR_2_GPIO_Port, MONITOR_2_Pin, 1);
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <TIM16_callback+0x54>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	2110      	movs	r1, #16
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f004 fad2 	bl	8006014 <HAL_GPIO_WritePin>

	Set_Oscillator_Values(&params);
 8001a70:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <TIM16_callback+0x58>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f002 fa92 	bl	8003f9c <Set_Oscillator_Values>

	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <TIM16_callback+0x58>)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f002 faa5 	bl	8003fcc <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8001a82:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <TIM16_callback+0x5c>)
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <TIM16_callback+0x58>)
 8001a86:	0011      	movs	r1, r2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f002 fb1f 	bl	80040cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>

	Set_Status_Bit(&statuses, Waiting_For_Processing);
 8001a8e:	2380      	movs	r3, #128	@ 0x80
 8001a90:	01da      	lsls	r2, r3, #7
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <TIM16_callback+0x60>)
 8001a94:	0011      	movs	r1, r2
 8001a96:	0018      	movs	r0, r3
 8001a98:	f003 f981 	bl	8004d9e <Set_Status_Bit>

	HAL_GPIO_WritePin(MONITOR_2_GPIO_Port, MONITOR_2_Pin, 0);
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <TIM16_callback+0x54>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f004 fab6 	bl	8006014 <HAL_GPIO_WritePin>
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	50000400 	.word	0x50000400
 8001ab4:	20000cec 	.word	0x20000cec
 8001ab8:	2000001a 	.word	0x2000001a
 8001abc:	20000d28 	.word	0x20000d28

08001ac0 <ADC_DMA_conversion_complete_callback>:

void __attribute__((optimize("O0")))ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f003 fe08 	bl	80056e0 <HAL_ADC_Stop_DMA>

	if(Get_Status_Bit(&statuses, Waiting_For_Processing) == YES){
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	01da      	lsls	r2, r3, #7
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <ADC_DMA_conversion_complete_callback+0xa8>)
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f003 f94c 	bl	8004d76 <Get_Status_Bit>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d13a      	bne.n	8001b5a <ADC_DMA_conversion_complete_callback+0x9a>

		Clear_Status_Bit(&statuses, Waiting_For_Processing);
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	01da      	lsls	r2, r3, #7
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <ADC_DMA_conversion_complete_callback+0xa8>)
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f003 f968 	bl	8004dc2 <Clear_Status_Bit>

		Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8001af2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <ADC_DMA_conversion_complete_callback+0xac>)
 8001af4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <ADC_DMA_conversion_complete_callback+0xb0>)
 8001af6:	0011      	movs	r1, r2
 8001af8:	0018      	movs	r0, r3
 8001afa:	f002 fb2f 	bl	800415c <Process_ADC_Conversion_Values>

		//copies into running params based on mode
		Update_Params_Based_On_Mode_Selected();
 8001afe:	f7fe ff33 	bl	8000968 <Update_Params_Based_On_Mode_Selected>

		enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8001b02:	250f      	movs	r5, #15
 8001b04:	197c      	adds	r4, r7, r5
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <ADC_DMA_conversion_complete_callback+0xa8>)
 8001b08:	2108      	movs	r1, #8
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f003 f933 	bl	8004d76 <Get_Status_Bit>
 8001b10:	0003      	movs	r3, r0
 8001b12:	7023      	strb	r3, [r4, #0]

		//overwrites raw speed values if a sync has completed
		if(first_sync_complete == YES){
 8001b14:	197b      	adds	r3, r7, r5
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10a      	bne.n	8001b32 <ADC_DMA_conversion_complete_callback+0x72>

			params.raw_start_value = params_working.raw_start_value;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <ADC_DMA_conversion_complete_callback+0xb4>)
 8001b1e:	8a5b      	ldrh	r3, [r3, #18]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <ADC_DMA_conversion_complete_callback+0xb8>)
 8001b24:	825a      	strh	r2, [r3, #18]
			params.raw_prescaler = params_working.raw_prescaler;
 8001b26:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <ADC_DMA_conversion_complete_callback+0xb4>)
 8001b28:	8b5b      	ldrh	r3, [r3, #26]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <ADC_DMA_conversion_complete_callback+0xb8>)
 8001b2e:	835a      	strh	r2, [r3, #26]
 8001b30:	e003      	b.n	8001b3a <ADC_DMA_conversion_complete_callback+0x7a>
		}
		else{

			Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <ADC_DMA_conversion_complete_callback+0xb8>)
 8001b34:	0018      	movs	r0, r3
 8001b36:	f002 fa1d 	bl	8003f74 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
		}

		Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <ADC_DMA_conversion_complete_callback+0xb8>)
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f002 fec8 	bl	80048d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

		//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
		if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <ADC_DMA_conversion_complete_callback+0xa8>)
 8001b44:	2110      	movs	r1, #16
 8001b46:	0018      	movs	r0, r3
 8001b48:	f003 f915 	bl	8004d76 <Get_Status_Bit>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d104      	bne.n	8001b5a <ADC_DMA_conversion_complete_callback+0x9a>

			Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <ADC_DMA_conversion_complete_callback+0xa8>)
 8001b52:	2110      	movs	r1, #16
 8001b54:	0018      	movs	r0, r3
 8001b56:	f003 f922 	bl	8004d9e <Set_Status_Bit>
		}

	}

	Start_DMA_Timer();
 8001b5a:	f003 f8ad 	bl	8004cb8 <Start_DMA_Timer>
}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	20000d28 	.word	0x20000d28
 8001b6c:	20000d10 	.word	0x20000d10
 8001b70:	20000cc8 	.word	0x20000cc8
 8001b74:	20000c80 	.word	0x20000c80
 8001b78:	20000cec 	.word	0x20000cec

08001b7c <TIM2_ch1_IP_capture_callback>:

void __attribute__((optimize("O0")))TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2100      	movs	r1, #0
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f005 faf1 	bl	8007170 <HAL_TIM_ReadCapturedValue>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <TIM2_ch1_IP_capture_callback+0x100>)
 8001b92:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8001b94:	4b39      	ldr	r3, [pc, #228]	@ (8001c7c <TIM2_ch1_IP_capture_callback+0x100>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0a5b      	lsrs	r3, r3, #9
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <TIM2_ch1_IP_capture_callback+0x104>)
 8001b9e:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8001ba0:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8001baa:	f002 f9ab 	bl	8003f04 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8001bae:	4b35      	ldr	r3, [pc, #212]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 8001bb4:	4b33      	ldr	r3, [pc, #204]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8001bba:	e05b      	b.n	8001c74 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d124      	bne.n	8001c10 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <TIM2_ch1_IP_capture_callback+0x104>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	d951      	bls.n	8001c74 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8001bd0:	f002 f982 	bl	8003ed8 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8001bda:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8001be0:	4a29      	ldr	r2, [pc, #164]	@ (8001c88 <TIM2_ch1_IP_capture_callback+0x10c>)
 8001be2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <TIM2_ch1_IP_capture_callback+0x110>)
 8001be4:	0011      	movs	r1, r2
 8001be6:	0018      	movs	r0, r3
 8001be8:	f002 f96c 	bl	8003ec4 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8001bec:	4b28      	ldr	r3, [pc, #160]	@ (8001c90 <TIM2_ch1_IP_capture_callback+0x114>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d004      	beq.n	8001c00 <TIM2_ch1_IP_capture_callback+0x84>
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <TIM2_ch1_IP_capture_callback+0x114>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b07      	cmp	r3, #7
 8001bfe:	d101      	bne.n	8001c04 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8001c00:	f002 fbb6 	bl	8004370 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8001c04:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <TIM2_ch1_IP_capture_callback+0x118>)
 8001c06:	2104      	movs	r1, #4
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f003 f8c8 	bl	8004d9e <Set_Status_Bit>
}
 8001c0e:	e031      	b.n	8001c74 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8001c10:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d108      	bne.n	8001c2c <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8001c1a:	f002 f973 	bl	8003f04 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001c20:	2203      	movs	r2, #3
 8001c22:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8001c24:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	705a      	strb	r2, [r3, #1]
}
 8001c2a:	e023      	b.n	8001c74 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d11e      	bne.n	8001c74 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8001c36:	f002 f94f 	bl	8003ed8 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <TIM2_ch1_IP_capture_callback+0x108>)
 8001c42:	2203      	movs	r2, #3
 8001c44:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8001c46:	4a10      	ldr	r2, [pc, #64]	@ (8001c88 <TIM2_ch1_IP_capture_callback+0x10c>)
 8001c48:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <TIM2_ch1_IP_capture_callback+0x110>)
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f002 f939 	bl	8003ec4 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <TIM2_ch1_IP_capture_callback+0x114>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d004      	beq.n	8001c66 <TIM2_ch1_IP_capture_callback+0xea>
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <TIM2_ch1_IP_capture_callback+0x114>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b07      	cmp	r3, #7
 8001c64:	d101      	bne.n	8001c6a <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8001c66:	f002 fb83 	bl	8004370 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <TIM2_ch1_IP_capture_callback+0x118>)
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f003 f895 	bl	8004d9e <Set_Status_Bit>
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000c7c 	.word	0x20000c7c
 8001c80:	20000c7a 	.word	0x20000c7a
 8001c84:	20000422 	.word	0x20000422
 8001c88:	20000ca4 	.word	0x20000ca4
 8001c8c:	20000cec 	.word	0x20000cec
 8001c90:	2000042c 	.word	0x2000042c
 8001c94:	20000d28 	.word	0x20000d28

08001c98 <TIM2_ch1_overflow_callback>:


void __attribute__((optimize("O0")))TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8001ca0:	240c      	movs	r4, #12
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001ca6:	7852      	ldrb	r2, [r2, #1]
 8001ca8:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8001caa:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <TIM2_ch1_overflow_callback+0xfc>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d131      	bne.n	8001d18 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 8001cb4:	4b37      	ldr	r3, [pc, #220]	@ (8001d94 <TIM2_ch1_overflow_callback+0xfc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8001cba:	4b36      	ldr	r3, [pc, #216]	@ (8001d94 <TIM2_ch1_overflow_callback+0xfc>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8001cc0:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <TIM2_ch1_overflow_callback+0x100>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8001cc6:	4b35      	ldr	r3, [pc, #212]	@ (8001d9c <TIM2_ch1_overflow_callback+0x104>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	0099      	lsls	r1, r3, #2
 8001cd0:	23a0      	movs	r3, #160	@ 0xa0
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f004 f99c 	bl	8006014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001cdc:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <TIM2_ch1_overflow_callback+0x108>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2140      	movs	r1, #64	@ 0x40
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f004 f996 	bl	8006014 <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8001ce8:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d049      	beq.n	8001d86 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8001cf2:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d044      	beq.n	8001d86 <TIM2_ch1_overflow_callback+0xee>
 8001cfc:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d03f      	beq.n	8001d86 <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 8001d06:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d08:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8001d0e:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d10:	193a      	adds	r2, r7, r4
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8001d16:	e036      	b.n	8001d86 <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8001d18:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <TIM2_ch1_overflow_callback+0xfc>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d131      	bne.n	8001d86 <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <TIM2_ch1_overflow_callback+0xfc>)
 8001d24:	2202      	movs	r2, #2
 8001d26:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <TIM2_ch1_overflow_callback+0xfc>)
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <TIM2_ch1_overflow_callback+0x100>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8001d34:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <TIM2_ch1_overflow_callback+0x104>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001d3a:	2380      	movs	r3, #128	@ 0x80
 8001d3c:	0099      	lsls	r1, r3, #2
 8001d3e:	23a0      	movs	r3, #160	@ 0xa0
 8001d40:	05db      	lsls	r3, r3, #23
 8001d42:	2201      	movs	r2, #1
 8001d44:	0018      	movs	r0, r3
 8001d46:	f004 f965 	bl	8006014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <TIM2_ch1_overflow_callback+0x108>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2140      	movs	r1, #64	@ 0x40
 8001d50:	0018      	movs	r0, r3
 8001d52:	f004 f95f 	bl	8006014 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d012      	beq.n	8001d86 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d00d      	beq.n	8001d86 <TIM2_ch1_overflow_callback+0xee>
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d008      	beq.n	8001d86 <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d76:	4a06      	ldr	r2, [pc, #24]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <TIM2_ch1_overflow_callback+0xf8>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	18ba      	adds	r2, r7, r2
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	701a      	strb	r2, [r3, #0]
}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b005      	add	sp, #20
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	2000042c 	.word	0x2000042c
 8001d94:	20000422 	.word	0x20000422
 8001d98:	20000d1a 	.word	0x20000d1a
 8001d9c:	20000c78 	.word	0x20000c78
 8001da0:	50000800 	.word	0x50000800

08001da4 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void __attribute__((optimize("O0")))TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8001dac:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b0b      	cmp	r3, #11
 8001db4:	d01c      	beq.n	8001df0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8001db6:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d017      	beq.n	8001df0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8001dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b0d      	cmp	r3, #13
 8001dc8:	d012      	beq.n	8001df0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8001dca:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d00d      	beq.n	8001df0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8001dd4:	4b37      	ldr	r3, [pc, #220]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b11      	cmp	r3, #17
 8001ddc:	d008      	beq.n	8001df0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8001dde:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8001de4:	2b12      	cmp	r3, #18
 8001de6:	d003      	beq.n	8001df0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8001de8:	4b33      	ldr	r3, [pc, #204]	@ (8001eb8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8001dea:	0018      	movs	r0, r3
 8001dec:	f002 f8d6 	bl	8003f9c <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001df0:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 8001df2:	2100      	movs	r1, #0
 8001df4:	0018      	movs	r0, r3
 8001df6:	f002 fe8e 	bl	8004b16 <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8001dfa:	4b31      	ldr	r3, [pc, #196]	@ (8001ec0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d106      	bne.n	8001e12 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8001e04:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	705a      	strb	r2, [r3, #1]
 8001e10:	e00a      	b.n	8001e28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8001e12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d105      	bne.n	8001e28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8001e1c:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8001e22:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8001e24:	2203      	movs	r2, #3
 8001e26:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8001e28:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b0b      	cmp	r3, #11
 8001e30:	d03c      	beq.n	8001eac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d037      	beq.n	8001eac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b0d      	cmp	r3, #13
 8001e44:	d032      	beq.n	8001eac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d02d      	beq.n	8001eac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8001e50:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b11      	cmp	r3, #17
 8001e58:	d028      	beq.n	8001eac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8001e60:	2b12      	cmp	r3, #18
 8001e62:	d023      	beq.n	8001eac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8001e64:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8001e66:	4b14      	ldr	r3, [pc, #80]	@ (8001eb8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8001e68:	0011      	movs	r1, r2
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f002 f82a 	bl	8003ec4 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8001e70:	4a15      	ldr	r2, [pc, #84]	@ (8001ec8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8001e74:	0011      	movs	r1, r2
 8001e76:	0018      	movs	r0, r3
 8001e78:	f002 f824 	bl	8003ec4 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8001e7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8001e7e:	2108      	movs	r1, #8
 8001e80:	0018      	movs	r0, r3
 8001e82:	f002 ff8c 	bl	8004d9e <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f002 f89e 	bl	8003fcc <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8001e90:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8001e94:	0011      	movs	r1, r2
 8001e96:	0018      	movs	r0, r3
 8001e98:	f002 f918 	bl	80040cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	490d      	ldr	r1, [pc, #52]	@ (8001ed8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f003 fb86 	bl	80055b8 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000042c 	.word	0x2000042c
 8001eb8:	20000ca4 	.word	0x20000ca4
 8001ebc:	200007d4 	.word	0x200007d4
 8001ec0:	20000422 	.word	0x20000422
 8001ec4:	20000c80 	.word	0x20000c80
 8001ec8:	20000cec 	.word	0x20000cec
 8001ecc:	20000d28 	.word	0x20000d28
 8001ed0:	2000001a 	.word	0x2000001a
 8001ed4:	08008b94 	.word	0x08008b94
 8001ed8:	20000d10 	.word	0x20000d10
 8001edc:	20000bdc 	.word	0x20000bdc

08001ee0 <UART2_TX_transfer_complete_callback>:

void __attribute__((optimize("O0")))UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8001ee8:	46c0      	nop			@ (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b002      	add	sp, #8
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <UART2_RX_transfer_complete_callback>:

void __attribute__((optimize("O0")))UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8001ef8:	4bbe      	ldr	r3, [pc, #760]	@ (80021f4 <UART2_RX_transfer_complete_callback+0x304>)
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7fe ff3e 	bl	8000d7c <Is_System_Real_Time_Status_Byte>
 8001f00:	0003      	movs	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <UART2_RX_transfer_complete_callback+0x1a>
 8001f06:	f000 fc0c 	bl	8002722 <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8001f0a:	4bbb      	ldr	r3, [pc, #748]	@ (80021f8 <UART2_RX_transfer_complete_callback+0x308>)
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f002 ff31 	bl	8004d76 <Get_Status_Bit>
 8001f14:	0003      	movs	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <UART2_RX_transfer_complete_callback+0x2e>
 8001f1a:	f001 f895 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8001f1e:	4bb7      	ldr	r3, [pc, #732]	@ (80021fc <UART2_RX_transfer_complete_callback+0x30c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d159      	bne.n	8001fdc <UART2_RX_transfer_complete_callback+0xec>
 8001f28:	4bb5      	ldr	r3, [pc, #724]	@ (8002200 <UART2_RX_transfer_complete_callback+0x310>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d154      	bne.n	8001fdc <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8001f32:	4bb4      	ldr	r3, [pc, #720]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d013      	beq.n	8001f64 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8001f3c:	4bb1      	ldr	r3, [pc, #708]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d00e      	beq.n	8001f64 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8001f46:	4baf      	ldr	r3, [pc, #700]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d009      	beq.n	8001f64 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8001f50:	4bac      	ldr	r3, [pc, #688]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d004      	beq.n	8001f64 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8001f5a:	4baa      	ldr	r3, [pc, #680]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d13b      	bne.n	8001fdc <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001f64:	4ba3      	ldr	r3, [pc, #652]	@ (80021f4 <UART2_RX_transfer_complete_callback+0x304>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2bfa      	cmp	r3, #250	@ 0xfa
 8001f6c:	d10b      	bne.n	8001f86 <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8001f6e:	4ba5      	ldr	r3, [pc, #660]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f70:	4aa4      	ldr	r2, [pc, #656]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8001f76:	4ba3      	ldr	r3, [pc, #652]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f78:	2209      	movs	r2, #9
 8001f7a:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8001f7c:	4ba2      	ldr	r3, [pc, #648]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001f82:	f001 f85e 	bl	8003042 <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001f86:	4b9b      	ldr	r3, [pc, #620]	@ (80021f4 <UART2_RX_transfer_complete_callback+0x304>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2bf8      	cmp	r3, #248	@ 0xf8
 8001f8e:	d001      	beq.n	8001f94 <UART2_RX_transfer_complete_callback+0xa4>
 8001f90:	f001 f857 	bl	8003042 <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8001f94:	4b9b      	ldr	r3, [pc, #620]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f96:	4a9b      	ldr	r2, [pc, #620]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8001f9c:	4b99      	ldr	r3, [pc, #612]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001f9e:	220b      	movs	r2, #11
 8001fa0:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8001fa2:	4b99      	ldr	r3, [pc, #612]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	0099      	lsls	r1, r3, #2
 8001fac:	23a0      	movs	r3, #160	@ 0xa0
 8001fae:	05db      	lsls	r3, r3, #23
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f004 f82e 	bl	8006014 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001fb8:	4b94      	ldr	r3, [pc, #592]	@ (800220c <UART2_RX_transfer_complete_callback+0x31c>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2140      	movs	r1, #64	@ 0x40
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f004 f828 	bl	8006014 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8001fc4:	4b8d      	ldr	r3, [pc, #564]	@ (80021fc <UART2_RX_transfer_complete_callback+0x30c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8001fca:	4b8f      	ldr	r3, [pc, #572]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8001fd6:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001fd8:	f001 f833 	bl	8003042 <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8001fdc:	4b89      	ldr	r3, [pc, #548]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	d123      	bne.n	800202e <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001fe6:	4b83      	ldr	r3, [pc, #524]	@ (80021f4 <UART2_RX_transfer_complete_callback+0x304>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2bf8      	cmp	r3, #248	@ 0xf8
 8001fee:	d001      	beq.n	8001ff4 <UART2_RX_transfer_complete_callback+0x104>
 8001ff0:	f001 f82a 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	23a0      	movs	r3, #160	@ 0xa0
 8001ffa:	05db      	lsls	r3, r3, #23
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	0018      	movs	r0, r3
 8002000:	f004 f808 	bl	8006014 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002004:	4b81      	ldr	r3, [pc, #516]	@ (800220c <UART2_RX_transfer_complete_callback+0x31c>)
 8002006:	2201      	movs	r2, #1
 8002008:	2140      	movs	r1, #64	@ 0x40
 800200a:	0018      	movs	r0, r3
 800200c:	f004 f802 	bl	8006014 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002010:	4b7a      	ldr	r3, [pc, #488]	@ (80021fc <UART2_RX_transfer_complete_callback+0x30c>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002016:	4b7c      	ldr	r3, [pc, #496]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b79      	ldr	r3, [pc, #484]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8002022:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002024:	4b77      	ldr	r3, [pc, #476]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8002026:	220a      	movs	r2, #10
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	f001 f80d 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 800202e:	4b75      	ldr	r3, [pc, #468]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b0a      	cmp	r3, #10
 8002036:	d145      	bne.n	80020c4 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002038:	4b6e      	ldr	r3, [pc, #440]	@ (80021f4 <UART2_RX_transfer_complete_callback+0x304>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002040:	d001      	beq.n	8002046 <UART2_RX_transfer_complete_callback+0x156>
 8002042:	f001 f801 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002046:	4b6d      	ldr	r3, [pc, #436]	@ (80021fc <UART2_RX_transfer_complete_callback+0x30c>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800204c:	4b6e      	ldr	r3, [pc, #440]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3301      	adds	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b6c      	ldr	r3, [pc, #432]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8002058:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800205a:	4b6b      	ldr	r3, [pc, #428]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b0b      	cmp	r3, #11
 8002062:	d80f      	bhi.n	8002084 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	23a0      	movs	r3, #160	@ 0xa0
 800206a:	05db      	lsls	r3, r3, #23
 800206c:	2200      	movs	r2, #0
 800206e:	0018      	movs	r0, r3
 8002070:	f003 ffd0 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002074:	4b65      	ldr	r3, [pc, #404]	@ (800220c <UART2_RX_transfer_complete_callback+0x31c>)
 8002076:	2201      	movs	r2, #1
 8002078:	2140      	movs	r1, #64	@ 0x40
 800207a:	0018      	movs	r0, r3
 800207c:	f003 ffca 	bl	8006014 <HAL_GPIO_WritePin>
 8002080:	f000 ffe2 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002084:	4b60      	ldr	r3, [pc, #384]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b18      	cmp	r3, #24
 800208c:	d80f      	bhi.n	80020ae <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	0099      	lsls	r1, r3, #2
 8002092:	23a0      	movs	r3, #160	@ 0xa0
 8002094:	05db      	lsls	r3, r3, #23
 8002096:	2201      	movs	r2, #1
 8002098:	0018      	movs	r0, r3
 800209a:	f003 ffbb 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800209e:	4b5b      	ldr	r3, [pc, #364]	@ (800220c <UART2_RX_transfer_complete_callback+0x31c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	2140      	movs	r1, #64	@ 0x40
 80020a4:	0018      	movs	r0, r3
 80020a6:	f003 ffb5 	bl	8006014 <HAL_GPIO_WritePin>
 80020aa:	f000 ffcd 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 80020ae:	4b55      	ldr	r3, [pc, #340]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 80020b0:	220a      	movs	r2, #10
 80020b2:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 80020b6:	2208      	movs	r2, #8
 80020b8:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 80020ba:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	f000 ffc2 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 80020c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b0b      	cmp	r3, #11
 80020cc:	d142      	bne.n	8002154 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80020ce:	4b49      	ldr	r3, [pc, #292]	@ (80021f4 <UART2_RX_transfer_complete_callback+0x304>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2bf8      	cmp	r3, #248	@ 0xf8
 80020d6:	d001      	beq.n	80020dc <UART2_RX_transfer_complete_callback+0x1ec>
 80020d8:	f000 ffb6 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80020dc:	4b47      	ldr	r3, [pc, #284]	@ (80021fc <UART2_RX_transfer_complete_callback+0x30c>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80020e2:	4b49      	ldr	r3, [pc, #292]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 80020ee:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80020f0:	4b45      	ldr	r3, [pc, #276]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b0b      	cmp	r3, #11
 80020f8:	d80f      	bhi.n	800211a <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	0099      	lsls	r1, r3, #2
 80020fe:	23a0      	movs	r3, #160	@ 0xa0
 8002100:	05db      	lsls	r3, r3, #23
 8002102:	2200      	movs	r2, #0
 8002104:	0018      	movs	r0, r3
 8002106:	f003 ff85 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800210a:	4b40      	ldr	r3, [pc, #256]	@ (800220c <UART2_RX_transfer_complete_callback+0x31c>)
 800210c:	2201      	movs	r2, #1
 800210e:	2140      	movs	r1, #64	@ 0x40
 8002110:	0018      	movs	r0, r3
 8002112:	f003 ff7f 	bl	8006014 <HAL_GPIO_WritePin>
 8002116:	f000 ff97 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 800211a:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b18      	cmp	r3, #24
 8002122:	d80f      	bhi.n	8002144 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	0099      	lsls	r1, r3, #2
 8002128:	23a0      	movs	r3, #160	@ 0xa0
 800212a:	05db      	lsls	r3, r3, #23
 800212c:	2201      	movs	r2, #1
 800212e:	0018      	movs	r0, r3
 8002130:	f003 ff70 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002134:	4b35      	ldr	r3, [pc, #212]	@ (800220c <UART2_RX_transfer_complete_callback+0x31c>)
 8002136:	2200      	movs	r2, #0
 8002138:	2140      	movs	r1, #64	@ 0x40
 800213a:	0018      	movs	r0, r3
 800213c:	f003 ff6a 	bl	8006014 <HAL_GPIO_WritePin>
 8002140:	f000 ff82 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002144:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 800214a:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 800214c:	220c      	movs	r2, #12
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	f000 ff7a 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002154:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d158      	bne.n	8002210 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800215e:	4b25      	ldr	r3, [pc, #148]	@ (80021f4 <UART2_RX_transfer_complete_callback+0x304>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2bf8      	cmp	r3, #248	@ 0xf8
 8002166:	d138      	bne.n	80021da <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002168:	4b24      	ldr	r3, [pc, #144]	@ (80021fc <UART2_RX_transfer_complete_callback+0x30c>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800216e:	4b26      	ldr	r3, [pc, #152]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 800217a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800217c:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b0b      	cmp	r3, #11
 8002184:	d80f      	bhi.n	80021a6 <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	0099      	lsls	r1, r3, #2
 800218a:	23a0      	movs	r3, #160	@ 0xa0
 800218c:	05db      	lsls	r3, r3, #23
 800218e:	2200      	movs	r2, #0
 8002190:	0018      	movs	r0, r3
 8002192:	f003 ff3f 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002196:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <UART2_RX_transfer_complete_callback+0x31c>)
 8002198:	2201      	movs	r2, #1
 800219a:	2140      	movs	r1, #64	@ 0x40
 800219c:	0018      	movs	r0, r3
 800219e:	f003 ff39 	bl	8006014 <HAL_GPIO_WritePin>
 80021a2:	f000 ff51 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b18      	cmp	r3, #24
 80021ae:	d80f      	bhi.n	80021d0 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	0099      	lsls	r1, r3, #2
 80021b4:	23a0      	movs	r3, #160	@ 0xa0
 80021b6:	05db      	lsls	r3, r3, #23
 80021b8:	2201      	movs	r2, #1
 80021ba:	0018      	movs	r0, r3
 80021bc:	f003 ff2a 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <UART2_RX_transfer_complete_callback+0x31c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	2140      	movs	r1, #64	@ 0x40
 80021c6:	0018      	movs	r0, r3
 80021c8:	f003 ff24 	bl	8006014 <HAL_GPIO_WritePin>
 80021cc:	f000 ff3c 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <UART2_RX_transfer_complete_callback+0x318>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	f000 ff37 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <UART2_RX_transfer_complete_callback+0x304>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2bfa      	cmp	r3, #250	@ 0xfa
 80021e2:	d001      	beq.n	80021e8 <UART2_RX_transfer_complete_callback+0x2f8>
 80021e4:	f000 ff30 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <UART2_RX_transfer_complete_callback+0x314>)
 80021ea:	220d      	movs	r2, #13
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	f000 ff2b 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	2000051a 	.word	0x2000051a
 80021f8:	20000d28 	.word	0x20000d28
 80021fc:	20000d1a 	.word	0x20000d1a
 8002200:	20000422 	.word	0x20000422
 8002204:	2000042c 	.word	0x2000042c
 8002208:	20000c78 	.word	0x20000c78
 800220c:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002210:	4bdc      	ldr	r3, [pc, #880]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b0d      	cmp	r3, #13
 8002218:	d160      	bne.n	80022dc <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800221a:	4bdb      	ldr	r3, [pc, #876]	@ (8002588 <UART2_RX_transfer_complete_callback+0x698>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2bf8      	cmp	r3, #248	@ 0xf8
 8002222:	d001      	beq.n	8002228 <UART2_RX_transfer_complete_callback+0x338>
 8002224:	f000 ff10 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002228:	4bd8      	ldr	r3, [pc, #864]	@ (800258c <UART2_RX_transfer_complete_callback+0x69c>)
 800222a:	0018      	movs	r0, r3
 800222c:	f001 feb6 	bl	8003f9c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	23a0      	movs	r3, #160	@ 0xa0
 8002236:	05db      	lsls	r3, r3, #23
 8002238:	2201      	movs	r2, #1
 800223a:	0018      	movs	r0, r3
 800223c:	f003 feea 	bl	8006014 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002240:	4bd3      	ldr	r3, [pc, #844]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002242:	2200      	movs	r2, #0
 8002244:	2140      	movs	r1, #64	@ 0x40
 8002246:	0018      	movs	r0, r3
 8002248:	f003 fee4 	bl	8006014 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	0099      	lsls	r1, r3, #2
 8002250:	23a0      	movs	r3, #160	@ 0xa0
 8002252:	05db      	lsls	r3, r3, #23
 8002254:	2200      	movs	r2, #0
 8002256:	0018      	movs	r0, r3
 8002258:	f003 fedc 	bl	8006014 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800225c:	4bcc      	ldr	r3, [pc, #816]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 800225e:	2201      	movs	r2, #1
 8002260:	2140      	movs	r1, #64	@ 0x40
 8002262:	0018      	movs	r0, r3
 8002264:	f003 fed6 	bl	8006014 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002268:	4bca      	ldr	r3, [pc, #808]	@ (8002594 <UART2_RX_transfer_complete_callback+0x6a4>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 800226e:	4bca      	ldr	r3, [pc, #808]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002274:	4bc3      	ldr	r3, [pc, #780]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 8002276:	220d      	movs	r2, #13
 8002278:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800227a:	4bc2      	ldr	r3, [pc, #776]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 800227c:	2208      	movs	r2, #8
 800227e:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002280:	4bc6      	ldr	r3, [pc, #792]	@ (800259c <UART2_RX_transfer_complete_callback+0x6ac>)
 8002282:	2100      	movs	r1, #0
 8002284:	0018      	movs	r0, r3
 8002286:	f002 fc46 	bl	8004b16 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 800228a:	4bc5      	ldr	r3, [pc, #788]	@ (80025a0 <UART2_RX_transfer_complete_callback+0x6b0>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002290:	4ac4      	ldr	r2, [pc, #784]	@ (80025a4 <UART2_RX_transfer_complete_callback+0x6b4>)
 8002292:	4bbe      	ldr	r3, [pc, #760]	@ (800258c <UART2_RX_transfer_complete_callback+0x69c>)
 8002294:	0011      	movs	r1, r2
 8002296:	0018      	movs	r0, r3
 8002298:	f001 fe14 	bl	8003ec4 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 800229c:	4ac2      	ldr	r2, [pc, #776]	@ (80025a8 <UART2_RX_transfer_complete_callback+0x6b8>)
 800229e:	4bbb      	ldr	r3, [pc, #748]	@ (800258c <UART2_RX_transfer_complete_callback+0x69c>)
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f001 fe0e 	bl	8003ec4 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 80022a8:	4bc0      	ldr	r3, [pc, #768]	@ (80025ac <UART2_RX_transfer_complete_callback+0x6bc>)
 80022aa:	2108      	movs	r1, #8
 80022ac:	0018      	movs	r0, r3
 80022ae:	f002 fd76 	bl	8004d9e <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80022b2:	4bbd      	ldr	r3, [pc, #756]	@ (80025a8 <UART2_RX_transfer_complete_callback+0x6b8>)
 80022b4:	2100      	movs	r1, #0
 80022b6:	0018      	movs	r0, r3
 80022b8:	f001 fe88 	bl	8003fcc <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80022bc:	4abc      	ldr	r2, [pc, #752]	@ (80025b0 <UART2_RX_transfer_complete_callback+0x6c0>)
 80022be:	4bba      	ldr	r3, [pc, #744]	@ (80025a8 <UART2_RX_transfer_complete_callback+0x6b8>)
 80022c0:	0011      	movs	r1, r2
 80022c2:	0018      	movs	r0, r3
 80022c4:	f001 ff02 	bl	80040cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80022c8:	4bba      	ldr	r3, [pc, #744]	@ (80025b4 <UART2_RX_transfer_complete_callback+0x6c4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	001a      	movs	r2, r3
 80022ce:	49ba      	ldr	r1, [pc, #744]	@ (80025b8 <UART2_RX_transfer_complete_callback+0x6c8>)
 80022d0:	4bba      	ldr	r3, [pc, #744]	@ (80025bc <UART2_RX_transfer_complete_callback+0x6cc>)
 80022d2:	0018      	movs	r0, r3
 80022d4:	f003 f970 	bl	80055b8 <HAL_ADC_Start_DMA>
 80022d8:	f000 feb6 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 80022dc:	4ba9      	ldr	r3, [pc, #676]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d146      	bne.n	8002374 <UART2_RX_transfer_complete_callback+0x484>
 80022e6:	4bb1      	ldr	r3, [pc, #708]	@ (80025ac <UART2_RX_transfer_complete_callback+0x6bc>)
 80022e8:	2120      	movs	r1, #32
 80022ea:	0018      	movs	r0, r3
 80022ec:	f002 fd43 	bl	8004d76 <Get_Status_Bit>
 80022f0:	1e03      	subs	r3, r0, #0
 80022f2:	d13f      	bne.n	8002374 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80022f4:	4ba4      	ldr	r3, [pc, #656]	@ (8002588 <UART2_RX_transfer_complete_callback+0x698>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2bf8      	cmp	r3, #248	@ 0xf8
 80022fc:	d001      	beq.n	8002302 <UART2_RX_transfer_complete_callback+0x412>
 80022fe:	f000 fea3 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002302:	4ba4      	ldr	r3, [pc, #656]	@ (8002594 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002308:	4ba3      	ldr	r3, [pc, #652]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4ba1      	ldr	r3, [pc, #644]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002314:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002316:	4ba0      	ldr	r3, [pc, #640]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b0b      	cmp	r3, #11
 800231e:	d80f      	bhi.n	8002340 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	0099      	lsls	r1, r3, #2
 8002324:	23a0      	movs	r3, #160	@ 0xa0
 8002326:	05db      	lsls	r3, r3, #23
 8002328:	2200      	movs	r2, #0
 800232a:	0018      	movs	r0, r3
 800232c:	f003 fe72 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002330:	4b97      	ldr	r3, [pc, #604]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002332:	2201      	movs	r2, #1
 8002334:	2140      	movs	r1, #64	@ 0x40
 8002336:	0018      	movs	r0, r3
 8002338:	f003 fe6c 	bl	8006014 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800233c:	f000 fe84 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002340:	4b95      	ldr	r3, [pc, #596]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b18      	cmp	r3, #24
 8002348:	d80f      	bhi.n	800236a <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	0099      	lsls	r1, r3, #2
 800234e:	23a0      	movs	r3, #160	@ 0xa0
 8002350:	05db      	lsls	r3, r3, #23
 8002352:	2201      	movs	r2, #1
 8002354:	0018      	movs	r0, r3
 8002356:	f003 fe5d 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800235a:	4b8d      	ldr	r3, [pc, #564]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 800235c:	2200      	movs	r2, #0
 800235e:	2140      	movs	r1, #64	@ 0x40
 8002360:	0018      	movs	r0, r3
 8002362:	f003 fe57 	bl	8006014 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002366:	f000 fe6f 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 800236a:	4b8b      	ldr	r3, [pc, #556]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002370:	f000 fe6a 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002374:	4b83      	ldr	r3, [pc, #524]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b08      	cmp	r3, #8
 800237c:	d14c      	bne.n	8002418 <UART2_RX_transfer_complete_callback+0x528>
 800237e:	4b88      	ldr	r3, [pc, #544]	@ (80025a0 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d147      	bne.n	8002418 <UART2_RX_transfer_complete_callback+0x528>
 8002388:	4b88      	ldr	r3, [pc, #544]	@ (80025ac <UART2_RX_transfer_complete_callback+0x6bc>)
 800238a:	2120      	movs	r1, #32
 800238c:	0018      	movs	r0, r3
 800238e:	f002 fcf2 	bl	8004d76 <Get_Status_Bit>
 8002392:	0003      	movs	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d13f      	bne.n	8002418 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002398:	4b7b      	ldr	r3, [pc, #492]	@ (8002588 <UART2_RX_transfer_complete_callback+0x698>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2bf8      	cmp	r3, #248	@ 0xf8
 80023a0:	d11e      	bne.n	80023e0 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 80023a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80023a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b79      	ldr	r3, [pc, #484]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 80023b4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 80023b6:	4b77      	ldr	r3, [pc, #476]	@ (8002594 <UART2_RX_transfer_complete_callback+0x6a4>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 80023bc:	4b71      	ldr	r3, [pc, #452]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 80023be:	2210      	movs	r2, #16
 80023c0:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80023c2:	4b70      	ldr	r3, [pc, #448]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 80023c4:	2208      	movs	r2, #8
 80023c6:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80023c8:	4b78      	ldr	r3, [pc, #480]	@ (80025ac <UART2_RX_transfer_complete_callback+0x6bc>)
 80023ca:	2120      	movs	r1, #32
 80023cc:	0018      	movs	r0, r3
 80023ce:	f002 fcf8 	bl	8004dc2 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80023d2:	4b76      	ldr	r3, [pc, #472]	@ (80025ac <UART2_RX_transfer_complete_callback+0x6bc>)
 80023d4:	2140      	movs	r1, #64	@ 0x40
 80023d6:	0018      	movs	r0, r3
 80023d8:	f002 fcf3 	bl	8004dc2 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80023dc:	f000 fe33 	bl	8003046 <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80023e0:	4b69      	ldr	r3, [pc, #420]	@ (8002588 <UART2_RX_transfer_complete_callback+0x698>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2bfa      	cmp	r3, #250	@ 0xfa
 80023e8:	d001      	beq.n	80023ee <UART2_RX_transfer_complete_callback+0x4fe>
 80023ea:	f000 fe2c 	bl	8003046 <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 80023ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 80023f4:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 80023f6:	220e      	movs	r2, #14
 80023f8:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80023fa:	4b62      	ldr	r3, [pc, #392]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 80023fc:	2208      	movs	r2, #8
 80023fe:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002400:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <UART2_RX_transfer_complete_callback+0x6bc>)
 8002402:	2120      	movs	r1, #32
 8002404:	0018      	movs	r0, r3
 8002406:	f002 fcdc 	bl	8004dc2 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800240a:	4b68      	ldr	r3, [pc, #416]	@ (80025ac <UART2_RX_transfer_complete_callback+0x6bc>)
 800240c:	2140      	movs	r1, #64	@ 0x40
 800240e:	0018      	movs	r0, r3
 8002410:	f002 fcd7 	bl	8004dc2 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002414:	f000 fe17 	bl	8003046 <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002418:	4b5a      	ldr	r3, [pc, #360]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b0e      	cmp	r3, #14
 8002420:	d123      	bne.n	800246a <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002422:	4b59      	ldr	r3, [pc, #356]	@ (8002588 <UART2_RX_transfer_complete_callback+0x698>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2bf8      	cmp	r3, #248	@ 0xf8
 800242a:	d001      	beq.n	8002430 <UART2_RX_transfer_complete_callback+0x540>
 800242c:	f000 fe0c 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	0099      	lsls	r1, r3, #2
 8002434:	23a0      	movs	r3, #160	@ 0xa0
 8002436:	05db      	lsls	r3, r3, #23
 8002438:	2200      	movs	r2, #0
 800243a:	0018      	movs	r0, r3
 800243c:	f003 fdea 	bl	8006014 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002440:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002442:	2201      	movs	r2, #1
 8002444:	2140      	movs	r1, #64	@ 0x40
 8002446:	0018      	movs	r0, r3
 8002448:	f003 fde4 	bl	8006014 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 800244c:	4b51      	ldr	r3, [pc, #324]	@ (8002594 <UART2_RX_transfer_complete_callback+0x6a4>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002452:	4b51      	ldr	r3, [pc, #324]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b4e      	ldr	r3, [pc, #312]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 800245e:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002460:	4b48      	ldr	r3, [pc, #288]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 8002462:	220f      	movs	r2, #15
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	f000 fdef 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 800246a:	4b46      	ldr	r3, [pc, #280]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d142      	bne.n	80024fa <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002474:	4b44      	ldr	r3, [pc, #272]	@ (8002588 <UART2_RX_transfer_complete_callback+0x698>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2bf8      	cmp	r3, #248	@ 0xf8
 800247c:	d001      	beq.n	8002482 <UART2_RX_transfer_complete_callback+0x592>
 800247e:	f000 fde3 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002482:	4b45      	ldr	r3, [pc, #276]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 800248e:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002490:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b0b      	cmp	r3, #11
 8002498:	d80f      	bhi.n	80024ba <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	0099      	lsls	r1, r3, #2
 800249e:	23a0      	movs	r3, #160	@ 0xa0
 80024a0:	05db      	lsls	r3, r3, #23
 80024a2:	2200      	movs	r2, #0
 80024a4:	0018      	movs	r0, r3
 80024a6:	f003 fdb5 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80024aa:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	2140      	movs	r1, #64	@ 0x40
 80024b0:	0018      	movs	r0, r3
 80024b2:	f003 fdaf 	bl	8006014 <HAL_GPIO_WritePin>
 80024b6:	f000 fdc7 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80024ba:	4b37      	ldr	r3, [pc, #220]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b18      	cmp	r3, #24
 80024c2:	d80f      	bhi.n	80024e4 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	0099      	lsls	r1, r3, #2
 80024c8:	23a0      	movs	r3, #160	@ 0xa0
 80024ca:	05db      	lsls	r3, r3, #23
 80024cc:	2201      	movs	r2, #1
 80024ce:	0018      	movs	r0, r3
 80024d0:	f003 fda0 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80024d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	2140      	movs	r1, #64	@ 0x40
 80024da:	0018      	movs	r0, r3
 80024dc:	f003 fd9a 	bl	8006014 <HAL_GPIO_WritePin>
 80024e0:	f000 fdb2 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 80024e4:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 80024e6:	220f      	movs	r2, #15
 80024e8:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80024ea:	4b26      	ldr	r3, [pc, #152]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 80024ec:	2208      	movs	r2, #8
 80024ee:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 80024f0:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	f000 fda7 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 80024fa:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b10      	cmp	r3, #16
 8002502:	d15d      	bne.n	80025c0 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002504:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <UART2_RX_transfer_complete_callback+0x698>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2bf8      	cmp	r3, #248	@ 0xf8
 800250c:	d001      	beq.n	8002512 <UART2_RX_transfer_complete_callback+0x622>
 800250e:	f000 fd9b 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002512:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3301      	adds	r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 800251e:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002520:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b0b      	cmp	r3, #11
 8002528:	d80f      	bhi.n	800254a <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800252a:	2380      	movs	r3, #128	@ 0x80
 800252c:	0099      	lsls	r1, r3, #2
 800252e:	23a0      	movs	r3, #160	@ 0xa0
 8002530:	05db      	lsls	r3, r3, #23
 8002532:	2200      	movs	r2, #0
 8002534:	0018      	movs	r0, r3
 8002536:	f003 fd6d 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800253a:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 800253c:	2201      	movs	r2, #1
 800253e:	2140      	movs	r1, #64	@ 0x40
 8002540:	0018      	movs	r0, r3
 8002542:	f003 fd67 	bl	8006014 <HAL_GPIO_WritePin>
 8002546:	f000 fd7f 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b18      	cmp	r3, #24
 8002552:	d80f      	bhi.n	8002574 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	0099      	lsls	r1, r3, #2
 8002558:	23a0      	movs	r3, #160	@ 0xa0
 800255a:	05db      	lsls	r3, r3, #23
 800255c:	2201      	movs	r2, #1
 800255e:	0018      	movs	r0, r3
 8002560:	f003 fd58 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002564:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002566:	2200      	movs	r2, #0
 8002568:	2140      	movs	r1, #64	@ 0x40
 800256a:	0018      	movs	r0, r3
 800256c:	f003 fd52 	bl	8006014 <HAL_GPIO_WritePin>
 8002570:	f000 fd6a 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <UART2_RX_transfer_complete_callback+0x694>)
 8002576:	2211      	movs	r2, #17
 8002578:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 800257a:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <UART2_RX_transfer_complete_callback+0x6a8>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	f000 fd62 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
 8002584:	2000042c 	.word	0x2000042c
 8002588:	2000051a 	.word	0x2000051a
 800258c:	20000ca4 	.word	0x20000ca4
 8002590:	50000800 	.word	0x50000800
 8002594:	20000d1a 	.word	0x20000d1a
 8002598:	20000c78 	.word	0x20000c78
 800259c:	200007d4 	.word	0x200007d4
 80025a0:	20000422 	.word	0x20000422
 80025a4:	20000c80 	.word	0x20000c80
 80025a8:	20000cec 	.word	0x20000cec
 80025ac:	20000d28 	.word	0x20000d28
 80025b0:	2000001a 	.word	0x2000001a
 80025b4:	08008b94 	.word	0x08008b94
 80025b8:	20000d10 	.word	0x20000d10
 80025bc:	20000bdc 	.word	0x20000bdc
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 80025c0:	4bed      	ldr	r3, [pc, #948]	@ (8002978 <UART2_RX_transfer_complete_callback+0xa88>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b11      	cmp	r3, #17
 80025c8:	d146      	bne.n	8002658 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80025ca:	4bec      	ldr	r3, [pc, #944]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2bf8      	cmp	r3, #248	@ 0xf8
 80025d2:	d135      	bne.n	8002640 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 80025d4:	4bea      	ldr	r3, [pc, #936]	@ (8002980 <UART2_RX_transfer_complete_callback+0xa90>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	3301      	adds	r3, #1
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4be8      	ldr	r3, [pc, #928]	@ (8002980 <UART2_RX_transfer_complete_callback+0xa90>)
 80025e0:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80025e2:	4be7      	ldr	r3, [pc, #924]	@ (8002980 <UART2_RX_transfer_complete_callback+0xa90>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b0b      	cmp	r3, #11
 80025ea:	d80f      	bhi.n	800260c <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	0099      	lsls	r1, r3, #2
 80025f0:	23a0      	movs	r3, #160	@ 0xa0
 80025f2:	05db      	lsls	r3, r3, #23
 80025f4:	2200      	movs	r2, #0
 80025f6:	0018      	movs	r0, r3
 80025f8:	f003 fd0c 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80025fc:	4be1      	ldr	r3, [pc, #900]	@ (8002984 <UART2_RX_transfer_complete_callback+0xa94>)
 80025fe:	2201      	movs	r2, #1
 8002600:	2140      	movs	r1, #64	@ 0x40
 8002602:	0018      	movs	r0, r3
 8002604:	f003 fd06 	bl	8006014 <HAL_GPIO_WritePin>
 8002608:	f000 fd1e 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 800260c:	4bdc      	ldr	r3, [pc, #880]	@ (8002980 <UART2_RX_transfer_complete_callback+0xa90>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b18      	cmp	r3, #24
 8002614:	d80f      	bhi.n	8002636 <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	0099      	lsls	r1, r3, #2
 800261a:	23a0      	movs	r3, #160	@ 0xa0
 800261c:	05db      	lsls	r3, r3, #23
 800261e:	2201      	movs	r2, #1
 8002620:	0018      	movs	r0, r3
 8002622:	f003 fcf7 	bl	8006014 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002626:	4bd7      	ldr	r3, [pc, #860]	@ (8002984 <UART2_RX_transfer_complete_callback+0xa94>)
 8002628:	2200      	movs	r2, #0
 800262a:	2140      	movs	r1, #64	@ 0x40
 800262c:	0018      	movs	r0, r3
 800262e:	f003 fcf1 	bl	8006014 <HAL_GPIO_WritePin>
 8002632:	f000 fd09 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002636:	4bd2      	ldr	r3, [pc, #840]	@ (8002980 <UART2_RX_transfer_complete_callback+0xa90>)
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	f000 fd04 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002640:	4bce      	ldr	r3, [pc, #824]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2bfa      	cmp	r3, #250	@ 0xfa
 8002648:	d001      	beq.n	800264e <UART2_RX_transfer_complete_callback+0x75e>
 800264a:	f000 fcfd 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 800264e:	4bca      	ldr	r3, [pc, #808]	@ (8002978 <UART2_RX_transfer_complete_callback+0xa88>)
 8002650:	2212      	movs	r2, #18
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	f000 fcf8 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002658:	4bc7      	ldr	r3, [pc, #796]	@ (8002978 <UART2_RX_transfer_complete_callback+0xa88>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b12      	cmp	r3, #18
 8002660:	d001      	beq.n	8002666 <UART2_RX_transfer_complete_callback+0x776>
 8002662:	f000 fcf1 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002666:	4bc5      	ldr	r3, [pc, #788]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2bf8      	cmp	r3, #248	@ 0xf8
 800266e:	d001      	beq.n	8002674 <UART2_RX_transfer_complete_callback+0x784>
 8002670:	f000 fcea 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002674:	4bc4      	ldr	r3, [pc, #784]	@ (8002988 <UART2_RX_transfer_complete_callback+0xa98>)
 8002676:	0018      	movs	r0, r3
 8002678:	f001 fc90 	bl	8003f9c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800267c:	2380      	movs	r3, #128	@ 0x80
 800267e:	0099      	lsls	r1, r3, #2
 8002680:	23a0      	movs	r3, #160	@ 0xa0
 8002682:	05db      	lsls	r3, r3, #23
 8002684:	2201      	movs	r2, #1
 8002686:	0018      	movs	r0, r3
 8002688:	f003 fcc4 	bl	8006014 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800268c:	4bbd      	ldr	r3, [pc, #756]	@ (8002984 <UART2_RX_transfer_complete_callback+0xa94>)
 800268e:	2200      	movs	r2, #0
 8002690:	2140      	movs	r1, #64	@ 0x40
 8002692:	0018      	movs	r0, r3
 8002694:	f003 fcbe 	bl	8006014 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	0099      	lsls	r1, r3, #2
 800269c:	23a0      	movs	r3, #160	@ 0xa0
 800269e:	05db      	lsls	r3, r3, #23
 80026a0:	2200      	movs	r2, #0
 80026a2:	0018      	movs	r0, r3
 80026a4:	f003 fcb6 	bl	8006014 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80026a8:	4bb6      	ldr	r3, [pc, #728]	@ (8002984 <UART2_RX_transfer_complete_callback+0xa94>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	2140      	movs	r1, #64	@ 0x40
 80026ae:	0018      	movs	r0, r3
 80026b0:	f003 fcb0 	bl	8006014 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80026b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002978 <UART2_RX_transfer_complete_callback+0xa88>)
 80026b6:	2212      	movs	r2, #18
 80026b8:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80026ba:	4baf      	ldr	r3, [pc, #700]	@ (8002978 <UART2_RX_transfer_complete_callback+0xa88>)
 80026bc:	2208      	movs	r2, #8
 80026be:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 80026c0:	4baf      	ldr	r3, [pc, #700]	@ (8002980 <UART2_RX_transfer_complete_callback+0xa90>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 80026c6:	4bb1      	ldr	r3, [pc, #708]	@ (800298c <UART2_RX_transfer_complete_callback+0xa9c>)
 80026c8:	2100      	movs	r1, #0
 80026ca:	0018      	movs	r0, r3
 80026cc:	f002 fa23 	bl	8004b16 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 80026d0:	4baf      	ldr	r3, [pc, #700]	@ (8002990 <UART2_RX_transfer_complete_callback+0xaa0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80026d6:	4aaf      	ldr	r2, [pc, #700]	@ (8002994 <UART2_RX_transfer_complete_callback+0xaa4>)
 80026d8:	4bab      	ldr	r3, [pc, #684]	@ (8002988 <UART2_RX_transfer_complete_callback+0xa98>)
 80026da:	0011      	movs	r1, r2
 80026dc:	0018      	movs	r0, r3
 80026de:	f001 fbf1 	bl	8003ec4 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 80026e2:	4aad      	ldr	r2, [pc, #692]	@ (8002998 <UART2_RX_transfer_complete_callback+0xaa8>)
 80026e4:	4ba8      	ldr	r3, [pc, #672]	@ (8002988 <UART2_RX_transfer_complete_callback+0xa98>)
 80026e6:	0011      	movs	r1, r2
 80026e8:	0018      	movs	r0, r3
 80026ea:	f001 fbeb 	bl	8003ec4 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 80026ee:	4bab      	ldr	r3, [pc, #684]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 80026f0:	2108      	movs	r1, #8
 80026f2:	0018      	movs	r0, r3
 80026f4:	f002 fb53 	bl	8004d9e <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80026f8:	4ba7      	ldr	r3, [pc, #668]	@ (8002998 <UART2_RX_transfer_complete_callback+0xaa8>)
 80026fa:	2100      	movs	r1, #0
 80026fc:	0018      	movs	r0, r3
 80026fe:	f001 fc65 	bl	8003fcc <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002702:	4aa7      	ldr	r2, [pc, #668]	@ (80029a0 <UART2_RX_transfer_complete_callback+0xab0>)
 8002704:	4ba4      	ldr	r3, [pc, #656]	@ (8002998 <UART2_RX_transfer_complete_callback+0xaa8>)
 8002706:	0011      	movs	r1, r2
 8002708:	0018      	movs	r0, r3
 800270a:	f001 fcdf 	bl	80040cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 800270e:	4ba5      	ldr	r3, [pc, #660]	@ (80029a4 <UART2_RX_transfer_complete_callback+0xab4>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	001a      	movs	r2, r3
 8002714:	49a4      	ldr	r1, [pc, #656]	@ (80029a8 <UART2_RX_transfer_complete_callback+0xab8>)
 8002716:	4ba5      	ldr	r3, [pc, #660]	@ (80029ac <UART2_RX_transfer_complete_callback+0xabc>)
 8002718:	0018      	movs	r0, r3
 800271a:	f002 ff4d 	bl	80055b8 <HAL_ADC_Start_DMA>
 800271e:	f000 fc93 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8002722:	4ba3      	ldr	r3, [pc, #652]	@ (80029b0 <UART2_RX_transfer_complete_callback+0xac0>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d000      	beq.n	800272e <UART2_RX_transfer_complete_callback+0x83e>
 800272c:	e29e      	b.n	8002c6c <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 800272e:	4ba1      	ldr	r3, [pc, #644]	@ (80029b4 <UART2_RX_transfer_complete_callback+0xac4>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d000      	beq.n	800273a <UART2_RX_transfer_complete_callback+0x84a>
 8002738:	e0a3      	b.n	8002882 <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800273a:	4b9f      	ldr	r3, [pc, #636]	@ (80029b8 <UART2_RX_transfer_complete_callback+0xac8>)
 800273c:	0018      	movs	r0, r3
 800273e:	f7fe fb04 	bl	8000d4a <Is_Data_Buffer_Empty>
 8002742:	0003      	movs	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d001      	beq.n	800274c <UART2_RX_transfer_complete_callback+0x85c>
 8002748:	f000 fc7e 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 800274c:	4b8b      	ldr	r3, [pc, #556]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 800274e:	0018      	movs	r0, r3
 8002750:	f7fe fa8a 	bl	8000c68 <Is_Status_Byte>
 8002754:	0003      	movs	r3, r0
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <UART2_RX_transfer_complete_callback+0x86e>
 800275a:	f000 fc75 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 800275e:	4b87      	ldr	r3, [pc, #540]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002760:	0018      	movs	r0, r3
 8002762:	f7fe fa89 	bl	8000c78 <Is_PC_Status_Byte>
 8002766:	0003      	movs	r3, r0
 8002768:	2b01      	cmp	r3, #1
 800276a:	d134      	bne.n	80027d6 <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 800276c:	4b83      	ldr	r3, [pc, #524]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b90      	ldr	r3, [pc, #576]	@ (80029b4 <UART2_RX_transfer_complete_callback+0xac4>)
 8002774:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002776:	4b91      	ldr	r3, [pc, #580]	@ (80029bc <UART2_RX_transfer_complete_callback+0xacc>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	4b7f      	ldr	r3, [pc, #508]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 800277e:	0011      	movs	r1, r2
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe fad4 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002786:	0003      	movs	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d10d      	bne.n	80027a8 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 800278c:	4b7b      	ldr	r3, [pc, #492]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b87      	ldr	r3, [pc, #540]	@ (80029b0 <UART2_RX_transfer_complete_callback+0xac0>)
 8002794:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	005a      	lsls	r2, r3, #1
 800279a:	4b80      	ldr	r3, [pc, #512]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 800279c:	0011      	movs	r1, r2
 800279e:	0018      	movs	r0, r3
 80027a0:	f002 fafd 	bl	8004d9e <Set_Status_Bit>
 80027a4:	f000 fc50 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80027a8:	4b7c      	ldr	r3, [pc, #496]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7fe fafd 	bl	8000daa <Is_OMNI_On>
 80027b0:	0003      	movs	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <UART2_RX_transfer_complete_callback+0x8ca>
 80027b6:	f000 fc47 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80027ba:	4b70      	ldr	r3, [pc, #448]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b7b      	ldr	r3, [pc, #492]	@ (80029b0 <UART2_RX_transfer_complete_callback+0xac0>)
 80027c2:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	005a      	lsls	r2, r3, #1
 80027c8:	4b74      	ldr	r3, [pc, #464]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 80027ca:	0011      	movs	r1, r2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f002 fae6 	bl	8004d9e <Set_Status_Bit>
 80027d2:	f000 fc39 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80027d6:	4b69      	ldr	r3, [pc, #420]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe fa54 	bl	8000c86 <Is_CC_Status_Byte>
 80027de:	0003      	movs	r3, r0
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d134      	bne.n	800284e <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 80027e4:	4b65      	ldr	r3, [pc, #404]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b72      	ldr	r3, [pc, #456]	@ (80029b4 <UART2_RX_transfer_complete_callback+0xac4>)
 80027ec:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80027ee:	4b73      	ldr	r3, [pc, #460]	@ (80029bc <UART2_RX_transfer_complete_callback+0xacc>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b61      	ldr	r3, [pc, #388]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 80027f6:	0011      	movs	r1, r2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe fa98 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 80027fe:	0003      	movs	r3, r0
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10d      	bne.n	8002820 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 8002804:	4b5d      	ldr	r3, [pc, #372]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b69      	ldr	r3, [pc, #420]	@ (80029b0 <UART2_RX_transfer_complete_callback+0xac0>)
 800280c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	005a      	lsls	r2, r3, #1
 8002812:	4b62      	ldr	r3, [pc, #392]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 8002814:	0011      	movs	r1, r2
 8002816:	0018      	movs	r0, r3
 8002818:	f002 fac1 	bl	8004d9e <Set_Status_Bit>
 800281c:	f000 fc14 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8002820:	4b5e      	ldr	r3, [pc, #376]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 8002822:	0018      	movs	r0, r3
 8002824:	f7fe fac1 	bl	8000daa <Is_OMNI_On>
 8002828:	0003      	movs	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <UART2_RX_transfer_complete_callback+0x942>
 800282e:	f000 fc0b 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8002832:	4b52      	ldr	r3, [pc, #328]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	4b5d      	ldr	r3, [pc, #372]	@ (80029b0 <UART2_RX_transfer_complete_callback+0xac0>)
 800283a:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	005a      	lsls	r2, r3, #1
 8002840:	4b56      	ldr	r3, [pc, #344]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 8002842:	0011      	movs	r1, r2
 8002844:	0018      	movs	r0, r3
 8002846:	f002 faaa 	bl	8004d9e <Set_Status_Bit>
 800284a:	f000 fbfd 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 800284e:	4b4b      	ldr	r3, [pc, #300]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002850:	0018      	movs	r0, r3
 8002852:	f7fe fa66 	bl	8000d22 <Is_Sysex_Start_Status_Byte>
 8002856:	0003      	movs	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <UART2_RX_transfer_complete_callback+0x970>
 800285c:	f000 fbf4 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 8002860:	4b46      	ldr	r3, [pc, #280]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b52      	ldr	r3, [pc, #328]	@ (80029b0 <UART2_RX_transfer_complete_callback+0xac0>)
 8002868:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 800286a:	4b52      	ldr	r3, [pc, #328]	@ (80029b4 <UART2_RX_transfer_complete_callback+0xac4>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	005a      	lsls	r2, r3, #1
 8002874:	4b49      	ldr	r3, [pc, #292]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 8002876:	0011      	movs	r1, r2
 8002878:	0018      	movs	r0, r3
 800287a:	f002 fa90 	bl	8004d9e <Set_Status_Bit>
 800287e:	f000 fbe3 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 8002882:	4b4c      	ldr	r3, [pc, #304]	@ (80029b4 <UART2_RX_transfer_complete_callback+0xac4>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <UART2_RX_transfer_complete_callback+0x9a0>
 800288c:	f000 fbdc 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 8002890:	4b3a      	ldr	r3, [pc, #232]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002892:	0018      	movs	r0, r3
 8002894:	f7fe f9eb 	bl	8000c6e <Is_Data_Byte>
 8002898:	0003      	movs	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	d000      	beq.n	80028a0 <UART2_RX_transfer_complete_callback+0x9b0>
 800289e:	e151      	b.n	8002b44 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80028a0:	2380      	movs	r3, #128	@ 0x80
 80028a2:	005a      	lsls	r2, r3, #1
 80028a4:	4b3d      	ldr	r3, [pc, #244]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 80028a6:	0011      	movs	r1, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	f002 fa78 	bl	8004d9e <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 80028ae:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <UART2_RX_transfer_complete_callback+0xac4>)
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe f9e1 	bl	8000c78 <Is_PC_Status_Byte>
 80028b6:	0003      	movs	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d143      	bne.n	8002944 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80028bc:	4b3f      	ldr	r3, [pc, #252]	@ (80029bc <UART2_RX_transfer_complete_callback+0xacc>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b3c      	ldr	r3, [pc, #240]	@ (80029b4 <UART2_RX_transfer_complete_callback+0xac4>)
 80028c4:	0011      	movs	r1, r2
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7fe fa31 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 80028cc:	0003      	movs	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d008      	beq.n	80028e4 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80028d2:	4b32      	ldr	r3, [pc, #200]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7fe fa68 	bl	8000daa <Is_OMNI_On>
 80028da:	0003      	movs	r3, r0
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d001      	beq.n	80028e4 <UART2_RX_transfer_complete_callback+0x9f4>
 80028e0:	f000 fbb2 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80028e4:	4b34      	ldr	r3, [pc, #208]	@ (80029b8 <UART2_RX_transfer_complete_callback+0xac8>)
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fe fa2f 	bl	8000d4a <Is_Data_Buffer_Empty>
 80028ec:	0003      	movs	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <UART2_RX_transfer_complete_callback+0xa06>
 80028f2:	f000 fba9 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80028f6:	4b21      	ldr	r3, [pc, #132]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 80028f8:	2104      	movs	r1, #4
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7fe fa39 	bl	8000d72 <Is_Program_Change_Data_Byte_In_Range>
 8002900:	0003      	movs	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d10f      	bne.n	8002926 <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 8002906:	f7fe f933 	bl	8000b70 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 800290a:	4b1c      	ldr	r3, [pc, #112]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <UART2_RX_transfer_complete_callback+0xad0>)
 8002916:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8002918:	f7fe f826 	bl	8000968 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800291c:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 800291e:	2108      	movs	r1, #8
 8002920:	0018      	movs	r0, r3
 8002922:	f002 fa4e 	bl	8004dc2 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 8002926:	4b24      	ldr	r3, [pc, #144]	@ (80029b8 <UART2_RX_transfer_complete_callback+0xac8>)
 8002928:	0018      	movs	r0, r3
 800292a:	f7fe fa1a 	bl	8000d62 <Clear_Data_Buffer>
								active_status_byte = 0;
 800292e:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <UART2_RX_transfer_complete_callback+0xac0>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002934:	4a19      	ldr	r2, [pc, #100]	@ (800299c <UART2_RX_transfer_complete_callback+0xaac>)
 8002936:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <UART2_RX_transfer_complete_callback+0xad4>)
 8002938:	0011      	movs	r1, r2
 800293a:	0018      	movs	r0, r3
 800293c:	f7fe fa3f 	bl	8000dbe <Reset_and_Stop_MIDI_Software_Timer>
 8002940:	f000 fb82 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8002944:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <UART2_RX_transfer_complete_callback+0xac4>)
 8002946:	0018      	movs	r0, r3
 8002948:	f7fe f99d 	bl	8000c86 <Is_CC_Status_Byte>
 800294c:	0003      	movs	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d001      	beq.n	8002956 <UART2_RX_transfer_complete_callback+0xa66>
 8002952:	f000 fb79 	bl	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002956:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <UART2_RX_transfer_complete_callback+0xac8>)
 8002958:	0018      	movs	r0, r3
 800295a:	f7fe f9f6 	bl	8000d4a <Is_Data_Buffer_Empty>
 800295e:	0003      	movs	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	d131      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8002964:	4b05      	ldr	r3, [pc, #20]	@ (800297c <UART2_RX_transfer_complete_callback+0xa8c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <UART2_RX_transfer_complete_callback+0xac8>)
 800296c:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800296e:	4b15      	ldr	r3, [pc, #84]	@ (80029c4 <UART2_RX_transfer_complete_callback+0xad4>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e368      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	2000042c 	.word	0x2000042c
 800297c:	2000051a 	.word	0x2000051a
 8002980:	20000c78 	.word	0x20000c78
 8002984:	50000800 	.word	0x50000800
 8002988:	20000ca4 	.word	0x20000ca4
 800298c:	200007d4 	.word	0x200007d4
 8002990:	20000422 	.word	0x20000422
 8002994:	20000c80 	.word	0x20000c80
 8002998:	20000cec 	.word	0x20000cec
 800299c:	20000d28 	.word	0x20000d28
 80029a0:	2000001a 	.word	0x2000001a
 80029a4:	08008b94 	.word	0x08008b94
 80029a8:	20000d10 	.word	0x20000d10
 80029ac:	20000bdc 	.word	0x20000bdc
 80029b0:	20000518 	.word	0x20000518
 80029b4:	20000517 	.word	0x20000517
 80029b8:	2000050d 	.word	0x2000050d
 80029bc:	20000519 	.word	0x20000519
 80029c0:	200004b1 	.word	0x200004b1
 80029c4:	20000d20 	.word	0x20000d20

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80029c8:	4bd6      	ldr	r3, [pc, #856]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4bd6      	ldr	r3, [pc, #856]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 80029d0:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80029d2:	4ad6      	ldr	r2, [pc, #856]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 80029d4:	4bd6      	ldr	r3, [pc, #856]	@ (8002d30 <UART2_RX_transfer_complete_callback+0xe40>)
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fe f9f0 	bl	8000dbe <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80029de:	4bd2      	ldr	r3, [pc, #840]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe f957 	bl	8000c94 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80029e6:	0003      	movs	r3, r0
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d14c      	bne.n	8002a86 <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 80029ec:	4bd1      	ldr	r3, [pc, #836]	@ (8002d34 <UART2_RX_transfer_complete_callback+0xe44>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4bd1      	ldr	r3, [pc, #836]	@ (8002d38 <UART2_RX_transfer_complete_callback+0xe48>)
 80029f4:	0011      	movs	r1, r2
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7fe f999 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 80029fc:	0003      	movs	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d139      	bne.n	8002a76 <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8002a02:	4ace      	ldr	r2, [pc, #824]	@ (8002d3c <UART2_RX_transfer_complete_callback+0xe4c>)
 8002a04:	4bc8      	ldr	r3, [pc, #800]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fe f970 	bl	8000cee <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d130      	bne.n	8002a76 <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8002a14:	4bc4      	ldr	r3, [pc, #784]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b79      	cmp	r3, #121	@ 0x79
 8002a1c:	d10b      	bne.n	8002a36 <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 8002a1e:	4ac8      	ldr	r2, [pc, #800]	@ (8002d40 <UART2_RX_transfer_complete_callback+0xe50>)
 8002a20:	4bc8      	ldr	r3, [pc, #800]	@ (8002d44 <UART2_RX_transfer_complete_callback+0xe54>)
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7fe f9db 	bl	8000de0 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002a2a:	4bc0      	ldr	r3, [pc, #768]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002a2c:	2108      	movs	r1, #8
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f002 f9c7 	bl	8004dc2 <Clear_Status_Bit>
 8002a34:	e01f      	b.n	8002a76 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8002a36:	4bbc      	ldr	r3, [pc, #752]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b7a      	cmp	r3, #122	@ 0x7a
 8002a3e:	d107      	bne.n	8002a50 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 8002a40:	f7fe f9fe 	bl	8000e40 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002a44:	4bb9      	ldr	r3, [pc, #740]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002a46:	2108      	movs	r1, #8
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f002 f9ba 	bl	8004dc2 <Clear_Status_Bit>
 8002a4e:	e012      	b.n	8002a76 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8002a50:	4bb5      	ldr	r3, [pc, #724]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b7c      	cmp	r3, #124	@ 0x7c
 8002a58:	d104      	bne.n	8002a64 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 8002a5a:	4bb4      	ldr	r3, [pc, #720]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7fe fa15 	bl	8000e8c <Set_OMNI_Off>
 8002a62:	e008      	b.n	8002a76 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8002a64:	4bb0      	ldr	r3, [pc, #704]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b7d      	cmp	r3, #125	@ 0x7d
 8002a6c:	d103      	bne.n	8002a76 <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 8002a6e:	4baf      	ldr	r3, [pc, #700]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7fe fa12 	bl	8000e9a <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 8002a76:	4bb4      	ldr	r3, [pc, #720]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002a7c:	4baa      	ldr	r3, [pc, #680]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fe f96f 	bl	8000d62 <Clear_Data_Buffer>
 8002a84:	e2e0      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8002a86:	4ba8      	ldr	r3, [pc, #672]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7fe f918 	bl	8000cbe <Is_Utilised_CC_First_Data_Byte>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d14f      	bne.n	8002b34 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8002a94:	4ba7      	ldr	r3, [pc, #668]	@ (8002d34 <UART2_RX_transfer_complete_callback+0xe44>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4ba7      	ldr	r3, [pc, #668]	@ (8002d38 <UART2_RX_transfer_complete_callback+0xe48>)
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7fe f945 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d006      	beq.n	8002ab8 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8002aaa:	4ba0      	ldr	r3, [pc, #640]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fe f97c 	bl	8000daa <Is_OMNI_On>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d135      	bne.n	8002b24 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8002ab8:	4b9b      	ldr	r3, [pc, #620]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b14      	cmp	r3, #20
 8002ac0:	d104      	bne.n	8002acc <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002ac2:	4b9e      	ldr	r3, [pc, #632]	@ (8002d3c <UART2_RX_transfer_complete_callback+0xe4c>)
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fe f803 	bl	8000ad0 <Set_Waveshape_to_CC_Mode_and_Value>
 8002aca:	e02b      	b.n	8002b24 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8002acc:	4b96      	ldr	r3, [pc, #600]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b15      	cmp	r3, #21
 8002ad4:	d109      	bne.n	8002aea <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002ad6:	4b99      	ldr	r3, [pc, #612]	@ (8002d3c <UART2_RX_transfer_complete_callback+0xe4c>)
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7fe f809 	bl	8000af0 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002ade:	4b93      	ldr	r3, [pc, #588]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f002 f96d 	bl	8004dc2 <Clear_Status_Bit>
 8002ae8:	e01c      	b.n	8002b24 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8002aea:	4b8f      	ldr	r3, [pc, #572]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b16      	cmp	r3, #22
 8002af2:	d104      	bne.n	8002afe <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002af4:	4b91      	ldr	r3, [pc, #580]	@ (8002d3c <UART2_RX_transfer_complete_callback+0xe4c>)
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fe f80a 	bl	8000b10 <Set_Depth_to_CC_Mode_and_Value>
 8002afc:	e012      	b.n	8002b24 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8002afe:	4b8a      	ldr	r3, [pc, #552]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b17      	cmp	r3, #23
 8002b06:	d104      	bne.n	8002b12 <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002b08:	4b8c      	ldr	r3, [pc, #560]	@ (8002d3c <UART2_RX_transfer_complete_callback+0xe4c>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7fe f810 	bl	8000b30 <Set_Symmetry_to_CC_Mode_and_Value>
 8002b10:	e008      	b.n	8002b24 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8002b12:	4b85      	ldr	r3, [pc, #532]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b18      	cmp	r3, #24
 8002b1a:	d103      	bne.n	8002b24 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002b1c:	4b87      	ldr	r3, [pc, #540]	@ (8002d3c <UART2_RX_transfer_complete_callback+0xe4c>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fe f816 	bl	8000b50 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8002b24:	4b88      	ldr	r3, [pc, #544]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fe f918 	bl	8000d62 <Clear_Data_Buffer>
 8002b32:	e289      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8002b34:	4b84      	ldr	r3, [pc, #528]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7fe f910 	bl	8000d62 <Clear_Data_Buffer>
 8002b42:	e281      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8002b44:	4b78      	ldr	r3, [pc, #480]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7fe f90b 	bl	8000d62 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002b4c:	4a77      	ldr	r2, [pc, #476]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002b4e:	4b78      	ldr	r3, [pc, #480]	@ (8002d30 <UART2_RX_transfer_complete_callback+0xe40>)
 8002b50:	0011      	movs	r1, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7fe f933 	bl	8000dbe <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8002b58:	4b72      	ldr	r3, [pc, #456]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7fe f88c 	bl	8000c78 <Is_PC_Status_Byte>
 8002b60:	0003      	movs	r3, r0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d131      	bne.n	8002bca <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8002b66:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4b72      	ldr	r3, [pc, #456]	@ (8002d38 <UART2_RX_transfer_complete_callback+0xe48>)
 8002b6e:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002b70:	4b70      	ldr	r3, [pc, #448]	@ (8002d34 <UART2_RX_transfer_complete_callback+0xe44>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4b6b      	ldr	r3, [pc, #428]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002b78:	0011      	movs	r1, r2
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7fe f8d7 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002b80:	0003      	movs	r3, r0
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10c      	bne.n	8002ba0 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 8002b86:	4b67      	ldr	r3, [pc, #412]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002b8e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	005a      	lsls	r2, r3, #1
 8002b94:	4b65      	ldr	r3, [pc, #404]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002b96:	0011      	movs	r1, r2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f002 f900 	bl	8004d9e <Set_Status_Bit>
 8002b9e:	e253      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8002ba0:	4b62      	ldr	r3, [pc, #392]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7fe f901 	bl	8000daa <Is_OMNI_On>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d000      	beq.n	8002bb0 <UART2_RX_transfer_complete_callback+0xcc0>
 8002bae:	e24b      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8002bb0:	4b5c      	ldr	r3, [pc, #368]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4b64      	ldr	r3, [pc, #400]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002bb8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	005a      	lsls	r2, r3, #1
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f002 f8eb 	bl	8004d9e <Set_Status_Bit>
 8002bc8:	e23e      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8002bca:	4b56      	ldr	r3, [pc, #344]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7fe f85a 	bl	8000c86 <Is_CC_Status_Byte>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d131      	bne.n	8002c3c <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 8002bd8:	4b52      	ldr	r3, [pc, #328]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <UART2_RX_transfer_complete_callback+0xe48>)
 8002be0:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002be2:	4b54      	ldr	r3, [pc, #336]	@ (8002d34 <UART2_RX_transfer_complete_callback+0xe44>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	4b4e      	ldr	r3, [pc, #312]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002bea:	0011      	movs	r1, r2
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7fe f89e 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10c      	bne.n	8002c12 <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b52      	ldr	r3, [pc, #328]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002c00:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002c02:	2380      	movs	r3, #128	@ 0x80
 8002c04:	005a      	lsls	r2, r3, #1
 8002c06:	4b49      	ldr	r3, [pc, #292]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002c08:	0011      	movs	r1, r2
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f002 f8c7 	bl	8004d9e <Set_Status_Bit>
 8002c10:	e21a      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8002c12:	4b46      	ldr	r3, [pc, #280]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fe f8c8 	bl	8000daa <Is_OMNI_On>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d000      	beq.n	8002c22 <UART2_RX_transfer_complete_callback+0xd32>
 8002c20:	e212      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8002c22:	4b40      	ldr	r3, [pc, #256]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4b47      	ldr	r3, [pc, #284]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002c2a:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	005a      	lsls	r2, r3, #1
 8002c30:	4b3e      	ldr	r3, [pc, #248]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002c32:	0011      	movs	r1, r2
 8002c34:	0018      	movs	r0, r3
 8002c36:	f002 f8b2 	bl	8004d9e <Set_Status_Bit>
 8002c3a:	e205      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8002c3c:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fe f86f 	bl	8000d22 <Is_Sysex_Start_Status_Byte>
 8002c44:	0003      	movs	r3, r0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d000      	beq.n	8002c4c <UART2_RX_transfer_complete_callback+0xd5c>
 8002c4a:	e1fd      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8002c4c:	4b35      	ldr	r3, [pc, #212]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4b3d      	ldr	r3, [pc, #244]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002c54:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8002c56:	4b38      	ldr	r3, [pc, #224]	@ (8002d38 <UART2_RX_transfer_complete_callback+0xe48>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	005a      	lsls	r2, r3, #1
 8002c60:	4b32      	ldr	r3, [pc, #200]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002c62:	0011      	movs	r1, r2
 8002c64:	0018      	movs	r0, r3
 8002c66:	f002 f89a 	bl	8004d9e <Set_Status_Bit>
 8002c6a:	e1ed      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8002c6c:	4b36      	ldr	r3, [pc, #216]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d100      	bne.n	8002c78 <UART2_RX_transfer_complete_callback+0xd88>
 8002c76:	e1e7      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	009a      	lsls	r2, r3, #2
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f002 f878 	bl	8004d76 <Get_Status_Bit>
 8002c86:	0003      	movs	r3, r0
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10d      	bne.n	8002ca8 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8002c92:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7fe f864 	bl	8000d62 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002c9a:	4a24      	ldr	r2, [pc, #144]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002c9c:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <UART2_RX_transfer_complete_callback+0xe40>)
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fe f88c 	bl	8000dbe <Reset_and_Stop_MIDI_Software_Timer>
 8002ca6:	e1cf      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7fd ffdf 	bl	8000c6e <Is_Data_Byte>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d000      	beq.n	8002cb8 <UART2_RX_transfer_complete_callback+0xdc8>
 8002cb6:	e133      	b.n	8002f20 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 8002cb8:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7fd ffdc 	bl	8000c78 <Is_PC_Status_Byte>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d144      	bne.n	8002d50 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002cc6:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fe f83e 	bl	8000d4a <Is_Data_Buffer_Empty>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d000      	beq.n	8002cd6 <UART2_RX_transfer_complete_callback+0xde6>
 8002cd4:	e1b8      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8002cd6:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002cd8:	2104      	movs	r1, #4
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7fe f849 	bl	8000d72 <Is_Program_Change_Data_Byte_In_Range>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10f      	bne.n	8002d06 <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 8002ce6:	f7fd ff43 	bl	8000b70 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <UART2_RX_transfer_complete_callback+0xe34>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <UART2_RX_transfer_complete_callback+0xe5c>)
 8002cf6:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8002cf8:	f7fd fe36 	bl	8000968 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002cfe:	2108      	movs	r1, #8
 8002d00:	0018      	movs	r0, r3
 8002d02:	f002 f85e 	bl	8004dc2 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8002d06:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <UART2_RX_transfer_complete_callback+0xe38>)
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fe f82a 	bl	8000d62 <Clear_Data_Buffer>
							active_status_byte = 0;
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <UART2_RX_transfer_complete_callback+0xe58>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002d14:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <UART2_RX_transfer_complete_callback+0xe3c>)
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <UART2_RX_transfer_complete_callback+0xe40>)
 8002d18:	0011      	movs	r1, r2
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f7fe f84f 	bl	8000dbe <Reset_and_Stop_MIDI_Software_Timer>
 8002d20:	e192      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	2000051a 	.word	0x2000051a
 8002d28:	2000050d 	.word	0x2000050d
 8002d2c:	20000d28 	.word	0x20000d28
 8002d30:	20000d20 	.word	0x20000d20
 8002d34:	20000519 	.word	0x20000519
 8002d38:	20000517 	.word	0x20000517
 8002d3c:	2000050e 	.word	0x2000050e
 8002d40:	2000001a 	.word	0x2000001a
 8002d44:	20000cec 	.word	0x20000cec
 8002d48:	20000518 	.word	0x20000518
 8002d4c:	200004b1 	.word	0x200004b1

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8002d50:	4bc4      	ldr	r3, [pc, #784]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002d52:	0018      	movs	r0, r3
 8002d54:	f7fd ff97 	bl	8000c86 <Is_CC_Status_Byte>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d000      	beq.n	8002d60 <UART2_RX_transfer_complete_callback+0xe70>
 8002d5e:	e0d2      	b.n	8002f06 <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002d60:	4bc1      	ldr	r3, [pc, #772]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd fff1 	bl	8000d4a <Is_Data_Buffer_Empty>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d108      	bne.n	8002d80 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8002d6e:	4bbf      	ldr	r3, [pc, #764]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4bbc      	ldr	r3, [pc, #752]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002d76:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8002d78:	4bbd      	ldr	r3, [pc, #756]	@ (8003070 <UART2_RX_transfer_complete_callback+0x1180>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e163      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8002d80:	4bba      	ldr	r3, [pc, #744]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4bb8      	ldr	r3, [pc, #736]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002d88:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002d8a:	4aba      	ldr	r2, [pc, #744]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002d8c:	4bb8      	ldr	r3, [pc, #736]	@ (8003070 <UART2_RX_transfer_complete_callback+0x1180>)
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7fe f814 	bl	8000dbe <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002d96:	4bb7      	ldr	r3, [pc, #732]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002d98:	2108      	movs	r1, #8
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f002 f811 	bl	8004dc2 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8002da0:	4bb1      	ldr	r3, [pc, #708]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7fd ff76 	bl	8000c94 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8002da8:	0003      	movs	r3, r0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d14c      	bne.n	8002e48 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8002dae:	4bb2      	ldr	r3, [pc, #712]	@ (8003078 <UART2_RX_transfer_complete_callback+0x1188>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	4bab      	ldr	r3, [pc, #684]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd ffb8 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d139      	bne.n	8002e38 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8002dc4:	4aad      	ldr	r2, [pc, #692]	@ (800307c <UART2_RX_transfer_complete_callback+0x118c>)
 8002dc6:	4ba8      	ldr	r3, [pc, #672]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002dc8:	0011      	movs	r1, r2
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fd ff8f 	bl	8000cee <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d130      	bne.n	8002e38 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8002dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b79      	cmp	r3, #121	@ 0x79
 8002dde:	d10b      	bne.n	8002df8 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 8002de0:	4aa7      	ldr	r2, [pc, #668]	@ (8003080 <UART2_RX_transfer_complete_callback+0x1190>)
 8002de2:	4ba8      	ldr	r3, [pc, #672]	@ (8003084 <UART2_RX_transfer_complete_callback+0x1194>)
 8002de4:	0011      	movs	r1, r2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fd fffa 	bl	8000de0 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002dec:	4ba1      	ldr	r3, [pc, #644]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002dee:	2108      	movs	r1, #8
 8002df0:	0018      	movs	r0, r3
 8002df2:	f001 ffe6 	bl	8004dc2 <Clear_Status_Bit>
 8002df6:	e01f      	b.n	8002e38 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8002df8:	4b9b      	ldr	r3, [pc, #620]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b7a      	cmp	r3, #122	@ 0x7a
 8002e00:	d107      	bne.n	8002e12 <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8002e02:	f7fe f81d 	bl	8000e40 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002e06:	4b9b      	ldr	r3, [pc, #620]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002e08:	2108      	movs	r1, #8
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f001 ffd9 	bl	8004dc2 <Clear_Status_Bit>
 8002e10:	e012      	b.n	8002e38 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8002e12:	4b95      	ldr	r3, [pc, #596]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b7c      	cmp	r3, #124	@ 0x7c
 8002e1a:	d104      	bne.n	8002e26 <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8002e1c:	4b95      	ldr	r3, [pc, #596]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fe f834 	bl	8000e8c <Set_OMNI_Off>
 8002e24:	e008      	b.n	8002e38 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8002e26:	4b90      	ldr	r3, [pc, #576]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b7d      	cmp	r3, #125	@ 0x7d
 8002e2e:	d103      	bne.n	8002e38 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8002e30:	4b90      	ldr	r3, [pc, #576]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7fe f831 	bl	8000e9a <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8002e38:	4b8a      	ldr	r3, [pc, #552]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002e3e:	4b8a      	ldr	r3, [pc, #552]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fd ff8e 	bl	8000d62 <Clear_Data_Buffer>
 8002e46:	e0ff      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8002e48:	4b87      	ldr	r3, [pc, #540]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7fd ff37 	bl	8000cbe <Is_Utilised_CC_First_Data_Byte>
 8002e50:	0003      	movs	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d14f      	bne.n	8002ef6 <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8002e56:	4b88      	ldr	r3, [pc, #544]	@ (8003078 <UART2_RX_transfer_complete_callback+0x1188>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b81      	ldr	r3, [pc, #516]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7fd ff64 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002e66:	0003      	movs	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d006      	beq.n	8002e7a <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8002e6c:	4b81      	ldr	r3, [pc, #516]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7fd ff9b 	bl	8000daa <Is_OMNI_On>
 8002e74:	0003      	movs	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d135      	bne.n	8002ee6 <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8002e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b14      	cmp	r3, #20
 8002e82:	d104      	bne.n	8002e8e <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002e84:	4b7d      	ldr	r3, [pc, #500]	@ (800307c <UART2_RX_transfer_complete_callback+0x118c>)
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7fd fe22 	bl	8000ad0 <Set_Waveshape_to_CC_Mode_and_Value>
 8002e8c:	e02b      	b.n	8002ee6 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8002e8e:	4b76      	ldr	r3, [pc, #472]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b15      	cmp	r3, #21
 8002e96:	d109      	bne.n	8002eac <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002e98:	4b78      	ldr	r3, [pc, #480]	@ (800307c <UART2_RX_transfer_complete_callback+0x118c>)
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7fd fe28 	bl	8000af0 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002ea0:	4b74      	ldr	r3, [pc, #464]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f001 ff8c 	bl	8004dc2 <Clear_Status_Bit>
 8002eaa:	e01c      	b.n	8002ee6 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8002eac:	4b6e      	ldr	r3, [pc, #440]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b16      	cmp	r3, #22
 8002eb4:	d104      	bne.n	8002ec0 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002eb6:	4b71      	ldr	r3, [pc, #452]	@ (800307c <UART2_RX_transfer_complete_callback+0x118c>)
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fd fe29 	bl	8000b10 <Set_Depth_to_CC_Mode_and_Value>
 8002ebe:	e012      	b.n	8002ee6 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8002ec0:	4b69      	ldr	r3, [pc, #420]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b17      	cmp	r3, #23
 8002ec8:	d104      	bne.n	8002ed4 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002eca:	4b6c      	ldr	r3, [pc, #432]	@ (800307c <UART2_RX_transfer_complete_callback+0x118c>)
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7fd fe2f 	bl	8000b30 <Set_Symmetry_to_CC_Mode_and_Value>
 8002ed2:	e008      	b.n	8002ee6 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8002ed4:	4b64      	ldr	r3, [pc, #400]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b18      	cmp	r3, #24
 8002edc:	d103      	bne.n	8002ee6 <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002ede:	4b67      	ldr	r3, [pc, #412]	@ (800307c <UART2_RX_transfer_complete_callback+0x118c>)
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7fd fe35 	bl	8000b50 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8002ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002eec:	4b5e      	ldr	r3, [pc, #376]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7fd ff37 	bl	8000d62 <Clear_Data_Buffer>
 8002ef4:	e0a8      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002efc:	4b5a      	ldr	r3, [pc, #360]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7fd ff2f 	bl	8000d62 <Clear_Data_Buffer>
 8002f04:	e0a0      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8002f06:	4b57      	ldr	r3, [pc, #348]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7fd ff0a 	bl	8000d22 <Is_Sysex_Start_Status_Byte>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d000      	beq.n	8002f16 <UART2_RX_transfer_complete_callback+0x1026>
 8002f14:	e098      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002f16:	4b54      	ldr	r3, [pc, #336]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7fd ff16 	bl	8000d4a <Is_Data_Buffer_Empty>
 8002f1e:	e093      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8002f20:	4b51      	ldr	r3, [pc, #324]	@ (8003068 <UART2_RX_transfer_complete_callback+0x1178>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd ff1d 	bl	8000d62 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002f28:	4a52      	ldr	r2, [pc, #328]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002f2a:	4b51      	ldr	r3, [pc, #324]	@ (8003070 <UART2_RX_transfer_complete_callback+0x1180>)
 8002f2c:	0011      	movs	r1, r2
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7fd ff45 	bl	8000dbe <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8002f34:	4b4d      	ldr	r3, [pc, #308]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7fd fe9e 	bl	8000c78 <Is_PC_Status_Byte>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d130      	bne.n	8002fa4 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8002f42:	4b4a      	ldr	r3, [pc, #296]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	4b4f      	ldr	r3, [pc, #316]	@ (8003088 <UART2_RX_transfer_complete_callback+0x1198>)
 8002f4a:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <UART2_RX_transfer_complete_callback+0x1188>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b46      	ldr	r3, [pc, #280]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002f54:	0011      	movs	r1, r2
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd fee9 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10c      	bne.n	8002f7c <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8002f62:	4b42      	ldr	r3, [pc, #264]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002f6a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	005a      	lsls	r2, r3, #1
 8002f70:	4b40      	ldr	r3, [pc, #256]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f001 ff12 	bl	8004d9e <Set_Status_Bit>
 8002f7a:	e065      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8002f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7fd ff13 	bl	8000daa <Is_OMNI_On>
 8002f84:	0003      	movs	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d15e      	bne.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8002f8a:	4b38      	ldr	r3, [pc, #224]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002f92:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	005a      	lsls	r2, r3, #1
 8002f98:	4b36      	ldr	r3, [pc, #216]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f001 fefe 	bl	8004d9e <Set_Status_Bit>
 8002fa2:	e051      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8002fa4:	4b31      	ldr	r3, [pc, #196]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7fd fe6d 	bl	8000c86 <Is_CC_Status_Byte>
 8002fac:	0003      	movs	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d130      	bne.n	8003014 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b33      	ldr	r3, [pc, #204]	@ (8003088 <UART2_RX_transfer_complete_callback+0x1198>)
 8002fba:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <UART2_RX_transfer_complete_callback+0x1188>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002fc4:	0011      	movs	r1, r2
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7fd feb1 	bl	8000d2e <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10c      	bne.n	8002fec <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 8002fd2:	4b26      	ldr	r3, [pc, #152]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8002fda:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	005a      	lsls	r2, r3, #1
 8002fe0:	4b24      	ldr	r3, [pc, #144]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002fe2:	0011      	movs	r1, r2
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 feda 	bl	8004d9e <Set_Status_Bit>
 8002fea:	e02d      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7fd fedb 	bl	8000daa <Is_OMNI_On>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d126      	bne.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b18      	ldr	r3, [pc, #96]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 8003002:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	005a      	lsls	r2, r3, #1
 8003008:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 800300a:	0011      	movs	r1, r2
 800300c:	0018      	movs	r0, r3
 800300e:	f001 fec6 	bl	8004d9e <Set_Status_Bit>
 8003012:	e019      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003014:	4b15      	ldr	r3, [pc, #84]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8003016:	0018      	movs	r0, r3
 8003018:	f7fd fe83 	bl	8000d22 <Is_Sysex_Start_Status_Byte>
 800301c:	0003      	movs	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d112      	bne.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003022:	4b12      	ldr	r3, [pc, #72]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b0e      	ldr	r3, [pc, #56]	@ (8003064 <UART2_RX_transfer_complete_callback+0x1174>)
 800302a:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 800302c:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <UART2_RX_transfer_complete_callback+0x1198>)
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	005a      	lsls	r2, r3, #1
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <UART2_RX_transfer_complete_callback+0x1184>)
 8003038:	0011      	movs	r1, r2
 800303a:	0018      	movs	r0, r3
 800303c:	f001 feaf 	bl	8004d9e <Set_Status_Bit>
 8003040:	e002      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	e000      	b.n	8003048 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003046:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003048:	4b08      	ldr	r3, [pc, #32]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800304e:	4907      	ldr	r1, [pc, #28]	@ (800306c <UART2_RX_transfer_complete_callback+0x117c>)
 8003050:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <UART2_RX_transfer_complete_callback+0x119c>)
 8003052:	2201      	movs	r2, #1
 8003054:	0018      	movs	r0, r3
 8003056:	f005 fd07 	bl	8008a68 <HAL_UART_Receive_DMA>
}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	20000518 	.word	0x20000518
 8003068:	2000050d 	.word	0x2000050d
 800306c:	2000051a 	.word	0x2000051a
 8003070:	20000d20 	.word	0x20000d20
 8003074:	20000d28 	.word	0x20000d28
 8003078:	20000519 	.word	0x20000519
 800307c:	2000050e 	.word	0x2000050e
 8003080:	2000001a 	.word	0x2000001a
 8003084:	20000cec 	.word	0x20000cec
 8003088:	20000517 	.word	0x20000517
 800308c:	2000064c 	.word	0x2000064c

08003090 <HAL_GPIO_EXTI_Falling_Callback>:

void __attribute__((optimize("O0")))HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	0002      	movs	r2, r0
 8003098:	1dbb      	adds	r3, r7, #6
 800309a:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	2b80      	cmp	r3, #128	@ 0x80
 80030a2:	d117      	bne.n	80030d4 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80030a4:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d004      	beq.n	80030b8 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 80030ae:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	d10d      	bne.n	80030d4 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	0099      	lsls	r1, r3, #2
 80030bc:	23a0      	movs	r3, #160	@ 0xa0
 80030be:	05db      	lsls	r3, r3, #23
 80030c0:	2201      	movs	r2, #1
 80030c2:	0018      	movs	r0, r3
 80030c4:	f002 ffa6 	bl	8006014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80030c8:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	2140      	movs	r1, #64	@ 0x40
 80030ce:	0018      	movs	r0, r3
 80030d0:	f002 ffa0 	bl	8006014 <HAL_GPIO_WritePin>
		}
	}
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	2000042c 	.word	0x2000042c
 80030e0:	50000800 	.word	0x50000800

080030e4 <HAL_GPIO_EXTI_Rising_Callback>:

void __attribute__((optimize("O0")))HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	0002      	movs	r2, r0
 80030ec:	1dbb      	adds	r3, r7, #6
 80030ee:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 80030f0:	1dbb      	adds	r3, r7, #6
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	2b80      	cmp	r3, #128	@ 0x80
 80030f6:	d000      	beq.n	80030fa <HAL_GPIO_EXTI_Rising_Callback+0x16>
 80030f8:	e0dd      	b.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 80030fa:	4b71      	ldr	r3, [pc, #452]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d114      	bne.n	800312e <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	23a0      	movs	r3, #160	@ 0xa0
 800310a:	05db      	lsls	r3, r3, #23
 800310c:	2200      	movs	r2, #0
 800310e:	0018      	movs	r0, r3
 8003110:	f002 ff80 	bl	8006014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003114:	4b6b      	ldr	r3, [pc, #428]	@ (80032c4 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003116:	2201      	movs	r2, #1
 8003118:	2140      	movs	r1, #64	@ 0x40
 800311a:	0018      	movs	r0, r3
 800311c:	f002 ff7a 	bl	8006014 <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003120:	4b67      	ldr	r3, [pc, #412]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003122:	2201      	movs	r2, #1
 8003124:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003126:	4b66      	ldr	r3, [pc, #408]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003128:	2207      	movs	r2, #7
 800312a:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 800312c:	e0c3      	b.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 800312e:	4b64      	ldr	r3, [pc, #400]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b03      	cmp	r3, #3
 8003136:	d114      	bne.n	8003162 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	0099      	lsls	r1, r3, #2
 800313c:	23a0      	movs	r3, #160	@ 0xa0
 800313e:	05db      	lsls	r3, r3, #23
 8003140:	2200      	movs	r2, #0
 8003142:	0018      	movs	r0, r3
 8003144:	f002 ff66 	bl	8006014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003148:	4b5e      	ldr	r3, [pc, #376]	@ (80032c4 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800314a:	2201      	movs	r2, #1
 800314c:	2140      	movs	r1, #64	@ 0x40
 800314e:	0018      	movs	r0, r3
 8003150:	f002 ff60 	bl	8006014 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003154:	4b5a      	ldr	r3, [pc, #360]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003156:	2203      	movs	r2, #3
 8003158:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800315a:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800315c:	2207      	movs	r2, #7
 800315e:	701a      	strb	r2, [r3, #0]
}
 8003160:	e0a9      	b.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003162:	4b57      	ldr	r3, [pc, #348]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d114      	bne.n	8003196 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800316c:	2380      	movs	r3, #128	@ 0x80
 800316e:	0099      	lsls	r1, r3, #2
 8003170:	23a0      	movs	r3, #160	@ 0xa0
 8003172:	05db      	lsls	r3, r3, #23
 8003174:	2200      	movs	r2, #0
 8003176:	0018      	movs	r0, r3
 8003178:	f002 ff4c 	bl	8006014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800317c:	4b51      	ldr	r3, [pc, #324]	@ (80032c4 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800317e:	2201      	movs	r2, #1
 8003180:	2140      	movs	r1, #64	@ 0x40
 8003182:	0018      	movs	r0, r3
 8003184:	f002 ff46 	bl	8006014 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003188:	4b4d      	ldr	r3, [pc, #308]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800318a:	2202      	movs	r2, #2
 800318c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800318e:	4b4c      	ldr	r3, [pc, #304]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003190:	2207      	movs	r2, #7
 8003192:	701a      	strb	r2, [r3, #0]
}
 8003194:	e08f      	b.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003196:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b04      	cmp	r3, #4
 800319e:	d12b      	bne.n	80031f8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 80031a0:	4b49      	ldr	r3, [pc, #292]	@ (80032c8 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d126      	bne.n	80031f8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 80031aa:	4b48      	ldr	r3, [pc, #288]	@ (80032cc <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80031ac:	2120      	movs	r1, #32
 80031ae:	0018      	movs	r0, r3
 80031b0:	f001 fde1 	bl	8004d76 <Get_Status_Bit>
 80031b4:	0003      	movs	r3, r0
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d11e      	bne.n	80031f8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	0099      	lsls	r1, r3, #2
 80031be:	23a0      	movs	r3, #160	@ 0xa0
 80031c0:	05db      	lsls	r3, r3, #23
 80031c2:	2200      	movs	r2, #0
 80031c4:	0018      	movs	r0, r3
 80031c6:	f002 ff25 	bl	8006014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80031ca:	4b3e      	ldr	r3, [pc, #248]	@ (80032c4 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	2140      	movs	r1, #64	@ 0x40
 80031d0:	0018      	movs	r0, r3
 80031d2:	f002 ff1f 	bl	8006014 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 80031d6:	4b3a      	ldr	r3, [pc, #232]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80031d8:	2204      	movs	r2, #4
 80031da:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80031dc:	4b38      	ldr	r3, [pc, #224]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80031de:	2207      	movs	r2, #7
 80031e0:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80031e2:	4b3a      	ldr	r3, [pc, #232]	@ (80032cc <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80031e4:	2120      	movs	r1, #32
 80031e6:	0018      	movs	r0, r3
 80031e8:	f001 fdeb 	bl	8004dc2 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80031ec:	4b37      	ldr	r3, [pc, #220]	@ (80032cc <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80031ee:	2140      	movs	r1, #64	@ 0x40
 80031f0:	0018      	movs	r0, r3
 80031f2:	f001 fde6 	bl	8004dc2 <Clear_Status_Bit>
 80031f6:	e05e      	b.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80031f8:	4b31      	ldr	r3, [pc, #196]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d12b      	bne.n	800325a <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003202:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d126      	bne.n	800325a <HAL_GPIO_EXTI_Rising_Callback+0x176>
 800320c:	4b2f      	ldr	r3, [pc, #188]	@ (80032cc <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 800320e:	2120      	movs	r1, #32
 8003210:	0018      	movs	r0, r3
 8003212:	f001 fdb0 	bl	8004d76 <Get_Status_Bit>
 8003216:	0003      	movs	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d11e      	bne.n	800325a <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	0099      	lsls	r1, r3, #2
 8003220:	23a0      	movs	r3, #160	@ 0xa0
 8003222:	05db      	lsls	r3, r3, #23
 8003224:	2200      	movs	r2, #0
 8003226:	0018      	movs	r0, r3
 8003228:	f002 fef4 	bl	8006014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800322e:	2201      	movs	r2, #1
 8003230:	2140      	movs	r1, #64	@ 0x40
 8003232:	0018      	movs	r0, r3
 8003234:	f002 feee 	bl	8006014 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003238:	4b21      	ldr	r3, [pc, #132]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800323a:	2208      	movs	r2, #8
 800323c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800323e:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003240:	2207      	movs	r2, #7
 8003242:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003244:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003246:	2120      	movs	r1, #32
 8003248:	0018      	movs	r0, r3
 800324a:	f001 fdba 	bl	8004dc2 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800324e:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003250:	2140      	movs	r1, #64	@ 0x40
 8003252:	0018      	movs	r0, r3
 8003254:	f001 fdb5 	bl	8004dc2 <Clear_Status_Bit>
 8003258:	e02d      	b.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 800325a:	4b19      	ldr	r3, [pc, #100]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b07      	cmp	r3, #7
 8003262:	d114      	bne.n	800328e <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	0099      	lsls	r1, r3, #2
 8003268:	23a0      	movs	r3, #160	@ 0xa0
 800326a:	05db      	lsls	r3, r3, #23
 800326c:	2200      	movs	r2, #0
 800326e:	0018      	movs	r0, r3
 8003270:	f002 fed0 	bl	8006014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003274:	4b13      	ldr	r3, [pc, #76]	@ (80032c4 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003276:	2201      	movs	r2, #1
 8003278:	2140      	movs	r1, #64	@ 0x40
 800327a:	0018      	movs	r0, r3
 800327c:	f002 feca 	bl	8006014 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003280:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003282:	2207      	movs	r2, #7
 8003284:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003286:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003288:	2206      	movs	r2, #6
 800328a:	701a      	strb	r2, [r3, #0]
}
 800328c:	e013      	b.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b06      	cmp	r3, #6
 8003296:	d10e      	bne.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	23a0      	movs	r3, #160	@ 0xa0
 800329e:	05db      	lsls	r3, r3, #23
 80032a0:	2200      	movs	r2, #0
 80032a2:	0018      	movs	r0, r3
 80032a4:	f002 feb6 	bl	8006014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80032a8:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	2140      	movs	r1, #64	@ 0x40
 80032ae:	0018      	movs	r0, r3
 80032b0:	f002 feb0 	bl	8006014 <HAL_GPIO_WritePin>
}
 80032b4:	e7ff      	b.n	80032b6 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	2000042c 	.word	0x2000042c
 80032c4:	50000800 	.word	0x50000800
 80032c8:	20000422 	.word	0x20000422
 80032cc:	20000d28 	.word	0x20000d28

080032d0 <LPTIM1_callback>:

void __attribute__((optimize("O0")))LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	6078      	str	r0, [r7, #4]
	static volatile enum Validate preset_select_mode_is_active = NO;
	static volatile enum Validate save_or_preset_mode_engaged = NO;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80032d8:	250f      	movs	r5, #15
 80032da:	197c      	adds	r4, r7, r5
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	00da      	lsls	r2, r3, #3
 80032e0:	23a0      	movs	r3, #160	@ 0xa0
 80032e2:	05db      	lsls	r3, r3, #23
 80032e4:	0011      	movs	r1, r2
 80032e6:	0018      	movs	r0, r3
 80032e8:	f002 fe8e 	bl	8006008 <HAL_GPIO_ReadPin>
 80032ec:	0003      	movs	r3, r0
 80032ee:	7023      	strb	r3, [r4, #0]

	if(save_or_preset_mode_engaged == NO){
 80032f0:	4bc2      	ldr	r3, [pc, #776]	@ (80035fc <LPTIM1_callback+0x32c>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d000      	beq.n	80032fc <LPTIM1_callback+0x2c>
 80032fa:	e1a2      	b.n	8003642 <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 80032fc:	4bc0      	ldr	r3, [pc, #768]	@ (8003600 <LPTIM1_callback+0x330>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10a      	bne.n	800331c <LPTIM1_callback+0x4c>
 8003306:	197b      	adds	r3, r7, r5
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800330e:	4bbc      	ldr	r3, [pc, #752]	@ (8003600 <LPTIM1_callback+0x330>)
 8003310:	2205      	movs	r2, #5
 8003312:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003314:	4bba      	ldr	r3, [pc, #744]	@ (8003600 <LPTIM1_callback+0x330>)
 8003316:	2201      	movs	r2, #1
 8003318:	705a      	strb	r2, [r3, #1]
 800331a:	e070      	b.n	80033fe <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 800331c:	4bb8      	ldr	r3, [pc, #736]	@ (8003600 <LPTIM1_callback+0x330>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d10b      	bne.n	800333e <LPTIM1_callback+0x6e>
 8003326:	230f      	movs	r3, #15
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003330:	4bb3      	ldr	r3, [pc, #716]	@ (8003600 <LPTIM1_callback+0x330>)
 8003332:	2205      	movs	r2, #5
 8003334:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003336:	4bb2      	ldr	r3, [pc, #712]	@ (8003600 <LPTIM1_callback+0x330>)
 8003338:	2202      	movs	r2, #2
 800333a:	705a      	strb	r2, [r3, #1]
 800333c:	e05f      	b.n	80033fe <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 800333e:	4bb0      	ldr	r3, [pc, #704]	@ (8003600 <LPTIM1_callback+0x330>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b03      	cmp	r3, #3
 8003346:	d10b      	bne.n	8003360 <LPTIM1_callback+0x90>
 8003348:	230f      	movs	r3, #15
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003352:	4bab      	ldr	r3, [pc, #684]	@ (8003600 <LPTIM1_callback+0x330>)
 8003354:	2205      	movs	r2, #5
 8003356:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003358:	4ba9      	ldr	r3, [pc, #676]	@ (8003600 <LPTIM1_callback+0x330>)
 800335a:	2203      	movs	r2, #3
 800335c:	705a      	strb	r2, [r3, #1]
 800335e:	e04e      	b.n	80033fe <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003360:	4ba7      	ldr	r3, [pc, #668]	@ (8003600 <LPTIM1_callback+0x330>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b06      	cmp	r3, #6
 8003368:	d122      	bne.n	80033b0 <LPTIM1_callback+0xe0>
 800336a:	230f      	movs	r3, #15
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11d      	bne.n	80033b0 <LPTIM1_callback+0xe0>
 8003374:	4ba3      	ldr	r3, [pc, #652]	@ (8003604 <LPTIM1_callback+0x334>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <LPTIM1_callback+0xe0>
 800337e:	4ba2      	ldr	r3, [pc, #648]	@ (8003608 <LPTIM1_callback+0x338>)
 8003380:	2120      	movs	r1, #32
 8003382:	0018      	movs	r0, r3
 8003384:	f001 fcf7 	bl	8004d76 <Get_Status_Bit>
 8003388:	0003      	movs	r3, r0
 800338a:	2b01      	cmp	r3, #1
 800338c:	d110      	bne.n	80033b0 <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800338e:	4b9c      	ldr	r3, [pc, #624]	@ (8003600 <LPTIM1_callback+0x330>)
 8003390:	2205      	movs	r2, #5
 8003392:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003394:	4b9a      	ldr	r3, [pc, #616]	@ (8003600 <LPTIM1_callback+0x330>)
 8003396:	2206      	movs	r2, #6
 8003398:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800339a:	4b9b      	ldr	r3, [pc, #620]	@ (8003608 <LPTIM1_callback+0x338>)
 800339c:	2120      	movs	r1, #32
 800339e:	0018      	movs	r0, r3
 80033a0:	f001 fd0f 	bl	8004dc2 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033a4:	4b98      	ldr	r3, [pc, #608]	@ (8003608 <LPTIM1_callback+0x338>)
 80033a6:	2140      	movs	r1, #64	@ 0x40
 80033a8:	0018      	movs	r0, r3
 80033aa:	f001 fd0a 	bl	8004dc2 <Clear_Status_Bit>
 80033ae:	e026      	b.n	80033fe <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80033b0:	4b93      	ldr	r3, [pc, #588]	@ (8003600 <LPTIM1_callback+0x330>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d121      	bne.n	80033fe <LPTIM1_callback+0x12e>
 80033ba:	230f      	movs	r3, #15
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d11c      	bne.n	80033fe <LPTIM1_callback+0x12e>
 80033c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003604 <LPTIM1_callback+0x334>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d117      	bne.n	80033fe <LPTIM1_callback+0x12e>
 80033ce:	4b8e      	ldr	r3, [pc, #568]	@ (8003608 <LPTIM1_callback+0x338>)
 80033d0:	2120      	movs	r1, #32
 80033d2:	0018      	movs	r0, r3
 80033d4:	f001 fccf 	bl	8004d76 <Get_Status_Bit>
 80033d8:	0003      	movs	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10f      	bne.n	80033fe <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80033de:	4b88      	ldr	r3, [pc, #544]	@ (8003600 <LPTIM1_callback+0x330>)
 80033e0:	2205      	movs	r2, #5
 80033e2:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80033e4:	4b86      	ldr	r3, [pc, #536]	@ (8003600 <LPTIM1_callback+0x330>)
 80033e6:	2208      	movs	r2, #8
 80033e8:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80033ea:	4b87      	ldr	r3, [pc, #540]	@ (8003608 <LPTIM1_callback+0x338>)
 80033ec:	2120      	movs	r1, #32
 80033ee:	0018      	movs	r0, r3
 80033f0:	f001 fce7 	bl	8004dc2 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033f4:	4b84      	ldr	r3, [pc, #528]	@ (8003608 <LPTIM1_callback+0x338>)
 80033f6:	2140      	movs	r1, #64	@ 0x40
 80033f8:	0018      	movs	r0, r3
 80033fa:	f001 fce2 	bl	8004dc2 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 80033fe:	4b80      	ldr	r3, [pc, #512]	@ (8003600 <LPTIM1_callback+0x330>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b05      	cmp	r3, #5
 8003406:	d004      	beq.n	8003412 <LPTIM1_callback+0x142>
 8003408:	4b7d      	ldr	r3, [pc, #500]	@ (8003600 <LPTIM1_callback+0x330>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b04      	cmp	r3, #4
 8003410:	d11a      	bne.n	8003448 <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003412:	4b7e      	ldr	r3, [pc, #504]	@ (800360c <LPTIM1_callback+0x33c>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d108      	bne.n	800342e <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	0099      	lsls	r1, r3, #2
 8003420:	23a0      	movs	r3, #160	@ 0xa0
 8003422:	05db      	lsls	r3, r3, #23
 8003424:	2200      	movs	r2, #0
 8003426:	0018      	movs	r0, r3
 8003428:	f002 fdf4 	bl	8006014 <HAL_GPIO_WritePin>
 800342c:	e00c      	b.n	8003448 <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 800342e:	4b77      	ldr	r3, [pc, #476]	@ (800360c <LPTIM1_callback+0x33c>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d107      	bne.n	8003448 <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	0099      	lsls	r1, r3, #2
 800343c:	23a0      	movs	r3, #160	@ 0xa0
 800343e:	05db      	lsls	r3, r3, #23
 8003440:	2201      	movs	r2, #1
 8003442:	0018      	movs	r0, r3
 8003444:	f002 fde6 	bl	8006014 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	011a      	lsls	r2, r3, #4
 800344c:	4b6e      	ldr	r3, [pc, #440]	@ (8003608 <LPTIM1_callback+0x338>)
 800344e:	0011      	movs	r1, r2
 8003450:	0018      	movs	r0, r3
 8003452:	f001 fc90 	bl	8004d76 <Get_Status_Bit>
 8003456:	0003      	movs	r3, r0
 8003458:	2b01      	cmp	r3, #1
 800345a:	d000      	beq.n	800345e <LPTIM1_callback+0x18e>
 800345c:	e0c0      	b.n	80035e0 <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 800345e:	2380      	movs	r3, #128	@ 0x80
 8003460:	011a      	lsls	r2, r3, #4
 8003462:	4b69      	ldr	r3, [pc, #420]	@ (8003608 <LPTIM1_callback+0x338>)
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f001 fcab 	bl	8004dc2 <Clear_Status_Bit>

			pots_counter = 0;
 800346c:	4b68      	ldr	r3, [pc, #416]	@ (8003610 <LPTIM1_callback+0x340>)
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003472:	4b63      	ldr	r3, [pc, #396]	@ (8003600 <LPTIM1_callback+0x330>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b03      	cmp	r3, #3
 800347a:	d004      	beq.n	8003486 <LPTIM1_callback+0x1b6>
 800347c:	4b60      	ldr	r3, [pc, #384]	@ (8003600 <LPTIM1_callback+0x330>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d105      	bne.n	8003492 <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003486:	4b63      	ldr	r3, [pc, #396]	@ (8003614 <LPTIM1_callback+0x344>)
 8003488:	2101      	movs	r1, #1
 800348a:	0018      	movs	r0, r3
 800348c:	f7fd fd18 	bl	8000ec0 <Pot_Check>
 8003490:	e069      	b.n	8003566 <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003492:	4b5b      	ldr	r3, [pc, #364]	@ (8003600 <LPTIM1_callback+0x330>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b06      	cmp	r3, #6
 800349a:	d117      	bne.n	80034cc <LPTIM1_callback+0x1fc>
 800349c:	4b59      	ldr	r3, [pc, #356]	@ (8003604 <LPTIM1_callback+0x334>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d112      	bne.n	80034cc <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80034a6:	4b58      	ldr	r3, [pc, #352]	@ (8003608 <LPTIM1_callback+0x338>)
 80034a8:	2140      	movs	r1, #64	@ 0x40
 80034aa:	0018      	movs	r0, r3
 80034ac:	f001 fc77 	bl	8004d9e <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80034b0:	4b55      	ldr	r3, [pc, #340]	@ (8003608 <LPTIM1_callback+0x338>)
 80034b2:	2120      	movs	r1, #32
 80034b4:	0018      	movs	r0, r3
 80034b6:	f001 fc5e 	bl	8004d76 <Get_Status_Bit>
 80034ba:	0003      	movs	r3, r0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d152      	bne.n	8003566 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 80034c0:	4b54      	ldr	r3, [pc, #336]	@ (8003614 <LPTIM1_callback+0x344>)
 80034c2:	2101      	movs	r1, #1
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7fd fcfb 	bl	8000ec0 <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80034ca:	e04c      	b.n	8003566 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 80034cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003600 <LPTIM1_callback+0x330>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d12b      	bne.n	800352e <LPTIM1_callback+0x25e>
 80034d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003604 <LPTIM1_callback+0x334>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d126      	bne.n	800352e <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80034e0:	4b49      	ldr	r3, [pc, #292]	@ (8003608 <LPTIM1_callback+0x338>)
 80034e2:	2140      	movs	r1, #64	@ 0x40
 80034e4:	0018      	movs	r0, r3
 80034e6:	f001 fc5a 	bl	8004d9e <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80034ea:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <LPTIM1_callback+0x338>)
 80034ec:	2120      	movs	r1, #32
 80034ee:	0018      	movs	r0, r3
 80034f0:	f001 fc41 	bl	8004d76 <Get_Status_Bit>
 80034f4:	0003      	movs	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d135      	bne.n	8003566 <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 80034fa:	2380      	movs	r3, #128	@ 0x80
 80034fc:	0099      	lsls	r1, r3, #2
 80034fe:	23a0      	movs	r3, #160	@ 0xa0
 8003500:	05db      	lsls	r3, r3, #23
 8003502:	2201      	movs	r2, #1
 8003504:	0018      	movs	r0, r3
 8003506:	f002 fd85 	bl	8006014 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800350a:	4b43      	ldr	r3, [pc, #268]	@ (8003618 <LPTIM1_callback+0x348>)
 800350c:	2200      	movs	r2, #0
 800350e:	2140      	movs	r1, #64	@ 0x40
 8003510:	0018      	movs	r0, r3
 8003512:	f002 fd7f 	bl	8006014 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 8003516:	4b41      	ldr	r3, [pc, #260]	@ (800361c <LPTIM1_callback+0x34c>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 800351c:	4b40      	ldr	r3, [pc, #256]	@ (8003620 <LPTIM1_callback+0x350>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003522:	4b3c      	ldr	r3, [pc, #240]	@ (8003614 <LPTIM1_callback+0x344>)
 8003524:	2101      	movs	r1, #1
 8003526:	0018      	movs	r0, r3
 8003528:	f7fd fcca 	bl	8000ec0 <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 800352c:	e01b      	b.n	8003566 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 800352e:	4b34      	ldr	r3, [pc, #208]	@ (8003600 <LPTIM1_callback+0x330>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b04      	cmp	r3, #4
 8003536:	d116      	bne.n	8003566 <LPTIM1_callback+0x296>
 8003538:	4b32      	ldr	r3, [pc, #200]	@ (8003604 <LPTIM1_callback+0x334>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d111      	bne.n	8003566 <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003542:	4b31      	ldr	r3, [pc, #196]	@ (8003608 <LPTIM1_callback+0x338>)
 8003544:	2140      	movs	r1, #64	@ 0x40
 8003546:	0018      	movs	r0, r3
 8003548:	f001 fc29 	bl	8004d9e <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 800354c:	4b2e      	ldr	r3, [pc, #184]	@ (8003608 <LPTIM1_callback+0x338>)
 800354e:	2120      	movs	r1, #32
 8003550:	0018      	movs	r0, r3
 8003552:	f001 fc10 	bl	8004d76 <Get_Status_Bit>
 8003556:	0003      	movs	r3, r0
 8003558:	2b01      	cmp	r3, #1
 800355a:	d104      	bne.n	8003566 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 800355c:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <LPTIM1_callback+0x344>)
 800355e:	2101      	movs	r1, #1
 8003560:	0018      	movs	r0, r3
 8003562:	f7fd fcad 	bl	8000ec0 <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003566:	4b2f      	ldr	r3, [pc, #188]	@ (8003624 <LPTIM1_callback+0x354>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b03      	cmp	r3, #3
 800356e:	d004      	beq.n	800357a <LPTIM1_callback+0x2aa>
 8003570:	4b2c      	ldr	r3, [pc, #176]	@ (8003624 <LPTIM1_callback+0x354>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d104      	bne.n	8003584 <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 800357a:	4b26      	ldr	r3, [pc, #152]	@ (8003614 <LPTIM1_callback+0x344>)
 800357c:	2100      	movs	r1, #0
 800357e:	0018      	movs	r0, r3
 8003580:	f7fd fc9e 	bl	8000ec0 <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003584:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <LPTIM1_callback+0x358>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b03      	cmp	r3, #3
 800358c:	d004      	beq.n	8003598 <LPTIM1_callback+0x2c8>
 800358e:	4b26      	ldr	r3, [pc, #152]	@ (8003628 <LPTIM1_callback+0x358>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d104      	bne.n	80035a2 <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003598:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <LPTIM1_callback+0x344>)
 800359a:	2102      	movs	r1, #2
 800359c:	0018      	movs	r0, r3
 800359e:	f7fd fc8f 	bl	8000ec0 <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 80035a2:	4b22      	ldr	r3, [pc, #136]	@ (800362c <LPTIM1_callback+0x35c>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d004      	beq.n	80035b6 <LPTIM1_callback+0x2e6>
 80035ac:	4b1f      	ldr	r3, [pc, #124]	@ (800362c <LPTIM1_callback+0x35c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d104      	bne.n	80035c0 <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 80035b6:	4b17      	ldr	r3, [pc, #92]	@ (8003614 <LPTIM1_callback+0x344>)
 80035b8:	2103      	movs	r1, #3
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fd fc80 	bl	8000ec0 <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 80035c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <LPTIM1_callback+0x360>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d004      	beq.n	80035d4 <LPTIM1_callback+0x304>
 80035ca:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <LPTIM1_callback+0x360>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d136      	bne.n	8003642 <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 80035d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003614 <LPTIM1_callback+0x344>)
 80035d6:	2104      	movs	r1, #4
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fd fc71 	bl	8000ec0 <Pot_Check>
 80035de:	e030      	b.n	8003642 <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 80035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <LPTIM1_callback+0x340>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b40      	cmp	r3, #64	@ 0x40
 80035e8:	d124      	bne.n	8003634 <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	011a      	lsls	r2, r3, #4
 80035ee:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <LPTIM1_callback+0x338>)
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f001 fbd3 	bl	8004d9e <Set_Status_Bit>
 80035f8:	e023      	b.n	8003642 <LPTIM1_callback+0x372>
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	20000c64 	.word	0x20000c64
 8003600:	2000042c 	.word	0x2000042c
 8003604:	20000422 	.word	0x20000422
 8003608:	20000d28 	.word	0x20000d28
 800360c:	20000c65 	.word	0x20000c65
 8003610:	20000531 	.word	0x20000531
 8003614:	20000d10 	.word	0x20000d10
 8003618:	50000800 	.word	0x50000800
 800361c:	20000d1a 	.word	0x20000d1a
 8003620:	20000c78 	.word	0x20000c78
 8003624:	20000428 	.word	0x20000428
 8003628:	2000042a 	.word	0x2000042a
 800362c:	20000426 	.word	0x20000426
 8003630:	20000424 	.word	0x20000424
			}
			else{

				pots_counter++;
 8003634:	4bc3      	ldr	r3, [pc, #780]	@ (8003944 <LPTIM1_callback+0x674>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3301      	adds	r3, #1
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4bc1      	ldr	r3, [pc, #772]	@ (8003944 <LPTIM1_callback+0x674>)
 8003640:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003642:	4bc1      	ldr	r3, [pc, #772]	@ (8003948 <LPTIM1_callback+0x678>)
 8003644:	0018      	movs	r0, r3
 8003646:	f7fd fd5b 	bl	8001100 <Check_Tap_Tempo_Switch_State>
	static uint64_t depressed_num;
	static enum Preset_Selected preset = PRESET_ONE;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 800364a:	230e      	movs	r3, #14
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	4abf      	ldr	r2, [pc, #764]	@ (800394c <LPTIM1_callback+0x67c>)
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	701a      	strb	r2, [r3, #0]

	//if preset save timer has timed out, come out of preset save mode
	if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out) == YES){
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	019a      	lsls	r2, r3, #6
 8003658:	4bbd      	ldr	r3, [pc, #756]	@ (8003950 <LPTIM1_callback+0x680>)
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f001 fb8a 	bl	8004d76 <Get_Status_Bit>
 8003662:	0003      	movs	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d121      	bne.n	80036ac <LPTIM1_callback+0x3dc>

		Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	019a      	lsls	r2, r3, #6
 800366c:	4bb8      	ldr	r3, [pc, #736]	@ (8003950 <LPTIM1_callback+0x680>)
 800366e:	0011      	movs	r1, r2
 8003670:	0018      	movs	r0, r3
 8003672:	f001 fba6 	bl	8004dc2 <Clear_Status_Bit>

		preset = PRESET_ONE;
 8003676:	4bb7      	ldr	r3, [pc, #732]	@ (8003954 <LPTIM1_callback+0x684>)
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
		preset_save_mode_is_active = NO;
 800367c:	4bb6      	ldr	r3, [pc, #728]	@ (8003958 <LPTIM1_callback+0x688>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
		preset_select_mode_is_active = NO;
 8003682:	4bb6      	ldr	r3, [pc, #728]	@ (800395c <LPTIM1_callback+0x68c>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
		save_or_preset_mode_engaged = NO;
 8003688:	4bb5      	ldr	r3, [pc, #724]	@ (8003960 <LPTIM1_callback+0x690>)
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
		LED_fsm.prev_state = LED_fsm.current_state;
 800368e:	4baf      	ldr	r3, [pc, #700]	@ (800394c <LPTIM1_callback+0x67c>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4bad      	ldr	r3, [pc, #692]	@ (800394c <LPTIM1_callback+0x67c>)
 8003696:	705a      	strb	r2, [r3, #1]
		LED_fsm.current_state = led_state_saved;
 8003698:	4bb2      	ldr	r3, [pc, #712]	@ (8003964 <LPTIM1_callback+0x694>)
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	4bab      	ldr	r3, [pc, #684]	@ (800394c <LPTIM1_callback+0x67c>)
 800369e:	701a      	strb	r2, [r3, #0]
		depressed_num = 0;
 80036a0:	49b1      	ldr	r1, [pc, #708]	@ (8003968 <LPTIM1_callback+0x698>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	2300      	movs	r3, #0
 80036a6:	600a      	str	r2, [r1, #0]
 80036a8:	604b      	str	r3, [r1, #4]
 80036aa:	e194      	b.n	80039d6 <LPTIM1_callback+0x706>

	}
	else{

		if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 80036ac:	4ba6      	ldr	r3, [pc, #664]	@ (8003948 <LPTIM1_callback+0x678>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d000      	beq.n	80036b8 <LPTIM1_callback+0x3e8>
 80036b6:	e172      	b.n	800399e <LPTIM1_callback+0x6ce>

			if((preset_save_mode_is_active == NO) && (preset_select_mode_is_active == NO)){
 80036b8:	4ba7      	ldr	r3, [pc, #668]	@ (8003958 <LPTIM1_callback+0x688>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d000      	beq.n	80036c4 <LPTIM1_callback+0x3f4>
 80036c2:	e08a      	b.n	80037da <LPTIM1_callback+0x50a>
 80036c4:	4ba5      	ldr	r3, [pc, #660]	@ (800395c <LPTIM1_callback+0x68c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d000      	beq.n	80036d0 <LPTIM1_callback+0x400>
 80036ce:	e084      	b.n	80037da <LPTIM1_callback+0x50a>

				if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MIN) && (depressed_num <  TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MAX)){
 80036d0:	4ba5      	ldr	r3, [pc, #660]	@ (8003968 <LPTIM1_callback+0x698>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <LPTIM1_callback+0x414>
 80036da:	d113      	bne.n	8003704 <LPTIM1_callback+0x434>
 80036dc:	21af      	movs	r1, #175	@ 0xaf
 80036de:	00c9      	lsls	r1, r1, #3
 80036e0:	428a      	cmp	r2, r1
 80036e2:	d30f      	bcc.n	8003704 <LPTIM1_callback+0x434>
 80036e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003968 <LPTIM1_callback+0x698>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <LPTIM1_callback+0x434>
 80036ee:	d102      	bne.n	80036f6 <LPTIM1_callback+0x426>
 80036f0:	499e      	ldr	r1, [pc, #632]	@ (800396c <LPTIM1_callback+0x69c>)
 80036f2:	428a      	cmp	r2, r1
 80036f4:	d806      	bhi.n	8003704 <LPTIM1_callback+0x434>

					preset_select_mode_is_active = YES;
 80036f6:	4b99      	ldr	r3, [pc, #612]	@ (800395c <LPTIM1_callback+0x68c>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = YES;
 80036fc:	4b98      	ldr	r3, [pc, #608]	@ (8003960 <LPTIM1_callback+0x690>)
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e01b      	b.n	800373c <LPTIM1_callback+0x46c>

				}
				else if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT_MAX)){
 8003704:	4b98      	ldr	r3, [pc, #608]	@ (8003968 <LPTIM1_callback+0x698>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <LPTIM1_callback+0x446>
 800370e:	d115      	bne.n	800373c <LPTIM1_callback+0x46c>
 8003710:	4997      	ldr	r1, [pc, #604]	@ (8003970 <LPTIM1_callback+0x6a0>)
 8003712:	428a      	cmp	r2, r1
 8003714:	d912      	bls.n	800373c <LPTIM1_callback+0x46c>
 8003716:	4b94      	ldr	r3, [pc, #592]	@ (8003968 <LPTIM1_callback+0x698>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <LPTIM1_callback+0x466>
 8003720:	d102      	bne.n	8003728 <LPTIM1_callback+0x458>
 8003722:	4994      	ldr	r1, [pc, #592]	@ (8003974 <LPTIM1_callback+0x6a4>)
 8003724:	428a      	cmp	r2, r1
 8003726:	d806      	bhi.n	8003736 <LPTIM1_callback+0x466>

					preset_save_mode_is_active = YES;
 8003728:	4b8b      	ldr	r3, [pc, #556]	@ (8003958 <LPTIM1_callback+0x688>)
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = YES;
 800372e:	4b8c      	ldr	r3, [pc, #560]	@ (8003960 <LPTIM1_callback+0x690>)
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e002      	b.n	800373c <LPTIM1_callback+0x46c>
				}
				else if((depressed_num >= TAP_TEMPO_SWITCH_FACTORY_RESET_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_FACTORY_RESET_COUNT_MAX)){
 8003736:	4b8c      	ldr	r3, [pc, #560]	@ (8003968 <LPTIM1_callback+0x698>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]

					//@TODO Factory Reset Presets, and user preset used array in flash
				}
				if(save_or_preset_mode_engaged == YES){
 800373c:	4b88      	ldr	r3, [pc, #544]	@ (8003960 <LPTIM1_callback+0x690>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d000      	beq.n	8003748 <LPTIM1_callback+0x478>
 8003746:	e123      	b.n	8003990 <LPTIM1_callback+0x6c0>

					//start counter
					Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	4b80      	ldr	r3, [pc, #512]	@ (8003950 <LPTIM1_callback+0x680>)
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f001 fb24 	bl	8004d9e <Set_Status_Bit>
					//reset counter
					preset_save_idle_counter = 0;
 8003756:	4b88      	ldr	r3, [pc, #544]	@ (8003978 <LPTIM1_callback+0x6a8>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

					depressed_num = 0;
 800375c:	4982      	ldr	r1, [pc, #520]	@ (8003968 <LPTIM1_callback+0x698>)
 800375e:	2200      	movs	r2, #0
 8003760:	2300      	movs	r3, #0
 8003762:	600a      	str	r2, [r1, #0]
 8003764:	604b      	str	r3, [r1, #4]

					led_state_saved = led_state;
 8003766:	4b7f      	ldr	r3, [pc, #508]	@ (8003964 <LPTIM1_callback+0x694>)
 8003768:	220e      	movs	r2, #14
 800376a:	18ba      	adds	r2, r7, r2
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]

					if(preset == PRESET_ONE){
 8003770:	4b78      	ldr	r3, [pc, #480]	@ (8003954 <LPTIM1_callback+0x684>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d108      	bne.n	800378a <LPTIM1_callback+0x4ba>

						Set_LED_to_State(&LED_fsm, LED_ONE_BLINK);
 8003778:	4b74      	ldr	r3, [pc, #464]	@ (800394c <LPTIM1_callback+0x67c>)
 800377a:	2103      	movs	r1, #3
 800377c:	0018      	movs	r0, r3
 800377e:	f7fd fa47 	bl	8000c10 <Set_LED_to_State>
						preset = PRESET_TWO;
 8003782:	4b74      	ldr	r3, [pc, #464]	@ (8003954 <LPTIM1_callback+0x684>)
 8003784:	2202      	movs	r2, #2
 8003786:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 8003788:	e102      	b.n	8003990 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_TWO){
 800378a:	4b72      	ldr	r3, [pc, #456]	@ (8003954 <LPTIM1_callback+0x684>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d108      	bne.n	80037a4 <LPTIM1_callback+0x4d4>

						Set_LED_to_State(&LED_fsm, LED_TWO_BLINK);
 8003792:	4b6e      	ldr	r3, [pc, #440]	@ (800394c <LPTIM1_callback+0x67c>)
 8003794:	2104      	movs	r1, #4
 8003796:	0018      	movs	r0, r3
 8003798:	f7fd fa3a 	bl	8000c10 <Set_LED_to_State>
						preset = PRESET_THREE;
 800379c:	4b6d      	ldr	r3, [pc, #436]	@ (8003954 <LPTIM1_callback+0x684>)
 800379e:	2203      	movs	r2, #3
 80037a0:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 80037a2:	e0f5      	b.n	8003990 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_THREE){
 80037a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003954 <LPTIM1_callback+0x684>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d108      	bne.n	80037be <LPTIM1_callback+0x4ee>

						Set_LED_to_State(&LED_fsm, LED_THREE_BLINK);
 80037ac:	4b67      	ldr	r3, [pc, #412]	@ (800394c <LPTIM1_callback+0x67c>)
 80037ae:	2105      	movs	r1, #5
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fd fa2d 	bl	8000c10 <Set_LED_to_State>
						preset = PRESET_FOUR;
 80037b6:	4b67      	ldr	r3, [pc, #412]	@ (8003954 <LPTIM1_callback+0x684>)
 80037b8:	2204      	movs	r2, #4
 80037ba:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 80037bc:	e0e8      	b.n	8003990 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_FOUR){
 80037be:	4b65      	ldr	r3, [pc, #404]	@ (8003954 <LPTIM1_callback+0x684>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d000      	beq.n	80037c8 <LPTIM1_callback+0x4f8>
 80037c6:	e0e3      	b.n	8003990 <LPTIM1_callback+0x6c0>

						Set_LED_to_State(&LED_fsm, LED_FOUR_BLINK);
 80037c8:	4b60      	ldr	r3, [pc, #384]	@ (800394c <LPTIM1_callback+0x67c>)
 80037ca:	2106      	movs	r1, #6
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fd fa1f 	bl	8000c10 <Set_LED_to_State>
						preset = PRESET_ONE;
 80037d2:	4b60      	ldr	r3, [pc, #384]	@ (8003954 <LPTIM1_callback+0x684>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 80037d8:	e0da      	b.n	8003990 <LPTIM1_callback+0x6c0>
					}
				}
			}
			else{ //at least one of preset_save and preset_select active

				if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT_MAX)){
 80037da:	4b63      	ldr	r3, [pc, #396]	@ (8003968 <LPTIM1_callback+0x698>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <LPTIM1_callback+0x51a>
 80037e4:	d166      	bne.n	80038b4 <LPTIM1_callback+0x5e4>
 80037e6:	2a95      	cmp	r2, #149	@ 0x95
 80037e8:	d964      	bls.n	80038b4 <LPTIM1_callback+0x5e4>
 80037ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <LPTIM1_callback+0x698>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d15f      	bne.n	80038b4 <LPTIM1_callback+0x5e4>
 80037f4:	d103      	bne.n	80037fe <LPTIM1_callback+0x52e>
 80037f6:	21fa      	movs	r1, #250	@ 0xfa
 80037f8:	0049      	lsls	r1, r1, #1
 80037fa:	428a      	cmp	r2, r1
 80037fc:	d25a      	bcs.n	80038b4 <LPTIM1_callback+0x5e4>

					//get correct preset, as it will be 'off by one'
					if(preset == PRESET_ONE){
 80037fe:	4b55      	ldr	r3, [pc, #340]	@ (8003954 <LPTIM1_callback+0x684>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d103      	bne.n	800380e <LPTIM1_callback+0x53e>

						preset = PRESET_FOUR;
 8003806:	4b53      	ldr	r3, [pc, #332]	@ (8003954 <LPTIM1_callback+0x684>)
 8003808:	2204      	movs	r2, #4
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e016      	b.n	800383c <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_TWO){
 800380e:	4b51      	ldr	r3, [pc, #324]	@ (8003954 <LPTIM1_callback+0x684>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d103      	bne.n	800381e <LPTIM1_callback+0x54e>

						preset = PRESET_ONE;
 8003816:	4b4f      	ldr	r3, [pc, #316]	@ (8003954 <LPTIM1_callback+0x684>)
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e00e      	b.n	800383c <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_THREE){
 800381e:	4b4d      	ldr	r3, [pc, #308]	@ (8003954 <LPTIM1_callback+0x684>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d103      	bne.n	800382e <LPTIM1_callback+0x55e>

						preset = PRESET_TWO;
 8003826:	4b4b      	ldr	r3, [pc, #300]	@ (8003954 <LPTIM1_callback+0x684>)
 8003828:	2202      	movs	r2, #2
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	e006      	b.n	800383c <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_FOUR){
 800382e:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <LPTIM1_callback+0x684>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d102      	bne.n	800383c <LPTIM1_callback+0x56c>

						preset = PRESET_THREE;
 8003836:	4b47      	ldr	r3, [pc, #284]	@ (8003954 <LPTIM1_callback+0x684>)
 8003838:	2203      	movs	r2, #3
 800383a:	701a      	strb	r2, [r3, #0]
					}

					if(preset_save_mode_is_active == YES){
 800383c:	4b46      	ldr	r3, [pc, #280]	@ (8003958 <LPTIM1_callback+0x688>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d11b      	bne.n	800387e <LPTIM1_callback+0x5ae>

						//convert running params to preset, and update user preset and user preset used
						Store_Params_as_User_Preset(preset,
 8003846:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <LPTIM1_callback+0x684>)
 8003848:	7818      	ldrb	r0, [r3, #0]
 800384a:	4c4c      	ldr	r4, [pc, #304]	@ (800397c <LPTIM1_callback+0x6ac>)
 800384c:	4a4c      	ldr	r2, [pc, #304]	@ (8003980 <LPTIM1_callback+0x6b0>)
 800384e:	494d      	ldr	r1, [pc, #308]	@ (8003984 <LPTIM1_callback+0x6b4>)
 8003850:	4b4d      	ldr	r3, [pc, #308]	@ (8003988 <LPTIM1_callback+0x6b8>)
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	4b4d      	ldr	r3, [pc, #308]	@ (800398c <LPTIM1_callback+0x6bc>)
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	0023      	movs	r3, r4
 800385a:	f7fd f9af 	bl	8000bbc <Store_Params_as_User_Preset>
													user_presets_array,
													factory_presets_array,
													presets_converted_array);

						//store presets in flash
						Store_Single_Preset_In_Flash(user_presets_array[(uint8_t)(preset - 1)], (uint8_t)(preset - 1));
 800385e:	4b3d      	ldr	r3, [pc, #244]	@ (8003954 <LPTIM1_callback+0x684>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	3b01      	subs	r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	001a      	movs	r2, r3
 8003868:	4b44      	ldr	r3, [pc, #272]	@ (800397c <LPTIM1_callback+0x6ac>)
 800386a:	0092      	lsls	r2, r2, #2
 800386c:	58d2      	ldr	r2, [r2, r3]
 800386e:	4b39      	ldr	r3, [pc, #228]	@ (8003954 <LPTIM1_callback+0x684>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	0019      	movs	r1, r3
 8003878:	0010      	movs	r0, r2
 800387a:	f7fc fee9 	bl	8000650 <Store_Single_Preset_In_Flash>
					}

					Set_to_PC_Mode(preset);
 800387e:	4b35      	ldr	r3, [pc, #212]	@ (8003954 <LPTIM1_callback+0x684>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	0018      	movs	r0, r3
 8003884:	f7fd f9b2 	bl	8000bec <Set_to_PC_Mode>

					//led confirm - overwrite prev state with saved state
					Set_LED_to_State(&LED_fsm, LED_CONFIRM);
 8003888:	4b30      	ldr	r3, [pc, #192]	@ (800394c <LPTIM1_callback+0x67c>)
 800388a:	2107      	movs	r1, #7
 800388c:	0018      	movs	r0, r3
 800388e:	f7fd f9bf 	bl	8000c10 <Set_LED_to_State>
					LED_fsm.prev_state = led_state_saved;
 8003892:	4b34      	ldr	r3, [pc, #208]	@ (8003964 <LPTIM1_callback+0x694>)
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <LPTIM1_callback+0x67c>)
 8003898:	705a      	strb	r2, [r3, #1]

					preset = PRESET_ONE;
 800389a:	4b2e      	ldr	r3, [pc, #184]	@ (8003954 <LPTIM1_callback+0x684>)
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
					preset_save_mode_is_active = NO;
 80038a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <LPTIM1_callback+0x688>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
					preset_select_mode_is_active = NO;
 80038a6:	4b2d      	ldr	r3, [pc, #180]	@ (800395c <LPTIM1_callback+0x68c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = NO;
 80038ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003960 <LPTIM1_callback+0x690>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e06e      	b.n	8003992 <LPTIM1_callback+0x6c2>

				}
				else if(((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MAX))){
 80038b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003968 <LPTIM1_callback+0x698>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <LPTIM1_callback+0x5fa>
 80038be:	d000      	beq.n	80038c2 <LPTIM1_callback+0x5f2>
 80038c0:	e067      	b.n	8003992 <LPTIM1_callback+0x6c2>
 80038c2:	21af      	movs	r1, #175	@ 0xaf
 80038c4:	00c9      	lsls	r1, r1, #3
 80038c6:	428a      	cmp	r2, r1
 80038c8:	d363      	bcc.n	8003992 <LPTIM1_callback+0x6c2>
 80038ca:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <LPTIM1_callback+0x698>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d15e      	bne.n	8003992 <LPTIM1_callback+0x6c2>
 80038d4:	d102      	bne.n	80038dc <LPTIM1_callback+0x60c>
 80038d6:	4925      	ldr	r1, [pc, #148]	@ (800396c <LPTIM1_callback+0x69c>)
 80038d8:	428a      	cmp	r2, r1
 80038da:	d85a      	bhi.n	8003992 <LPTIM1_callback+0x6c2>

					//we want to have advancing through LED blinks, in either preset save or preset select mode, to
					//advance by PRESET_SELECT_MODE_ADVANCE_COUNT

					if(preset == PRESET_ONE){
 80038dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <LPTIM1_callback+0x684>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d108      	bne.n	80038f6 <LPTIM1_callback+0x626>

						Set_LED_to_State(&LED_fsm, LED_ONE_BLINK);
 80038e4:	4b19      	ldr	r3, [pc, #100]	@ (800394c <LPTIM1_callback+0x67c>)
 80038e6:	2103      	movs	r1, #3
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7fd f991 	bl	8000c10 <Set_LED_to_State>
						preset = PRESET_TWO;
 80038ee:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <LPTIM1_callback+0x684>)
 80038f0:	2202      	movs	r2, #2
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	e04d      	b.n	8003992 <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_TWO){
 80038f6:	4b17      	ldr	r3, [pc, #92]	@ (8003954 <LPTIM1_callback+0x684>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d108      	bne.n	8003910 <LPTIM1_callback+0x640>

						Set_LED_to_State(&LED_fsm, LED_TWO_BLINK);
 80038fe:	4b13      	ldr	r3, [pc, #76]	@ (800394c <LPTIM1_callback+0x67c>)
 8003900:	2104      	movs	r1, #4
 8003902:	0018      	movs	r0, r3
 8003904:	f7fd f984 	bl	8000c10 <Set_LED_to_State>
						preset = PRESET_THREE;
 8003908:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <LPTIM1_callback+0x684>)
 800390a:	2203      	movs	r2, #3
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e040      	b.n	8003992 <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_THREE){
 8003910:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <LPTIM1_callback+0x684>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d108      	bne.n	800392a <LPTIM1_callback+0x65a>

						Set_LED_to_State(&LED_fsm, LED_THREE_BLINK);
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <LPTIM1_callback+0x67c>)
 800391a:	2105      	movs	r1, #5
 800391c:	0018      	movs	r0, r3
 800391e:	f7fd f977 	bl	8000c10 <Set_LED_to_State>
						preset = PRESET_FOUR;
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <LPTIM1_callback+0x684>)
 8003924:	2204      	movs	r2, #4
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e033      	b.n	8003992 <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_FOUR){
 800392a:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <LPTIM1_callback+0x684>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d12f      	bne.n	8003992 <LPTIM1_callback+0x6c2>

						Set_LED_to_State(&LED_fsm, LED_FOUR_BLINK);
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <LPTIM1_callback+0x67c>)
 8003934:	2106      	movs	r1, #6
 8003936:	0018      	movs	r0, r3
 8003938:	f7fd f96a 	bl	8000c10 <Set_LED_to_State>
						preset = PRESET_ONE;
 800393c:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <LPTIM1_callback+0x684>)
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e026      	b.n	8003992 <LPTIM1_callback+0x6c2>
 8003944:	20000531 	.word	0x20000531
 8003948:	20000c65 	.word	0x20000c65
 800394c:	20000420 	.word	0x20000420
 8003950:	20000d28 	.word	0x20000d28
 8003954:	20000019 	.word	0x20000019
 8003958:	20000c67 	.word	0x20000c67
 800395c:	20000c68 	.word	0x20000c68
 8003960:	20000c64 	.word	0x20000c64
 8003964:	20000c69 	.word	0x20000c69
 8003968:	20000c70 	.word	0x20000c70
 800396c:	00000b53 	.word	0x00000b53
 8003970:	00000bb7 	.word	0x00000bb7
 8003974:	00001387 	.word	0x00001387
 8003978:	20000d1c 	.word	0x20000d1c
 800397c:	200004ec 	.word	0x200004ec
 8003980:	20000499 	.word	0x20000499
 8003984:	20000cec 	.word	0x20000cec
 8003988:	200004c4 	.word	0x200004c4
 800398c:	200004fc 	.word	0x200004fc
				if(save_or_preset_mode_engaged == YES){
 8003990:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			depressed_num = 0;
 8003992:	4916      	ldr	r1, [pc, #88]	@ (80039ec <LPTIM1_callback+0x71c>)
 8003994:	2200      	movs	r2, #0
 8003996:	2300      	movs	r3, #0
 8003998:	600a      	str	r2, [r1, #0]
 800399a:	604b      	str	r3, [r1, #4]
 800399c:	e01b      	b.n	80039d6 <LPTIM1_callback+0x706>
		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 800399e:	4b14      	ldr	r3, [pc, #80]	@ (80039f0 <LPTIM1_callback+0x720>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d116      	bne.n	80039d6 <LPTIM1_callback+0x706>

			if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 80039a8:	2380      	movs	r3, #128	@ 0x80
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <LPTIM1_callback+0x724>)
 80039ae:	0011      	movs	r1, r2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f001 f9e0 	bl	8004d76 <Get_Status_Bit>
 80039b6:	0003      	movs	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d102      	bne.n	80039c2 <LPTIM1_callback+0x6f2>

				preset_save_idle_counter = 0;
 80039bc:	4b0e      	ldr	r3, [pc, #56]	@ (80039f8 <LPTIM1_callback+0x728>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
			}

			depressed_num++;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	@ (80039ec <LPTIM1_callback+0x71c>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2001      	movs	r0, #1
 80039ca:	2100      	movs	r1, #0
 80039cc:	1812      	adds	r2, r2, r0
 80039ce:	414b      	adcs	r3, r1
 80039d0:	4906      	ldr	r1, [pc, #24]	@ (80039ec <LPTIM1_callback+0x71c>)
 80039d2:	600a      	str	r2, [r1, #0]
 80039d4:	604b      	str	r3, [r1, #4]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <LPTIM1_callback+0x72c>)
 80039d8:	22fa      	movs	r2, #250	@ 0xfa
 80039da:	21fa      	movs	r1, #250	@ 0xfa
 80039dc:	0018      	movs	r0, r3
 80039de:	f002 fd05 	bl	80063ec <HAL_LPTIM_SetOnce_Start_IT>

}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	20000c70 	.word	0x20000c70
 80039f0:	20000c65 	.word	0x20000c65
 80039f4:	20000d28 	.word	0x20000d28
 80039f8:	20000d1c 	.word	0x20000d1c
 80039fc:	20000538 	.word	0x20000538

08003a00 <TIM17_callback>:

void __attribute__((optimize("O0")))TIM17_callback(TIM_HandleTypeDef *htim){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <TIM17_callback+0x38>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2140      	movs	r1, #64	@ 0x40
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f002 fb00 	bl	8006014 <HAL_GPIO_WritePin>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8003a14:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <TIM17_callback+0x3c>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	001a      	movs	r2, r3
 8003a1a:	4909      	ldr	r1, [pc, #36]	@ (8003a40 <TIM17_callback+0x40>)
 8003a1c:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <TIM17_callback+0x44>)
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f001 fdca 	bl	80055b8 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <TIM17_callback+0x38>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	2140      	movs	r1, #64	@ 0x40
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f002 faf2 	bl	8006014 <HAL_GPIO_WritePin>
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b002      	add	sp, #8
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	50000400 	.word	0x50000400
 8003a3c:	08008b94 	.word	0x08008b94
 8003a40:	20000d10 	.word	0x20000d10
 8003a44:	20000bdc 	.word	0x20000bdc

08003a48 <TIM14_callback>:

void __attribute__((optimize("O0")))TIM14_callback(TIM_HandleTypeDef *htim){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 8003a50:	4bd1      	ldr	r3, [pc, #836]	@ (8003d98 <TIM14_callback+0x350>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d106      	bne.n	8003a68 <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a5a:	4bd0      	ldr	r3, [pc, #832]	@ (8003d9c <TIM14_callback+0x354>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2140      	movs	r1, #64	@ 0x40
 8003a60:	0018      	movs	r0, r3
 8003a62:	f002 fad7 	bl	8006014 <HAL_GPIO_WritePin>

				Set_LED_to_State(&LED_fsm, prev);
			}
		}
	}
}
 8003a66:	e1c3      	b.n	8003df0 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 8003a68:	4bcb      	ldr	r3, [pc, #812]	@ (8003d98 <TIM14_callback+0x350>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d106      	bne.n	8003a80 <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003a72:	4bca      	ldr	r3, [pc, #808]	@ (8003d9c <TIM14_callback+0x354>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	2140      	movs	r1, #64	@ 0x40
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f002 facb 	bl	8006014 <HAL_GPIO_WritePin>
}
 8003a7e:	e1b7      	b.n	8003df0 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 8003a80:	4bc5      	ldr	r3, [pc, #788]	@ (8003d98 <TIM14_callback+0x350>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d133      	bne.n	8003af2 <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003a8a:	4bc5      	ldr	r3, [pc, #788]	@ (8003da0 <TIM14_callback+0x358>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 8003a92:	4bc4      	ldr	r3, [pc, #784]	@ (8003da4 <TIM14_callback+0x35c>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a9c:	4bbf      	ldr	r3, [pc, #764]	@ (8003d9c <TIM14_callback+0x354>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	2140      	movs	r1, #64	@ 0x40
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f002 fab6 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003aa8:	4bbe      	ldr	r3, [pc, #760]	@ (8003da4 <TIM14_callback+0x35c>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4bbc      	ldr	r3, [pc, #752]	@ (8003da4 <TIM14_callback+0x35c>)
 8003ab4:	701a      	strb	r2, [r3, #0]
}
 8003ab6:	e19b      	b.n	8003df0 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 8003ab8:	4bba      	ldr	r3, [pc, #744]	@ (8003da4 <TIM14_callback+0x35c>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d900      	bls.n	8003ac4 <TIM14_callback+0x7c>
 8003ac2:	e195      	b.n	8003df0 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003ac4:	4bb5      	ldr	r3, [pc, #724]	@ (8003d9c <TIM14_callback+0x354>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2140      	movs	r1, #64	@ 0x40
 8003aca:	0018      	movs	r0, r3
 8003acc:	f002 faa2 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003ad0:	4bb4      	ldr	r3, [pc, #720]	@ (8003da4 <TIM14_callback+0x35c>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	4bb2      	ldr	r3, [pc, #712]	@ (8003da4 <TIM14_callback+0x35c>)
 8003adc:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 8003ade:	4bb1      	ldr	r3, [pc, #708]	@ (8003da4 <TIM14_callback+0x35c>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d000      	beq.n	8003aea <TIM14_callback+0xa2>
 8003ae8:	e182      	b.n	8003df0 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8003aea:	4bae      	ldr	r3, [pc, #696]	@ (8003da4 <TIM14_callback+0x35c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
}
 8003af0:	e17e      	b.n	8003df0 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 8003af2:	4ba9      	ldr	r3, [pc, #676]	@ (8003d98 <TIM14_callback+0x350>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d156      	bne.n	8003baa <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003afc:	4ba8      	ldr	r3, [pc, #672]	@ (8003da0 <TIM14_callback+0x358>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2200      	movs	r2, #0
 8003b02:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 8003b04:	4ba7      	ldr	r3, [pc, #668]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d815      	bhi.n	8003b3a <TIM14_callback+0xf2>
 8003b0e:	4ba5      	ldr	r3, [pc, #660]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2201      	movs	r2, #1
 8003b16:	4013      	ands	r3, r2
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b1e:	4b9f      	ldr	r3, [pc, #636]	@ (8003d9c <TIM14_callback+0x354>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	2140      	movs	r1, #64	@ 0x40
 8003b24:	0018      	movs	r0, r3
 8003b26:	f002 fa75 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003b2a:	4b9e      	ldr	r3, [pc, #632]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b9b      	ldr	r3, [pc, #620]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e15a      	b.n	8003df0 <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 8003b3a:	4b9a      	ldr	r3, [pc, #616]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d815      	bhi.n	8003b70 <TIM14_callback+0x128>
 8003b44:	4b97      	ldr	r3, [pc, #604]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10d      	bne.n	8003b70 <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003b54:	4b91      	ldr	r3, [pc, #580]	@ (8003d9c <TIM14_callback+0x354>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	2140      	movs	r1, #64	@ 0x40
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f002 fa5a 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003b60:	4b90      	ldr	r3, [pc, #576]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4b8e      	ldr	r3, [pc, #568]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	e13f      	b.n	8003df0 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 8003b70:	4b8c      	ldr	r3, [pc, #560]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b06      	cmp	r3, #6
 8003b78:	d900      	bls.n	8003b7c <TIM14_callback+0x134>
 8003b7a:	e139      	b.n	8003df0 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003b7c:	4b87      	ldr	r3, [pc, #540]	@ (8003d9c <TIM14_callback+0x354>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2140      	movs	r1, #64	@ 0x40
 8003b82:	0018      	movs	r0, r3
 8003b84:	f002 fa46 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003b88:	4b86      	ldr	r3, [pc, #536]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b84      	ldr	r3, [pc, #528]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b94:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8003b96:	4b83      	ldr	r3, [pc, #524]	@ (8003da4 <TIM14_callback+0x35c>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b07      	cmp	r3, #7
 8003b9e:	d000      	beq.n	8003ba2 <TIM14_callback+0x15a>
 8003ba0:	e126      	b.n	8003df0 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8003ba2:	4b80      	ldr	r3, [pc, #512]	@ (8003da4 <TIM14_callback+0x35c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
}
 8003ba8:	e122      	b.n	8003df0 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 8003baa:	4b7b      	ldr	r3, [pc, #492]	@ (8003d98 <TIM14_callback+0x350>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d156      	bne.n	8003c62 <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003bb4:	4b7a      	ldr	r3, [pc, #488]	@ (8003da0 <TIM14_callback+0x358>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8003bbc:	4b79      	ldr	r3, [pc, #484]	@ (8003da4 <TIM14_callback+0x35c>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d815      	bhi.n	8003bf2 <TIM14_callback+0x1aa>
 8003bc6:	4b77      	ldr	r3, [pc, #476]	@ (8003da4 <TIM14_callback+0x35c>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2201      	movs	r2, #1
 8003bce:	4013      	ands	r3, r2
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10d      	bne.n	8003bf2 <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bd6:	4b71      	ldr	r3, [pc, #452]	@ (8003d9c <TIM14_callback+0x354>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2140      	movs	r1, #64	@ 0x40
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f002 fa19 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003be2:	4b70      	ldr	r3, [pc, #448]	@ (8003da4 <TIM14_callback+0x35c>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	3301      	adds	r3, #1
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	4b6d      	ldr	r3, [pc, #436]	@ (8003da4 <TIM14_callback+0x35c>)
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	e0fe      	b.n	8003df0 <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 8003bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8003da4 <TIM14_callback+0x35c>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d815      	bhi.n	8003c28 <TIM14_callback+0x1e0>
 8003bfc:	4b69      	ldr	r3, [pc, #420]	@ (8003da4 <TIM14_callback+0x35c>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2201      	movs	r2, #1
 8003c04:	4013      	ands	r3, r2
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10d      	bne.n	8003c28 <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003c0c:	4b63      	ldr	r3, [pc, #396]	@ (8003d9c <TIM14_callback+0x354>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2140      	movs	r1, #64	@ 0x40
 8003c12:	0018      	movs	r0, r3
 8003c14:	f002 f9fe 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003c18:	4b62      	ldr	r3, [pc, #392]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4b60      	ldr	r3, [pc, #384]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e0e3      	b.n	8003df0 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 8003c28:	4b5e      	ldr	r3, [pc, #376]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d900      	bls.n	8003c34 <TIM14_callback+0x1ec>
 8003c32:	e0dd      	b.n	8003df0 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003c34:	4b59      	ldr	r3, [pc, #356]	@ (8003d9c <TIM14_callback+0x354>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	2140      	movs	r1, #64	@ 0x40
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f002 f9ea 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003c40:	4b58      	ldr	r3, [pc, #352]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	3301      	adds	r3, #1
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	4b56      	ldr	r3, [pc, #344]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c4c:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8003c4e:	4b55      	ldr	r3, [pc, #340]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b09      	cmp	r3, #9
 8003c56:	d000      	beq.n	8003c5a <TIM14_callback+0x212>
 8003c58:	e0ca      	b.n	8003df0 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8003c5a:	4b52      	ldr	r3, [pc, #328]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
}
 8003c60:	e0c6      	b.n	8003df0 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 8003c62:	4b4d      	ldr	r3, [pc, #308]	@ (8003d98 <TIM14_callback+0x350>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b06      	cmp	r3, #6
 8003c6a:	d156      	bne.n	8003d1a <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003da0 <TIM14_callback+0x358>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8003c74:	4b4b      	ldr	r3, [pc, #300]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d815      	bhi.n	8003caa <TIM14_callback+0x262>
 8003c7e:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2201      	movs	r2, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c8e:	4b43      	ldr	r3, [pc, #268]	@ (8003d9c <TIM14_callback+0x354>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	2140      	movs	r1, #64	@ 0x40
 8003c94:	0018      	movs	r0, r3
 8003c96:	f002 f9bd 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003c9a:	4b42      	ldr	r3, [pc, #264]	@ (8003da4 <TIM14_callback+0x35c>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8003da4 <TIM14_callback+0x35c>)
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e0a2      	b.n	8003df0 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8003caa:	4b3e      	ldr	r3, [pc, #248]	@ (8003da4 <TIM14_callback+0x35c>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b06      	cmp	r3, #6
 8003cb2:	d815      	bhi.n	8003ce0 <TIM14_callback+0x298>
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <TIM14_callback+0x35c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2201      	movs	r2, #1
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10d      	bne.n	8003ce0 <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003cc4:	4b35      	ldr	r3, [pc, #212]	@ (8003d9c <TIM14_callback+0x354>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2140      	movs	r1, #64	@ 0x40
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f002 f9a2 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003cd0:	4b34      	ldr	r3, [pc, #208]	@ (8003da4 <TIM14_callback+0x35c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4b32      	ldr	r3, [pc, #200]	@ (8003da4 <TIM14_callback+0x35c>)
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e087      	b.n	8003df0 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8003ce0:	4b30      	ldr	r3, [pc, #192]	@ (8003da4 <TIM14_callback+0x35c>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b0a      	cmp	r3, #10
 8003ce8:	d900      	bls.n	8003cec <TIM14_callback+0x2a4>
 8003cea:	e081      	b.n	8003df0 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003cec:	4b2b      	ldr	r3, [pc, #172]	@ (8003d9c <TIM14_callback+0x354>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2140      	movs	r1, #64	@ 0x40
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f002 f98e 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <TIM14_callback+0x35c>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d04:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8003d06:	4b27      	ldr	r3, [pc, #156]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b0b      	cmp	r3, #11
 8003d0e:	d000      	beq.n	8003d12 <TIM14_callback+0x2ca>
 8003d10:	e06e      	b.n	8003df0 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8003d12:	4b24      	ldr	r3, [pc, #144]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
}
 8003d18:	e06a      	b.n	8003df0 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 8003d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d98 <TIM14_callback+0x350>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b07      	cmp	r3, #7
 8003d22:	d165      	bne.n	8003df0 <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003d24:	4b1e      	ldr	r3, [pc, #120]	@ (8003da0 <TIM14_callback+0x358>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d815      	bhi.n	8003d62 <TIM14_callback+0x31a>
 8003d36:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003d46:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <TIM14_callback+0x354>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2140      	movs	r1, #64	@ 0x40
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f002 f961 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003d52:	4b14      	ldr	r3, [pc, #80]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e046      	b.n	8003df0 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b06      	cmp	r3, #6
 8003d6a:	d81d      	bhi.n	8003da8 <TIM14_callback+0x360>
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2201      	movs	r2, #1
 8003d74:	4013      	ands	r3, r2
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d115      	bne.n	8003da8 <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003d7c:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <TIM14_callback+0x354>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2140      	movs	r1, #64	@ 0x40
 8003d82:	0018      	movs	r0, r3
 8003d84:	f002 f946 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003d88:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <TIM14_callback+0x35c>)
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e02b      	b.n	8003df0 <TIM14_callback+0x3a8>
 8003d98:	20000420 	.word	0x20000420
 8003d9c:	50000800 	.word	0x50000800
 8003da0:	20000ac4 	.word	0x20000ac4
 8003da4:	2000050c 	.word	0x2000050c
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8003da8:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <TIM14_callback+0x3b0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b0a      	cmp	r3, #10
 8003db0:	d81e      	bhi.n	8003df0 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003db2:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <TIM14_callback+0x3b4>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	2140      	movs	r1, #64	@ 0x40
 8003db8:	0018      	movs	r0, r3
 8003dba:	f002 f92b 	bl	8006014 <HAL_GPIO_WritePin>
			LED_counter++;
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003df8 <TIM14_callback+0x3b0>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <TIM14_callback+0x3b0>)
 8003dca:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003df8 <TIM14_callback+0x3b0>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b0b      	cmp	r3, #11
 8003dd4:	d10c      	bne.n	8003df0 <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 8003dd6:	210f      	movs	r1, #15
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <TIM14_callback+0x3b8>)
 8003ddc:	7852      	ldrb	r2, [r2, #1]
 8003dde:	701a      	strb	r2, [r3, #0]
				Set_LED_to_State(&LED_fsm, prev);
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <TIM14_callback+0x3b8>)
 8003de6:	0011      	movs	r1, r2
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7fc ff11 	bl	8000c10 <Set_LED_to_State>
}
 8003dee:	e7ff      	b.n	8003df0 <TIM14_callback+0x3a8>
 8003df0:	46c0      	nop			@ (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b004      	add	sp, #16
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	2000050c 	.word	0x2000050c
 8003dfc:	50000800 	.word	0x50000800
 8003e00:	20000420 	.word	0x20000420

08003e04 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8003e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e06:	466b      	mov	r3, sp
 8003e08:	000d      	movs	r5, r1
 8003e0a:	80d8      	strh	r0, [r3, #6]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	481a      	ldr	r0, [pc, #104]	@ (8003e78 <Input_Capture_Processing+0x74>)
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8003e10:	1d9c      	adds	r4, r3, #6
	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003e12:	f000 ffd6 	bl	8004dc2 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8003e16:	8820      	ldrh	r0, [r4, #0]
 8003e18:	b280      	uxth	r0, r0
 8003e1a:	f000 ff61 	bl	8004ce0 <isPrime>
 8003e1e:	2801      	cmp	r0, #1
 8003e20:	d103      	bne.n	8003e2a <Input_Capture_Processing+0x26>

		interrupt_period_value += 1;
 8003e22:	8823      	ldrh	r3, [r4, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	8023      	strh	r3, [r4, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8003e2a:	2680      	movs	r6, #128	@ 0x80
 8003e2c:	8827      	ldrh	r7, [r4, #0]
 8003e2e:	0076      	lsls	r6, r6, #1
 8003e30:	01bf      	lsls	r7, r7, #6

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N

		interrupt_period_value = 256 - i;
 8003e32:	8026      	strh	r6, [r4, #0]
		uint16_t remainder = N % interrupt_period_value;
 8003e34:	8821      	ldrh	r1, [r4, #0]
 8003e36:	0038      	movs	r0, r7
 8003e38:	b289      	uxth	r1, r1
 8003e3a:	f7fc f9ff 	bl	800023c <__aeabi_uidivmod>

		if(remainder == 0){ //check if no remainder -> integer
 8003e3e:	2900      	cmp	r1, #0
 8003e40:	d115      	bne.n	8003e6e <Input_Capture_Processing+0x6a>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8003e42:	8821      	ldrh	r1, [r4, #0]
 8003e44:	0038      	movs	r0, r7
 8003e46:	b289      	uxth	r1, r1
 8003e48:	f7fc f972 	bl	8000130 <__udivsi3>
 8003e4c:	b280      	uxth	r0, r0
 8003e4e:	8368      	strh	r0, [r5, #26]
			break;
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8003e50:	2380      	movs	r3, #128	@ 0x80
 8003e52:	8822      	ldrh	r2, [r4, #0]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	826b      	strh	r3, [r5, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	0028      	movs	r0, r5
 8003e60:	f000 f8b4 	bl	8003fcc <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8003e64:	0028      	movs	r0, r5
 8003e66:	f000 fd34 	bl	80048d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
}
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003e6e:	3e01      	subs	r6, #1
 8003e70:	b2b6      	uxth	r6, r6
 8003e72:	2e7f      	cmp	r6, #127	@ 0x7f
 8003e74:	d1dd      	bne.n	8003e32 <Input_Capture_Processing+0x2e>
 8003e76:	e7eb      	b.n	8003e50 <Input_Capture_Processing+0x4c>
 8003e78:	20000d28 	.word	0x20000d28

08003e7c <Start_IC_TIM>:
	}

	return ok;
}

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8003e7c:	b570      	push	{r4, r5, r6, lr}

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8003e7e:	4e09      	ldr	r6, [pc, #36]	@ (8003ea4 <Start_IC_TIM+0x28>)
uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8003e80:	000d      	movs	r5, r1
	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8003e82:	0030      	movs	r0, r6
 8003e84:	f003 f87e 	bl	8006f84 <HAL_TIM_Base_Start_IT>
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8003e88:	0029      	movs	r1, r5
	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8003e8a:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8003e8c:	0030      	movs	r0, r6
 8003e8e:	f003 fe11 	bl	8007ab4 <HAL_TIM_IC_Start_IT>
 8003e92:	4004      	ands	r4, r0
 8003e94:	b2e4      	uxtb	r4, r4

	if(ok_AND != HAL_OK){
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	d001      	beq.n	8003e9e <Start_IC_TIM+0x22>

		Error_Handler();
 8003e9a:	f7fd fd65 	bl	8001968 <Error_Handler>
	}

	return ok_AND;
}
 8003e9e:	0020      	movs	r0, r4
 8003ea0:	bd70      	pop	{r4, r5, r6, pc}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	20000890 	.word	0x20000890

08003ea8 <Start_Input_Capture_Timer>:
uint8_t Start_Input_Capture_Timer(void){
 8003ea8:	b510      	push	{r4, lr}
	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4804      	ldr	r0, [pc, #16]	@ (8003ec0 <Start_Input_Capture_Timer+0x18>)
 8003eae:	f7ff ffe5 	bl	8003e7c <Start_IC_TIM>
 8003eb2:	1e04      	subs	r4, r0, #0
	if(ok != HAL_OK){
 8003eb4:	d001      	beq.n	8003eba <Start_Input_Capture_Timer+0x12>
		Error_Handler();
 8003eb6:	f7fd fd57 	bl	8001968 <Error_Handler>
}
 8003eba:	0020      	movs	r0, r4
 8003ebc:	bd10      	pop	{r4, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	20000890 	.word	0x20000890

08003ec4 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	b510      	push	{r4, lr}
 8003ec8:	0008      	movs	r0, r1

	*dst_ptr = *src_ptr;
 8003eca:	2224      	movs	r2, #36	@ 0x24
 8003ecc:	0019      	movs	r1, r3
 8003ece:	f004 fe2f 	bl	8008b30 <memcpy>

	return 1;
}
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	bd10      	pop	{r4, pc}
	...

08003ed8 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8003ed8:	b510      	push	{r4, lr}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003eda:	4c08      	ldr	r4, [pc, #32]	@ (8003efc <Start_Measurement_Reelapse_Timer+0x24>)
 8003edc:	2100      	movs	r1, #0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f000 fe19 	bl	8004b16 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	6822      	ldr	r2, [r4, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <Start_Measurement_Reelapse_Timer+0x28>)
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003eea:	6251      	str	r1, [r2, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8003eec:	881b      	ldrh	r3, [r3, #0]
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003eee:	0020      	movs	r0, r4
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	6353      	str	r3, [r2, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003ef4:	f000 fdf3 	bl	8004ade <Start_OC_TIM>

	return 1;
}
 8003ef8:	2001      	movs	r0, #1
 8003efa:	bd10      	pop	{r4, pc}
 8003efc:	200007d4 	.word	0x200007d4
 8003f00:	20000c7a 	.word	0x20000c7a

08003f04 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8003f04:	2200      	movs	r2, #0
 8003f06:	4b02      	ldr	r3, [pc, #8]	@ (8003f10 <Begin_Input_Capture_Measurement+0xc>)

	return 1;
}
 8003f08:	2001      	movs	r0, #1
	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003f0e:	4770      	bx	lr
 8003f10:	20000890 	.word	0x20000890

08003f14 <main>:

//INCLUDES
#include "main.h"

int __attribute__((optimize("O0")))main(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8003f18:	f7fd fd28 	bl	800196c <System_Init>

	//STARTUP
	Startup();
 8003f1c:	f000 f93e 	bl	800419c <Startup>

	while (1)
	{
		Check_Software_Timers();
 8003f20:	f000 fe16 	bl	8004b50 <Check_Software_Timers>
 8003f24:	e7fc      	b.n	8003f20 <main+0xc>

08003f26 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8003f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f28:	0016      	movs	r6, r2
 8003f2a:	0005      	movs	r5, r0
 8003f2c:	000f      	movs	r7, r1
	uint8_t ok_OR = 0;
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8003f2e:	f002 fffd 	bl	8006f2c <HAL_TIM_Base_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8003f32:	0039      	movs	r1, r7
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8003f34:	0004      	movs	r4, r0
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8003f36:	0028      	movs	r0, r5
 8003f38:	f003 fcd2 	bl	80078e0 <HAL_TIM_PWM_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8003f3c:	0031      	movs	r1, r6
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8003f3e:	4304      	orrs	r4, r0
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8003f40:	0028      	movs	r0, r5
 8003f42:	f003 fccd 	bl	80078e0 <HAL_TIM_PWM_Start>
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8003f46:	b2e4      	uxtb	r4, r4
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8003f48:	4304      	orrs	r4, r0
 8003f4a:	b2e4      	uxtb	r4, r4

	if(ok_OR != HAL_OK){
 8003f4c:	2c00      	cmp	r4, #0
 8003f4e:	d001      	beq.n	8003f54 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x2e>

		Error_Handler();
 8003f50:	f7fd fd0a 	bl	8001968 <Error_Handler>
	}

	return ok_OR;
}
 8003f54:	0020      	movs	r0, r4
 8003f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f58 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8003f58:	b510      	push	{r4, lr}
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4804      	ldr	r0, [pc, #16]	@ (8003f70 <Start_Freq_Gen_Timer+0x18>)
 8003f5e:	f000 fdbe 	bl	8004ade <Start_OC_TIM>
 8003f62:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 8003f64:	d001      	beq.n	8003f6a <Start_Freq_Gen_Timer+0x12>

		Error_Handler();
 8003f66:	f7fd fcff 	bl	8001968 <Error_Handler>
	}

	return ok;
}
 8003f6a:	0020      	movs	r0, r4
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	2000094c 	.word	0x2000094c

08003f74 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

	uint32_t speed_control = 0;
	uint8_t how_many_128 = 0;

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8003f74:	8902      	ldrh	r2, [r0, #8]
 8003f76:	4b08      	ldr	r3, [pc, #32]	@ (8003f98 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x24>)
 8003f78:	4353      	muls	r3, r2
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8003f7a:	0c5a      	lsrs	r2, r3, #17
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8003f7c:	b2d1      	uxtb	r1, r2
 8003f7e:	01c9      	lsls	r1, r1, #7
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8003f80:	0a9b      	lsrs	r3, r3, #10
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8003f82:	1a5b      	subs	r3, r3, r1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8243      	strh	r3, [r0, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8003f88:	2380      	movs	r3, #128	@ 0x80
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4113      	asrs	r3, r2
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	8343      	strh	r3, [r0, #26]

    return 1;
}
 8003f94:	2001      	movs	r0, #1
 8003f96:	4770      	bx	lr
 8003f98:	00000283 	.word	0x00000283

08003f9c <Set_Oscillator_Values>:
uint8_t Set_Oscillator_Values(struct Params* params_ptr){

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8003f9c:	4909      	ldr	r1, [pc, #36]	@ (8003fc4 <Set_Oscillator_Values+0x28>)
 8003f9e:	8b03      	ldrh	r3, [r0, #24]
 8003fa0:	680a      	ldr	r2, [r1, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fa6:	8b03      	ldrh	r3, [r0, #24]
 8003fa8:	60cb      	str	r3, [r1, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8003faa:	8bc3      	ldrh	r3, [r0, #30]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	6293      	str	r3, [r2, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8003fb0:	4a05      	ldr	r2, [pc, #20]	@ (8003fc8 <Set_Oscillator_Values+0x2c>)
 8003fb2:	8843      	ldrh	r3, [r0, #2]
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	6393      	str	r3, [r2, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8003fba:	8883      	ldrh	r3, [r0, #4]

	return 1;
}
 8003fbc:	2001      	movs	r0, #1
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003fc2:	4770      	bx	lr
 8003fc4:	2000094c 	.word	0x2000094c
 8003fc8:	20000718 	.word	0x20000718

08003fcc <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){

	if(mode == REGULAR_MODE){
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	d128      	bne.n	8004022 <Calculate_Next_Main_Oscillator_Values+0x56>

		params_ptr->index++;
 8003fd0:	89c3      	ldrh	r3, [r0, #14]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	81c3      	strh	r3, [r0, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	89c2      	ldrh	r2, [r0, #14]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d100      	bne.n	8003fe4 <Calculate_Next_Main_Oscillator_Values+0x18>
			params_ptr->index = 0;
 8003fe2:	81c1      	strh	r1, [r0, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8003fe4:	89c2      	ldrh	r2, [r0, #14]
 8003fe6:	b293      	uxth	r3, r2
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	d101      	bne.n	8003ff0 <Calculate_Next_Main_Oscillator_Values+0x24>
		}
	}
	else if(mode == STARTUP_MODE){

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
			params_ptr->quadrant = FIRST_QUADRANT;
 8003fec:	7443      	strb	r3, [r0, #17]
 8003fee:	e005      	b.n	8003ffc <Calculate_Next_Main_Oscillator_Values+0x30>
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8003ff0:	89c3      	ldrh	r3, [r0, #14]
 8003ff2:	2b80      	cmp	r3, #128	@ 0x80
 8003ff4:	d104      	bne.n	8004000 <Calculate_Next_Main_Oscillator_Values+0x34>
			params_ptr->quadrant = SECOND_QUADRANT;
 8003ff6:	3b7f      	subs	r3, #127	@ 0x7f
 8003ff8:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8003ffa:	2300      	movs	r3, #0
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8003ffc:	7403      	strb	r3, [r0, #16]
 8003ffe:	e022      	b.n	8004046 <Calculate_Next_Main_Oscillator_Values+0x7a>
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	89c2      	ldrh	r2, [r0, #14]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	429a      	cmp	r2, r3
 8004008:	d103      	bne.n	8004012 <Calculate_Next_Main_Oscillator_Values+0x46>
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 800400a:	2300      	movs	r3, #0
 800400c:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 800400e:	3301      	adds	r3, #1
 8004010:	e7f4      	b.n	8003ffc <Calculate_Next_Main_Oscillator_Values+0x30>
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004012:	23c0      	movs	r3, #192	@ 0xc0
 8004014:	89c2      	ldrh	r2, [r0, #14]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	429a      	cmp	r2, r3
 800401a:	d114      	bne.n	8004046 <Calculate_Next_Main_Oscillator_Values+0x7a>
			params_ptr->quadrant = SECOND_QUADRANT;
 800401c:	3b80      	subs	r3, #128	@ 0x80
 800401e:	3bff      	subs	r3, #255	@ 0xff
 8004020:	e7e4      	b.n	8003fec <Calculate_Next_Main_Oscillator_Values+0x20>
	else if(mode == IP_CAPTURE_MODE){
 8004022:	2901      	cmp	r1, #1
 8004024:	d119      	bne.n	800405a <Calculate_Next_Main_Oscillator_Values+0x8e>
		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004026:	7983      	ldrb	r3, [r0, #6]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d002      	beq.n	8004032 <Calculate_Next_Main_Oscillator_Values+0x66>
 800402c:	7983      	ldrb	r3, [r0, #6]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <Calculate_Next_Main_Oscillator_Values+0x6e>
			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8004032:	23a7      	movs	r3, #167	@ 0xa7
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	81c3      	strh	r3, [r0, #14]
 8004038:	e7e7      	b.n	800400a <Calculate_Next_Main_Oscillator_Values+0x3e>
			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 800403a:	2380      	movs	r3, #128	@ 0x80
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	81c3      	strh	r3, [r0, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8004040:	2300      	movs	r3, #0
 8004042:	7443      	strb	r3, [r0, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8004044:	7401      	strb	r1, [r0, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004046:	7983      	ldrb	r3, [r0, #6]
 8004048:	4a1d      	ldr	r2, [pc, #116]	@ (80040c0 <Calculate_Next_Main_Oscillator_Values+0xf4>)
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10c      	bne.n	8004068 <Calculate_Next_Main_Oscillator_Values+0x9c>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 800404e:	89c1      	ldrh	r1, [r0, #14]
 8004050:	4b1c      	ldr	r3, [pc, #112]	@ (80040c4 <Calculate_Next_Main_Oscillator_Values+0xf8>)
	}
	else if(params_ptr->waveshape == SINE_MODE){
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004052:	0049      	lsls	r1, r1, #1
 8004054:	5acb      	ldrh	r3, [r1, r3]
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004056:	8003      	strh	r3, [r0, #0]
 8004058:	e013      	b.n	8004082 <Calculate_Next_Main_Oscillator_Values+0xb6>
	else if(mode == STARTUP_MODE){
 800405a:	2902      	cmp	r1, #2
 800405c:	d1f3      	bne.n	8004046 <Calculate_Next_Main_Oscillator_Values+0x7a>
		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 800405e:	89c2      	ldrh	r2, [r0, #14]
 8004060:	b293      	uxth	r3, r2
 8004062:	2a00      	cmp	r2, #0
 8004064:	d1ef      	bne.n	8004046 <Calculate_Next_Main_Oscillator_Values+0x7a>
 8004066:	e7c1      	b.n	8003fec <Calculate_Next_Main_Oscillator_Values+0x20>
	else if(params_ptr->waveshape == SINE_MODE){
 8004068:	7983      	ldrb	r3, [r0, #6]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <Calculate_Next_Main_Oscillator_Values+0xa8>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 800406e:	89c1      	ldrh	r1, [r0, #14]
 8004070:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <Calculate_Next_Main_Oscillator_Values+0xfc>)
 8004072:	e7ee      	b.n	8004052 <Calculate_Next_Main_Oscillator_Values+0x86>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004074:	7983      	ldrb	r3, [r0, #6]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d10f      	bne.n	800409a <Calculate_Next_Main_Oscillator_Values+0xce>
 800407a:	89c3      	ldrh	r3, [r0, #14]
 800407c:	2bff      	cmp	r3, #255	@ 0xff
 800407e:	d80c      	bhi.n	800409a <Calculate_Next_Main_Oscillator_Values+0xce>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004080:	8002      	strh	r2, [r0, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004082:	7a83      	ldrb	r3, [r0, #10]
 8004084:	2b7f      	cmp	r3, #127	@ 0x7f
 8004086:	d110      	bne.n	80040aa <Calculate_Next_Main_Oscillator_Values+0xde>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004088:	8803      	ldrh	r3, [r0, #0]
		else if(params_ptr->depth != 0){

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	b29b      	uxth	r3, r3
 800408e:	8003      	strh	r3, [r0, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8004090:	8803      	ldrh	r3, [r0, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	8043      	strh	r3, [r0, #2]

	return 1;
}
 8004096:	2001      	movs	r0, #1
 8004098:	4770      	bx	lr
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 800409a:	7983      	ldrb	r3, [r0, #6]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d1f0      	bne.n	8004082 <Calculate_Next_Main_Oscillator_Values+0xb6>
 80040a0:	89c3      	ldrh	r3, [r0, #14]
 80040a2:	2bff      	cmp	r3, #255	@ 0xff
 80040a4:	d9ed      	bls.n	8004082 <Calculate_Next_Main_Oscillator_Values+0xb6>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e7d5      	b.n	8004056 <Calculate_Next_Main_Oscillator_Values+0x8a>
		else if(params_ptr->depth != 0){
 80040aa:	7a83      	ldrb	r3, [r0, #10]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <Calculate_Next_Main_Oscillator_Values+0xee>
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 80040b0:	8801      	ldrh	r1, [r0, #0]
 80040b2:	7a83      	ldrb	r3, [r0, #10]
 80040b4:	434b      	muls	r3, r1
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 80040b6:	09db      	lsrs	r3, r3, #7
 80040b8:	e7e7      	b.n	800408a <Calculate_Next_Main_Oscillator_Values+0xbe>
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 80040ba:	8002      	strh	r2, [r0, #0]
 80040bc:	e7e8      	b.n	8004090 <Calculate_Next_Main_Oscillator_Values+0xc4>
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	000003ff 	.word	0x000003ff
 80040c4:	08008b96 	.word	0x08008b96
 80040c8:	08008f96 	.word	0x08008f96

080040cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 80040cc:	b530      	push	{r4, r5, lr}

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 80040ce:	4b20      	ldr	r3, [pc, #128]	@ (8004150 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x84>)
 80040d0:	5aca      	ldrh	r2, [r1, r3]
 80040d2:	2a00      	cmp	r2, #0
 80040d4:	d011      	beq.n	80040fa <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 80040d6:	5aca      	ldrh	r2, [r1, r3]
 80040d8:	8804      	ldrh	r4, [r0, #0]
 80040da:	3a01      	subs	r2, #1
 80040dc:	b2a4      	uxth	r4, r4
 80040de:	0052      	lsls	r2, r2, #1
 80040e0:	5254      	strh	r4, [r2, r1]
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 80040e2:	2480      	movs	r4, #128	@ 0x80
 80040e4:	5acd      	ldrh	r5, [r1, r3]
 80040e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004154 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x88>)
 80040e8:	00a4      	lsls	r4, r4, #2
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	d10b      	bne.n	8004106 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3a>
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 80040ee:	52cc      	strh	r4, [r1, r3]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 80040f0:	5a8c      	ldrh	r4, [r1, r2]
 80040f2:	3c01      	subs	r4, #1
 80040f4:	b2a4      	uxth	r4, r4
 80040f6:	528c      	strh	r4, [r1, r2]
 80040f8:	e00d      	b.n	8004116 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x4a>
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 80040fa:	2480      	movs	r4, #128	@ 0x80
 80040fc:	8802      	ldrh	r2, [r0, #0]
 80040fe:	00e4      	lsls	r4, r4, #3
 8004100:	b292      	uxth	r2, r2
 8004102:	530a      	strh	r2, [r1, r4]
 8004104:	e7ed      	b.n	80040e2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x16>
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004106:	5a8d      	ldrh	r5, [r1, r2]
 8004108:	2d00      	cmp	r5, #0
 800410a:	d117      	bne.n	800413c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x70>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 800410c:	528c      	strh	r4, [r1, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 800410e:	5aca      	ldrh	r2, [r1, r3]
 8004110:	3a01      	subs	r2, #1
 8004112:	b292      	uxth	r2, r2
 8004114:	52ca      	strh	r2, [r1, r3]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004116:	5aca      	ldrh	r2, [r1, r3]
 8004118:	8c44      	ldrh	r4, [r0, #34]	@ 0x22
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 800411a:	5acb      	ldrh	r3, [r1, r3]
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 800411c:	1912      	adds	r2, r2, r4
 800411e:	2480      	movs	r4, #128	@ 0x80
 8004120:	00a4      	lsls	r4, r4, #2
 8004122:	42a2      	cmp	r2, r4
 8004124:	dd0e      	ble.n	8004144 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x78>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8004126:	8c42      	ldrh	r2, [r0, #34]	@ 0x22
 8004128:	189b      	adds	r3, r3, r2
 800412a:	4a0b      	ldr	r2, [pc, #44]	@ (8004158 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x8c>)
 800412c:	189b      	adds	r3, r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	18cb      	adds	r3, r1, r3
 8004132:	881b      	ldrh	r3, [r3, #0]
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004134:	b29b      	uxth	r3, r3
 8004136:	8083      	strh	r3, [r0, #4]
		}

	return 1;
}
 8004138:	2001      	movs	r0, #1
 800413a:	bd30      	pop	{r4, r5, pc}
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 800413c:	5acc      	ldrh	r4, [r1, r3]
 800413e:	3c01      	subs	r4, #1
 8004140:	b2a4      	uxth	r4, r4
 8004142:	e7d4      	b.n	80040ee <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x22>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004144:	8c42      	ldrh	r2, [r0, #34]	@ 0x22
 8004146:	189b      	adds	r3, r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	18c9      	adds	r1, r1, r3
 800414c:	880b      	ldrh	r3, [r1, #0]
 800414e:	e7f1      	b.n	8004134 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x68>
 8004150:	00000402 	.word	0x00000402
 8004154:	00000404 	.word	0x00000404
 8004158:	7ffffe00 	.word	0x7ffffe00

0800415c <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 800415c:	880b      	ldrh	r3, [r1, #0]
 800415e:	095b      	lsrs	r3, r3, #5

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004160:	2b2a      	cmp	r3, #42	@ 0x2a
 8004162:	d813      	bhi.n	800418c <Process_ADC_Conversion_Values+0x30>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004164:	2300      	movs	r3, #0
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
		params_ptr->waveshape = SINE_MODE; //sine wave
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004166:	7183      	strb	r3, [r0, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004168:	884b      	ldrh	r3, [r1, #2]
 800416a:	095b      	lsrs	r3, r3, #5
	temp_speed <<= 3; //convert to 10-bit
 800416c:	00db      	lsls	r3, r3, #3
	params_ptr->speed = temp_speed;
 800416e:	8103      	strh	r3, [r0, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004170:	888b      	ldrh	r3, [r1, #4]
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	b2db      	uxtb	r3, r3
		params_ptr->depth = temp_depth;
 8004176:	7283      	strb	r3, [r0, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004178:	88cb      	ldrh	r3, [r1, #6]
 800417a:	095b      	lsrs	r3, r3, #5
		temp_symmetry <<= 1; //convert to 8-bit
 800417c:	005b      	lsls	r3, r3, #1
		params_ptr->symmetry = temp_symmetry;
 800417e:	8183      	strh	r3, [r0, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004180:	890b      	ldrh	r3, [r1, #8]
 8004182:	095b      	lsrs	r3, r3, #5
	temp_delay <<= 2; //convert to 9-bit
 8004184:	009b      	lsls	r3, r3, #2
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8004186:	8443      	strh	r3, [r0, #34]	@ 0x22

	return 1;
}
 8004188:	2001      	movs	r0, #1
 800418a:	4770      	bx	lr
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 800418c:	2b55      	cmp	r3, #85	@ 0x55
 800418e:	d801      	bhi.n	8004194 <Process_ADC_Conversion_Values+0x38>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004190:	2301      	movs	r3, #1
 8004192:	e7e8      	b.n	8004166 <Process_ADC_Conversion_Values+0xa>
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004194:	2b7f      	cmp	r3, #127	@ 0x7f
 8004196:	d8e7      	bhi.n	8004168 <Process_ADC_Conversion_Values+0xc>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004198:	2302      	movs	r3, #2
 800419a:	e7e4      	b.n	8004166 <Process_ADC_Conversion_Values+0xa>

0800419c <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b085      	sub	sp, #20
 80041a0:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80041a2:	2007      	movs	r0, #7
 80041a4:	f001 fbc6 	bl	8005934 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <Startup+0x188>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004324 <Startup+0x188>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2101      	movs	r1, #1
 80041b4:	430a      	orrs	r2, r1
 80041b6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 80041b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004328 <Startup+0x18c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	4b5a      	ldr	r3, [pc, #360]	@ (8004328 <Startup+0x18c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2101      	movs	r1, #1
 80041c4:	430a      	orrs	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	0099      	lsls	r1, r3, #2
 80041cc:	23a0      	movs	r3, #160	@ 0xa0
 80041ce:	05db      	lsls	r3, r3, #23
 80041d0:	2201      	movs	r2, #1
 80041d2:	0018      	movs	r0, r3
 80041d4:	f001 ff1e 	bl	8006014 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 80041d8:	2380      	movs	r3, #128	@ 0x80
 80041da:	0159      	lsls	r1, r3, #5
 80041dc:	23a0      	movs	r3, #160	@ 0xa0
 80041de:	05db      	lsls	r3, r3, #23
 80041e0:	2201      	movs	r2, #1
 80041e2:	0018      	movs	r0, r3
 80041e4:	f001 ff16 	bl	8006014 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 80041e8:	23a0      	movs	r3, #160	@ 0xa0
 80041ea:	05db      	lsls	r3, r3, #23
 80041ec:	2200      	movs	r2, #0
 80041ee:	2180      	movs	r1, #128	@ 0x80
 80041f0:	0018      	movs	r0, r3
 80041f2:	f001 ff0f 	bl	8006014 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 80041f6:	f7fc f949 	bl	800048c <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 80041fa:	f7fc fb7f 	bl	80008fc <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 80041fe:	4b4b      	ldr	r3, [pc, #300]	@ (800432c <Startup+0x190>)
 8004200:	4a4b      	ldr	r2, [pc, #300]	@ (8004330 <Startup+0x194>)
 8004202:	494c      	ldr	r1, [pc, #304]	@ (8004334 <Startup+0x198>)
 8004204:	4c4c      	ldr	r4, [pc, #304]	@ (8004338 <Startup+0x19c>)
 8004206:	2004      	movs	r0, #4
 8004208:	9000      	str	r0, [sp, #0]
 800420a:	0020      	movs	r0, r4
 800420c:	f7fc fafa 	bl	8000804 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004210:	4b4a      	ldr	r3, [pc, #296]	@ (800433c <Startup+0x1a0>)
 8004212:	4a4b      	ldr	r2, [pc, #300]	@ (8004340 <Startup+0x1a4>)
 8004214:	4947      	ldr	r1, [pc, #284]	@ (8004334 <Startup+0x198>)
 8004216:	484b      	ldr	r0, [pc, #300]	@ (8004344 <Startup+0x1a8>)
 8004218:	2404      	movs	r4, #4
 800421a:	9400      	str	r4, [sp, #0]
 800421c:	f7fc fb4d 	bl	80008ba <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	Set_Status_Bit(&statuses, Waiting_For_Processing);
 8004220:	2380      	movs	r3, #128	@ 0x80
 8004222:	01da      	lsls	r2, r3, #7
 8004224:	4b42      	ldr	r3, [pc, #264]	@ (8004330 <Startup+0x194>)
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f000 fdb8 	bl	8004d9e <Set_Status_Bit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 800422e:	4b46      	ldr	r3, [pc, #280]	@ (8004348 <Startup+0x1ac>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	001a      	movs	r2, r3
 8004234:	4945      	ldr	r1, [pc, #276]	@ (800434c <Startup+0x1b0>)
 8004236:	4b46      	ldr	r3, [pc, #280]	@ (8004350 <Startup+0x1b4>)
 8004238:	0018      	movs	r0, r3
 800423a:	f001 f9bd 	bl	80055b8 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	4b3b      	ldr	r3, [pc, #236]	@ (8004330 <Startup+0x194>)
 8004242:	2110      	movs	r1, #16
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fd96 	bl	8004d76 <Get_Status_Bit>
 800424a:	1e03      	subs	r3, r0, #0
 800424c:	d0f8      	beq.n	8004240 <Startup+0xa4>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 800424e:	1dbb      	adds	r3, r7, #6
 8004250:	2200      	movs	r2, #0
 8004252:	801a      	strh	r2, [r3, #0]
 8004254:	e02c      	b.n	80042b0 <Startup+0x114>

		if(params.waveshape == SQUARE_MODE){
 8004256:	4b3f      	ldr	r3, [pc, #252]	@ (8004354 <Startup+0x1b8>)
 8004258:	799b      	ldrb	r3, [r3, #6]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d111      	bne.n	8004284 <Startup+0xe8>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8004260:	4b3c      	ldr	r3, [pc, #240]	@ (8004354 <Startup+0x1b8>)
 8004262:	7a9b      	ldrb	r3, [r3, #10]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	001a      	movs	r2, r3
 8004268:	0013      	movs	r3, r2
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	11db      	asrs	r3, r3, #7
 8004270:	b29b      	uxth	r3, r3
 8004272:	1dba      	adds	r2, r7, #6
 8004274:	8812      	ldrh	r2, [r2, #0]
 8004276:	4938      	ldr	r1, [pc, #224]	@ (8004358 <Startup+0x1bc>)
 8004278:	1acb      	subs	r3, r1, r3
 800427a:	b299      	uxth	r1, r3
 800427c:	4b37      	ldr	r3, [pc, #220]	@ (800435c <Startup+0x1c0>)
 800427e:	0052      	lsls	r2, r2, #1
 8004280:	52d1      	strh	r1, [r2, r3]
 8004282:	e010      	b.n	80042a6 <Startup+0x10a>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8004284:	4b33      	ldr	r3, [pc, #204]	@ (8004354 <Startup+0x1b8>)
 8004286:	7a9b      	ldrb	r3, [r3, #10]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	001a      	movs	r2, r3
 800428c:	0013      	movs	r3, r2
 800428e:	029b      	lsls	r3, r3, #10
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	121b      	asrs	r3, r3, #8
 8004294:	b29b      	uxth	r3, r3
 8004296:	1dba      	adds	r2, r7, #6
 8004298:	8812      	ldrh	r2, [r2, #0]
 800429a:	492f      	ldr	r1, [pc, #188]	@ (8004358 <Startup+0x1bc>)
 800429c:	1acb      	subs	r3, r1, r3
 800429e:	b299      	uxth	r1, r3
 80042a0:	4b2e      	ldr	r3, [pc, #184]	@ (800435c <Startup+0x1c0>)
 80042a2:	0052      	lsls	r2, r2, #1
 80042a4:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80042a6:	1dbb      	adds	r3, r7, #6
 80042a8:	881a      	ldrh	r2, [r3, #0]
 80042aa:	1dbb      	adds	r3, r7, #6
 80042ac:	3201      	adds	r2, #1
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	1dbb      	adds	r3, r7, #6
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d9cc      	bls.n	8004256 <Startup+0xba>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 80042bc:	4b25      	ldr	r3, [pc, #148]	@ (8004354 <Startup+0x1b8>)
 80042be:	2102      	movs	r1, #2
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fe83 	bl	8003fcc <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80042c6:	4a25      	ldr	r2, [pc, #148]	@ (800435c <Startup+0x1c0>)
 80042c8:	4b22      	ldr	r3, [pc, #136]	@ (8004354 <Startup+0x1b8>)
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7ff fefd 	bl	80040cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <Startup+0x1b8>)
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff fe61 	bl	8003f9c <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80042da:	4b21      	ldr	r3, [pc, #132]	@ (8004360 <Startup+0x1c4>)
 80042dc:	220c      	movs	r2, #12
 80042de:	2104      	movs	r1, #4
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7ff fe20 	bl	8003f26 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 80042e6:	f7ff fe37 	bl	8003f58 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 80042ea:	f7fc fddd 	bl	8000ea8 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 80042ee:	f7ff fddb 	bl	8003ea8 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80042f2:	f000 fd38 	bl	8004d66 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80042f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <Startup+0x1c8>)
 80042f8:	22fa      	movs	r2, #250	@ 0xfa
 80042fa:	21fa      	movs	r1, #250	@ 0xfa
 80042fc:	0018      	movs	r0, r3
 80042fe:	f002 f875 	bl	80063ec <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 8004302:	4b19      	ldr	r3, [pc, #100]	@ (8004368 <Startup+0x1cc>)
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8004308:	4b18      	ldr	r3, [pc, #96]	@ (800436c <Startup+0x1d0>)
 800430a:	2100      	movs	r1, #0
 800430c:	0018      	movs	r0, r3
 800430e:	f000 fbe6 	bl	8004ade <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004312:	2007      	movs	r0, #7
 8004314:	f001 fb02 	bl	800591c <HAL_NVIC_EnableIRQ>

	return 1;
 8004318:	2301      	movs	r3, #1
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b003      	add	sp, #12
 8004320:	bd90      	pop	{r4, r7, pc}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	20000890 	.word	0x20000890
 8004328:	2000094c 	.word	0x2000094c
 800432c:	20000519 	.word	0x20000519
 8004330:	20000d28 	.word	0x20000d28
 8004334:	20000499 	.word	0x20000499
 8004338:	0800f820 	.word	0x0800f820
 800433c:	200004ec 	.word	0x200004ec
 8004340:	200004fc 	.word	0x200004fc
 8004344:	200004c4 	.word	0x200004c4
 8004348:	08008b94 	.word	0x08008b94
 800434c:	20000d10 	.word	0x20000d10
 8004350:	20000bdc 	.word	0x20000bdc
 8004354:	20000cec 	.word	0x20000cec
 8004358:	000003ff 	.word	0x000003ff
 800435c:	2000001a 	.word	0x2000001a
 8004360:	20000718 	.word	0x20000718
 8004364:	20000538 	.word	0x20000538
 8004368:	20000420 	.word	0x20000420
 800436c:	20000ac4 	.word	0x20000ac4

08004370 <Advance_Pending_States>:

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004370:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <Advance_Pending_States+0x28>)
 8004372:	781a      	ldrb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004374:	7819      	ldrb	r1, [r3, #0]
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004376:	b2d2      	uxtb	r2, r2
	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004378:	2905      	cmp	r1, #5
 800437a:	d102      	bne.n	8004382 <Advance_Pending_States+0x12>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 800437c:	3901      	subs	r1, #1
 800437e:	7019      	strb	r1, [r3, #0]
 8004380:	e002      	b.n	8004388 <Advance_Pending_States+0x18>
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004382:	7819      	ldrb	r1, [r3, #0]
 8004384:	2907      	cmp	r1, #7
 8004386:	d0f9      	beq.n	800437c <Advance_Pending_States+0xc>
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8004388:	2102      	movs	r1, #2
 800438a:	0010      	movs	r0, r2
 800438c:	4388      	bics	r0, r1
 800438e:	2804      	cmp	r0, #4
 8004390:	d000      	beq.n	8004394 <Advance_Pending_States+0x24>

		speed_fsm.prev_state = current_state;
 8004392:	705a      	strb	r2, [r3, #1]
	}

	return 1;
}
 8004394:	2001      	movs	r0, #1
 8004396:	4770      	bx	lr
 8004398:	2000042c 	.word	0x2000042c

0800439c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439c:	2101      	movs	r1, #1
 800439e:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <HAL_MspInit+0x2c>)
{
 80043a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a4:	430a      	orrs	r2, r1
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80043a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043aa:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ac:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ae:	9200      	str	r2, [sp, #0]
 80043b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043b4:	0549      	lsls	r1, r1, #21
 80043b6:	430a      	orrs	r2, r1
 80043b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043bc:	400b      	ands	r3, r1
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043c2:	b002      	add	sp, #8
 80043c4:	4770      	bx	lr
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043cc:	b530      	push	{r4, r5, lr}
 80043ce:	0005      	movs	r5, r0
 80043d0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d2:	2214      	movs	r2, #20
 80043d4:	2100      	movs	r1, #0
 80043d6:	a803      	add	r0, sp, #12
 80043d8:	f004 fb7d 	bl	8008ad6 <memset>
  if(hadc->Instance==ADC1)
 80043dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004458 <HAL_ADC_MspInit+0x8c>)
 80043de:	682a      	ldr	r2, [r5, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d136      	bne.n	8004452 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80043e4:	2180      	movs	r1, #128	@ 0x80
 80043e6:	4b1d      	ldr	r3, [pc, #116]	@ (800445c <HAL_ADC_MspInit+0x90>)
 80043e8:	0349      	lsls	r1, r1, #13
 80043ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ec:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80043ee:	430a      	orrs	r2, r1
 80043f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80043f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 80043f6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f8:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 80043fa:	9201      	str	r2, [sp, #4]
 80043fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004400:	430a      	orrs	r2, r1
 8004402:	635a      	str	r2, [r3, #52]	@ 0x34
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	400b      	ands	r3, r1
 8004408:	9302      	str	r3, [sp, #8]
 800440a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800440c:	2373      	movs	r3, #115	@ 0x73
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004410:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004412:	3b70      	subs	r3, #112	@ 0x70
 8004414:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004416:	f001 fd45 	bl	8005ea4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800441a:	4c11      	ldr	r4, [pc, #68]	@ (8004460 <HAL_ADC_MspInit+0x94>)
 800441c:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800441e:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8004420:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004422:	2305      	movs	r3, #5
 8004424:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004426:	2300      	movs	r3, #0
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004428:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800442a:	1892      	adds	r2, r2, r2
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800442c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800442e:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004430:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004432:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004434:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004436:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004438:	00d2      	lsls	r2, r2, #3
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800443a:	019b      	lsls	r3, r3, #6
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800443c:	0020      	movs	r0, r4
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800443e:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004440:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004442:	f001 fadb 	bl	80059fc <HAL_DMA_Init>
 8004446:	2800      	cmp	r0, #0
 8004448:	d001      	beq.n	800444e <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800444a:	f7fd fa8d 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800444e:	652c      	str	r4, [r5, #80]	@ 0x50
 8004450:	62a5      	str	r5, [r4, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004452:	b009      	add	sp, #36	@ 0x24
 8004454:	bd30      	pop	{r4, r5, pc}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	40012400 	.word	0x40012400
 800445c:	40021000 	.word	0x40021000
 8004460:	20000b80 	.word	0x20000b80
 8004464:	40020008 	.word	0x40020008

08004468 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004468:	b510      	push	{r4, lr}
 800446a:	0004      	movs	r4, r0
 800446c:	b094      	sub	sp, #80	@ 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446e:	2214      	movs	r2, #20
 8004470:	2100      	movs	r1, #0
 8004472:	a805      	add	r0, sp, #20
 8004474:	f004 fb2f 	bl	8008ad6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004478:	2228      	movs	r2, #40	@ 0x28
 800447a:	2100      	movs	r1, #0
 800447c:	a80a      	add	r0, sp, #40	@ 0x28
 800447e:	f004 fb2a 	bl	8008ad6 <memset>
  if(hlptim->Instance==LPTIM1)
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	4a2d      	ldr	r2, [pc, #180]	@ (800453c <HAL_LPTIM_MspInit+0xd4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d12a      	bne.n	80044e0 <HAL_LPTIM_MspInit+0x78>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800448a:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800448c:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004492:	f002 fb4d 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 8004496:	2800      	cmp	r0, #0
 8004498:	d001      	beq.n	800449e <HAL_LPTIM_MspInit+0x36>
    {
      Error_Handler();
 800449a:	f7fd fa65 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800449e:	2280      	movs	r2, #128	@ 0x80
 80044a0:	4b27      	ldr	r3, [pc, #156]	@ (8004540 <HAL_LPTIM_MspInit+0xd8>)
 80044a2:	0612      	lsls	r2, r2, #24
 80044a4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a6:	4827      	ldr	r0, [pc, #156]	@ (8004544 <HAL_LPTIM_MspInit+0xdc>)
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80044a8:	430a      	orrs	r2, r1
 80044aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ae:	0fd2      	lsrs	r2, r2, #31
 80044b0:	07d2      	lsls	r2, r2, #31
 80044b2:	9201      	str	r2, [sp, #4]
 80044b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b6:	2202      	movs	r2, #2
 80044b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80044ba:	4311      	orrs	r1, r2
 80044bc:	6359      	str	r1, [r3, #52]	@ 0x34
 80044be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c2:	4013      	ands	r3, r2
 80044c4:	9302      	str	r3, [sp, #8]
 80044c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044c8:	2301      	movs	r3, #1
 80044ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 80044d2:	3305      	adds	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 80044d6:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d8:	f001 fce4 	bl	8005ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80044dc:	b014      	add	sp, #80	@ 0x50
 80044de:	bd10      	pop	{r4, pc}
  else if(hlptim->Instance==LPTIM2)
 80044e0:	4a19      	ldr	r2, [pc, #100]	@ (8004548 <HAL_LPTIM_MspInit+0xe0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d1fa      	bne.n	80044dc <HAL_LPTIM_MspInit+0x74>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80044e6:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044e8:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044ee:	f002 fb1f 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d001      	beq.n	80044fa <HAL_LPTIM_MspInit+0x92>
      Error_Handler();
 80044f6:	f7fd fa37 	bl	8001968 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80044fa:	2180      	movs	r1, #128	@ 0x80
 80044fc:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <HAL_LPTIM_MspInit+0xd8>)
 80044fe:	05c9      	lsls	r1, r1, #23
 8004500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004502:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8004504:	430a      	orrs	r2, r1
 8004506:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004508:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800450c:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450e:	2101      	movs	r1, #1
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8004510:	9203      	str	r2, [sp, #12]
 8004512:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004516:	430a      	orrs	r2, r1
 8004518:	635a      	str	r2, [r3, #52]	@ 0x34
 800451a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451c:	400b      	ands	r3, r1
 800451e:	9304      	str	r3, [sp, #16]
 8004520:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004528:	3bfe      	subs	r3, #254	@ 0xfe
 800452a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8004532:	3305      	adds	r3, #5
 8004534:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004536:	a905      	add	r1, sp, #20
 8004538:	e7ce      	b.n	80044d8 <HAL_LPTIM_MspInit+0x70>
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	40007c00 	.word	0x40007c00
 8004540:	40021000 	.word	0x40021000
 8004544:	50000400 	.word	0x50000400
 8004548:	40009400 	.word	0x40009400

0800454c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800454c:	b510      	push	{r4, lr}
 800454e:	0004      	movs	r4, r0
 8004550:	b096      	sub	sp, #88	@ 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004552:	2214      	movs	r2, #20
 8004554:	2100      	movs	r1, #0
 8004556:	a807      	add	r0, sp, #28
 8004558:	f004 fabd 	bl	8008ad6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800455c:	2228      	movs	r2, #40	@ 0x28
 800455e:	2100      	movs	r1, #0
 8004560:	a80c      	add	r0, sp, #48	@ 0x30
 8004562:	f004 fab8 	bl	8008ad6 <memset>
  if(htim_base->Instance==TIM1)
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	4a48      	ldr	r2, [pc, #288]	@ (800468c <HAL_TIM_Base_MspInit+0x140>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d115      	bne.n	800459a <HAL_TIM_Base_MspInit+0x4e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800456e:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004570:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004572:	039b      	lsls	r3, r3, #14
 8004574:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004576:	f002 fadb 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 800457a:	2800      	cmp	r0, #0
 800457c:	d001      	beq.n	8004582 <HAL_TIM_Base_MspInit+0x36>
    {
      Error_Handler();
 800457e:	f7fd f9f3 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004582:	2180      	movs	r1, #128	@ 0x80
 8004584:	4b42      	ldr	r3, [pc, #264]	@ (8004690 <HAL_TIM_Base_MspInit+0x144>)
 8004586:	0109      	lsls	r1, r1, #4
 8004588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800458a:	430a      	orrs	r2, r1
 800458c:	641a      	str	r2, [r3, #64]	@ 0x40
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	400b      	ands	r3, r1
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	9b00      	ldr	r3, [sp, #0]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8004596:	b016      	add	sp, #88	@ 0x58
 8004598:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM2)
 800459a:	2280      	movs	r2, #128	@ 0x80
 800459c:	05d2      	lsls	r2, r2, #23
 800459e:	4293      	cmp	r3, r2
 80045a0:	d124      	bne.n	80045ec <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045a2:	2201      	movs	r2, #1
 80045a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004690 <HAL_TIM_Base_MspInit+0x144>)
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80045a6:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045a8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2402      	movs	r4, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045ac:	4311      	orrs	r1, r2
 80045ae:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80045b0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80045b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045b4:	4011      	ands	r1, r2
 80045b6:	9101      	str	r1, [sp, #4]
 80045b8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045bc:	4311      	orrs	r1, r2
 80045be:	6359      	str	r1, [r3, #52]	@ 0x34
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80045c2:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c4:	4013      	ands	r3, r2
 80045c6:	9302      	str	r3, [sp, #8]
 80045c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 80045d0:	9209      	str	r2, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80045d4:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80045d6:	f001 fc65 	bl	8005ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 80045da:	200f      	movs	r0, #15
 80045dc:	0022      	movs	r2, r4
 80045de:	0021      	movs	r1, r4
 80045e0:	f001 f972 	bl	80058c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045e4:	200f      	movs	r0, #15
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80045e6:	f001 f999 	bl	800591c <HAL_NVIC_EnableIRQ>
}
 80045ea:	e7d4      	b.n	8004596 <HAL_TIM_Base_MspInit+0x4a>
  else if(htim_base->Instance==TIM3)
 80045ec:	4a29      	ldr	r2, [pc, #164]	@ (8004694 <HAL_TIM_Base_MspInit+0x148>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10f      	bne.n	8004612 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045f2:	2102      	movs	r1, #2
 80045f4:	4b26      	ldr	r3, [pc, #152]	@ (8004690 <HAL_TIM_Base_MspInit+0x144>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80045f6:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045fa:	430a      	orrs	r2, r1
 80045fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80045fe:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004602:	400b      	ands	r3, r1
 8004604:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004606:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004608:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800460a:	f001 f95d 	bl	80058c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800460e:	2010      	movs	r0, #16
 8004610:	e7e9      	b.n	80045e6 <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM16)
 8004612:	4a21      	ldr	r2, [pc, #132]	@ (8004698 <HAL_TIM_Base_MspInit+0x14c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d110      	bne.n	800463a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004618:	2180      	movs	r1, #128	@ 0x80
 800461a:	4b1d      	ldr	r3, [pc, #116]	@ (8004690 <HAL_TIM_Base_MspInit+0x144>)
 800461c:	0289      	lsls	r1, r1, #10
 800461e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004620:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004622:	430a      	orrs	r2, r1
 8004624:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004626:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	400b      	ands	r3, r1
 800462c:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800462e:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004630:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004632:	f001 f949 	bl	80058c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004636:	2015      	movs	r0, #21
 8004638:	e7d5      	b.n	80045e6 <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM17)
 800463a:	4a18      	ldr	r2, [pc, #96]	@ (800469c <HAL_TIM_Base_MspInit+0x150>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d110      	bne.n	8004662 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004640:	2180      	movs	r1, #128	@ 0x80
 8004642:	4b13      	ldr	r3, [pc, #76]	@ (8004690 <HAL_TIM_Base_MspInit+0x144>)
 8004644:	02c9      	lsls	r1, r1, #11
 8004646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8004648:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 800464a:	430a      	orrs	r2, r1
 800464c:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 800464e:	2203      	movs	r2, #3
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	400b      	ands	r3, r1
 8004654:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8004656:	0011      	movs	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004658:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 800465a:	f001 f935 	bl	80058c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800465e:	2016      	movs	r0, #22
 8004660:	e7c1      	b.n	80045e6 <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM14)
 8004662:	4a0f      	ldr	r2, [pc, #60]	@ (80046a0 <HAL_TIM_Base_MspInit+0x154>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d196      	bne.n	8004596 <HAL_TIM_Base_MspInit+0x4a>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004668:	2180      	movs	r1, #128	@ 0x80
 800466a:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <HAL_TIM_Base_MspInit+0x144>)
 800466c:	0209      	lsls	r1, r1, #8
 800466e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004670:	2013      	movs	r0, #19
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004672:	430a      	orrs	r2, r1
 8004674:	641a      	str	r2, [r3, #64]	@ 0x40
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004676:	2203      	movs	r2, #3
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	400b      	ands	r3, r1
 800467c:	9306      	str	r3, [sp, #24]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 800467e:	0011      	movs	r1, r2
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004680:	9b06      	ldr	r3, [sp, #24]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004682:	f001 f921 	bl	80058c8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004686:	2013      	movs	r0, #19
 8004688:	e7ad      	b.n	80045e6 <HAL_TIM_Base_MspInit+0x9a>
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40021000 	.word	0x40021000
 8004694:	40000400 	.word	0x40000400
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800
 80046a0:	40002000 	.word	0x40002000

080046a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046a4:	b530      	push	{r4, r5, lr}
 80046a6:	0004      	movs	r4, r0
 80046a8:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046aa:	2214      	movs	r2, #20
 80046ac:	2100      	movs	r1, #0
 80046ae:	a803      	add	r0, sp, #12
 80046b0:	f004 fa11 	bl	8008ad6 <memset>
  if(htim->Instance==TIM1)
 80046b4:	4b15      	ldr	r3, [pc, #84]	@ (800470c <HAL_TIM_MspPostInit+0x68>)
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d125      	bne.n	8004708 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046bc:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046be:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c0:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <HAL_TIM_MspPostInit+0x6c>)
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80046c2:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80046c6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c8:	432a      	orrs	r2, r5
 80046ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80046cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80046ce:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d0:	402a      	ands	r2, r5
 80046d2:	9201      	str	r2, [sp, #4]
 80046d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046d8:	4322      	orrs	r2, r4
 80046da:	635a      	str	r2, [r3, #52]	@ 0x34
 80046dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e0:	4023      	ands	r3, r4
 80046e2:	9302      	str	r3, [sp, #8]
 80046e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 80046e6:	2380      	movs	r3, #128	@ 0x80
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80046ec:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80046ee:	f001 fbd9 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 80046f2:	2308      	movs	r3, #8
 80046f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80046f8:	4806      	ldr	r0, [pc, #24]	@ (8004714 <HAL_TIM_MspPostInit+0x70>)
 80046fa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004700:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004702:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004704:	f001 fbce 	bl	8005ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004708:	b009      	add	sp, #36	@ 0x24
 800470a:	bd30      	pop	{r4, r5, pc}
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40021000 	.word	0x40021000
 8004714:	50000400 	.word	0x50000400

08004718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004718:	b530      	push	{r4, r5, lr}
 800471a:	0005      	movs	r5, r0
 800471c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471e:	2214      	movs	r2, #20
 8004720:	2100      	movs	r1, #0
 8004722:	a803      	add	r0, sp, #12
 8004724:	f004 f9d7 	bl	8008ad6 <memset>
  if(huart->Instance==USART2)
 8004728:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <HAL_UART_MspInit+0xd0>)
 800472a:	682a      	ldr	r2, [r5, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d158      	bne.n	80047e2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004730:	2180      	movs	r1, #128	@ 0x80
 8004732:	4b2e      	ldr	r3, [pc, #184]	@ (80047ec <HAL_UART_MspInit+0xd4>)
 8004734:	0289      	lsls	r1, r1, #10
 8004736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004738:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 800473a:	430a      	orrs	r2, r1
 800473c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800473e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004740:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8004742:	400a      	ands	r2, r1
 8004744:	9201      	str	r2, [sp, #4]
 8004746:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004748:	2201      	movs	r2, #1
 800474a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800474c:	4311      	orrs	r1, r2
 800474e:	6359      	str	r1, [r3, #52]	@ 0x34
 8004750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004752:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004754:	4013      	ands	r3, r2
 8004756:	9302      	str	r3, [sp, #8]
 8004758:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800475a:	230c      	movs	r3, #12
 800475c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475e:	3b0a      	subs	r3, #10
 8004760:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004762:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004764:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004766:	f001 fb9d 	bl	8005ea4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800476a:	4c21      	ldr	r4, [pc, #132]	@ (80047f0 <HAL_UART_MspInit+0xd8>)
 800476c:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <HAL_UART_MspInit+0xdc>)
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800476e:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004770:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004772:	2334      	movs	r3, #52	@ 0x34
 8004774:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004776:	2300      	movs	r3, #0
 8004778:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800477a:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477c:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800477e:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004780:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004782:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004784:	0020      	movs	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004786:	015b      	lsls	r3, r3, #5
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004788:	6122      	str	r2, [r4, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800478a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800478c:	f001 f936 	bl	80059fc <HAL_DMA_Init>
 8004790:	2800      	cmp	r0, #0
 8004792:	d001      	beq.n	8004798 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8004794:	f7fd f8e8 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004798:	1d2b      	adds	r3, r5, #4
 800479a:	67dc      	str	r4, [r3, #124]	@ 0x7c
 800479c:	62a5      	str	r5, [r4, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800479e:	4b16      	ldr	r3, [pc, #88]	@ (80047f8 <HAL_UART_MspInit+0xe0>)
 80047a0:	4c16      	ldr	r4, [pc, #88]	@ (80047fc <HAL_UART_MspInit+0xe4>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047a2:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80047a4:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80047a6:	2335      	movs	r3, #53	@ 0x35
 80047a8:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047aa:	3b25      	subs	r3, #37	@ 0x25
 80047ac:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047b2:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047b4:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80047b6:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047b8:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80047ba:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047bc:	015b      	lsls	r3, r3, #5
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047be:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047c0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80047c2:	f001 f91b 	bl	80059fc <HAL_DMA_Init>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d001      	beq.n	80047ce <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80047ca:	f7fd f8cd 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80047ce:	2201      	movs	r2, #1
 80047d0:	201c      	movs	r0, #28
 80047d2:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80047d4:	67ec      	str	r4, [r5, #124]	@ 0x7c
 80047d6:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80047d8:	f001 f876 	bl	80058c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047dc:	201c      	movs	r0, #28
 80047de:	f001 f89d 	bl	800591c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80047e2:	b009      	add	sp, #36	@ 0x24
 80047e4:	bd30      	pop	{r4, r5, pc}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	40004400 	.word	0x40004400
 80047ec:	40021000 	.word	0x40021000
 80047f0:	200005f0 	.word	0x200005f0
 80047f4:	4002001c 	.word	0x4002001c
 80047f8:	40020030 	.word	0x40020030
 80047fc:	20000594 	.word	0x20000594

08004800 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004800:	e7fe      	b.n	8004800 <NMI_Handler>

08004802 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004802:	e7fe      	b.n	8004802 <HardFault_Handler>

08004804 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004804:	4770      	bx	lr

08004806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8004806:	4770      	bx	lr

08004808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004808:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800480a:	f000 fb53 	bl	8004eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800480e:	bd10      	pop	{r4, pc}

08004810 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004810:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8004812:	2080      	movs	r0, #128	@ 0x80
 8004814:	f001 fc04 	bl	8006020 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004818:	bd10      	pop	{r4, pc}
	...

0800481c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800481c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800481e:	4802      	ldr	r0, [pc, #8]	@ (8004828 <DMA1_Channel1_IRQHandler+0xc>)
 8004820:	f001 fa02 	bl	8005c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004824:	bd10      	pop	{r4, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	20000b80 	.word	0x20000b80

0800482c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800482c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800482e:	4803      	ldr	r0, [pc, #12]	@ (800483c <DMA1_Channel2_3_IRQHandler+0x10>)
 8004830:	f001 f9fa 	bl	8005c28 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004834:	4802      	ldr	r0, [pc, #8]	@ (8004840 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004836:	f001 f9f7 	bl	8005c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800483a:	bd10      	pop	{r4, pc}
 800483c:	200005f0 	.word	0x200005f0
 8004840:	20000594 	.word	0x20000594

08004844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004844:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004846:	4802      	ldr	r0, [pc, #8]	@ (8004850 <TIM2_IRQHandler+0xc>)
 8004848:	f002 fbcc 	bl	8006fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800484c:	bd10      	pop	{r4, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	20000890 	.word	0x20000890

08004854 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004854:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004856:	4802      	ldr	r0, [pc, #8]	@ (8004860 <TIM3_IRQHandler+0xc>)
 8004858:	f002 fbc4 	bl	8006fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800485c:	bd10      	pop	{r4, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	200007d4 	.word	0x200007d4

08004864 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004864:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004866:	4802      	ldr	r0, [pc, #8]	@ (8004870 <TIM16_IRQHandler+0xc>)
 8004868:	f002 fbbc 	bl	8006fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800486c:	bd10      	pop	{r4, pc}
 800486e:	46c0      	nop			@ (mov r8, r8)
 8004870:	2000094c 	.word	0x2000094c

08004874 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004874:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004876:	4802      	ldr	r0, [pc, #8]	@ (8004880 <USART2_IRQHandler+0xc>)
 8004878:	f003 fc84 	bl	8008184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800487c:	bd10      	pop	{r4, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	2000064c 	.word	0x2000064c

08004884 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8004884:	b510      	push	{r4, lr}
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004886:	4802      	ldr	r0, [pc, #8]	@ (8004890 <LPTIM1_IRQHandler+0xc>)
 8004888:	f001 fc88 	bl	800619c <HAL_LPTIM_IRQHandler>
}
 800488c:	bd10      	pop	{r4, pc}
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	20000538 	.word	0x20000538

08004894 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8004894:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004896:	4802      	ldr	r0, [pc, #8]	@ (80048a0 <TIM17_IRQHandler+0xc>)
 8004898:	f002 fba4 	bl	8006fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800489c:	bd10      	pop	{r4, pc}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	20000a08 	.word	0x20000a08

080048a4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80048a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80048a6:	4802      	ldr	r0, [pc, #8]	@ (80048b0 <TIM14_IRQHandler+0xc>)
 80048a8:	f002 fb9c 	bl	8006fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80048ac:	bd10      	pop	{r4, pc}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	20000ac4 	.word	0x20000ac4

080048b4 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	7fda      	ldrb	r2, [r3, #31]
 80048b8:	2a01      	cmp	r2, #1
 80048ba:	d105      	bne.n	80048c8 <Adjust_TIM16_Prescaler+0x14>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 80048bc:	8b43      	ldrh	r3, [r0, #26]
 80048be:	005b      	lsls	r3, r3, #1
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	8383      	strh	r3, [r0, #28]
    }
    return 1;
}
 80048c4:	2001      	movs	r0, #1
 80048c6:	4770      	bx	lr
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 80048c8:	7fdb      	ldrb	r3, [r3, #31]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1fa      	bne.n	80048c4 <Adjust_TIM16_Prescaler+0x10>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 80048ce:	8b43      	ldrh	r3, [r0, #26]
 80048d0:	e7f6      	b.n	80048c0 <Adjust_TIM16_Prescaler+0xc>

080048d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 80048d2:	b5f0      	push	{r4, r5, r6, r7, lr}

			uint8_t pot_rotation_corrected = 0;
			enum Symmetry_Status symmetry_status = CW;

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80048d4:	8983      	ldrh	r3, [r0, #12]
			else{ //adc is 128-255
				symmetry_status = CCW;
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 80048d6:	7982      	ldrb	r2, [r0, #6]
uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 80048d8:	0004      	movs	r4, r0
 80048da:	b085      	sub	sp, #20
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80048dc:	b29b      	uxth	r3, r3
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 80048de:	2a01      	cmp	r2, #1
 80048e0:	d002      	beq.n	80048e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x16>
 80048e2:	7982      	ldrb	r2, [r0, #6]
 80048e4:	2a00      	cmp	r2, #0
 80048e6:	d121      	bne.n	800492c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5a>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80048e8:	7c22      	ldrb	r2, [r4, #16]
 80048ea:	2a00      	cmp	r2, #0
 80048ec:	d102      	bne.n	80048f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22>
 80048ee:	7c62      	ldrb	r2, [r4, #17]
 80048f0:	2a00      	cmp	r2, #0
 80048f2:	d005      	beq.n	8004900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2e>
 80048f4:	7c22      	ldrb	r2, [r4, #16]
 80048f6:	2a01      	cmp	r2, #1
 80048f8:	d107      	bne.n	800490a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x38>
 80048fa:	7c62      	ldrb	r2, [r4, #17]
 80048fc:	2a01      	cmp	r2, #1
 80048fe:	d104      	bne.n	800490a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x38>

					if(symmetry_status == CW){
 8004900:	2600      	movs	r6, #0
 8004902:	2b7f      	cmp	r3, #127	@ 0x7f
 8004904:	d81b      	bhi.n	800493e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){

					if(symmetry_status == CW){

						symmetry_type_for_halfcycle = LENGTHEN;
 8004906:	2601      	movs	r6, #1
 8004908:	e01f      	b.n	800494a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78>
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 800490a:	7c22      	ldrb	r2, [r4, #16]
 800490c:	2a00      	cmp	r2, #0
 800490e:	d102      	bne.n	8004916 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x44>
 8004910:	7c62      	ldrb	r2, [r4, #17]
 8004912:	2a01      	cmp	r2, #1
 8004914:	d005      	beq.n	8004922 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x50>
 8004916:	7c22      	ldrb	r2, [r4, #16]
 8004918:	2a01      	cmp	r2, #1
 800491a:	d113      	bne.n	8004944 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x72>
 800491c:	7c62      	ldrb	r2, [r4, #17]
 800491e:	2a00      	cmp	r2, #0
 8004920:	d110      	bne.n	8004944 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x72>
						symmetry_type_for_halfcycle = LENGTHEN;
 8004922:	2601      	movs	r6, #1
						symmetry_type_for_halfcycle = SHORTEN;
					}
				}
				else{

					if(symmetry_status == CW){
 8004924:	2b7f      	cmp	r3, #127	@ 0x7f
 8004926:	d80a      	bhi.n	800493e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c>
 8004928:	2600      	movs	r6, #0
 800492a:	e00e      	b.n	800494a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78>
			else if(params_ptr->waveshape == SQUARE_MODE){
 800492c:	7982      	ldrb	r2, [r0, #6]
 800492e:	2a02      	cmp	r2, #2
 8004930:	d108      	bne.n	8004944 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x72>
				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8004932:	7c02      	ldrb	r2, [r0, #16]
 8004934:	b2d6      	uxtb	r6, r2
 8004936:	2a00      	cmp	r2, #0
 8004938:	d1f3      	bne.n	8004922 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x50>
					if(symmetry_status == CW){
 800493a:	2b7f      	cmp	r3, #127	@ 0x7f
 800493c:	d9e3      	bls.n	8004906 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x34>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	3b80      	subs	r3, #128	@ 0x80
 8004942:	e005      	b.n	8004950 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
			if(symmetry_status == CW){
 8004944:	2600      	movs	r6, #0
 8004946:	2b7f      	cmp	r3, #127	@ 0x7f
 8004948:	d8f9      	bhi.n	800493e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c>
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 800494a:	237f      	movs	r3, #127	@ 0x7f
 800494c:	89a2      	ldrh	r2, [r4, #12]
 800494e:	1a9b      	subs	r3, r3, r2
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8004950:	8a65      	ldrh	r5, [r4, #18]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8004952:	210c      	movs	r1, #12
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8004954:	b2aa      	uxth	r2, r5
 8004956:	9203      	str	r2, [sp, #12]
 8004958:	2280      	movs	r2, #128	@ 0x80
 800495a:	0052      	lsls	r2, r2, #1
 800495c:	1b55      	subs	r5, r2, r5
 800495e:	b2ad      	uxth	r5, r5
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8004960:	b2db      	uxtb	r3, r3
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8004962:	436b      	muls	r3, r5
 8004964:	434b      	muls	r3, r1
 8004966:	10db      	asrs	r3, r3, #3

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8004968:	b299      	uxth	r1, r3
 800496a:	0a09      	lsrs	r1, r1, #8
 800496c:	9101      	str	r1, [sp, #4]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 800496e:	1a69      	subs	r1, r5, r1
 8004970:	b289      	uxth	r1, r1
 8004972:	9100      	str	r1, [sp, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8004974:	9901      	ldr	r1, [sp, #4]
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	186d      	adds	r5, r5, r1
 800497a:	b2ad      	uxth	r5, r5


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 800497c:	9302      	str	r3, [sp, #8]
 800497e:	2dff      	cmp	r5, #255	@ 0xff
 8004980:	d813      	bhi.n	80049aa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8004982:	9b02      	ldr	r3, [sp, #8]
 8004984:	2108      	movs	r1, #8
 8004986:	0c1f      	lsrs	r7, r3, #16
 8004988:	0038      	movs	r0, r7
 800498a:	f000 f9d8 	bl	8004d3e <unsigned_bitwise_modulo>
 800498e:	2880      	cmp	r0, #128	@ 0x80
 8004990:	d029      	beq.n	80049e6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x114>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8004992:	2108      	movs	r1, #8
 8004994:	0038      	movs	r0, r7
 8004996:	f000 f9d2 	bl	8004d3e <unsigned_bitwise_modulo>
 800499a:	2800      	cmp	r0, #0
 800499c:	d138      	bne.n	8004a10 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x13e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800499e:	1c63      	adds	r3, r4, #1
 80049a0:	77d8      	strb	r0, [r3, #31]
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 80049a2:	2e00      	cmp	r6, #0
 80049a4:	d000      	beq.n	80049a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd6>
 80049a6:	e085      	b.n	8004ab4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1e2>
 80049a8:	e05a      	b.n	8004a60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x18e>
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 80049aa:	9b02      	ldr	r3, [sp, #8]
 80049ac:	0c1f      	lsrs	r7, r3, #16
 80049ae:	4295      	cmp	r5, r2
 80049b0:	d00c      	beq.n	80049cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xfa>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80049b2:	2108      	movs	r1, #8
 80049b4:	0038      	movs	r0, r7
 80049b6:	f000 f9c2 	bl	8004d3e <unsigned_bitwise_modulo>
 80049ba:	2880      	cmp	r0, #128	@ 0x80
 80049bc:	d13f      	bne.n	8004a3e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x16c>
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80049be:	9b00      	ldr	r3, [sp, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80049c0:	3501      	adds	r5, #1
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	9300      	str	r3, [sp, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80049c8:	b2ad      	uxth	r5, r5
 80049ca:	e03e      	b.n	8004a4a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x178>
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 80049cc:	2108      	movs	r1, #8
 80049ce:	0038      	movs	r0, r7
 80049d0:	f000 f9b5 	bl	8004d3e <unsigned_bitwise_modulo>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d0d4      	beq.n	8004982 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 80049d8:	2108      	movs	r1, #8
 80049da:	0038      	movs	r0, r7
 80049dc:	f000 f9af 	bl	8004d3e <unsigned_bitwise_modulo>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d1e6      	bne.n	80049b2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe0>
 80049e4:	e7dd      	b.n	80049a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd0>
					params_ptr->prescaler_adjust = DO_NOTHING;
 80049e6:	2200      	movs	r2, #0
 80049e8:	1c63      	adds	r3, r4, #1
					if(symmetry_type_for_halfcycle == SHORTEN){
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	d000      	beq.n	80049f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11e>
 80049ee:	e067      	b.n	8004ac0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ee>
					params_ptr->prescaler_adjust = DO_NOTHING;
 80049f0:	77de      	strb	r6, [r3, #31]
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80049f2:	89e0      	ldrh	r0, [r4, #14]
 80049f4:	2101      	movs	r1, #1
 80049f6:	b280      	uxth	r0, r0
 80049f8:	f000 f9a1 	bl	8004d3e <unsigned_bitwise_modulo>
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	9a01      	ldr	r2, [sp, #4]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	3bff      	subs	r3, #255	@ 0xff
 8004a04:	18d3      	adds	r3, r2, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d064      	beq.n	8004ad6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x204>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	e063      	b.n	8004ad8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x206>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8004a10:	2108      	movs	r1, #8
 8004a12:	0038      	movs	r0, r7
 8004a14:	f000 f993 	bl	8004d3e <unsigned_bitwise_modulo>
 8004a18:	287f      	cmp	r0, #127	@ 0x7f
 8004a1a:	d803      	bhi.n	8004a24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x152>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	1c63      	adds	r3, r4, #1
 8004a20:	77da      	strb	r2, [r3, #31]
 8004a22:	e7be      	b.n	80049a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd0>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8004a24:	2108      	movs	r1, #8
 8004a26:	0038      	movs	r0, r7
 8004a28:	f000 f989 	bl	8004d3e <unsigned_bitwise_modulo>
 8004a2c:	2880      	cmp	r0, #128	@ 0x80
 8004a2e:	d9b8      	bls.n	80049a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd0>
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8004a30:	9b00      	ldr	r3, [sp, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8004a32:	3501      	adds	r5, #1
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	9300      	str	r3, [sp, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8004a3a:	b2ad      	uxth	r5, r5
 8004a3c:	e7ee      	b.n	8004a1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x14a>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8004a3e:	2108      	movs	r1, #8
 8004a40:	0038      	movs	r0, r7
 8004a42:	f000 f97c 	bl	8004d3e <unsigned_bitwise_modulo>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d124      	bne.n	8004a94 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1c2>
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8004a4a:	0028      	movs	r0, r5
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	f000 f976 	bl	8004d3e <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004a52:	086d      	lsrs	r5, r5, #1
 8004a54:	1c63      	adds	r3, r4, #1
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d12f      	bne.n	8004aba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1e8>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	d128      	bne.n	8004ab0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1de>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004a5e:	77de      	strb	r6, [r3, #31]
	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8004a60:	2380      	movs	r3, #128	@ 0x80
 8004a62:	9a00      	ldr	r2, [sp, #0]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	1a9b      	subs	r3, r3, r2

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	82a3      	strh	r3, [r4, #20]
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8004a6c:	0020      	movs	r0, r4
 8004a6e:	f7ff ff21 	bl	80048b4 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8004a72:	2380      	movs	r3, #128	@ 0x80
    params_ptr->final_ARR = params_ptr->final_period - 1;
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;

    return 1;
}
 8004a74:	2001      	movs	r0, #1
    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8004a76:	8aa2      	ldrh	r2, [r4, #20]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	82e3      	strh	r3, [r4, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8004a80:	8ae3      	ldrh	r3, [r4, #22]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	8323      	strh	r3, [r4, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8004a88:	8ba3      	ldrh	r3, [r4, #28]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	83e3      	strh	r3, [r4, #30]
}
 8004a90:	b005      	add	sp, #20
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8004a94:	2108      	movs	r1, #8
 8004a96:	0038      	movs	r0, r7
 8004a98:	f000 f951 	bl	8004d3e <unsigned_bitwise_modulo>
 8004a9c:	287f      	cmp	r0, #127	@ 0x7f
 8004a9e:	d9d4      	bls.n	8004a4a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x178>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8004aa0:	2108      	movs	r1, #8
 8004aa2:	0038      	movs	r0, r7
 8004aa4:	f000 f94b 	bl	8004d3e <unsigned_bitwise_modulo>
 8004aa8:	2880      	cmp	r0, #128	@ 0x80
 8004aaa:	d800      	bhi.n	8004aae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1dc>
 8004aac:	e779      	b.n	80049a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd0>
 8004aae:	e786      	b.n	80049be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xec>
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	77da      	strb	r2, [r3, #31]
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	e00b      	b.n	8004ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x200>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004aba:	2e00      	cmp	r6, #0
 8004abc:	d0cf      	beq.n	8004a5e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x18c>
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004abe:	2201      	movs	r2, #1
 8004ac0:	77da      	strb	r2, [r3, #31]
	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8004ac2:	89e0      	ldrh	r0, [r4, #14]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	b280      	uxth	r0, r0
 8004ac8:	f000 f939 	bl	8004d3e <unsigned_bitwise_modulo>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8004acc:	23ff      	movs	r3, #255	@ 0xff
	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1e2>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8004ad2:	1b5b      	subs	r3, r3, r5
 8004ad4:	e7c8      	b.n	8004a68 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x196>
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8004ad6:	3301      	adds	r3, #1
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8004ad8:	33ff      	adds	r3, #255	@ 0xff
 8004ada:	e7c5      	b.n	8004a68 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x196>

08004adc <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004adc:	4770      	bx	lr

08004ade <Start_OC_TIM>:
//INCLUDES
#include "timers.h"
#include "main_vars.h"

//FUNCTION DEFINITIONS
uint8_t __attribute__((optimize("O0")))Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8004ade:	b5b0      	push	{r4, r5, r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8004ae8:	250f      	movs	r5, #15
 8004aea:	197c      	adds	r4, r7, r5
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f002 fef8 	bl	80078e8 <HAL_TIM_OC_Start_IT>
 8004af8:	0003      	movs	r3, r0
 8004afa:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8004afc:	197b      	adds	r3, r7, r5
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <Start_OC_TIM+0x2a>

		Error_Handler();
 8004b04:	f7fc ff30 	bl	8001968 <Error_Handler>
	}

	return ok;
 8004b08:	230f      	movs	r3, #15
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	781b      	ldrb	r3, [r3, #0]
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b004      	add	sp, #16
 8004b14:	bdb0      	pop	{r4, r5, r7, pc}

08004b16 <Stop_OC_TIM>:

uint8_t __attribute__((optimize("O0")))Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8004b16:	b5b0      	push	{r4, r5, r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8004b20:	250f      	movs	r5, #15
 8004b22:	197c      	adds	r4, r7, r5
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0011      	movs	r1, r2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f002 ff64 	bl	80079f8 <HAL_TIM_OC_Stop_IT>
 8004b30:	0003      	movs	r3, r0
 8004b32:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004b34:	197b      	adds	r3, r7, r5
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <Stop_OC_TIM+0x2a>

		Error_Handler();
 8004b3c:	f7fc ff14 	bl	8001968 <Error_Handler>
	}

	return ok;
 8004b40:	230f      	movs	r3, #15
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	781b      	ldrb	r3, [r3, #0]
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b004      	add	sp, #16
 8004b4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004b50 <Check_Software_Timers>:

uint8_t __attribute__((optimize("O0")))Check_Software_Timers(void){
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0

	if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004b54:	4b4d      	ldr	r3, [pc, #308]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004b56:	2104      	movs	r1, #4
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f000 f90c 	bl	8004d76 <Get_Status_Bit>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d107      	bne.n	8004b74 <Check_Software_Timers+0x24>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

				Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004b64:	4b4a      	ldr	r3, [pc, #296]	@ (8004c90 <Check_Software_Timers+0x140>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c94 <Check_Software_Timers+0x144>)
 8004b6c:	0011      	movs	r1, r2
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff f948 	bl	8003e04 <Input_Capture_Processing>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			}

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004b74:	4b45      	ldr	r3, [pc, #276]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004b76:	2140      	movs	r1, #64	@ 0x40
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 f8fc 	bl	8004d76 <Get_Status_Bit>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d12b      	bne.n	8004bdc <Check_Software_Timers+0x8c>

				if(idle_counter < IDLE_COUNT){
 8004b84:	4b44      	ldr	r3, [pc, #272]	@ (8004c98 <Check_Software_Timers+0x148>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	23fa      	movs	r3, #250	@ 0xfa
 8004b8a:	015b      	lsls	r3, r3, #5
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d218      	bcs.n	8004bc2 <Check_Software_Timers+0x72>

					if(IP_CAP_fsm.current_state != IDLE){
 8004b90:	4b42      	ldr	r3, [pc, #264]	@ (8004c9c <Check_Software_Timers+0x14c>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <Check_Software_Timers+0x66>

						Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004b9c:	2140      	movs	r1, #64	@ 0x40
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f000 f90f 	bl	8004dc2 <Clear_Status_Bit>
						Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004ba4:	4b39      	ldr	r3, [pc, #228]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 f90a 	bl	8004dc2 <Clear_Status_Bit>
						idle_counter = 0;
 8004bae:	4b3a      	ldr	r3, [pc, #232]	@ (8004c98 <Check_Software_Timers+0x148>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e012      	b.n	8004bdc <Check_Software_Timers+0x8c>
					}
					else{

						idle_counter++;
 8004bb6:	4b38      	ldr	r3, [pc, #224]	@ (8004c98 <Check_Software_Timers+0x148>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	4b36      	ldr	r3, [pc, #216]	@ (8004c98 <Check_Software_Timers+0x148>)
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e00c      	b.n	8004bdc <Check_Software_Timers+0x8c>
					}
				}
				else{

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004bc2:	4b32      	ldr	r3, [pc, #200]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004bc4:	2140      	movs	r1, #64	@ 0x40
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 f8fb 	bl	8004dc2 <Clear_Status_Bit>
					Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004bce:	2120      	movs	r1, #32
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f000 f8e4 	bl	8004d9e <Set_Status_Bit>
					idle_counter = 0;
 8004bd6:	4b30      	ldr	r3, [pc, #192]	@ (8004c98 <Check_Software_Timers+0x148>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
				}
			}
			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004bdc:	2380      	movs	r3, #128	@ 0x80
 8004bde:	005a      	lsls	r2, r3, #1
 8004be0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004be2:	0011      	movs	r1, r2
 8004be4:	0018      	movs	r0, r3
 8004be6:	f000 f8c6 	bl	8004d76 <Get_Status_Bit>
 8004bea:	0003      	movs	r3, r0
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d122      	bne.n	8004c36 <Check_Software_Timers+0xe6>

				if(midi_counter < MIDI_COUNT){
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca0 <Check_Software_Timers+0x150>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca4 <Check_Software_Timers+0x154>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d805      	bhi.n	8004c06 <Check_Software_Timers+0xb6>

					midi_counter++;
 8004bfa:	4b29      	ldr	r3, [pc, #164]	@ (8004ca0 <Check_Software_Timers+0x150>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	4b27      	ldr	r3, [pc, #156]	@ (8004ca0 <Check_Software_Timers+0x150>)
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	e017      	b.n	8004c36 <Check_Software_Timers+0xe6>
				}
				else{

					Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	005a      	lsls	r2, r3, #1
 8004c0a:	4b20      	ldr	r3, [pc, #128]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004c0c:	0011      	movs	r1, r2
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 f8d7 	bl	8004dc2 <Clear_Status_Bit>
					Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	009a      	lsls	r2, r3, #2
 8004c18:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004c1a:	0011      	movs	r1, r2
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f000 f8be 	bl	8004d9e <Set_Status_Bit>
					active_status_byte = 0;
 8004c22:	4b21      	ldr	r3, [pc, #132]	@ (8004ca8 <Check_Software_Timers+0x158>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
					Clear_Data_Buffer(&MIDI_data);
 8004c28:	4b20      	ldr	r3, [pc, #128]	@ (8004cac <Check_Software_Timers+0x15c>)
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f7fc f899 	bl	8000d62 <Clear_Data_Buffer>
					midi_counter = 0;
 8004c30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <Check_Software_Timers+0x150>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
				}
			}
			if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 8004c36:	2380      	movs	r3, #128	@ 0x80
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	4b14      	ldr	r3, [pc, #80]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004c3c:	0011      	movs	r1, r2
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 f899 	bl	8004d76 <Get_Status_Bit>
 8004c44:	0003      	movs	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d11b      	bne.n	8004c82 <Check_Software_Timers+0x132>

				if(preset_save_idle_counter < PRESET_SAVE_IDLE_COUNT){
 8004c4a:	4b19      	ldr	r3, [pc, #100]	@ (8004cb0 <Check_Software_Timers+0x160>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a19      	ldr	r2, [pc, #100]	@ (8004cb4 <Check_Software_Timers+0x164>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d805      	bhi.n	8004c60 <Check_Software_Timers+0x110>

					preset_save_idle_counter++;
 8004c54:	4b16      	ldr	r3, [pc, #88]	@ (8004cb0 <Check_Software_Timers+0x160>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <Check_Software_Timers+0x160>)
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e010      	b.n	8004c82 <Check_Software_Timers+0x132>
				}
				else{

					Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8004c60:	2380      	movs	r3, #128	@ 0x80
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004c66:	0011      	movs	r1, r2
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 f8aa 	bl	8004dc2 <Clear_Status_Bit>
					Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 8004c6e:	2380      	movs	r3, #128	@ 0x80
 8004c70:	019a      	lsls	r2, r3, #6
 8004c72:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <Check_Software_Timers+0x13c>)
 8004c74:	0011      	movs	r1, r2
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 f891 	bl	8004d9e <Set_Status_Bit>
					preset_save_idle_counter = 0;
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb0 <Check_Software_Timers+0x160>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
				}
			}

			return 1;
 8004c82:	2301      	movs	r3, #1
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	20000d28 	.word	0x20000d28
 8004c90:	20000c7a 	.word	0x20000c7a
 8004c94:	20000ca4 	.word	0x20000ca4
 8004c98:	20000d24 	.word	0x20000d24
 8004c9c:	20000422 	.word	0x20000422
 8004ca0:	20000d20 	.word	0x20000d20
 8004ca4:	00030d3f 	.word	0x00030d3f
 8004ca8:	20000518 	.word	0x20000518
 8004cac:	2000050d 	.word	0x2000050d
 8004cb0:	20000d1c 	.word	0x20000d1c
 8004cb4:	0038751f 	.word	0x0038751f

08004cb8 <Start_DMA_Timer>:

uint8_t Start_DMA_Timer(void){
 8004cb8:	b510      	push	{r4, lr}

	Stop_OC_TIM(&htim17, TIM_CHANNEL_1);
 8004cba:	4c07      	ldr	r4, [pc, #28]	@ (8004cd8 <Start_DMA_Timer+0x20>)
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	0020      	movs	r0, r4
 8004cc0:	f7ff ff29 	bl	8004b16 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim17, 0);
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	6823      	ldr	r3, [r4, #0]
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, TIM17_PERIOD_COUNT);
 8004cc8:	4a04      	ldr	r2, [pc, #16]	@ (8004cdc <Start_DMA_Timer+0x24>)
	__HAL_TIM_SET_COUNTER(&htim17, 0);
 8004cca:	6259      	str	r1, [r3, #36]	@ 0x24
	Start_OC_TIM(&htim17, TIM_CHANNEL_1);
 8004ccc:	0020      	movs	r0, r4
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, TIM17_PERIOD_COUNT);
 8004cce:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim17, TIM_CHANNEL_1);
 8004cd0:	f7ff ff05 	bl	8004ade <Start_OC_TIM>

	return 1;
}
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	bd10      	pop	{r4, pc}
 8004cd8:	20000a08 	.word	0x20000a08
 8004cdc:	00002710 	.word	0x00002710

08004ce0 <isPrime>:
#include "utility.h"

enum Validate __attribute__((optimize("O0")))isPrime(uint16_t x){
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	1dbb      	adds	r3, r7, #6
 8004cea:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 8004cec:	230e      	movs	r3, #14
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e014      	b.n	8004d20 <isPrime+0x40>
        if (x % d == 0)
 8004cf6:	1dba      	adds	r2, r7, #6
 8004cf8:	230e      	movs	r3, #14
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	8812      	ldrh	r2, [r2, #0]
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	0019      	movs	r1, r3
 8004d02:	0010      	movs	r0, r2
 8004d04:	f7fb fa9a 	bl	800023c <__aeabi_uidivmod>
 8004d08:	000b      	movs	r3, r1
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <isPrime+0x34>
            return NO;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e010      	b.n	8004d36 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8004d14:	210e      	movs	r1, #14
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	187b      	adds	r3, r7, r1
 8004d1c:	3201      	adds	r2, #1
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	220e      	movs	r2, #14
 8004d22:	18bb      	adds	r3, r7, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	18ba      	adds	r2, r7, r2
 8004d28:	8812      	ldrh	r2, [r2, #0]
 8004d2a:	435a      	muls	r2, r3
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	dde0      	ble.n	8004cf6 <isPrime+0x16>
    }
    return YES;
 8004d34:	2301      	movs	r3, #1
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b004      	add	sp, #16
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <unsigned_bitwise_modulo>:

uint32_t __attribute__((optimize("O0")))unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	000a      	movs	r2, r1
 8004d48:	1cfb      	adds	r3, r7, #3
 8004d4a:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 8004d4c:	1cfb      	adds	r3, r7, #3
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	0013      	movs	r3, r2
 8004d56:	3b01      	subs	r3, #1
 8004d58:	001a      	movs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4013      	ands	r3, r2
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b002      	add	sp, #8
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <Global_Interrupt_Enable>:

uint8_t __attribute__((optimize("O0")))Global_Interrupt_Enable(void){
 8004d66:	b580      	push	{r7, lr}
 8004d68:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8004d6a:	b662      	cpsie	i
}
 8004d6c:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8004d6e:	2301      	movs	r3, #1
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate __attribute__((optimize("O0")))Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	000a      	movs	r2, r1
 8004d80:	1cbb      	adds	r3, r7, #2
 8004d82:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	1cba      	adds	r2, r7, #2
 8004d8a:	8812      	ldrh	r2, [r2, #0]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d001      	beq.n	8004d94 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8004d94:	2300      	movs	r3, #0
    }
}
 8004d96:	0018      	movs	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <Set_Status_Bit>:

void __attribute__((optimize("O0")))Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	000a      	movs	r2, r1
 8004da8:	1cbb      	adds	r3, r7, #2
 8004daa:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	1cbb      	adds	r3, r7, #2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b002      	add	sp, #8
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <Clear_Status_Bit>:

void __attribute__((optimize("O0")))Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	000a      	movs	r2, r1
 8004dcc:	1cbb      	adds	r3, r7, #2
 8004dce:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	1cba      	adds	r2, r7, #2
 8004dd6:	8812      	ldrh	r2, [r2, #0]
 8004dd8:	43d2      	mvns	r2, r2
 8004dda:	401a      	ands	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	46c0      	nop			@ (mov r8, r8)
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b002      	add	sp, #8
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004de8:	480d      	ldr	r0, [pc, #52]	@ (8004e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004dea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004dec:	f7ff fe76 	bl	8004adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8004df0:	480c      	ldr	r0, [pc, #48]	@ (8004e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8004df2:	490d      	ldr	r1, [pc, #52]	@ (8004e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004df4:	4a0d      	ldr	r2, [pc, #52]	@ (8004e2c <LoopForever+0xe>)
  movs r3, #0
 8004df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004df8:	e002      	b.n	8004e00 <LoopCopyDataInit>

08004dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dfe:	3304      	adds	r3, #4

08004e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e04:	d3f9      	bcc.n	8004dfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e06:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e08:	4c0a      	ldr	r4, [pc, #40]	@ (8004e34 <LoopForever+0x16>)
  movs r3, #0
 8004e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e0c:	e001      	b.n	8004e12 <LoopFillZerobss>

08004e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e10:	3204      	adds	r2, #4

08004e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e14:	d3fb      	bcc.n	8004e0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004e16:	f003 fe67 	bl	8008ae8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004e1a:	f7ff f87b 	bl	8003f14 <main>

08004e1e <LoopForever>:

LoopForever:
  b LoopForever
 8004e1e:	e7fe      	b.n	8004e1e <LoopForever>
  ldr   r0, =_estack
 8004e20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e28:	20000474 	.word	0x20000474
  ldr r2, =_sidata
 8004e2c:	08009420 	.word	0x08009420
  ldr r2, =_sbss
 8004e30:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 8004e34:	20000d4c 	.word	0x20000d4c

08004e38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e38:	e7fe      	b.n	8004e38 <ADC1_IRQHandler>
	...

08004e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e3c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004e3e:	4b10      	ldr	r3, [pc, #64]	@ (8004e80 <HAL_InitTick+0x44>)
{
 8004e40:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8004e42:	7819      	ldrb	r1, [r3, #0]
 8004e44:	2900      	cmp	r1, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e48:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004e4c:	20fa      	movs	r0, #250	@ 0xfa
 8004e4e:	0080      	lsls	r0, r0, #2
 8004e50:	f7fb f96e 	bl	8000130 <__udivsi3>
 8004e54:	4c0b      	ldr	r4, [pc, #44]	@ (8004e84 <HAL_InitTick+0x48>)
 8004e56:	0001      	movs	r1, r0
 8004e58:	6820      	ldr	r0, [r4, #0]
 8004e5a:	f7fb f969 	bl	8000130 <__udivsi3>
 8004e5e:	f000 fd79 	bl	8005954 <HAL_SYSTICK_Config>
 8004e62:	1e04      	subs	r4, r0, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e66:	2d03      	cmp	r5, #3
 8004e68:	d8ee      	bhi.n	8004e48 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	0029      	movs	r1, r5
 8004e70:	4240      	negs	r0, r0
 8004e72:	f000 fd29 	bl	80058c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e76:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <HAL_InitTick+0x4c>)
 8004e78:	0020      	movs	r0, r4
 8004e7a:	601d      	str	r5, [r3, #0]
  return status;
 8004e7c:	e7e5      	b.n	8004e4a <HAL_InitTick+0xe>
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	20000434 	.word	0x20000434
 8004e84:	20000430 	.word	0x20000430
 8004e88:	20000438 	.word	0x20000438

08004e8c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	4a08      	ldr	r2, [pc, #32]	@ (8004eb0 <HAL_Init+0x24>)
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	6811      	ldr	r1, [r2, #0]
{
 8004e94:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e96:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e98:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e9a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e9c:	f7ff ffce 	bl	8004e3c <HAL_InitTick>
 8004ea0:	1e04      	subs	r4, r0, #0
 8004ea2:	d103      	bne.n	8004eac <HAL_Init+0x20>
  HAL_MspInit();
 8004ea4:	f7ff fa7a 	bl	800439c <HAL_MspInit>
}
 8004ea8:	0020      	movs	r0, r4
 8004eaa:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004eac:	2401      	movs	r4, #1
 8004eae:	e7fb      	b.n	8004ea8 <HAL_Init+0x1c>
 8004eb0:	40022000 	.word	0x40022000

08004eb4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004eb4:	4a03      	ldr	r2, [pc, #12]	@ (8004ec4 <HAL_IncTick+0x10>)
 8004eb6:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <HAL_IncTick+0x14>)
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	185b      	adds	r3, r3, r1
 8004ebe:	6013      	str	r3, [r2, #0]
}
 8004ec0:	4770      	bx	lr
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	20000d2c 	.word	0x20000d2c
 8004ec8:	20000434 	.word	0x20000434

08004ecc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ecc:	4b01      	ldr	r3, [pc, #4]	@ (8004ed4 <HAL_GetTick+0x8>)
 8004ece:	6818      	ldr	r0, [r3, #0]
}
 8004ed0:	4770      	bx	lr
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	20000d2c 	.word	0x20000d2c

08004ed8 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ed8:	6880      	ldr	r0, [r0, #8]
 8004eda:	0740      	lsls	r0, r0, #29
 8004edc:	0fc0      	lsrs	r0, r0, #31
}
 8004ede:	4770      	bx	lr

08004ee0 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ee0:	2350      	movs	r3, #80	@ 0x50
{
 8004ee2:	b570      	push	{r4, r5, r6, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ee6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004ee8:	421a      	tst	r2, r3
 8004eea:	d12d      	bne.n	8004f48 <ADC_DMAConvCplt+0x68>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004eec:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004eee:	33b1      	adds	r3, #177	@ 0xb1
 8004ef0:	33ff      	adds	r3, #255	@ 0xff
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004ef6:	23c0      	movs	r3, #192	@ 0xc0

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ef8:	6825      	ldr	r5, [r4, #0]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	68ea      	ldr	r2, [r5, #12]
 8004efe:	421a      	tst	r2, r3
 8004f00:	d115      	bne.n	8004f2e <ADC_DMAConvCplt+0x4e>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f02:	7ea3      	ldrb	r3, [r4, #26]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d112      	bne.n	8004f2e <ADC_DMAConvCplt+0x4e>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	071b      	lsls	r3, r3, #28
 8004f0c:	d50f      	bpl.n	8004f2e <ADC_DMAConvCplt+0x4e>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f0e:	0028      	movs	r0, r5
 8004f10:	f7ff ffe2 	bl	8004ed8 <LL_ADC_REG_IsConversionOngoing>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d10e      	bne.n	8004f36 <ADC_DMAConvCplt+0x56>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f18:	220c      	movs	r2, #12
 8004f1a:	686b      	ldr	r3, [r5, #4]
 8004f1c:	4393      	bics	r3, r2
 8004f1e:	606b      	str	r3, [r5, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004f20:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004f22:	4b0d      	ldr	r3, [pc, #52]	@ (8004f58 <ADC_DMAConvCplt+0x78>)
 8004f24:	401a      	ands	r2, r3
 8004f26:	3304      	adds	r3, #4
 8004f28:	33ff      	adds	r3, #255	@ 0xff
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	65a3      	str	r3, [r4, #88]	@ 0x58
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  {
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
    {
      /* Call HAL ADC Error Callback function */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8004f30:	0020      	movs	r0, r4
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    else
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f32:	4798      	blx	r3
    }
  }
}
 8004f34:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f36:	2320      	movs	r3, #32
 8004f38:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f3e:	2301      	movs	r3, #1
 8004f40:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004f42:	4313      	orrs	r3, r2
 8004f44:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8004f46:	e7f2      	b.n	8004f2e <ADC_DMAConvCplt+0x4e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f4a:	06db      	lsls	r3, r3, #27
 8004f4c:	d501      	bpl.n	8004f52 <ADC_DMAConvCplt+0x72>
      hadc->ErrorCallback(hadc);
 8004f4e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004f50:	e7ee      	b.n	8004f30 <ADC_DMAConvCplt+0x50>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f52:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f56:	e7ec      	b.n	8004f32 <ADC_DMAConvCplt+0x52>
 8004f58:	fffffefe 	.word	0xfffffefe

08004f5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f5e:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004f60:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8004f62:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f64:	bd10      	pop	{r4, pc}

08004f66 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f66:	2340      	movs	r3, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f68:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8004f6a:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f6c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f72:	2304      	movs	r3, #4
 8004f74:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004f76:	4313      	orrs	r3, r2
 8004f78:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004f7a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8004f7c:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f7e:	bd10      	pop	{r4, pc}

08004f80 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8004f80:	4770      	bx	lr

08004f82 <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8004f82:	4770      	bx	lr

08004f84 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8004f84:	4770      	bx	lr

08004f86 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8004f86:	4770      	bx	lr

08004f88 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8004f88:	2300      	movs	r3, #0
{
 8004f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8004f90:	9303      	str	r3, [sp, #12]
  if (hadc == NULL)
 8004f92:	4298      	cmp	r0, r3
 8004f94:	d100      	bne.n	8004f98 <HAL_ADC_Init+0x10>
 8004f96:	e106      	b.n	80051a6 <HAL_ADC_Init+0x21e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f98:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11b      	bne.n	8004fd6 <HAL_ADC_Init+0x4e>
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8004f9e:	4b85      	ldr	r3, [pc, #532]	@ (80051b4 <HAL_ADC_Init+0x22c>)
 8004fa0:	6643      	str	r3, [r0, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8004fa2:	4b85      	ldr	r3, [pc, #532]	@ (80051b8 <HAL_ADC_Init+0x230>)
 8004fa4:	6683      	str	r3, [r0, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8004fa6:	4b85      	ldr	r3, [pc, #532]	@ (80051bc <HAL_ADC_Init+0x234>)
 8004fa8:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8004faa:	4b85      	ldr	r3, [pc, #532]	@ (80051c0 <HAL_ADC_Init+0x238>)
 8004fac:	6703      	str	r3, [r0, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8004fae:	4b85      	ldr	r3, [pc, #532]	@ (80051c4 <HAL_ADC_Init+0x23c>)
 8004fb0:	6743      	str	r3, [r0, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8004fb2:	4b85      	ldr	r3, [pc, #532]	@ (80051c8 <HAL_ADC_Init+0x240>)
 8004fb4:	6783      	str	r3, [r0, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8004fb6:	4b85      	ldr	r3, [pc, #532]	@ (80051cc <HAL_ADC_Init+0x244>)
 8004fb8:	67c3      	str	r3, [r0, #124]	@ 0x7c
    if (hadc->MspInitCallback == NULL)
 8004fba:	1d03      	adds	r3, r0, #4
 8004fbc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADC_Init+0x3e>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8004fc2:	4a83      	ldr	r2, [pc, #524]	@ (80051d0 <HAL_ADC_Init+0x248>)
 8004fc4:	67da      	str	r2, [r3, #124]	@ 0x7c
    hadc->MspInitCallback(hadc);
 8004fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fc8:	0020      	movs	r0, r4
 8004fca:	4798      	blx	r3
    hadc->Lock = HAL_UNLOCKED;
 8004fcc:	0022      	movs	r2, r4
    ADC_CLEAR_ERRORCODE(hadc);
 8004fce:	2300      	movs	r3, #0
    hadc->Lock = HAL_UNLOCKED;
 8004fd0:	3254      	adds	r2, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8004fd2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8004fd4:	7013      	strb	r3, [r2, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004fd6:	2380      	movs	r3, #128	@ 0x80
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	055b      	lsls	r3, r3, #21
 8004fdc:	68aa      	ldr	r2, [r5, #8]
 8004fde:	421a      	tst	r2, r3
 8004fe0:	d100      	bne.n	8004fe4 <HAL_ADC_Init+0x5c>
 8004fe2:	e0a7      	b.n	8005134 <HAL_ADC_Init+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	68ab      	ldr	r3, [r5, #8]
 8004fe8:	9201      	str	r2, [sp, #4]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	d408      	bmi.n	8005000 <HAL_ADC_Init+0x78>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ff0:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8004ff4:	9601      	str	r6, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004ffc:	4333      	orrs	r3, r6
 8004ffe:	65e3      	str	r3, [r4, #92]	@ 0x5c
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005000:	0028      	movs	r0, r5
 8005002:	f7ff ff69 	bl	8004ed8 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005006:	2210      	movs	r2, #16
 8005008:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800500a:	4013      	ands	r3, r2
 800500c:	4303      	orrs	r3, r0
 800500e:	d000      	beq.n	8005012 <HAL_ADC_Init+0x8a>
 8005010:	e0cc      	b.n	80051ac <HAL_ADC_Init+0x224>
    ADC_STATE_CLR_SET(hadc->State,
 8005012:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005014:	4b6f      	ldr	r3, [pc, #444]	@ (80051d4 <HAL_ADC_Init+0x24c>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005016:	6920      	ldr	r0, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8005018:	401a      	ands	r2, r3
 800501a:	3306      	adds	r3, #6
 800501c:	33ff      	adds	r3, #255	@ 0xff
 800501e:	4313      	orrs	r3, r2
 8005020:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005022:	68ab      	ldr	r3, [r5, #8]
 8005024:	07db      	lsls	r3, r3, #31
 8005026:	d461      	bmi.n	80050ec <HAL_ADC_Init+0x164>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005028:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800502a:	68e1      	ldr	r1, [r4, #12]
 800502c:	1e7b      	subs	r3, r7, #1
 800502e:	419f      	sbcs	r7, r3
 8005030:	68a3      	ldr	r3, [r4, #8]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005032:	7ea2      	ldrb	r2, [r4, #26]
 8005034:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005036:	7e21      	ldrb	r1, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005038:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800503a:	0389      	lsls	r1, r1, #14
 800503c:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800503e:	7e61      	ldrb	r1, [r4, #25]
 8005040:	03c9      	lsls	r1, r1, #15
 8005042:	430b      	orrs	r3, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005044:	0351      	lsls	r1, r2, #13
 8005046:	430b      	orrs	r3, r1
 8005048:	469c      	mov	ip, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800504a:	2800      	cmp	r0, #0
 800504c:	db00      	blt.n	8005050 <HAL_ADC_Init+0xc8>
 800504e:	e086      	b.n	800515e <HAL_ADC_Init+0x1d6>
 8005050:	0041      	lsls	r1, r0, #1
 8005052:	0849      	lsrs	r1, r1, #1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005054:	0023      	movs	r3, r4
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005056:	4666      	mov	r6, ip
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005058:	332c      	adds	r3, #44	@ 0x2c
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800505e:	4333      	orrs	r3, r6
 8005060:	433b      	orrs	r3, r7
 8005062:	430b      	orrs	r3, r1
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005064:	1c61      	adds	r1, r4, #1
 8005066:	7fc9      	ldrb	r1, [r1, #31]
 8005068:	2901      	cmp	r1, #1
 800506a:	d105      	bne.n	8005078 <HAL_ADC_Init+0xf0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800506c:	2a00      	cmp	r2, #0
 800506e:	d000      	beq.n	8005072 <HAL_ADC_Init+0xea>
 8005070:	e078      	b.n	8005164 <HAL_ADC_Init+0x1dc>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005072:	2280      	movs	r2, #128	@ 0x80
 8005074:	0252      	lsls	r2, r2, #9
 8005076:	4313      	orrs	r3, r2
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005078:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800507a:	2a00      	cmp	r2, #0
 800507c:	d005      	beq.n	800508a <HAL_ADC_Init+0x102>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800507e:	21e0      	movs	r1, #224	@ 0xe0
 8005080:	0049      	lsls	r1, r1, #1
 8005082:	400a      	ands	r2, r1
 8005084:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005086:	430a      	orrs	r2, r1
 8005088:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->CFGR1,
 800508a:	68ea      	ldr	r2, [r5, #12]
 800508c:	4952      	ldr	r1, [pc, #328]	@ (80051d8 <HAL_ADC_Init+0x250>)
 800508e:	400a      	ands	r2, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	60eb      	str	r3, [r5, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8005094:	0023      	movs	r3, r4
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005096:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8005098:	333c      	adds	r3, #60	@ 0x3c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800509a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 800509c:	781b      	ldrb	r3, [r3, #0]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800509e:	0f97      	lsrs	r7, r2, #30
 80050a0:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 80050a2:	469c      	mov	ip, r3
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80050a4:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d108      	bne.n	80050bc <HAL_ADC_Init+0x134>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80050aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050ac:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 80050ae:	4333      	orrs	r3, r6
 80050b0:	430b      	orrs	r3, r1
 80050b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80050b4:	430b      	orrs	r3, r1
 80050b6:	4661      	mov	r1, ip
 80050b8:	433b      	orrs	r3, r7
 80050ba:	4319      	orrs	r1, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 80050bc:	692b      	ldr	r3, [r5, #16]
 80050be:	4f47      	ldr	r7, [pc, #284]	@ (80051dc <HAL_ADC_Init+0x254>)
 80050c0:	403b      	ands	r3, r7
 80050c2:	430b      	orrs	r3, r1
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80050c4:	2180      	movs	r1, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80050c6:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80050c8:	0053      	lsls	r3, r2, #1
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	05c9      	lsls	r1, r1, #23
 80050ce:	428b      	cmp	r3, r1
 80050d0:	d00c      	beq.n	80050ec <HAL_ADC_Init+0x164>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80050d2:	2380      	movs	r3, #128	@ 0x80
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d008      	beq.n	80050ec <HAL_ADC_Init+0x164>
        MODIFY_REG(ADC1_COMMON->CCR,
 80050da:	4941      	ldr	r1, [pc, #260]	@ (80051e0 <HAL_ADC_Init+0x258>)
 80050dc:	4f41      	ldr	r7, [pc, #260]	@ (80051e4 <HAL_ADC_Init+0x25c>)
 80050de:	680b      	ldr	r3, [r1, #0]
 80050e0:	403b      	ands	r3, r7
 80050e2:	27f0      	movs	r7, #240	@ 0xf0
 80050e4:	03bf      	lsls	r7, r7, #14
 80050e6:	403a      	ands	r2, r7
 80050e8:	4313      	orrs	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 80050ec:	2107      	movs	r1, #7
 80050ee:	2770      	movs	r7, #112	@ 0x70
 80050f0:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80050f2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80050f4:	438b      	bics	r3, r1
 80050f6:	4313      	orrs	r3, r2
 80050f8:	616b      	str	r3, [r5, #20]
 80050fa:	6969      	ldr	r1, [r5, #20]
 80050fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80050fe:	43b9      	bics	r1, r7
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	430b      	orrs	r3, r1
 8005104:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005106:	2800      	cmp	r0, #0
 8005108:	d134      	bne.n	8005174 <HAL_ADC_Init+0x1ec>
      SET_BIT(hadc->Instance->CHSELR,
 800510a:	2310      	movs	r3, #16
 800510c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800510e:	425b      	negs	r3, r3
      MODIFY_REG(hadc->Instance->CHSELR,
 8005110:	430b      	orrs	r3, r1
 8005112:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005114:	2107      	movs	r1, #7
 8005116:	696b      	ldr	r3, [r5, #20]
 8005118:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800511a:	429a      	cmp	r2, r3
 800511c:	d139      	bne.n	8005192 <HAL_ADC_Init+0x20a>
      ADC_CLEAR_ERRORCODE(hadc);
 800511e:	2300      	movs	r3, #0
 8005120:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8005122:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005124:	3303      	adds	r3, #3
 8005126:	439a      	bics	r2, r3
 8005128:	3b02      	subs	r3, #2
 800512a:	4313      	orrs	r3, r2
 800512c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800512e:	9801      	ldr	r0, [sp, #4]
 8005130:	b005      	add	sp, #20
 8005132:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8005134:	68aa      	ldr	r2, [r5, #8]
 8005136:	492c      	ldr	r1, [pc, #176]	@ (80051e8 <HAL_ADC_Init+0x260>)
 8005138:	400a      	ands	r2, r1
 800513a:	4313      	orrs	r3, r2
 800513c:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800513e:	4b2b      	ldr	r3, [pc, #172]	@ (80051ec <HAL_ADC_Init+0x264>)
 8005140:	492b      	ldr	r1, [pc, #172]	@ (80051f0 <HAL_ADC_Init+0x268>)
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	f7fa fff4 	bl	8000130 <__udivsi3>
 8005148:	3001      	adds	r0, #1
 800514a:	0040      	lsls	r0, r0, #1
 800514c:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d100      	bne.n	8005156 <HAL_ADC_Init+0x1ce>
 8005154:	e746      	b.n	8004fe4 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8005156:	9b03      	ldr	r3, [sp, #12]
 8005158:	3b01      	subs	r3, #1
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	e7f7      	b.n	800514e <HAL_ADC_Init+0x1c6>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800515e:	2180      	movs	r1, #128	@ 0x80
 8005160:	0389      	lsls	r1, r1, #14
 8005162:	e777      	b.n	8005054 <HAL_ADC_Init+0xcc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005164:	2220      	movs	r2, #32
 8005166:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8005168:	433a      	orrs	r2, r7
 800516a:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800516c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800516e:	4311      	orrs	r1, r2
 8005170:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8005172:	e781      	b.n	8005078 <HAL_ADC_Init+0xf0>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	039b      	lsls	r3, r3, #14
 8005178:	4298      	cmp	r0, r3
 800517a:	d1cb      	bne.n	8005114 <HAL_ADC_Init+0x18c>
      MODIFY_REG(hadc->Instance->CHSELR,
 800517c:	211c      	movs	r1, #28
 800517e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8005180:	69e3      	ldr	r3, [r4, #28]
 8005182:	3b01      	subs	r3, #1
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	400b      	ands	r3, r1
 8005188:	392c      	subs	r1, #44	@ 0x2c
 800518a:	4099      	lsls	r1, r3
 800518c:	000b      	movs	r3, r1
 800518e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8005190:	e7be      	b.n	8005110 <HAL_ADC_Init+0x188>
      ADC_STATE_CLR_SET(hadc->State,
 8005192:	2312      	movs	r3, #18
 8005194:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005196:	439a      	bics	r2, r3
 8005198:	3b02      	subs	r3, #2
 800519a:	4313      	orrs	r3, r2
 800519c:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800519e:	2301      	movs	r3, #1
 80051a0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80051a2:	4313      	orrs	r3, r2
 80051a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	e7c0      	b.n	800512e <HAL_ADC_Init+0x1a6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051ae:	431a      	orrs	r2, r3
 80051b0:	65a2      	str	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80051b2:	e7f8      	b.n	80051a6 <HAL_ADC_Init+0x21e>
 80051b4:	08004f83 	.word	0x08004f83
 80051b8:	08004f85 	.word	0x08004f85
 80051bc:	08004f87 	.word	0x08004f87
 80051c0:	08004f81 	.word	0x08004f81
 80051c4:	080058c1 	.word	0x080058c1
 80051c8:	080058c3 	.word	0x080058c3
 80051cc:	080058c5 	.word	0x080058c5
 80051d0:	080043cd 	.word	0x080043cd
 80051d4:	fffffefd 	.word	0xfffffefd
 80051d8:	ffde0201 	.word	0xffde0201
 80051dc:	1ffffc02 	.word	0x1ffffc02
 80051e0:	40012708 	.word	0x40012708
 80051e4:	ffc3ffff 	.word	0xffc3ffff
 80051e8:	6fffffe8 	.word	0x6fffffe8
 80051ec:	20000430 	.word	0x20000430
 80051f0:	00030d40 	.word	0x00030d40

080051f4 <HAL_ADC_RegisterCallback>:
{
 80051f4:	0003      	movs	r3, r0
 80051f6:	b500      	push	{lr}
 80051f8:	0008      	movs	r0, r1
  if (pCallback == NULL)
 80051fa:	2a00      	cmp	r2, #0
 80051fc:	d105      	bne.n	800520a <HAL_ADC_RegisterCallback+0x16>
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80051fe:	2210      	movs	r2, #16
 8005200:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005202:	2001      	movs	r0, #1
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8005204:	430a      	orrs	r2, r1
 8005206:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8005208:	e00e      	b.n	8005228 <HAL_ADC_RegisterCallback+0x34>
  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 800520a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800520c:	07c9      	lsls	r1, r1, #31
 800520e:	d519      	bpl.n	8005244 <HAL_ADC_RegisterCallback+0x50>
    switch (CallbackID)
 8005210:	280a      	cmp	r0, #10
 8005212:	d8f4      	bhi.n	80051fe <HAL_ADC_RegisterCallback+0xa>
 8005214:	f7fa ff78 	bl	8000108 <__gnu_thumb1_case_sqi>
 8005218:	0d0b0906 	.word	0x0d0b0906
 800521c:	110ff3f3 	.word	0x110ff3f3
 8005220:	1314      	.short	0x1314
 8005222:	1d          	.byte	0x1d
 8005223:	00          	.byte	0x00
        hadc->ConvCpltCallback = pCallback;
 8005224:	665a      	str	r2, [r3, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2000      	movs	r0, #0
}
 8005228:	bd00      	pop	{pc}
        hadc->ConvHalfCpltCallback = pCallback;
 800522a:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800522c:	e7fb      	b.n	8005226 <HAL_ADC_RegisterCallback+0x32>
        hadc->LevelOutOfWindowCallback = pCallback;
 800522e:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8005230:	e7f9      	b.n	8005226 <HAL_ADC_RegisterCallback+0x32>
        hadc->ErrorCallback = pCallback;
 8005232:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8005234:	e7f7      	b.n	8005226 <HAL_ADC_RegisterCallback+0x32>
        hadc->LevelOutOfWindow2Callback = pCallback;
 8005236:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8005238:	e7f5      	b.n	8005226 <HAL_ADC_RegisterCallback+0x32>
        hadc->LevelOutOfWindow3Callback = pCallback;
 800523a:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800523c:	e7f3      	b.n	8005226 <HAL_ADC_RegisterCallback+0x32>
        hadc->MspInitCallback = pCallback;
 800523e:	3304      	adds	r3, #4
        hadc->MspDeInitCallback = pCallback;
 8005240:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8005242:	e7f0      	b.n	8005226 <HAL_ADC_RegisterCallback+0x32>
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8005244:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8005246:	2900      	cmp	r1, #0
 8005248:	d1d9      	bne.n	80051fe <HAL_ADC_RegisterCallback+0xa>
    switch (CallbackID)
 800524a:	2809      	cmp	r0, #9
 800524c:	d0f7      	beq.n	800523e <HAL_ADC_RegisterCallback+0x4a>
 800524e:	280a      	cmp	r0, #10
 8005250:	d1d5      	bne.n	80051fe <HAL_ADC_RegisterCallback+0xa>
        hadc->MspDeInitCallback = pCallback;
 8005252:	3308      	adds	r3, #8
 8005254:	e7f4      	b.n	8005240 <HAL_ADC_RegisterCallback+0x4c>
	...

08005258 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0UL;
 8005258:	2300      	movs	r3, #0
{
 800525a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525c:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800525e:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8005260:	0003      	movs	r3, r0
{
 8005262:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hadc);
 8005264:	3354      	adds	r3, #84	@ 0x54
 8005266:	781a      	ldrb	r2, [r3, #0]
{
 8005268:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800526a:	2002      	movs	r0, #2
 800526c:	2a01      	cmp	r2, #1
 800526e:	d04d      	beq.n	800530c <HAL_ADC_ConfigChannel+0xb4>
 8005270:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005272:	6927      	ldr	r7, [r4, #16]
  __HAL_LOCK(hadc);
 8005274:	701a      	strb	r2, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005276:	6825      	ldr	r5, [r4, #0]
 8005278:	0028      	movs	r0, r5
 800527a:	f7ff fe2d 	bl	8004ed8 <LL_ADC_REG_IsConversionOngoing>
 800527e:	2800      	cmp	r0, #0
 8005280:	d000      	beq.n	8005284 <HAL_ADC_ConfigChannel+0x2c>
 8005282:	e0f7      	b.n	8005474 <HAL_ADC_ConfigChannel+0x21c>
    if (pConfig->Rank != ADC_RANK_NONE)
 8005284:	9b00      	ldr	r3, [sp, #0]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005286:	2204      	movs	r2, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2180      	movs	r1, #128	@ 0x80
 800528c:	469c      	mov	ip, r3
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800528e:	4397      	bics	r7, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8005290:	4662      	mov	r2, ip
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005292:	9b00      	ldr	r3, [sp, #0]
 8005294:	0609      	lsls	r1, r1, #24
 8005296:	681b      	ldr	r3, [r3, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8005298:	2a02      	cmp	r2, #2
 800529a:	d100      	bne.n	800529e <HAL_ADC_ConfigChannel+0x46>
 800529c:	e0be      	b.n	800541c <HAL_ADC_ConfigChannel+0x1c4>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800529e:	035a      	lsls	r2, r3, #13
 80052a0:	0b52      	lsrs	r2, r2, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052a2:	428f      	cmp	r7, r1
 80052a4:	d134      	bne.n	8005310 <HAL_ADC_ConfigChannel+0xb8>
 80052a6:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
  MODIFY_REG(ADCx->CHSELR,
 80052a8:	430a      	orrs	r2, r1
 80052aa:	62aa      	str	r2, [r5, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 80052ac:	9a00      	ldr	r2, [sp, #0]
 80052ae:	6968      	ldr	r0, [r5, #20]
 80052b0:	6892      	ldr	r2, [r2, #8]
 80052b2:	0219      	lsls	r1, r3, #8
 80052b4:	4e72      	ldr	r6, [pc, #456]	@ (8005480 <HAL_ADC_ConfigChannel+0x228>)
 80052b6:	400a      	ands	r2, r1
 80052b8:	4032      	ands	r2, r6
 80052ba:	4388      	bics	r0, r1
 80052bc:	4302      	orrs	r2, r0
 80052be:	616a      	str	r2, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	da1f      	bge.n	8005304 <HAL_ADC_ConfigChannel+0xac>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80052c4:	21e0      	movs	r1, #224	@ 0xe0
 80052c6:	4a6f      	ldr	r2, [pc, #444]	@ (8005484 <HAL_ADC_ConfigChannel+0x22c>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80052c8:	486f      	ldr	r0, [pc, #444]	@ (8005488 <HAL_ADC_ConfigChannel+0x230>)
 80052ca:	6815      	ldr	r5, [r2, #0]
 80052cc:	0449      	lsls	r1, r1, #17
 80052ce:	4029      	ands	r1, r5
 80052d0:	4283      	cmp	r3, r0
 80052d2:	d000      	beq.n	80052d6 <HAL_ADC_ConfigChannel+0x7e>
 80052d4:	e08c      	b.n	80053f0 <HAL_ADC_ConfigChannel+0x198>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052d6:	2080      	movs	r0, #128	@ 0x80
 80052d8:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80052da:	4205      	tst	r5, r0
 80052dc:	d112      	bne.n	8005304 <HAL_ADC_ConfigChannel+0xac>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80052de:	6813      	ldr	r3, [r2, #0]
 80052e0:	4d6a      	ldr	r5, [pc, #424]	@ (800548c <HAL_ADC_ConfigChannel+0x234>)
 80052e2:	402b      	ands	r3, r5
 80052e4:	430b      	orrs	r3, r1
 80052e6:	4318      	orrs	r0, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052e8:	4b69      	ldr	r3, [pc, #420]	@ (8005490 <HAL_ADC_ConfigChannel+0x238>)
 80052ea:	6010      	str	r0, [r2, #0]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	4969      	ldr	r1, [pc, #420]	@ (8005494 <HAL_ADC_ConfigChannel+0x23c>)
 80052f0:	f7fa ff1e 	bl	8000130 <__udivsi3>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	200c      	movs	r0, #12
 80052f8:	4358      	muls	r0, r3
 80052fa:	9003      	str	r0, [sp, #12]
          while (wait_loop_index != 0UL)
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d000      	beq.n	8005304 <HAL_ADC_ConfigChannel+0xac>
 8005302:	e071      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005304:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005306:	2300      	movs	r3, #0
 8005308:	3454      	adds	r4, #84	@ 0x54
 800530a:	7023      	strb	r3, [r4, #0]
}
 800530c:	b005      	add	sp, #20
 800530e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005310:	211f      	movs	r1, #31
 8005312:	4667      	mov	r7, ip
 8005314:	400f      	ands	r7, r1
 8005316:	3910      	subs	r1, #16
 8005318:	40b9      	lsls	r1, r7
 800531a:	43ce      	mvns	r6, r1
 800531c:	9601      	str	r6, [sp, #4]
 800531e:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8005320:	438e      	bics	r6, r1
 8005322:	0031      	movs	r1, r6
 8005324:	2a00      	cmp	r2, #0
 8005326:	d112      	bne.n	800534e <HAL_ADC_ConfigChannel+0xf6>
 8005328:	0e98      	lsrs	r0, r3, #26
 800532a:	321f      	adds	r2, #31
 800532c:	4010      	ands	r0, r2
 800532e:	40b8      	lsls	r0, r7
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005330:	4662      	mov	r2, ip
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005332:	4308      	orrs	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005334:	0892      	lsrs	r2, r2, #2
 8005336:	69e1      	ldr	r1, [r4, #28]
 8005338:	3201      	adds	r2, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800533a:	6620      	str	r0, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800533c:	428a      	cmp	r2, r1
 800533e:	d8b5      	bhi.n	80052ac <HAL_ADC_ConfigChannel+0x54>
  MODIFY_REG(ADCx->CHSELR,
 8005340:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8005342:	9801      	ldr	r0, [sp, #4]
 8005344:	009a      	lsls	r2, r3, #2
 8005346:	0f12      	lsrs	r2, r2, #28
 8005348:	40ba      	lsls	r2, r7
 800534a:	4001      	ands	r1, r0
 800534c:	e7ac      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x50>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800534e:	2201      	movs	r2, #1
 8005350:	4213      	tst	r3, r2
 8005352:	d1ec      	bne.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 8005354:	1892      	adds	r2, r2, r2
 8005356:	4213      	tst	r3, r2
 8005358:	d124      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x14c>
 800535a:	2604      	movs	r6, #4
 800535c:	4233      	tst	r3, r6
 800535e:	d123      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x150>
 8005360:	071a      	lsls	r2, r3, #28
 8005362:	d423      	bmi.n	80053ac <HAL_ADC_ConfigChannel+0x154>
 8005364:	06da      	lsls	r2, r3, #27
 8005366:	d423      	bmi.n	80053b0 <HAL_ADC_ConfigChannel+0x158>
 8005368:	069a      	lsls	r2, r3, #26
 800536a:	d423      	bmi.n	80053b4 <HAL_ADC_ConfigChannel+0x15c>
 800536c:	065a      	lsls	r2, r3, #25
 800536e:	d423      	bmi.n	80053b8 <HAL_ADC_ConfigChannel+0x160>
 8005370:	061a      	lsls	r2, r3, #24
 8005372:	d423      	bmi.n	80053bc <HAL_ADC_ConfigChannel+0x164>
 8005374:	05da      	lsls	r2, r3, #23
 8005376:	d423      	bmi.n	80053c0 <HAL_ADC_ConfigChannel+0x168>
 8005378:	059a      	lsls	r2, r3, #22
 800537a:	d423      	bmi.n	80053c4 <HAL_ADC_ConfigChannel+0x16c>
 800537c:	055a      	lsls	r2, r3, #21
 800537e:	d423      	bmi.n	80053c8 <HAL_ADC_ConfigChannel+0x170>
 8005380:	051a      	lsls	r2, r3, #20
 8005382:	d423      	bmi.n	80053cc <HAL_ADC_ConfigChannel+0x174>
 8005384:	04da      	lsls	r2, r3, #19
 8005386:	d423      	bmi.n	80053d0 <HAL_ADC_ConfigChannel+0x178>
 8005388:	049a      	lsls	r2, r3, #18
 800538a:	d423      	bmi.n	80053d4 <HAL_ADC_ConfigChannel+0x17c>
 800538c:	045a      	lsls	r2, r3, #17
 800538e:	d423      	bmi.n	80053d8 <HAL_ADC_ConfigChannel+0x180>
 8005390:	041a      	lsls	r2, r3, #16
 8005392:	d423      	bmi.n	80053dc <HAL_ADC_ConfigChannel+0x184>
 8005394:	03da      	lsls	r2, r3, #15
 8005396:	d423      	bmi.n	80053e0 <HAL_ADC_ConfigChannel+0x188>
 8005398:	039a      	lsls	r2, r3, #14
 800539a:	d423      	bmi.n	80053e4 <HAL_ADC_ConfigChannel+0x18c>
 800539c:	035a      	lsls	r2, r3, #13
 800539e:	d5c6      	bpl.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053a0:	2012      	movs	r0, #18
 80053a2:	e7c4      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053a4:	2001      	movs	r0, #1
 80053a6:	e7c2      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053a8:	0010      	movs	r0, r2
 80053aa:	e7c0      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053ac:	2003      	movs	r0, #3
 80053ae:	e7be      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053b0:	2004      	movs	r0, #4
 80053b2:	e7bc      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053b4:	2005      	movs	r0, #5
 80053b6:	e7ba      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053b8:	2006      	movs	r0, #6
 80053ba:	e7b8      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053bc:	2007      	movs	r0, #7
 80053be:	e7b6      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053c0:	2008      	movs	r0, #8
 80053c2:	e7b4      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053c4:	2009      	movs	r0, #9
 80053c6:	e7b2      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053c8:	200a      	movs	r0, #10
 80053ca:	e7b0      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053cc:	200b      	movs	r0, #11
 80053ce:	e7ae      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053d0:	200c      	movs	r0, #12
 80053d2:	e7ac      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053d4:	200d      	movs	r0, #13
 80053d6:	e7aa      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053d8:	200e      	movs	r0, #14
 80053da:	e7a8      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053dc:	200f      	movs	r0, #15
 80053de:	e7a6      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053e0:	2010      	movs	r0, #16
 80053e2:	e7a4      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
 80053e4:	2011      	movs	r0, #17
 80053e6:	e7a2      	b.n	800532e <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	e785      	b.n	80052fc <HAL_ADC_ConfigChannel+0xa4>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80053f0:	4829      	ldr	r0, [pc, #164]	@ (8005498 <HAL_ADC_ConfigChannel+0x240>)
 80053f2:	4283      	cmp	r3, r0
 80053f4:	d10b      	bne.n	800540e <HAL_ADC_ConfigChannel+0x1b6>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053f6:	2080      	movs	r0, #128	@ 0x80
 80053f8:	0440      	lsls	r0, r0, #17
 80053fa:	4205      	tst	r5, r0
 80053fc:	d000      	beq.n	8005400 <HAL_ADC_ConfigChannel+0x1a8>
 80053fe:	e781      	b.n	8005304 <HAL_ADC_ConfigChannel+0xac>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	4d22      	ldr	r5, [pc, #136]	@ (800548c <HAL_ADC_ConfigChannel+0x234>)
 8005404:	402b      	ands	r3, r5
 8005406:	430b      	orrs	r3, r1
 8005408:	4318      	orrs	r0, r3
 800540a:	6010      	str	r0, [r2, #0]
}
 800540c:	e77a      	b.n	8005304 <HAL_ADC_ConfigChannel+0xac>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800540e:	4823      	ldr	r0, [pc, #140]	@ (800549c <HAL_ADC_ConfigChannel+0x244>)
 8005410:	4283      	cmp	r3, r0
 8005412:	d000      	beq.n	8005416 <HAL_ADC_ConfigChannel+0x1be>
 8005414:	e776      	b.n	8005304 <HAL_ADC_ConfigChannel+0xac>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005416:	2080      	movs	r0, #128	@ 0x80
 8005418:	03c0      	lsls	r0, r0, #15
 800541a:	e7ee      	b.n	80053fa <HAL_ADC_ConfigChannel+0x1a2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800541c:	428f      	cmp	r7, r1
 800541e:	d104      	bne.n	800542a <HAL_ADC_ConfigChannel+0x1d2>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005420:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005422:	0359      	lsls	r1, r3, #13
 8005424:	0b49      	lsrs	r1, r1, #13
 8005426:	438a      	bics	r2, r1
 8005428:	62aa      	str	r2, [r5, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800542a:	2b00      	cmp	r3, #0
 800542c:	db00      	blt.n	8005430 <HAL_ADC_ConfigChannel+0x1d8>
 800542e:	e769      	b.n	8005304 <HAL_ADC_ConfigChannel+0xac>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005430:	4a14      	ldr	r2, [pc, #80]	@ (8005484 <HAL_ADC_ConfigChannel+0x22c>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005432:	4815      	ldr	r0, [pc, #84]	@ (8005488 <HAL_ADC_ConfigChannel+0x230>)
 8005434:	6811      	ldr	r1, [r2, #0]
 8005436:	4283      	cmp	r3, r0
 8005438:	d108      	bne.n	800544c <HAL_ADC_ConfigChannel+0x1f4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800543a:	23a0      	movs	r3, #160	@ 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800543c:	6810      	ldr	r0, [r2, #0]
 800543e:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005440:	400b      	ands	r3, r1
 8005442:	4912      	ldr	r1, [pc, #72]	@ (800548c <HAL_ADC_ConfigChannel+0x234>)
 8005444:	4001      	ands	r1, r0
 8005446:	430b      	orrs	r3, r1
 8005448:	6013      	str	r3, [r2, #0]
}
 800544a:	e75b      	b.n	8005304 <HAL_ADC_ConfigChannel+0xac>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800544c:	4812      	ldr	r0, [pc, #72]	@ (8005498 <HAL_ADC_ConfigChannel+0x240>)
 800544e:	4283      	cmp	r3, r0
 8005450:	d103      	bne.n	800545a <HAL_ADC_ConfigChannel+0x202>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005452:	23c0      	movs	r3, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005454:	6810      	ldr	r0, [r2, #0]
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	e7f2      	b.n	8005440 <HAL_ADC_ConfigChannel+0x1e8>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800545a:	4810      	ldr	r0, [pc, #64]	@ (800549c <HAL_ADC_ConfigChannel+0x244>)
 800545c:	4283      	cmp	r3, r0
 800545e:	d000      	beq.n	8005462 <HAL_ADC_ConfigChannel+0x20a>
 8005460:	e750      	b.n	8005304 <HAL_ADC_ConfigChannel+0xac>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005462:	20c0      	movs	r0, #192	@ 0xc0
 8005464:	0440      	lsls	r0, r0, #17
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	4001      	ands	r1, r0
 800546a:	4808      	ldr	r0, [pc, #32]	@ (800548c <HAL_ADC_ConfigChannel+0x234>)
 800546c:	4003      	ands	r3, r0
 800546e:	4319      	orrs	r1, r3
 8005470:	6011      	str	r1, [r2, #0]
}
 8005472:	e747      	b.n	8005304 <HAL_ADC_ConfigChannel+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005474:	2320      	movs	r3, #32
 8005476:	6da2      	ldr	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8005478:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800547a:	4313      	orrs	r3, r2
 800547c:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800547e:	e742      	b.n	8005306 <HAL_ADC_ConfigChannel+0xae>
 8005480:	07ffff00 	.word	0x07ffff00
 8005484:	40012708 	.word	0x40012708
 8005488:	b0001000 	.word	0xb0001000
 800548c:	fe3fffff 	.word	0xfe3fffff
 8005490:	20000430 	.word	0x20000430
 8005494:	00030d40 	.word	0x00030d40
 8005498:	b8004000 	.word	0xb8004000
 800549c:	b4002000 	.word	0xb4002000

080054a0 <ADC_ConversionStop>:
{
 80054a0:	b570      	push	{r4, r5, r6, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80054a2:	6805      	ldr	r5, [r0, #0]
{
 80054a4:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80054a6:	0028      	movs	r0, r5
 80054a8:	f7ff fd16 	bl	8004ed8 <LL_ADC_REG_IsConversionOngoing>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d101      	bne.n	80054b4 <ADC_ConversionStop+0x14>
  return HAL_OK;
 80054b0:	2000      	movs	r0, #0
}
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80054b4:	68ab      	ldr	r3, [r5, #8]
 80054b6:	079b      	lsls	r3, r3, #30
 80054b8:	d405      	bmi.n	80054c6 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80054ba:	68aa      	ldr	r2, [r5, #8]
 80054bc:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <ADC_ConversionStop+0x5c>)
 80054be:	401a      	ands	r2, r3
 80054c0:	2310      	movs	r3, #16
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80054c6:	f7ff fd01 	bl	8004ecc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80054ca:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80054cc:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4233      	tst	r3, r6
 80054d4:	d0ec      	beq.n	80054b0 <ADC_ConversionStop+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80054d6:	f7ff fcf9 	bl	8004ecc <HAL_GetTick>
 80054da:	1b40      	subs	r0, r0, r5
 80054dc:	2802      	cmp	r0, #2
 80054de:	d9f6      	bls.n	80054ce <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4233      	tst	r3, r6
 80054e6:	d0f2      	beq.n	80054ce <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e8:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ea:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ec:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80054ee:	4313      	orrs	r3, r2
 80054f0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054f2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80054f4:	4303      	orrs	r3, r0
 80054f6:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80054f8:	e7db      	b.n	80054b2 <ADC_ConversionStop+0x12>
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	7fffffe8 	.word	0x7fffffe8

08005500 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8005500:	2300      	movs	r3, #0
{
 8005502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005504:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8005506:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005508:	6891      	ldr	r1, [r2, #8]
 800550a:	3301      	adds	r3, #1
{
 800550c:	0004      	movs	r4, r0
 800550e:	4219      	tst	r1, r3
 8005510:	d001      	beq.n	8005516 <ADC_Enable+0x16>
  return HAL_OK;
 8005512:	2000      	movs	r0, #0
}
 8005514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005516:	6890      	ldr	r0, [r2, #8]
 8005518:	4922      	ldr	r1, [pc, #136]	@ (80055a4 <ADC_Enable+0xa4>)
 800551a:	4208      	tst	r0, r1
 800551c:	d008      	beq.n	8005530 <ADC_Enable+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800551e:	2210      	movs	r2, #16
 8005520:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8005522:	430a      	orrs	r2, r1
 8005524:	65a2      	str	r2, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005526:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005528:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800552a:	2001      	movs	r0, #1
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800552c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 800552e:	e7f1      	b.n	8005514 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8005530:	6891      	ldr	r1, [r2, #8]
 8005532:	4f1d      	ldr	r7, [pc, #116]	@ (80055a8 <ADC_Enable+0xa8>)
 8005534:	4039      	ands	r1, r7
 8005536:	430b      	orrs	r3, r1
 8005538:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800553a:	4b1c      	ldr	r3, [pc, #112]	@ (80055ac <ADC_Enable+0xac>)
 800553c:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	d421      	bmi.n	8005586 <ADC_Enable+0x86>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005542:	7e63      	ldrb	r3, [r4, #25]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d0e4      	beq.n	8005512 <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 8005548:	f7ff fcc0 	bl	8004ecc <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800554c:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 800554e:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	422b      	tst	r3, r5
 8005556:	d1dc      	bne.n	8005512 <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005558:	6893      	ldr	r3, [r2, #8]
 800555a:	422b      	tst	r3, r5
 800555c:	d103      	bne.n	8005566 <ADC_Enable+0x66>
  MODIFY_REG(ADCx->CR,
 800555e:	6893      	ldr	r3, [r2, #8]
 8005560:	403b      	ands	r3, r7
 8005562:	432b      	orrs	r3, r5
 8005564:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005566:	f7ff fcb1 	bl	8004ecc <HAL_GetTick>
 800556a:	1b80      	subs	r0, r0, r6
 800556c:	2802      	cmp	r0, #2
 800556e:	d9ef      	bls.n	8005550 <ADC_Enable+0x50>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	422b      	tst	r3, r5
 8005576:	d1eb      	bne.n	8005550 <ADC_Enable+0x50>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005578:	2310      	movs	r3, #16
 800557a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800557c:	4313      	orrs	r3, r2
 800557e:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005580:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005582:	432b      	orrs	r3, r5
 8005584:	e7d1      	b.n	800552a <ADC_Enable+0x2a>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005586:	4b0a      	ldr	r3, [pc, #40]	@ (80055b0 <ADC_Enable+0xb0>)
 8005588:	490a      	ldr	r1, [pc, #40]	@ (80055b4 <ADC_Enable+0xb4>)
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	f7fa fdd0 	bl	8000130 <__udivsi3>
 8005590:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005592:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8005594:	9b01      	ldr	r3, [sp, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0d3      	beq.n	8005542 <ADC_Enable+0x42>
        wait_loop_index--;
 800559a:	9b01      	ldr	r3, [sp, #4]
 800559c:	3b01      	subs	r3, #1
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	e7f8      	b.n	8005594 <ADC_Enable+0x94>
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	80000017 	.word	0x80000017
 80055a8:	7fffffe8 	.word	0x7fffffe8
 80055ac:	40012708 	.word	0x40012708
 80055b0:	20000430 	.word	0x20000430
 80055b4:	00030d40 	.word	0x00030d40

080055b8 <HAL_ADC_Start_DMA>:
{
 80055b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055ba:	6805      	ldr	r5, [r0, #0]
{
 80055bc:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055be:	0028      	movs	r0, r5
{
 80055c0:	000e      	movs	r6, r1
 80055c2:	9201      	str	r2, [sp, #4]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055c4:	f7ff fc88 	bl	8004ed8 <LL_ADC_REG_IsConversionOngoing>
    __HAL_LOCK(hadc);
 80055c8:	2302      	movs	r3, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d13f      	bne.n	800564e <HAL_ADC_Start_DMA+0x96>
    __HAL_LOCK(hadc);
 80055ce:	0027      	movs	r7, r4
 80055d0:	3754      	adds	r7, #84	@ 0x54
 80055d2:	783a      	ldrb	r2, [r7, #0]
 80055d4:	2a01      	cmp	r2, #1
 80055d6:	d03a      	beq.n	800564e <HAL_ADC_Start_DMA+0x96>
 80055d8:	3b01      	subs	r3, #1
 80055da:	703b      	strb	r3, [r7, #0]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80055dc:	68ea      	ldr	r2, [r5, #12]
 80055de:	421a      	tst	r2, r3
 80055e0:	d10c      	bne.n	80055fc <HAL_ADC_Start_DMA+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055e2:	68aa      	ldr	r2, [r5, #8]
 80055e4:	421a      	tst	r2, r3
 80055e6:	d005      	beq.n	80055f4 <HAL_ADC_Start_DMA+0x3c>
  MODIFY_REG(ADCx->CR,
 80055e8:	68aa      	ldr	r2, [r5, #8]
 80055ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005654 <HAL_ADC_Start_DMA+0x9c>)
 80055ec:	401a      	ands	r2, r3
 80055ee:	2302      	movs	r3, #2
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60ab      	str	r3, [r5, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80055f4:	2301      	movs	r3, #1
 80055f6:	68ea      	ldr	r2, [r5, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80055fc:	0020      	movs	r0, r4
 80055fe:	f7ff ff7f 	bl	8005500 <ADC_Enable>
 8005602:	1e03      	subs	r3, r0, #0
    if (tmp_hal_status == HAL_OK)
 8005604:	d123      	bne.n	800564e <HAL_ADC_Start_DMA+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8005606:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8005608:	4a13      	ldr	r2, [pc, #76]	@ (8005658 <HAL_ADC_Start_DMA+0xa0>)
 800560a:	4011      	ands	r1, r2
 800560c:	2280      	movs	r2, #128	@ 0x80
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	430a      	orrs	r2, r1
 8005612:	65a2      	str	r2, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8005614:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005616:	4a11      	ldr	r2, [pc, #68]	@ (800565c <HAL_ADC_Start_DMA+0xa4>)
 8005618:	6d20      	ldr	r0, [r4, #80]	@ 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800561a:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800561c:	62c2      	str	r2, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800561e:	4a10      	ldr	r2, [pc, #64]	@ (8005660 <HAL_ADC_Start_DMA+0xa8>)
 8005620:	6302      	str	r2, [r0, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005622:	4a10      	ldr	r2, [pc, #64]	@ (8005664 <HAL_ADC_Start_DMA+0xac>)
 8005624:	6342      	str	r2, [r0, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005626:	221c      	movs	r2, #28
 8005628:	600a      	str	r2, [r1, #0]
      __HAL_UNLOCK(hadc);
 800562a:	703b      	strb	r3, [r7, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800562c:	684a      	ldr	r2, [r1, #4]
 800562e:	3310      	adds	r3, #16
 8005630:	4313      	orrs	r3, r2
 8005632:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005634:	0032      	movs	r2, r6
 8005636:	9b01      	ldr	r3, [sp, #4]
 8005638:	3140      	adds	r1, #64	@ 0x40
 800563a:	f000 fa39 	bl	8005ab0 <HAL_DMA_Start_IT>
 800563e:	0003      	movs	r3, r0
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005640:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005642:	4a04      	ldr	r2, [pc, #16]	@ (8005654 <HAL_ADC_Start_DMA+0x9c>)
 8005644:	6881      	ldr	r1, [r0, #8]
 8005646:	4011      	ands	r1, r2
 8005648:	2204      	movs	r2, #4
 800564a:	430a      	orrs	r2, r1
 800564c:	6082      	str	r2, [r0, #8]
}
 800564e:	0018      	movs	r0, r3
 8005650:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	7fffffe8 	.word	0x7fffffe8
 8005658:	fffff0fe 	.word	0xfffff0fe
 800565c:	08004ee1 	.word	0x08004ee1
 8005660:	08004f5d 	.word	0x08004f5d
 8005664:	08004f67 	.word	0x08004f67

08005668 <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005668:	2201      	movs	r2, #1
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800566a:	6803      	ldr	r3, [r0, #0]
{
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005670:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005672:	6899      	ldr	r1, [r3, #8]
 8005674:	4211      	tst	r1, r2
 8005676:	d101      	bne.n	800567c <ADC_Disable+0x14>
  return HAL_OK;
 8005678:	2000      	movs	r0, #0
}
 800567a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800567c:	2102      	movs	r1, #2
      && (tmp_adc_is_disable_on_going == 0UL)
 800567e:	4208      	tst	r0, r1
 8005680:	d1fa      	bne.n	8005678 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005682:	2005      	movs	r0, #5
 8005684:	689d      	ldr	r5, [r3, #8]
 8005686:	4005      	ands	r5, r0
 8005688:	2d01      	cmp	r5, #1
 800568a:	d11e      	bne.n	80056ca <ADC_Disable+0x62>
  MODIFY_REG(ADCx->CR,
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	4813      	ldr	r0, [pc, #76]	@ (80056dc <ADC_Disable+0x74>)
 8005690:	4002      	ands	r2, r0
 8005692:	4311      	orrs	r1, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005694:	2203      	movs	r2, #3
 8005696:	6099      	str	r1, [r3, #8]
 8005698:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800569a:	f7ff fc17 	bl	8004ecc <HAL_GetTick>
 800569e:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	422b      	tst	r3, r5
 80056a6:	d0e7      	beq.n	8005678 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056a8:	f7ff fc10 	bl	8004ecc <HAL_GetTick>
 80056ac:	1b80      	subs	r0, r0, r6
 80056ae:	2802      	cmp	r0, #2
 80056b0:	d9f6      	bls.n	80056a0 <ADC_Disable+0x38>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	422b      	tst	r3, r5
 80056b8:	d0f2      	beq.n	80056a0 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ba:	2310      	movs	r3, #16
 80056bc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80056be:	4313      	orrs	r3, r2
 80056c0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056c2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80056c4:	432b      	orrs	r3, r5
 80056c6:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80056c8:	e006      	b.n	80056d8 <ADC_Disable+0x70>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ca:	2310      	movs	r3, #16
 80056cc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80056ce:	430b      	orrs	r3, r1
 80056d0:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056d2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80056d4:	431a      	orrs	r2, r3
 80056d6:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80056d8:	2001      	movs	r0, #1
 80056da:	e7ce      	b.n	800567a <ADC_Disable+0x12>
 80056dc:	7fffffe8 	.word	0x7fffffe8

080056e0 <HAL_ADC_Stop_DMA>:
{
 80056e0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80056e2:	0006      	movs	r6, r0
 80056e4:	3654      	adds	r6, #84	@ 0x54
 80056e6:	7833      	ldrb	r3, [r6, #0]
{
 80056e8:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80056ea:	2402      	movs	r4, #2
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d025      	beq.n	800573c <HAL_ADC_Stop_DMA+0x5c>
 80056f0:	2301      	movs	r3, #1
 80056f2:	7033      	strb	r3, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80056f4:	f7ff fed4 	bl	80054a0 <ADC_ConversionStop>
 80056f8:	1e04      	subs	r4, r0, #0
  if (tmp_hal_status == HAL_OK)
 80056fa:	d11d      	bne.n	8005738 <HAL_ADC_Stop_DMA+0x58>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80056fc:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80056fe:	1d83      	adds	r3, r0, #6
 8005700:	7fdb      	ldrb	r3, [r3, #31]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d107      	bne.n	8005716 <HAL_ADC_Stop_DMA+0x36>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005706:	f000 fa1b 	bl	8005b40 <HAL_DMA_Abort>
 800570a:	1e04      	subs	r4, r0, #0
      if (tmp_hal_status != HAL_OK)
 800570c:	d003      	beq.n	8005716 <HAL_ADC_Stop_DMA+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800570e:	2340      	movs	r3, #64	@ 0x40
 8005710:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8005712:	4313      	orrs	r3, r2
 8005714:	65ab      	str	r3, [r5, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005716:	2110      	movs	r1, #16
 8005718:	682a      	ldr	r2, [r5, #0]
      tmp_hal_status = ADC_Disable(hadc);
 800571a:	0028      	movs	r0, r5
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800571c:	6853      	ldr	r3, [r2, #4]
 800571e:	438b      	bics	r3, r1
 8005720:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8005722:	2c00      	cmp	r4, #0
 8005724:	d10c      	bne.n	8005740 <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 8005726:	f7ff ff9f 	bl	8005668 <ADC_Disable>
 800572a:	1e04      	subs	r4, r0, #0
    if (tmp_hal_status == HAL_OK)
 800572c:	d00b      	beq.n	8005746 <HAL_ADC_Stop_DMA+0x66>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800572e:	2101      	movs	r1, #1
 8005730:	682a      	ldr	r2, [r5, #0]
 8005732:	68d3      	ldr	r3, [r2, #12]
 8005734:	438b      	bics	r3, r1
 8005736:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 8005738:	2300      	movs	r3, #0
 800573a:	7033      	strb	r3, [r6, #0]
}
 800573c:	0020      	movs	r0, r4
 800573e:	bd70      	pop	{r4, r5, r6, pc}
      (void)ADC_Disable(hadc);
 8005740:	f7ff ff92 	bl	8005668 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8005744:	e7f3      	b.n	800572e <HAL_ADC_Stop_DMA+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 8005746:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8005748:	4b03      	ldr	r3, [pc, #12]	@ (8005758 <HAL_ADC_Stop_DMA+0x78>)
 800574a:	401a      	ands	r2, r3
 800574c:	3304      	adds	r3, #4
 800574e:	33ff      	adds	r3, #255	@ 0xff
 8005750:	4313      	orrs	r3, r2
 8005752:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005754:	e7eb      	b.n	800572e <HAL_ADC_Stop_DMA+0x4e>
 8005756:	46c0      	nop			@ (mov r8, r8)
 8005758:	fffffefe 	.word	0xfffffefe

0800575c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800575c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800575e:	2300      	movs	r3, #0
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005760:	0005      	movs	r5, r0
 8005762:	2202      	movs	r2, #2
{
 8005764:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8005766:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hadc);
 8005768:	3554      	adds	r5, #84	@ 0x54
 800576a:	782b      	ldrb	r3, [r5, #0]
{
 800576c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800576e:	9200      	str	r2, [sp, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d03e      	beq.n	80057f2 <HAL_ADCEx_Calibration_Start+0x96>
 8005774:	2601      	movs	r6, #1
 8005776:	702e      	strb	r6, [r5, #0]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005778:	f7ff ff76 	bl	8005668 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800577c:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 800577e:	9000      	str	r0, [sp, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005780:	6899      	ldr	r1, [r3, #8]
 8005782:	000a      	movs	r2, r1
 8005784:	4032      	ands	r2, r6
 8005786:	4231      	tst	r1, r6
 8005788:	d006      	beq.n	8005798 <HAL_ADCEx_Calibration_Start+0x3c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800578a:	2310      	movs	r3, #16
 800578c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800578e:	4313      	orrs	r3, r2
    ADC_STATE_CLR_SET(hadc->State,
 8005790:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005792:	2300      	movs	r3, #0
 8005794:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
 8005796:	e02c      	b.n	80057f2 <HAL_ADCEx_Calibration_Start+0x96>
  MODIFY_REG(ADCx->CR,
 8005798:	2680      	movs	r6, #128	@ 0x80
    ADC_STATE_CLR_SET(hadc->State,
 800579a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800579c:	4942      	ldr	r1, [pc, #264]	@ (80058a8 <HAL_ADCEx_Calibration_Start+0x14c>)
 800579e:	0636      	lsls	r6, r6, #24
 80057a0:	4008      	ands	r0, r1
 80057a2:	3106      	adds	r1, #6
 80057a4:	31ff      	adds	r1, #255	@ 0xff
 80057a6:	4301      	orrs	r1, r0
 80057a8:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80057aa:	68d8      	ldr	r0, [r3, #12]
 80057ac:	493f      	ldr	r1, [pc, #252]	@ (80058ac <HAL_ADCEx_Calibration_Start+0x150>)
 80057ae:	46b4      	mov	ip, r6
 80057b0:	4008      	ands	r0, r1
 80057b2:	9001      	str	r0, [sp, #4]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	483e      	ldr	r0, [pc, #248]	@ (80058b0 <HAL_ADCEx_Calibration_Start+0x154>)
 80057b8:	4001      	ands	r1, r0
 80057ba:	2008      	movs	r0, #8
 80057bc:	60d9      	str	r1, [r3, #12]
 80057be:	493d      	ldr	r1, [pc, #244]	@ (80058b4 <HAL_ADCEx_Calibration_Start+0x158>)
 80057c0:	4667      	mov	r7, ip
 80057c2:	689e      	ldr	r6, [r3, #8]
 80057c4:	400e      	ands	r6, r1
 80057c6:	433e      	orrs	r6, r7
 80057c8:	609e      	str	r6, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80057ca:	689e      	ldr	r6, [r3, #8]
 80057cc:	2e00      	cmp	r6, #0
 80057ce:	da13      	bge.n	80057f8 <HAL_ADCEx_Calibration_Start+0x9c>
        wait_loop_index++;
 80057d0:	9e02      	ldr	r6, [sp, #8]
 80057d2:	3601      	adds	r6, #1
 80057d4:	9602      	str	r6, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80057d6:	9f02      	ldr	r7, [sp, #8]
 80057d8:	4e37      	ldr	r6, [pc, #220]	@ (80058b8 <HAL_ADCEx_Calibration_Start+0x15c>)
 80057da:	42b7      	cmp	r7, r6
 80057dc:	d9f5      	bls.n	80057ca <HAL_ADCEx_Calibration_Start+0x6e>
          ADC_STATE_CLR_SET(hadc->State,
 80057de:	2312      	movs	r3, #18
 80057e0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80057e2:	439a      	bics	r2, r3
 80057e4:	3b02      	subs	r3, #2
 80057e6:	4313      	orrs	r3, r2
 80057e8:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80057ea:	2300      	movs	r3, #0
 80057ec:	702b      	strb	r3, [r5, #0]
          return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	9300      	str	r3, [sp, #0]
}
 80057f2:	9800      	ldr	r0, [sp, #0]
 80057f4:	b005      	add	sp, #20
 80057f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80057f8:	001e      	movs	r6, r3
 80057fa:	277f      	movs	r7, #127	@ 0x7f
 80057fc:	36b4      	adds	r6, #180	@ 0xb4
 80057fe:	6836      	ldr	r6, [r6, #0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005800:	3801      	subs	r0, #1
 8005802:	403e      	ands	r6, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005804:	1992      	adds	r2, r2, r6
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005806:	2800      	cmp	r0, #0
 8005808:	d1da      	bne.n	80057c0 <HAL_ADCEx_Calibration_Start+0x64>
  MODIFY_REG(ADCx->CR,
 800580a:	2601      	movs	r6, #1
 800580c:	6898      	ldr	r0, [r3, #8]
    calibration_factor_accumulated /= calibration_index;
 800580e:	08d2      	lsrs	r2, r2, #3
 8005810:	4008      	ands	r0, r1
 8005812:	4330      	orrs	r0, r6
 8005814:	6098      	str	r0, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8005816:	2080      	movs	r0, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8005818:	691f      	ldr	r7, [r3, #16]
 800581a:	05c0      	lsls	r0, r0, #23
 800581c:	4287      	cmp	r7, r0
 800581e:	d31c      	bcc.n	800585a <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 8005820:	001e      	movs	r6, r3
 8005822:	277f      	movs	r7, #127	@ 0x7f
 8005824:	36b4      	adds	r6, #180	@ 0xb4
 8005826:	6830      	ldr	r0, [r6, #0]
 8005828:	43b8      	bics	r0, r7
 800582a:	4310      	orrs	r0, r2
 800582c:	6030      	str	r0, [r6, #0]
  MODIFY_REG(ADCx->CR,
 800582e:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005830:	2601      	movs	r6, #1
  MODIFY_REG(ADCx->CR,
 8005832:	4011      	ands	r1, r2
 8005834:	2202      	movs	r2, #2
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800583a:	f7ff fb47 	bl	8004ecc <HAL_GetTick>
 800583e:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005840:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	4232      	tst	r2, r6
 8005846:	d11e      	bne.n	8005886 <HAL_ADCEx_Calibration_Start+0x12a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	9901      	ldr	r1, [sp, #4]
 800584c:	430a      	orrs	r2, r1
 800584e:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8005850:	2203      	movs	r2, #3
 8005852:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005854:	4393      	bics	r3, r2
 8005856:	4333      	orrs	r3, r6
 8005858:	e79a      	b.n	8005790 <HAL_ADCEx_Calibration_Start+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800585a:	4818      	ldr	r0, [pc, #96]	@ (80058bc <HAL_ADCEx_Calibration_Start+0x160>)
 800585c:	6807      	ldr	r7, [r0, #0]
 800585e:	20f0      	movs	r0, #240	@ 0xf0
 8005860:	0380      	lsls	r0, r0, #14
 8005862:	4038      	ands	r0, r7
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8005864:	27e0      	movs	r7, #224	@ 0xe0
 8005866:	037f      	lsls	r7, r7, #13
 8005868:	42b8      	cmp	r0, r7
 800586a:	d3d9      	bcc.n	8005820 <HAL_ADCEx_Calibration_Start+0xc4>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800586c:	0c80      	lsrs	r0, r0, #18
 800586e:	3803      	subs	r0, #3
 8005870:	4086      	lsls	r6, r0
 8005872:	9603      	str	r6, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 8005874:	9803      	ldr	r0, [sp, #12]
 8005876:	0840      	lsrs	r0, r0, #1
          delay_cpu_cycles--;
 8005878:	9003      	str	r0, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 800587a:	9803      	ldr	r0, [sp, #12]
 800587c:	2800      	cmp	r0, #0
 800587e:	d0cf      	beq.n	8005820 <HAL_ADCEx_Calibration_Start+0xc4>
          delay_cpu_cycles--;
 8005880:	9803      	ldr	r0, [sp, #12]
 8005882:	3801      	subs	r0, #1
 8005884:	e7f8      	b.n	8005878 <HAL_ADCEx_Calibration_Start+0x11c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005886:	f7ff fb21 	bl	8004ecc <HAL_GetTick>
 800588a:	1bc0      	subs	r0, r0, r7
 800588c:	2802      	cmp	r0, #2
 800588e:	d9d7      	bls.n	8005840 <HAL_ADCEx_Calibration_Start+0xe4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005890:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4233      	tst	r3, r6
 8005896:	d0d3      	beq.n	8005840 <HAL_ADCEx_Calibration_Start+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005898:	2310      	movs	r3, #16
 800589a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800589c:	4313      	orrs	r3, r2
 800589e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058a0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80058a2:	4333      	orrs	r3, r6
 80058a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80058a6:	e7a2      	b.n	80057ee <HAL_ADCEx_Calibration_Start+0x92>
 80058a8:	fffffefd 	.word	0xfffffefd
 80058ac:	00008003 	.word	0x00008003
 80058b0:	ffff7ffc 	.word	0xffff7ffc
 80058b4:	7fffffe8 	.word	0x7fffffe8
 80058b8:	0002f1ff 	.word	0x0002f1ff
 80058bc:	40012708 	.word	0x40012708

080058c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80058c0:	4770      	bx	lr

080058c2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80058c2:	4770      	bx	lr

080058c4 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058c8:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058ca:	24ff      	movs	r4, #255	@ 0xff
 80058cc:	2203      	movs	r2, #3
 80058ce:	000b      	movs	r3, r1
 80058d0:	0021      	movs	r1, r4
 80058d2:	4002      	ands	r2, r0
 80058d4:	00d2      	lsls	r2, r2, #3
 80058d6:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058dc:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80058de:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80058e0:	2800      	cmp	r0, #0
 80058e2:	db0a      	blt.n	80058fa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058e4:	24c0      	movs	r4, #192	@ 0xc0
 80058e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005914 <HAL_NVIC_SetPriority+0x4c>)
 80058e8:	0880      	lsrs	r0, r0, #2
 80058ea:	0080      	lsls	r0, r0, #2
 80058ec:	1880      	adds	r0, r0, r2
 80058ee:	00a4      	lsls	r4, r4, #2
 80058f0:	5902      	ldr	r2, [r0, r4]
 80058f2:	400a      	ands	r2, r1
 80058f4:	4313      	orrs	r3, r2
 80058f6:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80058f8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058fa:	220f      	movs	r2, #15
 80058fc:	4010      	ands	r0, r2
 80058fe:	3808      	subs	r0, #8
 8005900:	4a05      	ldr	r2, [pc, #20]	@ (8005918 <HAL_NVIC_SetPriority+0x50>)
 8005902:	0880      	lsrs	r0, r0, #2
 8005904:	0080      	lsls	r0, r0, #2
 8005906:	1880      	adds	r0, r0, r2
 8005908:	69c2      	ldr	r2, [r0, #28]
 800590a:	4011      	ands	r1, r2
 800590c:	4319      	orrs	r1, r3
 800590e:	61c1      	str	r1, [r0, #28]
 8005910:	e7f2      	b.n	80058f8 <HAL_NVIC_SetPriority+0x30>
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	e000e100 	.word	0xe000e100
 8005918:	e000ed00 	.word	0xe000ed00

0800591c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800591c:	2800      	cmp	r0, #0
 800591e:	db05      	blt.n	800592c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005920:	231f      	movs	r3, #31
 8005922:	4018      	ands	r0, r3
 8005924:	3b1e      	subs	r3, #30
 8005926:	4083      	lsls	r3, r0
 8005928:	4a01      	ldr	r2, [pc, #4]	@ (8005930 <HAL_NVIC_EnableIRQ+0x14>)
 800592a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800592c:	4770      	bx	lr
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	e000e100 	.word	0xe000e100

08005934 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005934:	2800      	cmp	r0, #0
 8005936:	db09      	blt.n	800594c <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005938:	231f      	movs	r3, #31
 800593a:	4018      	ands	r0, r3
 800593c:	3b1e      	subs	r3, #30
 800593e:	4083      	lsls	r3, r0
 8005940:	4a03      	ldr	r2, [pc, #12]	@ (8005950 <HAL_NVIC_DisableIRQ+0x1c>)
 8005942:	67d3      	str	r3, [r2, #124]	@ 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005944:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005948:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800594c:	4770      	bx	lr
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	e000e104 	.word	0xe000e104

08005954 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005954:	2280      	movs	r2, #128	@ 0x80
 8005956:	1e43      	subs	r3, r0, #1
 8005958:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800595a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800595c:	4293      	cmp	r3, r2
 800595e:	d20d      	bcs.n	800597c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005960:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005962:	4a07      	ldr	r2, [pc, #28]	@ (8005980 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005964:	4807      	ldr	r0, [pc, #28]	@ (8005984 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005966:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005968:	6a03      	ldr	r3, [r0, #32]
 800596a:	0609      	lsls	r1, r1, #24
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	430b      	orrs	r3, r1
 8005972:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005974:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005976:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005978:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800597a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800597c:	4770      	bx	lr
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	e000e010 	.word	0xe000e010
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800598a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800598c:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 800598e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005990:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8005992:	2c00      	cmp	r4, #0
 8005994:	d002      	beq.n	800599c <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005996:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005998:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800599a:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800599c:	241c      	movs	r4, #28
 800599e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80059a0:	4e08      	ldr	r6, [pc, #32]	@ (80059c4 <DMA_SetConfig+0x3c>)
 80059a2:	4025      	ands	r5, r4
 80059a4:	3c1b      	subs	r4, #27
 80059a6:	40ac      	lsls	r4, r5
 80059a8:	6877      	ldr	r7, [r6, #4]
 80059aa:	433c      	orrs	r4, r7
 80059ac:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059ae:	6804      	ldr	r4, [r0, #0]
 80059b0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059b2:	6883      	ldr	r3, [r0, #8]
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d102      	bne.n	80059be <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059b8:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059ba:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80059be:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80059c0:	60e2      	str	r2, [r4, #12]
}
 80059c2:	e7fb      	b.n	80059bc <DMA_SetConfig+0x34>
 80059c4:	40020000 	.word	0x40020000

080059c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059c8:	b510      	push	{r4, lr}
 80059ca:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80059cc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80059ce:	4a09      	ldr	r2, [pc, #36]	@ (80059f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059d8:	6800      	ldr	r0, [r0, #0]
 80059da:	2114      	movs	r1, #20
 80059dc:	b2c0      	uxtb	r0, r0
 80059de:	3808      	subs	r0, #8
 80059e0:	f7fa fba6 	bl	8000130 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059e4:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80059e6:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80059e8:	231f      	movs	r3, #31
 80059ea:	4018      	ands	r0, r3
 80059ec:	3b1e      	subs	r3, #30
 80059ee:	4083      	lsls	r3, r0
 80059f0:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 80059f2:	bd10      	pop	{r4, pc}
 80059f4:	10008200 	.word	0x10008200
 80059f8:	40020880 	.word	0x40020880

080059fc <HAL_DMA_Init>:
{
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005a00:	2001      	movs	r0, #1
  if (hdma == NULL)
 8005a02:	2c00      	cmp	r4, #0
 8005a04:	d046      	beq.n	8005a94 <HAL_DMA_Init+0x98>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a06:	6825      	ldr	r5, [r4, #0]
 8005a08:	4b25      	ldr	r3, [pc, #148]	@ (8005aa0 <HAL_DMA_Init+0xa4>)
 8005a0a:	2114      	movs	r1, #20
 8005a0c:	18e8      	adds	r0, r5, r3
 8005a0e:	f7fa fb8f 	bl	8000130 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a12:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a14:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a16:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a18:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a1a:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	4a21      	ldr	r2, [pc, #132]	@ (8005aa4 <HAL_DMA_Init+0xa8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005a20:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005a22:	4013      	ands	r3, r2
 8005a24:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	6921      	ldr	r1, [r4, #16]
 8005a2a:	433b      	orrs	r3, r7
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6961      	ldr	r1, [r4, #20]
 8005a30:	682a      	ldr	r2, [r5, #0]
 8005a32:	430b      	orrs	r3, r1
 8005a34:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a36:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	69e1      	ldr	r1, [r4, #28]
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	6a21      	ldr	r1, [r4, #32]
 8005a40:	430b      	orrs	r3, r1
 8005a42:	4313      	orrs	r3, r2
 8005a44:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a46:	f7ff ffbf 	bl	80059c8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	01db      	lsls	r3, r3, #7
 8005a4e:	429f      	cmp	r7, r3
 8005a50:	d101      	bne.n	8005a56 <HAL_DMA_Init+0x5a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a52:	2300      	movs	r3, #0
 8005a54:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a56:	233f      	movs	r3, #63	@ 0x3f
 8005a58:	6862      	ldr	r2, [r4, #4]
 8005a5a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a60:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005a62:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a64:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a66:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a68:	2a03      	cmp	r2, #3
 8005a6a:	d814      	bhi.n	8005a96 <HAL_DMA_Init+0x9a>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8005aa8 <HAL_DMA_Init+0xac>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a6e:	480f      	ldr	r0, [pc, #60]	@ (8005aac <HAL_DMA_Init+0xb0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a70:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005a72:	2201      	movs	r2, #1
 8005a74:	3b01      	subs	r3, #1
 8005a76:	409a      	lsls	r2, r3
 8005a78:	65a2      	str	r2, [r4, #88]	@ 0x58
 8005a7a:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a7c:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a7e:	0089      	lsls	r1, r1, #2
 8005a80:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a82:	6560      	str	r0, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a84:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a86:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a88:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005a8a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a8c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 8005a8e:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 8005a90:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8005a92:	77e0      	strb	r0, [r4, #31]
}
 8005a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->DMAmuxRequestGen = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a9a:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a9c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005a9e:	e7f3      	b.n	8005a88 <HAL_DMA_Init+0x8c>
 8005aa0:	bffdfff8 	.word	0xbffdfff8
 8005aa4:	ffff800f 	.word	0xffff800f
 8005aa8:	1000823f 	.word	0x1000823f
 8005aac:	40020940 	.word	0x40020940

08005ab0 <HAL_DMA_Start_IT>:
{
 8005ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8005ab2:	1d45      	adds	r5, r0, #5
{
 8005ab4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8005ab6:	7fee      	ldrb	r6, [r5, #31]
{
 8005ab8:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8005aba:	2002      	movs	r0, #2
 8005abc:	2e01      	cmp	r6, #1
 8005abe:	d033      	beq.n	8005b28 <HAL_DMA_Start_IT+0x78>
 8005ac0:	3801      	subs	r0, #1
 8005ac2:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8005ac4:	1da7      	adds	r7, r4, #6
 8005ac6:	7ffe      	ldrb	r6, [r7, #31]
 8005ac8:	46b4      	mov	ip, r6
 8005aca:	4663      	mov	r3, ip
 8005acc:	b2f6      	uxtb	r6, r6
 8005ace:	9600      	str	r6, [sp, #0]
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	4283      	cmp	r3, r0
 8005ad4:	d130      	bne.n	8005b38 <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 8005ada:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005adc:	63e6      	str	r6, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005ade:	6828      	ldr	r0, [r5, #0]
 8005ae0:	9b00      	ldr	r3, [sp, #0]
 8005ae2:	4398      	bics	r0, r3
 8005ae4:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ae6:	9b01      	ldr	r3, [sp, #4]
 8005ae8:	0020      	movs	r0, r4
 8005aea:	f7ff ff4d 	bl	8005988 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8005aee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005af0:	42b3      	cmp	r3, r6
 8005af2:	d01a      	beq.n	8005b2a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005af4:	230e      	movs	r3, #14
 8005af6:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005af8:	4313      	orrs	r3, r2
 8005afa:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005afc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	03d2      	lsls	r2, r2, #15
 8005b02:	d504      	bpl.n	8005b0e <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b04:	2280      	movs	r2, #128	@ 0x80
 8005b06:	6819      	ldr	r1, [r3, #0]
 8005b08:	0052      	lsls	r2, r2, #1
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005b0e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b14:	2280      	movs	r2, #128	@ 0x80
 8005b16:	6819      	ldr	r1, [r3, #0]
 8005b18:	0052      	lsls	r2, r2, #1
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8005b1e:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005b20:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005b22:	682a      	ldr	r2, [r5, #0]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	602b      	str	r3, [r5, #0]
}
 8005b28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	4393      	bics	r3, r2
 8005b30:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b32:	682a      	ldr	r2, [r5, #0]
 8005b34:	230a      	movs	r3, #10
 8005b36:	e7df      	b.n	8005af8 <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b38:	2380      	movs	r3, #128	@ 0x80
 8005b3a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8005b3c:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 8005b3e:	e7f3      	b.n	8005b28 <HAL_DMA_Start_IT+0x78>

08005b40 <HAL_DMA_Abort>:
{
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (NULL == hdma)
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d008      	beq.n	8005b58 <HAL_DMA_Abort+0x18>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005b46:	1d84      	adds	r4, r0, #6
 8005b48:	7fe3      	ldrb	r3, [r4, #31]
 8005b4a:	1d41      	adds	r1, r0, #5
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d005      	beq.n	8005b5c <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b50:	2304      	movs	r3, #4
 8005b52:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8005b54:	2300      	movs	r3, #0
 8005b56:	77cb      	strb	r3, [r1, #31]
    return HAL_ERROR;
 8005b58:	2001      	movs	r0, #1
}
 8005b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b5c:	250e      	movs	r5, #14
 8005b5e:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b60:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b62:	6813      	ldr	r3, [r2, #0]
 8005b64:	43ab      	bics	r3, r5
 8005b66:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b68:	6833      	ldr	r3, [r6, #0]
 8005b6a:	4d10      	ldr	r5, [pc, #64]	@ (8005bac <HAL_DMA_Abort+0x6c>)
 8005b6c:	402b      	ands	r3, r5
 8005b6e:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8005b70:	2301      	movs	r3, #1
 8005b72:	6816      	ldr	r6, [r2, #0]
 8005b74:	439e      	bics	r6, r3
 8005b76:	6016      	str	r6, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005b78:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005b7a:	331b      	adds	r3, #27
 8005b7c:	401a      	ands	r2, r3
 8005b7e:	3b1b      	subs	r3, #27
 8005b80:	4093      	lsls	r3, r2
 8005b82:	4e0b      	ldr	r6, [pc, #44]	@ (8005bb0 <HAL_DMA_Abort+0x70>)
 8005b84:	6877      	ldr	r7, [r6, #4]
 8005b86:	433b      	orrs	r3, r7
 8005b88:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b8a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005b8c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005b8e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005b90:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	402a      	ands	r2, r5
 8005b9a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b9c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005b9e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005ba0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005ba2:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8005ba4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005ba6:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8005ba8:	77c8      	strb	r0, [r1, #31]
  return HAL_OK;
 8005baa:	e7d6      	b.n	8005b5a <HAL_DMA_Abort+0x1a>
 8005bac:	fffffeff 	.word	0xfffffeff
 8005bb0:	40020000 	.word	0x40020000

08005bb4 <HAL_DMA_Abort_IT>:
{
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005bb6:	1d81      	adds	r1, r0, #6
 8005bb8:	7fcb      	ldrb	r3, [r1, #31]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d003      	beq.n	8005bc6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8005bc2:	2001      	movs	r0, #1
}
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bc6:	240e      	movs	r4, #14
 8005bc8:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005bca:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bcc:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bce:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bd0:	43a3      	bics	r3, r4
 8005bd2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	6814      	ldr	r4, [r2, #0]
 8005bd8:	439c      	bics	r4, r3
 8005bda:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bdc:	682a      	ldr	r2, [r5, #0]
 8005bde:	4c10      	ldr	r4, [pc, #64]	@ (8005c20 <HAL_DMA_Abort_IT+0x6c>)
 8005be0:	4022      	ands	r2, r4
 8005be2:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005be4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005be6:	4d0f      	ldr	r5, [pc, #60]	@ (8005c24 <HAL_DMA_Abort_IT+0x70>)
 8005be8:	403a      	ands	r2, r7
 8005bea:	4093      	lsls	r3, r2
 8005bec:	686e      	ldr	r6, [r5, #4]
 8005bee:	4333      	orrs	r3, r6
 8005bf0:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bf2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005bf4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005bf6:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005bf8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4022      	ands	r2, r4
 8005c02:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c04:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005c06:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005c08:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005c0a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8005c0c:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005c0e:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 8005c10:	1d43      	adds	r3, r0, #5
 8005c12:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8005c14:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d000      	beq.n	8005c1c <HAL_DMA_Abort_IT+0x68>
      hdma->XferAbortCallback(hdma);
 8005c1a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e7d1      	b.n	8005bc4 <HAL_DMA_Abort_IT+0x10>
 8005c20:	fffffeff 	.word	0xfffffeff
 8005c24:	40020000 	.word	0x40020000

08005c28 <HAL_DMA_IRQHandler>:
{
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005c2a:	241c      	movs	r4, #28
 8005c2c:	2704      	movs	r7, #4
 8005c2e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = DMA1->ISR;
 8005c30:	4a26      	ldr	r2, [pc, #152]	@ (8005ccc <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005c32:	4021      	ands	r1, r4
 8005c34:	003c      	movs	r4, r7
 8005c36:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8005c38:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005c3a:	6803      	ldr	r3, [r0, #0]
 8005c3c:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005c3e:	4226      	tst	r6, r4
 8005c40:	d00f      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x3a>
 8005c42:	423d      	tst	r5, r7
 8005c44:	d00d      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c46:	6819      	ldr	r1, [r3, #0]
 8005c48:	0689      	lsls	r1, r1, #26
 8005c4a:	d402      	bmi.n	8005c52 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	43b9      	bics	r1, r7
 8005c50:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005c52:	6853      	ldr	r3, [r2, #4]
 8005c54:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005c56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005c58:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01b      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8005c5e:	4798      	blx	r3
  return;
 8005c60:	e019      	b.n	8005c96 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005c62:	2702      	movs	r7, #2
 8005c64:	003c      	movs	r4, r7
 8005c66:	408c      	lsls	r4, r1
 8005c68:	4226      	tst	r6, r4
 8005c6a:	d015      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x70>
 8005c6c:	423d      	tst	r5, r7
 8005c6e:	d013      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	0689      	lsls	r1, r1, #26
 8005c74:	d406      	bmi.n	8005c84 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c76:	250a      	movs	r5, #10
 8005c78:	6819      	ldr	r1, [r3, #0]
 8005c7a:	43a9      	bics	r1, r5
 8005c7c:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8005c7e:	2101      	movs	r1, #1
 8005c80:	1d83      	adds	r3, r0, #6
 8005c82:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005c84:	6853      	ldr	r3, [r2, #4]
 8005c86:	431c      	orrs	r4, r3
 8005c88:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	1d43      	adds	r3, r0, #5
 8005c8e:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 8005c90:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d1e3      	bne.n	8005c5e <HAL_DMA_IRQHandler+0x36>
}
 8005c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005c98:	2408      	movs	r4, #8
 8005c9a:	0027      	movs	r7, r4
 8005c9c:	408f      	lsls	r7, r1
 8005c9e:	423e      	tst	r6, r7
 8005ca0:	d0f9      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x6e>
 8005ca2:	4225      	tst	r5, r4
 8005ca4:	d0f7      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ca6:	250e      	movs	r5, #14
 8005ca8:	681c      	ldr	r4, [r3, #0]
 8005caa:	43ac      	bics	r4, r5
 8005cac:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005cae:	2301      	movs	r3, #1
 8005cb0:	001d      	movs	r5, r3
 8005cb2:	408d      	lsls	r5, r1
 8005cb4:	0029      	movs	r1, r5
 8005cb6:	6854      	ldr	r4, [r2, #4]
 8005cb8:	4321      	orrs	r1, r4
 8005cba:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005cbc:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cbe:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005cc0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	1d43      	adds	r3, r0, #5
 8005cc6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8005cc8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005cca:	e7e2      	b.n	8005c92 <HAL_DMA_IRQHandler+0x6a>
 8005ccc:	40020000 	.word	0x40020000

08005cd0 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;
 8005cd0:	2000      	movs	r0, #0

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005cd2:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <HAL_FLASH_Unlock+0x18>)
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	4282      	cmp	r2, r0
 8005cd8:	da05      	bge.n	8005ce6 <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005cda:	4a04      	ldr	r2, [pc, #16]	@ (8005cec <HAL_FLASH_Unlock+0x1c>)
 8005cdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cde:	4a04      	ldr	r2, [pc, #16]	@ (8005cf0 <HAL_FLASH_Unlock+0x20>)
 8005ce0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005ce2:	6958      	ldr	r0, [r3, #20]
 8005ce4:	0fc0      	lsrs	r0, r0, #31
      status = HAL_ERROR;
    }
  }

  return status;
}
 8005ce6:	4770      	bx	lr
 8005ce8:	40022000 	.word	0x40022000
 8005cec:	45670123 	.word	0x45670123
 8005cf0:	cdef89ab 	.word	0xcdef89ab

08005cf4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	0004      	movs	r4, r0
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005cf8:	f7ff f8e8 	bl	8004ecc <HAL_GetTick>
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8005cfc:	2780      	movs	r7, #128	@ 0x80
  uint32_t tickstart = HAL_GetTick();
 8005cfe:	0006      	movs	r6, r0
  while ((FLASH->SR & error) != 0x00U)
 8005d00:	027f      	lsls	r7, r7, #9
 8005d02:	4d14      	ldr	r5, [pc, #80]	@ (8005d54 <FLASH_WaitForLastOperation+0x60>)
 8005d04:	692b      	ldr	r3, [r5, #16]
 8005d06:	423b      	tst	r3, r7
 8005d08:	d116      	bne.n	8005d38 <FLASH_WaitForLastOperation+0x44>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005d0a:	692a      	ldr	r2, [r5, #16]
 8005d0c:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <FLASH_WaitForLastOperation+0x64>)
 8005d0e:	0011      	movs	r1, r2

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8005d10:	4812      	ldr	r0, [pc, #72]	@ (8005d5c <FLASH_WaitForLastOperation+0x68>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005d12:	4019      	ands	r1, r3
  FLASH->SR = FLASH_SR_CLEAR;
 8005d14:	6128      	str	r0, [r5, #16]

  if (error != 0x00U)
 8005d16:	421a      	tst	r2, r3
 8005d18:	d117      	bne.n	8005d4a <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode = error;
    return HAL_ERROR;
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005d1a:	2780      	movs	r7, #128	@ 0x80
 8005d1c:	02ff      	lsls	r7, r7, #11
 8005d1e:	692b      	ldr	r3, [r5, #16]
 8005d20:	0018      	movs	r0, r3
 8005d22:	4038      	ands	r0, r7
 8005d24:	423b      	tst	r3, r7
 8005d26:	d00f      	beq.n	8005d48 <FLASH_WaitForLastOperation+0x54>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005d28:	1c63      	adds	r3, r4, #1
 8005d2a:	d0f8      	beq.n	8005d1e <FLASH_WaitForLastOperation+0x2a>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005d2c:	f7ff f8ce 	bl	8004ecc <HAL_GetTick>
 8005d30:	1b80      	subs	r0, r0, r6
 8005d32:	42a0      	cmp	r0, r4
 8005d34:	d3f3      	bcc.n	8005d1e <FLASH_WaitForLastOperation+0x2a>
 8005d36:	e006      	b.n	8005d46 <FLASH_WaitForLastOperation+0x52>
    if(Timeout != HAL_MAX_DELAY)
 8005d38:	1c63      	adds	r3, r4, #1
 8005d3a:	d0e3      	beq.n	8005d04 <FLASH_WaitForLastOperation+0x10>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005d3c:	f7ff f8c6 	bl	8004ecc <HAL_GetTick>
 8005d40:	1b80      	subs	r0, r0, r6
 8005d42:	42a0      	cmp	r0, r4
 8005d44:	d3dd      	bcc.n	8005d02 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8005d46:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 8005d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = error;
 8005d4a:	4b05      	ldr	r3, [pc, #20]	@ (8005d60 <FLASH_WaitForLastOperation+0x6c>)
    return HAL_ERROR;
 8005d4c:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 8005d4e:	6059      	str	r1, [r3, #4]
    return HAL_ERROR;
 8005d50:	e7fa      	b.n	8005d48 <FLASH_WaitForLastOperation+0x54>
 8005d52:	46c0      	nop			@ (mov r8, r8)
 8005d54:	40022000 	.word	0x40022000
 8005d58:	0000c3fa 	.word	0x0000c3fa
 8005d5c:	0000c3fb 	.word	0x0000c3fb
 8005d60:	20000d30 	.word	0x20000d30

08005d64 <HAL_FLASH_Program>:
{
 8005d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005d66:	4e17      	ldr	r6, [pc, #92]	@ (8005dc4 <HAL_FLASH_Program+0x60>)
{
 8005d68:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 8005d6a:	7833      	ldrb	r3, [r6, #0]
{
 8005d6c:	0004      	movs	r4, r0
 8005d6e:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 8005d70:	2002      	movs	r0, #2
{
 8005d72:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(&pFlash);
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d01e      	beq.n	8005db6 <HAL_FLASH_Program+0x52>
 8005d78:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d7a:	20fa      	movs	r0, #250	@ 0xfa
  __HAL_LOCK(&pFlash);
 8005d7c:	7033      	strb	r3, [r6, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d7e:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d80:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d82:	6073      	str	r3, [r6, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d84:	f7ff ffb6 	bl	8005cf4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d112      	bne.n	8005db2 <HAL_FLASH_Program+0x4e>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005d8c:	4f0e      	ldr	r7, [pc, #56]	@ (8005dc8 <HAL_FLASH_Program+0x64>)
 8005d8e:	2c01      	cmp	r4, #1
 8005d90:	d112      	bne.n	8005db8 <HAL_FLASH_Program+0x54>
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	4323      	orrs	r3, r4
 8005d96:	617b      	str	r3, [r7, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005d98:	9b00      	ldr	r3, [sp, #0]
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005da0:	9b01      	ldr	r3, [sp, #4]
 8005da2:	606b      	str	r3, [r5, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005da4:	20fa      	movs	r0, #250	@ 0xfa
 8005da6:	0080      	lsls	r0, r0, #2
 8005da8:	f7ff ffa4 	bl	8005cf4 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	43a3      	bics	r3, r4
 8005db0:	617b      	str	r3, [r7, #20]
  __HAL_UNLOCK(&pFlash);
 8005db2:	2300      	movs	r3, #0
 8005db4:	7033      	strb	r3, [r6, #0]
}
 8005db6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005db8:	0028      	movs	r0, r5
 8005dba:	9900      	ldr	r1, [sp, #0]
 8005dbc:	f002 fed0 	bl	8008b60 <__FLASH_Program_Fast_veneer>
 8005dc0:	e7f0      	b.n	8005da4 <HAL_FLASH_Program+0x40>
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	20000d30 	.word	0x20000d30
 8005dc8:	40022000 	.word	0x40022000

08005dcc <HAL_FLASH_Lock>:
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005dcc:	20fa      	movs	r0, #250	@ 0xfa
{
 8005dce:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005dd0:	0080      	lsls	r0, r0, #2
 8005dd2:	f7ff ff8f 	bl	8005cf4 <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005dd6:	2280      	movs	r2, #128	@ 0x80
 8005dd8:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <HAL_FLASH_Lock+0x20>)
 8005dda:	0612      	lsls	r2, r2, #24
 8005ddc:	6959      	ldr	r1, [r3, #20]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8005de2:	6958      	ldr	r0, [r3, #20]
 8005de4:	43c0      	mvns	r0, r0
  return status;
 8005de6:	0fc0      	lsrs	r0, r0, #31
}
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	40022000 	.word	0x40022000

08005df0 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005df0:	4a04      	ldr	r2, [pc, #16]	@ (8005e04 <FLASH_PageErase+0x14>)
 8005df2:	4805      	ldr	r0, [pc, #20]	@ (8005e08 <FLASH_PageErase+0x18>)
 8005df4:	6953      	ldr	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005df6:	00c9      	lsls	r1, r1, #3
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005df8:	4003      	ands	r3, r0
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005dfa:	4319      	orrs	r1, r3
 8005dfc:	4b03      	ldr	r3, [pc, #12]	@ (8005e0c <FLASH_PageErase+0x1c>)
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	6153      	str	r3, [r2, #20]
}
 8005e02:	4770      	bx	lr
 8005e04:	40022000 	.word	0x40022000
 8005e08:	ffffe007 	.word	0xffffe007
 8005e0c:	00010002 	.word	0x00010002

08005e10 <HAL_FLASHEx_Erase>:
{
 8005e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005e12:	4f21      	ldr	r7, [pc, #132]	@ (8005e98 <HAL_FLASHEx_Erase+0x88>)
{
 8005e14:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 8005e16:	783b      	ldrb	r3, [r7, #0]
 8005e18:	2402      	movs	r4, #2
{
 8005e1a:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d01a      	beq.n	8005e56 <HAL_FLASHEx_Erase+0x46>
 8005e20:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e22:	20fa      	movs	r0, #250	@ 0xfa
  __HAL_LOCK(&pFlash);
 8005e24:	703b      	strb	r3, [r7, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e26:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e28:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e2a:	607b      	str	r3, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e2c:	f7ff ff62 	bl	8005cf4 <FLASH_WaitForLastOperation>
 8005e30:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 8005e32:	d10e      	bne.n	8005e52 <HAL_FLASHEx_Erase+0x42>
    pEraseInit->Banks = FLASH_BANK_1;
 8005e34:	2304      	movs	r3, #4
 8005e36:	606b      	str	r3, [r5, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d10d      	bne.n	8005e5a <HAL_FLASHEx_Erase+0x4a>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e3e:	20fa      	movs	r0, #250	@ 0xfa
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8005e40:	4a16      	ldr	r2, [pc, #88]	@ (8005e9c <HAL_FLASHEx_Erase+0x8c>)
 8005e42:	4b17      	ldr	r3, [pc, #92]	@ (8005ea0 <HAL_FLASHEx_Erase+0x90>)
 8005e44:	6951      	ldr	r1, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e46:	0080      	lsls	r0, r0, #2
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e4c:	f7ff ff52 	bl	8005cf4 <FLASH_WaitForLastOperation>
 8005e50:	0004      	movs	r4, r0
  __HAL_UNLOCK(&pFlash);
 8005e52:	2300      	movs	r3, #0
 8005e54:	703b      	strb	r3, [r7, #0]
}
 8005e56:	0020      	movs	r0, r4
 8005e58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      *PageError = 0xFFFFFFFFU;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	9a01      	ldr	r2, [sp, #4]
 8005e5e:	425b      	negs	r3, r3
 8005e60:	6013      	str	r3, [r2, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005e62:	68ae      	ldr	r6, [r5, #8]
 8005e64:	68ab      	ldr	r3, [r5, #8]
 8005e66:	68ea      	ldr	r2, [r5, #12]
 8005e68:	189b      	adds	r3, r3, r2
 8005e6a:	42b3      	cmp	r3, r6
 8005e6c:	d90c      	bls.n	8005e88 <HAL_FLASHEx_Erase+0x78>
        FLASH_PageErase(pEraseInit->Banks, index);
 8005e6e:	6868      	ldr	r0, [r5, #4]
 8005e70:	0031      	movs	r1, r6
 8005e72:	f7ff ffbd 	bl	8005df0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e76:	20fa      	movs	r0, #250	@ 0xfa
 8005e78:	0080      	lsls	r0, r0, #2
 8005e7a:	f7ff ff3b 	bl	8005cf4 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_FLASHEx_Erase+0x84>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e82:	0004      	movs	r4, r0
          *PageError = index;
 8005e84:	9b01      	ldr	r3, [sp, #4]
 8005e86:	601e      	str	r6, [r3, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005e88:	2102      	movs	r1, #2
 8005e8a:	4a04      	ldr	r2, [pc, #16]	@ (8005e9c <HAL_FLASHEx_Erase+0x8c>)
 8005e8c:	6953      	ldr	r3, [r2, #20]
 8005e8e:	438b      	bics	r3, r1
 8005e90:	6153      	str	r3, [r2, #20]
 8005e92:	e7de      	b.n	8005e52 <HAL_FLASHEx_Erase+0x42>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005e94:	3601      	adds	r6, #1
 8005e96:	e7e5      	b.n	8005e64 <HAL_FLASHEx_Erase+0x54>
 8005e98:	20000d30 	.word	0x20000d30
 8005e9c:	40022000 	.word	0x40022000
 8005ea0:	00010004 	.word	0x00010004

08005ea4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8005ea4:	2300      	movs	r3, #0
{
 8005ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ea8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eaa:	680a      	ldr	r2, [r1, #0]
 8005eac:	0014      	movs	r4, r2
 8005eae:	40dc      	lsrs	r4, r3
 8005eb0:	d101      	bne.n	8005eb6 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8005eb2:	b005      	add	sp, #20
 8005eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005eb6:	2501      	movs	r5, #1
 8005eb8:	0014      	movs	r4, r2
 8005eba:	409d      	lsls	r5, r3
 8005ebc:	402c      	ands	r4, r5
 8005ebe:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8005ec0:	422a      	tst	r2, r5
 8005ec2:	d100      	bne.n	8005ec6 <HAL_GPIO_Init+0x22>
 8005ec4:	e091      	b.n	8005fea <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ec6:	684a      	ldr	r2, [r1, #4]
 8005ec8:	005f      	lsls	r7, r3, #1
 8005eca:	4694      	mov	ip, r2
 8005ecc:	2203      	movs	r2, #3
 8005ece:	4664      	mov	r4, ip
 8005ed0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ed2:	2403      	movs	r4, #3
 8005ed4:	40bc      	lsls	r4, r7
 8005ed6:	43e4      	mvns	r4, r4
 8005ed8:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eda:	1e54      	subs	r4, r2, #1
 8005edc:	2c01      	cmp	r4, #1
 8005ede:	d82e      	bhi.n	8005f3e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8005ee0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ee2:	9c01      	ldr	r4, [sp, #4]
 8005ee4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ee6:	68cc      	ldr	r4, [r1, #12]
 8005ee8:	40bc      	lsls	r4, r7
 8005eea:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8005eec:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005eee:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ef0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ef2:	43ac      	bics	r4, r5
 8005ef4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ef6:	4664      	mov	r4, ip
 8005ef8:	0924      	lsrs	r4, r4, #4
 8005efa:	4034      	ands	r4, r6
 8005efc:	409c      	lsls	r4, r3
 8005efe:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8005f00:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8005f02:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005f04:	9c01      	ldr	r4, [sp, #4]
 8005f06:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f08:	688c      	ldr	r4, [r1, #8]
 8005f0a:	40bc      	lsls	r4, r7
 8005f0c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8005f0e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f10:	2a02      	cmp	r2, #2
 8005f12:	d116      	bne.n	8005f42 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f14:	2507      	movs	r5, #7
 8005f16:	260f      	movs	r6, #15
 8005f18:	401d      	ands	r5, r3
 8005f1a:	00ad      	lsls	r5, r5, #2
 8005f1c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8005f1e:	08dc      	lsrs	r4, r3, #3
 8005f20:	00a4      	lsls	r4, r4, #2
 8005f22:	1904      	adds	r4, r0, r4
 8005f24:	9402      	str	r4, [sp, #8]
 8005f26:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f28:	9603      	str	r6, [sp, #12]
 8005f2a:	0026      	movs	r6, r4
 8005f2c:	9c03      	ldr	r4, [sp, #12]
 8005f2e:	43a6      	bics	r6, r4
 8005f30:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f32:	690e      	ldr	r6, [r1, #16]
 8005f34:	40ae      	lsls	r6, r5
 8005f36:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8005f38:	9c02      	ldr	r4, [sp, #8]
 8005f3a:	6226      	str	r6, [r4, #32]
 8005f3c:	e001      	b.n	8005f42 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f3e:	2a03      	cmp	r2, #3
 8005f40:	d1df      	bne.n	8005f02 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f42:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8005f44:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f46:	9d01      	ldr	r5, [sp, #4]
 8005f48:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f4a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f4c:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8005f4e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f50:	4662      	mov	r2, ip
 8005f52:	02a4      	lsls	r4, r4, #10
 8005f54:	4222      	tst	r2, r4
 8005f56:	d048      	beq.n	8005fea <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 8005f58:	4a25      	ldr	r2, [pc, #148]	@ (8005ff0 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005f5a:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8005f5c:	089c      	lsrs	r4, r3, #2
 8005f5e:	00a4      	lsls	r4, r4, #2
 8005f60:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005f62:	220f      	movs	r2, #15
 8005f64:	401d      	ands	r5, r3
 8005f66:	00ed      	lsls	r5, r5, #3
 8005f68:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005f6a:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8005f6c:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005f6e:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005f70:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005f72:	2200      	movs	r2, #0
 8005f74:	42b8      	cmp	r0, r7
 8005f76:	d00c      	beq.n	8005f92 <HAL_GPIO_Init+0xee>
 8005f78:	4f1e      	ldr	r7, [pc, #120]	@ (8005ff4 <HAL_GPIO_Init+0x150>)
 8005f7a:	3201      	adds	r2, #1
 8005f7c:	42b8      	cmp	r0, r7
 8005f7e:	d008      	beq.n	8005f92 <HAL_GPIO_Init+0xee>
 8005f80:	4f1d      	ldr	r7, [pc, #116]	@ (8005ff8 <HAL_GPIO_Init+0x154>)
 8005f82:	3201      	adds	r2, #1
 8005f84:	42b8      	cmp	r0, r7
 8005f86:	d004      	beq.n	8005f92 <HAL_GPIO_Init+0xee>
 8005f88:	4f1c      	ldr	r7, [pc, #112]	@ (8005ffc <HAL_GPIO_Init+0x158>)
 8005f8a:	3203      	adds	r2, #3
 8005f8c:	42b8      	cmp	r0, r7
 8005f8e:	d100      	bne.n	8005f92 <HAL_GPIO_Init+0xee>
 8005f90:	3a02      	subs	r2, #2
 8005f92:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f94:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005f96:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8005f98:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 8005f9a:	4c15      	ldr	r4, [pc, #84]	@ (8005ff0 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8005f9c:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 8005f9e:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8005fa0:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8005fa2:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8005fa4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005fa6:	02ff      	lsls	r7, r7, #11
 8005fa8:	d401      	bmi.n	8005fae <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 8005faa:	0035      	movs	r5, r6
 8005fac:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005fae:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8005fb0:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8005fb2:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8005fb4:	9d00      	ldr	r5, [sp, #0]
 8005fb6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005fb8:	02bf      	lsls	r7, r7, #10
 8005fba:	d401      	bmi.n	8005fc0 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8005fbc:	0035      	movs	r5, r6
 8005fbe:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fc0:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8005fc2:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8005fc4:	4c0e      	ldr	r4, [pc, #56]	@ (8006000 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8005fc6:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8005fc8:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8005fca:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fcc:	03bf      	lsls	r7, r7, #14
 8005fce:	d401      	bmi.n	8005fd4 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8005fd0:	0035      	movs	r5, r6
 8005fd2:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fd4:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8005fd6:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 8005fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8006004 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 8005fda:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8005fdc:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8005fde:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fe0:	03ff      	lsls	r7, r7, #15
 8005fe2:	d401      	bmi.n	8005fe8 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8005fe4:	4015      	ands	r5, r2
 8005fe6:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8005fe8:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 8005fea:	3301      	adds	r3, #1
 8005fec:	e75d      	b.n	8005eaa <HAL_GPIO_Init+0x6>
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	40021800 	.word	0x40021800
 8005ff4:	50000400 	.word	0x50000400
 8005ff8:	50000800 	.word	0x50000800
 8005ffc:	50000c00 	.word	0x50000c00
 8006000:	40021808 	.word	0x40021808
 8006004:	40021804 	.word	0x40021804

08006008 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006008:	6900      	ldr	r0, [r0, #16]
 800600a:	4008      	ands	r0, r1
 800600c:	1e43      	subs	r3, r0, #1
 800600e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8006010:	b2c0      	uxtb	r0, r0
}
 8006012:	4770      	bx	lr

08006014 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006014:	2a00      	cmp	r2, #0
 8006016:	d001      	beq.n	800601c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006018:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800601a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800601c:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800601e:	e7fc      	b.n	800601a <HAL_GPIO_WritePin+0x6>

08006020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006020:	b570      	push	{r4, r5, r6, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006022:	4d08      	ldr	r5, [pc, #32]	@ (8006044 <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 8006024:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006026:	68eb      	ldr	r3, [r5, #12]
 8006028:	4218      	tst	r0, r3
 800602a:	d002      	beq.n	8006032 <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800602c:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800602e:	f7fd f859 	bl	80030e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006032:	692b      	ldr	r3, [r5, #16]
 8006034:	4223      	tst	r3, r4
 8006036:	d003      	beq.n	8006040 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006038:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800603a:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800603c:	f7fd f828 	bl	8003090 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006040:	bd70      	pop	{r4, r5, r6, pc}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	40021800 	.word	0x40021800

08006048 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006048:	4b0c      	ldr	r3, [pc, #48]	@ (800607c <LPTIM_WaitForFlag+0x34>)
{
 800604a:	b570      	push	{r4, r5, r6, lr}
 800604c:	0005      	movs	r5, r0
 800604e:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	490b      	ldr	r1, [pc, #44]	@ (8006080 <LPTIM_WaitForFlag+0x38>)
 8006054:	f7fa f86c 	bl	8000130 <__udivsi3>
 8006058:	23fa      	movs	r3, #250	@ 0xfa
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800605e:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8006060:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 8006062:	2503      	movs	r5, #3
    count--;
 8006064:	3b01      	subs	r3, #1
    if (count == 0UL)
 8006066:	2b00      	cmp	r3, #0
 8006068:	d100      	bne.n	800606c <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 800606a:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800606c:	680a      	ldr	r2, [r1, #0]
 800606e:	4022      	ands	r2, r4
 8006070:	42a2      	cmp	r2, r4
 8006072:	d001      	beq.n	8006078 <LPTIM_WaitForFlag+0x30>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f5      	bne.n	8006064 <LPTIM_WaitForFlag+0x1c>

  return result;
}
 8006078:	bd70      	pop	{r4, r5, r6, pc}
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	20000430 	.word	0x20000430
 8006080:	00004e20 	.word	0x00004e20

08006084 <HAL_LPTIM_DirectionDownCallback>:
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
 8006084:	4770      	bx	lr

08006086 <HAL_LPTIM_CompareMatchCallback>:
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
 8006086:	4770      	bx	lr

08006088 <HAL_LPTIM_AutoReloadMatchCallback>:
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
 8006088:	4770      	bx	lr

0800608a <HAL_LPTIM_TriggerCallback>:
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
 800608a:	4770      	bx	lr

0800608c <HAL_LPTIM_CompareWriteCallback>:
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800608c:	4770      	bx	lr

0800608e <HAL_LPTIM_AutoReloadWriteCallback>:
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800608e:	4770      	bx	lr

08006090 <HAL_LPTIM_DirectionUpCallback>:
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
 8006090:	4770      	bx	lr
	...

08006094 <HAL_LPTIM_Init>:
{
 8006094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006096:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006098:	2001      	movs	r0, #1
  if (hlptim == NULL)
 800609a:	2c00      	cmp	r4, #0
 800609c:	d05e      	beq.n	800615c <HAL_LPTIM_Init+0xc8>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800609e:	0025      	movs	r5, r4
 80060a0:	3536      	adds	r5, #54	@ 0x36
 80060a2:	782b      	ldrb	r3, [r5, #0]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d118      	bne.n	80060dc <HAL_LPTIM_Init+0x48>
    hlptim->Lock = HAL_UNLOCKED;
 80060aa:	0023      	movs	r3, r4
 80060ac:	3335      	adds	r3, #53	@ 0x35
 80060ae:	701a      	strb	r2, [r3, #0]
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 80060b0:	4b2e      	ldr	r3, [pc, #184]	@ (800616c <HAL_LPTIM_Init+0xd8>)
 80060b2:	6423      	str	r3, [r4, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 80060b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006170 <HAL_LPTIM_Init+0xdc>)
 80060b6:	6463      	str	r3, [r4, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 80060b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006174 <HAL_LPTIM_Init+0xe0>)
 80060ba:	64a3      	str	r3, [r4, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 80060bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006178 <HAL_LPTIM_Init+0xe4>)
 80060be:	64e3      	str	r3, [r4, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 80060c0:	4b2e      	ldr	r3, [pc, #184]	@ (800617c <HAL_LPTIM_Init+0xe8>)
 80060c2:	6523      	str	r3, [r4, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 80060c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006180 <HAL_LPTIM_Init+0xec>)
 80060c6:	6563      	str	r3, [r4, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 80060c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006184 <HAL_LPTIM_Init+0xf0>)
 80060ca:	65a3      	str	r3, [r4, #88]	@ 0x58
    if (hlptim->MspInitCallback == NULL)
 80060cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_LPTIM_Init+0x42>
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 80060d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006188 <HAL_LPTIM_Init+0xf4>)
 80060d4:	63a3      	str	r3, [r4, #56]	@ 0x38
    hlptim->MspInitCallback(hlptim);
 80060d6:	0020      	movs	r0, r4
 80060d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80060da:	4798      	blx	r3
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80060dc:	2302      	movs	r3, #2
 80060de:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 80060e0:	6821      	ldr	r1, [r4, #0]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80060e2:	6860      	ldr	r0, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 80060e4:	68cb      	ldr	r3, [r1, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80060e6:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80060e8:	2801      	cmp	r0, #1
 80060ea:	d003      	beq.n	80060f4 <HAL_LPTIM_Init+0x60>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80060ec:	2280      	movs	r2, #128	@ 0x80
 80060ee:	0412      	lsls	r2, r2, #16
 80060f0:	4296      	cmp	r6, r2
 80060f2:	d101      	bne.n	80060f8 <HAL_LPTIM_Init+0x64>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80060f4:	221e      	movs	r2, #30
 80060f6:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80060f8:	6962      	ldr	r2, [r4, #20]
 80060fa:	4f24      	ldr	r7, [pc, #144]	@ (800618c <HAL_LPTIM_Init+0xf8>)
 80060fc:	42ba      	cmp	r2, r7
 80060fe:	d001      	beq.n	8006104 <HAL_LPTIM_Init+0x70>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006100:	4f23      	ldr	r7, [pc, #140]	@ (8006190 <HAL_LPTIM_Init+0xfc>)
 8006102:	403b      	ands	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006104:	4f23      	ldr	r7, [pc, #140]	@ (8006194 <HAL_LPTIM_Init+0x100>)
 8006106:	401f      	ands	r7, r3
              hlptim->Init.UpdateMode      |
 8006108:	68a3      	ldr	r3, [r4, #8]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800610a:	9701      	str	r7, [sp, #4]
              hlptim->Init.UpdateMode      |
 800610c:	469c      	mov	ip, r3
 800610e:	0003      	movs	r3, r0
 8006110:	4667      	mov	r7, ip
 8006112:	4333      	orrs	r3, r6
 8006114:	431f      	orrs	r7, r3
 8006116:	6a23      	ldr	r3, [r4, #32]
 8006118:	433b      	orrs	r3, r7
 800611a:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800611c:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800611e:	9f01      	ldr	r7, [sp, #4]
 8006120:	433b      	orrs	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8006122:	2800      	cmp	r0, #0
 8006124:	d11b      	bne.n	800615e <HAL_LPTIM_Init+0xca>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006126:	69e0      	ldr	r0, [r4, #28]
 8006128:	6927      	ldr	r7, [r4, #16]
 800612a:	4338      	orrs	r0, r7
 800612c:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800612e:	2080      	movs	r0, #128	@ 0x80
 8006130:	0400      	lsls	r0, r0, #16
 8006132:	4286      	cmp	r6, r0
 8006134:	d015      	beq.n	8006162 <HAL_LPTIM_Init+0xce>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006136:	4815      	ldr	r0, [pc, #84]	@ (800618c <HAL_LPTIM_Init+0xf8>)
 8006138:	4282      	cmp	r2, r0
 800613a:	d004      	beq.n	8006146 <HAL_LPTIM_Init+0xb2>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800613c:	69a0      	ldr	r0, [r4, #24]
 800613e:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 8006140:	69e0      	ldr	r0, [r4, #28]
 8006142:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006144:	4313      	orrs	r3, r2
  if (hlptim->Instance == LPTIM1)
 8006146:	4a14      	ldr	r2, [pc, #80]	@ (8006198 <HAL_LPTIM_Init+0x104>)
  hlptim->Instance->CFGR = tmpcfgr;
 8006148:	60cb      	str	r3, [r1, #12]
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800614a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if (hlptim->Instance == LPTIM1)
 800614c:	4291      	cmp	r1, r2
 800614e:	d101      	bne.n	8006154 <HAL_LPTIM_Init+0xc0>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8006150:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006152:	4313      	orrs	r3, r2
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8006154:	624b      	str	r3, [r1, #36]	@ 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006156:	2301      	movs	r3, #1
  return HAL_OK;
 8006158:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800615a:	702b      	strb	r3, [r5, #0]
}
 800615c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800615e:	2801      	cmp	r0, #1
 8006160:	d1e5      	bne.n	800612e <HAL_LPTIM_Init+0x9a>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006162:	68e0      	ldr	r0, [r4, #12]
 8006164:	6926      	ldr	r6, [r4, #16]
 8006166:	4330      	orrs	r0, r6
 8006168:	4303      	orrs	r3, r0
 800616a:	e7e4      	b.n	8006136 <HAL_LPTIM_Init+0xa2>
 800616c:	08006087 	.word	0x08006087
 8006170:	08006089 	.word	0x08006089
 8006174:	0800608b 	.word	0x0800608b
 8006178:	0800608d 	.word	0x0800608d
 800617c:	0800608f 	.word	0x0800608f
 8006180:	08006091 	.word	0x08006091
 8006184:	08006085 	.word	0x08006085
 8006188:	08004469 	.word	0x08004469
 800618c:	0000ffff 	.word	0x0000ffff
 8006190:	ffff1f3f 	.word	0xffff1f3f
 8006194:	ff19f1fe 	.word	0xff19f1fe
 8006198:	40007c00 	.word	0x40007c00

0800619c <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800619c:	2201      	movs	r2, #1
 800619e:	6803      	ldr	r3, [r0, #0]
{
 80061a0:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80061a2:	6819      	ldr	r1, [r3, #0]
{
 80061a4:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80061a6:	4211      	tst	r1, r2
 80061a8:	d005      	beq.n	80061b6 <HAL_LPTIM_IRQHandler+0x1a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80061aa:	6899      	ldr	r1, [r3, #8]
 80061ac:	4211      	tst	r1, r2
 80061ae:	d002      	beq.n	80061b6 <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80061b0:	605a      	str	r2, [r3, #4]
      hlptim->CompareMatchCallback(hlptim);
 80061b2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80061b4:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80061b6:	2202      	movs	r2, #2
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	6819      	ldr	r1, [r3, #0]
 80061bc:	4211      	tst	r1, r2
 80061be:	d006      	beq.n	80061ce <HAL_LPTIM_IRQHandler+0x32>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80061c0:	6899      	ldr	r1, [r3, #8]
 80061c2:	4211      	tst	r1, r2
 80061c4:	d003      	beq.n	80061ce <HAL_LPTIM_IRQHandler+0x32>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80061c6:	605a      	str	r2, [r3, #4]
      hlptim->AutoReloadMatchCallback(hlptim);
 80061c8:	0020      	movs	r0, r4
 80061ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80061cc:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80061ce:	2204      	movs	r2, #4
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	4211      	tst	r1, r2
 80061d6:	d006      	beq.n	80061e6 <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80061d8:	6899      	ldr	r1, [r3, #8]
 80061da:	4211      	tst	r1, r2
 80061dc:	d003      	beq.n	80061e6 <HAL_LPTIM_IRQHandler+0x4a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80061de:	605a      	str	r2, [r3, #4]
      hlptim->TriggerCallback(hlptim);
 80061e0:	0020      	movs	r0, r4
 80061e2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80061e4:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80061e6:	2208      	movs	r2, #8
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	6819      	ldr	r1, [r3, #0]
 80061ec:	4211      	tst	r1, r2
 80061ee:	d006      	beq.n	80061fe <HAL_LPTIM_IRQHandler+0x62>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80061f0:	6899      	ldr	r1, [r3, #8]
 80061f2:	4211      	tst	r1, r2
 80061f4:	d003      	beq.n	80061fe <HAL_LPTIM_IRQHandler+0x62>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80061f6:	605a      	str	r2, [r3, #4]
      hlptim->CompareWriteCallback(hlptim);
 80061f8:	0020      	movs	r0, r4
 80061fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80061fc:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80061fe:	2210      	movs	r2, #16
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	4211      	tst	r1, r2
 8006206:	d006      	beq.n	8006216 <HAL_LPTIM_IRQHandler+0x7a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8006208:	6899      	ldr	r1, [r3, #8]
 800620a:	4211      	tst	r1, r2
 800620c:	d003      	beq.n	8006216 <HAL_LPTIM_IRQHandler+0x7a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800620e:	605a      	str	r2, [r3, #4]
      hlptim->AutoReloadWriteCallback(hlptim);
 8006210:	0020      	movs	r0, r4
 8006212:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006214:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8006216:	2220      	movs	r2, #32
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	6819      	ldr	r1, [r3, #0]
 800621c:	4211      	tst	r1, r2
 800621e:	d006      	beq.n	800622e <HAL_LPTIM_IRQHandler+0x92>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006220:	6899      	ldr	r1, [r3, #8]
 8006222:	4211      	tst	r1, r2
 8006224:	d003      	beq.n	800622e <HAL_LPTIM_IRQHandler+0x92>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8006226:	605a      	str	r2, [r3, #4]
      hlptim->DirectionUpCallback(hlptim);
 8006228:	0020      	movs	r0, r4
 800622a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800622c:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800622e:	2240      	movs	r2, #64	@ 0x40
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	4211      	tst	r1, r2
 8006236:	d006      	beq.n	8006246 <HAL_LPTIM_IRQHandler+0xaa>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8006238:	6899      	ldr	r1, [r3, #8]
 800623a:	4211      	tst	r1, r2
 800623c:	d003      	beq.n	8006246 <HAL_LPTIM_IRQHandler+0xaa>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800623e:	605a      	str	r2, [r3, #4]
      hlptim->DirectionDownCallback(hlptim);
 8006240:	0020      	movs	r0, r4
 8006242:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006244:	4798      	blx	r3
}
 8006246:	bd10      	pop	{r4, pc}

08006248 <HAL_LPTIM_RegisterCallback>:
{
 8006248:	0003      	movs	r3, r0
 800624a:	b530      	push	{r4, r5, lr}
    return HAL_ERROR;
 800624c:	2001      	movs	r0, #1
  if (pCallback == NULL)
 800624e:	2a00      	cmp	r2, #0
 8006250:	d011      	beq.n	8006276 <HAL_LPTIM_RegisterCallback+0x2e>
  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8006252:	001c      	movs	r4, r3
 8006254:	3436      	adds	r4, #54	@ 0x36
 8006256:	7825      	ldrb	r5, [r4, #0]
 8006258:	b2e8      	uxtb	r0, r5
 800625a:	2d01      	cmp	r5, #1
 800625c:	d11a      	bne.n	8006294 <HAL_LPTIM_RegisterCallback+0x4c>
    switch (CallbackID)
 800625e:	2908      	cmp	r1, #8
 8006260:	d809      	bhi.n	8006276 <HAL_LPTIM_RegisterCallback+0x2e>
 8006262:	0008      	movs	r0, r1
 8006264:	f7f9 ff5a 	bl	800011c <__gnu_thumb1_case_uqi>
 8006268:	0a081e05 	.word	0x0a081e05
 800626c:	12100e0c 	.word	0x12100e0c
 8006270:	14          	.byte	0x14
 8006271:	00          	.byte	0x00
        hlptim->MspInitCallback = pCallback;
 8006272:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8006274:	2000      	movs	r0, #0
}
 8006276:	bd30      	pop	{r4, r5, pc}
        hlptim->CompareMatchCallback = pCallback;
 8006278:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800627a:	e7fb      	b.n	8006274 <HAL_LPTIM_RegisterCallback+0x2c>
        hlptim->AutoReloadMatchCallback = pCallback;
 800627c:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 800627e:	e7f9      	b.n	8006274 <HAL_LPTIM_RegisterCallback+0x2c>
        hlptim->TriggerCallback = pCallback;
 8006280:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8006282:	e7f7      	b.n	8006274 <HAL_LPTIM_RegisterCallback+0x2c>
        hlptim->CompareWriteCallback = pCallback;
 8006284:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006286:	e7f5      	b.n	8006274 <HAL_LPTIM_RegisterCallback+0x2c>
        hlptim->AutoReloadWriteCallback = pCallback;
 8006288:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800628a:	e7f3      	b.n	8006274 <HAL_LPTIM_RegisterCallback+0x2c>
        hlptim->DirectionUpCallback = pCallback;
 800628c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800628e:	e7f1      	b.n	8006274 <HAL_LPTIM_RegisterCallback+0x2c>
        hlptim->DirectionDownCallback = pCallback;
 8006290:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006292:	e7ef      	b.n	8006274 <HAL_LPTIM_RegisterCallback+0x2c>
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006294:	7824      	ldrb	r4, [r4, #0]
    return HAL_ERROR;
 8006296:	2001      	movs	r0, #1
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006298:	2c00      	cmp	r4, #0
 800629a:	d1ec      	bne.n	8006276 <HAL_LPTIM_RegisterCallback+0x2e>
    switch (CallbackID)
 800629c:	2900      	cmp	r1, #0
 800629e:	d0e8      	beq.n	8006272 <HAL_LPTIM_RegisterCallback+0x2a>
 80062a0:	4281      	cmp	r1, r0
 80062a2:	d1e8      	bne.n	8006276 <HAL_LPTIM_RegisterCallback+0x2e>
        hlptim->MspDeInitCallback = pCallback;
 80062a4:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80062a6:	e7e5      	b.n	8006274 <HAL_LPTIM_RegisterCallback+0x2c>

080062a8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80062a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062aa:	0005      	movs	r5, r0
 80062ac:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ae:	f3ef 8310 	mrs	r3, PRIMASK
 80062b2:	9305      	str	r3, [sp, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b4:	2301      	movs	r3, #1
 80062b6:	f383 8810 	msr	PRIMASK, r3
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80062ba:	4f46      	ldr	r7, [pc, #280]	@ (80063d4 <LPTIM_Disable+0x12c>)
 80062bc:	6804      	ldr	r4, [r0, #0]
 80062be:	42bc      	cmp	r4, r7
 80062c0:	d008      	beq.n	80062d4 <LPTIM_Disable+0x2c>
 80062c2:	4b45      	ldr	r3, [pc, #276]	@ (80063d8 <LPTIM_Disable+0x130>)
 80062c4:	2600      	movs	r6, #0
 80062c6:	429c      	cmp	r4, r3
 80062c8:	d109      	bne.n	80062de <LPTIM_Disable+0x36>
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
      break;
#if defined(LPTIM2)
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80062ca:	4b44      	ldr	r3, [pc, #272]	@ (80063dc <LPTIM_Disable+0x134>)
 80062cc:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 80062ce:	23c0      	movs	r3, #192	@ 0xc0
 80062d0:	039b      	lsls	r3, r3, #14
 80062d2:	e003      	b.n	80062dc <LPTIM_Disable+0x34>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80062d4:	4b41      	ldr	r3, [pc, #260]	@ (80063dc <LPTIM_Disable+0x134>)
 80062d6:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 80062d8:	23c0      	movs	r3, #192	@ 0xc0
 80062da:	031b      	lsls	r3, r3, #12
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80062dc:	401e      	ands	r6, r3
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	9302      	str	r3, [sp, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 80062e2:	68e3      	ldr	r3, [r4, #12]
  tmpCMP = hlptim->Instance->CMP;
 80062e4:	6962      	ldr	r2, [r4, #20]
  tmpCFGR = hlptim->Instance->CFGR;
 80062e6:	9303      	str	r3, [sp, #12]
  tmpARR = hlptim->Instance->ARR;
 80062e8:	69a3      	ldr	r3, [r4, #24]
 80062ea:	9301      	str	r3, [sp, #4]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80062ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062ee:	9304      	str	r3, [sp, #16]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80062f0:	42bc      	cmp	r4, r7
 80062f2:	d043      	beq.n	800637c <LPTIM_Disable+0xd4>
 80062f4:	4b38      	ldr	r3, [pc, #224]	@ (80063d8 <LPTIM_Disable+0x130>)
 80062f6:	429c      	cmp	r4, r3
 80062f8:	d04b      	beq.n	8006392 <LPTIM_Disable+0xea>
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80062fa:	9b01      	ldr	r3, [sp, #4]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	d02e      	beq.n	800635e <LPTIM_Disable+0xb6>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8006300:	42bc      	cmp	r4, r7
 8006302:	d051      	beq.n	80063a8 <LPTIM_Disable+0x100>
 8006304:	4b34      	ldr	r3, [pc, #208]	@ (80063d8 <LPTIM_Disable+0x130>)
 8006306:	429c      	cmp	r4, r3
 8006308:	d054      	beq.n	80063b4 <LPTIM_Disable+0x10c>
#endif /* LPTIM2 */
      default:
        break;
    }

    if (tmpCMP != 0UL)
 800630a:	2a00      	cmp	r2, #0
 800630c:	d00f      	beq.n	800632e <LPTIM_Disable+0x86>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800630e:	2301      	movs	r3, #1
 8006310:	6921      	ldr	r1, [r4, #16]
      hlptim->Instance->CMP = tmpCMP;

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006312:	0028      	movs	r0, r5
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006314:	430b      	orrs	r3, r1
 8006316:	6123      	str	r3, [r4, #16]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006318:	2108      	movs	r1, #8
      hlptim->Instance->CMP = tmpCMP;
 800631a:	6162      	str	r2, [r4, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800631c:	f7ff fe94 	bl	8006048 <LPTIM_WaitForFlag>
 8006320:	2803      	cmp	r0, #3
 8006322:	d102      	bne.n	800632a <LPTIM_Disable+0x82>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006324:	002b      	movs	r3, r5
 8006326:	3336      	adds	r3, #54	@ 0x36
 8006328:	7018      	strb	r0, [r3, #0]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800632a:	2308      	movs	r3, #8
 800632c:	6063      	str	r3, [r4, #4]
    }

    if (tmpARR != 0UL)
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00f      	beq.n	8006354 <LPTIM_Disable+0xac>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006334:	2301      	movs	r3, #1
 8006336:	6922      	ldr	r2, [r4, #16]
      hlptim->Instance->ARR = tmpARR;

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006338:	2110      	movs	r1, #16
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800633a:	4313      	orrs	r3, r2
 800633c:	6123      	str	r3, [r4, #16]
      hlptim->Instance->ARR = tmpARR;
 800633e:	9b01      	ldr	r3, [sp, #4]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006340:	0028      	movs	r0, r5
      hlptim->Instance->ARR = tmpARR;
 8006342:	61a3      	str	r3, [r4, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006344:	f7ff fe80 	bl	8006048 <LPTIM_WaitForFlag>
 8006348:	2803      	cmp	r0, #3
 800634a:	d101      	bne.n	8006350 <LPTIM_Disable+0xa8>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800634c:	3536      	adds	r5, #54	@ 0x36
 800634e:	7028      	strb	r0, [r5, #0]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006350:	2310      	movs	r3, #16
 8006352:	6063      	str	r3, [r4, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8006354:	42bc      	cmp	r4, r7
 8006356:	d031      	beq.n	80063bc <LPTIM_Disable+0x114>
 8006358:	4b1f      	ldr	r3, [pc, #124]	@ (80063d8 <LPTIM_Disable+0x130>)
 800635a:	429c      	cmp	r4, r3
 800635c:	d035      	beq.n	80063ca <LPTIM_Disable+0x122>
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800635e:	2201      	movs	r2, #1
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	4393      	bics	r3, r2
 8006364:	6123      	str	r3, [r4, #16]
  hlptim->Instance->IER = tmpIER;
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	60a3      	str	r3, [r4, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	60e3      	str	r3, [r4, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	6263      	str	r3, [r4, #36]	@ 0x24
 8006372:	9b05      	ldr	r3, [sp, #20]
 8006374:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006378:	b007      	add	sp, #28
 800637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800637c:	2380      	movs	r3, #128	@ 0x80
 800637e:	4917      	ldr	r1, [pc, #92]	@ (80063dc <LPTIM_Disable+0x134>)
 8006380:	061b      	lsls	r3, r3, #24
 8006382:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8006384:	4303      	orrs	r3, r0
 8006386:	62cb      	str	r3, [r1, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006388:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	62cb      	str	r3, [r1, #44]	@ 0x2c
      break;
 8006390:	e7b3      	b.n	80062fa <LPTIM_Disable+0x52>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006392:	2180      	movs	r1, #128	@ 0x80
 8006394:	4b11      	ldr	r3, [pc, #68]	@ (80063dc <LPTIM_Disable+0x134>)
 8006396:	05c9      	lsls	r1, r1, #23
 8006398:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800639a:	4301      	orrs	r1, r0
 800639c:	62d9      	str	r1, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800639e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063a0:	480f      	ldr	r0, [pc, #60]	@ (80063e0 <LPTIM_Disable+0x138>)
 80063a2:	4001      	ands	r1, r0
 80063a4:	62d9      	str	r1, [r3, #44]	@ 0x2c
      break;
 80063a6:	e7a8      	b.n	80062fa <LPTIM_Disable+0x52>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80063a8:	490c      	ldr	r1, [pc, #48]	@ (80063dc <LPTIM_Disable+0x134>)
 80063aa:	480e      	ldr	r0, [pc, #56]	@ (80063e4 <LPTIM_Disable+0x13c>)
 80063ac:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80063ae:	4003      	ands	r3, r0
 80063b0:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 80063b2:	e7aa      	b.n	800630a <LPTIM_Disable+0x62>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80063b4:	4909      	ldr	r1, [pc, #36]	@ (80063dc <LPTIM_Disable+0x134>)
 80063b6:	480c      	ldr	r0, [pc, #48]	@ (80063e8 <LPTIM_Disable+0x140>)
 80063b8:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80063ba:	e7f8      	b.n	80063ae <LPTIM_Disable+0x106>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80063bc:	4a07      	ldr	r2, [pc, #28]	@ (80063dc <LPTIM_Disable+0x134>)
 80063be:	4909      	ldr	r1, [pc, #36]	@ (80063e4 <LPTIM_Disable+0x13c>)
 80063c0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80063c2:	400b      	ands	r3, r1
 80063c4:	4333      	orrs	r3, r6
 80063c6:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80063c8:	e7c9      	b.n	800635e <LPTIM_Disable+0xb6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80063ca:	4a04      	ldr	r2, [pc, #16]	@ (80063dc <LPTIM_Disable+0x134>)
 80063cc:	4906      	ldr	r1, [pc, #24]	@ (80063e8 <LPTIM_Disable+0x140>)
 80063ce:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80063d0:	e7f7      	b.n	80063c2 <LPTIM_Disable+0x11a>
 80063d2:	46c0      	nop			@ (mov r8, r8)
 80063d4:	40007c00 	.word	0x40007c00
 80063d8:	40009400 	.word	0x40009400
 80063dc:	40021000 	.word	0x40021000
 80063e0:	bfffffff 	.word	0xbfffffff
 80063e4:	fff3ffff 	.word	0xfff3ffff
 80063e8:	ffcfffff 	.word	0xffcfffff

080063ec <HAL_LPTIM_SetOnce_Start_IT>:
{
 80063ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80063ee:	0007      	movs	r7, r0
 80063f0:	2302      	movs	r3, #2
 80063f2:	3736      	adds	r7, #54	@ 0x36
 80063f4:	703b      	strb	r3, [r7, #0]
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 80063f6:	2380      	movs	r3, #128	@ 0x80
 80063f8:	6805      	ldr	r5, [r0, #0]
{
 80063fa:	9201      	str	r2, [sp, #4]
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 80063fc:	68ea      	ldr	r2, [r5, #12]
 80063fe:	035b      	lsls	r3, r3, #13
 8006400:	4313      	orrs	r3, r2
  __HAL_LPTIM_ENABLE(hlptim);
 8006402:	2201      	movs	r2, #1
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8006404:	60eb      	str	r3, [r5, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 8006406:	692b      	ldr	r3, [r5, #16]
{
 8006408:	0004      	movs	r4, r0
  __HAL_LPTIM_ENABLE(hlptim);
 800640a:	4313      	orrs	r3, r2
 800640c:	612b      	str	r3, [r5, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800640e:	2310      	movs	r3, #16
 8006410:	606b      	str	r3, [r5, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8006412:	61a9      	str	r1, [r5, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006414:	0019      	movs	r1, r3
 8006416:	f7ff fe17 	bl	8006048 <LPTIM_WaitForFlag>
 800641a:	2803      	cmp	r0, #3
 800641c:	d101      	bne.n	8006422 <HAL_LPTIM_SetOnce_Start_IT+0x36>
    return HAL_TIMEOUT;
 800641e:	2003      	movs	r0, #3
}
 8006420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006422:	2608      	movs	r6, #8
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8006424:	9b01      	ldr	r3, [sp, #4]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006426:	606e      	str	r6, [r5, #4]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006428:	0031      	movs	r1, r6
 800642a:	0020      	movs	r0, r4
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800642c:	616b      	str	r3, [r5, #20]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800642e:	f7ff fe0b 	bl	8006048 <LPTIM_WaitForFlag>
 8006432:	2803      	cmp	r0, #3
 8006434:	d0f3      	beq.n	800641e <HAL_LPTIM_SetOnce_Start_IT+0x32>
  __HAL_LPTIM_DISABLE(hlptim);
 8006436:	0020      	movs	r0, r4
 8006438:	f7ff ff36 	bl	80062a8 <LPTIM_Disable>
  return hlptim->State;
 800643c:	783b      	ldrb	r3, [r7, #0]
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800643e:	2b03      	cmp	r3, #3
 8006440:	d0ed      	beq.n	800641e <HAL_LPTIM_SetOnce_Start_IT+0x32>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8006442:	2110      	movs	r1, #16
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	430a      	orrs	r2, r1
 800644a:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 800644c:	689a      	ldr	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800644e:	390e      	subs	r1, #14
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8006450:	4316      	orrs	r6, r2
 8006452:	609e      	str	r6, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	430a      	orrs	r2, r1
 8006458:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	3901      	subs	r1, #1
 800645e:	430a      	orrs	r2, r1
 8006460:	609a      	str	r2, [r3, #8]
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8006462:	6961      	ldr	r1, [r4, #20]
 8006464:	4a08      	ldr	r2, [pc, #32]	@ (8006488 <HAL_LPTIM_SetOnce_Start_IT+0x9c>)
 8006466:	4291      	cmp	r1, r2
 8006468:	d003      	beq.n	8006472 <HAL_LPTIM_SetOnce_Start_IT+0x86>
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800646a:	2204      	movs	r2, #4
 800646c:	6899      	ldr	r1, [r3, #8]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 8006472:	2101      	movs	r1, #1
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	430a      	orrs	r2, r1
 8006478:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_START_SINGLE(hlptim);
 800647a:	2202      	movs	r2, #2
 800647c:	6918      	ldr	r0, [r3, #16]
 800647e:	4302      	orrs	r2, r0
 8006480:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006482:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006484:	7039      	strb	r1, [r7, #0]
  return HAL_OK;
 8006486:	e7cb      	b.n	8006420 <HAL_LPTIM_SetOnce_Start_IT+0x34>
 8006488:	0000ffff 	.word	0x0000ffff

0800648c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800648c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800648e:	4c11      	ldr	r4, [pc, #68]	@ (80064d4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8006490:	4911      	ldr	r1, [pc, #68]	@ (80064d8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8006492:	6823      	ldr	r3, [r4, #0]
{
 8006494:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006496:	400b      	ands	r3, r1
 8006498:	4303      	orrs	r3, r0
 800649a:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800649c:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800649e:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d10e      	bne.n	80064c4 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80064a6:	4b0d      	ldr	r3, [pc, #52]	@ (80064dc <HAL_PWREx_ControlVoltageScaling+0x50>)
 80064a8:	490d      	ldr	r1, [pc, #52]	@ (80064e0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	2306      	movs	r3, #6
 80064ae:	4358      	muls	r0, r3
 80064b0:	f7f9 fe3e 	bl	8000130 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064b4:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80064b6:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064b8:	00d2      	lsls	r2, r2, #3
 80064ba:	6961      	ldr	r1, [r4, #20]
 80064bc:	0008      	movs	r0, r1
 80064be:	4010      	ands	r0, r2
 80064c0:	4211      	tst	r1, r2
 80064c2:	d100      	bne.n	80064c6 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80064c4:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80064ca:	3b01      	subs	r3, #1
 80064cc:	e7f5      	b.n	80064ba <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80064ce:	2003      	movs	r0, #3
 80064d0:	e7f8      	b.n	80064c4 <HAL_PWREx_ControlVoltageScaling+0x38>
 80064d2:	46c0      	nop			@ (mov r8, r8)
 80064d4:	40007000 	.word	0x40007000
 80064d8:	fffff9ff 	.word	0xfffff9ff
 80064dc:	20000430 	.word	0x20000430
 80064e0:	000f4240 	.word	0x000f4240

080064e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064e6:	0004      	movs	r4, r0
 80064e8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d102      	bne.n	80064f4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80064ee:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80064f0:	b005      	add	sp, #20
 80064f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	07db      	lsls	r3, r3, #31
 80064f8:	d410      	bmi.n	800651c <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	079b      	lsls	r3, r3, #30
 80064fe:	d45c      	bmi.n	80065ba <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	071b      	lsls	r3, r3, #28
 8006504:	d500      	bpl.n	8006508 <HAL_RCC_OscConfig+0x24>
 8006506:	e0c1      	b.n	800668c <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	075b      	lsls	r3, r3, #29
 800650c:	d500      	bpl.n	8006510 <HAL_RCC_OscConfig+0x2c>
 800650e:	e0f2      	b.n	80066f6 <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006510:	69e3      	ldr	r3, [r4, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d000      	beq.n	8006518 <HAL_RCC_OscConfig+0x34>
 8006516:	e179      	b.n	800680c <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 8006518:	2000      	movs	r0, #0
 800651a:	e7e9      	b.n	80064f0 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800651c:	2238      	movs	r2, #56	@ 0x38
 800651e:	4daf      	ldr	r5, [pc, #700]	@ (80067dc <HAL_RCC_OscConfig+0x2f8>)
 8006520:	68ab      	ldr	r3, [r5, #8]
 8006522:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006524:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006526:	2b10      	cmp	r3, #16
 8006528:	d109      	bne.n	800653e <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800652a:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800652c:	079b      	lsls	r3, r3, #30
 800652e:	d108      	bne.n	8006542 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	039b      	lsls	r3, r3, #14
 8006534:	d5e1      	bpl.n	80064fa <HAL_RCC_OscConfig+0x16>
 8006536:	6863      	ldr	r3, [r4, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1de      	bne.n	80064fa <HAL_RCC_OscConfig+0x16>
 800653c:	e7d7      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800653e:	2b08      	cmp	r3, #8
 8006540:	d0f6      	beq.n	8006530 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006542:	2280      	movs	r2, #128	@ 0x80
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	0252      	lsls	r2, r2, #9
 8006548:	4293      	cmp	r3, r2
 800654a:	d111      	bne.n	8006570 <HAL_RCC_OscConfig+0x8c>
 800654c:	682a      	ldr	r2, [r5, #0]
 800654e:	4313      	orrs	r3, r2
 8006550:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006552:	f7fe fcbb 	bl	8004ecc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006556:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8006558:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800655a:	02bf      	lsls	r7, r7, #10
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	423b      	tst	r3, r7
 8006560:	d1cb      	bne.n	80064fa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006562:	f7fe fcb3 	bl	8004ecc <HAL_GetTick>
 8006566:	1b80      	subs	r0, r0, r6
 8006568:	2864      	cmp	r0, #100	@ 0x64
 800656a:	d9f7      	bls.n	800655c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800656c:	2003      	movs	r0, #3
 800656e:	e7bf      	b.n	80064f0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006570:	21a0      	movs	r1, #160	@ 0xa0
 8006572:	02c9      	lsls	r1, r1, #11
 8006574:	428b      	cmp	r3, r1
 8006576:	d108      	bne.n	800658a <HAL_RCC_OscConfig+0xa6>
 8006578:	2380      	movs	r3, #128	@ 0x80
 800657a:	6829      	ldr	r1, [r5, #0]
 800657c:	02db      	lsls	r3, r3, #11
 800657e:	430b      	orrs	r3, r1
 8006580:	602b      	str	r3, [r5, #0]
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	431a      	orrs	r2, r3
 8006586:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006588:	e7e3      	b.n	8006552 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800658a:	682a      	ldr	r2, [r5, #0]
 800658c:	4994      	ldr	r1, [pc, #592]	@ (80067e0 <HAL_RCC_OscConfig+0x2fc>)
 800658e:	400a      	ands	r2, r1
 8006590:	602a      	str	r2, [r5, #0]
 8006592:	682a      	ldr	r2, [r5, #0]
 8006594:	4993      	ldr	r1, [pc, #588]	@ (80067e4 <HAL_RCC_OscConfig+0x300>)
 8006596:	400a      	ands	r2, r1
 8006598:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1d9      	bne.n	8006552 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800659e:	f7fe fc95 	bl	8004ecc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065a2:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80065a4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065a6:	02bf      	lsls	r7, r7, #10
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	423b      	tst	r3, r7
 80065ac:	d0a5      	beq.n	80064fa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ae:	f7fe fc8d 	bl	8004ecc <HAL_GetTick>
 80065b2:	1b80      	subs	r0, r0, r6
 80065b4:	2864      	cmp	r0, #100	@ 0x64
 80065b6:	d9f7      	bls.n	80065a8 <HAL_RCC_OscConfig+0xc4>
 80065b8:	e7d8      	b.n	800656c <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ba:	2238      	movs	r2, #56	@ 0x38
 80065bc:	4d87      	ldr	r5, [pc, #540]	@ (80067dc <HAL_RCC_OscConfig+0x2f8>)
 80065be:	68ab      	ldr	r3, [r5, #8]
 80065c0:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065c2:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d128      	bne.n	800661a <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065c8:	2103      	movs	r1, #3
 80065ca:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80065cc:	2a02      	cmp	r2, #2
 80065ce:	d126      	bne.n	800661e <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d0:	682a      	ldr	r2, [r5, #0]
 80065d2:	0552      	lsls	r2, r2, #21
 80065d4:	d503      	bpl.n	80065de <HAL_RCC_OscConfig+0xfa>
 80065d6:	68e2      	ldr	r2, [r4, #12]
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d100      	bne.n	80065de <HAL_RCC_OscConfig+0xfa>
 80065dc:	e787      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065de:	6869      	ldr	r1, [r5, #4]
 80065e0:	6962      	ldr	r2, [r4, #20]
 80065e2:	4881      	ldr	r0, [pc, #516]	@ (80067e8 <HAL_RCC_OscConfig+0x304>)
 80065e4:	0212      	lsls	r2, r2, #8
 80065e6:	4001      	ands	r1, r0
 80065e8:	430a      	orrs	r2, r1
 80065ea:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10c      	bne.n	800660a <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	4a7e      	ldr	r2, [pc, #504]	@ (80067ec <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80065f4:	497e      	ldr	r1, [pc, #504]	@ (80067f0 <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80065f6:	4013      	ands	r3, r2
 80065f8:	6922      	ldr	r2, [r4, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80065fe:	682b      	ldr	r3, [r5, #0]
 8006600:	4a7c      	ldr	r2, [pc, #496]	@ (80067f4 <HAL_RCC_OscConfig+0x310>)
 8006602:	049b      	lsls	r3, r3, #18
 8006604:	0f5b      	lsrs	r3, r3, #29
 8006606:	40da      	lsrs	r2, r3
 8006608:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800660a:	4b7b      	ldr	r3, [pc, #492]	@ (80067f8 <HAL_RCC_OscConfig+0x314>)
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	f7fe fc15 	bl	8004e3c <HAL_InitTick>
 8006612:	2800      	cmp	r0, #0
 8006614:	d100      	bne.n	8006618 <HAL_RCC_OscConfig+0x134>
 8006616:	e773      	b.n	8006500 <HAL_RCC_OscConfig+0x1c>
 8006618:	e769      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0d8      	beq.n	80065d0 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d020      	beq.n	8006666 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	4a71      	ldr	r2, [pc, #452]	@ (80067ec <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006628:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800662a:	4013      	ands	r3, r2
 800662c:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800662e:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006630:	4313      	orrs	r3, r2
 8006632:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	682a      	ldr	r2, [r5, #0]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	4313      	orrs	r3, r2
 800663c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800663e:	f7fe fc45 	bl	8004ecc <HAL_GetTick>
 8006642:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	423b      	tst	r3, r7
 8006648:	d007      	beq.n	800665a <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664a:	686a      	ldr	r2, [r5, #4]
 800664c:	6963      	ldr	r3, [r4, #20]
 800664e:	4966      	ldr	r1, [pc, #408]	@ (80067e8 <HAL_RCC_OscConfig+0x304>)
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	400a      	ands	r2, r1
 8006654:	4313      	orrs	r3, r2
 8006656:	606b      	str	r3, [r5, #4]
 8006658:	e752      	b.n	8006500 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800665a:	f7fe fc37 	bl	8004ecc <HAL_GetTick>
 800665e:	1b80      	subs	r0, r0, r6
 8006660:	2802      	cmp	r0, #2
 8006662:	d9ef      	bls.n	8006644 <HAL_RCC_OscConfig+0x160>
 8006664:	e782      	b.n	800656c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	4a64      	ldr	r2, [pc, #400]	@ (80067fc <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800666a:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 800666c:	4013      	ands	r3, r2
 800666e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006670:	f7fe fc2c 	bl	8004ecc <HAL_GetTick>
 8006674:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006676:	00ff      	lsls	r7, r7, #3
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	423b      	tst	r3, r7
 800667c:	d100      	bne.n	8006680 <HAL_RCC_OscConfig+0x19c>
 800667e:	e73f      	b.n	8006500 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006680:	f7fe fc24 	bl	8004ecc <HAL_GetTick>
 8006684:	1b80      	subs	r0, r0, r6
 8006686:	2802      	cmp	r0, #2
 8006688:	d9f6      	bls.n	8006678 <HAL_RCC_OscConfig+0x194>
 800668a:	e76f      	b.n	800656c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800668c:	2238      	movs	r2, #56	@ 0x38
 800668e:	4d53      	ldr	r5, [pc, #332]	@ (80067dc <HAL_RCC_OscConfig+0x2f8>)
 8006690:	68ab      	ldr	r3, [r5, #8]
 8006692:	4013      	ands	r3, r2
 8006694:	2b18      	cmp	r3, #24
 8006696:	d108      	bne.n	80066aa <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006698:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800669a:	079b      	lsls	r3, r3, #30
 800669c:	d400      	bmi.n	80066a0 <HAL_RCC_OscConfig+0x1bc>
 800669e:	e733      	b.n	8006508 <HAL_RCC_OscConfig+0x24>
 80066a0:	69a3      	ldr	r3, [r4, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d000      	beq.n	80066a8 <HAL_RCC_OscConfig+0x1c4>
 80066a6:	e72f      	b.n	8006508 <HAL_RCC_OscConfig+0x24>
 80066a8:	e721      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066aa:	69a2      	ldr	r2, [r4, #24]
 80066ac:	2301      	movs	r3, #1
 80066ae:	2a00      	cmp	r2, #0
 80066b0:	d010      	beq.n	80066d4 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 80066b2:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066b4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80066b6:	4313      	orrs	r3, r2
 80066b8:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80066ba:	f7fe fc07 	bl	8004ecc <HAL_GetTick>
 80066be:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066c0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80066c2:	423b      	tst	r3, r7
 80066c4:	d000      	beq.n	80066c8 <HAL_RCC_OscConfig+0x1e4>
 80066c6:	e71f      	b.n	8006508 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c8:	f7fe fc00 	bl	8004ecc <HAL_GetTick>
 80066cc:	1b80      	subs	r0, r0, r6
 80066ce:	2802      	cmp	r0, #2
 80066d0:	d9f6      	bls.n	80066c0 <HAL_RCC_OscConfig+0x1dc>
 80066d2:	e74b      	b.n	800656c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 80066d4:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066d6:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80066d8:	439a      	bics	r2, r3
 80066da:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80066dc:	f7fe fbf6 	bl	8004ecc <HAL_GetTick>
 80066e0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066e2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80066e4:	423b      	tst	r3, r7
 80066e6:	d100      	bne.n	80066ea <HAL_RCC_OscConfig+0x206>
 80066e8:	e70e      	b.n	8006508 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ea:	f7fe fbef 	bl	8004ecc <HAL_GetTick>
 80066ee:	1b80      	subs	r0, r0, r6
 80066f0:	2802      	cmp	r0, #2
 80066f2:	d9f6      	bls.n	80066e2 <HAL_RCC_OscConfig+0x1fe>
 80066f4:	e73a      	b.n	800656c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80066f6:	2238      	movs	r2, #56	@ 0x38
 80066f8:	4d38      	ldr	r5, [pc, #224]	@ (80067dc <HAL_RCC_OscConfig+0x2f8>)
 80066fa:	68ab      	ldr	r3, [r5, #8]
 80066fc:	4013      	ands	r3, r2
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d108      	bne.n	8006714 <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006702:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8006704:	079b      	lsls	r3, r3, #30
 8006706:	d400      	bmi.n	800670a <HAL_RCC_OscConfig+0x226>
 8006708:	e702      	b.n	8006510 <HAL_RCC_OscConfig+0x2c>
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d000      	beq.n	8006712 <HAL_RCC_OscConfig+0x22e>
 8006710:	e6fe      	b.n	8006510 <HAL_RCC_OscConfig+0x2c>
 8006712:	e6ec      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006714:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8006716:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006718:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800671a:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 800671c:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800671e:	4213      	tst	r3, r2
 8006720:	d108      	bne.n	8006734 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 8006722:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8006724:	4313      	orrs	r3, r2
 8006726:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8006728:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800672a:	4013      	ands	r3, r2
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8006730:	2301      	movs	r3, #1
 8006732:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006734:	2780      	movs	r7, #128	@ 0x80
 8006736:	4e32      	ldr	r6, [pc, #200]	@ (8006800 <HAL_RCC_OscConfig+0x31c>)
 8006738:	007f      	lsls	r7, r7, #1
 800673a:	6833      	ldr	r3, [r6, #0]
 800673c:	423b      	tst	r3, r7
 800673e:	d015      	beq.n	800676c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006740:	68a3      	ldr	r3, [r4, #8]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d122      	bne.n	800678c <HAL_RCC_OscConfig+0x2a8>
 8006746:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8006748:	4313      	orrs	r3, r2
 800674a:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 800674c:	f7fe fbbe 	bl	8004ecc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006750:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8006752:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006754:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8006756:	423b      	tst	r3, r7
 8006758:	d038      	beq.n	80067cc <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 800675a:	9b00      	ldr	r3, [sp, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d000      	beq.n	8006762 <HAL_RCC_OscConfig+0x27e>
 8006760:	e6d6      	b.n	8006510 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8006762:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8006764:	4a27      	ldr	r2, [pc, #156]	@ (8006804 <HAL_RCC_OscConfig+0x320>)
 8006766:	4013      	ands	r3, r2
 8006768:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800676a:	e6d1      	b.n	8006510 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	433b      	orrs	r3, r7
 8006770:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006772:	f7fe fbab 	bl	8004ecc <HAL_GetTick>
 8006776:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006778:	6833      	ldr	r3, [r6, #0]
 800677a:	423b      	tst	r3, r7
 800677c:	d1e0      	bne.n	8006740 <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800677e:	f7fe fba5 	bl	8004ecc <HAL_GetTick>
 8006782:	9b01      	ldr	r3, [sp, #4]
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	2802      	cmp	r0, #2
 8006788:	d9f6      	bls.n	8006778 <HAL_RCC_OscConfig+0x294>
 800678a:	e6ef      	b.n	800656c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800678c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800678e:	2b05      	cmp	r3, #5
 8006790:	d105      	bne.n	800679e <HAL_RCC_OscConfig+0x2ba>
 8006792:	3b01      	subs	r3, #1
 8006794:	4313      	orrs	r3, r2
 8006796:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8006798:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800679a:	2301      	movs	r3, #1
 800679c:	e7d4      	b.n	8006748 <HAL_RCC_OscConfig+0x264>
 800679e:	2101      	movs	r1, #1
 80067a0:	438a      	bics	r2, r1
 80067a2:	65ea      	str	r2, [r5, #92]	@ 0x5c
 80067a4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80067a6:	3103      	adds	r1, #3
 80067a8:	438a      	bics	r2, r1
 80067aa:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1cd      	bne.n	800674c <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 80067b0:	f7fe fb8c 	bl	8004ecc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067b4:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80067b6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067b8:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80067ba:	423b      	tst	r3, r7
 80067bc:	d0cd      	beq.n	800675a <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067be:	f7fe fb85 	bl	8004ecc <HAL_GetTick>
 80067c2:	4b11      	ldr	r3, [pc, #68]	@ (8006808 <HAL_RCC_OscConfig+0x324>)
 80067c4:	1b80      	subs	r0, r0, r6
 80067c6:	4298      	cmp	r0, r3
 80067c8:	d9f6      	bls.n	80067b8 <HAL_RCC_OscConfig+0x2d4>
 80067ca:	e6cf      	b.n	800656c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fe fb7e 	bl	8004ecc <HAL_GetTick>
 80067d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <HAL_RCC_OscConfig+0x324>)
 80067d2:	1b80      	subs	r0, r0, r6
 80067d4:	4298      	cmp	r0, r3
 80067d6:	d9bd      	bls.n	8006754 <HAL_RCC_OscConfig+0x270>
 80067d8:	e6c8      	b.n	800656c <HAL_RCC_OscConfig+0x88>
 80067da:	46c0      	nop			@ (mov r8, r8)
 80067dc:	40021000 	.word	0x40021000
 80067e0:	fffeffff 	.word	0xfffeffff
 80067e4:	fffbffff 	.word	0xfffbffff
 80067e8:	ffff80ff 	.word	0xffff80ff
 80067ec:	ffffc7ff 	.word	0xffffc7ff
 80067f0:	20000430 	.word	0x20000430
 80067f4:	00f42400 	.word	0x00f42400
 80067f8:	20000438 	.word	0x20000438
 80067fc:	fffffeff 	.word	0xfffffeff
 8006800:	40007000 	.word	0x40007000
 8006804:	efffffff 	.word	0xefffffff
 8006808:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800680c:	2138      	movs	r1, #56	@ 0x38
 800680e:	4d43      	ldr	r5, [pc, #268]	@ (800691c <HAL_RCC_OscConfig+0x438>)
 8006810:	68aa      	ldr	r2, [r5, #8]
 8006812:	400a      	ands	r2, r1
 8006814:	2a10      	cmp	r2, #16
 8006816:	d053      	beq.n	80068c0 <HAL_RCC_OscConfig+0x3dc>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006818:	4a41      	ldr	r2, [pc, #260]	@ (8006920 <HAL_RCC_OscConfig+0x43c>)
 800681a:	2b02      	cmp	r3, #2
 800681c:	d13a      	bne.n	8006894 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_DISABLE();
 800681e:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006820:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8006822:	4013      	ands	r3, r2
 8006824:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006826:	f7fe fb51 	bl	8004ecc <HAL_GetTick>
 800682a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800682c:	04bf      	lsls	r7, r7, #18
 800682e:	682b      	ldr	r3, [r5, #0]
 8006830:	423b      	tst	r3, r7
 8006832:	d129      	bne.n	8006888 <HAL_RCC_OscConfig+0x3a4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006834:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006836:	6a23      	ldr	r3, [r4, #32]
 8006838:	68ea      	ldr	r2, [r5, #12]
 800683a:	430b      	orrs	r3, r1
 800683c:	4939      	ldr	r1, [pc, #228]	@ (8006924 <HAL_RCC_OscConfig+0x440>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800683e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006840:	400a      	ands	r2, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006846:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006848:	4313      	orrs	r3, r2
 800684a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800684c:	4313      	orrs	r3, r2
 800684e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006850:	4313      	orrs	r3, r2
 8006852:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006854:	0212      	lsls	r2, r2, #8
 8006856:	4313      	orrs	r3, r2
 8006858:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800685a:	2380      	movs	r3, #128	@ 0x80
 800685c:	682a      	ldr	r2, [r5, #0]
 800685e:	045b      	lsls	r3, r3, #17
 8006860:	4313      	orrs	r3, r2
 8006862:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006864:	2380      	movs	r3, #128	@ 0x80
 8006866:	68ea      	ldr	r2, [r5, #12]
 8006868:	055b      	lsls	r3, r3, #21
 800686a:	4313      	orrs	r3, r2
 800686c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800686e:	f7fe fb2d 	bl	8004ecc <HAL_GetTick>
 8006872:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	4233      	tst	r3, r6
 8006878:	d000      	beq.n	800687c <HAL_RCC_OscConfig+0x398>
 800687a:	e64d      	b.n	8006518 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800687c:	f7fe fb26 	bl	8004ecc <HAL_GetTick>
 8006880:	1b00      	subs	r0, r0, r4
 8006882:	2802      	cmp	r0, #2
 8006884:	d9f6      	bls.n	8006874 <HAL_RCC_OscConfig+0x390>
 8006886:	e671      	b.n	800656c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006888:	f7fe fb20 	bl	8004ecc <HAL_GetTick>
 800688c:	1b80      	subs	r0, r0, r6
 800688e:	2802      	cmp	r0, #2
 8006890:	d9cd      	bls.n	800682e <HAL_RCC_OscConfig+0x34a>
 8006892:	e66b      	b.n	800656c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 8006894:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006896:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8006898:	4013      	ands	r3, r2
 800689a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800689c:	f7fe fb16 	bl	8004ecc <HAL_GetTick>
 80068a0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068a2:	04b6      	lsls	r6, r6, #18
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	4233      	tst	r3, r6
 80068a8:	d104      	bne.n	80068b4 <HAL_RCC_OscConfig+0x3d0>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80068aa:	68eb      	ldr	r3, [r5, #12]
 80068ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006928 <HAL_RCC_OscConfig+0x444>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	60eb      	str	r3, [r5, #12]
 80068b2:	e631      	b.n	8006518 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fe fb0a 	bl	8004ecc <HAL_GetTick>
 80068b8:	1b00      	subs	r0, r0, r4
 80068ba:	2802      	cmp	r0, #2
 80068bc:	d9f2      	bls.n	80068a4 <HAL_RCC_OscConfig+0x3c0>
 80068be:	e655      	b.n	800656c <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d100      	bne.n	80068c6 <HAL_RCC_OscConfig+0x3e2>
 80068c4:	e613      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c6:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80068c8:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ca:	6a21      	ldr	r1, [r4, #32]
 80068cc:	4002      	ands	r2, r0
 80068ce:	428a      	cmp	r2, r1
 80068d0:	d000      	beq.n	80068d4 <HAL_RCC_OscConfig+0x3f0>
 80068d2:	e60c      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068d4:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068d8:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068da:	428a      	cmp	r2, r1
 80068dc:	d000      	beq.n	80068e0 <HAL_RCC_OscConfig+0x3fc>
 80068de:	e606      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068e0:	21fe      	movs	r1, #254	@ 0xfe
 80068e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80068e4:	01c9      	lsls	r1, r1, #7
 80068e6:	4001      	ands	r1, r0
 80068e8:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068ea:	4291      	cmp	r1, r2
 80068ec:	d000      	beq.n	80068f0 <HAL_RCC_OscConfig+0x40c>
 80068ee:	e5fe      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068f0:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068f4:	0392      	lsls	r2, r2, #14
 80068f6:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f8:	428a      	cmp	r2, r1
 80068fa:	d000      	beq.n	80068fe <HAL_RCC_OscConfig+0x41a>
 80068fc:	e5f7      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80068fe:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006900:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006902:	0512      	lsls	r2, r2, #20
 8006904:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006906:	428a      	cmp	r2, r1
 8006908:	d000      	beq.n	800690c <HAL_RCC_OscConfig+0x428>
 800690a:	e5f0      	b.n	80064ee <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800690c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800690e:	0f40      	lsrs	r0, r0, #29
 8006910:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006912:	1ac0      	subs	r0, r0, r3
 8006914:	1e43      	subs	r3, r0, #1
 8006916:	4198      	sbcs	r0, r3
 8006918:	b2c0      	uxtb	r0, r0
 800691a:	e5e9      	b.n	80064f0 <HAL_RCC_OscConfig+0xc>
 800691c:	40021000 	.word	0x40021000
 8006920:	feffffff 	.word	0xfeffffff
 8006924:	11c1808c 	.word	0x11c1808c
 8006928:	eefefffc 	.word	0xeefefffc

0800692c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800692c:	2338      	movs	r3, #56	@ 0x38
{
 800692e:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006930:	4c1d      	ldr	r4, [pc, #116]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8006932:	68a2      	ldr	r2, [r4, #8]
 8006934:	421a      	tst	r2, r3
 8006936:	d105      	bne.n	8006944 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006938:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800693a:	481c      	ldr	r0, [pc, #112]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800693c:	049b      	lsls	r3, r3, #18
 800693e:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006940:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8006942:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006944:	68a2      	ldr	r2, [r4, #8]
 8006946:	401a      	ands	r2, r3
 8006948:	2a08      	cmp	r2, #8
 800694a:	d027      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800694c:	68a2      	ldr	r2, [r4, #8]
 800694e:	401a      	ands	r2, r3
 8006950:	2a10      	cmp	r2, #16
 8006952:	d117      	bne.n	8006984 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006954:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006956:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006958:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800695a:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800695c:	0649      	lsls	r1, r1, #25
 800695e:	0f49      	lsrs	r1, r1, #29
 8006960:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006962:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006964:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006966:	4015      	ands	r5, r2
    switch (pllsource)
 8006968:	079b      	lsls	r3, r3, #30
 800696a:	d109      	bne.n	8006980 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800696c:	4810      	ldr	r0, [pc, #64]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800696e:	f7f9 fbdf 	bl	8000130 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006972:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006974:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006976:	0f49      	lsrs	r1, r1, #29
 8006978:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800697a:	f7f9 fbd9 	bl	8000130 <__udivsi3>
 800697e:	e7e0      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006980:	480a      	ldr	r0, [pc, #40]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x80>)
 8006982:	e7f4      	b.n	800696e <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006984:	68a2      	ldr	r2, [r4, #8]
 8006986:	401a      	ands	r2, r3
 8006988:	2a20      	cmp	r2, #32
 800698a:	d009      	beq.n	80069a0 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800698c:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800698e:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006990:	4013      	ands	r3, r2
 8006992:	2b18      	cmp	r3, #24
 8006994:	d1d5      	bne.n	8006942 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8006996:	20fa      	movs	r0, #250	@ 0xfa
 8006998:	01c0      	lsls	r0, r0, #7
 800699a:	e7d2      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800699c:	4804      	ldr	r0, [pc, #16]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x84>)
 800699e:	e7d0      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80069a0:	2080      	movs	r0, #128	@ 0x80
 80069a2:	0200      	lsls	r0, r0, #8
 80069a4:	e7cd      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x16>
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	40021000 	.word	0x40021000
 80069ac:	00f42400 	.word	0x00f42400
 80069b0:	007a1200 	.word	0x007a1200

080069b4 <HAL_RCC_ClockConfig>:
{
 80069b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069b6:	0004      	movs	r4, r0
 80069b8:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80069be:	2001      	movs	r0, #1
}
 80069c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069c2:	2707      	movs	r7, #7
 80069c4:	4e48      	ldr	r6, [pc, #288]	@ (8006ae8 <HAL_RCC_ClockConfig+0x134>)
 80069c6:	6833      	ldr	r3, [r6, #0]
 80069c8:	403b      	ands	r3, r7
 80069ca:	428b      	cmp	r3, r1
 80069cc:	d32a      	bcc.n	8006a24 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ce:	6822      	ldr	r2, [r4, #0]
 80069d0:	0793      	lsls	r3, r2, #30
 80069d2:	d43b      	bmi.n	8006a4c <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069d4:	07d2      	lsls	r2, r2, #31
 80069d6:	d448      	bmi.n	8006a6a <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069d8:	2707      	movs	r7, #7
 80069da:	6833      	ldr	r3, [r6, #0]
 80069dc:	403b      	ands	r3, r7
 80069de:	42ab      	cmp	r3, r5
 80069e0:	d90a      	bls.n	80069f8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e2:	6833      	ldr	r3, [r6, #0]
 80069e4:	43bb      	bics	r3, r7
 80069e6:	432b      	orrs	r3, r5
 80069e8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80069ea:	f7fe fa6f 	bl	8004ecc <HAL_GetTick>
 80069ee:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069f0:	6833      	ldr	r3, [r6, #0]
 80069f2:	403b      	ands	r3, r7
 80069f4:	42ab      	cmp	r3, r5
 80069f6:	d168      	bne.n	8006aca <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	4d3c      	ldr	r5, [pc, #240]	@ (8006aec <HAL_RCC_ClockConfig+0x138>)
 80069fc:	075b      	lsls	r3, r3, #29
 80069fe:	d46c      	bmi.n	8006ada <HAL_RCC_ClockConfig+0x126>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006a00:	f7ff ff94 	bl	800692c <HAL_RCC_GetSysClockFreq>
 8006a04:	68ab      	ldr	r3, [r5, #8]
 8006a06:	493a      	ldr	r1, [pc, #232]	@ (8006af0 <HAL_RCC_ClockConfig+0x13c>)
 8006a08:	051b      	lsls	r3, r3, #20
 8006a0a:	0f1b      	lsrs	r3, r3, #28
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	585b      	ldr	r3, [r3, r1]
 8006a10:	211f      	movs	r1, #31
 8006a12:	400b      	ands	r3, r1
 8006a14:	40d8      	lsrs	r0, r3
 8006a16:	4a37      	ldr	r2, [pc, #220]	@ (8006af4 <HAL_RCC_ClockConfig+0x140>)
  return HAL_InitTick(uwTickPrio);
 8006a18:	4b37      	ldr	r3, [pc, #220]	@ (8006af8 <HAL_RCC_ClockConfig+0x144>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006a1a:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	f7fe fa0d 	bl	8004e3c <HAL_InitTick>
 8006a22:	e7cd      	b.n	80069c0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a24:	6833      	ldr	r3, [r6, #0]
 8006a26:	43bb      	bics	r3, r7
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006a2c:	f7fe fa4e 	bl	8004ecc <HAL_GetTick>
 8006a30:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a32:	6833      	ldr	r3, [r6, #0]
 8006a34:	403b      	ands	r3, r7
 8006a36:	42ab      	cmp	r3, r5
 8006a38:	d0c9      	beq.n	80069ce <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a3a:	f7fe fa47 	bl	8004ecc <HAL_GetTick>
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	1ac0      	subs	r0, r0, r3
 8006a42:	4b2e      	ldr	r3, [pc, #184]	@ (8006afc <HAL_RCC_ClockConfig+0x148>)
 8006a44:	4298      	cmp	r0, r3
 8006a46:	d9f4      	bls.n	8006a32 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8006a48:	2003      	movs	r0, #3
 8006a4a:	e7b9      	b.n	80069c0 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a4c:	4927      	ldr	r1, [pc, #156]	@ (8006aec <HAL_RCC_ClockConfig+0x138>)
 8006a4e:	0753      	lsls	r3, r2, #29
 8006a50:	d504      	bpl.n	8006a5c <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006a52:	23e0      	movs	r3, #224	@ 0xe0
 8006a54:	6888      	ldr	r0, [r1, #8]
 8006a56:	01db      	lsls	r3, r3, #7
 8006a58:	4303      	orrs	r3, r0
 8006a5a:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a5c:	688b      	ldr	r3, [r1, #8]
 8006a5e:	4828      	ldr	r0, [pc, #160]	@ (8006b00 <HAL_RCC_ClockConfig+0x14c>)
 8006a60:	4003      	ands	r3, r0
 8006a62:	68a0      	ldr	r0, [r4, #8]
 8006a64:	4303      	orrs	r3, r0
 8006a66:	608b      	str	r3, [r1, #8]
 8006a68:	e7b4      	b.n	80069d4 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a6a:	6860      	ldr	r0, [r4, #4]
 8006a6c:	4f1f      	ldr	r7, [pc, #124]	@ (8006aec <HAL_RCC_ClockConfig+0x138>)
 8006a6e:	2803      	cmp	r0, #3
 8006a70:	d829      	bhi.n	8006ac6 <HAL_RCC_ClockConfig+0x112>
 8006a72:	f7f9 fb53 	bl	800011c <__gnu_thumb1_case_uqi>
 8006a76:	0220      	.short	0x0220
 8006a78:	241c      	.short	0x241c
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	039b      	lsls	r3, r3, #14
 8006a7e:	d59e      	bpl.n	80069be <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a80:	2207      	movs	r2, #7
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4393      	bics	r3, r2
 8006a86:	4303      	orrs	r3, r0
 8006a88:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8006a8a:	f7fe fa1f 	bl	8004ecc <HAL_GetTick>
 8006a8e:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a90:	2338      	movs	r3, #56	@ 0x38
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	401a      	ands	r2, r3
 8006a96:	6863      	ldr	r3, [r4, #4]
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d09c      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a9e:	f7fe fa15 	bl	8004ecc <HAL_GetTick>
 8006aa2:	9b01      	ldr	r3, [sp, #4]
 8006aa4:	1ac0      	subs	r0, r0, r3
 8006aa6:	4b15      	ldr	r3, [pc, #84]	@ (8006afc <HAL_RCC_ClockConfig+0x148>)
 8006aa8:	4298      	cmp	r0, r3
 8006aaa:	d9f1      	bls.n	8006a90 <HAL_RCC_ClockConfig+0xdc>
 8006aac:	e7cc      	b.n	8006a48 <HAL_RCC_ClockConfig+0x94>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	019b      	lsls	r3, r3, #6
 8006ab2:	d4e5      	bmi.n	8006a80 <HAL_RCC_ClockConfig+0xcc>
 8006ab4:	e783      	b.n	80069be <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	055b      	lsls	r3, r3, #21
 8006aba:	d4e1      	bmi.n	8006a80 <HAL_RCC_ClockConfig+0xcc>
 8006abc:	e77f      	b.n	80069be <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006abe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ac0:	079b      	lsls	r3, r3, #30
 8006ac2:	d4dd      	bmi.n	8006a80 <HAL_RCC_ClockConfig+0xcc>
 8006ac4:	e77b      	b.n	80069be <HAL_RCC_ClockConfig+0xa>
 8006ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ac8:	e7fa      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aca:	f7fe f9ff 	bl	8004ecc <HAL_GetTick>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	1ac0      	subs	r0, r0, r3
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <HAL_RCC_ClockConfig+0x148>)
 8006ad4:	4298      	cmp	r0, r3
 8006ad6:	d98b      	bls.n	80069f0 <HAL_RCC_ClockConfig+0x3c>
 8006ad8:	e7b6      	b.n	8006a48 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ada:	68ab      	ldr	r3, [r5, #8]
 8006adc:	4a09      	ldr	r2, [pc, #36]	@ (8006b04 <HAL_RCC_ClockConfig+0x150>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	68e2      	ldr	r2, [r4, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60ab      	str	r3, [r5, #8]
 8006ae6:	e78b      	b.n	8006a00 <HAL_RCC_ClockConfig+0x4c>
 8006ae8:	40022000 	.word	0x40022000
 8006aec:	40021000 	.word	0x40021000
 8006af0:	080093b8 	.word	0x080093b8
 8006af4:	20000430 	.word	0x20000430
 8006af8:	20000438 	.word	0x20000438
 8006afc:	00001388 	.word	0x00001388
 8006b00:	fffff0ff 	.word	0xfffff0ff
 8006b04:	ffff8fff 	.word	0xffff8fff

08006b08 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006b08:	4b06      	ldr	r3, [pc, #24]	@ (8006b24 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b0a:	4907      	ldr	r1, [pc, #28]	@ (8006b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006b0e:	4a07      	ldr	r2, [pc, #28]	@ (8006b2c <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b10:	045b      	lsls	r3, r3, #17
 8006b12:	0f5b      	lsrs	r3, r3, #29
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	585b      	ldr	r3, [r3, r1]
 8006b18:	211f      	movs	r1, #31
 8006b1a:	6810      	ldr	r0, [r2, #0]
 8006b1c:	400b      	ands	r3, r1
 8006b1e:	40d8      	lsrs	r0, r3
}
 8006b20:	4770      	bx	lr
 8006b22:	46c0      	nop			@ (mov r8, r8)
 8006b24:	40021000 	.word	0x40021000
 8006b28:	08009398 	.word	0x08009398
 8006b2c:	20000430 	.word	0x20000430

08006b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b30:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b32:	6803      	ldr	r3, [r0, #0]
{
 8006b34:	0005      	movs	r5, r0
 8006b36:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b38:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b3a:	039b      	lsls	r3, r3, #14
 8006b3c:	d552      	bpl.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xb4>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b3e:	2280      	movs	r2, #128	@ 0x80
 8006b40:	4c5f      	ldr	r4, [pc, #380]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006b42:	0552      	lsls	r2, r2, #21
 8006b44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8006b46:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b48:	4213      	tst	r3, r2
 8006b4a:	d108      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006b52:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006b54:	4013      	ands	r3, r2
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b5e:	2780      	movs	r7, #128	@ 0x80
 8006b60:	4e58      	ldr	r6, [pc, #352]	@ (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006b62:	007f      	lsls	r7, r7, #1
 8006b64:	6833      	ldr	r3, [r6, #0]
 8006b66:	433b      	orrs	r3, r7
 8006b68:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b6a:	f7fe f9af 	bl	8004ecc <HAL_GetTick>
 8006b6e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b70:	6833      	ldr	r3, [r6, #0]
 8006b72:	423b      	tst	r3, r7
 8006b74:	d028      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b76:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8006b78:	23c0      	movs	r3, #192	@ 0xc0
 8006b7a:	0010      	movs	r0, r2
 8006b7c:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b7e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8006b80:	4e51      	ldr	r6, [pc, #324]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b82:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b84:	421a      	tst	r2, r3
 8006b86:	d018      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8006b88:	4281      	cmp	r1, r0
 8006b8a:	d016      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b8c:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b8e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b90:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b92:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b94:	0252      	lsls	r2, r2, #9
 8006b96:	4302      	orrs	r2, r0
 8006b98:	65e2      	str	r2, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b9a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8006b9c:	484b      	ldr	r0, [pc, #300]	@ (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b9e:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ba0:	4002      	ands	r2, r0
 8006ba2:	65e2      	str	r2, [r4, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ba4:	65e1      	str	r1, [r4, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ba6:	07db      	lsls	r3, r3, #31
 8006ba8:	d507      	bpl.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006baa:	f7fe f98f 	bl	8004ecc <HAL_GetTick>
 8006bae:	0007      	movs	r7, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006bb4:	4213      	tst	r3, r2
 8006bb6:	d100      	bne.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8006bb8:	e07a      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bba:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006bbc:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8006bbe:	4033      	ands	r3, r6
 8006bc0:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bc2:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bc4:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8006bc6:	e006      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc8:	f7fe f980 	bl	8004ecc <HAL_GetTick>
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	1ac0      	subs	r0, r0, r3
 8006bd0:	2802      	cmp	r0, #2
 8006bd2:	d9cd      	bls.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bd4:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bd6:	9b00      	ldr	r3, [sp, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d103      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006bde:	4a3c      	ldr	r2, [pc, #240]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	07da      	lsls	r2, r3, #31
 8006be8:	d506      	bpl.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bea:	2403      	movs	r4, #3
 8006bec:	4934      	ldr	r1, [pc, #208]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006bee:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006bf0:	43a2      	bics	r2, r4
 8006bf2:	686c      	ldr	r4, [r5, #4]
 8006bf4:	4322      	orrs	r2, r4
 8006bf6:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bf8:	06da      	lsls	r2, r3, #27
 8006bfa:	d506      	bpl.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bfc:	4930      	ldr	r1, [pc, #192]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006bfe:	4c35      	ldr	r4, [pc, #212]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c00:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006c02:	4022      	ands	r2, r4
 8006c04:	68ac      	ldr	r4, [r5, #8]
 8006c06:	4322      	orrs	r2, r4
 8006c08:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c0a:	059a      	lsls	r2, r3, #22
 8006c0c:	d506      	bpl.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c0e:	492c      	ldr	r1, [pc, #176]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006c10:	4c31      	ldr	r4, [pc, #196]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c12:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006c14:	4022      	ands	r2, r4
 8006c16:	696c      	ldr	r4, [r5, #20]
 8006c18:	4322      	orrs	r2, r4
 8006c1a:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c1c:	055a      	lsls	r2, r3, #21
 8006c1e:	d506      	bpl.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c20:	4927      	ldr	r1, [pc, #156]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006c22:	4c2e      	ldr	r4, [pc, #184]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c24:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006c26:	4022      	ands	r2, r4
 8006c28:	69ac      	ldr	r4, [r5, #24]
 8006c2a:	4322      	orrs	r2, r4
 8006c2c:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c2e:	069a      	lsls	r2, r3, #26
 8006c30:	d506      	bpl.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c32:	4923      	ldr	r1, [pc, #140]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006c34:	4c2a      	ldr	r4, [pc, #168]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c36:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006c38:	4022      	ands	r2, r4
 8006c3a:	68ec      	ldr	r4, [r5, #12]
 8006c3c:	4322      	orrs	r2, r4
 8006c3e:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c40:	045a      	lsls	r2, r3, #17
 8006c42:	d50f      	bpl.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c44:	491e      	ldr	r1, [pc, #120]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006c46:	69ec      	ldr	r4, [r5, #28]
 8006c48:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006c4a:	0092      	lsls	r2, r2, #2
 8006c4c:	0892      	lsrs	r2, r2, #2
 8006c4e:	4322      	orrs	r2, r4
 8006c50:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006c52:	2280      	movs	r2, #128	@ 0x80
 8006c54:	05d2      	lsls	r2, r2, #23
 8006c56:	4294      	cmp	r4, r2
 8006c58:	d104      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006c5a:	2280      	movs	r2, #128	@ 0x80
 8006c5c:	68cc      	ldr	r4, [r1, #12]
 8006c5e:	0252      	lsls	r2, r2, #9
 8006c60:	4322      	orrs	r2, r4
 8006c62:	60ca      	str	r2, [r1, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006c64:	029a      	lsls	r2, r3, #10
 8006c66:	d50f      	bpl.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006c68:	4915      	ldr	r1, [pc, #84]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006c6a:	4e1e      	ldr	r6, [pc, #120]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c6c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006c6e:	6a2c      	ldr	r4, [r5, #32]
 8006c70:	4032      	ands	r2, r6
 8006c72:	4322      	orrs	r2, r4
 8006c74:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006c76:	2280      	movs	r2, #128	@ 0x80
 8006c78:	03d2      	lsls	r2, r2, #15
 8006c7a:	4294      	cmp	r4, r2
 8006c7c:	d104      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006c7e:	2280      	movs	r2, #128	@ 0x80
 8006c80:	68cc      	ldr	r4, [r1, #12]
 8006c82:	0452      	lsls	r2, r2, #17
 8006c84:	4322      	orrs	r2, r4
 8006c86:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006c88:	051b      	lsls	r3, r3, #20
 8006c8a:	d50f      	bpl.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006c8e:	4c16      	ldr	r4, [pc, #88]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c90:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006c92:	6929      	ldr	r1, [r5, #16]
 8006c94:	4023      	ands	r3, r4
 8006c96:	430b      	orrs	r3, r1
 8006c98:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006c9a:	2380      	movs	r3, #128	@ 0x80
 8006c9c:	01db      	lsls	r3, r3, #7
 8006c9e:	4299      	cmp	r1, r3
 8006ca0:	d104      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006ca2:	2380      	movs	r3, #128	@ 0x80
 8006ca4:	68d1      	ldr	r1, [r2, #12]
 8006ca6:	025b      	lsls	r3, r3, #9
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8006cac:	b005      	add	sp, #20
 8006cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb0:	f7fe f90c 	bl	8004ecc <HAL_GetTick>
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006cb6:	1bc0      	subs	r0, r0, r7
 8006cb8:	4298      	cmp	r0, r3
 8006cba:	d800      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006cbc:	e778      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8006cbe:	e789      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40007000 	.word	0x40007000
 8006cc8:	fffffcff 	.word	0xfffffcff
 8006ccc:	fffeffff 	.word	0xfffeffff
 8006cd0:	efffffff 	.word	0xefffffff
 8006cd4:	fffff3ff 	.word	0xfffff3ff
 8006cd8:	fff3ffff 	.word	0xfff3ffff
 8006cdc:	ffcfffff 	.word	0xffcfffff
 8006ce0:	ffffcfff 	.word	0xffffcfff
 8006ce4:	ffbfffff 	.word	0xffbfffff
 8006ce8:	ffff3fff 	.word	0xffff3fff
 8006cec:	00001388 	.word	0x00001388

08006cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf2:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8006cf4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf6:	6a02      	ldr	r2, [r0, #32]
 8006cf8:	43a2      	bics	r2, r4
 8006cfa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cfe:	4a12      	ldr	r2, [pc, #72]	@ (8006d48 <TIM_OC1_SetConfig+0x58>)
  tmpccmrx = TIMx->CCMR1;
 8006d00:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d02:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d04:	680a      	ldr	r2, [r1, #0]
 8006d06:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d08:	2202      	movs	r2, #2
 8006d0a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d0c:	688a      	ldr	r2, [r1, #8]
 8006d0e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d10:	4a0e      	ldr	r2, [pc, #56]	@ (8006d4c <TIM_OC1_SetConfig+0x5c>)
 8006d12:	4290      	cmp	r0, r2
 8006d14:	d005      	beq.n	8006d22 <TIM_OC1_SetConfig+0x32>
 8006d16:	4a0e      	ldr	r2, [pc, #56]	@ (8006d50 <TIM_OC1_SetConfig+0x60>)
 8006d18:	4290      	cmp	r0, r2
 8006d1a:	d002      	beq.n	8006d22 <TIM_OC1_SetConfig+0x32>
 8006d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d54 <TIM_OC1_SetConfig+0x64>)
 8006d1e:	4290      	cmp	r0, r2
 8006d20:	d10b      	bne.n	8006d3a <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d22:	2208      	movs	r2, #8
 8006d24:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d26:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d28:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8006d2a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d30:	4a09      	ldr	r2, [pc, #36]	@ (8006d58 <TIM_OC1_SetConfig+0x68>)
 8006d32:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d34:	694c      	ldr	r4, [r1, #20]
 8006d36:	4334      	orrs	r4, r6
 8006d38:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d3a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006d3c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006d3e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006d40:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d42:	6203      	str	r3, [r0, #32]
}
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	46c0      	nop			@ (mov r8, r8)
 8006d48:	fffeff8c 	.word	0xfffeff8c
 8006d4c:	40012c00 	.word	0x40012c00
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800
 8006d58:	fffffcff 	.word	0xfffffcff

08006d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d5e:	4a17      	ldr	r2, [pc, #92]	@ (8006dbc <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8006d60:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d62:	6a03      	ldr	r3, [r0, #32]
 8006d64:	4013      	ands	r3, r2
 8006d66:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d68:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	@ (8006dc0 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 8006d6c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d6e:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d70:	680b      	ldr	r3, [r1, #0]
 8006d72:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d74:	4b13      	ldr	r3, [pc, #76]	@ (8006dc4 <TIM_OC3_SetConfig+0x68>)
 8006d76:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d78:	688b      	ldr	r3, [r1, #8]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d7e:	4d12      	ldr	r5, [pc, #72]	@ (8006dc8 <TIM_OC3_SetConfig+0x6c>)
 8006d80:	42a8      	cmp	r0, r5
 8006d82:	d10e      	bne.n	8006da2 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d84:	4d11      	ldr	r5, [pc, #68]	@ (8006dcc <TIM_OC3_SetConfig+0x70>)
 8006d86:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d88:	68cb      	ldr	r3, [r1, #12]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d8e:	4d10      	ldr	r5, [pc, #64]	@ (8006dd0 <TIM_OC3_SetConfig+0x74>)
 8006d90:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d92:	4d10      	ldr	r5, [pc, #64]	@ (8006dd4 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d94:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d96:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d98:	694a      	ldr	r2, [r1, #20]
 8006d9a:	4332      	orrs	r2, r6
 8006d9c:	0112      	lsls	r2, r2, #4
 8006d9e:	432a      	orrs	r2, r5
 8006da0:	e005      	b.n	8006dae <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da2:	4d0d      	ldr	r5, [pc, #52]	@ (8006dd8 <TIM_OC3_SetConfig+0x7c>)
 8006da4:	42a8      	cmp	r0, r5
 8006da6:	d0f4      	beq.n	8006d92 <TIM_OC3_SetConfig+0x36>
 8006da8:	4d0c      	ldr	r5, [pc, #48]	@ (8006ddc <TIM_OC3_SetConfig+0x80>)
 8006daa:	42a8      	cmp	r0, r5
 8006dac:	d0f1      	beq.n	8006d92 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006db0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006db2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006db4:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db6:	6203      	str	r3, [r0, #32]
}
 8006db8:	bd70      	pop	{r4, r5, r6, pc}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	fffffeff 	.word	0xfffffeff
 8006dc0:	fffeff8c 	.word	0xfffeff8c
 8006dc4:	fffffdff 	.word	0xfffffdff
 8006dc8:	40012c00 	.word	0x40012c00
 8006dcc:	fffff7ff 	.word	0xfffff7ff
 8006dd0:	fffffbff 	.word	0xfffffbff
 8006dd4:	ffffcfff 	.word	0xffffcfff
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800

08006de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de0:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de2:	4a12      	ldr	r2, [pc, #72]	@ (8006e2c <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8006de4:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006de8:	4d11      	ldr	r5, [pc, #68]	@ (8006e30 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dea:	4013      	ands	r3, r2
 8006dec:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006dee:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006df0:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006df2:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df4:	680d      	ldr	r5, [r1, #0]
 8006df6:	022d      	lsls	r5, r5, #8
 8006df8:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8006e34 <TIM_OC4_SetConfig+0x54>)
 8006dfc:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dfe:	688a      	ldr	r2, [r1, #8]
 8006e00:	0312      	lsls	r2, r2, #12
 8006e02:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e04:	4c0c      	ldr	r4, [pc, #48]	@ (8006e38 <TIM_OC4_SetConfig+0x58>)
 8006e06:	42a0      	cmp	r0, r4
 8006e08:	d005      	beq.n	8006e16 <TIM_OC4_SetConfig+0x36>
 8006e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006e3c <TIM_OC4_SetConfig+0x5c>)
 8006e0c:	42a0      	cmp	r0, r4
 8006e0e:	d002      	beq.n	8006e16 <TIM_OC4_SetConfig+0x36>
 8006e10:	4c0b      	ldr	r4, [pc, #44]	@ (8006e40 <TIM_OC4_SetConfig+0x60>)
 8006e12:	42a0      	cmp	r0, r4
 8006e14:	d104      	bne.n	8006e20 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e16:	4c0b      	ldr	r4, [pc, #44]	@ (8006e44 <TIM_OC4_SetConfig+0x64>)
 8006e18:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e1a:	694b      	ldr	r3, [r1, #20]
 8006e1c:	019b      	lsls	r3, r3, #6
 8006e1e:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e20:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e22:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006e24:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006e26:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e28:	6202      	str	r2, [r0, #32]
}
 8006e2a:	bd30      	pop	{r4, r5, pc}
 8006e2c:	ffffefff 	.word	0xffffefff
 8006e30:	feff8cff 	.word	0xfeff8cff
 8006e34:	ffffdfff 	.word	0xffffdfff
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40014400 	.word	0x40014400
 8006e40:	40014800 	.word	0x40014800
 8006e44:	ffffbfff 	.word	0xffffbfff

08006e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e48:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e4c:	4c10      	ldr	r4, [pc, #64]	@ (8006e90 <TIM_OC5_SetConfig+0x48>)
 8006e4e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e50:	4a10      	ldr	r2, [pc, #64]	@ (8006e94 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e52:	4023      	ands	r3, r4
 8006e54:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006e56:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8006e58:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e5a:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e5c:	680a      	ldr	r2, [r1, #0]
 8006e5e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e60:	4a0d      	ldr	r2, [pc, #52]	@ (8006e98 <TIM_OC5_SetConfig+0x50>)
 8006e62:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e64:	688a      	ldr	r2, [r1, #8]
 8006e66:	0412      	lsls	r2, r2, #16
 8006e68:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	4e0c      	ldr	r6, [pc, #48]	@ (8006e9c <TIM_OC5_SetConfig+0x54>)
 8006e6c:	42b0      	cmp	r0, r6
 8006e6e:	d005      	beq.n	8006e7c <TIM_OC5_SetConfig+0x34>
 8006e70:	4e0b      	ldr	r6, [pc, #44]	@ (8006ea0 <TIM_OC5_SetConfig+0x58>)
 8006e72:	42b0      	cmp	r0, r6
 8006e74:	d002      	beq.n	8006e7c <TIM_OC5_SetConfig+0x34>
 8006e76:	4e0b      	ldr	r6, [pc, #44]	@ (8006ea4 <TIM_OC5_SetConfig+0x5c>)
 8006e78:	42b0      	cmp	r0, r6
 8006e7a:	d103      	bne.n	8006e84 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e7c:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e7e:	694b      	ldr	r3, [r1, #20]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e84:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e86:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006e88:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8006e8a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8c:	6202      	str	r2, [r0, #32]
}
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	fffeffff 	.word	0xfffeffff
 8006e94:	fffeff8f 	.word	0xfffeff8f
 8006e98:	fffdffff 	.word	0xfffdffff
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800

08006ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eaa:	4a12      	ldr	r2, [pc, #72]	@ (8006ef4 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8006eac:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006eb0:	4d11      	ldr	r5, [pc, #68]	@ (8006ef8 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006eb6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8006eb8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006eba:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ebc:	680d      	ldr	r5, [r1, #0]
 8006ebe:	022d      	lsls	r5, r5, #8
 8006ec0:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8006efc <TIM_OC6_SetConfig+0x54>)
 8006ec4:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ec6:	688a      	ldr	r2, [r1, #8]
 8006ec8:	0512      	lsls	r2, r2, #20
 8006eca:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ecc:	4c0c      	ldr	r4, [pc, #48]	@ (8006f00 <TIM_OC6_SetConfig+0x58>)
 8006ece:	42a0      	cmp	r0, r4
 8006ed0:	d005      	beq.n	8006ede <TIM_OC6_SetConfig+0x36>
 8006ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8006f04 <TIM_OC6_SetConfig+0x5c>)
 8006ed4:	42a0      	cmp	r0, r4
 8006ed6:	d002      	beq.n	8006ede <TIM_OC6_SetConfig+0x36>
 8006ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8006f08 <TIM_OC6_SetConfig+0x60>)
 8006eda:	42a0      	cmp	r0, r4
 8006edc:	d104      	bne.n	8006ee8 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ede:	4c0b      	ldr	r4, [pc, #44]	@ (8006f0c <TIM_OC6_SetConfig+0x64>)
 8006ee0:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ee2:	694b      	ldr	r3, [r1, #20]
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee8:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006eea:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006eec:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8006eee:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef0:	6202      	str	r2, [r0, #32]
}
 8006ef2:	bd30      	pop	{r4, r5, pc}
 8006ef4:	ffefffff 	.word	0xffefffff
 8006ef8:	feff8fff 	.word	0xfeff8fff
 8006efc:	ffdfffff 	.word	0xffdfffff
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	40014400 	.word	0x40014400
 8006f08:	40014800 	.word	0x40014800
 8006f0c:	fffbffff 	.word	0xfffbffff

08006f10 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8006f10:	4770      	bx	lr

08006f12 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_IC_MspInit>:
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8006f14:	4770      	bx	lr

08006f16 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8006f18:	4770      	bx	lr

08006f1a <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006f1a:	4770      	bx	lr

08006f1c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006f1c:	4770      	bx	lr

08006f1e <HAL_TIM_IC_CaptureHalfCpltCallback>:
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006f20:	4770      	bx	lr

08006f22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006f24:	4770      	bx	lr

08006f26 <HAL_TIM_TriggerHalfCpltCallback>:
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006f2c:	0001      	movs	r1, r0
{
 8006f2e:	0003      	movs	r3, r0
    return HAL_ERROR;
 8006f30:	2001      	movs	r0, #1
{
 8006f32:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8006f34:	313d      	adds	r1, #61	@ 0x3d
 8006f36:	780c      	ldrb	r4, [r1, #0]
 8006f38:	b2e2      	uxtb	r2, r4
 8006f3a:	4284      	cmp	r4, r0
 8006f3c:	d119      	bne.n	8006f72 <HAL_TIM_Base_Start+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3e:	1800      	adds	r0, r0, r0
 8006f40:	7008      	strb	r0, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	490c      	ldr	r1, [pc, #48]	@ (8006f78 <HAL_TIM_Base_Start+0x4c>)
 8006f46:	428b      	cmp	r3, r1
 8006f48:	d006      	beq.n	8006f58 <HAL_TIM_Base_Start+0x2c>
 8006f4a:	2180      	movs	r1, #128	@ 0x80
 8006f4c:	05c9      	lsls	r1, r1, #23
 8006f4e:	428b      	cmp	r3, r1
 8006f50:	d002      	beq.n	8006f58 <HAL_TIM_Base_Start+0x2c>
 8006f52:	490a      	ldr	r1, [pc, #40]	@ (8006f7c <HAL_TIM_Base_Start+0x50>)
 8006f54:	428b      	cmp	r3, r1
 8006f56:	d10d      	bne.n	8006f74 <HAL_TIM_Base_Start+0x48>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	4909      	ldr	r1, [pc, #36]	@ (8006f80 <HAL_TIM_Base_Start+0x54>)
 8006f5c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5e:	2a06      	cmp	r2, #6
 8006f60:	d006      	beq.n	8006f70 <HAL_TIM_Base_Start+0x44>
 8006f62:	3907      	subs	r1, #7
 8006f64:	428a      	cmp	r2, r1
 8006f66:	d003      	beq.n	8006f70 <HAL_TIM_Base_Start+0x44>
      __HAL_TIM_ENABLE(htim);
 8006f68:	2201      	movs	r2, #1
 8006f6a:	6819      	ldr	r1, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006f70:	2000      	movs	r0, #0
}
 8006f72:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8006f74:	6819      	ldr	r1, [r3, #0]
 8006f76:	e7f9      	b.n	8006f6c <HAL_TIM_Base_Start+0x40>
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	00010007 	.word	0x00010007

08006f84 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006f84:	0001      	movs	r1, r0
{
 8006f86:	0003      	movs	r3, r0
    return HAL_ERROR;
 8006f88:	2001      	movs	r0, #1
{
 8006f8a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8006f8c:	313d      	adds	r1, #61	@ 0x3d
 8006f8e:	780c      	ldrb	r4, [r1, #0]
 8006f90:	b2e2      	uxtb	r2, r4
 8006f92:	4284      	cmp	r4, r0
 8006f94:	d11c      	bne.n	8006fd0 <HAL_TIM_Base_Start_IT+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f96:	1800      	adds	r0, r0, r0
 8006f98:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68d9      	ldr	r1, [r3, #12]
 8006f9e:	4311      	orrs	r1, r2
 8006fa0:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa2:	490d      	ldr	r1, [pc, #52]	@ (8006fd8 <HAL_TIM_Base_Start_IT+0x54>)
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	d006      	beq.n	8006fb6 <HAL_TIM_Base_Start_IT+0x32>
 8006fa8:	2180      	movs	r1, #128	@ 0x80
 8006faa:	05c9      	lsls	r1, r1, #23
 8006fac:	428b      	cmp	r3, r1
 8006fae:	d002      	beq.n	8006fb6 <HAL_TIM_Base_Start_IT+0x32>
 8006fb0:	490a      	ldr	r1, [pc, #40]	@ (8006fdc <HAL_TIM_Base_Start_IT+0x58>)
 8006fb2:	428b      	cmp	r3, r1
 8006fb4:	d10d      	bne.n	8006fd2 <HAL_TIM_Base_Start_IT+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	4909      	ldr	r1, [pc, #36]	@ (8006fe0 <HAL_TIM_Base_Start_IT+0x5c>)
 8006fba:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fbc:	2a06      	cmp	r2, #6
 8006fbe:	d006      	beq.n	8006fce <HAL_TIM_Base_Start_IT+0x4a>
 8006fc0:	3907      	subs	r1, #7
 8006fc2:	428a      	cmp	r2, r1
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_Base_Start_IT+0x4a>
      __HAL_TIM_ENABLE(htim);
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	6819      	ldr	r1, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006fce:	2000      	movs	r0, #0
}
 8006fd0:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	e7f9      	b.n	8006fca <HAL_TIM_Base_Start_IT+0x46>
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	00010007 	.word	0x00010007

08006fe4 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fe4:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8006fe6:	6803      	ldr	r3, [r0, #0]
{
 8006fe8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006fea:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fec:	691e      	ldr	r6, [r3, #16]
{
 8006fee:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ff0:	4216      	tst	r6, r2
 8006ff2:	d010      	beq.n	8007016 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ff4:	4215      	tst	r5, r2
 8006ff6:	d00e      	beq.n	8007016 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ff8:	3a05      	subs	r2, #5
 8006ffa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ffc:	3204      	adds	r2, #4
 8006ffe:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	079b      	lsls	r3, r3, #30
 8007004:	d100      	bne.n	8007008 <HAL_TIM_IRQHandler+0x24>
 8007006:	e090      	b.n	800712a <HAL_TIM_IRQHandler+0x146>
          htim->IC_CaptureCallback(htim);
 8007008:	0003      	movs	r3, r0
 800700a:	3394      	adds	r3, #148	@ 0x94
          htim->PWM_PulseFinishedCallback(htim);
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	0020      	movs	r0, r4
 8007010:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007012:	2300      	movs	r3, #0
 8007014:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007016:	2304      	movs	r3, #4
 8007018:	421e      	tst	r6, r3
 800701a:	d014      	beq.n	8007046 <HAL_TIM_IRQHandler+0x62>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800701c:	421d      	tst	r5, r3
 800701e:	d012      	beq.n	8007046 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007020:	2205      	movs	r2, #5
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	4252      	negs	r2, r2
 8007026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007028:	3207      	adds	r2, #7
 800702a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	23c0      	movs	r3, #192	@ 0xc0
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	421a      	tst	r2, r3
 8007034:	d100      	bne.n	8007038 <HAL_TIM_IRQHandler+0x54>
 8007036:	e07f      	b.n	8007138 <HAL_TIM_IRQHandler+0x154>
        htim->IC_CaptureCallback(htim);
 8007038:	0023      	movs	r3, r4
 800703a:	3394      	adds	r3, #148	@ 0x94
        htim->PWM_PulseFinishedCallback(htim);
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	0020      	movs	r0, r4
 8007040:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007042:	2300      	movs	r3, #0
 8007044:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007046:	2308      	movs	r3, #8
 8007048:	421e      	tst	r6, r3
 800704a:	d012      	beq.n	8007072 <HAL_TIM_IRQHandler+0x8e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800704c:	421d      	tst	r5, r3
 800704e:	d010      	beq.n	8007072 <HAL_TIM_IRQHandler+0x8e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007050:	2209      	movs	r2, #9
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	4252      	negs	r2, r2
 8007056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007058:	320d      	adds	r2, #13
 800705a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	079b      	lsls	r3, r3, #30
 8007060:	d100      	bne.n	8007064 <HAL_TIM_IRQHandler+0x80>
 8007062:	e071      	b.n	8007148 <HAL_TIM_IRQHandler+0x164>
        htim->IC_CaptureCallback(htim);
 8007064:	0023      	movs	r3, r4
 8007066:	3394      	adds	r3, #148	@ 0x94
        htim->PWM_PulseFinishedCallback(htim);
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	0020      	movs	r0, r4
 800706c:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706e:	2300      	movs	r3, #0
 8007070:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007072:	2310      	movs	r3, #16
 8007074:	421e      	tst	r6, r3
 8007076:	d013      	beq.n	80070a0 <HAL_TIM_IRQHandler+0xbc>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007078:	421d      	tst	r5, r3
 800707a:	d011      	beq.n	80070a0 <HAL_TIM_IRQHandler+0xbc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800707c:	2211      	movs	r2, #17
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	4252      	negs	r2, r2
 8007082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007084:	3219      	adds	r2, #25
 8007086:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007088:	69da      	ldr	r2, [r3, #28]
 800708a:	23c0      	movs	r3, #192	@ 0xc0
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	421a      	tst	r2, r3
 8007090:	d062      	beq.n	8007158 <HAL_TIM_IRQHandler+0x174>
        htim->IC_CaptureCallback(htim);
 8007092:	0023      	movs	r3, r4
 8007094:	3394      	adds	r3, #148	@ 0x94
        htim->PWM_PulseFinishedCallback(htim);
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	0020      	movs	r0, r4
 800709a:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709c:	2300      	movs	r3, #0
 800709e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070a0:	2301      	movs	r3, #1
 80070a2:	421e      	tst	r6, r3
 80070a4:	d00a      	beq.n	80070bc <HAL_TIM_IRQHandler+0xd8>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070a6:	421d      	tst	r5, r3
 80070a8:	d008      	beq.n	80070bc <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80070aa:	2202      	movs	r2, #2
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	4252      	negs	r2, r2
 80070b0:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 80070b2:	0023      	movs	r3, r4
 80070b4:	3308      	adds	r3, #8
 80070b6:	0020      	movs	r0, r4
 80070b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070ba:	4798      	blx	r3
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80070bc:	2382      	movs	r3, #130	@ 0x82
 80070be:	019b      	lsls	r3, r3, #6
 80070c0:	421e      	tst	r6, r3
 80070c2:	d009      	beq.n	80070d8 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070c4:	062b      	lsls	r3, r5, #24
 80070c6:	d507      	bpl.n	80070d8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	4a27      	ldr	r2, [pc, #156]	@ (8007168 <HAL_TIM_IRQHandler+0x184>)
      htim->BreakCallback(htim);
 80070cc:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80070ce:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 80070d0:	0023      	movs	r3, r4
 80070d2:	33b4      	adds	r3, #180	@ 0xb4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070d8:	05f3      	lsls	r3, r6, #23
 80070da:	d509      	bpl.n	80070f0 <HAL_TIM_IRQHandler+0x10c>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070dc:	062b      	lsls	r3, r5, #24
 80070de:	d507      	bpl.n	80070f0 <HAL_TIM_IRQHandler+0x10c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	4a22      	ldr	r2, [pc, #136]	@ (800716c <HAL_TIM_IRQHandler+0x188>)
      htim->Break2Callback(htim);
 80070e4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070e6:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 80070e8:	0023      	movs	r3, r4
 80070ea:	33b8      	adds	r3, #184	@ 0xb8
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070f0:	2340      	movs	r3, #64	@ 0x40
 80070f2:	421e      	tst	r6, r3
 80070f4:	d00a      	beq.n	800710c <HAL_TIM_IRQHandler+0x128>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070f6:	421d      	tst	r5, r3
 80070f8:	d008      	beq.n	800710c <HAL_TIM_IRQHandler+0x128>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070fa:	2241      	movs	r2, #65	@ 0x41
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	4252      	negs	r2, r2
 8007100:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8007102:	0023      	movs	r3, r4
 8007104:	338c      	adds	r3, #140	@ 0x8c
 8007106:	0020      	movs	r0, r4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800710c:	2320      	movs	r3, #32
 800710e:	421e      	tst	r6, r3
 8007110:	d00a      	beq.n	8007128 <HAL_TIM_IRQHandler+0x144>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007112:	421d      	tst	r5, r3
 8007114:	d008      	beq.n	8007128 <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007116:	2221      	movs	r2, #33	@ 0x21
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	4252      	negs	r2, r2
 800711c:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 800711e:	0023      	movs	r3, r4
 8007120:	33ac      	adds	r3, #172	@ 0xac
 8007122:	0020      	movs	r0, r4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4798      	blx	r3
}
 8007128:	bd70      	pop	{r4, r5, r6, pc}
          htim->OC_DelayElapsedCallback(htim);
 800712a:	0003      	movs	r3, r0
 800712c:	339c      	adds	r3, #156	@ 0x9c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007132:	0023      	movs	r3, r4
 8007134:	33a0      	adds	r3, #160	@ 0xa0
 8007136:	e769      	b.n	800700c <HAL_TIM_IRQHandler+0x28>
        htim->OC_DelayElapsedCallback(htim);
 8007138:	0023      	movs	r3, r4
 800713a:	339c      	adds	r3, #156	@ 0x9c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	0020      	movs	r0, r4
 8007140:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007142:	0023      	movs	r3, r4
 8007144:	33a0      	adds	r3, #160	@ 0xa0
 8007146:	e779      	b.n	800703c <HAL_TIM_IRQHandler+0x58>
        htim->OC_DelayElapsedCallback(htim);
 8007148:	0023      	movs	r3, r4
 800714a:	339c      	adds	r3, #156	@ 0x9c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	0020      	movs	r0, r4
 8007150:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007152:	0023      	movs	r3, r4
 8007154:	33a0      	adds	r3, #160	@ 0xa0
 8007156:	e787      	b.n	8007068 <HAL_TIM_IRQHandler+0x84>
        htim->OC_DelayElapsedCallback(htim);
 8007158:	0023      	movs	r3, r4
 800715a:	339c      	adds	r3, #156	@ 0x9c
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	0020      	movs	r0, r4
 8007160:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007162:	0023      	movs	r3, r4
 8007164:	33a0      	adds	r3, #160	@ 0xa0
 8007166:	e796      	b.n	8007096 <HAL_TIM_IRQHandler+0xb2>
 8007168:	ffffdf7f 	.word	0xffffdf7f
 800716c:	fffffeff 	.word	0xfffffeff

08007170 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8007170:	2908      	cmp	r1, #8
 8007172:	d011      	beq.n	8007198 <HAL_TIM_ReadCapturedValue+0x28>
 8007174:	d805      	bhi.n	8007182 <HAL_TIM_ReadCapturedValue+0x12>
 8007176:	2900      	cmp	r1, #0
 8007178:	d008      	beq.n	800718c <HAL_TIM_ReadCapturedValue+0x1c>
 800717a:	2904      	cmp	r1, #4
 800717c:	d009      	beq.n	8007192 <HAL_TIM_ReadCapturedValue+0x22>
 800717e:	2000      	movs	r0, #0
}
 8007180:	4770      	bx	lr
  switch (Channel)
 8007182:	290c      	cmp	r1, #12
 8007184:	d1fb      	bne.n	800717e <HAL_TIM_ReadCapturedValue+0xe>
      tmpreg =   htim->Instance->CCR4;
 8007186:	6803      	ldr	r3, [r0, #0]
 8007188:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  return tmpreg;
 800718a:	e7f9      	b.n	8007180 <HAL_TIM_ReadCapturedValue+0x10>
      tmpreg =  htim->Instance->CCR1;
 800718c:	6803      	ldr	r3, [r0, #0]
 800718e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8007190:	e7f6      	b.n	8007180 <HAL_TIM_ReadCapturedValue+0x10>
      tmpreg =   htim->Instance->CCR2;
 8007192:	6803      	ldr	r3, [r0, #0]
 8007194:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8007196:	e7f3      	b.n	8007180 <HAL_TIM_ReadCapturedValue+0x10>
      tmpreg =   htim->Instance->CCR3;
 8007198:	6803      	ldr	r3, [r0, #0]
 800719a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 800719c:	e7f0      	b.n	8007180 <HAL_TIM_ReadCapturedValue+0x10>

0800719e <HAL_TIM_RegisterCallback>:
{
 800719e:	0003      	movs	r3, r0
 80071a0:	b530      	push	{r4, r5, lr}
 80071a2:	0008      	movs	r0, r1
    return HAL_ERROR;
 80071a4:	2101      	movs	r1, #1
  if (pCallback == NULL)
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	d01d      	beq.n	80071e6 <HAL_TIM_RegisterCallback+0x48>
  if (htim->State == HAL_TIM_STATE_READY)
 80071aa:	001c      	movs	r4, r3
 80071ac:	343d      	adds	r4, #61	@ 0x3d
 80071ae:	7825      	ldrb	r5, [r4, #0]
 80071b0:	b2e9      	uxtb	r1, r5
 80071b2:	2d01      	cmp	r5, #1
 80071b4:	d131      	bne.n	800721a <HAL_TIM_RegisterCallback+0x7c>
    switch (CallbackID)
 80071b6:	281b      	cmp	r0, #27
 80071b8:	d815      	bhi.n	80071e6 <HAL_TIM_RegisterCallback+0x48>
 80071ba:	f7f8 ffaf 	bl	800011c <__gnu_thumb1_case_uqi>
 80071be:	3f3d      	.short	0x3f3d
 80071c0:	47454341 	.word	0x47454341
 80071c4:	4f4d4b49 	.word	0x4f4d4b49
 80071c8:	550f5351 	.word	0x550f5351
 80071cc:	1816110e 	.word	0x1816110e
 80071d0:	201e1c1a 	.word	0x201e1c1a
 80071d4:	28262422 	.word	0x28262422
 80071d8:	2c2a      	.short	0x2c2a
        htim->PeriodElapsedCallback                = pCallback;
 80071da:	3308      	adds	r3, #8
        htim->HallSensor_MspDeInitCallback = pCallback;
 80071dc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80071de:	e001      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80071e0:	3388      	adds	r3, #136	@ 0x88
        htim->Break2Callback                       = pCallback;
 80071e2:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071e4:	2100      	movs	r1, #0
}
 80071e6:	0008      	movs	r0, r1
 80071e8:	bd30      	pop	{r4, r5, pc}
        htim->TriggerCallback                      = pCallback;
 80071ea:	338c      	adds	r3, #140	@ 0x8c
 80071ec:	e7f9      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->TriggerHalfCpltCallback              = pCallback;
 80071ee:	3390      	adds	r3, #144	@ 0x90
 80071f0:	e7f7      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->IC_CaptureCallback                   = pCallback;
 80071f2:	3394      	adds	r3, #148	@ 0x94
 80071f4:	e7f5      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80071f6:	3398      	adds	r3, #152	@ 0x98
 80071f8:	e7f3      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->OC_DelayElapsedCallback              = pCallback;
 80071fa:	339c      	adds	r3, #156	@ 0x9c
 80071fc:	e7f1      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->PWM_PulseFinishedCallback            = pCallback;
 80071fe:	33a0      	adds	r3, #160	@ 0xa0
 8007200:	e7ef      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007202:	33a4      	adds	r3, #164	@ 0xa4
 8007204:	e7ed      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->ErrorCallback                        = pCallback;
 8007206:	33a8      	adds	r3, #168	@ 0xa8
 8007208:	e7eb      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->CommutationCallback                  = pCallback;
 800720a:	33ac      	adds	r3, #172	@ 0xac
 800720c:	e7e9      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->CommutationHalfCpltCallback          = pCallback;
 800720e:	33b0      	adds	r3, #176	@ 0xb0
 8007210:	e7e7      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->BreakCallback                        = pCallback;
 8007212:	33b4      	adds	r3, #180	@ 0xb4
 8007214:	e7e5      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
        htim->Break2Callback                       = pCallback;
 8007216:	33b8      	adds	r3, #184	@ 0xb8
 8007218:	e7e3      	b.n	80071e2 <HAL_TIM_RegisterCallback+0x44>
  else if (htim->State == HAL_TIM_STATE_RESET)
 800721a:	7824      	ldrb	r4, [r4, #0]
    return HAL_ERROR;
 800721c:	2101      	movs	r1, #1
  else if (htim->State == HAL_TIM_STATE_RESET)
 800721e:	2c00      	cmp	r4, #0
 8007220:	d1e1      	bne.n	80071e6 <HAL_TIM_RegisterCallback+0x48>
    switch (CallbackID)
 8007222:	280d      	cmp	r0, #13
 8007224:	d8df      	bhi.n	80071e6 <HAL_TIM_RegisterCallback+0x48>
 8007226:	f7f8 ff6f 	bl	8000108 <__gnu_thumb1_case_sqi>
 800722a:	0907      	.short	0x0907
 800722c:	110f0d0b 	.word	0x110f0d0b
 8007230:	19171513 	.word	0x19171513
 8007234:	1fd91d1b 	.word	0x1fd91d1b
        htim->Base_MspInitCallback         = pCallback;
 8007238:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800723a:	e7d3      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->Base_MspDeInitCallback       = pCallback;
 800723c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800723e:	e7d1      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->IC_MspInitCallback           = pCallback;
 8007240:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007242:	e7cf      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->IC_MspDeInitCallback         = pCallback;
 8007244:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007246:	e7cd      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->OC_MspInitCallback           = pCallback;
 8007248:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800724a:	e7cb      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->OC_MspDeInitCallback         = pCallback;
 800724c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800724e:	e7c9      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->PWM_MspInitCallback          = pCallback;
 8007250:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007252:	e7c7      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->PWM_MspDeInitCallback        = pCallback;
 8007254:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007256:	e7c5      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->OnePulse_MspInitCallback     = pCallback;
 8007258:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800725a:	e7c3      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800725c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800725e:	e7c1      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->Encoder_MspInitCallback      = pCallback;
 8007260:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007262:	e7bf      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007264:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007266:	e7bd      	b.n	80071e4 <HAL_TIM_RegisterCallback+0x46>
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007268:	3304      	adds	r3, #4
 800726a:	e7b7      	b.n	80071dc <HAL_TIM_RegisterCallback+0x3e>

0800726c <TIM_Base_SetConfig>:
{
 800726c:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800726e:	4c1c      	ldr	r4, [pc, #112]	@ (80072e0 <TIM_Base_SetConfig+0x74>)
  tmpcr1 = TIMx->CR1;
 8007270:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007272:	42a0      	cmp	r0, r4
 8007274:	d006      	beq.n	8007284 <TIM_Base_SetConfig+0x18>
 8007276:	2280      	movs	r2, #128	@ 0x80
 8007278:	05d2      	lsls	r2, r2, #23
 800727a:	4290      	cmp	r0, r2
 800727c:	d002      	beq.n	8007284 <TIM_Base_SetConfig+0x18>
 800727e:	4a19      	ldr	r2, [pc, #100]	@ (80072e4 <TIM_Base_SetConfig+0x78>)
 8007280:	4290      	cmp	r0, r2
 8007282:	d108      	bne.n	8007296 <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007284:	2270      	movs	r2, #112	@ 0x70
 8007286:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8007288:	684a      	ldr	r2, [r1, #4]
 800728a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800728c:	4a16      	ldr	r2, [pc, #88]	@ (80072e8 <TIM_Base_SetConfig+0x7c>)
 800728e:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007290:	68cb      	ldr	r3, [r1, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	e008      	b.n	80072a8 <TIM_Base_SetConfig+0x3c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007296:	4a15      	ldr	r2, [pc, #84]	@ (80072ec <TIM_Base_SetConfig+0x80>)
 8007298:	4290      	cmp	r0, r2
 800729a:	d0f7      	beq.n	800728c <TIM_Base_SetConfig+0x20>
 800729c:	4a14      	ldr	r2, [pc, #80]	@ (80072f0 <TIM_Base_SetConfig+0x84>)
 800729e:	4290      	cmp	r0, r2
 80072a0:	d0f4      	beq.n	800728c <TIM_Base_SetConfig+0x20>
 80072a2:	4a14      	ldr	r2, [pc, #80]	@ (80072f4 <TIM_Base_SetConfig+0x88>)
 80072a4:	4290      	cmp	r0, r2
 80072a6:	d0f1      	beq.n	800728c <TIM_Base_SetConfig+0x20>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072a8:	2280      	movs	r2, #128	@ 0x80
 80072aa:	4393      	bics	r3, r2
 80072ac:	694a      	ldr	r2, [r1, #20]
 80072ae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80072b0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b2:	688b      	ldr	r3, [r1, #8]
 80072b4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80072b6:	680b      	ldr	r3, [r1, #0]
 80072b8:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072ba:	42a0      	cmp	r0, r4
 80072bc:	d005      	beq.n	80072ca <TIM_Base_SetConfig+0x5e>
 80072be:	4b0c      	ldr	r3, [pc, #48]	@ (80072f0 <TIM_Base_SetConfig+0x84>)
 80072c0:	4298      	cmp	r0, r3
 80072c2:	d002      	beq.n	80072ca <TIM_Base_SetConfig+0x5e>
 80072c4:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <TIM_Base_SetConfig+0x88>)
 80072c6:	4298      	cmp	r0, r3
 80072c8:	d101      	bne.n	80072ce <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 80072ca:	690b      	ldr	r3, [r1, #16]
 80072cc:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80072ce:	2201      	movs	r2, #1
 80072d0:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072d2:	6903      	ldr	r3, [r0, #16]
 80072d4:	4213      	tst	r3, r2
 80072d6:	d002      	beq.n	80072de <TIM_Base_SetConfig+0x72>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072d8:	6903      	ldr	r3, [r0, #16]
 80072da:	4393      	bics	r3, r2
 80072dc:	6103      	str	r3, [r0, #16]
}
 80072de:	bd10      	pop	{r4, pc}
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40000400 	.word	0x40000400
 80072e8:	fffffcff 	.word	0xfffffcff
 80072ec:	40002000 	.word	0x40002000
 80072f0:	40014400 	.word	0x40014400
 80072f4:	40014800 	.word	0x40014800

080072f8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f8:	2210      	movs	r2, #16
{
 80072fa:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80072fc:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072fe:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007300:	4c16      	ldr	r4, [pc, #88]	@ (800735c <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007302:	4393      	bics	r3, r2
 8007304:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007306:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007308:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800730a:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	680c      	ldr	r4, [r1, #0]
 800730e:	0224      	lsls	r4, r4, #8
 8007310:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8007312:	2320      	movs	r3, #32
 8007314:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007316:	688b      	ldr	r3, [r1, #8]
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800731c:	4d10      	ldr	r5, [pc, #64]	@ (8007360 <TIM_OC2_SetConfig+0x68>)
 800731e:	42a8      	cmp	r0, r5
 8007320:	d10f      	bne.n	8007342 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007322:	2580      	movs	r5, #128	@ 0x80
 8007324:	43ab      	bics	r3, r5
 8007326:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007328:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 800732a:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007330:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007332:	4d0c      	ldr	r5, [pc, #48]	@ (8007364 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007334:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007336:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007338:	694a      	ldr	r2, [r1, #20]
 800733a:	4332      	orrs	r2, r6
 800733c:	0092      	lsls	r2, r2, #2
 800733e:	432a      	orrs	r2, r5
 8007340:	e005      	b.n	800734e <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007342:	4d09      	ldr	r5, [pc, #36]	@ (8007368 <TIM_OC2_SetConfig+0x70>)
 8007344:	42a8      	cmp	r0, r5
 8007346:	d0f4      	beq.n	8007332 <TIM_OC2_SetConfig+0x3a>
 8007348:	4d08      	ldr	r5, [pc, #32]	@ (800736c <TIM_OC2_SetConfig+0x74>)
 800734a:	42a8      	cmp	r0, r5
 800734c:	d0f1      	beq.n	8007332 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800734e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8007350:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007352:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007354:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8007356:	6203      	str	r3, [r0, #32]
}
 8007358:	bd70      	pop	{r4, r5, r6, pc}
 800735a:	46c0      	nop			@ (mov r8, r8)
 800735c:	feff8cff 	.word	0xfeff8cff
 8007360:	40012c00 	.word	0x40012c00
 8007364:	fffff3ff 	.word	0xfffff3ff
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800

08007370 <HAL_TIM_OC_ConfigChannel>:
{
 8007370:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8007372:	0004      	movs	r4, r0
 8007374:	343c      	adds	r4, #60	@ 0x3c
 8007376:	7825      	ldrb	r5, [r4, #0]
{
 8007378:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800737a:	2002      	movs	r0, #2
 800737c:	2d01      	cmp	r5, #1
 800737e:	d00b      	beq.n	8007398 <HAL_TIM_OC_ConfigChannel+0x28>
  switch (Channel)
 8007380:	2a0c      	cmp	r2, #12
 8007382:	d01f      	beq.n	80073c4 <HAL_TIM_OC_ConfigChannel+0x54>
 8007384:	d809      	bhi.n	800739a <HAL_TIM_OC_ConfigChannel+0x2a>
 8007386:	2a04      	cmp	r2, #4
 8007388:	d014      	beq.n	80073b4 <HAL_TIM_OC_ConfigChannel+0x44>
 800738a:	2a08      	cmp	r2, #8
 800738c:	d016      	beq.n	80073bc <HAL_TIM_OC_ConfigChannel+0x4c>
 800738e:	2a00      	cmp	r2, #0
 8007390:	d00b      	beq.n	80073aa <HAL_TIM_OC_ConfigChannel+0x3a>
 8007392:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007394:	2300      	movs	r3, #0
 8007396:	7023      	strb	r3, [r4, #0]
}
 8007398:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800739a:	2a10      	cmp	r2, #16
 800739c:	d016      	beq.n	80073cc <HAL_TIM_OC_ConfigChannel+0x5c>
 800739e:	2a14      	cmp	r2, #20
 80073a0:	d1f7      	bne.n	8007392 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	f7ff fd80 	bl	8006ea8 <TIM_OC6_SetConfig>
      break;
 80073a8:	e002      	b.n	80073b0 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	f7ff fca0 	bl	8006cf0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80073b0:	2000      	movs	r0, #0
 80073b2:	e7ef      	b.n	8007394 <HAL_TIM_OC_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f7ff ff9f 	bl	80072f8 <TIM_OC2_SetConfig>
      break;
 80073ba:	e7f9      	b.n	80073b0 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	f7ff fccd 	bl	8006d5c <TIM_OC3_SetConfig>
      break;
 80073c2:	e7f5      	b.n	80073b0 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	f7ff fd0b 	bl	8006de0 <TIM_OC4_SetConfig>
      break;
 80073ca:	e7f1      	b.n	80073b0 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	f7ff fd3b 	bl	8006e48 <TIM_OC5_SetConfig>
      break;
 80073d2:	e7ed      	b.n	80073b0 <HAL_TIM_OC_ConfigChannel+0x40>

080073d4 <HAL_TIM_PWM_ConfigChannel>:
{
 80073d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80073d6:	0007      	movs	r7, r0
 80073d8:	373c      	adds	r7, #60	@ 0x3c
{
 80073da:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 80073dc:	783a      	ldrb	r2, [r7, #0]
{
 80073de:	0003      	movs	r3, r0
 80073e0:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80073e2:	2002      	movs	r0, #2
 80073e4:	2a01      	cmp	r2, #1
 80073e6:	d00c      	beq.n	8007402 <HAL_TIM_PWM_ConfigChannel+0x2e>
 80073e8:	3801      	subs	r0, #1
 80073ea:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 80073ec:	2d0c      	cmp	r5, #12
 80073ee:	d051      	beq.n	8007494 <HAL_TIM_PWM_ConfigChannel+0xc0>
 80073f0:	d808      	bhi.n	8007404 <HAL_TIM_PWM_ConfigChannel+0x30>
 80073f2:	2d04      	cmp	r5, #4
 80073f4:	d02d      	beq.n	8007452 <HAL_TIM_PWM_ConfigChannel+0x7e>
 80073f6:	2d08      	cmp	r5, #8
 80073f8:	d03c      	beq.n	8007474 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	d017      	beq.n	800742e <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 80073fe:	2300      	movs	r3, #0
 8007400:	703b      	strb	r3, [r7, #0]
}
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8007404:	2d10      	cmp	r5, #16
 8007406:	d058      	beq.n	80074ba <HAL_TIM_PWM_ConfigChannel+0xe6>
 8007408:	2d14      	cmp	r5, #20
 800740a:	d1f8      	bne.n	80073fe <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800740c:	681d      	ldr	r5, [r3, #0]
 800740e:	0028      	movs	r0, r5
 8007410:	f7ff fd4a 	bl	8006ea8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007414:	2380      	movs	r3, #128	@ 0x80
 8007416:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	4313      	orrs	r3, r2
 800741c:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800741e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8007420:	4a2e      	ldr	r2, [pc, #184]	@ (80074dc <HAL_TIM_PWM_ConfigChannel+0x108>)
 8007422:	4013      	ands	r3, r2
 8007424:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007426:	6923      	ldr	r3, [r4, #16]
 8007428:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	e053      	b.n	80074d6 <HAL_TIM_PWM_ConfigChannel+0x102>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800742e:	681d      	ldr	r5, [r3, #0]
 8007430:	0028      	movs	r0, r5
 8007432:	f7ff fc5d 	bl	8006cf0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007436:	2308      	movs	r3, #8
 8007438:	69aa      	ldr	r2, [r5, #24]
 800743a:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800743c:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800743e:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007440:	69ab      	ldr	r3, [r5, #24]
 8007442:	4393      	bics	r3, r2
 8007444:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007446:	69ab      	ldr	r3, [r5, #24]
 8007448:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800744a:	4313      	orrs	r3, r2
 800744c:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2000      	movs	r0, #0
 8007450:	e7d5      	b.n	80073fe <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007452:	681d      	ldr	r5, [r3, #0]
 8007454:	0028      	movs	r0, r5
 8007456:	f7ff ff4f 	bl	80072f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800745a:	2380      	movs	r3, #128	@ 0x80
 800745c:	69aa      	ldr	r2, [r5, #24]
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	4313      	orrs	r3, r2
 8007462:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007464:	69ab      	ldr	r3, [r5, #24]
 8007466:	4a1d      	ldr	r2, [pc, #116]	@ (80074dc <HAL_TIM_PWM_ConfigChannel+0x108>)
 8007468:	4013      	ands	r3, r2
 800746a:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	69aa      	ldr	r2, [r5, #24]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	e7ea      	b.n	800744a <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007474:	681e      	ldr	r6, [r3, #0]
 8007476:	0030      	movs	r0, r6
 8007478:	f7ff fc70 	bl	8006d5c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800747c:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800747e:	69f3      	ldr	r3, [r6, #28]
 8007480:	431d      	orrs	r5, r3
 8007482:	61f5      	str	r5, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007484:	69f3      	ldr	r3, [r6, #28]
 8007486:	4393      	bics	r3, r2
 8007488:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800748a:	69f3      	ldr	r3, [r6, #28]
 800748c:	6922      	ldr	r2, [r4, #16]
 800748e:	4313      	orrs	r3, r2
 8007490:	61f3      	str	r3, [r6, #28]
      break;
 8007492:	e7dc      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007494:	681d      	ldr	r5, [r3, #0]
 8007496:	0028      	movs	r0, r5
 8007498:	f7ff fca2 	bl	8006de0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800749c:	2380      	movs	r3, #128	@ 0x80
 800749e:	69ea      	ldr	r2, [r5, #28]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074a6:	69eb      	ldr	r3, [r5, #28]
 80074a8:	4a0c      	ldr	r2, [pc, #48]	@ (80074dc <HAL_TIM_PWM_ConfigChannel+0x108>)
 80074aa:	4013      	ands	r3, r2
 80074ac:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	69ea      	ldr	r2, [r5, #28]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	4313      	orrs	r3, r2
 80074b6:	61eb      	str	r3, [r5, #28]
      break;
 80074b8:	e7c9      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074ba:	681d      	ldr	r5, [r3, #0]
 80074bc:	0028      	movs	r0, r5
 80074be:	f7ff fcc3 	bl	8006e48 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074c2:	2308      	movs	r3, #8
 80074c4:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80074c6:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074c8:	2204      	movs	r2, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074ca:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074cc:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80074ce:	4393      	bics	r3, r2
 80074d0:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074d2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80074d4:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074d6:	4313      	orrs	r3, r2
 80074d8:	656b      	str	r3, [r5, #84]	@ 0x54
      break;
 80074da:	e7b8      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x7a>
 80074dc:	fffffbff 	.word	0xfffffbff

080074e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074e2:	2601      	movs	r6, #1
  tmpccer = TIMx->CCER;
 80074e4:	6a04      	ldr	r4, [r0, #32]
{
 80074e6:	0015      	movs	r5, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074e8:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074ea:	4f0f      	ldr	r7, [pc, #60]	@ (8007528 <TIM_TI1_SetConfig+0x48>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ec:	43b2      	bics	r2, r6
 80074ee:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074f0:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074f2:	42b8      	cmp	r0, r7
 80074f4:	d014      	beq.n	8007520 <TIM_TI1_SetConfig+0x40>
 80074f6:	2780      	movs	r7, #128	@ 0x80
 80074f8:	05ff      	lsls	r7, r7, #23
 80074fa:	42b8      	cmp	r0, r7
 80074fc:	d010      	beq.n	8007520 <TIM_TI1_SetConfig+0x40>
 80074fe:	4f0b      	ldr	r7, [pc, #44]	@ (800752c <TIM_TI1_SetConfig+0x4c>)
 8007500:	42b8      	cmp	r0, r7
 8007502:	d00d      	beq.n	8007520 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007504:	4332      	orrs	r2, r6
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007506:	25f0      	movs	r5, #240	@ 0xf0
 8007508:	43aa      	bics	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	350f      	adds	r5, #15
 800750e:	402b      	ands	r3, r5
 8007510:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007512:	220a      	movs	r2, #10
 8007514:	4394      	bics	r4, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007516:	4011      	ands	r1, r2
 8007518:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800751a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800751c:	6201      	str	r1, [r0, #32]
}
 800751e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007520:	2603      	movs	r6, #3
 8007522:	43b2      	bics	r2, r6
    tmpccmr1 |= TIM_ICSelection;
 8007524:	432a      	orrs	r2, r5
 8007526:	e7ee      	b.n	8007506 <TIM_TI1_SetConfig+0x26>
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40000400 	.word	0x40000400

08007530 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8007530:	0003      	movs	r3, r0
{
 8007532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007534:	333c      	adds	r3, #60	@ 0x3c
{
 8007536:	9001      	str	r0, [sp, #4]
 8007538:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 800753a:	7819      	ldrb	r1, [r3, #0]
 800753c:	2002      	movs	r0, #2
 800753e:	2901      	cmp	r1, #1
 8007540:	d00c      	beq.n	800755c <HAL_TIM_IC_ConfigChannel+0x2c>
 8007542:	3801      	subs	r0, #1
 8007544:	7018      	strb	r0, [r3, #0]
  if (Channel == TIM_CHANNEL_1)
 8007546:	2a08      	cmp	r2, #8
 8007548:	d067      	beq.n	800761a <HAL_TIM_IC_ConfigChannel+0xea>
 800754a:	d808      	bhi.n	800755e <HAL_TIM_IC_ConfigChannel+0x2e>
 800754c:	2a00      	cmp	r2, #0
 800754e:	d02d      	beq.n	80075ac <HAL_TIM_IC_ConfigChannel+0x7c>
 8007550:	2a04      	cmp	r2, #4
 8007552:	d03d      	beq.n	80075d0 <HAL_TIM_IC_ConfigChannel+0xa0>
  __HAL_UNLOCK(htim);
 8007554:	2300      	movs	r3, #0
 8007556:	9d01      	ldr	r5, [sp, #4]
 8007558:	353c      	adds	r5, #60	@ 0x3c
 800755a:	702b      	strb	r3, [r5, #0]
}
 800755c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800755e:	2a0c      	cmp	r2, #12
 8007560:	d1f8      	bne.n	8007554 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8007562:	9b01      	ldr	r3, [sp, #4]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007564:	4d40      	ldr	r5, [pc, #256]	@ (8007668 <HAL_TIM_IC_ConfigChannel+0x138>)
    TIM_TI4_SetConfig(htim->Instance,
 8007566:	681b      	ldr	r3, [r3, #0]
                      sConfig->ICPolarity,
 8007568:	6822      	ldr	r2, [r4, #0]
  tmpccer = TIMx->CCER;
 800756a:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800756c:	6a1f      	ldr	r7, [r3, #32]
                      sConfig->ICSelection,
 800756e:	6860      	ldr	r0, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007570:	402f      	ands	r7, r5
                      sConfig->ICFilter);
 8007572:	68e1      	ldr	r1, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007574:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007576:	69df      	ldr	r7, [r3, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007578:	4d3c      	ldr	r5, [pc, #240]	@ (800766c <HAL_TIM_IC_ConfigChannel+0x13c>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800757a:	0200      	lsls	r0, r0, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800757c:	402f      	ands	r7, r5
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800757e:	4338      	orrs	r0, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007580:	4f3b      	ldr	r7, [pc, #236]	@ (8007670 <HAL_TIM_IC_ConfigChannel+0x140>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007582:	0709      	lsls	r1, r1, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007584:	4038      	ands	r0, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007586:	0c09      	lsrs	r1, r1, #16
 8007588:	4301      	orrs	r1, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800758a:	483a      	ldr	r0, [pc, #232]	@ (8007674 <HAL_TIM_IC_ConfigChannel+0x144>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800758c:	0312      	lsls	r2, r2, #12
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800758e:	4006      	ands	r6, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007590:	20a0      	movs	r0, #160	@ 0xa0
 8007592:	0200      	lsls	r0, r0, #8
 8007594:	4002      	ands	r2, r0
 8007596:	4332      	orrs	r2, r6

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007598:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800759a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	4936      	ldr	r1, [pc, #216]	@ (8007678 <HAL_TIM_IC_ConfigChannel+0x148>)
 80075a0:	400a      	ands	r2, r1
 80075a2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075a4:	68a2      	ldr	r2, [r4, #8]
 80075a6:	69d9      	ldr	r1, [r3, #28]
 80075a8:	0212      	lsls	r2, r2, #8
 80075aa:	e05a      	b.n	8007662 <HAL_TIM_IC_ConfigChannel+0x132>
    TIM_TI1_SetConfig(htim->Instance,
 80075ac:	9b01      	ldr	r3, [sp, #4]
 80075ae:	6862      	ldr	r2, [r4, #4]
 80075b0:	681e      	ldr	r6, [r3, #0]
 80075b2:	6821      	ldr	r1, [r4, #0]
 80075b4:	68e3      	ldr	r3, [r4, #12]
 80075b6:	0030      	movs	r0, r6
 80075b8:	f7ff ff92 	bl	80074e0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80075bc:	220c      	movs	r2, #12
 80075be:	69b3      	ldr	r3, [r6, #24]
 80075c0:	4393      	bics	r3, r2
 80075c2:	61b3      	str	r3, [r6, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80075c4:	69b3      	ldr	r3, [r6, #24]
 80075c6:	68a2      	ldr	r2, [r4, #8]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61b3      	str	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80075cc:	2000      	movs	r0, #0
 80075ce:	e7c1      	b.n	8007554 <HAL_TIM_IC_ConfigChannel+0x24>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d0:	2510      	movs	r5, #16
    TIM_TI2_SetConfig(htim->Instance,
 80075d2:	9b01      	ldr	r3, [sp, #4]
                      sConfig->ICPolarity,
 80075d4:	6822      	ldr	r2, [r4, #0]
    TIM_TI2_SetConfig(htim->Instance,
 80075d6:	681b      	ldr	r3, [r3, #0]
                      sConfig->ICSelection,
 80075d8:	6860      	ldr	r0, [r4, #4]
  tmpccer = TIMx->CCER;
 80075da:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075dc:	6a1f      	ldr	r7, [r3, #32]
                      sConfig->ICFilter);
 80075de:	68e1      	ldr	r1, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075e0:	43af      	bics	r7, r5
 80075e2:	621f      	str	r7, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075e4:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075e6:	4d21      	ldr	r5, [pc, #132]	@ (800766c <HAL_TIM_IC_ConfigChannel+0x13c>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075e8:	0200      	lsls	r0, r0, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075ea:	402f      	ands	r7, r5
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075ec:	4338      	orrs	r0, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ee:	4f20      	ldr	r7, [pc, #128]	@ (8007670 <HAL_TIM_IC_ConfigChannel+0x140>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075f0:	0709      	lsls	r1, r1, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075f2:	4038      	ands	r0, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075f4:	0c09      	lsrs	r1, r1, #16
 80075f6:	4301      	orrs	r1, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075f8:	20a0      	movs	r0, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075fa:	0112      	lsls	r2, r2, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075fc:	4386      	bics	r6, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075fe:	4002      	ands	r2, r0
 8007600:	4332      	orrs	r2, r6
  TIMx->CCMR1 = tmpccmr1 ;
 8007602:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007604:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007606:	699a      	ldr	r2, [r3, #24]
 8007608:	491b      	ldr	r1, [pc, #108]	@ (8007678 <HAL_TIM_IC_ConfigChannel+0x148>)
 800760a:	400a      	ands	r2, r1
 800760c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800760e:	68a2      	ldr	r2, [r4, #8]
 8007610:	6999      	ldr	r1, [r3, #24]
 8007612:	0212      	lsls	r2, r2, #8
 8007614:	430a      	orrs	r2, r1
 8007616:	619a      	str	r2, [r3, #24]
 8007618:	e7d8      	b.n	80075cc <HAL_TIM_IC_ConfigChannel+0x9c>
    TIM_TI3_SetConfig(htim->Instance,
 800761a:	9b01      	ldr	r3, [sp, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800761c:	4d17      	ldr	r5, [pc, #92]	@ (800767c <HAL_TIM_IC_ConfigChannel+0x14c>)
    TIM_TI3_SetConfig(htim->Instance,
 800761e:	681b      	ldr	r3, [r3, #0]
                      sConfig->ICPolarity,
 8007620:	6822      	ldr	r2, [r4, #0]
  tmpccer = TIMx->CCER;
 8007622:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007624:	6a1f      	ldr	r7, [r3, #32]
                      sConfig->ICSelection,
 8007626:	6860      	ldr	r0, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007628:	402f      	ands	r7, r5
                      sConfig->ICFilter);
 800762a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800762c:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800762e:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007630:	3505      	adds	r5, #5
 8007632:	35ff      	adds	r5, #255	@ 0xff
 8007634:	43af      	bics	r7, r5
  tmpccmr2 |= TIM_ICSelection;
 8007636:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007638:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800763a:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800763c:	43b8      	bics	r0, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800763e:	370f      	adds	r7, #15
 8007640:	4039      	ands	r1, r7
 8007642:	4301      	orrs	r1, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007644:	480e      	ldr	r0, [pc, #56]	@ (8007680 <HAL_TIM_IC_ConfigChannel+0x150>)
  TIMx->CCMR2 = tmpccmr2;
 8007646:	61d9      	str	r1, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007648:	4030      	ands	r0, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800764a:	26a0      	movs	r6, #160	@ 0xa0
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800764c:	210c      	movs	r1, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800764e:	0212      	lsls	r2, r2, #8
 8007650:	0136      	lsls	r6, r6, #4
 8007652:	4032      	ands	r2, r6
 8007654:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8007656:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007658:	69da      	ldr	r2, [r3, #28]
 800765a:	438a      	bics	r2, r1
 800765c:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007662:	430a      	orrs	r2, r1
 8007664:	61da      	str	r2, [r3, #28]
 8007666:	e7b1      	b.n	80075cc <HAL_TIM_IC_ConfigChannel+0x9c>
 8007668:	ffffefff 	.word	0xffffefff
 800766c:	fffffcff 	.word	0xfffffcff
 8007670:	ffff0fff 	.word	0xffff0fff
 8007674:	ffff5fff 	.word	0xffff5fff
 8007678:	fffff3ff 	.word	0xfffff3ff
 800767c:	fffffeff 	.word	0xfffffeff
 8007680:	fffff5ff 	.word	0xfffff5ff

08007684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007684:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007686:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007688:	4d03      	ldr	r5, [pc, #12]	@ (8007698 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800768a:	430a      	orrs	r2, r1
 800768c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800768e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007690:	4313      	orrs	r3, r2
 8007692:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007694:	6083      	str	r3, [r0, #8]
}
 8007696:	bd30      	pop	{r4, r5, pc}
 8007698:	ffff00ff 	.word	0xffff00ff

0800769c <HAL_TIM_ConfigClockSource>:
{
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800769e:	0005      	movs	r5, r0
 80076a0:	2202      	movs	r2, #2
 80076a2:	353c      	adds	r5, #60	@ 0x3c
 80076a4:	782c      	ldrb	r4, [r5, #0]
{
 80076a6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80076a8:	0010      	movs	r0, r2
 80076aa:	2c01      	cmp	r4, #1
 80076ac:	d01b      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80076ae:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80076b0:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80076b2:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 80076b4:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80076b6:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80076b8:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076ba:	4a41      	ldr	r2, [pc, #260]	@ (80077c0 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 80076bc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076be:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80076c0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80076c2:	680b      	ldr	r3, [r1, #0]
 80076c4:	2b60      	cmp	r3, #96	@ 0x60
 80076c6:	d04e      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0xca>
 80076c8:	d82d      	bhi.n	8007726 <HAL_TIM_ConfigClockSource+0x8a>
 80076ca:	2b40      	cmp	r3, #64	@ 0x40
 80076cc:	d062      	beq.n	8007794 <HAL_TIM_ConfigClockSource+0xf8>
 80076ce:	d813      	bhi.n	80076f8 <HAL_TIM_ConfigClockSource+0x5c>
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d00b      	beq.n	80076ec <HAL_TIM_ConfigClockSource+0x50>
 80076d4:	d808      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x4c>
 80076d6:	2210      	movs	r2, #16
 80076d8:	0019      	movs	r1, r3
 80076da:	4391      	bics	r1, r2
 80076dc:	d006      	beq.n	80076ec <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80076de:	2301      	movs	r3, #1
 80076e0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80076e2:	2300      	movs	r3, #0
 80076e4:	702b      	strb	r3, [r5, #0]
}
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80076e8:	2b30      	cmp	r3, #48	@ 0x30
 80076ea:	d1f8      	bne.n	80076de <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr = TIMx->SMCR;
 80076ec:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ee:	4935      	ldr	r1, [pc, #212]	@ (80077c4 <HAL_TIM_ConfigClockSource+0x128>)
 80076f0:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076f2:	4313      	orrs	r3, r2
 80076f4:	2207      	movs	r2, #7
 80076f6:	e028      	b.n	800774a <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80076f8:	2b50      	cmp	r3, #80	@ 0x50
 80076fa:	d1f0      	bne.n	80076de <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 80076fc:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80076fe:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8007700:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007702:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007704:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007706:	4387      	bics	r7, r0
 8007708:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800770a:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800770c:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800770e:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007710:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007712:	200a      	movs	r0, #10
 8007714:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8007716:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007718:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800771a:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800771c:	4b29      	ldr	r3, [pc, #164]	@ (80077c4 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 800771e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007720:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007722:	2357      	movs	r3, #87	@ 0x57
 8007724:	e011      	b.n	800774a <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8007726:	2280      	movs	r2, #128	@ 0x80
 8007728:	0152      	lsls	r2, r2, #5
 800772a:	4293      	cmp	r3, r2
 800772c:	d00f      	beq.n	800774e <HAL_TIM_ConfigClockSource+0xb2>
 800772e:	2280      	movs	r2, #128	@ 0x80
 8007730:	0192      	lsls	r2, r2, #6
 8007732:	4293      	cmp	r3, r2
 8007734:	d00d      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0xb6>
 8007736:	2b70      	cmp	r3, #112	@ 0x70
 8007738:	d1d1      	bne.n	80076de <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800773a:	68cb      	ldr	r3, [r1, #12]
 800773c:	684a      	ldr	r2, [r1, #4]
 800773e:	0020      	movs	r0, r4
 8007740:	6889      	ldr	r1, [r1, #8]
 8007742:	f7ff ff9f 	bl	8007684 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007746:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8007748:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800774a:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 800774c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800774e:	2000      	movs	r0, #0
 8007750:	e7c5      	b.n	80076de <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8007752:	68cb      	ldr	r3, [r1, #12]
 8007754:	684a      	ldr	r2, [r1, #4]
 8007756:	0020      	movs	r0, r4
 8007758:	6889      	ldr	r1, [r1, #8]
 800775a:	f7ff ff93 	bl	8007684 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800775e:	2380      	movs	r3, #128	@ 0x80
 8007760:	68a2      	ldr	r2, [r4, #8]
 8007762:	01db      	lsls	r3, r3, #7
 8007764:	e7f1      	b.n	800774a <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007766:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8007768:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800776a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800776c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776e:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007770:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007772:	43b8      	bics	r0, r7
 8007774:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007776:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007778:	4f13      	ldr	r7, [pc, #76]	@ (80077c8 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800777a:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800777c:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800777e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007780:	20a0      	movs	r0, #160	@ 0xa0
 8007782:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007784:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8007786:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8007788:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800778a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800778c:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <HAL_TIM_ConfigClockSource+0x128>)
 800778e:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007790:	2367      	movs	r3, #103	@ 0x67
 8007792:	e7da      	b.n	800774a <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8007794:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007796:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8007798:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800779a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800779c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800779e:	4387      	bics	r7, r0
 80077a0:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077a2:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80077a4:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077a6:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077a8:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077aa:	200a      	movs	r0, #10
 80077ac:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80077ae:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80077b0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80077b2:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80077b4:	4b03      	ldr	r3, [pc, #12]	@ (80077c4 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 80077b6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80077b8:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ba:	2347      	movs	r3, #71	@ 0x47
 80077bc:	e7c5      	b.n	800774a <HAL_TIM_ConfigClockSource+0xae>
 80077be:	46c0      	nop			@ (mov r8, r8)
 80077c0:	ffce0088 	.word	0xffce0088
 80077c4:	ffcfff8f 	.word	0xffcfff8f
 80077c8:	ffff0fff 	.word	0xffff0fff

080077cc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077cc:	231f      	movs	r3, #31
{
 80077ce:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077d0:	2401      	movs	r4, #1
 80077d2:	4019      	ands	r1, r3
 80077d4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077d6:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80077d8:	6a03      	ldr	r3, [r0, #32]
 80077da:	43a3      	bics	r3, r4
 80077dc:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077de:	6a03      	ldr	r3, [r0, #32]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	6202      	str	r2, [r0, #32]
}
 80077e4:	bd10      	pop	{r4, pc}
	...

080077e8 <HAL_TIM_OC_Start>:
{
 80077e8:	0002      	movs	r2, r0
 80077ea:	b510      	push	{r4, lr}
 80077ec:	2908      	cmp	r1, #8
 80077ee:	d01c      	beq.n	800782a <HAL_TIM_OC_Start+0x42>
 80077f0:	d806      	bhi.n	8007800 <HAL_TIM_OC_Start+0x18>
 80077f2:	2900      	cmp	r1, #0
 80077f4:	d00b      	beq.n	800780e <HAL_TIM_OC_Start+0x26>
 80077f6:	2904      	cmp	r1, #4
 80077f8:	d014      	beq.n	8007824 <HAL_TIM_OC_Start+0x3c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077fa:	0013      	movs	r3, r2
 80077fc:	3343      	adds	r3, #67	@ 0x43
 80077fe:	e008      	b.n	8007812 <HAL_TIM_OC_Start+0x2a>
 8007800:	290c      	cmp	r1, #12
 8007802:	d015      	beq.n	8007830 <HAL_TIM_OC_Start+0x48>
 8007804:	2910      	cmp	r1, #16
 8007806:	d1f8      	bne.n	80077fa <HAL_TIM_OC_Start+0x12>
 8007808:	0003      	movs	r3, r0
 800780a:	3342      	adds	r3, #66	@ 0x42
 800780c:	e001      	b.n	8007812 <HAL_TIM_OC_Start+0x2a>
 800780e:	0003      	movs	r3, r0
 8007810:	333e      	adds	r3, #62	@ 0x3e
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	3b01      	subs	r3, #1
 8007816:	1e58      	subs	r0, r3, #1
 8007818:	4183      	sbcs	r3, r0
 800781a:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 800781c:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <HAL_TIM_OC_Start+0x4e>
}
 8007822:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007824:	0003      	movs	r3, r0
 8007826:	333f      	adds	r3, #63	@ 0x3f
 8007828:	e7f3      	b.n	8007812 <HAL_TIM_OC_Start+0x2a>
 800782a:	0003      	movs	r3, r0
 800782c:	3340      	adds	r3, #64	@ 0x40
 800782e:	e7f0      	b.n	8007812 <HAL_TIM_OC_Start+0x2a>
 8007830:	0003      	movs	r3, r0
 8007832:	3341      	adds	r3, #65	@ 0x41
 8007834:	e7ed      	b.n	8007812 <HAL_TIM_OC_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007836:	2302      	movs	r3, #2
 8007838:	2908      	cmp	r1, #8
 800783a:	d030      	beq.n	800789e <HAL_TIM_OC_Start+0xb6>
 800783c:	d806      	bhi.n	800784c <HAL_TIM_OC_Start+0x64>
 800783e:	2900      	cmp	r1, #0
 8007840:	d00b      	beq.n	800785a <HAL_TIM_OC_Start+0x72>
 8007842:	2904      	cmp	r1, #4
 8007844:	d028      	beq.n	8007898 <HAL_TIM_OC_Start+0xb0>
 8007846:	0010      	movs	r0, r2
 8007848:	3043      	adds	r0, #67	@ 0x43
 800784a:	e008      	b.n	800785e <HAL_TIM_OC_Start+0x76>
 800784c:	290c      	cmp	r1, #12
 800784e:	d029      	beq.n	80078a4 <HAL_TIM_OC_Start+0xbc>
 8007850:	2910      	cmp	r1, #16
 8007852:	d1f8      	bne.n	8007846 <HAL_TIM_OC_Start+0x5e>
 8007854:	0010      	movs	r0, r2
 8007856:	3042      	adds	r0, #66	@ 0x42
 8007858:	e001      	b.n	800785e <HAL_TIM_OC_Start+0x76>
 800785a:	0010      	movs	r0, r2
 800785c:	303e      	adds	r0, #62	@ 0x3e
 800785e:	7003      	strb	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007860:	6814      	ldr	r4, [r2, #0]
 8007862:	2201      	movs	r2, #1
 8007864:	0020      	movs	r0, r4
 8007866:	f7ff ffb1 	bl	80077cc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800786a:	4a18      	ldr	r2, [pc, #96]	@ (80078cc <HAL_TIM_OC_Start+0xe4>)
 800786c:	4294      	cmp	r4, r2
 800786e:	d005      	beq.n	800787c <HAL_TIM_OC_Start+0x94>
 8007870:	4b17      	ldr	r3, [pc, #92]	@ (80078d0 <HAL_TIM_OC_Start+0xe8>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d002      	beq.n	800787c <HAL_TIM_OC_Start+0x94>
 8007876:	4b17      	ldr	r3, [pc, #92]	@ (80078d4 <HAL_TIM_OC_Start+0xec>)
 8007878:	429c      	cmp	r4, r3
 800787a:	d116      	bne.n	80078aa <HAL_TIM_OC_Start+0xc2>
    __HAL_TIM_MOE_ENABLE(htim);
 800787c:	2380      	movs	r3, #128	@ 0x80
 800787e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	430b      	orrs	r3, r1
 8007884:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007886:	4294      	cmp	r4, r2
 8007888:	d116      	bne.n	80078b8 <HAL_TIM_OC_Start+0xd0>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	4a12      	ldr	r2, [pc, #72]	@ (80078d8 <HAL_TIM_OC_Start+0xf0>)
 800788e:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007890:	2b06      	cmp	r3, #6
 8007892:	d116      	bne.n	80078c2 <HAL_TIM_OC_Start+0xda>
  return HAL_OK;
 8007894:	2000      	movs	r0, #0
 8007896:	e7c4      	b.n	8007822 <HAL_TIM_OC_Start+0x3a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007898:	0010      	movs	r0, r2
 800789a:	303f      	adds	r0, #63	@ 0x3f
 800789c:	e7df      	b.n	800785e <HAL_TIM_OC_Start+0x76>
 800789e:	0010      	movs	r0, r2
 80078a0:	3040      	adds	r0, #64	@ 0x40
 80078a2:	e7dc      	b.n	800785e <HAL_TIM_OC_Start+0x76>
 80078a4:	0010      	movs	r0, r2
 80078a6:	3041      	adds	r0, #65	@ 0x41
 80078a8:	e7d9      	b.n	800785e <HAL_TIM_OC_Start+0x76>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078aa:	2380      	movs	r3, #128	@ 0x80
 80078ac:	05db      	lsls	r3, r3, #23
 80078ae:	429c      	cmp	r4, r3
 80078b0:	d0eb      	beq.n	800788a <HAL_TIM_OC_Start+0xa2>
 80078b2:	4b0a      	ldr	r3, [pc, #40]	@ (80078dc <HAL_TIM_OC_Start+0xf4>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	d0e8      	beq.n	800788a <HAL_TIM_OC_Start+0xa2>
      __HAL_TIM_ENABLE(htim);
 80078b8:	2301      	movs	r3, #1
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	4313      	orrs	r3, r2
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	e7e8      	b.n	8007894 <HAL_TIM_OC_Start+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c2:	2280      	movs	r2, #128	@ 0x80
 80078c4:	0252      	lsls	r2, r2, #9
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d1f6      	bne.n	80078b8 <HAL_TIM_OC_Start+0xd0>
 80078ca:	e7e3      	b.n	8007894 <HAL_TIM_OC_Start+0xac>
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40014400 	.word	0x40014400
 80078d4:	40014800 	.word	0x40014800
 80078d8:	00010007 	.word	0x00010007
 80078dc:	40000400 	.word	0x40000400

080078e0 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80078e0:	b510      	push	{r4, lr}
 80078e2:	f7ff ff81 	bl	80077e8 <HAL_TIM_OC_Start>
 80078e6:	bd10      	pop	{r4, pc}

080078e8 <HAL_TIM_OC_Start_IT>:
{
 80078e8:	b510      	push	{r4, lr}
 80078ea:	2908      	cmp	r1, #8
 80078ec:	d01c      	beq.n	8007928 <HAL_TIM_OC_Start_IT+0x40>
 80078ee:	d806      	bhi.n	80078fe <HAL_TIM_OC_Start_IT+0x16>
 80078f0:	2900      	cmp	r1, #0
 80078f2:	d00b      	beq.n	800790c <HAL_TIM_OC_Start_IT+0x24>
 80078f4:	2904      	cmp	r1, #4
 80078f6:	d014      	beq.n	8007922 <HAL_TIM_OC_Start_IT+0x3a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078f8:	0003      	movs	r3, r0
 80078fa:	3343      	adds	r3, #67	@ 0x43
 80078fc:	e008      	b.n	8007910 <HAL_TIM_OC_Start_IT+0x28>
 80078fe:	290c      	cmp	r1, #12
 8007900:	d015      	beq.n	800792e <HAL_TIM_OC_Start_IT+0x46>
 8007902:	2910      	cmp	r1, #16
 8007904:	d1f8      	bne.n	80078f8 <HAL_TIM_OC_Start_IT+0x10>
 8007906:	0003      	movs	r3, r0
 8007908:	3342      	adds	r3, #66	@ 0x42
 800790a:	e001      	b.n	8007910 <HAL_TIM_OC_Start_IT+0x28>
 800790c:	0003      	movs	r3, r0
 800790e:	333e      	adds	r3, #62	@ 0x3e
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	3b01      	subs	r3, #1
 8007914:	1e5a      	subs	r2, r3, #1
 8007916:	4193      	sbcs	r3, r2
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <HAL_TIM_OC_Start_IT+0x4c>
    return HAL_ERROR;
 800791e:	2001      	movs	r0, #1
 8007920:	e03b      	b.n	800799a <HAL_TIM_OC_Start_IT+0xb2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007922:	0003      	movs	r3, r0
 8007924:	333f      	adds	r3, #63	@ 0x3f
 8007926:	e7f3      	b.n	8007910 <HAL_TIM_OC_Start_IT+0x28>
 8007928:	0003      	movs	r3, r0
 800792a:	3340      	adds	r3, #64	@ 0x40
 800792c:	e7f0      	b.n	8007910 <HAL_TIM_OC_Start_IT+0x28>
 800792e:	0003      	movs	r3, r0
 8007930:	3341      	adds	r3, #65	@ 0x41
 8007932:	e7ed      	b.n	8007910 <HAL_TIM_OC_Start_IT+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007934:	2302      	movs	r3, #2
 8007936:	2908      	cmp	r1, #8
 8007938:	d038      	beq.n	80079ac <HAL_TIM_OC_Start_IT+0xc4>
 800793a:	d805      	bhi.n	8007948 <HAL_TIM_OC_Start_IT+0x60>
 800793c:	2900      	cmp	r1, #0
 800793e:	d00a      	beq.n	8007956 <HAL_TIM_OC_Start_IT+0x6e>
 8007940:	2904      	cmp	r1, #4
 8007942:	d02b      	beq.n	800799c <HAL_TIM_OC_Start_IT+0xb4>
 8007944:	3043      	adds	r0, #67	@ 0x43
 8007946:	e004      	b.n	8007952 <HAL_TIM_OC_Start_IT+0x6a>
 8007948:	290c      	cmp	r1, #12
 800794a:	d032      	beq.n	80079b2 <HAL_TIM_OC_Start_IT+0xca>
 800794c:	2910      	cmp	r1, #16
 800794e:	d1f9      	bne.n	8007944 <HAL_TIM_OC_Start_IT+0x5c>
 8007950:	3042      	adds	r0, #66	@ 0x42
 8007952:	7003      	strb	r3, [r0, #0]
  switch (Channel)
 8007954:	e7e3      	b.n	800791e <HAL_TIM_OC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007956:	0002      	movs	r2, r0
 8007958:	323e      	adds	r2, #62	@ 0x3e
 800795a:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800795c:	6804      	ldr	r4, [r0, #0]
 800795e:	68e2      	ldr	r2, [r4, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60e3      	str	r3, [r4, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007964:	6804      	ldr	r4, [r0, #0]
 8007966:	2201      	movs	r2, #1
 8007968:	0020      	movs	r0, r4
 800796a:	f7ff ff2f 	bl	80077cc <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800796e:	4a1d      	ldr	r2, [pc, #116]	@ (80079e4 <HAL_TIM_OC_Start_IT+0xfc>)
 8007970:	4294      	cmp	r4, r2
 8007972:	d005      	beq.n	8007980 <HAL_TIM_OC_Start_IT+0x98>
 8007974:	4b1c      	ldr	r3, [pc, #112]	@ (80079e8 <HAL_TIM_OC_Start_IT+0x100>)
 8007976:	429c      	cmp	r4, r3
 8007978:	d002      	beq.n	8007980 <HAL_TIM_OC_Start_IT+0x98>
 800797a:	4b1c      	ldr	r3, [pc, #112]	@ (80079ec <HAL_TIM_OC_Start_IT+0x104>)
 800797c:	429c      	cmp	r4, r3
 800797e:	d120      	bne.n	80079c2 <HAL_TIM_OC_Start_IT+0xda>
      __HAL_TIM_MOE_ENABLE(htim);
 8007980:	2380      	movs	r3, #128	@ 0x80
 8007982:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	430b      	orrs	r3, r1
 8007988:	6463      	str	r3, [r4, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800798a:	4294      	cmp	r4, r2
 800798c:	d120      	bne.n	80079d0 <HAL_TIM_OC_Start_IT+0xe8>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	4a17      	ldr	r2, [pc, #92]	@ (80079f0 <HAL_TIM_OC_Start_IT+0x108>)
 8007992:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007994:	2b06      	cmp	r3, #6
 8007996:	d120      	bne.n	80079da <HAL_TIM_OC_Start_IT+0xf2>
    return HAL_ERROR;
 8007998:	2000      	movs	r0, #0
}
 800799a:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800799c:	0002      	movs	r2, r0
 800799e:	323f      	adds	r2, #63	@ 0x3f
 80079a0:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80079a2:	6802      	ldr	r2, [r0, #0]
 80079a4:	68d3      	ldr	r3, [r2, #12]
 80079a6:	430b      	orrs	r3, r1
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80079a8:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80079aa:	e7db      	b.n	8007964 <HAL_TIM_OC_Start_IT+0x7c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ac:	0002      	movs	r2, r0
 80079ae:	3240      	adds	r2, #64	@ 0x40
 80079b0:	e7f6      	b.n	80079a0 <HAL_TIM_OC_Start_IT+0xb8>
 80079b2:	0002      	movs	r2, r0
 80079b4:	3241      	adds	r2, #65	@ 0x41
 80079b6:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80079b8:	2310      	movs	r3, #16
 80079ba:	6802      	ldr	r2, [r0, #0]
 80079bc:	68d4      	ldr	r4, [r2, #12]
 80079be:	4323      	orrs	r3, r4
 80079c0:	e7f2      	b.n	80079a8 <HAL_TIM_OC_Start_IT+0xc0>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c2:	2380      	movs	r3, #128	@ 0x80
 80079c4:	05db      	lsls	r3, r3, #23
 80079c6:	429c      	cmp	r4, r3
 80079c8:	d0e1      	beq.n	800798e <HAL_TIM_OC_Start_IT+0xa6>
 80079ca:	4b0a      	ldr	r3, [pc, #40]	@ (80079f4 <HAL_TIM_OC_Start_IT+0x10c>)
 80079cc:	429c      	cmp	r4, r3
 80079ce:	d0de      	beq.n	800798e <HAL_TIM_OC_Start_IT+0xa6>
        __HAL_TIM_ENABLE(htim);
 80079d0:	2301      	movs	r3, #1
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	e7de      	b.n	8007998 <HAL_TIM_OC_Start_IT+0xb0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079da:	2280      	movs	r2, #128	@ 0x80
 80079dc:	0252      	lsls	r2, r2, #9
 80079de:	4293      	cmp	r3, r2
 80079e0:	d1f6      	bne.n	80079d0 <HAL_TIM_OC_Start_IT+0xe8>
 80079e2:	e7d9      	b.n	8007998 <HAL_TIM_OC_Start_IT+0xb0>
 80079e4:	40012c00 	.word	0x40012c00
 80079e8:	40014400 	.word	0x40014400
 80079ec:	40014800 	.word	0x40014800
 80079f0:	00010007 	.word	0x00010007
 80079f4:	40000400 	.word	0x40000400

080079f8 <HAL_TIM_OC_Stop_IT>:
{
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	0004      	movs	r4, r0
 80079fc:	000e      	movs	r6, r1
  switch (Channel)
 80079fe:	2908      	cmp	r1, #8
 8007a00:	d011      	beq.n	8007a26 <HAL_TIM_OC_Stop_IT+0x2e>
 8007a02:	d805      	bhi.n	8007a10 <HAL_TIM_OC_Stop_IT+0x18>
 8007a04:	2900      	cmp	r1, #0
 8007a06:	d009      	beq.n	8007a1c <HAL_TIM_OC_Stop_IT+0x24>
 8007a08:	2904      	cmp	r1, #4
 8007a0a:	d00c      	beq.n	8007a26 <HAL_TIM_OC_Stop_IT+0x2e>
 8007a0c:	2001      	movs	r0, #1
}
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8007a10:	290c      	cmp	r1, #12
 8007a12:	d1fb      	bne.n	8007a0c <HAL_TIM_OC_Stop_IT+0x14>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a14:	6802      	ldr	r2, [r0, #0]
 8007a16:	2110      	movs	r1, #16
 8007a18:	68d3      	ldr	r3, [r2, #12]
 8007a1a:	e002      	b.n	8007a22 <HAL_TIM_OC_Stop_IT+0x2a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a1c:	2102      	movs	r1, #2
 8007a1e:	6802      	ldr	r2, [r0, #0]
 8007a20:	68d3      	ldr	r3, [r2, #12]
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a22:	438b      	bics	r3, r1
 8007a24:	e002      	b.n	8007a2c <HAL_TIM_OC_Stop_IT+0x34>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	68d3      	ldr	r3, [r2, #12]
 8007a2a:	43b3      	bics	r3, r6
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a2c:	6825      	ldr	r5, [r4, #0]
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a2e:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a30:	0031      	movs	r1, r6
 8007a32:	2200      	movs	r2, #0
 8007a34:	0028      	movs	r0, r5
 8007a36:	f7ff fec9 	bl	80077cc <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a3a:	4b18      	ldr	r3, [pc, #96]	@ (8007a9c <HAL_TIM_OC_Stop_IT+0xa4>)
 8007a3c:	4a18      	ldr	r2, [pc, #96]	@ (8007aa0 <HAL_TIM_OC_Stop_IT+0xa8>)
 8007a3e:	429d      	cmp	r5, r3
 8007a40:	d005      	beq.n	8007a4e <HAL_TIM_OC_Stop_IT+0x56>
 8007a42:	4b18      	ldr	r3, [pc, #96]	@ (8007aa4 <HAL_TIM_OC_Stop_IT+0xac>)
 8007a44:	429d      	cmp	r5, r3
 8007a46:	d002      	beq.n	8007a4e <HAL_TIM_OC_Stop_IT+0x56>
 8007a48:	4b17      	ldr	r3, [pc, #92]	@ (8007aa8 <HAL_TIM_OC_Stop_IT+0xb0>)
 8007a4a:	429d      	cmp	r5, r3
 8007a4c:	d10a      	bne.n	8007a64 <HAL_TIM_OC_Stop_IT+0x6c>
      __HAL_TIM_MOE_DISABLE(htim);
 8007a4e:	6a2b      	ldr	r3, [r5, #32]
 8007a50:	4213      	tst	r3, r2
 8007a52:	d107      	bne.n	8007a64 <HAL_TIM_OC_Stop_IT+0x6c>
 8007a54:	6a29      	ldr	r1, [r5, #32]
 8007a56:	4b15      	ldr	r3, [pc, #84]	@ (8007aac <HAL_TIM_OC_Stop_IT+0xb4>)
 8007a58:	4219      	tst	r1, r3
 8007a5a:	d103      	bne.n	8007a64 <HAL_TIM_OC_Stop_IT+0x6c>
 8007a5c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007a5e:	4914      	ldr	r1, [pc, #80]	@ (8007ab0 <HAL_TIM_OC_Stop_IT+0xb8>)
 8007a60:	400b      	ands	r3, r1
 8007a62:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 8007a64:	6a2b      	ldr	r3, [r5, #32]
 8007a66:	4213      	tst	r3, r2
 8007a68:	d107      	bne.n	8007a7a <HAL_TIM_OC_Stop_IT+0x82>
 8007a6a:	6a2a      	ldr	r2, [r5, #32]
 8007a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8007aac <HAL_TIM_OC_Stop_IT+0xb4>)
 8007a6e:	421a      	tst	r2, r3
 8007a70:	d103      	bne.n	8007a7a <HAL_TIM_OC_Stop_IT+0x82>
 8007a72:	2201      	movs	r2, #1
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	4393      	bics	r3, r2
 8007a78:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	d103      	bne.n	8007a88 <HAL_TIM_OC_Stop_IT+0x90>
 8007a80:	343e      	adds	r4, #62	@ 0x3e
  switch (Channel)
 8007a82:	2000      	movs	r0, #0
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a84:	7023      	strb	r3, [r4, #0]
 8007a86:	e7c2      	b.n	8007a0e <HAL_TIM_OC_Stop_IT+0x16>
 8007a88:	2e04      	cmp	r6, #4
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIM_OC_Stop_IT+0x98>
 8007a8c:	343f      	adds	r4, #63	@ 0x3f
 8007a8e:	e7f8      	b.n	8007a82 <HAL_TIM_OC_Stop_IT+0x8a>
 8007a90:	2e08      	cmp	r6, #8
 8007a92:	d101      	bne.n	8007a98 <HAL_TIM_OC_Stop_IT+0xa0>
 8007a94:	3440      	adds	r4, #64	@ 0x40
 8007a96:	e7f4      	b.n	8007a82 <HAL_TIM_OC_Stop_IT+0x8a>
 8007a98:	3441      	adds	r4, #65	@ 0x41
 8007a9a:	e7f2      	b.n	8007a82 <HAL_TIM_OC_Stop_IT+0x8a>
 8007a9c:	40012c00 	.word	0x40012c00
 8007aa0:	00001111 	.word	0x00001111
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800
 8007aac:	00000444 	.word	0x00000444
 8007ab0:	ffff7fff 	.word	0xffff7fff

08007ab4 <HAL_TIM_IC_Start_IT>:
{
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	2908      	cmp	r1, #8
 8007ab8:	d02f      	beq.n	8007b1a <HAL_TIM_IC_Start_IT+0x66>
 8007aba:	d806      	bhi.n	8007aca <HAL_TIM_IC_Start_IT+0x16>
 8007abc:	2900      	cmp	r1, #0
 8007abe:	d00b      	beq.n	8007ad8 <HAL_TIM_IC_Start_IT+0x24>
 8007ac0:	2904      	cmp	r1, #4
 8007ac2:	d023      	beq.n	8007b0c <HAL_TIM_IC_Start_IT+0x58>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	3343      	adds	r3, #67	@ 0x43
 8007ac8:	e030      	b.n	8007b2c <HAL_TIM_IC_Start_IT+0x78>
 8007aca:	290c      	cmp	r1, #12
 8007acc:	d02c      	beq.n	8007b28 <HAL_TIM_IC_Start_IT+0x74>
 8007ace:	2910      	cmp	r1, #16
 8007ad0:	d1f8      	bne.n	8007ac4 <HAL_TIM_IC_Start_IT+0x10>
 8007ad2:	0003      	movs	r3, r0
 8007ad4:	3342      	adds	r3, #66	@ 0x42
 8007ad6:	e029      	b.n	8007b2c <HAL_TIM_IC_Start_IT+0x78>
 8007ad8:	0003      	movs	r3, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ada:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007adc:	333e      	adds	r3, #62	@ 0x3e
 8007ade:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ae0:	3244      	adds	r2, #68	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ae2:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ae4:	7812      	ldrb	r2, [r2, #0]
 8007ae6:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d12d      	bne.n	8007b48 <HAL_TIM_IC_Start_IT+0x94>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007aec:	2a01      	cmp	r2, #1
 8007aee:	d12b      	bne.n	8007b48 <HAL_TIM_IC_Start_IT+0x94>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af0:	3301      	adds	r3, #1
 8007af2:	2908      	cmp	r1, #8
 8007af4:	d058      	beq.n	8007ba8 <HAL_TIM_IC_Start_IT+0xf4>
 8007af6:	d81e      	bhi.n	8007b36 <HAL_TIM_IC_Start_IT+0x82>
 8007af8:	2900      	cmp	r1, #0
 8007afa:	d027      	beq.n	8007b4c <HAL_TIM_IC_Start_IT+0x98>
 8007afc:	2904      	cmp	r1, #4
 8007afe:	d04a      	beq.n	8007b96 <HAL_TIM_IC_Start_IT+0xe2>
 8007b00:	0002      	movs	r2, r0
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b02:	3047      	adds	r0, #71	@ 0x47
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b04:	3243      	adds	r2, #67	@ 0x43
 8007b06:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b08:	7003      	strb	r3, [r0, #0]
  switch (Channel)
 8007b0a:	e01d      	b.n	8007b48 <HAL_TIM_IC_Start_IT+0x94>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b0c:	0003      	movs	r3, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b0e:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b10:	333f      	adds	r3, #63	@ 0x3f
 8007b12:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b14:	3245      	adds	r2, #69	@ 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b16:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b18:	e7e4      	b.n	8007ae4 <HAL_TIM_IC_Start_IT+0x30>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b1a:	0003      	movs	r3, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b1c:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b1e:	3340      	adds	r3, #64	@ 0x40
 8007b20:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b22:	3246      	adds	r2, #70	@ 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b24:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b26:	e7dd      	b.n	8007ae4 <HAL_TIM_IC_Start_IT+0x30>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b28:	0003      	movs	r3, r0
 8007b2a:	3341      	adds	r3, #65	@ 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b2c:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b2e:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b30:	3247      	adds	r2, #71	@ 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b32:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b34:	e7d6      	b.n	8007ae4 <HAL_TIM_IC_Start_IT+0x30>
 8007b36:	0002      	movs	r2, r0
 8007b38:	3247      	adds	r2, #71	@ 0x47
 8007b3a:	290c      	cmp	r1, #12
 8007b3c:	d037      	beq.n	8007bae <HAL_TIM_IC_Start_IT+0xfa>
 8007b3e:	2910      	cmp	r1, #16
 8007b40:	d1de      	bne.n	8007b00 <HAL_TIM_IC_Start_IT+0x4c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b42:	3042      	adds	r0, #66	@ 0x42
 8007b44:	7003      	strb	r3, [r0, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b46:	7013      	strb	r3, [r2, #0]
{
 8007b48:	2001      	movs	r0, #1
 8007b4a:	e023      	b.n	8007b94 <HAL_TIM_IC_Start_IT+0xe0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b4c:	0002      	movs	r2, r0
 8007b4e:	323e      	adds	r2, #62	@ 0x3e
 8007b50:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b52:	7193      	strb	r3, [r2, #6]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b54:	6804      	ldr	r4, [r0, #0]
 8007b56:	68e2      	ldr	r2, [r4, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60e3      	str	r3, [r4, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b5c:	6804      	ldr	r4, [r0, #0]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	0020      	movs	r0, r4
 8007b62:	f7ff fe33 	bl	80077cc <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b66:	4b16      	ldr	r3, [pc, #88]	@ (8007bc0 <HAL_TIM_IC_Start_IT+0x10c>)
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	d006      	beq.n	8007b7a <HAL_TIM_IC_Start_IT+0xc6>
 8007b6c:	2380      	movs	r3, #128	@ 0x80
 8007b6e:	05db      	lsls	r3, r3, #23
 8007b70:	429c      	cmp	r4, r3
 8007b72:	d002      	beq.n	8007b7a <HAL_TIM_IC_Start_IT+0xc6>
 8007b74:	4b13      	ldr	r3, [pc, #76]	@ (8007bc4 <HAL_TIM_IC_Start_IT+0x110>)
 8007b76:	429c      	cmp	r4, r3
 8007b78:	d107      	bne.n	8007b8a <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	4a12      	ldr	r2, [pc, #72]	@ (8007bc8 <HAL_TIM_IC_Start_IT+0x114>)
 8007b7e:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b80:	2b06      	cmp	r3, #6
 8007b82:	d006      	beq.n	8007b92 <HAL_TIM_IC_Start_IT+0xde>
 8007b84:	3a07      	subs	r2, #7
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d003      	beq.n	8007b92 <HAL_TIM_IC_Start_IT+0xde>
        __HAL_TIM_ENABLE(htim);
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	6023      	str	r3, [r4, #0]
{
 8007b92:	2000      	movs	r0, #0
}
 8007b94:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b96:	0002      	movs	r2, r0
 8007b98:	323f      	adds	r2, #63	@ 0x3f
 8007b9a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b9c:	7193      	strb	r3, [r2, #6]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b9e:	6802      	ldr	r2, [r0, #0]
 8007ba0:	68d3      	ldr	r3, [r2, #12]
 8007ba2:	430b      	orrs	r3, r1
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007ba4:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007ba6:	e7d9      	b.n	8007b5c <HAL_TIM_IC_Start_IT+0xa8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ba8:	0002      	movs	r2, r0
 8007baa:	3240      	adds	r2, #64	@ 0x40
 8007bac:	e7f5      	b.n	8007b9a <HAL_TIM_IC_Start_IT+0xe6>
 8007bae:	0004      	movs	r4, r0
 8007bb0:	3441      	adds	r4, #65	@ 0x41
 8007bb2:	7023      	strb	r3, [r4, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bb4:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007bb6:	2310      	movs	r3, #16
 8007bb8:	6802      	ldr	r2, [r0, #0]
 8007bba:	68d4      	ldr	r4, [r2, #12]
 8007bbc:	4323      	orrs	r3, r4
 8007bbe:	e7f1      	b.n	8007ba4 <HAL_TIM_IC_Start_IT+0xf0>
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	00010007 	.word	0x00010007

08007bcc <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007bcc:	0003      	movs	r3, r0
 8007bce:	4a10      	ldr	r2, [pc, #64]	@ (8007c10 <TIM_ResetCallback+0x44>)
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	67da      	str	r2, [r3, #124]	@ 0x7c
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8007c14 <TIM_ResetCallback+0x48>)
 8007bd6:	3380      	adds	r3, #128	@ 0x80
 8007bd8:	601a      	str	r2, [r3, #0]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007bda:	4a0f      	ldr	r2, [pc, #60]	@ (8007c18 <TIM_ResetCallback+0x4c>)
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007bdc:	30b8      	adds	r0, #184	@ 0xb8
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007bde:	605a      	str	r2, [r3, #4]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007be0:	4a0e      	ldr	r2, [pc, #56]	@ (8007c1c <TIM_ResetCallback+0x50>)
 8007be2:	609a      	str	r2, [r3, #8]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007be4:	4a0e      	ldr	r2, [pc, #56]	@ (8007c20 <TIM_ResetCallback+0x54>)
 8007be6:	60da      	str	r2, [r3, #12]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007be8:	4a0e      	ldr	r2, [pc, #56]	@ (8007c24 <TIM_ResetCallback+0x58>)
 8007bea:	611a      	str	r2, [r3, #16]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007bec:	4a0e      	ldr	r2, [pc, #56]	@ (8007c28 <TIM_ResetCallback+0x5c>)
 8007bee:	615a      	str	r2, [r3, #20]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8007c2c <TIM_ResetCallback+0x60>)
 8007bf2:	619a      	str	r2, [r3, #24]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8007c30 <TIM_ResetCallback+0x64>)
 8007bf6:	61da      	str	r2, [r3, #28]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8007c34 <TIM_ResetCallback+0x68>)
 8007bfa:	621a      	str	r2, [r3, #32]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8007c38 <TIM_ResetCallback+0x6c>)
 8007bfe:	625a      	str	r2, [r3, #36]	@ 0x24
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007c00:	4a0e      	ldr	r2, [pc, #56]	@ (8007c3c <TIM_ResetCallback+0x70>)
 8007c02:	629a      	str	r2, [r3, #40]	@ 0x28
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007c04:	4a0e      	ldr	r2, [pc, #56]	@ (8007c40 <TIM_ResetCallback+0x74>)
 8007c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007c08:	4b0e      	ldr	r3, [pc, #56]	@ (8007c44 <TIM_ResetCallback+0x78>)
 8007c0a:	6003      	str	r3, [r0, #0]
}
 8007c0c:	4770      	bx	lr
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	08006f17 	.word	0x08006f17
 8007c14:	08006f19 	.word	0x08006f19
 8007c18:	08006f25 	.word	0x08006f25
 8007c1c:	08006f27 	.word	0x08006f27
 8007c20:	08006f1d 	.word	0x08006f1d
 8007c24:	08006f1f 	.word	0x08006f1f
 8007c28:	08006f1b 	.word	0x08006f1b
 8007c2c:	08006f21 	.word	0x08006f21
 8007c30:	08006f23 	.word	0x08006f23
 8007c34:	08006f29 	.word	0x08006f29
 8007c38:	08007f0d 	.word	0x08007f0d
 8007c3c:	08007f0f 	.word	0x08007f0f
 8007c40:	08007f11 	.word	0x08007f11
 8007c44:	08007f13 	.word	0x08007f13

08007c48 <HAL_TIM_Base_Init>:
{
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007c4c:	2001      	movs	r0, #1
  if (htim == NULL)
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	d02b      	beq.n	8007caa <HAL_TIM_Base_Init+0x62>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007c52:	0025      	movs	r5, r4
 8007c54:	353d      	adds	r5, #61	@ 0x3d
 8007c56:	782b      	ldrb	r3, [r5, #0]
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10d      	bne.n	8007c7a <HAL_TIM_Base_Init+0x32>
    htim->Lock = HAL_UNLOCKED;
 8007c5e:	0023      	movs	r3, r4
 8007c60:	333c      	adds	r3, #60	@ 0x3c
 8007c62:	701a      	strb	r2, [r3, #0]
    TIM_ResetCallback(htim);
 8007c64:	0020      	movs	r0, r4
 8007c66:	f7ff ffb1 	bl	8007bcc <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 8007c6a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_TIM_Base_Init+0x2c>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007c70:	4b0e      	ldr	r3, [pc, #56]	@ (8007cac <HAL_TIM_Base_Init+0x64>)
 8007c72:	64e3      	str	r3, [r4, #76]	@ 0x4c
    htim->Base_MspInitCallback(htim);
 8007c74:	0020      	movs	r0, r4
 8007c76:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007c78:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	1d21      	adds	r1, r4, #4
 8007c82:	f7ff faf3 	bl	800726c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c86:	0022      	movs	r2, r4
 8007c88:	2301      	movs	r3, #1
  return HAL_OK;
 8007c8a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c8c:	3248      	adds	r2, #72	@ 0x48
 8007c8e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c90:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c92:	3a0a      	subs	r2, #10
 8007c94:	7013      	strb	r3, [r2, #0]
 8007c96:	7053      	strb	r3, [r2, #1]
 8007c98:	7093      	strb	r3, [r2, #2]
 8007c9a:	70d3      	strb	r3, [r2, #3]
 8007c9c:	7113      	strb	r3, [r2, #4]
 8007c9e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca0:	7193      	strb	r3, [r2, #6]
 8007ca2:	71d3      	strb	r3, [r2, #7]
 8007ca4:	7213      	strb	r3, [r2, #8]
 8007ca6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	702b      	strb	r3, [r5, #0]
}
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	0800454d 	.word	0x0800454d

08007cb0 <HAL_TIM_OC_Init>:
{
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007cb4:	2001      	movs	r0, #1
  if (htim == NULL)
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	d02b      	beq.n	8007d12 <HAL_TIM_OC_Init+0x62>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007cba:	0025      	movs	r5, r4
 8007cbc:	353d      	adds	r5, #61	@ 0x3d
 8007cbe:	782b      	ldrb	r3, [r5, #0]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10d      	bne.n	8007ce2 <HAL_TIM_OC_Init+0x32>
    htim->Lock = HAL_UNLOCKED;
 8007cc6:	0023      	movs	r3, r4
 8007cc8:	333c      	adds	r3, #60	@ 0x3c
 8007cca:	701a      	strb	r2, [r3, #0]
    TIM_ResetCallback(htim);
 8007ccc:	0020      	movs	r0, r4
 8007cce:	f7ff ff7d 	bl	8007bcc <TIM_ResetCallback>
    if (htim->OC_MspInitCallback == NULL)
 8007cd2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIM_OC_Init+0x2c>
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d14 <HAL_TIM_OC_Init+0x64>)
 8007cda:	65e3      	str	r3, [r4, #92]	@ 0x5c
    htim->OC_MspInitCallback(htim);
 8007cdc:	0020      	movs	r0, r4
 8007cde:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007ce0:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007ce6:	6820      	ldr	r0, [r4, #0]
 8007ce8:	1d21      	adds	r1, r4, #4
 8007cea:	f7ff fabf 	bl	800726c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cee:	0022      	movs	r2, r4
 8007cf0:	2301      	movs	r3, #1
  return HAL_OK;
 8007cf2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cf4:	3248      	adds	r2, #72	@ 0x48
 8007cf6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf8:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cfa:	3a0a      	subs	r2, #10
 8007cfc:	7013      	strb	r3, [r2, #0]
 8007cfe:	7053      	strb	r3, [r2, #1]
 8007d00:	7093      	strb	r3, [r2, #2]
 8007d02:	70d3      	strb	r3, [r2, #3]
 8007d04:	7113      	strb	r3, [r2, #4]
 8007d06:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d08:	7193      	strb	r3, [r2, #6]
 8007d0a:	71d3      	strb	r3, [r2, #7]
 8007d0c:	7213      	strb	r3, [r2, #8]
 8007d0e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007d10:	702b      	strb	r3, [r5, #0]
}
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	08006f11 	.word	0x08006f11

08007d18 <HAL_TIM_PWM_Init>:
{
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007d1c:	2001      	movs	r0, #1
  if (htim == NULL)
 8007d1e:	2c00      	cmp	r4, #0
 8007d20:	d02b      	beq.n	8007d7a <HAL_TIM_PWM_Init+0x62>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007d22:	0025      	movs	r5, r4
 8007d24:	353d      	adds	r5, #61	@ 0x3d
 8007d26:	782b      	ldrb	r3, [r5, #0]
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10d      	bne.n	8007d4a <HAL_TIM_PWM_Init+0x32>
    htim->Lock = HAL_UNLOCKED;
 8007d2e:	0023      	movs	r3, r4
 8007d30:	333c      	adds	r3, #60	@ 0x3c
 8007d32:	701a      	strb	r2, [r3, #0]
    TIM_ResetCallback(htim);
 8007d34:	0020      	movs	r0, r4
 8007d36:	f7ff ff49 	bl	8007bcc <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 8007d3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_TIM_PWM_Init+0x2c>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007d40:	4b0e      	ldr	r3, [pc, #56]	@ (8007d7c <HAL_TIM_PWM_Init+0x64>)
 8007d42:	6663      	str	r3, [r4, #100]	@ 0x64
    htim->PWM_MspInitCallback(htim);
 8007d44:	0020      	movs	r0, r4
 8007d46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d48:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4e:	6820      	ldr	r0, [r4, #0]
 8007d50:	1d21      	adds	r1, r4, #4
 8007d52:	f7ff fa8b 	bl	800726c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d56:	0022      	movs	r2, r4
 8007d58:	2301      	movs	r3, #1
  return HAL_OK;
 8007d5a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5c:	3248      	adds	r2, #72	@ 0x48
 8007d5e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d60:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d62:	3a0a      	subs	r2, #10
 8007d64:	7013      	strb	r3, [r2, #0]
 8007d66:	7053      	strb	r3, [r2, #1]
 8007d68:	7093      	strb	r3, [r2, #2]
 8007d6a:	70d3      	strb	r3, [r2, #3]
 8007d6c:	7113      	strb	r3, [r2, #4]
 8007d6e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d70:	7193      	strb	r3, [r2, #6]
 8007d72:	71d3      	strb	r3, [r2, #7]
 8007d74:	7213      	strb	r3, [r2, #8]
 8007d76:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007d78:	702b      	strb	r3, [r5, #0]
}
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	08006f13 	.word	0x08006f13

08007d80 <HAL_TIM_IC_Init>:
{
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007d84:	2001      	movs	r0, #1
  if (htim == NULL)
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	d02b      	beq.n	8007de2 <HAL_TIM_IC_Init+0x62>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007d8a:	0025      	movs	r5, r4
 8007d8c:	353d      	adds	r5, #61	@ 0x3d
 8007d8e:	782b      	ldrb	r3, [r5, #0]
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10d      	bne.n	8007db2 <HAL_TIM_IC_Init+0x32>
    htim->Lock = HAL_UNLOCKED;
 8007d96:	0023      	movs	r3, r4
 8007d98:	333c      	adds	r3, #60	@ 0x3c
 8007d9a:	701a      	strb	r2, [r3, #0]
    TIM_ResetCallback(htim);
 8007d9c:	0020      	movs	r0, r4
 8007d9e:	f7ff ff15 	bl	8007bcc <TIM_ResetCallback>
    if (htim->IC_MspInitCallback == NULL)
 8007da2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_TIM_IC_Init+0x2c>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007da8:	4b0e      	ldr	r3, [pc, #56]	@ (8007de4 <HAL_TIM_IC_Init+0x64>)
 8007daa:	6563      	str	r3, [r4, #84]	@ 0x54
    htim->IC_MspInitCallback(htim);
 8007dac:	0020      	movs	r0, r4
 8007dae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007db0:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8007db2:	2302      	movs	r3, #2
 8007db4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db6:	6820      	ldr	r0, [r4, #0]
 8007db8:	1d21      	adds	r1, r4, #4
 8007dba:	f7ff fa57 	bl	800726c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dbe:	0022      	movs	r2, r4
 8007dc0:	2301      	movs	r3, #1
  return HAL_OK;
 8007dc2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc4:	3248      	adds	r2, #72	@ 0x48
 8007dc6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc8:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dca:	3a0a      	subs	r2, #10
 8007dcc:	7013      	strb	r3, [r2, #0]
 8007dce:	7053      	strb	r3, [r2, #1]
 8007dd0:	7093      	strb	r3, [r2, #2]
 8007dd2:	70d3      	strb	r3, [r2, #3]
 8007dd4:	7113      	strb	r3, [r2, #4]
 8007dd6:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd8:	7193      	strb	r3, [r2, #6]
 8007dda:	71d3      	strb	r3, [r2, #7]
 8007ddc:	7213      	strb	r3, [r2, #8]
 8007dde:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007de0:	702b      	strb	r3, [r5, #0]
}
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	08006f15 	.word	0x08006f15

08007de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007de8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dea:	0004      	movs	r4, r0
 8007dec:	2202      	movs	r2, #2
 8007dee:	343c      	adds	r4, #60	@ 0x3c
 8007df0:	7825      	ldrb	r5, [r4, #0]
{
 8007df2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8007df4:	0010      	movs	r0, r2
 8007df6:	2d01      	cmp	r5, #1
 8007df8:	d023      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dfa:	001d      	movs	r5, r3
 8007dfc:	353d      	adds	r5, #61	@ 0x3d
 8007dfe:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e00:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e02:	4e10      	ldr	r6, [pc, #64]	@ (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8007e04:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007e06:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e08:	42b2      	cmp	r2, r6
 8007e0a:	d103      	bne.n	8007e14 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e0c:	4f0e      	ldr	r7, [pc, #56]	@ (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8007e0e:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e10:	684f      	ldr	r7, [r1, #4]
 8007e12:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e14:	2770      	movs	r7, #112	@ 0x70
 8007e16:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e18:	680f      	ldr	r7, [r1, #0]
 8007e1a:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e1c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1e:	42b2      	cmp	r2, r6
 8007e20:	d006      	beq.n	8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8007e22:	2380      	movs	r3, #128	@ 0x80
 8007e24:	05db      	lsls	r3, r3, #23
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d002      	beq.n	8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8007e2a:	4b08      	ldr	r3, [pc, #32]	@ (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d104      	bne.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e30:	2380      	movs	r3, #128	@ 0x80
 8007e32:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e34:	688b      	ldr	r3, [r1, #8]
 8007e36:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e38:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e3a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007e3c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007e3e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8007e40:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8007e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e44:	40012c00 	.word	0x40012c00
 8007e48:	ff0fffff 	.word	0xff0fffff
 8007e4c:	40000400 	.word	0x40000400

08007e50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e50:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e52:	0004      	movs	r4, r0
 8007e54:	343c      	adds	r4, #60	@ 0x3c
 8007e56:	7823      	ldrb	r3, [r4, #0]
{
 8007e58:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8007e5a:	2002      	movs	r0, #2
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d039      	beq.n	8007ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e60:	481d      	ldr	r0, [pc, #116]	@ (8007ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8007e62:	68cb      	ldr	r3, [r1, #12]
 8007e64:	4003      	ands	r3, r0
 8007e66:	6888      	ldr	r0, [r1, #8]
 8007e68:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e6a:	481c      	ldr	r0, [pc, #112]	@ (8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8007e6c:	4003      	ands	r3, r0
 8007e6e:	6848      	ldr	r0, [r1, #4]
 8007e70:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e72:	481b      	ldr	r0, [pc, #108]	@ (8007ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8007e74:	4003      	ands	r3, r0
 8007e76:	6808      	ldr	r0, [r1, #0]
 8007e78:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e7a:	481a      	ldr	r0, [pc, #104]	@ (8007ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8007e7c:	4003      	ands	r3, r0
 8007e7e:	6908      	ldr	r0, [r1, #16]
 8007e80:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e82:	4819      	ldr	r0, [pc, #100]	@ (8007ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007e84:	4003      	ands	r3, r0
 8007e86:	6948      	ldr	r0, [r1, #20]
 8007e88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e8a:	4818      	ldr	r0, [pc, #96]	@ (8007eec <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8007e8c:	4003      	ands	r3, r0
 8007e8e:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8007e90:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e92:	4817      	ldr	r0, [pc, #92]	@ (8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8007e94:	4003      	ands	r3, r0
 8007e96:	6988      	ldr	r0, [r1, #24]
 8007e98:	0400      	lsls	r0, r0, #16
 8007e9a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e9c:	4815      	ldr	r0, [pc, #84]	@ (8007ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007e9e:	4003      	ands	r3, r0
 8007ea0:	69c8      	ldr	r0, [r1, #28]
 8007ea2:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ea4:	6810      	ldr	r0, [r2, #0]
 8007ea6:	4a14      	ldr	r2, [pc, #80]	@ (8007ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007ea8:	4290      	cmp	r0, r2
 8007eaa:	d110      	bne.n	8007ece <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007eac:	4a13      	ldr	r2, [pc, #76]	@ (8007efc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8007eb2:	0512      	lsls	r2, r2, #20
 8007eb4:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007eb6:	4b12      	ldr	r3, [pc, #72]	@ (8007f00 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007eb8:	401a      	ands	r2, r3
 8007eba:	6a0b      	ldr	r3, [r1, #32]
 8007ebc:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ebe:	4b11      	ldr	r3, [pc, #68]	@ (8007f04 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007ec0:	401a      	ands	r2, r3
 8007ec2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8007ec4:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ec6:	4b10      	ldr	r3, [pc, #64]	@ (8007f08 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8007ec8:	401a      	ands	r2, r3
 8007eca:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8007ecc:	4313      	orrs	r3, r2
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ece:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	46c0      	nop			@ (mov r8, r8)
 8007ed8:	fffffcff 	.word	0xfffffcff
 8007edc:	fffffbff 	.word	0xfffffbff
 8007ee0:	fffff7ff 	.word	0xfffff7ff
 8007ee4:	ffffefff 	.word	0xffffefff
 8007ee8:	ffffdfff 	.word	0xffffdfff
 8007eec:	ffffbfff 	.word	0xffffbfff
 8007ef0:	fff0ffff 	.word	0xfff0ffff
 8007ef4:	efffffff 	.word	0xefffffff
 8007ef8:	40012c00 	.word	0x40012c00
 8007efc:	ff0fffff 	.word	0xff0fffff
 8007f00:	feffffff 	.word	0xfeffffff
 8007f04:	fdffffff 	.word	0xfdffffff
 8007f08:	dfffffff 	.word	0xdfffffff

08007f0c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007f0c:	4770      	bx	lr

08007f0e <HAL_TIMEx_CommutHalfCpltCallback>:
/**
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007f10:	4770      	bx	lr

08007f12 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007f12:	4770      	bx	lr

08007f14 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f14:	4770      	bx	lr
	...

08007f18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f18:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f1a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007f24:	25c0      	movs	r5, #192	@ 0xc0
 8007f26:	6801      	ldr	r1, [r0, #0]
 8007f28:	680b      	ldr	r3, [r1, #0]
 8007f2a:	43ab      	bics	r3, r5
 8007f2c:	600b      	str	r3, [r1, #0]
 8007f2e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f32:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f36:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007f3a:	6802      	ldr	r2, [r0, #0]
 8007f3c:	4c04      	ldr	r4, [pc, #16]	@ (8007f50 <UART_EndTxTransfer+0x38>)
 8007f3e:	6893      	ldr	r3, [r2, #8]
 8007f40:	4023      	ands	r3, r4
 8007f42:	6093      	str	r3, [r2, #8]
 8007f44:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f48:	2320      	movs	r3, #32
 8007f4a:	3088      	adds	r0, #136	@ 0x88
 8007f4c:	6003      	str	r3, [r0, #0]
}
 8007f4e:	bd30      	pop	{r4, r5, pc}
 8007f50:	ff7fffff 	.word	0xff7fffff

08007f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f54:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f56:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f60:	6801      	ldr	r1, [r0, #0]
 8007f62:	4d13      	ldr	r5, [pc, #76]	@ (8007fb0 <UART_EndRxTransfer+0x5c>)
 8007f64:	680b      	ldr	r3, [r1, #0]
 8007f66:	402b      	ands	r3, r5
 8007f68:	600b      	str	r3, [r1, #0]
 8007f6a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f6e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f72:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f76:	6802      	ldr	r2, [r0, #0]
 8007f78:	4c0e      	ldr	r4, [pc, #56]	@ (8007fb4 <UART_EndRxTransfer+0x60>)
 8007f7a:	6893      	ldr	r3, [r2, #8]
 8007f7c:	4023      	ands	r3, r4
 8007f7e:	6093      	str	r3, [r2, #8]
 8007f80:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f84:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d10a      	bne.n	8007fa0 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f8a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8e:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f92:	2410      	movs	r4, #16
 8007f94:	6802      	ldr	r2, [r0, #0]
 8007f96:	6813      	ldr	r3, [r2, #0]
 8007f98:	43a3      	bics	r3, r4
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fa0:	0003      	movs	r3, r0
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	338c      	adds	r3, #140	@ 0x8c
 8007fa6:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fac:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8007fae:	bd30      	pop	{r4, r5, pc}
 8007fb0:	fffffedf 	.word	0xfffffedf
 8007fb4:	effffffe 	.word	0xeffffffe

08007fb8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fb8:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	681b      	ldr	r3, [r3, #0]
{
 8007fc0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007fc2:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fc4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007fc6:	4011      	ands	r1, r2
 8007fc8:	4213      	tst	r3, r2
 8007fca:	d134      	bne.n	8008036 <UART_DMAReceiveCplt+0x7e>
  {
    huart->RxXferCount = 0U;
 8007fcc:	0003      	movs	r3, r0
 8007fce:	335e      	adds	r3, #94	@ 0x5e
 8007fd0:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f383 8810 	msr	PRIMASK, r3

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fdc:	6804      	ldr	r4, [r0, #0]
 8007fde:	4e1e      	ldr	r6, [pc, #120]	@ (8008058 <UART_DMAReceiveCplt+0xa0>)
 8007fe0:	6821      	ldr	r1, [r4, #0]
 8007fe2:	4031      	ands	r1, r6
 8007fe4:	6021      	str	r1, [r4, #0]
 8007fe6:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fea:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fee:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff2:	6804      	ldr	r4, [r0, #0]
 8007ff4:	68a1      	ldr	r1, [r4, #8]
 8007ff6:	4399      	bics	r1, r3
 8007ff8:	60a1      	str	r1, [r4, #8]
 8007ffa:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ffe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008002:	f383 8810 	msr	PRIMASK, r3

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008006:	2540      	movs	r5, #64	@ 0x40
 8008008:	6801      	ldr	r1, [r0, #0]
 800800a:	688b      	ldr	r3, [r1, #8]
 800800c:	43ab      	bics	r3, r5
 800800e:	608b      	str	r3, [r1, #8]
 8008010:	f384 8810 	msr	PRIMASK, r4

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008014:	0003      	movs	r3, r0
 8008016:	338c      	adds	r3, #140	@ 0x8c
 8008018:	601a      	str	r2, [r3, #0]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800801a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d10a      	bne.n	8008036 <UART_DMAReceiveCplt+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008020:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008024:	f383 8810 	msr	PRIMASK, r3
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008028:	2410      	movs	r4, #16
 800802a:	6802      	ldr	r2, [r0, #0]
 800802c:	6813      	ldr	r3, [r2, #0]
 800802e:	43a3      	bics	r3, r4
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	f381 8810 	msr	PRIMASK, r1
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008036:	2300      	movs	r3, #0
 8008038:	6703      	str	r3, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800803c:	2b01      	cmp	r3, #1
 800803e:	d106      	bne.n	800804e <UART_DMAReceiveCplt+0x96>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008040:	0003      	movs	r3, r0
 8008042:	335c      	adds	r3, #92	@ 0x5c
 8008044:	8819      	ldrh	r1, [r3, #0]
 8008046:	3364      	adds	r3, #100	@ 0x64
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800804c:	bd70      	pop	{r4, r5, r6, pc}
    huart->RxCpltCallback(huart);
 800804e:	0003      	movs	r3, r0
 8008050:	33a0      	adds	r3, #160	@ 0xa0
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4798      	blx	r3
}
 8008056:	e7f9      	b.n	800804c <UART_DMAReceiveCplt+0x94>
 8008058:	fffffeff 	.word	0xfffffeff

0800805c <UART_DMARxHalfCplt>:
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800805c:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800805e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8008060:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008062:	6703      	str	r3, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008064:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008066:	2b01      	cmp	r3, #1
 8008068:	d107      	bne.n	800807a <UART_DMARxHalfCplt+0x1e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800806a:	0003      	movs	r3, r0
 800806c:	335c      	adds	r3, #92	@ 0x5c
 800806e:	8819      	ldrh	r1, [r3, #0]
 8008070:	3364      	adds	r3, #100	@ 0x64
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	0849      	lsrs	r1, r1, #1
 8008076:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008078:	bd10      	pop	{r4, pc}
    huart->RxHalfCpltCallback(huart);
 800807a:	0003      	movs	r3, r0
 800807c:	339c      	adds	r3, #156	@ 0x9c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4798      	blx	r3
}
 8008082:	e7f9      	b.n	8008078 <UART_DMARxHalfCplt+0x1c>

08008084 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008084:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008086:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008088:	0023      	movs	r3, r4
 800808a:	3388      	adds	r3, #136	@ 0x88
 800808c:	681a      	ldr	r2, [r3, #0]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800808e:	685d      	ldr	r5, [r3, #4]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	061b      	lsls	r3, r3, #24
 8008096:	d508      	bpl.n	80080aa <UART_DMAError+0x26>
 8008098:	2a21      	cmp	r2, #33	@ 0x21
 800809a:	d106      	bne.n	80080aa <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800809c:	0023      	movs	r3, r4
 800809e:	2200      	movs	r2, #0
 80080a0:	3356      	adds	r3, #86	@ 0x56
    UART_EndTxTransfer(huart);
 80080a2:	0020      	movs	r0, r4
    huart->TxXferCount = 0U;
 80080a4:	801a      	strh	r2, [r3, #0]
    UART_EndTxTransfer(huart);
 80080a6:	f7ff ff37 	bl	8007f18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	065b      	lsls	r3, r3, #25
 80080b0:	d508      	bpl.n	80080c4 <UART_DMAError+0x40>
 80080b2:	2d22      	cmp	r5, #34	@ 0x22
 80080b4:	d106      	bne.n	80080c4 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80080b6:	0023      	movs	r3, r4
 80080b8:	2200      	movs	r2, #0
 80080ba:	335e      	adds	r3, #94	@ 0x5e
    UART_EndRxTransfer(huart);
 80080bc:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80080be:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 80080c0:	f7ff ff48 	bl	8007f54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080c4:	0022      	movs	r2, r4
 80080c6:	2310      	movs	r3, #16
 80080c8:	3290      	adds	r2, #144	@ 0x90
 80080ca:	6811      	ldr	r1, [r2, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80080cc:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080ce:	430b      	orrs	r3, r1
 80080d0:	6013      	str	r3, [r2, #0]
  huart->ErrorCallback(huart);
 80080d2:	0023      	movs	r3, r4
 80080d4:	33a4      	adds	r3, #164	@ 0xa4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080da:	bd70      	pop	{r4, r5, r6, pc}

080080dc <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080dc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	0002      	movs	r2, r0
 80080e2:	325e      	adds	r2, #94	@ 0x5e
{
 80080e4:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80080e6:	3a08      	subs	r2, #8
  huart->RxXferCount = 0U;
 80080e8:	8113      	strh	r3, [r2, #8]
  huart->TxXferCount = 0U;
 80080ea:	8013      	strh	r3, [r2, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80080ec:	0003      	movs	r3, r0
 80080ee:	33a4      	adds	r3, #164	@ 0xa4
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f4:	bd10      	pop	{r4, pc}

080080f6 <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 80080f6:	4770      	bx	lr

080080f8 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80080f8:	4770      	bx	lr

080080fa <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 80080fa:	4770      	bx	lr

080080fc <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 80080fc:	4770      	bx	lr

080080fe <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 80080fe:	4770      	bx	lr

08008100 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8008100:	4770      	bx	lr

08008102 <HAL_UART_AbortCpltCallback>:
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 8008102:	4770      	bx	lr

08008104 <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 8008104:	4770      	bx	lr

08008106 <HAL_UART_RegisterCallback>:
{
 8008106:	0003      	movs	r3, r0
 8008108:	b510      	push	{r4, lr}
 800810a:	0008      	movs	r0, r1
  if (pCallback == NULL)
 800810c:	2a00      	cmp	r2, #0
 800810e:	d106      	bne.n	800811e <HAL_UART_RegisterCallback+0x18>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008110:	2240      	movs	r2, #64	@ 0x40
 8008112:	3390      	adds	r3, #144	@ 0x90
 8008114:	6819      	ldr	r1, [r3, #0]
    return HAL_ERROR;
 8008116:	2001      	movs	r0, #1
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008118:	430a      	orrs	r2, r1
 800811a:	601a      	str	r2, [r3, #0]
        break;
 800811c:	e012      	b.n	8008144 <HAL_UART_RegisterCallback+0x3e>
  if (huart->gState == HAL_UART_STATE_READY)
 800811e:	0019      	movs	r1, r3
 8008120:	3188      	adds	r1, #136	@ 0x88
 8008122:	680c      	ldr	r4, [r1, #0]
 8008124:	2c20      	cmp	r4, #32
 8008126:	d124      	bne.n	8008172 <HAL_UART_RegisterCallback+0x6c>
    switch (CallbackID)
 8008128:	280c      	cmp	r0, #12
 800812a:	d8f1      	bhi.n	8008110 <HAL_UART_RegisterCallback+0xa>
 800812c:	f7f7 fff6 	bl	800011c <__gnu_thumb1_case_uqi>
 8008130:	0f0d0b07 	.word	0x0f0d0b07
 8008134:	17151311 	.word	0x17151311
 8008138:	1f1d1b19 	.word	0x1f1d1b19
 800813c:	28          	.byte	0x28
 800813d:	00          	.byte	0x00
        huart->TxHalfCpltCallback = pCallback;
 800813e:	3394      	adds	r3, #148	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 8008140:	2000      	movs	r0, #0
        huart->TxCpltCallback = pCallback;
 8008142:	601a      	str	r2, [r3, #0]
}
 8008144:	bd10      	pop	{r4, pc}
        huart->TxCpltCallback = pCallback;
 8008146:	3398      	adds	r3, #152	@ 0x98
 8008148:	e7fa      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->RxHalfCpltCallback = pCallback;
 800814a:	339c      	adds	r3, #156	@ 0x9c
 800814c:	e7f8      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->RxCpltCallback = pCallback;
 800814e:	33a0      	adds	r3, #160	@ 0xa0
 8008150:	e7f6      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->ErrorCallback = pCallback;
 8008152:	33a4      	adds	r3, #164	@ 0xa4
 8008154:	e7f4      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->AbortCpltCallback = pCallback;
 8008156:	33a8      	adds	r3, #168	@ 0xa8
 8008158:	e7f2      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->AbortTransmitCpltCallback = pCallback;
 800815a:	33ac      	adds	r3, #172	@ 0xac
 800815c:	e7f0      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->AbortReceiveCpltCallback = pCallback;
 800815e:	33b0      	adds	r3, #176	@ 0xb0
 8008160:	e7ee      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->WakeupCallback = pCallback;
 8008162:	33b4      	adds	r3, #180	@ 0xb4
 8008164:	e7ec      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->RxFifoFullCallback = pCallback;
 8008166:	33b8      	adds	r3, #184	@ 0xb8
 8008168:	e7ea      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->TxFifoEmptyCallback = pCallback;
 800816a:	33bc      	adds	r3, #188	@ 0xbc
 800816c:	e7e8      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
        huart->MspInitCallback = pCallback;
 800816e:	33c4      	adds	r3, #196	@ 0xc4
 8008170:	e7e6      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008172:	6809      	ldr	r1, [r1, #0]
 8008174:	2900      	cmp	r1, #0
 8008176:	d1cb      	bne.n	8008110 <HAL_UART_RegisterCallback+0xa>
    switch (CallbackID)
 8008178:	280b      	cmp	r0, #11
 800817a:	d0f8      	beq.n	800816e <HAL_UART_RegisterCallback+0x68>
 800817c:	280c      	cmp	r0, #12
 800817e:	d1c7      	bne.n	8008110 <HAL_UART_RegisterCallback+0xa>
        huart->MspDeInitCallback = pCallback;
 8008180:	33c8      	adds	r3, #200	@ 0xc8
 8008182:	e7dd      	b.n	8008140 <HAL_UART_RegisterCallback+0x3a>

08008184 <HAL_UART_IRQHandler>:
{
 8008184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008186:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008188:	4dc2      	ldr	r5, [pc, #776]	@ (8008494 <HAL_UART_IRQHandler+0x310>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800818a:	69cb      	ldr	r3, [r1, #28]
{
 800818c:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800818e:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008190:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 8008192:	422b      	tst	r3, r5
 8008194:	d110      	bne.n	80081b8 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008196:	2520      	movs	r5, #32
 8008198:	422b      	tst	r3, r5
 800819a:	d100      	bne.n	800819e <HAL_UART_IRQHandler+0x1a>
 800819c:	e09e      	b.n	80082dc <HAL_UART_IRQHandler+0x158>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800819e:	2680      	movs	r6, #128	@ 0x80
 80081a0:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081a2:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081a4:	4006      	ands	r6, r0
 80081a6:	4335      	orrs	r5, r6
 80081a8:	d100      	bne.n	80081ac <HAL_UART_IRQHandler+0x28>
 80081aa:	e097      	b.n	80082dc <HAL_UART_IRQHandler+0x158>
      if (huart->RxISR != NULL)
 80081ac:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    if (huart->TxISR != NULL)
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d100      	bne.n	80081b4 <HAL_UART_IRQHandler+0x30>
 80081b2:	e092      	b.n	80082da <HAL_UART_IRQHandler+0x156>
    huart->RxFifoFullCallback(huart);
 80081b4:	0020      	movs	r0, r4
 80081b6:	e084      	b.n	80082c2 <HAL_UART_IRQHandler+0x13e>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081b8:	4db7      	ldr	r5, [pc, #732]	@ (8008498 <HAL_UART_IRQHandler+0x314>)
 80081ba:	4005      	ands	r5, r0
 80081bc:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081be:	4db7      	ldr	r5, [pc, #732]	@ (800849c <HAL_UART_IRQHandler+0x318>)
 80081c0:	9e00      	ldr	r6, [sp, #0]
 80081c2:	4015      	ands	r5, r2
 80081c4:	4335      	orrs	r5, r6
 80081c6:	d100      	bne.n	80081ca <HAL_UART_IRQHandler+0x46>
 80081c8:	e088      	b.n	80082dc <HAL_UART_IRQHandler+0x158>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081ca:	0025      	movs	r5, r4
 80081cc:	2601      	movs	r6, #1
 80081ce:	3590      	adds	r5, #144	@ 0x90
 80081d0:	4233      	tst	r3, r6
 80081d2:	d005      	beq.n	80081e0 <HAL_UART_IRQHandler+0x5c>
 80081d4:	05d7      	lsls	r7, r2, #23
 80081d6:	d503      	bpl.n	80081e0 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081d8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081da:	682f      	ldr	r7, [r5, #0]
 80081dc:	433e      	orrs	r6, r7
 80081de:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081e0:	2602      	movs	r6, #2
 80081e2:	4233      	tst	r3, r6
 80081e4:	d00c      	beq.n	8008200 <HAL_UART_IRQHandler+0x7c>
 80081e6:	07c7      	lsls	r7, r0, #31
 80081e8:	d50a      	bpl.n	8008200 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081ea:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081ec:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081ee:	3790      	adds	r7, #144	@ 0x90
 80081f0:	683e      	ldr	r6, [r7, #0]
 80081f2:	9701      	str	r7, [sp, #4]
 80081f4:	46b4      	mov	ip, r6
 80081f6:	2604      	movs	r6, #4
 80081f8:	4667      	mov	r7, ip
 80081fa:	433e      	orrs	r6, r7
 80081fc:	9f01      	ldr	r7, [sp, #4]
 80081fe:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008200:	2604      	movs	r6, #4
 8008202:	4233      	tst	r3, r6
 8008204:	d00c      	beq.n	8008220 <HAL_UART_IRQHandler+0x9c>
 8008206:	07c7      	lsls	r7, r0, #31
 8008208:	d50a      	bpl.n	8008220 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800820a:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800820c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800820e:	3790      	adds	r7, #144	@ 0x90
 8008210:	683e      	ldr	r6, [r7, #0]
 8008212:	9701      	str	r7, [sp, #4]
 8008214:	46b4      	mov	ip, r6
 8008216:	2602      	movs	r6, #2
 8008218:	4667      	mov	r7, ip
 800821a:	433e      	orrs	r6, r7
 800821c:	9f01      	ldr	r7, [sp, #4]
 800821e:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008220:	2608      	movs	r6, #8
 8008222:	46b4      	mov	ip, r6
 8008224:	4233      	tst	r3, r6
 8008226:	d009      	beq.n	800823c <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008228:	2720      	movs	r7, #32
 800822a:	9e00      	ldr	r6, [sp, #0]
 800822c:	4017      	ands	r7, r2
 800822e:	4337      	orrs	r7, r6
 8008230:	d004      	beq.n	800823c <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008232:	4666      	mov	r6, ip
 8008234:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008236:	682f      	ldr	r7, [r5, #0]
 8008238:	433e      	orrs	r6, r7
 800823a:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800823c:	2680      	movs	r6, #128	@ 0x80
 800823e:	0136      	lsls	r6, r6, #4
 8008240:	4233      	tst	r3, r6
 8008242:	d006      	beq.n	8008252 <HAL_UART_IRQHandler+0xce>
 8008244:	0157      	lsls	r7, r2, #5
 8008246:	d504      	bpl.n	8008252 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008248:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800824a:	2120      	movs	r1, #32
 800824c:	682e      	ldr	r6, [r5, #0]
 800824e:	4331      	orrs	r1, r6
 8008250:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008252:	6829      	ldr	r1, [r5, #0]
 8008254:	2900      	cmp	r1, #0
 8008256:	d040      	beq.n	80082da <HAL_UART_IRQHandler+0x156>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008258:	2120      	movs	r1, #32
 800825a:	420b      	tst	r3, r1
 800825c:	d00a      	beq.n	8008274 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800825e:	2380      	movs	r3, #128	@ 0x80
 8008260:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008262:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008264:	4003      	ands	r3, r0
 8008266:	4319      	orrs	r1, r3
 8008268:	d004      	beq.n	8008274 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 800826a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8008270:	0020      	movs	r0, r4
 8008272:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008274:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8008276:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008278:	2740      	movs	r7, #64	@ 0x40
 800827a:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800827c:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800827e:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008280:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008282:	431e      	orrs	r6, r3
 8008284:	d023      	beq.n	80082ce <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8008286:	0020      	movs	r0, r4
 8008288:	f7ff fe64 	bl	8007f54 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	423b      	tst	r3, r7
 8008292:	d018      	beq.n	80082c6 <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008294:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008298:	2301      	movs	r3, #1
 800829a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829e:	0025      	movs	r5, r4
 80082a0:	cd04      	ldmia	r5!, {r2}
 80082a2:	6893      	ldr	r3, [r2, #8]
 80082a4:	43bb      	bics	r3, r7
 80082a6:	6093      	str	r3, [r2, #8]
 80082a8:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80082ac:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d009      	beq.n	80082c6 <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082b2:	4b7b      	ldr	r3, [pc, #492]	@ (80084a0 <HAL_UART_IRQHandler+0x31c>)
 80082b4:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082b6:	f7fd fc7d 	bl	8005bb4 <HAL_DMA_Abort_IT>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d00d      	beq.n	80082da <HAL_UART_IRQHandler+0x156>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082be:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80082c0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    huart->RxFifoFullCallback(huart);
 80082c2:	4798      	blx	r3
    return;
 80082c4:	e009      	b.n	80082da <HAL_UART_IRQHandler+0x156>
          huart->ErrorCallback(huart);
 80082c6:	0023      	movs	r3, r4
 80082c8:	33a4      	adds	r3, #164	@ 0xa4
    huart->RxFifoFullCallback(huart);
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	e772      	b.n	80081b4 <HAL_UART_IRQHandler+0x30>
        huart->ErrorCallback(huart);
 80082ce:	0023      	movs	r3, r4
 80082d0:	33a4      	adds	r3, #164	@ 0xa4
 80082d2:	0020      	movs	r0, r4
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d8:	602e      	str	r6, [r5, #0]
}
 80082da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082dc:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80082de:	2d01      	cmp	r5, #1
 80082e0:	d000      	beq.n	80082e4 <HAL_UART_IRQHandler+0x160>
 80082e2:	e0a1      	b.n	8008428 <HAL_UART_IRQHandler+0x2a4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082e4:	2610      	movs	r6, #16
 80082e6:	4233      	tst	r3, r6
 80082e8:	d100      	bne.n	80082ec <HAL_UART_IRQHandler+0x168>
 80082ea:	e09d      	b.n	8008428 <HAL_UART_IRQHandler+0x2a4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082ec:	4232      	tst	r2, r6
 80082ee:	d100      	bne.n	80082f2 <HAL_UART_IRQHandler+0x16e>
 80082f0:	e09a      	b.n	8008428 <HAL_UART_IRQHandler+0x2a4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082f2:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	6889      	ldr	r1, [r1, #8]
 80082f6:	2340      	movs	r3, #64	@ 0x40
 80082f8:	000a      	movs	r2, r1
 80082fa:	401a      	ands	r2, r3
 80082fc:	4219      	tst	r1, r3
 80082fe:	d059      	beq.n	80083b4 <HAL_UART_IRQHandler+0x230>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008300:	1d21      	adds	r1, r4, #4
 8008302:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 8008304:	6810      	ldr	r0, [r2, #0]
 8008306:	6842      	ldr	r2, [r0, #4]
 8008308:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800830a:	2a00      	cmp	r2, #0
 800830c:	d0e5      	beq.n	80082da <HAL_UART_IRQHandler+0x156>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800830e:	0027      	movs	r7, r4
 8008310:	375c      	adds	r7, #92	@ 0x5c
 8008312:	883f      	ldrh	r7, [r7, #0]
 8008314:	4297      	cmp	r7, r2
 8008316:	d9e0      	bls.n	80082da <HAL_UART_IRQHandler+0x156>
        huart->RxXferCount = nb_remaining_rx_data;
 8008318:	0027      	movs	r7, r4
 800831a:	375e      	adds	r7, #94	@ 0x5e
 800831c:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800831e:	6802      	ldr	r2, [r0, #0]
 8008320:	2020      	movs	r0, #32
 8008322:	4684      	mov	ip, r0
 8008324:	4010      	ands	r0, r2
 8008326:	9000      	str	r0, [sp, #0]
 8008328:	4660      	mov	r0, ip
 800832a:	4202      	tst	r2, r0
 800832c:	d132      	bne.n	8008394 <HAL_UART_IRQHandler+0x210>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800832e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008332:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008336:	6820      	ldr	r0, [r4, #0]
 8008338:	4e5a      	ldr	r6, [pc, #360]	@ (80084a4 <HAL_UART_IRQHandler+0x320>)
 800833a:	6802      	ldr	r2, [r0, #0]
 800833c:	4032      	ands	r2, r6
 800833e:	6002      	str	r2, [r0, #0]
 8008340:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008344:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008348:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	6882      	ldr	r2, [r0, #8]
 8008350:	43aa      	bics	r2, r5
 8008352:	6082      	str	r2, [r0, #8]
 8008354:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008358:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800835c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	6882      	ldr	r2, [r0, #8]
 8008364:	439a      	bics	r2, r3
 8008366:	6082      	str	r2, [r0, #8]
 8008368:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 800836c:	0023      	movs	r3, r4
 800836e:	4662      	mov	r2, ip
 8008370:	338c      	adds	r3, #140	@ 0x8c
 8008372:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008374:	9b00      	ldr	r3, [sp, #0]
 8008376:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008378:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800837c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008380:	6822      	ldr	r2, [r4, #0]
 8008382:	350f      	adds	r5, #15
 8008384:	6813      	ldr	r3, [r2, #0]
 8008386:	43ab      	bics	r3, r5
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 800838e:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 8008390:	f7fd fbd6 	bl	8005b40 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008394:	2302      	movs	r3, #2
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008396:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008398:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800839a:	0023      	movs	r3, r4
 800839c:	325c      	adds	r2, #92	@ 0x5c
 800839e:	335e      	adds	r3, #94	@ 0x5e
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	8811      	ldrh	r1, [r2, #0]
 80083a4:	1ac9      	subs	r1, r1, r3
 80083a6:	b289      	uxth	r1, r1
        huart->RxEventCallback(huart, nb_rx_data);
 80083a8:	0023      	movs	r3, r4
 80083aa:	33c0      	adds	r3, #192	@ 0xc0
 80083ac:	0020      	movs	r0, r4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4798      	blx	r3
 80083b2:	e792      	b.n	80082da <HAL_UART_IRQHandler+0x156>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083b4:	0023      	movs	r3, r4
 80083b6:	0020      	movs	r0, r4
 80083b8:	335c      	adds	r3, #92	@ 0x5c
 80083ba:	305e      	adds	r0, #94	@ 0x5e
 80083bc:	8819      	ldrh	r1, [r3, #0]
 80083be:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 80083c0:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083c2:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d100      	bne.n	80083ca <HAL_UART_IRQHandler+0x246>
 80083c8:	e787      	b.n	80082da <HAL_UART_IRQHandler+0x156>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083ca:	1ac9      	subs	r1, r1, r3
 80083cc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80083ce:	2900      	cmp	r1, #0
 80083d0:	d100      	bne.n	80083d4 <HAL_UART_IRQHandler+0x250>
 80083d2:	e782      	b.n	80082da <HAL_UART_IRQHandler+0x156>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d8:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	4e32      	ldr	r6, [pc, #200]	@ (80084a8 <HAL_UART_IRQHandler+0x324>)
 80083e0:	6803      	ldr	r3, [r0, #0]
 80083e2:	4033      	ands	r3, r6
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ea:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ee:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083f2:	6820      	ldr	r0, [r4, #0]
 80083f4:	4e2d      	ldr	r6, [pc, #180]	@ (80084ac <HAL_UART_IRQHandler+0x328>)
 80083f6:	6883      	ldr	r3, [r0, #8]
 80083f8:	4033      	ands	r3, r6
 80083fa:	6083      	str	r3, [r0, #8]
 80083fc:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8008400:	0023      	movs	r3, r4
 8008402:	2020      	movs	r0, #32
 8008404:	338c      	adds	r3, #140	@ 0x8c
 8008406:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008408:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800840a:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008410:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008414:	2510      	movs	r5, #16
 8008416:	6822      	ldr	r2, [r4, #0]
 8008418:	6813      	ldr	r3, [r2, #0]
 800841a:	43ab      	bics	r3, r5
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008422:	2302      	movs	r3, #2
 8008424:	6723      	str	r3, [r4, #112]	@ 0x70
 8008426:	e7bf      	b.n	80083a8 <HAL_UART_IRQHandler+0x224>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008428:	2580      	movs	r5, #128	@ 0x80
 800842a:	036d      	lsls	r5, r5, #13
 800842c:	422b      	tst	r3, r5
 800842e:	d005      	beq.n	800843c <HAL_UART_IRQHandler+0x2b8>
 8008430:	0246      	lsls	r6, r0, #9
 8008432:	d503      	bpl.n	800843c <HAL_UART_IRQHandler+0x2b8>
    huart->WakeupCallback(huart);
 8008434:	0023      	movs	r3, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008436:	620d      	str	r5, [r1, #32]
    huart->WakeupCallback(huart);
 8008438:	33b4      	adds	r3, #180	@ 0xb4
 800843a:	e746      	b.n	80082ca <HAL_UART_IRQHandler+0x146>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800843c:	2180      	movs	r1, #128	@ 0x80
 800843e:	420b      	tst	r3, r1
 8008440:	d007      	beq.n	8008452 <HAL_UART_IRQHandler+0x2ce>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008442:	2580      	movs	r5, #128	@ 0x80
 8008444:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008446:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008448:	4028      	ands	r0, r5
 800844a:	4301      	orrs	r1, r0
 800844c:	d001      	beq.n	8008452 <HAL_UART_IRQHandler+0x2ce>
    if (huart->TxISR != NULL)
 800844e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8008450:	e6ad      	b.n	80081ae <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008452:	2140      	movs	r1, #64	@ 0x40
 8008454:	420b      	tst	r3, r1
 8008456:	d015      	beq.n	8008484 <HAL_UART_IRQHandler+0x300>
 8008458:	420a      	tst	r2, r1
 800845a:	d013      	beq.n	8008484 <HAL_UART_IRQHandler+0x300>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800845c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008460:	2301      	movs	r3, #1
 8008462:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	6813      	ldr	r3, [r2, #0]
 800846a:	438b      	bics	r3, r1
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008472:	0023      	movs	r3, r4
 8008474:	2220      	movs	r2, #32
 8008476:	3388      	adds	r3, #136	@ 0x88
 8008478:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	67a3      	str	r3, [r4, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800847e:	0023      	movs	r3, r4
 8008480:	3398      	adds	r3, #152	@ 0x98
 8008482:	e722      	b.n	80082ca <HAL_UART_IRQHandler+0x146>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008484:	0219      	lsls	r1, r3, #8
 8008486:	d513      	bpl.n	80084b0 <HAL_UART_IRQHandler+0x32c>
 8008488:	0051      	lsls	r1, r2, #1
 800848a:	d511      	bpl.n	80084b0 <HAL_UART_IRQHandler+0x32c>
    huart->TxFifoEmptyCallback(huart);
 800848c:	0023      	movs	r3, r4
 800848e:	33bc      	adds	r3, #188	@ 0xbc
 8008490:	e71b      	b.n	80082ca <HAL_UART_IRQHandler+0x146>
 8008492:	46c0      	nop			@ (mov r8, r8)
 8008494:	0000080f 	.word	0x0000080f
 8008498:	10000001 	.word	0x10000001
 800849c:	04000120 	.word	0x04000120
 80084a0:	080080dd 	.word	0x080080dd
 80084a4:	fffffeff 	.word	0xfffffeff
 80084a8:	fffffedf 	.word	0xfffffedf
 80084ac:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084b0:	01db      	lsls	r3, r3, #7
 80084b2:	d400      	bmi.n	80084b6 <HAL_UART_IRQHandler+0x332>
 80084b4:	e711      	b.n	80082da <HAL_UART_IRQHandler+0x156>
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	db00      	blt.n	80084bc <HAL_UART_IRQHandler+0x338>
 80084ba:	e70e      	b.n	80082da <HAL_UART_IRQHandler+0x156>
    huart->RxFifoFullCallback(huart);
 80084bc:	0023      	movs	r3, r4
 80084be:	33b8      	adds	r3, #184	@ 0xb8
 80084c0:	e703      	b.n	80082ca <HAL_UART_IRQHandler+0x146>
 80084c2:	46c0      	nop			@ (mov r8, r8)

080084c4 <UART_InitCallbacksToDefault>:
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80084c4:	0003      	movs	r3, r0
 80084c6:	4a0d      	ldr	r2, [pc, #52]	@ (80084fc <UART_InitCallbacksToDefault+0x38>)
 80084c8:	3394      	adds	r3, #148	@ 0x94
 80084ca:	601a      	str	r2, [r3, #0]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80084cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008500 <UART_InitCallbacksToDefault+0x3c>)
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80084ce:	30c0      	adds	r0, #192	@ 0xc0
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80084d0:	605a      	str	r2, [r3, #4]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80084d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008504 <UART_InitCallbacksToDefault+0x40>)
 80084d4:	609a      	str	r2, [r3, #8]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80084d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008508 <UART_InitCallbacksToDefault+0x44>)
 80084d8:	60da      	str	r2, [r3, #12]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80084da:	4a0c      	ldr	r2, [pc, #48]	@ (800850c <UART_InitCallbacksToDefault+0x48>)
 80084dc:	611a      	str	r2, [r3, #16]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80084de:	4a0c      	ldr	r2, [pc, #48]	@ (8008510 <UART_InitCallbacksToDefault+0x4c>)
 80084e0:	615a      	str	r2, [r3, #20]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80084e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008514 <UART_InitCallbacksToDefault+0x50>)
 80084e4:	619a      	str	r2, [r3, #24]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80084e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008518 <UART_InitCallbacksToDefault+0x54>)
 80084e8:	61da      	str	r2, [r3, #28]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80084ea:	4a0c      	ldr	r2, [pc, #48]	@ (800851c <UART_InitCallbacksToDefault+0x58>)
 80084ec:	621a      	str	r2, [r3, #32]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80084ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008520 <UART_InitCallbacksToDefault+0x5c>)
 80084f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80084f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008524 <UART_InitCallbacksToDefault+0x60>)
 80084f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80084f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008528 <UART_InitCallbacksToDefault+0x64>)
 80084f8:	6003      	str	r3, [r0, #0]
}
 80084fa:	4770      	bx	lr
 80084fc:	080080fb 	.word	0x080080fb
 8008500:	080080f9 	.word	0x080080f9
 8008504:	080080ff 	.word	0x080080ff
 8008508:	080080fd 	.word	0x080080fd
 800850c:	08008101 	.word	0x08008101
 8008510:	08008103 	.word	0x08008103
 8008514:	08008105 	.word	0x08008105
 8008518:	080080f7 	.word	0x080080f7
 800851c:	08008ad1 	.word	0x08008ad1
 8008520:	08008ad3 	.word	0x08008ad3
 8008524:	08008ad5 	.word	0x08008ad5
 8008528:	08007f15 	.word	0x08007f15

0800852c <UART_SetConfig>:
{
 800852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008530:	6925      	ldr	r5, [r4, #16]
 8008532:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008534:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008536:	432a      	orrs	r2, r5
 8008538:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800853a:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800853c:	69c0      	ldr	r0, [r0, #28]
 800853e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008540:	4d66      	ldr	r5, [pc, #408]	@ (80086dc <UART_SetConfig+0x1b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008542:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008544:	4029      	ands	r1, r5
 8008546:	430a      	orrs	r2, r1
 8008548:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	4964      	ldr	r1, [pc, #400]	@ (80086e0 <UART_SetConfig+0x1b4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800854e:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008550:	400a      	ands	r2, r1
 8008552:	68e1      	ldr	r1, [r4, #12]
 8008554:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008556:	4963      	ldr	r1, [pc, #396]	@ (80086e4 <UART_SetConfig+0x1b8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008558:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800855a:	428b      	cmp	r3, r1
 800855c:	d001      	beq.n	8008562 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800855e:	6a22      	ldr	r2, [r4, #32]
 8008560:	4315      	orrs	r5, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	4e60      	ldr	r6, [pc, #384]	@ (80086e8 <UART_SetConfig+0x1bc>)
 8008566:	4032      	ands	r2, r6
 8008568:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800856a:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800856c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800856e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008570:	43aa      	bics	r2, r5
 8008572:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008574:	432a      	orrs	r2, r5
 8008576:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008578:	4a5c      	ldr	r2, [pc, #368]	@ (80086ec <UART_SetConfig+0x1c0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d114      	bne.n	80085a8 <UART_SetConfig+0x7c>
 800857e:	4b5c      	ldr	r3, [pc, #368]	@ (80086f0 <UART_SetConfig+0x1c4>)
 8008580:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008582:	2303      	movs	r3, #3
 8008584:	401a      	ands	r2, r3
 8008586:	2380      	movs	r3, #128	@ 0x80
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	2a02      	cmp	r2, #2
 800858c:	d100      	bne.n	8008590 <UART_SetConfig+0x64>
 800858e:	e095      	b.n	80086bc <UART_SetConfig+0x190>
 8008590:	2a03      	cmp	r2, #3
 8008592:	d100      	bne.n	8008596 <UART_SetConfig+0x6a>
 8008594:	e09e      	b.n	80086d4 <UART_SetConfig+0x1a8>
 8008596:	2a01      	cmp	r2, #1
 8008598:	d100      	bne.n	800859c <UART_SetConfig+0x70>
 800859a:	e096      	b.n	80086ca <UART_SetConfig+0x19e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800859c:	4298      	cmp	r0, r3
 800859e:	d000      	beq.n	80085a2 <UART_SetConfig+0x76>
 80085a0:	e078      	b.n	8008694 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80085a2:	f7fe fab1 	bl	8006b08 <HAL_RCC_GetPCLK1Freq>
        break;
 80085a6:	e055      	b.n	8008654 <UART_SetConfig+0x128>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085a8:	4a52      	ldr	r2, [pc, #328]	@ (80086f4 <UART_SetConfig+0x1c8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d100      	bne.n	80085b0 <UART_SetConfig+0x84>
 80085ae:	e089      	b.n	80086c4 <UART_SetConfig+0x198>
 80085b0:	428b      	cmp	r3, r1
 80085b2:	d110      	bne.n	80085d6 <UART_SetConfig+0xaa>
 80085b4:	22c0      	movs	r2, #192	@ 0xc0
 80085b6:	2180      	movs	r1, #128	@ 0x80
 80085b8:	4b4d      	ldr	r3, [pc, #308]	@ (80086f0 <UART_SetConfig+0x1c4>)
 80085ba:	0112      	lsls	r2, r2, #4
 80085bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085be:	0109      	lsls	r1, r1, #4
 80085c0:	4013      	ands	r3, r2
 80085c2:	428b      	cmp	r3, r1
 80085c4:	d014      	beq.n	80085f0 <UART_SetConfig+0xc4>
 80085c6:	d804      	bhi.n	80085d2 <UART_SetConfig+0xa6>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 80085cc:	f7fe fa9c 	bl	8006b08 <HAL_RCC_GetPCLK1Freq>
 80085d0:	e005      	b.n	80085de <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d039      	beq.n	800864a <UART_SetConfig+0x11e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d6:	2001      	movs	r0, #1
 80085d8:	e004      	b.n	80085e4 <UART_SetConfig+0xb8>
        pclk = HAL_RCC_GetSysClockFreq();
 80085da:	f7fe f9a7 	bl	800692c <HAL_RCC_GetSysClockFreq>
        pclk = HAL_RCC_GetPCLK1Freq();
 80085de:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 80085e0:	d107      	bne.n	80085f2 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085e2:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80085e4:	4b44      	ldr	r3, [pc, #272]	@ (80086f8 <UART_SetConfig+0x1cc>)
 80085e6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80085ec:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80085ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 80085f0:	4e42      	ldr	r6, [pc, #264]	@ (80086fc <UART_SetConfig+0x1d0>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085f4:	4b42      	ldr	r3, [pc, #264]	@ (8008700 <UART_SetConfig+0x1d4>)
 80085f6:	0052      	lsls	r2, r2, #1
 80085f8:	5ad7      	ldrh	r7, [r2, r3]
 80085fa:	0030      	movs	r0, r6
 80085fc:	0039      	movs	r1, r7
 80085fe:	f7f7 fd97 	bl	8000130 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008602:	2303      	movs	r3, #3
 8008604:	6865      	ldr	r5, [r4, #4]
 8008606:	436b      	muls	r3, r5
 8008608:	4283      	cmp	r3, r0
 800860a:	d8e4      	bhi.n	80085d6 <UART_SetConfig+0xaa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800860c:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800860e:	4283      	cmp	r3, r0
 8008610:	d3e1      	bcc.n	80085d6 <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008612:	2300      	movs	r3, #0
 8008614:	003a      	movs	r2, r7
 8008616:	0030      	movs	r0, r6
 8008618:	0019      	movs	r1, r3
 800861a:	f7f7 fe21 	bl	8000260 <__aeabi_uldivmod>
 800861e:	2700      	movs	r7, #0
 8008620:	0e06      	lsrs	r6, r0, #24
 8008622:	020b      	lsls	r3, r1, #8
 8008624:	4333      	orrs	r3, r6
 8008626:	0202      	lsls	r2, r0, #8
 8008628:	086e      	lsrs	r6, r5, #1
 800862a:	1992      	adds	r2, r2, r6
 800862c:	417b      	adcs	r3, r7
 800862e:	0010      	movs	r0, r2
 8008630:	0019      	movs	r1, r3
 8008632:	002a      	movs	r2, r5
 8008634:	003b      	movs	r3, r7
 8008636:	f7f7 fe13 	bl	8000260 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800863a:	4b32      	ldr	r3, [pc, #200]	@ (8008704 <UART_SetConfig+0x1d8>)
 800863c:	18c2      	adds	r2, r0, r3
 800863e:	4b32      	ldr	r3, [pc, #200]	@ (8008708 <UART_SetConfig+0x1dc>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008640:	429a      	cmp	r2, r3
 8008642:	d8c8      	bhi.n	80085d6 <UART_SetConfig+0xaa>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	60d8      	str	r0, [r3, #12]
 8008648:	e7cb      	b.n	80085e2 <UART_SetConfig+0xb6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800864a:	2680      	movs	r6, #128	@ 0x80
 800864c:	0236      	lsls	r6, r6, #8
 800864e:	e7d0      	b.n	80085f2 <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 8008650:	f7fe f96c 	bl	800692c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008654:	2800      	cmp	r0, #0
 8008656:	d0c4      	beq.n	80085e2 <UART_SetConfig+0xb6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008658:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800865a:	4b29      	ldr	r3, [pc, #164]	@ (8008700 <UART_SetConfig+0x1d4>)
 800865c:	0052      	lsls	r2, r2, #1
 800865e:	5ad1      	ldrh	r1, [r2, r3]
 8008660:	f7f7 fd66 	bl	8000130 <__udivsi3>
 8008664:	6865      	ldr	r5, [r4, #4]
 8008666:	0040      	lsls	r0, r0, #1
 8008668:	086b      	lsrs	r3, r5, #1
 800866a:	18c0      	adds	r0, r0, r3
 800866c:	0029      	movs	r1, r5
 800866e:	f7f7 fd5f 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008672:	0002      	movs	r2, r0
 8008674:	4b25      	ldr	r3, [pc, #148]	@ (800870c <UART_SetConfig+0x1e0>)
 8008676:	3a10      	subs	r2, #16
 8008678:	429a      	cmp	r2, r3
 800867a:	d8ac      	bhi.n	80085d6 <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800867c:	230f      	movs	r3, #15
 800867e:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008680:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008682:	439a      	bics	r2, r3
 8008684:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008686:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	4303      	orrs	r3, r0
 800868c:	60d3      	str	r3, [r2, #12]
 800868e:	e7a8      	b.n	80085e2 <UART_SetConfig+0xb6>
        pclk = (uint32_t) HSI_VALUE;
 8008690:	481a      	ldr	r0, [pc, #104]	@ (80086fc <UART_SetConfig+0x1d0>)
 8008692:	e7e1      	b.n	8008658 <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008694:	f7fe fa38 	bl	8006b08 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008698:	2800      	cmp	r0, #0
 800869a:	d0a2      	beq.n	80085e2 <UART_SetConfig+0xb6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800869c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800869e:	4b18      	ldr	r3, [pc, #96]	@ (8008700 <UART_SetConfig+0x1d4>)
 80086a0:	0052      	lsls	r2, r2, #1
 80086a2:	5ad1      	ldrh	r1, [r2, r3]
 80086a4:	f7f7 fd44 	bl	8000130 <__udivsi3>
 80086a8:	6865      	ldr	r5, [r4, #4]
 80086aa:	086b      	lsrs	r3, r5, #1
 80086ac:	18c0      	adds	r0, r0, r3
 80086ae:	0029      	movs	r1, r5
 80086b0:	f7f7 fd3e 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b4:	0002      	movs	r2, r0
 80086b6:	4b15      	ldr	r3, [pc, #84]	@ (800870c <UART_SetConfig+0x1e0>)
 80086b8:	3a10      	subs	r2, #16
 80086ba:	e7c1      	b.n	8008640 <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086bc:	4298      	cmp	r0, r3
 80086be:	d0e7      	beq.n	8008690 <UART_SetConfig+0x164>
 80086c0:	480e      	ldr	r0, [pc, #56]	@ (80086fc <UART_SetConfig+0x1d0>)
 80086c2:	e7eb      	b.n	800869c <UART_SetConfig+0x170>
 80086c4:	2380      	movs	r3, #128	@ 0x80
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	e768      	b.n	800859c <UART_SetConfig+0x70>
 80086ca:	4298      	cmp	r0, r3
 80086cc:	d0c0      	beq.n	8008650 <UART_SetConfig+0x124>
        pclk = HAL_RCC_GetSysClockFreq();
 80086ce:	f7fe f92d 	bl	800692c <HAL_RCC_GetSysClockFreq>
        break;
 80086d2:	e7e1      	b.n	8008698 <UART_SetConfig+0x16c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086d4:	4298      	cmp	r0, r3
 80086d6:	d0bf      	beq.n	8008658 <UART_SetConfig+0x12c>
        pclk = (uint32_t) LSE_VALUE;
 80086d8:	0018      	movs	r0, r3
 80086da:	e7df      	b.n	800869c <UART_SetConfig+0x170>
 80086dc:	cfff69f3 	.word	0xcfff69f3
 80086e0:	ffffcfff 	.word	0xffffcfff
 80086e4:	40008000 	.word	0x40008000
 80086e8:	11fff4ff 	.word	0x11fff4ff
 80086ec:	40013800 	.word	0x40013800
 80086f0:	40021000 	.word	0x40021000
 80086f4:	40004400 	.word	0x40004400
 80086f8:	00010001 	.word	0x00010001
 80086fc:	00f42400 	.word	0x00f42400
 8008700:	080093f8 	.word	0x080093f8
 8008704:	fffffd00 	.word	0xfffffd00
 8008708:	000ffcff 	.word	0x000ffcff
 800870c:	0000ffef 	.word	0x0000ffef

08008710 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008710:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8008712:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008714:	071a      	lsls	r2, r3, #28
 8008716:	d506      	bpl.n	8008726 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008718:	6801      	ldr	r1, [r0, #0]
 800871a:	4c28      	ldr	r4, [pc, #160]	@ (80087bc <UART_AdvFeatureConfig+0xac>)
 800871c:	684a      	ldr	r2, [r1, #4]
 800871e:	4022      	ands	r2, r4
 8008720:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008722:	4322      	orrs	r2, r4
 8008724:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008726:	07da      	lsls	r2, r3, #31
 8008728:	d506      	bpl.n	8008738 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800872a:	6801      	ldr	r1, [r0, #0]
 800872c:	4c24      	ldr	r4, [pc, #144]	@ (80087c0 <UART_AdvFeatureConfig+0xb0>)
 800872e:	684a      	ldr	r2, [r1, #4]
 8008730:	4022      	ands	r2, r4
 8008732:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008734:	4322      	orrs	r2, r4
 8008736:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008738:	079a      	lsls	r2, r3, #30
 800873a:	d506      	bpl.n	800874a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800873c:	6801      	ldr	r1, [r0, #0]
 800873e:	4c21      	ldr	r4, [pc, #132]	@ (80087c4 <UART_AdvFeatureConfig+0xb4>)
 8008740:	684a      	ldr	r2, [r1, #4]
 8008742:	4022      	ands	r2, r4
 8008744:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008746:	4322      	orrs	r2, r4
 8008748:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800874a:	075a      	lsls	r2, r3, #29
 800874c:	d506      	bpl.n	800875c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800874e:	6801      	ldr	r1, [r0, #0]
 8008750:	4c1d      	ldr	r4, [pc, #116]	@ (80087c8 <UART_AdvFeatureConfig+0xb8>)
 8008752:	684a      	ldr	r2, [r1, #4]
 8008754:	4022      	ands	r2, r4
 8008756:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008758:	4322      	orrs	r2, r4
 800875a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800875c:	06da      	lsls	r2, r3, #27
 800875e:	d506      	bpl.n	800876e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008760:	6801      	ldr	r1, [r0, #0]
 8008762:	4c1a      	ldr	r4, [pc, #104]	@ (80087cc <UART_AdvFeatureConfig+0xbc>)
 8008764:	688a      	ldr	r2, [r1, #8]
 8008766:	4022      	ands	r2, r4
 8008768:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800876a:	4322      	orrs	r2, r4
 800876c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800876e:	069a      	lsls	r2, r3, #26
 8008770:	d506      	bpl.n	8008780 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008772:	6801      	ldr	r1, [r0, #0]
 8008774:	4c16      	ldr	r4, [pc, #88]	@ (80087d0 <UART_AdvFeatureConfig+0xc0>)
 8008776:	688a      	ldr	r2, [r1, #8]
 8008778:	4022      	ands	r2, r4
 800877a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800877c:	4322      	orrs	r2, r4
 800877e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008780:	065a      	lsls	r2, r3, #25
 8008782:	d510      	bpl.n	80087a6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008784:	6801      	ldr	r1, [r0, #0]
 8008786:	4d13      	ldr	r5, [pc, #76]	@ (80087d4 <UART_AdvFeatureConfig+0xc4>)
 8008788:	684a      	ldr	r2, [r1, #4]
 800878a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800878c:	402a      	ands	r2, r5
 800878e:	4322      	orrs	r2, r4
 8008790:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008792:	2280      	movs	r2, #128	@ 0x80
 8008794:	0352      	lsls	r2, r2, #13
 8008796:	4294      	cmp	r4, r2
 8008798:	d105      	bne.n	80087a6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800879a:	684a      	ldr	r2, [r1, #4]
 800879c:	4c0e      	ldr	r4, [pc, #56]	@ (80087d8 <UART_AdvFeatureConfig+0xc8>)
 800879e:	4022      	ands	r2, r4
 80087a0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80087a2:	4322      	orrs	r2, r4
 80087a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087a6:	061b      	lsls	r3, r3, #24
 80087a8:	d506      	bpl.n	80087b8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087aa:	6802      	ldr	r2, [r0, #0]
 80087ac:	490b      	ldr	r1, [pc, #44]	@ (80087dc <UART_AdvFeatureConfig+0xcc>)
 80087ae:	6853      	ldr	r3, [r2, #4]
 80087b0:	400b      	ands	r3, r1
 80087b2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80087b4:	430b      	orrs	r3, r1
 80087b6:	6053      	str	r3, [r2, #4]
}
 80087b8:	bd30      	pop	{r4, r5, pc}
 80087ba:	46c0      	nop			@ (mov r8, r8)
 80087bc:	ffff7fff 	.word	0xffff7fff
 80087c0:	fffdffff 	.word	0xfffdffff
 80087c4:	fffeffff 	.word	0xfffeffff
 80087c8:	fffbffff 	.word	0xfffbffff
 80087cc:	ffffefff 	.word	0xffffefff
 80087d0:	ffffdfff 	.word	0xffffdfff
 80087d4:	ffefffff 	.word	0xffefffff
 80087d8:	ff9fffff 	.word	0xff9fffff
 80087dc:	fff7ffff 	.word	0xfff7ffff

080087e0 <UART_WaitOnFlagUntilTimeout>:
{
 80087e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087e2:	0004      	movs	r4, r0
 80087e4:	000d      	movs	r5, r1
 80087e6:	0017      	movs	r7, r2
 80087e8:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	69d3      	ldr	r3, [r2, #28]
 80087ee:	402b      	ands	r3, r5
 80087f0:	1b5b      	subs	r3, r3, r5
 80087f2:	4259      	negs	r1, r3
 80087f4:	414b      	adcs	r3, r1
 80087f6:	42bb      	cmp	r3, r7
 80087f8:	d001      	beq.n	80087fe <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80087fa:	2000      	movs	r0, #0
 80087fc:	e026      	b.n	800884c <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80087fe:	9b08      	ldr	r3, [sp, #32]
 8008800:	3301      	adds	r3, #1
 8008802:	d0f3      	beq.n	80087ec <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008804:	f7fc fb62 	bl	8004ecc <HAL_GetTick>
 8008808:	9b00      	ldr	r3, [sp, #0]
 800880a:	1ac0      	subs	r0, r0, r3
 800880c:	9b08      	ldr	r3, [sp, #32]
 800880e:	4298      	cmp	r0, r3
 8008810:	d82d      	bhi.n	800886e <UART_WaitOnFlagUntilTimeout+0x8e>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d02b      	beq.n	800886e <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	0752      	lsls	r2, r2, #29
 800881c:	d5e5      	bpl.n	80087ea <UART_WaitOnFlagUntilTimeout+0xa>
 800881e:	002a      	movs	r2, r5
 8008820:	2140      	movs	r1, #64	@ 0x40
 8008822:	3a40      	subs	r2, #64	@ 0x40
 8008824:	438a      	bics	r2, r1
 8008826:	d0e0      	beq.n	80087ea <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008828:	69da      	ldr	r2, [r3, #28]
 800882a:	2608      	movs	r6, #8
 800882c:	0011      	movs	r1, r2
 800882e:	4031      	ands	r1, r6
 8008830:	9101      	str	r1, [sp, #4]
 8008832:	4232      	tst	r2, r6
 8008834:	d00b      	beq.n	800884e <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 8008836:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008838:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800883a:	f7ff fb8b 	bl	8007f54 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800883e:	0023      	movs	r3, r4
 8008840:	3390      	adds	r3, #144	@ 0x90
 8008842:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 8008844:	2300      	movs	r3, #0
          return HAL_ERROR;
 8008846:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8008848:	3484      	adds	r4, #132	@ 0x84
 800884a:	7023      	strb	r3, [r4, #0]
}
 800884c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800884e:	2280      	movs	r2, #128	@ 0x80
 8008850:	69d9      	ldr	r1, [r3, #28]
 8008852:	0112      	lsls	r2, r2, #4
 8008854:	4211      	tst	r1, r2
 8008856:	d0c8      	beq.n	80087ea <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008858:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800885a:	0020      	movs	r0, r4
 800885c:	f7ff fb7a 	bl	8007f54 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008860:	0023      	movs	r3, r4
 8008862:	2220      	movs	r2, #32
 8008864:	3390      	adds	r3, #144	@ 0x90
 8008866:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	3484      	adds	r4, #132	@ 0x84
 800886c:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800886e:	2003      	movs	r0, #3
 8008870:	e7ec      	b.n	800884c <UART_WaitOnFlagUntilTimeout+0x6c>
	...

08008874 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008874:	0003      	movs	r3, r0
{
 8008876:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008878:	2600      	movs	r6, #0
{
 800887a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887c:	3390      	adds	r3, #144	@ 0x90
 800887e:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8008880:	f7fc fb24 	bl	8004ecc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008884:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008886:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	071b      	lsls	r3, r3, #28
 800888c:	d51f      	bpl.n	80088ce <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800888e:	2180      	movs	r1, #128	@ 0x80
 8008890:	4b28      	ldr	r3, [pc, #160]	@ (8008934 <UART_CheckIdleState+0xc0>)
 8008892:	0032      	movs	r2, r6
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	0389      	lsls	r1, r1, #14
 8008898:	0003      	movs	r3, r0
 800889a:	0020      	movs	r0, r4
 800889c:	f7ff ffa0 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 80088a0:	42b0      	cmp	r0, r6
 80088a2:	d014      	beq.n	80088ce <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a8:	2301      	movs	r3, #1
 80088aa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088ae:	2080      	movs	r0, #128	@ 0x80
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	6813      	ldr	r3, [r2, #0]
 80088b4:	4383      	bics	r3, r0
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80088bc:	0023      	movs	r3, r4
 80088be:	2220      	movs	r2, #32
 80088c0:	3388      	adds	r3, #136	@ 0x88
 80088c2:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 80088c4:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80088c6:	2300      	movs	r3, #0
 80088c8:	3484      	adds	r4, #132	@ 0x84
 80088ca:	7023      	strb	r3, [r4, #0]
}
 80088cc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088ce:	0026      	movs	r6, r4
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	368c      	adds	r6, #140	@ 0x8c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	075b      	lsls	r3, r3, #29
 80088d8:	d523      	bpl.n	8008922 <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088da:	2180      	movs	r1, #128	@ 0x80
 80088dc:	4b15      	ldr	r3, [pc, #84]	@ (8008934 <UART_CheckIdleState+0xc0>)
 80088de:	2200      	movs	r2, #0
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	0020      	movs	r0, r4
 80088e4:	002b      	movs	r3, r5
 80088e6:	03c9      	lsls	r1, r1, #15
 80088e8:	f7ff ff7a 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d018      	beq.n	8008922 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088f0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f4:	2201      	movs	r2, #1
 80088f6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088fa:	6821      	ldr	r1, [r4, #0]
 80088fc:	4d0e      	ldr	r5, [pc, #56]	@ (8008938 <UART_CheckIdleState+0xc4>)
 80088fe:	680b      	ldr	r3, [r1, #0]
 8008900:	402b      	ands	r3, r5
 8008902:	600b      	str	r3, [r1, #0]
 8008904:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008908:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008910:	6821      	ldr	r1, [r4, #0]
 8008912:	688b      	ldr	r3, [r1, #8]
 8008914:	4393      	bics	r3, r2
 8008916:	608b      	str	r3, [r1, #8]
 8008918:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800891c:	2320      	movs	r3, #32
 800891e:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8008920:	e7d0      	b.n	80088c4 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8008922:	0023      	movs	r3, r4
 8008924:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008926:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8008928:	3388      	adds	r3, #136	@ 0x88
 800892a:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800892c:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008930:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8008932:	e7c8      	b.n	80088c6 <UART_CheckIdleState+0x52>
 8008934:	01ffffff 	.word	0x01ffffff
 8008938:	fffffedf 	.word	0xfffffedf

0800893c <HAL_UART_Init>:
{
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8008940:	d101      	bne.n	8008946 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8008942:	2001      	movs	r0, #1
}
 8008944:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8008946:	0005      	movs	r5, r0
 8008948:	3588      	adds	r5, #136	@ 0x88
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10e      	bne.n	800896e <HAL_UART_Init+0x32>
    huart->Lock = HAL_UNLOCKED;
 8008950:	0002      	movs	r2, r0
 8008952:	3284      	adds	r2, #132	@ 0x84
 8008954:	7013      	strb	r3, [r2, #0]
    UART_InitCallbacksToDefault(huart);
 8008956:	f7ff fdb5 	bl	80084c4 <UART_InitCallbacksToDefault>
    if (huart->MspInitCallback == NULL)
 800895a:	0023      	movs	r3, r4
 800895c:	33c4      	adds	r3, #196	@ 0xc4
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	2a00      	cmp	r2, #0
 8008962:	d101      	bne.n	8008968 <HAL_UART_Init+0x2c>
      huart->MspInitCallback = HAL_UART_MspInit;
 8008964:	4a13      	ldr	r2, [pc, #76]	@ (80089b4 <HAL_UART_Init+0x78>)
 8008966:	601a      	str	r2, [r3, #0]
    huart->MspInitCallback(huart);
 8008968:	0020      	movs	r0, r4
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4798      	blx	r3
  huart->gState = HAL_UART_STATE_BUSY;
 800896e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8008970:	2101      	movs	r1, #1
 8008972:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008974:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	438b      	bics	r3, r1
 800897a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800897c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <HAL_UART_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 8008982:	0020      	movs	r0, r4
 8008984:	f7ff fec4 	bl	8008710 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008988:	0020      	movs	r0, r4
 800898a:	f7ff fdcf 	bl	800852c <UART_SetConfig>
 800898e:	2801      	cmp	r0, #1
 8008990:	d0d7      	beq.n	8008942 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	4908      	ldr	r1, [pc, #32]	@ (80089b8 <HAL_UART_Init+0x7c>)
 8008996:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8008998:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800899a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800899c:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800899e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	438a      	bics	r2, r1
 80089a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80089a6:	2201      	movs	r2, #1
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80089ae:	f7ff ff61 	bl	8008874 <UART_CheckIdleState>
 80089b2:	e7c7      	b.n	8008944 <HAL_UART_Init+0x8>
 80089b4:	08004719 	.word	0x08004719
 80089b8:	ffffb7ff 	.word	0xffffb7ff

080089bc <UART_Start_Receive_DMA>:
{
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 80089c0:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c2:	0006      	movs	r6, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089c4:	0005      	movs	r5, r0
  huart->RxXferSize = Size;
 80089c6:	325c      	adds	r2, #92	@ 0x5c
  huart->pRxBuffPtr = pData;
 80089c8:	6581      	str	r1, [r0, #88]	@ 0x58
{
 80089ca:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 80089cc:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089ce:	2122      	movs	r1, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d0:	2200      	movs	r2, #0
 80089d2:	3690      	adds	r6, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d4:	358c      	adds	r5, #140	@ 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d6:	6032      	str	r2, [r6, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d8:	6029      	str	r1, [r5, #0]
  if (huart->hdmarx != NULL)
 80089da:	1d01      	adds	r1, r0, #4
{
 80089dc:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 80089de:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 80089e0:	4290      	cmp	r0, r2
 80089e2:	d013      	beq.n	8008a0c <UART_Start_Receive_DMA+0x50>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089e4:	491d      	ldr	r1, [pc, #116]	@ (8008a5c <UART_Start_Receive_DMA+0xa0>)
    huart->hdmarx->XferAbortCallback = NULL;
 80089e6:	6382      	str	r2, [r0, #56]	@ 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089e8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089ea:	491d      	ldr	r1, [pc, #116]	@ (8008a60 <UART_Start_Receive_DMA+0xa4>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80089ec:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089ee:	6301      	str	r1, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089f0:	491c      	ldr	r1, [pc, #112]	@ (8008a64 <UART_Start_Receive_DMA+0xa8>)
 80089f2:	6341      	str	r1, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80089f4:	6821      	ldr	r1, [r4, #0]
 80089f6:	3124      	adds	r1, #36	@ 0x24
 80089f8:	f7fd f85a 	bl	8005ab0 <HAL_DMA_Start_IT>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d005      	beq.n	8008a0c <UART_Start_Receive_DMA+0x50>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a00:	2310      	movs	r3, #16
      return HAL_ERROR;
 8008a02:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a04:	6033      	str	r3, [r6, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8008a06:	18db      	adds	r3, r3, r3
 8008a08:	602b      	str	r3, [r5, #0]
}
 8008a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <UART_Start_Receive_DMA+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a12:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a16:	2301      	movs	r3, #1
 8008a18:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1c:	6822      	ldr	r2, [r4, #0]
 8008a1e:	33ff      	adds	r3, #255	@ 0xff
 8008a20:	6810      	ldr	r0, [r2, #0]
 8008a22:	4303      	orrs	r3, r0
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a2a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a34:	6821      	ldr	r1, [r4, #0]
 8008a36:	688a      	ldr	r2, [r1, #8]
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	608a      	str	r2, [r1, #8]
 8008a3c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a44:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	333f      	adds	r3, #63	@ 0x3f
 8008a4c:	6890      	ldr	r0, [r2, #8]
 8008a4e:	4303      	orrs	r3, r0
 8008a50:	6093      	str	r3, [r2, #8]
 8008a52:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8008a56:	2000      	movs	r0, #0
 8008a58:	e7d7      	b.n	8008a0a <UART_Start_Receive_DMA+0x4e>
 8008a5a:	46c0      	nop			@ (mov r8, r8)
 8008a5c:	08007fb9 	.word	0x08007fb9
 8008a60:	0800805d 	.word	0x0800805d
 8008a64:	08008085 	.word	0x08008085

08008a68 <HAL_UART_Receive_DMA>:
{
 8008a68:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a6a:	308c      	adds	r0, #140	@ 0x8c
{
 8008a6c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a6e:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 8008a70:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a72:	2c20      	cmp	r4, #32
 8008a74:	d128      	bne.n	8008ac8 <HAL_UART_Receive_DMA+0x60>
      return HAL_ERROR;
 8008a76:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d025      	beq.n	8008ac8 <HAL_UART_Receive_DMA+0x60>
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	d023      	beq.n	8008ac8 <HAL_UART_Receive_DMA+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a80:	2080      	movs	r0, #128	@ 0x80
 8008a82:	689c      	ldr	r4, [r3, #8]
 8008a84:	0140      	lsls	r0, r0, #5
 8008a86:	4284      	cmp	r4, r0
 8008a88:	d105      	bne.n	8008a96 <HAL_UART_Receive_DMA+0x2e>
 8008a8a:	6918      	ldr	r0, [r3, #16]
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d102      	bne.n	8008a96 <HAL_UART_Receive_DMA+0x2e>
      return HAL_ERROR;
 8008a90:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8008a92:	4201      	tst	r1, r0
 8008a94:	d118      	bne.n	8008ac8 <HAL_UART_Receive_DMA+0x60>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a98:	4c0c      	ldr	r4, [pc, #48]	@ (8008acc <HAL_UART_Receive_DMA+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9a:	66d8      	str	r0, [r3, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	42a0      	cmp	r0, r4
 8008aa0:	d00f      	beq.n	8008ac2 <HAL_UART_Receive_DMA+0x5a>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008aa2:	6840      	ldr	r0, [r0, #4]
 8008aa4:	0200      	lsls	r0, r0, #8
 8008aa6:	d50c      	bpl.n	8008ac2 <HAL_UART_Receive_DMA+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aac:	2001      	movs	r0, #1
 8008aae:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ab2:	2080      	movs	r0, #128	@ 0x80
 8008ab4:	681c      	ldr	r4, [r3, #0]
 8008ab6:	04c0      	lsls	r0, r0, #19
 8008ab8:	6826      	ldr	r6, [r4, #0]
 8008aba:	4330      	orrs	r0, r6
 8008abc:	6020      	str	r0, [r4, #0]
 8008abe:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f7ff ff7a 	bl	80089bc <UART_Start_Receive_DMA>
}
 8008ac8:	bd70      	pop	{r4, r5, r6, pc}
 8008aca:	46c0      	nop			@ (mov r8, r8)
 8008acc:	40008000 	.word	0x40008000

08008ad0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ad0:	4770      	bx	lr

08008ad2 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8008ad4:	4770      	bx	lr

08008ad6 <memset>:
 8008ad6:	0003      	movs	r3, r0
 8008ad8:	1882      	adds	r2, r0, r2
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d100      	bne.n	8008ae0 <memset+0xa>
 8008ade:	4770      	bx	lr
 8008ae0:	7019      	strb	r1, [r3, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	e7f9      	b.n	8008ada <memset+0x4>
	...

08008ae8 <__libc_init_array>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	2600      	movs	r6, #0
 8008aec:	4c0c      	ldr	r4, [pc, #48]	@ (8008b20 <__libc_init_array+0x38>)
 8008aee:	4d0d      	ldr	r5, [pc, #52]	@ (8008b24 <__libc_init_array+0x3c>)
 8008af0:	1b64      	subs	r4, r4, r5
 8008af2:	10a4      	asrs	r4, r4, #2
 8008af4:	42a6      	cmp	r6, r4
 8008af6:	d109      	bne.n	8008b0c <__libc_init_array+0x24>
 8008af8:	2600      	movs	r6, #0
 8008afa:	f000 f823 	bl	8008b44 <_init>
 8008afe:	4c0a      	ldr	r4, [pc, #40]	@ (8008b28 <__libc_init_array+0x40>)
 8008b00:	4d0a      	ldr	r5, [pc, #40]	@ (8008b2c <__libc_init_array+0x44>)
 8008b02:	1b64      	subs	r4, r4, r5
 8008b04:	10a4      	asrs	r4, r4, #2
 8008b06:	42a6      	cmp	r6, r4
 8008b08:	d105      	bne.n	8008b16 <__libc_init_array+0x2e>
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	00b3      	lsls	r3, r6, #2
 8008b0e:	58eb      	ldr	r3, [r5, r3]
 8008b10:	4798      	blx	r3
 8008b12:	3601      	adds	r6, #1
 8008b14:	e7ee      	b.n	8008af4 <__libc_init_array+0xc>
 8008b16:	00b3      	lsls	r3, r6, #2
 8008b18:	58eb      	ldr	r3, [r5, r3]
 8008b1a:	4798      	blx	r3
 8008b1c:	3601      	adds	r6, #1
 8008b1e:	e7f2      	b.n	8008b06 <__libc_init_array+0x1e>
 8008b20:	08009418 	.word	0x08009418
 8008b24:	08009418 	.word	0x08009418
 8008b28:	0800941c 	.word	0x0800941c
 8008b2c:	08009418 	.word	0x08009418

08008b30 <memcpy>:
 8008b30:	2300      	movs	r3, #0
 8008b32:	b510      	push	{r4, lr}
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d100      	bne.n	8008b3a <memcpy+0xa>
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	5ccc      	ldrb	r4, [r1, r3]
 8008b3c:	54c4      	strb	r4, [r0, r3]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	e7f8      	b.n	8008b34 <memcpy+0x4>
	...

08008b44 <_init>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	46c0      	nop			@ (mov r8, r8)
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr

08008b50 <_fini>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	46c0      	nop			@ (mov r8, r8)
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr
 8008b5c:	0000      	movs	r0, r0
	...

08008b60 <__FLASH_Program_Fast_veneer>:
 8008b60:	b401      	push	{r0}
 8008b62:	4802      	ldr	r0, [pc, #8]	@ (8008b6c <__FLASH_Program_Fast_veneer+0xc>)
 8008b64:	4684      	mov	ip, r0
 8008b66:	bc01      	pop	{r0}
 8008b68:	4760      	bx	ip
 8008b6a:	bf00      	nop
 8008b6c:	2000043d 	.word	0x2000043d

Disassembly of section .data:

20000000 <user_preset_3>:
20000000:	7f7f4040                                 @@..d

20000005 <user_preset_2>:
20000005:	007f4000                                 .@.. 

2000000a <user_preset_1>:
2000000a:	40402840                                 @(@@@

2000000f <user_preset_0>:
2000000f:	407f6e7f                                 .n.@.

20000014 <led_blink_period>:
20000014:	0000012c                                ,...

20000018 <tap_tempo_switch_state_counter.1>:
20000018:	                                         .

20000019 <preset.4>:
20000019:	                                         .

2000001a <delay_line>:
	...
2000041a:	00010000                                 ......

20000420 <LED_fsm>:
20000420:	                                         ..

20000422 <IP_CAP_fsm>:
20000422:	                                         ..

20000424 <phase_fsm>:
20000424:	                                         ..

20000426 <symmetry_fsm>:
20000426:	                                         ..

20000428 <waveshape_fsm>:
20000428:	                                         ..

2000042a <depth_fsm>:
2000042a:	                                         ..

2000042c <speed_fsm>:
2000042c:	00000001                                ....

20000430 <SystemCoreClock>:
20000430:	00f42400                                .$..

20000434 <uwTickFreq>:
20000434:	00000001                                ....

20000438 <uwTickPrio>:
20000438:	00000004                                ....

2000043c <FLASH_Program_Fast>:
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000043c:	2280      	movs	r2, #128	@ 0x80
2000043e:	4b0c      	ldr	r3, [pc, #48]	@ (20000470 <FLASH_Program_Fast+0x34>)
{
20000440:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000442:	695c      	ldr	r4, [r3, #20]
20000444:	02d2      	lsls	r2, r2, #11
20000446:	4322      	orrs	r2, r4
20000448:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000044a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000044e:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000450:	1c4c      	adds	r4, r1, #1
20000452:	34ff      	adds	r4, #255	@ 0xff
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000454:	1a40      	subs	r0, r0, r1
20000456:	680d      	ldr	r5, [r1, #0]
20000458:	5045      	str	r5, [r0, r1]
    src += 4U;
2000045a:	3104      	adds	r1, #4
  while (index < 64U)
2000045c:	42a1      	cmp	r1, r4
2000045e:	d1fa      	bne.n	20000456 <FLASH_Program_Fast+0x1a>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000460:	2180      	movs	r1, #128	@ 0x80
20000462:	0249      	lsls	r1, r1, #9
20000464:	6918      	ldr	r0, [r3, #16]
20000466:	4208      	tst	r0, r1
20000468:	d1fc      	bne.n	20000464 <FLASH_Program_Fast+0x28>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000046a:	f382 8810 	msr	PRIMASK, r2
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000046e:	bd30      	pop	{r4, r5, pc}
20000470:	40022000 	.word	0x40022000
