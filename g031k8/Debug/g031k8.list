
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c3c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cf8  08000cf8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cf8  08000cf8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000cf8  08000cf8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cf8  08000cf8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cf8  08000cf8  00001cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cfc  08000cfc  00001cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000d00  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000008  08000d04  00002008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  08000d04  000026e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154fc  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a68  00000000  00000000  00017528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00018f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109b  00000000  00000000  00019a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001dfa  00000000  00000000  0001aabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160fe  00000000  00000000  0001c8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f545  00000000  00000000  000329b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1ef8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001da8  00000000  00000000  000d1f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000a638  00000000  00000000  000d3ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000de31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000ce0 	.word	0x08000ce0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08000ce0 	.word	0x08000ce0

08000104 <__divsi3>:
 8000104:	4603      	mov	r3, r0
 8000106:	430b      	orrs	r3, r1
 8000108:	d47f      	bmi.n	800020a <__divsi3+0x106>
 800010a:	2200      	movs	r2, #0
 800010c:	0843      	lsrs	r3, r0, #1
 800010e:	428b      	cmp	r3, r1
 8000110:	d374      	bcc.n	80001fc <__divsi3+0xf8>
 8000112:	0903      	lsrs	r3, r0, #4
 8000114:	428b      	cmp	r3, r1
 8000116:	d35f      	bcc.n	80001d8 <__divsi3+0xd4>
 8000118:	0a03      	lsrs	r3, r0, #8
 800011a:	428b      	cmp	r3, r1
 800011c:	d344      	bcc.n	80001a8 <__divsi3+0xa4>
 800011e:	0b03      	lsrs	r3, r0, #12
 8000120:	428b      	cmp	r3, r1
 8000122:	d328      	bcc.n	8000176 <__divsi3+0x72>
 8000124:	0c03      	lsrs	r3, r0, #16
 8000126:	428b      	cmp	r3, r1
 8000128:	d30d      	bcc.n	8000146 <__divsi3+0x42>
 800012a:	22ff      	movs	r2, #255	@ 0xff
 800012c:	0209      	lsls	r1, r1, #8
 800012e:	ba12      	rev	r2, r2
 8000130:	0c03      	lsrs	r3, r0, #16
 8000132:	428b      	cmp	r3, r1
 8000134:	d302      	bcc.n	800013c <__divsi3+0x38>
 8000136:	1212      	asrs	r2, r2, #8
 8000138:	0209      	lsls	r1, r1, #8
 800013a:	d065      	beq.n	8000208 <__divsi3+0x104>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d319      	bcc.n	8000176 <__divsi3+0x72>
 8000142:	e000      	b.n	8000146 <__divsi3+0x42>
 8000144:	0a09      	lsrs	r1, r1, #8
 8000146:	0bc3      	lsrs	r3, r0, #15
 8000148:	428b      	cmp	r3, r1
 800014a:	d301      	bcc.n	8000150 <__divsi3+0x4c>
 800014c:	03cb      	lsls	r3, r1, #15
 800014e:	1ac0      	subs	r0, r0, r3
 8000150:	4152      	adcs	r2, r2
 8000152:	0b83      	lsrs	r3, r0, #14
 8000154:	428b      	cmp	r3, r1
 8000156:	d301      	bcc.n	800015c <__divsi3+0x58>
 8000158:	038b      	lsls	r3, r1, #14
 800015a:	1ac0      	subs	r0, r0, r3
 800015c:	4152      	adcs	r2, r2
 800015e:	0b43      	lsrs	r3, r0, #13
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__divsi3+0x64>
 8000164:	034b      	lsls	r3, r1, #13
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__divsi3+0x70>
 8000170:	030b      	lsls	r3, r1, #12
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0ac3      	lsrs	r3, r0, #11
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__divsi3+0x7c>
 800017c:	02cb      	lsls	r3, r1, #11
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0a83      	lsrs	r3, r0, #10
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__divsi3+0x88>
 8000188:	028b      	lsls	r3, r1, #10
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	0a43      	lsrs	r3, r0, #9
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__divsi3+0x94>
 8000194:	024b      	lsls	r3, r1, #9
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0a03      	lsrs	r3, r0, #8
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__divsi3+0xa0>
 80001a0:	020b      	lsls	r3, r1, #8
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	d2cd      	bcs.n	8000144 <__divsi3+0x40>
 80001a8:	09c3      	lsrs	r3, r0, #7
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__divsi3+0xae>
 80001ae:	01cb      	lsls	r3, r1, #7
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0983      	lsrs	r3, r0, #6
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__divsi3+0xba>
 80001ba:	018b      	lsls	r3, r1, #6
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0943      	lsrs	r3, r0, #5
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__divsi3+0xc6>
 80001c6:	014b      	lsls	r3, r1, #5
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0903      	lsrs	r3, r0, #4
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__divsi3+0xd2>
 80001d2:	010b      	lsls	r3, r1, #4
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	08c3      	lsrs	r3, r0, #3
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__divsi3+0xde>
 80001de:	00cb      	lsls	r3, r1, #3
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0883      	lsrs	r3, r0, #2
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__divsi3+0xea>
 80001ea:	008b      	lsls	r3, r1, #2
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0843      	lsrs	r3, r0, #1
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__divsi3+0xf6>
 80001f6:	004b      	lsls	r3, r1, #1
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	1a41      	subs	r1, r0, r1
 80001fe:	d200      	bcs.n	8000202 <__divsi3+0xfe>
 8000200:	4601      	mov	r1, r0
 8000202:	4152      	adcs	r2, r2
 8000204:	4610      	mov	r0, r2
 8000206:	4770      	bx	lr
 8000208:	e05d      	b.n	80002c6 <__divsi3+0x1c2>
 800020a:	0fca      	lsrs	r2, r1, #31
 800020c:	d000      	beq.n	8000210 <__divsi3+0x10c>
 800020e:	4249      	negs	r1, r1
 8000210:	1003      	asrs	r3, r0, #32
 8000212:	d300      	bcc.n	8000216 <__divsi3+0x112>
 8000214:	4240      	negs	r0, r0
 8000216:	4053      	eors	r3, r2
 8000218:	2200      	movs	r2, #0
 800021a:	469c      	mov	ip, r3
 800021c:	0903      	lsrs	r3, r0, #4
 800021e:	428b      	cmp	r3, r1
 8000220:	d32d      	bcc.n	800027e <__divsi3+0x17a>
 8000222:	0a03      	lsrs	r3, r0, #8
 8000224:	428b      	cmp	r3, r1
 8000226:	d312      	bcc.n	800024e <__divsi3+0x14a>
 8000228:	22fc      	movs	r2, #252	@ 0xfc
 800022a:	0189      	lsls	r1, r1, #6
 800022c:	ba12      	rev	r2, r2
 800022e:	0a03      	lsrs	r3, r0, #8
 8000230:	428b      	cmp	r3, r1
 8000232:	d30c      	bcc.n	800024e <__divsi3+0x14a>
 8000234:	0189      	lsls	r1, r1, #6
 8000236:	1192      	asrs	r2, r2, #6
 8000238:	428b      	cmp	r3, r1
 800023a:	d308      	bcc.n	800024e <__divsi3+0x14a>
 800023c:	0189      	lsls	r1, r1, #6
 800023e:	1192      	asrs	r2, r2, #6
 8000240:	428b      	cmp	r3, r1
 8000242:	d304      	bcc.n	800024e <__divsi3+0x14a>
 8000244:	0189      	lsls	r1, r1, #6
 8000246:	d03a      	beq.n	80002be <__divsi3+0x1ba>
 8000248:	1192      	asrs	r2, r2, #6
 800024a:	e000      	b.n	800024e <__divsi3+0x14a>
 800024c:	0989      	lsrs	r1, r1, #6
 800024e:	09c3      	lsrs	r3, r0, #7
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x154>
 8000254:	01cb      	lsls	r3, r1, #7
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0983      	lsrs	r3, r0, #6
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x160>
 8000260:	018b      	lsls	r3, r1, #6
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0943      	lsrs	r3, r0, #5
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x16c>
 800026c:	014b      	lsls	r3, r1, #5
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x178>
 8000278:	010b      	lsls	r3, r1, #4
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	08c3      	lsrs	r3, r0, #3
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x184>
 8000284:	00cb      	lsls	r3, r1, #3
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0883      	lsrs	r3, r0, #2
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x190>
 8000290:	008b      	lsls	r3, r1, #2
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	d2d9      	bcs.n	800024c <__divsi3+0x148>
 8000298:	0843      	lsrs	r3, r0, #1
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0x19e>
 800029e:	004b      	lsls	r3, r1, #1
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	1a41      	subs	r1, r0, r1
 80002a6:	d200      	bcs.n	80002aa <__divsi3+0x1a6>
 80002a8:	4601      	mov	r1, r0
 80002aa:	4663      	mov	r3, ip
 80002ac:	4152      	adcs	r2, r2
 80002ae:	105b      	asrs	r3, r3, #1
 80002b0:	4610      	mov	r0, r2
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x1b4>
 80002b4:	4240      	negs	r0, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d500      	bpl.n	80002bc <__divsi3+0x1b8>
 80002ba:	4249      	negs	r1, r1
 80002bc:	4770      	bx	lr
 80002be:	4663      	mov	r3, ip
 80002c0:	105b      	asrs	r3, r3, #1
 80002c2:	d300      	bcc.n	80002c6 <__divsi3+0x1c2>
 80002c4:	4240      	negs	r0, r0
 80002c6:	b501      	push	{r0, lr}
 80002c8:	2000      	movs	r0, #0
 80002ca:	f000 f805 	bl	80002d8 <__aeabi_idiv0>
 80002ce:	bd02      	pop	{r1, pc}

080002d0 <__aeabi_idivmod>:
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d0f8      	beq.n	80002c6 <__divsi3+0x1c2>
 80002d4:	e716      	b.n	8000104 <__divsi3>
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_idiv0>:
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			@ (mov r8, r8)

080002dc <main>:

uint16_t periods[129] = {0};
uint8_t check[129] = {0};

int main(void)
{
 80002dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002de:	46de      	mov	lr, fp
 80002e0:	464e      	mov	r6, r9
 80002e2:	4657      	mov	r7, sl
 80002e4:	4645      	mov	r5, r8
 80002e6:	4b27      	ldr	r3, [pc, #156]	@ (8000384 <main+0xa8>)
 80002e8:	b5e0      	push	{r5, r6, r7, lr}
 80002ea:	469b      	mov	fp, r3
 80002ec:	1cde      	adds	r6, r3, #3
 80002ee:	001a      	movs	r2, r3
 80002f0:	2380      	movs	r3, #128	@ 0x80
 80002f2:	b083      	sub	sp, #12
 80002f4:	36ff      	adds	r6, #255	@ 0xff
 80002f6:	005b      	lsls	r3, r3, #1
	//initialise period values in array
	for(uint8_t p = 0; p < 129; p++){

		periods[p] = 256 - p;
 80002f8:	8013      	strh	r3, [r2, #0]
	for(uint8_t p = 0; p < 129; p++){
 80002fa:	3b01      	subs	r3, #1
 80002fc:	3202      	adds	r2, #2
 80002fe:	b29b      	uxth	r3, r3
 8000300:	4296      	cmp	r6, r2
 8000302:	d1f9      	bne.n	80002f8 <main+0x1c>
	}

    for(uint8_t u = 0; u < 66048-8256; u++){
 8000304:	2300      	movs	r3, #0
 8000306:	4699      	mov	r9, r3
        if(isPrime(66048-u) == 0){
 8000308:	4b1f      	ldr	r3, [pc, #124]	@ (8000388 <main+0xac>)
 800030a:	464a      	mov	r2, r9
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	2380      	movs	r3, #128	@ 0x80
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	469a      	mov	sl, r3
}


uint8_t isPrime(uint16_t x){
    for (int d = 2; d * d <= x; d++) {
        if (x % d == 0)
 8000314:	2301      	movs	r3, #1
 8000316:	4698      	mov	r8, r3
        if(isPrime(66048-u) == 0){
 8000318:	4653      	mov	r3, sl
 800031a:	1a9b      	subs	r3, r3, r2
        if (x % d == 0)
 800031c:	4642      	mov	r2, r8
        if(isPrime(66048-u) == 0){
 800031e:	b29d      	uxth	r5, r3
        if (x % d == 0)
 8000320:	4213      	tst	r3, r2
 8000322:	d017      	beq.n	8000354 <main+0x78>
    for (int d = 2; d * d <= x; d++) {
 8000324:	2402      	movs	r4, #2
 8000326:	e005      	b.n	8000334 <main+0x58>
        if (x % d == 0)
 8000328:	0021      	movs	r1, r4
 800032a:	0028      	movs	r0, r5
 800032c:	f7ff ffd0 	bl	80002d0 <__aeabi_idivmod>
 8000330:	2900      	cmp	r1, #0
 8000332:	d00f      	beq.n	8000354 <main+0x78>
    for (int d = 2; d * d <= x; d++) {
 8000334:	3401      	adds	r4, #1
 8000336:	0023      	movs	r3, r4
 8000338:	4363      	muls	r3, r4
 800033a:	42ab      	cmp	r3, r5
 800033c:	ddf4      	ble.n	8000328 <main+0x4c>
    for(uint8_t u = 0; u < 66048-8256; u++){
 800033e:	464b      	mov	r3, r9
 8000340:	3301      	adds	r3, #1
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4699      	mov	r9, r3
        if(isPrime(66048-u) == 0){
 8000346:	464a      	mov	r2, r9
 8000348:	4653      	mov	r3, sl
 800034a:	1a9b      	subs	r3, r3, r2
        if (x % d == 0)
 800034c:	4642      	mov	r2, r8
        if(isPrime(66048-u) == 0){
 800034e:	b29d      	uxth	r5, r3
        if (x % d == 0)
 8000350:	4213      	tst	r3, r2
 8000352:	d1e7      	bne.n	8000324 <main+0x48>
                if((66048 - u) % periods[i] == 0){
 8000354:	2381      	movs	r3, #129	@ 0x81
 8000356:	464a      	mov	r2, r9
 8000358:	465c      	mov	r4, fp
 800035a:	025b      	lsls	r3, r3, #9
 800035c:	9d01      	ldr	r5, [sp, #4]
 800035e:	1a9f      	subs	r7, r3, r2
 8000360:	0038      	movs	r0, r7
 8000362:	8821      	ldrh	r1, [r4, #0]
 8000364:	f7ff ffb4 	bl	80002d0 <__aeabi_idivmod>
 8000368:	2900      	cmp	r1, #0
 800036a:	d101      	bne.n	8000370 <main+0x94>
                	check[i] = 1;
 800036c:	4643      	mov	r3, r8
 800036e:	702b      	strb	r3, [r5, #0]
            for(uint8_t i = 0; i < 129; i++){
 8000370:	3402      	adds	r4, #2
 8000372:	3501      	adds	r5, #1
 8000374:	42b4      	cmp	r4, r6
 8000376:	d1f3      	bne.n	8000360 <main+0x84>
    for(uint8_t u = 0; u < 66048-8256; u++){
 8000378:	464b      	mov	r3, r9
 800037a:	3301      	adds	r3, #1
 800037c:	b2db      	uxtb	r3, r3
 800037e:	4699      	mov	r9, r3
 8000380:	e7e1      	b.n	8000346 <main+0x6a>
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	200005d8 	.word	0x200005d8
 8000388:	20000554 	.word	0x20000554

0800038c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800038c:	e7fe      	b.n	800038c <NMI_Handler>
 800038e:	46c0      	nop			@ (mov r8, r8)

08000390 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <HardFault_Handler>
 8000392:	46c0      	nop			@ (mov r8, r8)

08000394 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000394:	4770      	bx	lr
 8000396:	46c0      	nop			@ (mov r8, r8)

08000398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000398:	4770      	bx	lr
 800039a:	46c0      	nop			@ (mov r8, r8)

0800039c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800039c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039e:	f000 f873 	bl	8000488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a2:	bd10      	pop	{r4, pc}

080003a4 <EXTI4_15_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
 80003a4:	4770      	bx	lr
 80003a6:	46c0      	nop			@ (mov r8, r8)

080003a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80003a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80003aa:	4802      	ldr	r0, [pc, #8]	@ (80003b4 <DMA1_Channel1_IRQHandler+0xc>)
 80003ac:	f000 f8f0 	bl	8000590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80003b0:	bd10      	pop	{r4, pc}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	200004f8 	.word	0x200004f8

080003b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80003b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80003ba:	4803      	ldr	r0, [pc, #12]	@ (80003c8 <DMA1_Channel2_3_IRQHandler+0x10>)
 80003bc:	f000 f8e8 	bl	8000590 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80003c0:	4802      	ldr	r0, [pc, #8]	@ (80003cc <DMA1_Channel2_3_IRQHandler+0x14>)
 80003c2:	f000 f8e5 	bl	8000590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80003c6:	bd10      	pop	{r4, pc}
 80003c8:	200000e0 	.word	0x200000e0
 80003cc:	20000084 	.word	0x20000084

080003d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80003d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80003d2:	4802      	ldr	r0, [pc, #8]	@ (80003dc <TIM2_IRQHandler+0xc>)
 80003d4:	f000 f994 	bl	8000700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80003d8:	bd10      	pop	{r4, pc}
 80003da:	46c0      	nop			@ (mov r8, r8)
 80003dc:	20000380 	.word	0x20000380

080003e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80003e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80003e2:	4802      	ldr	r0, [pc, #8]	@ (80003ec <TIM3_IRQHandler+0xc>)
 80003e4:	f000 f98c 	bl	8000700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80003e8:	bd10      	pop	{r4, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	200002c4 	.word	0x200002c4

080003f0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80003f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80003f2:	4802      	ldr	r0, [pc, #8]	@ (80003fc <TIM16_IRQHandler+0xc>)
 80003f4:	f000 f984 	bl	8000700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	2000043c 	.word	0x2000043c

08000400 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000400:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000402:	4802      	ldr	r0, [pc, #8]	@ (800040c <TIM17_IRQHandler+0xc>)
 8000404:	f000 f97c 	bl	8000700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	20000208 	.word	0x20000208

08000410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000410:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000412:	4802      	ldr	r0, [pc, #8]	@ (800041c <USART2_IRQHandler+0xc>)
 8000414:	f000 fa5a 	bl	80008cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000418:	bd10      	pop	{r4, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	2000013c 	.word	0x2000013c

08000420 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8000420:	b510      	push	{r4, lr}
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000422:	4802      	ldr	r0, [pc, #8]	@ (800042c <LPTIM1_IRQHandler+0xc>)
 8000424:	f000 f910 	bl	8000648 <HAL_LPTIM_IRQHandler>
}
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	20000028 	.word	0x20000028

08000430 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	@ (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000438:	f7ff fffa 	bl	8000430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	@ (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	@ (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000462:	f000 fc19 	bl	8000c98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000466:	f7ff ff39 	bl	80002dc <main>

0800046a <LoopForever>:

LoopForever:
  b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000478:	08000d00 	.word	0x08000d00
  ldr r2, =_sbss
 800047c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000480:	200006e0 	.word	0x200006e0

08000484 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_IRQHandler>
	...

08000488 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000488:	4a03      	ldr	r2, [pc, #12]	@ (8000498 <HAL_IncTick+0x10>)
 800048a:	4b04      	ldr	r3, [pc, #16]	@ (800049c <HAL_IncTick+0x14>)
 800048c:	6811      	ldr	r1, [r2, #0]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	185b      	adds	r3, r3, r1
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	200006dc 	.word	0x200006dc
 800049c:	20000000 	.word	0x20000000

080004a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80004a0:	b570      	push	{r4, r5, r6, lr}
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d032      	beq.n	800050c <HAL_DMA_Abort+0x6c>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80004a6:	2325      	movs	r3, #37	@ 0x25
 80004a8:	5cc3      	ldrb	r3, [r0, r3]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d129      	bne.n	8000502 <HAL_DMA_Abort+0x62>
    return HAL_ERROR;
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004ae:	210e      	movs	r1, #14
 80004b0:	6802      	ldr	r2, [r0, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80004b2:	4c17      	ldr	r4, [pc, #92]	@ (8000510 <HAL_DMA_Abort+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004b4:	6813      	ldr	r3, [r2, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80004b6:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004b8:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80004ba:	6c41      	ldr	r1, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004bc:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80004be:	680b      	ldr	r3, [r1, #0]
 80004c0:	4023      	ands	r3, r4
 80004c2:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80004c4:	2301      	movs	r3, #1
 80004c6:	6811      	ldr	r1, [r2, #0]
 80004c8:	4399      	bics	r1, r3
 80004ca:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80004cc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80004ce:	4911      	ldr	r1, [pc, #68]	@ (8000514 <HAL_DMA_Abort+0x74>)
 80004d0:	4032      	ands	r2, r6
 80004d2:	4093      	lsls	r3, r2
 80004d4:	684d      	ldr	r5, [r1, #4]
 80004d6:	432b      	orrs	r3, r5
 80004d8:	604b      	str	r3, [r1, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80004da:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80004dc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80004de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80004e0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d005      	beq.n	80004f2 <HAL_DMA_Abort+0x52>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4022      	ands	r2, r4
 80004ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80004ec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80004ee:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80004f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004f2:	2325      	movs	r3, #37	@ 0x25
 80004f4:	2201      	movs	r2, #1
 80004f6:	54c2      	strb	r2, [r0, r3]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004f8:	2200      	movs	r2, #0
 80004fa:	3b01      	subs	r3, #1
 80004fc:	54c2      	strb	r2, [r0, r3]
  }

  return HAL_OK;
 80004fe:	2000      	movs	r0, #0
}
 8000500:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000502:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8000504:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000506:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8000508:	3320      	adds	r3, #32
 800050a:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800050c:	2001      	movs	r0, #1
 800050e:	e7f7      	b.n	8000500 <HAL_DMA_Abort+0x60>
 8000510:	fffffeff 	.word	0xfffffeff
 8000514:	40020000 	.word	0x40020000

08000518 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000518:	2325      	movs	r3, #37	@ 0x25
{
 800051a:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800051c:	5cc3      	ldrb	r3, [r0, r3]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d003      	beq.n	800052a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000522:	2304      	movs	r3, #4
 8000524:	63c3      	str	r3, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 8000526:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000528:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800052a:	210e      	movs	r1, #14
 800052c:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800052e:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000530:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000532:	4c15      	ldr	r4, [pc, #84]	@ (8000588 <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000534:	438b      	bics	r3, r1
 8000536:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000538:	2301      	movs	r3, #1
 800053a:	6811      	ldr	r1, [r2, #0]
 800053c:	4399      	bics	r1, r3
 800053e:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000540:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8000542:	680a      	ldr	r2, [r1, #0]
 8000544:	4022      	ands	r2, r4
 8000546:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000548:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800054a:	4910      	ldr	r1, [pc, #64]	@ (800058c <HAL_DMA_Abort_IT+0x74>)
 800054c:	4032      	ands	r2, r6
 800054e:	4093      	lsls	r3, r2
 8000550:	684d      	ldr	r5, [r1, #4]
 8000552:	432b      	orrs	r3, r5
 8000554:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000556:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8000558:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800055a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800055c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4022      	ands	r2, r4
 8000566:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000568:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800056a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800056c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800056e:	2325      	movs	r3, #37	@ 0x25
 8000570:	2201      	movs	r2, #1
 8000572:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000574:	2200      	movs	r2, #0
 8000576:	3b01      	subs	r3, #1
 8000578:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800057a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800057c:	2b00      	cmp	r3, #0
 800057e:	d000      	beq.n	8000582 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8000580:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000582:	2000      	movs	r0, #0
 8000584:	e7d0      	b.n	8000528 <HAL_DMA_Abort_IT+0x10>
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	fffffeff 	.word	0xfffffeff
 800058c:	40020000 	.word	0x40020000

08000590 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000590:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000592:	211c      	movs	r1, #28
 8000594:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8000596:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8000598:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 800059a:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800059c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800059e:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80005a0:	400b      	ands	r3, r1
 80005a2:	0021      	movs	r1, r4
 80005a4:	4099      	lsls	r1, r3
 80005a6:	420a      	tst	r2, r1
 80005a8:	d010      	beq.n	80005cc <HAL_DMA_IRQHandler+0x3c>
 80005aa:	422c      	tst	r4, r5
 80005ac:	d00e      	beq.n	80005cc <HAL_DMA_IRQHandler+0x3c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005ae:	6833      	ldr	r3, [r6, #0]
 80005b0:	069b      	lsls	r3, r3, #26
 80005b2:	d402      	bmi.n	80005ba <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80005b4:	6833      	ldr	r3, [r6, #0]
 80005b6:	43a3      	bics	r3, r4
 80005b8:	6033      	str	r3, [r6, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80005ba:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <HAL_DMA_IRQHandler+0xb4>)
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	4311      	orrs	r1, r2
 80005c0:	6059      	str	r1, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80005c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d000      	beq.n	80005ca <HAL_DMA_IRQHandler+0x3a>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80005c8:	4798      	blx	r3
  else
  {
    /* Nothing To Do */
  }
  return;
}
 80005ca:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80005cc:	2402      	movs	r4, #2
 80005ce:	0021      	movs	r1, r4
 80005d0:	4099      	lsls	r1, r3
 80005d2:	420a      	tst	r2, r1
 80005d4:	d017      	beq.n	8000606 <HAL_DMA_IRQHandler+0x76>
 80005d6:	422c      	tst	r4, r5
 80005d8:	d015      	beq.n	8000606 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005da:	6833      	ldr	r3, [r6, #0]
 80005dc:	069b      	lsls	r3, r3, #26
 80005de:	d406      	bmi.n	80005ee <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80005e0:	220a      	movs	r2, #10
 80005e2:	6833      	ldr	r3, [r6, #0]
 80005e4:	4393      	bics	r3, r2
 80005e6:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80005e8:	2325      	movs	r3, #37	@ 0x25
 80005ea:	3a09      	subs	r2, #9
 80005ec:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_DMA_IRQHandler+0xb4>)
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	4311      	orrs	r1, r2
 80005f4:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2324      	movs	r3, #36	@ 0x24
 80005fa:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80005fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0e3      	beq.n	80005ca <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000602:	4798      	blx	r3
  return;
 8000604:	e7e1      	b.n	80005ca <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000606:	2108      	movs	r1, #8
 8000608:	000c      	movs	r4, r1
 800060a:	409c      	lsls	r4, r3
 800060c:	4222      	tst	r2, r4
 800060e:	d0dc      	beq.n	80005ca <HAL_DMA_IRQHandler+0x3a>
 8000610:	4229      	tst	r1, r5
 8000612:	d0da      	beq.n	80005ca <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000614:	6832      	ldr	r2, [r6, #0]
 8000616:	3106      	adds	r1, #6
 8000618:	438a      	bics	r2, r1
 800061a:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800061c:	2201      	movs	r2, #1
 800061e:	0015      	movs	r5, r2
 8000620:	409d      	lsls	r5, r3
 8000622:	002b      	movs	r3, r5
 8000624:	4907      	ldr	r1, [pc, #28]	@ (8000644 <HAL_DMA_IRQHandler+0xb4>)
 8000626:	684c      	ldr	r4, [r1, #4]
 8000628:	4323      	orrs	r3, r4
 800062a:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800062c:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800062e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000630:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000632:	2200      	movs	r2, #0
 8000634:	3b01      	subs	r3, #1
 8000636:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000638:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0c5      	beq.n	80005ca <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800063e:	4798      	blx	r3
  return;
 8000640:	e7c3      	b.n	80005ca <HAL_DMA_IRQHandler+0x3a>
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	40020000 	.word	0x40020000

08000648 <HAL_LPTIM_IRQHandler>:
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8000648:	2201      	movs	r2, #1
 800064a:	6803      	ldr	r3, [r0, #0]
{
 800064c:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800064e:	6819      	ldr	r1, [r3, #0]
{
 8000650:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8000652:	420a      	tst	r2, r1
 8000654:	d002      	beq.n	800065c <HAL_LPTIM_IRQHandler+0x14>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8000656:	6899      	ldr	r1, [r3, #8]
 8000658:	420a      	tst	r2, r1
 800065a:	d14c      	bne.n	80006f6 <HAL_LPTIM_IRQHandler+0xae>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800065c:	2202      	movs	r2, #2
 800065e:	6819      	ldr	r1, [r3, #0]
 8000660:	420a      	tst	r2, r1
 8000662:	d002      	beq.n	800066a <HAL_LPTIM_IRQHandler+0x22>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8000664:	6899      	ldr	r1, [r3, #8]
 8000666:	420a      	tst	r2, r1
 8000668:	d13f      	bne.n	80006ea <HAL_LPTIM_IRQHandler+0xa2>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800066a:	2204      	movs	r2, #4
 800066c:	6819      	ldr	r1, [r3, #0]
 800066e:	420a      	tst	r2, r1
 8000670:	d002      	beq.n	8000678 <HAL_LPTIM_IRQHandler+0x30>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8000672:	6899      	ldr	r1, [r3, #8]
 8000674:	420a      	tst	r2, r1
 8000676:	d132      	bne.n	80006de <HAL_LPTIM_IRQHandler+0x96>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8000678:	2208      	movs	r2, #8
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	420a      	tst	r2, r1
 800067e:	d002      	beq.n	8000686 <HAL_LPTIM_IRQHandler+0x3e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8000680:	6899      	ldr	r1, [r3, #8]
 8000682:	420a      	tst	r2, r1
 8000684:	d125      	bne.n	80006d2 <HAL_LPTIM_IRQHandler+0x8a>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8000686:	2210      	movs	r2, #16
 8000688:	6819      	ldr	r1, [r3, #0]
 800068a:	420a      	tst	r2, r1
 800068c:	d002      	beq.n	8000694 <HAL_LPTIM_IRQHandler+0x4c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800068e:	6899      	ldr	r1, [r3, #8]
 8000690:	420a      	tst	r2, r1
 8000692:	d118      	bne.n	80006c6 <HAL_LPTIM_IRQHandler+0x7e>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8000694:	2220      	movs	r2, #32
 8000696:	6819      	ldr	r1, [r3, #0]
 8000698:	420a      	tst	r2, r1
 800069a:	d002      	beq.n	80006a2 <HAL_LPTIM_IRQHandler+0x5a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800069c:	6899      	ldr	r1, [r3, #8]
 800069e:	420a      	tst	r2, r1
 80006a0:	d10b      	bne.n	80006ba <HAL_LPTIM_IRQHandler+0x72>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80006a2:	2240      	movs	r2, #64	@ 0x40
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	420a      	tst	r2, r1
 80006a8:	d006      	beq.n	80006b8 <HAL_LPTIM_IRQHandler+0x70>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80006aa:	6899      	ldr	r1, [r3, #8]
 80006ac:	420a      	tst	r2, r1
 80006ae:	d003      	beq.n	80006b8 <HAL_LPTIM_IRQHandler+0x70>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80006b0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 80006b2:	0020      	movs	r0, r4
 80006b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80006b6:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80006b8:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80006ba:	605a      	str	r2, [r3, #4]
      hlptim->DirectionUpCallback(hlptim);
 80006bc:	0020      	movs	r0, r4
 80006be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80006c0:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	e7ed      	b.n	80006a2 <HAL_LPTIM_IRQHandler+0x5a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80006c6:	605a      	str	r2, [r3, #4]
      hlptim->AutoReloadWriteCallback(hlptim);
 80006c8:	0020      	movs	r0, r4
 80006ca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80006cc:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	e7e0      	b.n	8000694 <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80006d2:	605a      	str	r2, [r3, #4]
      hlptim->CompareWriteCallback(hlptim);
 80006d4:	0020      	movs	r0, r4
 80006d6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80006d8:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	e7d3      	b.n	8000686 <HAL_LPTIM_IRQHandler+0x3e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80006de:	605a      	str	r2, [r3, #4]
      hlptim->TriggerCallback(hlptim);
 80006e0:	0020      	movs	r0, r4
 80006e2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80006e4:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	e7c6      	b.n	8000678 <HAL_LPTIM_IRQHandler+0x30>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80006ea:	605a      	str	r2, [r3, #4]
      hlptim->AutoReloadMatchCallback(hlptim);
 80006ec:	0020      	movs	r0, r4
 80006ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80006f0:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	e7b9      	b.n	800066a <HAL_LPTIM_IRQHandler+0x22>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80006f6:	605a      	str	r2, [r3, #4]
      hlptim->CompareMatchCallback(hlptim);
 80006f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80006fa:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80006fc:	6823      	ldr	r3, [r4, #0]
 80006fe:	e7ad      	b.n	800065c <HAL_LPTIM_IRQHandler+0x14>

08000700 <HAL_TIM_IRQHandler>:
{
  uint32_t itsource = htim->Instance->DIER;
  uint32_t itflag   = htim->Instance->SR;

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000700:	2202      	movs	r2, #2
{
 8000702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8000704:	6803      	ldr	r3, [r0, #0]
{
 8000706:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8000708:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800070a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800070c:	422a      	tst	r2, r5
 800070e:	d002      	beq.n	8000716 <HAL_TIM_IRQHandler+0x16>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000710:	4232      	tst	r2, r6
 8000712:	d000      	beq.n	8000716 <HAL_TIM_IRQHandler+0x16>
 8000714:	e0a6      	b.n	8000864 <HAL_TIM_IRQHandler+0x164>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8000716:	2304      	movs	r3, #4
 8000718:	422b      	tst	r3, r5
 800071a:	d002      	beq.n	8000722 <HAL_TIM_IRQHandler+0x22>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800071c:	4233      	tst	r3, r6
 800071e:	d000      	beq.n	8000722 <HAL_TIM_IRQHandler+0x22>
 8000720:	e08a      	b.n	8000838 <HAL_TIM_IRQHandler+0x138>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8000722:	2308      	movs	r3, #8
 8000724:	422b      	tst	r3, r5
 8000726:	d002      	beq.n	800072e <HAL_TIM_IRQHandler+0x2e>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8000728:	4233      	tst	r3, r6
 800072a:	d000      	beq.n	800072e <HAL_TIM_IRQHandler+0x2e>
 800072c:	e070      	b.n	8000810 <HAL_TIM_IRQHandler+0x110>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800072e:	2310      	movs	r3, #16
 8000730:	422b      	tst	r3, r5
 8000732:	d001      	beq.n	8000738 <HAL_TIM_IRQHandler+0x38>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8000734:	4233      	tst	r3, r6
 8000736:	d155      	bne.n	80007e4 <HAL_TIM_IRQHandler+0xe4>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8000738:	2301      	movs	r3, #1
 800073a:	422b      	tst	r3, r5
 800073c:	d001      	beq.n	8000742 <HAL_TIM_IRQHandler+0x42>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800073e:	4233      	tst	r3, r6
 8000740:	d135      	bne.n	80007ae <HAL_TIM_IRQHandler+0xae>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8000742:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8000744:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8000746:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8000748:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800074a:	402f      	ands	r7, r5
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800074c:	421d      	tst	r5, r3
 800074e:	d03d      	beq.n	80007cc <HAL_TIM_IRQHandler+0xcc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8000750:	0633      	lsls	r3, r6, #24
 8000752:	d41b      	bmi.n	800078c <HAL_TIM_IRQHandler+0x8c>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8000754:	2340      	movs	r3, #64	@ 0x40
 8000756:	422b      	tst	r3, r5
 8000758:	d001      	beq.n	800075e <HAL_TIM_IRQHandler+0x5e>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800075a:	4233      	tst	r3, r6
 800075c:	d10d      	bne.n	800077a <HAL_TIM_IRQHandler+0x7a>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800075e:	2320      	movs	r3, #32
 8000760:	422b      	tst	r3, r5
 8000762:	d009      	beq.n	8000778 <HAL_TIM_IRQHandler+0x78>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8000764:	4233      	tst	r3, r6
 8000766:	d007      	beq.n	8000778 <HAL_TIM_IRQHandler+0x78>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000768:	2221      	movs	r2, #33	@ 0x21
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	4252      	negs	r2, r2
 800076e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8000770:	23ac      	movs	r3, #172	@ 0xac
 8000772:	0020      	movs	r0, r4
 8000774:	58e3      	ldr	r3, [r4, r3]
 8000776:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800077a:	2241      	movs	r2, #65	@ 0x41
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	4252      	negs	r2, r2
 8000780:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8000782:	238c      	movs	r3, #140	@ 0x8c
 8000784:	0020      	movs	r0, r4
 8000786:	58e3      	ldr	r3, [r4, r3]
 8000788:	4798      	blx	r3
 800078a:	e7e8      	b.n	800075e <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	4a47      	ldr	r2, [pc, #284]	@ (80008ac <HAL_TIM_IRQHandler+0x1ac>)
      htim->BreakCallback(htim);
 8000790:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8000792:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8000794:	23b4      	movs	r3, #180	@ 0xb4
 8000796:	58e3      	ldr	r3, [r4, r3]
 8000798:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800079a:	2f00      	cmp	r7, #0
 800079c:	d0da      	beq.n	8000754 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	4a43      	ldr	r2, [pc, #268]	@ (80008b0 <HAL_TIM_IRQHandler+0x1b0>)
      htim->Break2Callback(htim);
 80007a2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80007a4:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 80007a6:	23b8      	movs	r3, #184	@ 0xb8
 80007a8:	58e3      	ldr	r3, [r4, r3]
 80007aa:	4798      	blx	r3
 80007ac:	e7d2      	b.n	8000754 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80007ae:	2202      	movs	r2, #2
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	4252      	negs	r2, r2
 80007b4:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 80007b6:	2384      	movs	r3, #132	@ 0x84
 80007b8:	0020      	movs	r0, r4
 80007ba:	58e3      	ldr	r3, [r4, r3]
 80007bc:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80007be:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80007c0:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80007c2:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80007c4:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80007c6:	402f      	ands	r7, r5
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80007c8:	421d      	tst	r5, r3
 80007ca:	d1c1      	bne.n	8000750 <HAL_TIM_IRQHandler+0x50>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80007cc:	2f00      	cmp	r7, #0
 80007ce:	d0c1      	beq.n	8000754 <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80007d0:	0633      	lsls	r3, r6, #24
 80007d2:	d5bf      	bpl.n	8000754 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	4a36      	ldr	r2, [pc, #216]	@ (80008b0 <HAL_TIM_IRQHandler+0x1b0>)
      htim->Break2Callback(htim);
 80007d8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80007da:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 80007dc:	23b8      	movs	r3, #184	@ 0xb8
 80007de:	58e3      	ldr	r3, [r4, r3]
 80007e0:	4798      	blx	r3
 80007e2:	e7b7      	b.n	8000754 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80007e4:	2211      	movs	r2, #17
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	4252      	negs	r2, r2
 80007ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80007ec:	3219      	adds	r2, #25
 80007ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80007f0:	69da      	ldr	r2, [r3, #28]
 80007f2:	23c0      	movs	r3, #192	@ 0xc0
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	421a      	tst	r2, r3
 80007f8:	d153      	bne.n	80008a2 <HAL_TIM_IRQHandler+0x1a2>
        htim->OC_DelayElapsedCallback(htim);
 80007fa:	239c      	movs	r3, #156	@ 0x9c
 80007fc:	0020      	movs	r0, r4
 80007fe:	58e3      	ldr	r3, [r4, r3]
 8000800:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8000802:	23a0      	movs	r3, #160	@ 0xa0
 8000804:	0020      	movs	r0, r4
 8000806:	58e3      	ldr	r3, [r4, r3]
 8000808:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800080a:	2300      	movs	r3, #0
 800080c:	7723      	strb	r3, [r4, #28]
 800080e:	e793      	b.n	8000738 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000810:	2209      	movs	r2, #9
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	4252      	negs	r2, r2
 8000816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000818:	320d      	adds	r2, #13
 800081a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	079b      	lsls	r3, r3, #30
 8000820:	d13a      	bne.n	8000898 <HAL_TIM_IRQHandler+0x198>
        htim->OC_DelayElapsedCallback(htim);
 8000822:	239c      	movs	r3, #156	@ 0x9c
 8000824:	0020      	movs	r0, r4
 8000826:	58e3      	ldr	r3, [r4, r3]
 8000828:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800082a:	23a0      	movs	r3, #160	@ 0xa0
 800082c:	0020      	movs	r0, r4
 800082e:	58e3      	ldr	r3, [r4, r3]
 8000830:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000832:	2300      	movs	r3, #0
 8000834:	7723      	strb	r3, [r4, #28]
 8000836:	e77a      	b.n	800072e <HAL_TIM_IRQHandler+0x2e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000838:	2205      	movs	r2, #5
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	4252      	negs	r2, r2
 800083e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000840:	3207      	adds	r2, #7
 8000842:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	23c0      	movs	r3, #192	@ 0xc0
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	421a      	tst	r2, r3
 800084c:	d11f      	bne.n	800088e <HAL_TIM_IRQHandler+0x18e>
        htim->OC_DelayElapsedCallback(htim);
 800084e:	239c      	movs	r3, #156	@ 0x9c
 8000850:	0020      	movs	r0, r4
 8000852:	58e3      	ldr	r3, [r4, r3]
 8000854:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8000856:	23a0      	movs	r3, #160	@ 0xa0
 8000858:	0020      	movs	r0, r4
 800085a:	58e3      	ldr	r3, [r4, r3]
 800085c:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800085e:	2300      	movs	r3, #0
 8000860:	7723      	strb	r3, [r4, #28]
 8000862:	e75e      	b.n	8000722 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000864:	3a05      	subs	r2, #5
 8000866:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000868:	3204      	adds	r2, #4
 800086a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	079b      	lsls	r3, r3, #30
 8000870:	d109      	bne.n	8000886 <HAL_TIM_IRQHandler+0x186>
          htim->OC_DelayElapsedCallback(htim);
 8000872:	239c      	movs	r3, #156	@ 0x9c
 8000874:	58c3      	ldr	r3, [r0, r3]
 8000876:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8000878:	23a0      	movs	r3, #160	@ 0xa0
 800087a:	0020      	movs	r0, r4
 800087c:	58e3      	ldr	r3, [r4, r3]
 800087e:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000880:	2300      	movs	r3, #0
 8000882:	7723      	strb	r3, [r4, #28]
 8000884:	e747      	b.n	8000716 <HAL_TIM_IRQHandler+0x16>
          htim->IC_CaptureCallback(htim);
 8000886:	2394      	movs	r3, #148	@ 0x94
 8000888:	58c3      	ldr	r3, [r0, r3]
 800088a:	4798      	blx	r3
 800088c:	e7f8      	b.n	8000880 <HAL_TIM_IRQHandler+0x180>
        htim->IC_CaptureCallback(htim);
 800088e:	2394      	movs	r3, #148	@ 0x94
 8000890:	0020      	movs	r0, r4
 8000892:	58e3      	ldr	r3, [r4, r3]
 8000894:	4798      	blx	r3
 8000896:	e7e2      	b.n	800085e <HAL_TIM_IRQHandler+0x15e>
        htim->IC_CaptureCallback(htim);
 8000898:	2394      	movs	r3, #148	@ 0x94
 800089a:	0020      	movs	r0, r4
 800089c:	58e3      	ldr	r3, [r4, r3]
 800089e:	4798      	blx	r3
 80008a0:	e7c7      	b.n	8000832 <HAL_TIM_IRQHandler+0x132>
        htim->IC_CaptureCallback(htim);
 80008a2:	2394      	movs	r3, #148	@ 0x94
 80008a4:	0020      	movs	r0, r4
 80008a6:	58e3      	ldr	r3, [r4, r3]
 80008a8:	4798      	blx	r3
 80008aa:	e7ae      	b.n	800080a <HAL_TIM_IRQHandler+0x10a>
 80008ac:	ffffdf7f 	.word	0xffffdf7f
 80008b0:	fffffeff 	.word	0xfffffeff

080008b4 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	225e      	movs	r2, #94	@ 0x5e
{
 80008b8:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80008ba:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80008bc:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80008be:	3a08      	subs	r2, #8
 80008c0:	5283      	strh	r3, [r0, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80008c2:	33a4      	adds	r3, #164	@ 0xa4
 80008c4:	58c3      	ldr	r3, [r0, r3]
 80008c6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)

080008cc <HAL_UART_IRQHandler>:
{
 80008cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ce:	4645      	mov	r5, r8
 80008d0:	46de      	mov	lr, fp
 80008d2:	4657      	mov	r7, sl
 80008d4:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80008d6:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80008d8:	49ae      	ldr	r1, [pc, #696]	@ (8000b94 <HAL_UART_IRQHandler+0x2c8>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80008da:	69d3      	ldr	r3, [r2, #28]
{
 80008dc:	0004      	movs	r4, r0
 80008de:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80008e0:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80008e2:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 80008e4:	420b      	tst	r3, r1
 80008e6:	d14e      	bne.n	8000986 <HAL_UART_IRQHandler+0xba>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80008e8:	2120      	movs	r1, #32
 80008ea:	4219      	tst	r1, r3
 80008ec:	d006      	beq.n	80008fc <HAL_UART_IRQHandler+0x30>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80008ee:	2680      	movs	r6, #128	@ 0x80
 80008f0:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80008f2:	4001      	ands	r1, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80008f4:	402e      	ands	r6, r5
 80008f6:	4331      	orrs	r1, r6
 80008f8:	d000      	beq.n	80008fc <HAL_UART_IRQHandler+0x30>
 80008fa:	e0e4      	b.n	8000ac6 <HAL_UART_IRQHandler+0x1fa>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80008fc:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 80008fe:	2e01      	cmp	r6, #1
 8000900:	d100      	bne.n	8000904 <HAL_UART_IRQHandler+0x38>
 8000902:	e09b      	b.n	8000a3c <HAL_UART_IRQHandler+0x170>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8000904:	2180      	movs	r1, #128	@ 0x80
 8000906:	0349      	lsls	r1, r1, #13
 8000908:	420b      	tst	r3, r1
 800090a:	d128      	bne.n	800095e <HAL_UART_IRQHandler+0x92>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	421a      	tst	r2, r3
 8000910:	d006      	beq.n	8000920 <HAL_UART_IRQHandler+0x54>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8000912:	2180      	movs	r1, #128	@ 0x80
 8000914:	0409      	lsls	r1, r1, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8000916:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8000918:	400d      	ands	r5, r1
 800091a:	432a      	orrs	r2, r5
 800091c:	d000      	beq.n	8000920 <HAL_UART_IRQHandler+0x54>
 800091e:	e0d9      	b.n	8000ad4 <HAL_UART_IRQHandler+0x208>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8000920:	2240      	movs	r2, #64	@ 0x40
 8000922:	421a      	tst	r2, r3
 8000924:	d023      	beq.n	800096e <HAL_UART_IRQHandler+0xa2>
 8000926:	4202      	tst	r2, r0
 8000928:	d021      	beq.n	800096e <HAL_UART_IRQHandler+0xa2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800092a:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800092e:	2301      	movs	r3, #1
 8000930:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000934:	6821      	ldr	r1, [r4, #0]
 8000936:	680b      	ldr	r3, [r1, #0]
 8000938:	4393      	bics	r3, r2
 800093a:	600b      	str	r3, [r1, #0]
 800093c:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8000940:	2388      	movs	r3, #136	@ 0x88
 8000942:	3a20      	subs	r2, #32
 8000944:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8000946:	2300      	movs	r3, #0
 8000948:	67a3      	str	r3, [r4, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800094a:	3398      	adds	r3, #152	@ 0x98
 800094c:	0020      	movs	r0, r4
 800094e:	58e3      	ldr	r3, [r4, r3]
 8000950:	4798      	blx	r3
}
 8000952:	bcf0      	pop	{r4, r5, r6, r7}
 8000954:	46bb      	mov	fp, r7
 8000956:	46b2      	mov	sl, r6
 8000958:	46a9      	mov	r9, r5
 800095a:	46a0      	mov	r8, r4
 800095c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800095e:	026e      	lsls	r6, r5, #9
 8000960:	d5d4      	bpl.n	800090c <HAL_UART_IRQHandler+0x40>
    huart->WakeupCallback(huart);
 8000962:	23b4      	movs	r3, #180	@ 0xb4
 8000964:	0020      	movs	r0, r4
 8000966:	58e3      	ldr	r3, [r4, r3]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8000968:	6211      	str	r1, [r2, #32]
    huart->WakeupCallback(huart);
 800096a:	4798      	blx	r3
    return;
 800096c:	e7f1      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800096e:	021a      	lsls	r2, r3, #8
 8000970:	d502      	bpl.n	8000978 <HAL_UART_IRQHandler+0xac>
 8000972:	0042      	lsls	r2, r0, #1
 8000974:	d500      	bpl.n	8000978 <HAL_UART_IRQHandler+0xac>
 8000976:	e107      	b.n	8000b88 <HAL_UART_IRQHandler+0x2bc>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8000978:	01db      	lsls	r3, r3, #7
 800097a:	d5ea      	bpl.n	8000952 <HAL_UART_IRQHandler+0x86>
 800097c:	2800      	cmp	r0, #0
 800097e:	dae8      	bge.n	8000952 <HAL_UART_IRQHandler+0x86>
    huart->RxFifoFullCallback(huart);
 8000980:	23b8      	movs	r3, #184	@ 0xb8
 8000982:	58e3      	ldr	r3, [r4, r3]
 8000984:	e0a3      	b.n	8000ace <HAL_UART_IRQHandler+0x202>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8000986:	4e84      	ldr	r6, [pc, #528]	@ (8000b98 <HAL_UART_IRQHandler+0x2cc>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8000988:	4984      	ldr	r1, [pc, #528]	@ (8000b9c <HAL_UART_IRQHandler+0x2d0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800098a:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800098c:	4001      	ands	r1, r0
 800098e:	4331      	orrs	r1, r6
 8000990:	d0b4      	beq.n	80008fc <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8000992:	2101      	movs	r1, #1
 8000994:	4219      	tst	r1, r3
 8000996:	d008      	beq.n	80009aa <HAL_UART_IRQHandler+0xde>
 8000998:	05c7      	lsls	r7, r0, #23
 800099a:	d506      	bpl.n	80009aa <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800099c:	2790      	movs	r7, #144	@ 0x90
 800099e:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80009a0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80009a2:	59e7      	ldr	r7, [r4, r7]
 80009a4:	4339      	orrs	r1, r7
 80009a6:	4667      	mov	r7, ip
 80009a8:	51e1      	str	r1, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80009aa:	2104      	movs	r1, #4
 80009ac:	000f      	movs	r7, r1
 80009ae:	401f      	ands	r7, r3
 80009b0:	46bc      	mov	ip, r7
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80009b2:	2702      	movs	r7, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80009b4:	4689      	mov	r9, r1
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80009b6:	421f      	tst	r7, r3
 80009b8:	d073      	beq.n	8000aa2 <HAL_UART_IRQHandler+0x1d6>
 80009ba:	07e9      	lsls	r1, r5, #31
 80009bc:	d50a      	bpl.n	80009d4 <HAL_UART_IRQHandler+0x108>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80009be:	2190      	movs	r1, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80009c0:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80009c2:	5867      	ldr	r7, [r4, r1]
 80009c4:	4688      	mov	r8, r1
 80009c6:	4649      	mov	r1, r9
 80009c8:	4339      	orrs	r1, r7
 80009ca:	4647      	mov	r7, r8
 80009cc:	51e1      	str	r1, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80009ce:	4661      	mov	r1, ip
 80009d0:	2900      	cmp	r1, #0
 80009d2:	d16b      	bne.n	8000aac <HAL_UART_IRQHandler+0x1e0>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80009d4:	2708      	movs	r7, #8
 80009d6:	421f      	tst	r7, r3
 80009d8:	d008      	beq.n	80009ec <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80009da:	2120      	movs	r1, #32
 80009dc:	4001      	ands	r1, r0
 80009de:	4331      	orrs	r1, r6
 80009e0:	d004      	beq.n	80009ec <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80009e2:	2690      	movs	r6, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80009e4:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80009e6:	59a1      	ldr	r1, [r4, r6]
 80009e8:	4339      	orrs	r1, r7
 80009ea:	51a1      	str	r1, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0109      	lsls	r1, r1, #4
 80009f0:	420b      	tst	r3, r1
 80009f2:	d007      	beq.n	8000a04 <HAL_UART_IRQHandler+0x138>
 80009f4:	0146      	lsls	r6, r0, #5
 80009f6:	d505      	bpl.n	8000a04 <HAL_UART_IRQHandler+0x138>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80009f8:	2690      	movs	r6, #144	@ 0x90
 80009fa:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80009fc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80009fe:	59a1      	ldr	r1, [r4, r6]
 8000a00:	4339      	orrs	r1, r7
 8000a02:	51a1      	str	r1, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000a04:	2190      	movs	r1, #144	@ 0x90
 8000a06:	5861      	ldr	r1, [r4, r1]
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	d0a2      	beq.n	8000952 <HAL_UART_IRQHandler+0x86>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4219      	tst	r1, r3
 8000a10:	d005      	beq.n	8000a1e <HAL_UART_IRQHandler+0x152>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8000a16:	4001      	ands	r1, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8000a18:	402b      	ands	r3, r5
 8000a1a:	4319      	orrs	r1, r3
 8000a1c:	d15e      	bne.n	8000adc <HAL_UART_IRQHandler+0x210>
      errorcode = huart->ErrorCode;
 8000a1e:	2690      	movs	r6, #144	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8000a20:	2540      	movs	r5, #64	@ 0x40
      errorcode = huart->ErrorCode;
 8000a22:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8000a24:	6893      	ldr	r3, [r2, #8]
 8000a26:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8000a28:	2328      	movs	r3, #40	@ 0x28
 8000a2a:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8000a2c:	431d      	orrs	r5, r3
 8000a2e:	d15c      	bne.n	8000aea <HAL_UART_IRQHandler+0x21e>
        huart->ErrorCallback(huart);
 8000a30:	23a4      	movs	r3, #164	@ 0xa4
 8000a32:	0020      	movs	r0, r4
 8000a34:	58e3      	ldr	r3, [r4, r3]
 8000a36:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a38:	51a5      	str	r5, [r4, r6]
 8000a3a:	e78a      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8000a3c:	2710      	movs	r7, #16
 8000a3e:	421f      	tst	r7, r3
 8000a40:	d100      	bne.n	8000a44 <HAL_UART_IRQHandler+0x178>
 8000a42:	e75f      	b.n	8000904 <HAL_UART_IRQHandler+0x38>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8000a44:	4207      	tst	r7, r0
 8000a46:	d100      	bne.n	8000a4a <HAL_UART_IRQHandler+0x17e>
 8000a48:	e75c      	b.n	8000904 <HAL_UART_IRQHandler+0x38>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000a4a:	2340      	movs	r3, #64	@ 0x40
 8000a4c:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8000a4e:	6217      	str	r7, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000a50:	6892      	ldr	r2, [r2, #8]
 8000a52:	4010      	ands	r0, r2
 8000a54:	4213      	tst	r3, r2
 8000a56:	d100      	bne.n	8000a5a <HAL_UART_IRQHandler+0x18e>
 8000a58:	e0a8      	b.n	8000bac <HAL_UART_IRQHandler+0x2e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	58a2      	ldr	r2, [r4, r2]
 8000a60:	6810      	ldr	r0, [r2, #0]
 8000a62:	6842      	ldr	r2, [r0, #4]
 8000a64:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d100      	bne.n	8000a6c <HAL_UART_IRQHandler+0x1a0>
 8000a6a:	e772      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8000a6c:	215c      	movs	r1, #92	@ 0x5c
 8000a6e:	468b      	mov	fp, r1
 8000a70:	5a61      	ldrh	r1, [r4, r1]
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d800      	bhi.n	8000a78 <HAL_UART_IRQHandler+0x1ac>
 8000a76:	e76c      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
        huart->RxXferCount = nb_remaining_rx_data;
 8000a78:	255e      	movs	r5, #94	@ 0x5e
 8000a7a:	5362      	strh	r2, [r4, r5]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	0015      	movs	r5, r2
 8000a80:	6800      	ldr	r0, [r0, #0]
 8000a82:	4005      	ands	r5, r0
 8000a84:	46a8      	mov	r8, r5
 8000a86:	4202      	tst	r2, r0
 8000a88:	d100      	bne.n	8000a8c <HAL_UART_IRQHandler+0x1c0>
 8000a8a:	e0cb      	b.n	8000c24 <HAL_UART_IRQHandler+0x358>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8000a90:	335c      	adds	r3, #92	@ 0x5c
 8000a92:	5ae3      	ldrh	r3, [r4, r3]
 8000a94:	0020      	movs	r0, r4
 8000a96:	1ac9      	subs	r1, r1, r3
 8000a98:	23c0      	movs	r3, #192	@ 0xc0
 8000a9a:	b289      	uxth	r1, r1
 8000a9c:	58e3      	ldr	r3, [r4, r3]
 8000a9e:	4798      	blx	r3
 8000aa0:	e757      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000aa2:	4661      	mov	r1, ip
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d095      	beq.n	80009d4 <HAL_UART_IRQHandler+0x108>
 8000aa8:	07e9      	lsls	r1, r5, #31
 8000aaa:	d593      	bpl.n	80009d4 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8000aac:	2104      	movs	r1, #4
 8000aae:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000ab0:	318c      	adds	r1, #140	@ 0x8c
 8000ab2:	4689      	mov	r9, r1
 8000ab4:	5861      	ldr	r1, [r4, r1]
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4647      	mov	r7, r8
 8000abc:	430f      	orrs	r7, r1
 8000abe:	0039      	movs	r1, r7
 8000ac0:	464f      	mov	r7, r9
 8000ac2:	51e1      	str	r1, [r4, r7]
 8000ac4:	e786      	b.n	80009d4 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8000ac6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d100      	bne.n	8000ace <HAL_UART_IRQHandler+0x202>
 8000acc:	e741      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
    huart->RxFifoFullCallback(huart);
 8000ace:	0020      	movs	r0, r4
 8000ad0:	4798      	blx	r3
    return;
 8000ad2:	e73e      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
    if (huart->TxISR != NULL)
 8000ad4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1f9      	bne.n	8000ace <HAL_UART_IRQHandler+0x202>
 8000ada:	e73a      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
        if (huart->RxISR != NULL)
 8000adc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d09d      	beq.n	8000a1e <HAL_UART_IRQHandler+0x152>
          huart->RxISR(huart);
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8000ae6:	6822      	ldr	r2, [r4, #0]
 8000ae8:	e799      	b.n	8000a1e <HAL_UART_IRQHandler+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000aea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000aee:	2201      	movs	r2, #1
 8000af0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8000af4:	6821      	ldr	r1, [r4, #0]
 8000af6:	4d2a      	ldr	r5, [pc, #168]	@ (8000ba0 <HAL_UART_IRQHandler+0x2d4>)
 8000af8:	680b      	ldr	r3, [r1, #0]
 8000afa:	402b      	ands	r3, r5
 8000afc:	600b      	str	r3, [r1, #0]
 8000afe:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b02:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b06:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8000b0a:	6822      	ldr	r2, [r4, #0]
 8000b0c:	4825      	ldr	r0, [pc, #148]	@ (8000ba4 <HAL_UART_IRQHandler+0x2d8>)
 8000b0e:	6893      	ldr	r3, [r2, #8]
 8000b10:	4003      	ands	r3, r0
 8000b12:	6093      	str	r3, [r2, #8]
 8000b14:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000b18:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d10a      	bne.n	8000b34 <HAL_UART_IRQHandler+0x268>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b1e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b22:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000b26:	2010      	movs	r0, #16
 8000b28:	6822      	ldr	r2, [r4, #0]
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	4383      	bics	r3, r0
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8000b34:	238c      	movs	r3, #140	@ 0x8c
 8000b36:	2220      	movs	r2, #32
 8000b38:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8000b3e:	6763      	str	r3, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	2340      	movs	r3, #64	@ 0x40
 8000b46:	4213      	tst	r3, r2
 8000b48:	d019      	beq.n	8000b7e <HAL_UART_IRQHandler+0x2b2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b4a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000b54:	6821      	ldr	r1, [r4, #0]
 8000b56:	688a      	ldr	r2, [r1, #8]
 8000b58:	439a      	bics	r2, r3
 8000b5a:	608a      	str	r2, [r1, #8]
 8000b5c:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8000b60:	2580      	movs	r5, #128	@ 0x80
 8000b62:	5960      	ldr	r0, [r4, r5]
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d00a      	beq.n	8000b7e <HAL_UART_IRQHandler+0x2b2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <HAL_UART_IRQHandler+0x2dc>)
 8000b6a:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000b6c:	f7ff fcd4 	bl	8000518 <HAL_DMA_Abort_IT>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d100      	bne.n	8000b76 <HAL_UART_IRQHandler+0x2aa>
 8000b74:	e6ed      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000b76:	5960      	ldr	r0, [r4, r5]
 8000b78:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000b7a:	4798      	blx	r3
 8000b7c:	e6e9      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
          huart->ErrorCallback(huart);
 8000b7e:	23a4      	movs	r3, #164	@ 0xa4
 8000b80:	0020      	movs	r0, r4
 8000b82:	58e3      	ldr	r3, [r4, r3]
 8000b84:	4798      	blx	r3
 8000b86:	e6e4      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
    huart->TxFifoEmptyCallback(huart);
 8000b88:	23bc      	movs	r3, #188	@ 0xbc
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	58e3      	ldr	r3, [r4, r3]
 8000b8e:	4798      	blx	r3
    return;
 8000b90:	e6df      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	0000080f 	.word	0x0000080f
 8000b98:	10000001 	.word	0x10000001
 8000b9c:	04000120 	.word	0x04000120
 8000ba0:	fffffedf 	.word	0xfffffedf
 8000ba4:	effffffe 	.word	0xeffffffe
 8000ba8:	080008b5 	.word	0x080008b5
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8000bac:	235c      	movs	r3, #92	@ 0x5c
 8000bae:	225e      	movs	r2, #94	@ 0x5e
 8000bb0:	5ae1      	ldrh	r1, [r4, r3]
 8000bb2:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8000bb4:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8000bb6:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d100      	bne.n	8000bbe <HAL_UART_IRQHandler+0x2f2>
 8000bbc:	e6c9      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8000bbe:	1ac9      	subs	r1, r1, r3
 8000bc0:	b28b      	uxth	r3, r1
 8000bc2:	4698      	mov	r8, r3
          && (nb_rx_data > 0U))
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d100      	bne.n	8000bca <HAL_UART_IRQHandler+0x2fe>
 8000bc8:	e6c3      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bce:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8000bd2:	6822      	ldr	r2, [r4, #0]
 8000bd4:	492d      	ldr	r1, [pc, #180]	@ (8000c8c <HAL_UART_IRQHandler+0x3c0>)
 8000bd6:	6813      	ldr	r3, [r2, #0]
 8000bd8:	400b      	ands	r3, r1
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000be0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000be4:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8000be8:	6822      	ldr	r2, [r4, #0]
 8000bea:	4929      	ldr	r1, [pc, #164]	@ (8000c90 <HAL_UART_IRQHandler+0x3c4>)
 8000bec:	6893      	ldr	r3, [r2, #8]
 8000bee:	400b      	ands	r3, r1
 8000bf0:	6093      	str	r3, [r2, #8]
 8000bf2:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8000bf6:	238c      	movs	r3, #140	@ 0x8c
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000bfc:	66e0      	str	r0, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8000bfe:	6760      	str	r0, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c00:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c04:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	43bb      	bics	r3, r7
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8000c14:	2302      	movs	r3, #2
 8000c16:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, nb_rx_data);
 8000c18:	33be      	adds	r3, #190	@ 0xbe
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	58e3      	ldr	r3, [r4, r3]
 8000c20:	4798      	blx	r3
 8000c22:	e696      	b.n	8000952 <HAL_UART_IRQHandler+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c24:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c28:	f386 8810 	msr	PRIMASK, r6
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000c2c:	6820      	ldr	r0, [r4, #0]
 8000c2e:	4d19      	ldr	r5, [pc, #100]	@ (8000c94 <HAL_UART_IRQHandler+0x3c8>)
 8000c30:	6801      	ldr	r1, [r0, #0]
 8000c32:	4029      	ands	r1, r5
 8000c34:	6001      	str	r1, [r0, #0]
 8000c36:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c3a:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c3e:	f386 8810 	msr	PRIMASK, r6
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c42:	6820      	ldr	r0, [r4, #0]
 8000c44:	6881      	ldr	r1, [r0, #8]
 8000c46:	43b1      	bics	r1, r6
 8000c48:	6081      	str	r1, [r0, #8]
 8000c4a:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c4e:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c52:	f386 8810 	msr	PRIMASK, r6
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000c56:	6820      	ldr	r0, [r4, #0]
 8000c58:	6881      	ldr	r1, [r0, #8]
 8000c5a:	4399      	bics	r1, r3
 8000c5c:	6081      	str	r1, [r0, #8]
 8000c5e:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 8000c62:	334c      	adds	r3, #76	@ 0x4c
 8000c64:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000c66:	4643      	mov	r3, r8
 8000c68:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c6a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c6e:	f386 8810 	msr	PRIMASK, r6
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000c72:	6822      	ldr	r2, [r4, #0]
 8000c74:	6813      	ldr	r3, [r2, #0]
 8000c76:	43bb      	bics	r3, r7
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8000c7e:	4663      	mov	r3, ip
 8000c80:	58e0      	ldr	r0, [r4, r3]
 8000c82:	f7ff fc0d 	bl	80004a0 <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8000c86:	465b      	mov	r3, fp
 8000c88:	5ae1      	ldrh	r1, [r4, r3]
 8000c8a:	e6ff      	b.n	8000a8c <HAL_UART_IRQHandler+0x1c0>
 8000c8c:	fffffedf 	.word	0xfffffedf
 8000c90:	effffffe 	.word	0xeffffffe
 8000c94:	fffffeff 	.word	0xfffffeff

08000c98 <__libc_init_array>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	4c0c      	ldr	r4, [pc, #48]	@ (8000cd0 <__libc_init_array+0x38>)
 8000c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000cd4 <__libc_init_array+0x3c>)
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	10a4      	asrs	r4, r4, #2
 8000ca4:	42a6      	cmp	r6, r4
 8000ca6:	d109      	bne.n	8000cbc <__libc_init_array+0x24>
 8000ca8:	2600      	movs	r6, #0
 8000caa:	f000 f819 	bl	8000ce0 <_init>
 8000cae:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <__libc_init_array+0x40>)
 8000cb0:	4d0a      	ldr	r5, [pc, #40]	@ (8000cdc <__libc_init_array+0x44>)
 8000cb2:	1b64      	subs	r4, r4, r5
 8000cb4:	10a4      	asrs	r4, r4, #2
 8000cb6:	42a6      	cmp	r6, r4
 8000cb8:	d105      	bne.n	8000cc6 <__libc_init_array+0x2e>
 8000cba:	bd70      	pop	{r4, r5, r6, pc}
 8000cbc:	00b3      	lsls	r3, r6, #2
 8000cbe:	58eb      	ldr	r3, [r5, r3]
 8000cc0:	4798      	blx	r3
 8000cc2:	3601      	adds	r6, #1
 8000cc4:	e7ee      	b.n	8000ca4 <__libc_init_array+0xc>
 8000cc6:	00b3      	lsls	r3, r6, #2
 8000cc8:	58eb      	ldr	r3, [r5, r3]
 8000cca:	4798      	blx	r3
 8000ccc:	3601      	adds	r6, #1
 8000cce:	e7f2      	b.n	8000cb6 <__libc_init_array+0x1e>
 8000cd0:	08000cf8 	.word	0x08000cf8
 8000cd4:	08000cf8 	.word	0x08000cf8
 8000cd8:	08000cfc 	.word	0x08000cfc
 8000cdc:	08000cf8 	.word	0x08000cf8

08000ce0 <_init>:
 8000ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ce6:	bc08      	pop	{r3}
 8000ce8:	469e      	mov	lr, r3
 8000cea:	4770      	bx	lr

08000cec <_fini>:
 8000cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cf2:	bc08      	pop	{r3}
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	4770      	bx	lr
