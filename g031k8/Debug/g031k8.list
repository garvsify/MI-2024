
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005190  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005be8  08005be8  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005be8  08005be8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be8  08005be8  00006be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bec  08005bec  00006bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005bf0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000010  08005c00  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08005c00  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d1a  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266f  00000000  00000000  00017d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b70  00000000  00000000  0001b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017611  00000000  00000000  0001be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113c9  00000000  00000000  00033421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099fa7  00000000  00000000  000447ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003530  00000000  00000000  000de7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e1d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005234 	.word	0x08005234

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08005234 	.word	0x08005234

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <SystemClock_Config>:
UART_HandleTypeDef huart2;


//FUNCTIONS
void SystemClock_Config(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b093      	sub	sp, #76	@ 0x4c
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	2410      	movs	r4, #16
 8000224:	193b      	adds	r3, r7, r4
 8000226:	0018      	movs	r0, r3
 8000228:	2338      	movs	r3, #56	@ 0x38
 800022a:	001a      	movs	r2, r3
 800022c:	2100      	movs	r1, #0
 800022e:	f004 ffd5 	bl	80051dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000232:	003b      	movs	r3, r7
 8000234:	0018      	movs	r0, r3
 8000236:	2310      	movs	r3, #16
 8000238:	001a      	movs	r2, r3
 800023a:	2100      	movs	r1, #0
 800023c:	f004 ffce 	bl	80051dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000240:	2380      	movs	r3, #128	@ 0x80
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	0018      	movs	r0, r3
 8000246:	f002 ff19 	bl	800307c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	193b      	adds	r3, r7, r4
 800024c:	2202      	movs	r2, #2
 800024e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	193b      	adds	r3, r7, r4
 8000252:	2280      	movs	r2, #128	@ 0x80
 8000254:	0052      	lsls	r2, r2, #1
 8000256:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000258:	0021      	movs	r1, r4
 800025a:	187b      	adds	r3, r7, r1
 800025c:	2200      	movs	r2, #0
 800025e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	187b      	adds	r3, r7, r1
 8000262:	2240      	movs	r2, #64	@ 0x40
 8000264:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	187b      	adds	r3, r7, r1
 8000268:	2202      	movs	r2, #2
 800026a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026c:	187b      	adds	r3, r7, r1
 800026e:	2202      	movs	r2, #2
 8000270:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2200      	movs	r2, #0
 8000276:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2208      	movs	r2, #8
 800027c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2280      	movs	r2, #128	@ 0x80
 8000282:	0292      	lsls	r2, r2, #10
 8000284:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	22c0      	movs	r2, #192	@ 0xc0
 800028a:	04d2      	lsls	r2, r2, #19
 800028c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2280      	movs	r2, #128	@ 0x80
 8000292:	0592      	lsls	r2, r2, #22
 8000294:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	187b      	adds	r3, r7, r1
 8000298:	0018      	movs	r0, r3
 800029a:	f002 ff2f 	bl	80030fc <HAL_RCC_OscConfig>
 800029e:	1e03      	subs	r3, r0, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002a2:	f000 fa6b 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	003b      	movs	r3, r7
 80002a8:	2207      	movs	r2, #7
 80002aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	003b      	movs	r3, r7
 80002ae:	2202      	movs	r2, #2
 80002b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	003b      	movs	r3, r7
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	003b      	movs	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	003b      	movs	r3, r7
 80002c0:	2102      	movs	r1, #2
 80002c2:	0018      	movs	r0, r3
 80002c4:	f003 fa34 	bl	8003730 <HAL_RCC_ClockConfig>
 80002c8:	1e03      	subs	r3, r0, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002cc:	f000 fa56 	bl	800077c <Error_Handler>
  }
}
 80002d0:	46c0      	nop			@ (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b013      	add	sp, #76	@ 0x4c
 80002d6:	bd90      	pop	{r4, r7, pc}

080002d8 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	0018      	movs	r0, r3
 80002e2:	230c      	movs	r3, #12
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f004 ff78 	bl	80051dc <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000418 <MX_ADC1_Init+0x140>)
 80002ee:	4a4b      	ldr	r2, [pc, #300]	@ (800041c <MX_ADC1_Init+0x144>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002f2:	4b49      	ldr	r3, [pc, #292]	@ (8000418 <MX_ADC1_Init+0x140>)
 80002f4:	2280      	movs	r2, #128	@ 0x80
 80002f6:	0612      	lsls	r2, r2, #24
 80002f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fa:	4b47      	ldr	r3, [pc, #284]	@ (8000418 <MX_ADC1_Init+0x140>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000300:	4b45      	ldr	r3, [pc, #276]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000306:	4b44      	ldr	r3, [pc, #272]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800030c:	4b42      	ldr	r3, [pc, #264]	@ (8000418 <MX_ADC1_Init+0x140>)
 800030e:	2204      	movs	r2, #4
 8000310:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000312:	4b41      	ldr	r3, [pc, #260]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000314:	2200      	movs	r2, #0
 8000316:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000318:	4b3f      	ldr	r3, [pc, #252]	@ (8000418 <MX_ADC1_Init+0x140>)
 800031a:	2200      	movs	r2, #0
 800031c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800031e:	4b3e      	ldr	r3, [pc, #248]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000320:	2200      	movs	r2, #0
 8000322:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000324:	4b3c      	ldr	r3, [pc, #240]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000326:	2201      	movs	r2, #1
 8000328:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032a:	4b3b      	ldr	r3, [pc, #236]	@ (8000418 <MX_ADC1_Init+0x140>)
 800032c:	2220      	movs	r2, #32
 800032e:	2100      	movs	r1, #0
 8000330:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000332:	4b39      	ldr	r3, [pc, #228]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000338:	4b37      	ldr	r3, [pc, #220]	@ (8000418 <MX_ADC1_Init+0x140>)
 800033a:	2200      	movs	r2, #0
 800033c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800033e:	4b36      	ldr	r3, [pc, #216]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000340:	222c      	movs	r2, #44	@ 0x2c
 8000342:	2100      	movs	r1, #0
 8000344:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000346:	4b34      	ldr	r3, [pc, #208]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000348:	2280      	movs	r2, #128	@ 0x80
 800034a:	0152      	lsls	r2, r2, #5
 800034c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800034e:	4b32      	ldr	r3, [pc, #200]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000350:	2200      	movs	r2, #0
 8000352:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000354:	4b30      	ldr	r3, [pc, #192]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000356:	2200      	movs	r2, #0
 8000358:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800035a:	4b2f      	ldr	r3, [pc, #188]	@ (8000418 <MX_ADC1_Init+0x140>)
 800035c:	223c      	movs	r2, #60	@ 0x3c
 800035e:	2100      	movs	r1, #0
 8000360:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000362:	4b2d      	ldr	r3, [pc, #180]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000364:	2200      	movs	r2, #0
 8000366:	64da      	str	r2, [r3, #76]	@ 0x4c

  //HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(ADC1_IRQn);

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000368:	4b2b      	ldr	r3, [pc, #172]	@ (8000418 <MX_ADC1_Init+0x140>)
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fcca 	bl	8001d04 <HAL_ADC_Init>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000374:	f000 fa02 	bl	800077c <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3a      	adds	r2, r7, #4
 800038c:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <MX_ADC1_Init+0x140>)
 800038e:	0011      	movs	r1, r2
 8000390:	0018      	movs	r0, r3
 8000392:	f002 f8bb 	bl	800250c <HAL_ADC_ConfigChannel>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800039a:	f000 f9ef 	bl	800077c <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000420 <MX_ADC1_Init+0x148>)
 80003a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b0:	1d3a      	adds	r2, r7, #4
 80003b2:	4b19      	ldr	r3, [pc, #100]	@ (8000418 <MX_ADC1_Init+0x140>)
 80003b4:	0011      	movs	r1, r2
 80003b6:	0018      	movs	r0, r3
 80003b8:	f002 f8a8 	bl	800250c <HAL_ADC_ConfigChannel>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80003c0:	f000 f9dc 	bl	800077c <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4a17      	ldr	r2, [pc, #92]	@ (8000424 <MX_ADC1_Init+0x14c>)
 80003c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d6:	1d3a      	adds	r2, r7, #4
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_ADC1_Init+0x140>)
 80003da:	0011      	movs	r1, r2
 80003dc:	0018      	movs	r0, r3
 80003de:	f002 f895 	bl	800250c <HAL_ADC_ConfigChannel>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80003e6:	f000 f9c9 	bl	800077c <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000428 <MX_ADC1_Init+0x150>)
 80003ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fc:	1d3a      	adds	r2, r7, #4
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_ADC1_Init+0x140>)
 8000400:	0011      	movs	r1, r2
 8000402:	0018      	movs	r0, r3
 8000404:	f002 f882 	bl	800250c <HAL_ADC_ConfigChannel>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800040c:	f000 f9b6 	bl	800077c <Error_Handler>
  }
}
 8000410:	46c0      	nop			@ (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	b004      	add	sp, #16
 8000416:	bd80      	pop	{r7, pc}
 8000418:	2000002c 	.word	0x2000002c
 800041c:	40012400 	.word	0x40012400
 8000420:	04000002 	.word	0x04000002
 8000424:	10000010 	.word	0x10000010
 8000428:	14000020 	.word	0x14000020

0800042c <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	0018      	movs	r0, r3
 8000436:	231c      	movs	r3, #28
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f004 fece 	bl	80051dc <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000440:	4b20      	ldr	r3, [pc, #128]	@ (80004c4 <MX_TIM14_Init+0x98>)
 8000442:	4a21      	ldr	r2, [pc, #132]	@ (80004c8 <MX_TIM14_Init+0x9c>)
 8000444:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000446:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <MX_TIM14_Init+0x98>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <MX_TIM14_Init+0x98>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 8000452:	4b1c      	ldr	r3, [pc, #112]	@ (80004c4 <MX_TIM14_Init+0x98>)
 8000454:	4a1d      	ldr	r2, [pc, #116]	@ (80004cc <MX_TIM14_Init+0xa0>)
 8000456:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000458:	4b1a      	ldr	r3, [pc, #104]	@ (80004c4 <MX_TIM14_Init+0x98>)
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	0052      	lsls	r2, r2, #1
 800045e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000460:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <MX_TIM14_Init+0x98>)
 8000462:	2280      	movs	r2, #128	@ 0x80
 8000464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000466:	4b17      	ldr	r3, [pc, #92]	@ (80004c4 <MX_TIM14_Init+0x98>)
 8000468:	0018      	movs	r0, r3
 800046a:	f003 faeb 	bl	8003a44 <HAL_TIM_Base_Init>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8000472:	f000 f983 	bl	800077c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <MX_TIM14_Init+0x98>)
 8000478:	0018      	movs	r0, r3
 800047a:	f003 fd27 	bl	8003ecc <HAL_TIM_PWM_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8000482:	f000 f97b 	bl	800077c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2260      	movs	r2, #96	@ 0x60
 800048a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 400;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	22c8      	movs	r2, #200	@ 0xc8
 8000490:	0052      	lsls	r2, r2, #1
 8000492:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a0:	1d39      	adds	r1, r7, #4
 80004a2:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <MX_TIM14_Init+0x98>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	0018      	movs	r0, r3
 80004a8:	f003 ffe6 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80004b0:	f000 f964 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80004b4:	4b03      	ldr	r3, [pc, #12]	@ (80004c4 <MX_TIM14_Init+0x98>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fd0c 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 80004bc:	46c0      	nop			@ (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b008      	add	sp, #32
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000110 	.word	0x20000110
 80004c8:	40002000 	.word	0x40002000
 80004cc:	000003ff 	.word	0x000003ff

080004d0 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b094      	sub	sp, #80	@ 0x50
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d6:	2334      	movs	r3, #52	@ 0x34
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	0018      	movs	r0, r3
 80004dc:	231c      	movs	r3, #28
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f004 fe7b 	bl	80051dc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e6:	003b      	movs	r3, r7
 80004e8:	0018      	movs	r0, r3
 80004ea:	2334      	movs	r3, #52	@ 0x34
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f004 fe74 	bl	80051dc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004f4:	4b3e      	ldr	r3, [pc, #248]	@ (80005f0 <MX_TIM16_Init+0x120>)
 80004f6:	4a3f      	ldr	r2, [pc, #252]	@ (80005f4 <MX_TIM16_Init+0x124>)
 80004f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80004fa:	4b3d      	ldr	r3, [pc, #244]	@ (80005f0 <MX_TIM16_Init+0x120>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000500:	4b3b      	ldr	r3, [pc, #236]	@ (80005f0 <MX_TIM16_Init+0x120>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000506:	4b3a      	ldr	r3, [pc, #232]	@ (80005f0 <MX_TIM16_Init+0x120>)
 8000508:	22ff      	movs	r2, #255	@ 0xff
 800050a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800050c:	4b38      	ldr	r3, [pc, #224]	@ (80005f0 <MX_TIM16_Init+0x120>)
 800050e:	2280      	movs	r2, #128	@ 0x80
 8000510:	0092      	lsls	r2, r2, #2
 8000512:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000514:	4b36      	ldr	r3, [pc, #216]	@ (80005f0 <MX_TIM16_Init+0x120>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051a:	4b35      	ldr	r3, [pc, #212]	@ (80005f0 <MX_TIM16_Init+0x120>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000520:	4b33      	ldr	r3, [pc, #204]	@ (80005f0 <MX_TIM16_Init+0x120>)
 8000522:	0018      	movs	r0, r3
 8000524:	f003 fa8e 	bl	8003a44 <HAL_TIM_Base_Init>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 800052c:	f000 f926 	bl	800077c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000530:	4b2f      	ldr	r3, [pc, #188]	@ (80005f0 <MX_TIM16_Init+0x120>)
 8000532:	0018      	movs	r0, r3
 8000534:	f003 fb38 	bl	8003ba8 <HAL_TIM_OC_Init>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 f91e 	bl	800077c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000540:	2134      	movs	r1, #52	@ 0x34
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	22ff      	movs	r2, #255	@ 0xff
 800054c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056c:	1879      	adds	r1, r7, r1
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_TIM16_Init+0x120>)
 8000570:	2200      	movs	r2, #0
 8000572:	0018      	movs	r0, r3
 8000574:	f003 ff20 	bl	80043b8 <HAL_TIM_OC_ConfigChannel>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 800057c:	f000 f8fe 	bl	800077c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_TIM16_Init+0x120>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	4b1a      	ldr	r3, [pc, #104]	@ (80005f0 <MX_TIM16_Init+0x120>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2108      	movs	r1, #8
 800058c:	430a      	orrs	r2, r1
 800058e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000590:	003b      	movs	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000596:	003b      	movs	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005ae:	003b      	movs	r3, r7
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80005c2:	003a      	movs	r2, r7
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <MX_TIM16_Init+0x120>)
 80005c6:	0011      	movs	r1, r2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f004 fd4b 	bl	8005064 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80005d2:	f000 f8d3 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2015      	movs	r0, #21
 80005dc:	f002 fac0 	bl	8002b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80005e0:	2015      	movs	r0, #21
 80005e2:	f002 fad2 	bl	8002b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_Init 2 */
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b014      	add	sp, #80	@ 0x50
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	200001cc 	.word	0x200001cc
 80005f4:	40014400 	.word	0x40014400

080005f8 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b089      	sub	sp, #36	@ 0x24
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	240c      	movs	r4, #12
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	2314      	movs	r3, #20
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f004 fde7 	bl	80051dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b58      	ldr	r3, [pc, #352]	@ (8000770 <MX_GPIO_Init+0x178>)
 8000610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000612:	4b57      	ldr	r3, [pc, #348]	@ (8000770 <MX_GPIO_Init+0x178>)
 8000614:	2104      	movs	r1, #4
 8000616:	430a      	orrs	r2, r1
 8000618:	635a      	str	r2, [r3, #52]	@ 0x34
 800061a:	4b55      	ldr	r3, [pc, #340]	@ (8000770 <MX_GPIO_Init+0x178>)
 800061c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800061e:	2204      	movs	r2, #4
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b52      	ldr	r3, [pc, #328]	@ (8000770 <MX_GPIO_Init+0x178>)
 8000628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800062a:	4b51      	ldr	r3, [pc, #324]	@ (8000770 <MX_GPIO_Init+0x178>)
 800062c:	2120      	movs	r1, #32
 800062e:	430a      	orrs	r2, r1
 8000630:	635a      	str	r2, [r3, #52]	@ 0x34
 8000632:	4b4f      	ldr	r3, [pc, #316]	@ (8000770 <MX_GPIO_Init+0x178>)
 8000634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000636:	2220      	movs	r2, #32
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b4c      	ldr	r3, [pc, #304]	@ (8000770 <MX_GPIO_Init+0x178>)
 8000640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000642:	4b4b      	ldr	r3, [pc, #300]	@ (8000770 <MX_GPIO_Init+0x178>)
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
 800064a:	4b49      	ldr	r3, [pc, #292]	@ (8000770 <MX_GPIO_Init+0x178>)
 800064c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000656:	4b47      	ldr	r3, [pc, #284]	@ (8000774 <MX_GPIO_Init+0x17c>)
 8000658:	2200      	movs	r2, #0
 800065a:	2140      	movs	r1, #64	@ 0x40
 800065c:	0018      	movs	r0, r3
 800065e:	f002 fcef 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2204      	movs	r2, #4
 8000666:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2288      	movs	r2, #136	@ 0x88
 800066c:	0352      	lsls	r2, r2, #13
 800066e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000676:	193b      	adds	r3, r7, r4
 8000678:	4a3f      	ldr	r2, [pc, #252]	@ (8000778 <MX_GPIO_Init+0x180>)
 800067a:	0019      	movs	r1, r3
 800067c:	0010      	movs	r0, r2
 800067e:	f002 fb7b 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */ // - on-board green LED
  GPIO_InitStruct.Pin = LD3_Pin;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2240      	movs	r2, #64	@ 0x40
 8000686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2201      	movs	r2, #1
 800068c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000694:	193b      	adds	r3, r7, r4
 8000696:	4a37      	ldr	r2, [pc, #220]	@ (8000774 <MX_GPIO_Init+0x17c>)
 8000698:	0019      	movs	r1, r3
 800069a:	0010      	movs	r0, r2
 800069c:	f002 fb6c 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH0_Pin */
  GPIO_InitStruct.Pin = ADC_CH0_Pin;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2203      	movs	r2, #3
 80006aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH0_GPIO_Port, &GPIO_InitStruct);
 80006b2:	193a      	adds	r2, r7, r4
 80006b4:	23a0      	movs	r3, #160	@ 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f002 fb5c 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH1_Pin */
  GPIO_InitStruct.Pin = ADC_CH1_Pin;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2202      	movs	r2, #2
 80006c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2203      	movs	r2, #3
 80006ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 80006d2:	193a      	adds	r2, r7, r4
 80006d4:	23a0      	movs	r3, #160	@ 0xa0
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 fb4c 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH4_Pin */
  GPIO_InitStruct.Pin = ADC_CH4_Pin;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2210      	movs	r2, #16
 80006e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2203      	movs	r2, #3
 80006ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH4_GPIO_Port, &GPIO_InitStruct);
 80006f2:	193a      	adds	r2, r7, r4
 80006f4:	23a0      	movs	r3, #160	@ 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 fb3c 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH5_Pin */
  GPIO_InitStruct.Pin = ADC_CH5_Pin;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2220      	movs	r2, #32
 8000704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2203      	movs	r2, #3
 800070a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH5_GPIO_Port, &GPIO_InitStruct);
 8000712:	193a      	adds	r2, r7, r4
 8000714:	23a0      	movs	r3, #160	@ 0xa0
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f002 fb2c 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISR measurement pin */
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2280      	movs	r2, #128	@ 0x80
 8000724:	0152      	lsls	r2, r2, #5
 8000726:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2201      	movs	r2, #1
 800072c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000734:	193a      	adds	r2, r7, r4
 8000736:	23a0      	movs	r3, #160	@ 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fb1b 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYM processing flag pin */
  GPIO_InitStruct.Pin = SYM_PROC_Pin;
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	0112      	lsls	r2, r2, #4
 800074a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SYM_PROC_GPIO_Port, &GPIO_InitStruct);
 8000758:	187a      	adds	r2, r7, r1
 800075a:	23a0      	movs	r3, #160	@ 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fb09 	bl	8002d78 <HAL_GPIO_Init>
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b009      	add	sp, #36	@ 0x24
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	50000800 	.word	0x50000800
 8000778:	50001400 	.word	0x50001400

0800077c <Error_Handler>:

void Error_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <System_Init>:
  {

  }
}

void System_Init(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800078c:	f001 f8f2 	bl	8001974 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000790:	f7ff fd44 	bl	800021c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000794:	f7ff ff30 	bl	80005f8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000798:	f7ff fd9e 	bl	80002d8 <MX_ADC1_Init>
	MX_TIM14_Init();
 800079c:	f7ff fe46 	bl	800042c <MX_TIM14_Init>
	MX_TIM16_Init();
 80007a0:	f7ff fe96 	bl	80004d0 <MX_TIM16_Init>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM16_callback);
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <System_Init+0x30>)
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <System_Init+0x34>)
 80007a8:	2114      	movs	r1, #20
 80007aa:	0018      	movs	r0, r3
 80007ac:	f003 ffb4 	bl	8004718 <HAL_TIM_RegisterCallback>

}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	080007c1 	.word	0x080007c1
 80007bc:	200001cc 	.word	0x200001cc

080007c0 <TIM16_callback>:
#include "custom_callbacks.h"

static ADC_ChannelConfTypeDef ADC_CH_Cfg = {0};

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	//TIM16 interrupt flag is already cleared by stm32g0xx_it.c

	TIM16_callback_active = YES;
 80007c8:	4bc2      	ldr	r3, [pc, #776]	@ (8000ad4 <TIM16_callback+0x314>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
	Global_Interrupt_Disable();
 80007ce:	f000 fbf7 	bl	8000fc0 <Global_Interrupt_Disable>
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 80007d2:	2380      	movs	r3, #128	@ 0x80
 80007d4:	0159      	lsls	r1, r3, #5
 80007d6:	23a0      	movs	r3, #160	@ 0xa0
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	2201      	movs	r2, #1
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 fc2f 	bl	8003040 <HAL_GPIO_WritePin>

	//////////////////////////
	//SET THE CURRENT(prev) VALUES//
	//////////////////////////
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_locked); //this line must go here, or at least very near the beginning!
 80007e2:	4bbd      	ldr	r3, [pc, #756]	@ (8000ad8 <TIM16_callback+0x318>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4bbc      	ldr	r3, [pc, #752]	@ (8000adc <TIM16_callback+0x31c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
 80007ee:	4bbc      	ldr	r3, [pc, #752]	@ (8000ae0 <TIM16_callback+0x320>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	001a      	movs	r2, r3
 80007f6:	4bbb      	ldr	r3, [pc, #748]	@ (8000ae4 <TIM16_callback+0x324>)
 80007f8:	0052      	lsls	r2, r2, #1
 80007fa:	5ad3      	ldrh	r3, [r2, r3]
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	4bb7      	ldr	r3, [pc, #732]	@ (8000adc <TIM16_callback+0x31c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000804:	4bb8      	ldr	r3, [pc, #736]	@ (8000ae8 <TIM16_callback+0x328>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	b29a      	uxth	r2, r3
 800080a:	4bb8      	ldr	r3, [pc, #736]	@ (8000aec <TIM16_callback+0x32c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	635a      	str	r2, [r3, #52]	@ 0x34
	/////////////////////////////
	//CALCULATE THE NEXT VALUES//
	/////////////////////////////
	current_index++;
 8000810:	4bb7      	ldr	r3, [pc, #732]	@ (8000af0 <TIM16_callback+0x330>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b29b      	uxth	r3, r3
 8000816:	3301      	adds	r3, #1
 8000818:	b29a      	uxth	r2, r3
 800081a:	4bb5      	ldr	r3, [pc, #724]	@ (8000af0 <TIM16_callback+0x330>)
 800081c:	801a      	strh	r2, [r3, #0]

	if(current_index == FINAL_INDEX + 1){
 800081e:	4bb4      	ldr	r3, [pc, #720]	@ (8000af0 <TIM16_callback+0x330>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b29a      	uxth	r2, r3
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	429a      	cmp	r2, r3
 800082a:	d108      	bne.n	800083e <TIM16_callback+0x7e>
		current_quadrant = FIRST_QUADRANT;
 800082c:	4bb1      	ldr	r3, [pc, #708]	@ (8000af4 <TIM16_callback+0x334>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000832:	4bb1      	ldr	r3, [pc, #708]	@ (8000af8 <TIM16_callback+0x338>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
		current_index = 0;
 8000838:	4bad      	ldr	r3, [pc, #692]	@ (8000af0 <TIM16_callback+0x330>)
 800083a:	2200      	movs	r2, #0
 800083c:	801a      	strh	r2, [r3, #0]
	}

	if(current_waveshape == TRIANGLE_MODE){
 800083e:	4baf      	ldr	r3, [pc, #700]	@ (8000afc <TIM16_callback+0x33c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d109      	bne.n	800085c <TIM16_callback+0x9c>
		duty = tri_wavetable[current_index];
 8000848:	4ba9      	ldr	r3, [pc, #676]	@ (8000af0 <TIM16_callback+0x330>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	001a      	movs	r2, r3
 8000850:	4bab      	ldr	r3, [pc, #684]	@ (8000b00 <TIM16_callback+0x340>)
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	5ad2      	ldrh	r2, [r2, r3]
 8000856:	4bab      	ldr	r3, [pc, #684]	@ (8000b04 <TIM16_callback+0x344>)
 8000858:	801a      	strh	r2, [r3, #0]
 800085a:	e040      	b.n	80008de <TIM16_callback+0x11e>
	}
	else if(current_waveshape == SINE_MODE){
 800085c:	4ba7      	ldr	r3, [pc, #668]	@ (8000afc <TIM16_callback+0x33c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b01      	cmp	r3, #1
 8000864:	d109      	bne.n	800087a <TIM16_callback+0xba>
		duty = sine_wavetable[current_index];
 8000866:	4ba2      	ldr	r3, [pc, #648]	@ (8000af0 <TIM16_callback+0x330>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b29b      	uxth	r3, r3
 800086c:	001a      	movs	r2, r3
 800086e:	4ba6      	ldr	r3, [pc, #664]	@ (8000b08 <TIM16_callback+0x348>)
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	5ad2      	ldrh	r2, [r2, r3]
 8000874:	4ba3      	ldr	r3, [pc, #652]	@ (8000b04 <TIM16_callback+0x344>)
 8000876:	801a      	strh	r2, [r3, #0]
 8000878:	e031      	b.n	80008de <TIM16_callback+0x11e>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index < SECOND_QUADRANT_START_INDEX)){
 800087a:	4ba0      	ldr	r3, [pc, #640]	@ (8000afc <TIM16_callback+0x33c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b02      	cmp	r3, #2
 8000882:	d108      	bne.n	8000896 <TIM16_callback+0xd6>
 8000884:	4b9a      	ldr	r3, [pc, #616]	@ (8000af0 <TIM16_callback+0x330>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	b29b      	uxth	r3, r3
 800088a:	2b7f      	cmp	r3, #127	@ 0x7f
 800088c:	d803      	bhi.n	8000896 <TIM16_callback+0xd6>
		duty = 1023;
 800088e:	4b9d      	ldr	r3, [pc, #628]	@ (8000b04 <TIM16_callback+0x344>)
 8000890:	4a9e      	ldr	r2, [pc, #632]	@ (8000b0c <TIM16_callback+0x34c>)
 8000892:	801a      	strh	r2, [r3, #0]
 8000894:	e023      	b.n	80008de <TIM16_callback+0x11e>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index >= SECOND_QUADRANT_START_INDEX) && (current_index < FOURTH_QUADRANT_START_INDEX)){
 8000896:	4b99      	ldr	r3, [pc, #612]	@ (8000afc <TIM16_callback+0x33c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b02      	cmp	r3, #2
 800089e:	d10f      	bne.n	80008c0 <TIM16_callback+0x100>
 80008a0:	4b93      	ldr	r3, [pc, #588]	@ (8000af0 <TIM16_callback+0x330>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80008a8:	d90a      	bls.n	80008c0 <TIM16_callback+0x100>
 80008aa:	4b91      	ldr	r3, [pc, #580]	@ (8000af0 <TIM16_callback+0x330>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	23c0      	movs	r3, #192	@ 0xc0
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d203      	bcs.n	80008c0 <TIM16_callback+0x100>
			duty = 0;
 80008b8:	4b92      	ldr	r3, [pc, #584]	@ (8000b04 <TIM16_callback+0x344>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	801a      	strh	r2, [r3, #0]
 80008be:	e00e      	b.n	80008de <TIM16_callback+0x11e>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index >= FOURTH_QUADRANT_START_INDEX)){
 80008c0:	4b8e      	ldr	r3, [pc, #568]	@ (8000afc <TIM16_callback+0x33c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d109      	bne.n	80008de <TIM16_callback+0x11e>
 80008ca:	4b89      	ldr	r3, [pc, #548]	@ (8000af0 <TIM16_callback+0x330>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	23c0      	movs	r3, #192	@ 0xc0
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d302      	bcc.n	80008de <TIM16_callback+0x11e>
		duty = 1023;
 80008d8:	4b8a      	ldr	r3, [pc, #552]	@ (8000b04 <TIM16_callback+0x344>)
 80008da:	4a8c      	ldr	r2, [pc, #560]	@ (8000b0c <TIM16_callback+0x34c>)
 80008dc:	801a      	strh	r2, [r3, #0]
	}

	if(current_index == FIRST_QUADRANT_START_INDEX){
 80008de:	4b84      	ldr	r3, [pc, #528]	@ (8000af0 <TIM16_callback+0x330>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d106      	bne.n	80008f6 <TIM16_callback+0x136>
		current_quadrant = FIRST_QUADRANT;
 80008e8:	4b82      	ldr	r3, [pc, #520]	@ (8000af4 <TIM16_callback+0x334>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 80008ee:	4b82      	ldr	r3, [pc, #520]	@ (8000af8 <TIM16_callback+0x338>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	e026      	b.n	8000944 <TIM16_callback+0x184>
	}
	else if(current_index == SECOND_QUADRANT_START_INDEX){
 80008f6:	4b7e      	ldr	r3, [pc, #504]	@ (8000af0 <TIM16_callback+0x330>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	2b80      	cmp	r3, #128	@ 0x80
 80008fe:	d106      	bne.n	800090e <TIM16_callback+0x14e>
		current_quadrant = SECOND_QUADRANT;
 8000900:	4b7c      	ldr	r3, [pc, #496]	@ (8000af4 <TIM16_callback+0x334>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000906:	4b7c      	ldr	r3, [pc, #496]	@ (8000af8 <TIM16_callback+0x338>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	e01a      	b.n	8000944 <TIM16_callback+0x184>
	}
	else if(current_index == THIRD_QUADRANT_START_INDEX){
 800090e:	4b78      	ldr	r3, [pc, #480]	@ (8000af0 <TIM16_callback+0x330>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b29a      	uxth	r2, r3
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	429a      	cmp	r2, r3
 800091a:	d106      	bne.n	800092a <TIM16_callback+0x16a>
		current_quadrant = FIRST_QUADRANT;
 800091c:	4b75      	ldr	r3, [pc, #468]	@ (8000af4 <TIM16_callback+0x334>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000922:	4b75      	ldr	r3, [pc, #468]	@ (8000af8 <TIM16_callback+0x338>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	e00c      	b.n	8000944 <TIM16_callback+0x184>
	}
	else if(current_index == FOURTH_QUADRANT_START_INDEX){
 800092a:	4b71      	ldr	r3, [pc, #452]	@ (8000af0 <TIM16_callback+0x330>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29a      	uxth	r2, r3
 8000930:	23c0      	movs	r3, #192	@ 0xc0
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	429a      	cmp	r2, r3
 8000936:	d105      	bne.n	8000944 <TIM16_callback+0x184>
		current_quadrant = SECOND_QUADRANT;
 8000938:	4b6e      	ldr	r3, [pc, #440]	@ (8000af4 <TIM16_callback+0x334>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 800093e:	4b6e      	ldr	r3, [pc, #440]	@ (8000af8 <TIM16_callback+0x338>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(current_depth == 255){
 8000944:	4b72      	ldr	r3, [pc, #456]	@ (8000b10 <TIM16_callback+0x350>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	2bff      	cmp	r3, #255	@ 0xff
 800094c:	d108      	bne.n	8000960 <TIM16_callback+0x1a0>
			duty = 1023 - duty;
 800094e:	4b6d      	ldr	r3, [pc, #436]	@ (8000b04 <TIM16_callback+0x344>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	4a6d      	ldr	r2, [pc, #436]	@ (8000b0c <TIM16_callback+0x34c>)
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b6a      	ldr	r3, [pc, #424]	@ (8000b04 <TIM16_callback+0x344>)
 800095c:	801a      	strh	r2, [r3, #0]
 800095e:	e00a      	b.n	8000976 <TIM16_callback+0x1b6>
		}
		else if(current_depth != 0){
 8000960:	4b6b      	ldr	r3, [pc, #428]	@ (8000b10 <TIM16_callback+0x350>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	b29b      	uxth	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <TIM16_callback+0x1b0>
			//duty = 1023 - duty*(current_depth >> 8);
			Multiply_Duty_By_Current_Depth_and_Divide_By_256();
 800096a:	f000 f8eb 	bl	8000b44 <Multiply_Duty_By_Current_Depth_and_Divide_By_256>
 800096e:	e002      	b.n	8000976 <TIM16_callback+0x1b6>
		}
		else{
			duty = 1023; //if depth is 0, just output 1023
 8000970:	4b64      	ldr	r3, [pc, #400]	@ (8000b04 <TIM16_callback+0x344>)
 8000972:	4a66      	ldr	r2, [pc, #408]	@ (8000b0c <TIM16_callback+0x34c>)
 8000974:	801a      	strh	r2, [r3, #0]
		}

	#endif

	prev_duty = duty;
 8000976:	4b63      	ldr	r3, [pc, #396]	@ (8000b04 <TIM16_callback+0x344>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae8 <TIM16_callback+0x328>)
 800097e:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_0;
 8000980:	4b64      	ldr	r3, [pc, #400]	@ (8000b14 <TIM16_callback+0x354>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8000986:	4a63      	ldr	r2, [pc, #396]	@ (8000b14 <TIM16_callback+0x354>)
 8000988:	4b63      	ldr	r3, [pc, #396]	@ (8000b18 <TIM16_callback+0x358>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f001 fdbd 	bl	800250c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000992:	4b61      	ldr	r3, [pc, #388]	@ (8000b18 <TIM16_callback+0x358>)
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fb8d 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 800099a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <TIM16_callback+0x358>)
 800099c:	2100      	movs	r1, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fbd6 	bl	8002150 <HAL_ADC_PollForConversion>
	uint16_t ADC_result = (uint16_t)HAL_ADC_GetValue(&hadc1); //set ADC_Result to waveshape index value
 80009a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000b18 <TIM16_callback+0x358>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 fc66 	bl	8002278 <HAL_ADC_GetValue>
 80009ac:	0002      	movs	r2, r0
 80009ae:	210e      	movs	r1, #14
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	4a58      	ldr	r2, [pc, #352]	@ (8000b1c <TIM16_callback+0x35c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d803      	bhi.n	80009c6 <TIM16_callback+0x206>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 80009be:	4b4f      	ldr	r3, [pc, #316]	@ (8000afc <TIM16_callback+0x33c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	e017      	b.n	80009f6 <TIM16_callback+0x236>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 80009c6:	230e      	movs	r3, #14
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	4a54      	ldr	r2, [pc, #336]	@ (8000b20 <TIM16_callback+0x360>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d803      	bhi.n	80009da <TIM16_callback+0x21a>
		current_waveshape = SINE_MODE; //sine wave
 80009d2:	4b4a      	ldr	r3, [pc, #296]	@ (8000afc <TIM16_callback+0x33c>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	e00d      	b.n	80009f6 <TIM16_callback+0x236>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 80009da:	230e      	movs	r3, #14
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	881a      	ldrh	r2, [r3, #0]
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d203      	bcs.n	80009f0 <TIM16_callback+0x230>
		current_waveshape = SQUARE_MODE; //square wave
 80009e8:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <TIM16_callback+0x33c>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e002      	b.n	80009f6 <TIM16_callback+0x236>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 80009f0:	4b42      	ldr	r3, [pc, #264]	@ (8000afc <TIM16_callback+0x33c>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
	}

	ADC_CH_Cfg.Channel = ADC_CHANNEL_1;
 80009f6:	4b47      	ldr	r3, [pc, #284]	@ (8000b14 <TIM16_callback+0x354>)
 80009f8:	4a4a      	ldr	r2, [pc, #296]	@ (8000b24 <TIM16_callback+0x364>)
 80009fa:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 80009fc:	4a45      	ldr	r2, [pc, #276]	@ (8000b14 <TIM16_callback+0x354>)
 80009fe:	4b46      	ldr	r3, [pc, #280]	@ (8000b18 <TIM16_callback+0x358>)
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fd82 	bl	800250c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000a08:	4b43      	ldr	r3, [pc, #268]	@ (8000b18 <TIM16_callback+0x358>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 fb52 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000a10:	4b41      	ldr	r3, [pc, #260]	@ (8000b18 <TIM16_callback+0x358>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	0018      	movs	r0, r3
 8000a16:	f001 fb9b 	bl	8002150 <HAL_ADC_PollForConversion>
	current_speed_linear = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2; //convert to 10-bit
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b18 <TIM16_callback+0x358>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 fc2b 	bl	8002278 <HAL_ADC_GetValue>
 8000a22:	0003      	movs	r3, r0
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b28 <TIM16_callback+0x368>)
 8000a2c:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_4;
 8000a2e:	4b39      	ldr	r3, [pc, #228]	@ (8000b14 <TIM16_callback+0x354>)
 8000a30:	4a3e      	ldr	r2, [pc, #248]	@ (8000b2c <TIM16_callback+0x36c>)
 8000a32:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8000a34:	4a37      	ldr	r2, [pc, #220]	@ (8000b14 <TIM16_callback+0x354>)
 8000a36:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <TIM16_callback+0x358>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 fd66 	bl	800250c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000a40:	4b35      	ldr	r3, [pc, #212]	@ (8000b18 <TIM16_callback+0x358>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 fb36 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000a48:	4b33      	ldr	r3, [pc, #204]	@ (8000b18 <TIM16_callback+0x358>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 fb7f 	bl	8002150 <HAL_ADC_PollForConversion>
	current_depth = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4; //convert to 8-bit
 8000a52:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <TIM16_callback+0x358>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 fc0f 	bl	8002278 <HAL_ADC_GetValue>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	091b      	lsrs	r3, r3, #4
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b2b      	ldr	r3, [pc, #172]	@ (8000b10 <TIM16_callback+0x350>)
 8000a64:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_5;
 8000a66:	4b2b      	ldr	r3, [pc, #172]	@ (8000b14 <TIM16_callback+0x354>)
 8000a68:	4a31      	ldr	r2, [pc, #196]	@ (8000b30 <TIM16_callback+0x370>)
 8000a6a:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8000a6c:	4a29      	ldr	r2, [pc, #164]	@ (8000b14 <TIM16_callback+0x354>)
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <TIM16_callback+0x358>)
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 fd4a 	bl	800250c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <TIM16_callback+0x358>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fb1a 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000a80:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <TIM16_callback+0x358>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fb63 	bl	8002150 <HAL_ADC_PollForConversion>
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2;

	#endif

	#if SYMMETRY_ADC_RESOLUTION == 8
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4;
 8000a8a:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <TIM16_callback+0x358>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 fbf3 	bl	8002278 <HAL_ADC_GetValue>
 8000a92:	0003      	movs	r3, r0
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <TIM16_callback+0x374>)
 8000a9e:	601a      	str	r2, [r3, #0]
	#endif




	Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 8000aa0:	f000 fb0c 	bl	80010bc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8000aa4:	f000 fb8a 	bl	80011bc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

	TIM16_final_start_value_locked = TIM16_final_start_value;
 8000aa8:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <TIM16_callback+0x378>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <TIM16_callback+0x318>)
 8000ab0:	801a      	strh	r2, [r3, #0]
	TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
 8000ab2:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <TIM16_callback+0x37c>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <TIM16_callback+0x320>)
 8000aba:	701a      	strb	r2, [r3, #0]

	TIM16_callback_active = NO;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <TIM16_callback+0x314>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	Global_Interrupt_Enable();
 8000ac2:	f000 fa75 	bl	8000fb0 <Global_Interrupt_Enable>
	isr_done = YES;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <TIM16_callback+0x380>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b004      	add	sp, #16
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200002bc 	.word	0x200002bc
 8000ad8:	200002be 	.word	0x200002be
 8000adc:	200001cc 	.word	0x200001cc
 8000ae0:	200002bb 	.word	0x200002bb
 8000ae4:	08005a4c 	.word	0x08005a4c
 8000ae8:	200002c0 	.word	0x200002c0
 8000aec:	20000110 	.word	0x20000110
 8000af0:	200002ac 	.word	0x200002ac
 8000af4:	200002af 	.word	0x200002af
 8000af8:	200002ae 	.word	0x200002ae
 8000afc:	200002a0 	.word	0x200002a0
 8000b00:	0800564c 	.word	0x0800564c
 8000b04:	200002b8 	.word	0x200002b8
 8000b08:	0800524c 	.word	0x0800524c
 8000b0c:	000003ff 	.word	0x000003ff
 8000b10:	200002a4 	.word	0x200002a4
 8000b14:	20000288 	.word	0x20000288
 8000b18:	2000002c 	.word	0x2000002c
 8000b1c:	00000555 	.word	0x00000555
 8000b20:	00000aaa 	.word	0x00000aaa
 8000b24:	04000002 	.word	0x04000002
 8000b28:	200002a2 	.word	0x200002a2
 8000b2c:	10000010 	.word	0x10000010
 8000b30:	14000020 	.word	0x14000020
 8000b34:	200002a8 	.word	0x200002a8
 8000b38:	200002b0 	.word	0x200002b0
 8000b3c:	200002ba 	.word	0x200002ba
 8000b40:	20000000 	.word	0x20000000

08000b44 <Multiply_Duty_By_Current_Depth_and_Divide_By_256>:

uint8_t Multiply_Duty_By_Current_Depth_and_Divide_By_256(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	volatile uint32_t multiply_product = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]

	//Perform: (duty*current_depth) / 256
	multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	001a      	movs	r2, r3
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x3c>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4353      	muls	r3, r2
 8000b5e:	607b      	str	r3, [r7, #4]
    duty = 1023 - (uint16_t)(multiply_product >> 8);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x40>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 8000b6e:	801a      	strh	r2, [r3, #0]

    return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	200002b8 	.word	0x200002b8
 8000b80:	200002a4 	.word	0x200002a4
 8000b84:	000003ff 	.word	0x000003ff

08000b88 <main>:
#include "system.h"

static ADC_ChannelConfTypeDef ADC_CH_Cfg = {0};

int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	System_Init();
 8000b8e:	f7ff fdfb 	bl	8000788 <System_Init>

	ADC_CH_Cfg.Channel = ADC_CHANNEL_0;
 8000b92:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc4 <main+0x13c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8000b98:	4a4a      	ldr	r2, [pc, #296]	@ (8000cc4 <main+0x13c>)
 8000b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc8 <main+0x140>)
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fcb4 	bl	800250c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000ba4:	4b48      	ldr	r3, [pc, #288]	@ (8000cc8 <main+0x140>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 fa84 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000bac:	4b46      	ldr	r3, [pc, #280]	@ (8000cc8 <main+0x140>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 facd 	bl	8002150 <HAL_ADC_PollForConversion>
	uint16_t ADC_result = (uint16_t)HAL_ADC_GetValue(&hadc1); //set ADC_Result to waveshape index value
 8000bb6:	4b44      	ldr	r3, [pc, #272]	@ (8000cc8 <main+0x140>)
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f001 fb5d 	bl	8002278 <HAL_ADC_GetValue>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	1dbb      	adds	r3, r7, #6
 8000bc2:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000bc4:	1dbb      	adds	r3, r7, #6
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4a40      	ldr	r2, [pc, #256]	@ (8000ccc <main+0x144>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d803      	bhi.n	8000bd6 <main+0x4e>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8000bce:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <main+0x148>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e015      	b.n	8000c02 <main+0x7a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd4 <main+0x14c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d803      	bhi.n	8000be8 <main+0x60>
		current_waveshape = SINE_MODE; //sine wave
 8000be0:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd0 <main+0x148>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e00c      	b.n	8000c02 <main+0x7a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	881a      	ldrh	r2, [r3, #0]
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	015b      	lsls	r3, r3, #5
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d203      	bcs.n	8000bfc <main+0x74>
		current_waveshape = SQUARE_MODE; //square wave
 8000bf4:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <main+0x148>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e002      	b.n	8000c02 <main+0x7a>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <main+0x148>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
	}

	ADC_CH_Cfg.Channel = ADC_CHANNEL_1;
 8000c02:	4b30      	ldr	r3, [pc, #192]	@ (8000cc4 <main+0x13c>)
 8000c04:	4a34      	ldr	r2, [pc, #208]	@ (8000cd8 <main+0x150>)
 8000c06:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8000c08:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc4 <main+0x13c>)
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <main+0x140>)
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f001 fc7c 	bl	800250c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000c14:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <main+0x140>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fa4c 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <main+0x140>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fa95 	bl	8002150 <HAL_ADC_PollForConversion>
	current_speed_linear = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2; //convert to 10-bit
 8000c26:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <main+0x140>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 fb25 	bl	8002278 <HAL_ADC_GetValue>
 8000c2e:	0003      	movs	r3, r0
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <main+0x154>)
 8000c38:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_4;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <main+0x13c>)
 8000c3c:	4a28      	ldr	r2, [pc, #160]	@ (8000ce0 <main+0x158>)
 8000c3e:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8000c40:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <main+0x13c>)
 8000c42:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <main+0x140>)
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 fc60 	bl	800250c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <main+0x140>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 fa30 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000c54:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <main+0x140>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f001 fa79 	bl	8002150 <HAL_ADC_PollForConversion>
	current_depth = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4; //convert to 8-bit
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <main+0x140>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fb09 	bl	8002278 <HAL_ADC_GetValue>
 8000c66:	0003      	movs	r3, r0
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <main+0x15c>)
 8000c70:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_5;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <main+0x13c>)
 8000c74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <main+0x160>)
 8000c76:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8000c78:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <main+0x13c>)
 8000c7a:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <main+0x140>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f001 fc44 	bl	800250c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000c84:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <main+0x140>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fa14 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <main+0x140>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	0018      	movs	r0, r3
 8000c92:	f001 fa5d 	bl	8002150 <HAL_ADC_PollForConversion>
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2;

	#endif

	#if SYMMETRY_ADC_RESOLUTION == 8
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <main+0x140>)
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 faed 	bl	8002278 <HAL_ADC_GetValue>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <main+0x164>)
 8000caa:	601a      	str	r2, [r3, #0]




	//PROCESS RAW AND FINAL FREQ. GEN. TIMER START VALUES AND PRESCALER
	Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 8000cac:	f000 fa06 	bl	80010bc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8000cb0:	f000 fa84 	bl	80011bc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8000cb4:	f000 f97c 	bl	8000fb0 <Global_Interrupt_Enable>
	Start_PWM_Gen_Timer();
 8000cb8:	f000 f98a 	bl	8000fd0 <Start_PWM_Gen_Timer>
	Start_Freq_Gen_Timer();
 8000cbc:	f000 f9a2 	bl	8001004 <Start_Freq_Gen_Timer>

	while (1)
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	e7fd      	b.n	8000cc0 <main+0x138>
 8000cc4:	20000294 	.word	0x20000294
 8000cc8:	2000002c 	.word	0x2000002c
 8000ccc:	00000555 	.word	0x00000555
 8000cd0:	200002a0 	.word	0x200002a0
 8000cd4:	00000aaa 	.word	0x00000aaa
 8000cd8:	04000002 	.word	0x04000002
 8000cdc:	200002a2 	.word	0x200002a2
 8000ce0:	10000010 	.word	0x10000010
 8000ce4:	200002a4 	.word	0x200002a4
 8000ce8:	14000020 	.word	0x14000020
 8000cec:	200002a8 	.word	0x200002a8

08000cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <HAL_MspInit+0x44>)
 8000cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_MspInit+0x44>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	2201      	movs	r2, #1
 8000d08:	4013      	ands	r3, r2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	0549      	lsls	r1, r1, #21
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	055b      	lsls	r3, r3, #21
 8000d24:	4013      	ands	r3, r2
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b08b      	sub	sp, #44	@ 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	2414      	movs	r4, #20
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	2314      	movs	r3, #20
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f004 fa46 	bl	80051dc <memset>
  if(hadc->Instance==ADC1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a2d      	ldr	r2, [pc, #180]	@ (8000e0c <HAL_ADC_MspInit+0xd4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d154      	bne.n	8000e04 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	0349      	lsls	r1, r1, #13
 8000d64:	430a      	orrs	r2, r1
 8000d66:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d68:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	035b      	lsls	r3, r3, #13
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d7a:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d82:	4b23      	ldr	r3, [pc, #140]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d86:	2201      	movs	r2, #1
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2233      	movs	r2, #51	@ 0x33
 8000d92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2203      	movs	r2, #3
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	193a      	adds	r2, r7, r4
 8000da2:	23a0      	movs	r3, #160	@ 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 ffe5 	bl	8002d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000db0:	4a19      	ldr	r2, [pc, #100]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000db6:	2205      	movs	r2, #5
 8000db8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000dce:	2280      	movs	r2, #128	@ 0x80
 8000dd0:	0052      	lsls	r2, r2, #1
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 feea 	bl	8002bc4 <HAL_DMA_Init>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000df4:	f7ff fcc2 	bl	800077c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000dfc:	651a      	str	r2, [r3, #80]	@ 0x50
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b00b      	add	sp, #44	@ 0x2c
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	40012400 	.word	0x40012400
 8000e10:	40021000 	.word	0x40021000
 8000e14:	200000b4 	.word	0x200000b4
 8000e18:	40020008 	.word	0x40020008

08000e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a26      	ldr	r2, [pc, #152]	@ (8000ec4 <HAL_TIM_Base_MspInit+0xa8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10e      	bne.n	8000e4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e32:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	0209      	lsls	r1, r1, #8
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	4013      	ands	r3, r2
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e4a:	e036      	b.n	8000eba <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1e      	ldr	r2, [pc, #120]	@ (8000ecc <HAL_TIM_Base_MspInit+0xb0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d116      	bne.n	8000e84 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e5c:	2180      	movs	r1, #128	@ 0x80
 8000e5e:	0289      	lsls	r1, r1, #10
 8000e60:	430a      	orrs	r2, r1
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2015      	movs	r0, #21
 8000e78:	f001 fe72 	bl	8002b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f001 fe84 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 8000e82:	e01a      	b.n	8000eba <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a11      	ldr	r2, [pc, #68]	@ (8000ed0 <HAL_TIM_Base_MspInit+0xb4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d115      	bne.n	8000eba <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	02c9      	lsls	r1, r1, #11
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_TIM_Base_MspInit+0xac>)
 8000e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	02db      	lsls	r3, r3, #11
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2016      	movs	r0, #22
 8000eb0:	f001 fe56 	bl	8002b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000eb4:	2016      	movs	r0, #22
 8000eb6:	f001 fe68 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	40002000 	.word	0x40002000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40014400 	.word	0x40014400
 8000ed0:	40014800 	.word	0x40014800

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	240c      	movs	r4, #12
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	2314      	movs	r3, #20
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f004 f978 	bl	80051dc <memset>
  if(htim->Instance==TIM14)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <HAL_TIM_MspPostInit+0x70>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d122      	bne.n	8000f3c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_TIM_MspPostInit+0x74>)
 8000ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <HAL_TIM_MspPostInit+0x74>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	430a      	orrs	r2, r1
 8000f00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_TIM_MspPostInit+0x74>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f06:	2201      	movs	r2, #1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f0e:	0021      	movs	r1, r4
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2202      	movs	r2, #2
 8000f1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	23a0      	movs	r3, #160	@ 0xa0
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f001 ff1e 	bl	8002d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b009      	add	sp, #36	@ 0x24
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	40002000 	.word	0x40002000
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 fd68 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <ADC1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <ADC1_IRQHandler+0x14>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f001 f982 	bl	8002290 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	2000002c 	.word	0x2000002c

08000f98 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <TIM16_IRQHandler+0x14>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f003 f8e0 	bl	8004164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	200001cc 	.word	0x200001cc

08000fb0 <Global_Interrupt_Enable>:
volatile uint8_t pot_rotation_corrected_global = 0;
volatile enum Validate adc_values_ready = NO;
volatile uint8_t adc_conv_num = 0;

//FUNCTION DEFINITIONS
uint8_t Global_Interrupt_Enable(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000fb4:	b662      	cpsie	i
}
 8000fb6:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8000fb8:	2301      	movs	r3, #1
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Global_Interrupt_Disable>:

uint8_t Global_Interrupt_Disable(void){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)

	__disable_irq();
	return 1;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Start_PWM_Gen_Timer>:

	return ok;
}

uint8_t Start_PWM_Gen_Timer(void)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	uint8_t ok = Start_PWM_TIM(&htim14, TIM_CHANNEL_1); //start PWM
 8000fd6:	1dfc      	adds	r4, r7, #7
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <Start_PWM_Gen_Timer+0x30>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 f82b 	bl	8001038 <Start_PWM_TIM>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <Start_PWM_Gen_Timer+0x22>

		Error_Handler();
 8000fee:	f7ff fbc5 	bl	800077c <Error_Handler>
	}

	return ok;
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b003      	add	sp, #12
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	20000110 	.word	0x20000110

08001004 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 800100a:	1dfc      	adds	r4, r7, #7
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <Start_Freq_Gen_Timer+0x30>)
 800100e:	2100      	movs	r1, #0
 8001010:	0018      	movs	r0, r3
 8001012:	f000 f837 	bl	8001084 <Start_OC_TIM>
 8001016:	0003      	movs	r3, r0
 8001018:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8001022:	f7ff fbab 	bl	800077c <Error_Handler>
	}

	return ok;
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
}
 800102a:	0018      	movs	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	b003      	add	sp, #12
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	200001cc 	.word	0x200001cc

08001038 <Start_PWM_TIM>:

uint8_t Start_PWM_TIM(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel){
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]

	uint8_t ok = 0;
 8001042:	250f      	movs	r5, #15
 8001044:	197b      	adds	r3, r7, r5
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
	ok = HAL_TIM_Base_Start(TIM);
 800104a:	197c      	adds	r4, r7, r5
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0018      	movs	r0, r3
 8001050:	f002 fd5e 	bl	8003b10 <HAL_TIM_Base_Start>
 8001054:	0003      	movs	r3, r0
 8001056:	7023      	strb	r3, [r4, #0]
	ok = HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 8001058:	197c      	adds	r4, r7, r5
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f002 ffa1 	bl	8003fa8 <HAL_TIM_PWM_Start>
 8001066:	0003      	movs	r3, r0
 8001068:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800106a:	197b      	adds	r3, r7, r5
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <Start_PWM_TIM+0x3e>

		Error_Handler();
 8001072:	f7ff fb83 	bl	800077c <Error_Handler>
	}

	return ok;
 8001076:	230f      	movs	r3, #15
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b004      	add	sp, #16
 8001082:	bdb0      	pop	{r4, r5, r7, pc}

08001084 <Start_OC_TIM>:

uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 800108e:	250f      	movs	r5, #15
 8001090:	197c      	adds	r4, r7, r5
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f002 fdf3 	bl	8003c84 <HAL_TIM_OC_Start_IT>
 800109e:	0003      	movs	r3, r0
 80010a0:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 80010a2:	197b      	adds	r3, r7, r5
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <Start_OC_TIM+0x2a>

		Error_Handler();
 80010aa:	f7ff fb67 	bl	800077c <Error_Handler>
	}

	return ok;
 80010ae:	230f      	movs	r3, #15
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	781b      	ldrb	r3, [r3, #0]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b004      	add	sp, #16
 80010ba:	bdb0      	pop	{r4, r5, r7, pc}

080010bc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:
	}

	return ok;
}

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

	uint32_t speed_control = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
	uint8_t how_many_128 = 0;
 80010c6:	1cfb      	adds	r3, r7, #3
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

    speed_control = current_speed_linear * NUMBER_OF_FREQUENCY_STEPS;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x80>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	001a      	movs	r2, r3
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x84>)
 80010d6:	4353      	muls	r3, r2
 80010d8:	607b      	str	r3, [r7, #4]
    speed_control = speed_control >> 10;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0a9b      	lsrs	r3, r3, #10
 80010de:	607b      	str	r3, [r7, #4]

    //speed_control = (speed_adc_10_bit/1024)*883

        if(speed_control <= (127-12)){ //inequality is correct!
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b73      	cmp	r3, #115	@ 0x73
 80010e4:	d809      	bhi.n	80010fa <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x3e>

            TIM16_raw_start_value = (uint8_t) speed_control + 12;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	330c      	adds	r3, #12
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x88>)
 80010f0:	801a      	strh	r2, [r3, #0]
            TIM16_base_prescaler_divisors_index = 1;
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x8c>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e01b      	b.n	8001132 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x76>
        }
        else{ 	//(speed_control > (127-12))

            uint16_t speed_control_subtracted;
            speed_control_subtracted = speed_control - (127-12);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	003b      	movs	r3, r7
 8001100:	3a73      	subs	r2, #115	@ 0x73
 8001102:	801a      	strh	r2, [r3, #0]
            how_many_128 = (uint8_t)(speed_control_subtracted >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8001104:	003b      	movs	r3, r7
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	09db      	lsrs	r3, r3, #7
 800110a:	b29a      	uxth	r2, r3
 800110c:	1cfb      	adds	r3, r7, #3
 800110e:	701a      	strb	r2, [r3, #0]
            TIM16_raw_start_value = (uint16_t)(speed_control_subtracted - (how_many_128 << 7)); //how_many_128*128, set TMR0
 8001110:	1cfb      	adds	r3, r7, #3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	01db      	lsls	r3, r3, #7
 8001118:	b29b      	uxth	r3, r3
 800111a:	003a      	movs	r2, r7
 800111c:	8812      	ldrh	r2, [r2, #0]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x88>)
 8001124:	801a      	strh	r2, [r3, #0]
            //biggest how_many_128 for NUMBER_OF_FREQUENCY_STEPS == 600 is 3
            //biggest base_prescaler_divisors_index == 5 for NUMBER_OF_FREQUENCY_STEPS == 600
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + 2);
 8001126:	1cfb      	adds	r3, r7, #3
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	3302      	adds	r3, #2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x8c>)
 8001130:	701a      	strb	r2, [r3, #0]
        }
    return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200002a2 	.word	0x200002a2
 8001140:	00000226 	.word	0x00000226
 8001144:	200002b4 	.word	0x200002b4
 8001148:	200002b6 	.word	0x200002b6

0800114c <Adjust_TIM16_Prescaler>:

uint8_t Adjust_TIM16_Prescaler(uint8_t TIM16_prescaler_adjust_arg){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	701a      	strb	r2, [r3, #0]

    if(TIM16_prescaler_adjust_arg == DIVIDE_BY_TWO){
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d106      	bne.n	800116e <Adjust_TIM16_Prescaler+0x22>
        TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index + 1;
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <Adjust_TIM16_Prescaler+0x68>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <Adjust_TIM16_Prescaler+0x6c>)
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e01d      	b.n	80011aa <Adjust_TIM16_Prescaler+0x5e>
    }
    else if(TIM16_prescaler_adjust_arg == DIVIDE_BY_FOUR){
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d106      	bne.n	8001184 <Adjust_TIM16_Prescaler+0x38>
    	TIM16_prescaler_divisors_final_index= TIM16_base_prescaler_divisors_index + 2;
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <Adjust_TIM16_Prescaler+0x68>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <Adjust_TIM16_Prescaler+0x6c>)
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e012      	b.n	80011aa <Adjust_TIM16_Prescaler+0x5e>
    }
    else if(TIM16_prescaler_adjust_arg == MULTIPLY_BY_TWO){
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d106      	bne.n	800119a <Adjust_TIM16_Prescaler+0x4e>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index - 1;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <Adjust_TIM16_Prescaler+0x68>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <Adjust_TIM16_Prescaler+0x6c>)
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <Adjust_TIM16_Prescaler+0x5e>
    }
    else if(TIM16_prescaler_adjust_arg == DO_NOTHING){
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <Adjust_TIM16_Prescaler+0x5e>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <Adjust_TIM16_Prescaler+0x68>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <Adjust_TIM16_Prescaler+0x6c>)
 80011a8:	701a      	strb	r2, [r3, #0]
    }
    return 1;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200002b6 	.word	0x200002b6
 80011b8:	200002ba 	.word	0x200002ba

080011bc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>:

uint8_t Process_TIM16_Final_Start_Value_and_Prescaler_Adjust(void){
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0

    #if SYMMETRY_ON_OR_OFF == ON

		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80011c2:	1d7b      	adds	r3, r7, #5
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]

		volatile uint8_t pot_rotation_corrected = 0;
 80011ce:	1cfb      	adds	r3, r7, #3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
		volatile uint8_t symmetry_status = CW;
 80011d4:	1cbb      	adds	r3, r7, #2
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]

		if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80011da:	4bc2      	ldr	r3, [pc, #776]	@ (80014e4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x328>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b7f      	cmp	r3, #127	@ 0x7f
 80011e0:	d803      	bhi.n	80011ea <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e>
			symmetry_status = CW;
 80011e2:	1cbb      	adds	r3, r7, #2
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	e002      	b.n	80011f0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x34>
		}
		else{ //adc is 128-255
			symmetry_status = CCW;
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
		}

		if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 80011f0:	4bbd      	ldr	r3, [pc, #756]	@ (80014e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x32c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d104      	bne.n	8001204 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x48>
 80011fa:	4bbc      	ldr	r3, [pc, #752]	@ (80014ec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5c>
 8001204:	4bb8      	ldr	r3, [pc, #736]	@ (80014e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x32c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d111      	bne.n	8001232 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x76>
 800120e:	4bb7      	ldr	r3, [pc, #732]	@ (80014ec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10c      	bne.n	8001232 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x76>

			if(symmetry_status == CW){
 8001218:	1cbb      	adds	r3, r7, #2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6e>

				symmetry_type_for_halfcycle = LENGTHEN;
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
			if(symmetry_status == CW){
 8001228:	e023      	b.n	8001272 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>
			}
			else{

				symmetry_type_for_halfcycle = SHORTEN;
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
			if(symmetry_status == CW){
 8001230:	e01f      	b.n	8001272 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>
			}
		}
		else if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == SECOND_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == FIRST_QUADRANT)){
 8001232:	4bad      	ldr	r3, [pc, #692]	@ (80014e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x32c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x8a>
 800123c:	4bab      	ldr	r3, [pc, #684]	@ (80014ec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d009      	beq.n	800125a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x9e>
 8001246:	4ba8      	ldr	r3, [pc, #672]	@ (80014e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x32c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d110      	bne.n	8001272 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>
 8001250:	4ba6      	ldr	r3, [pc, #664]	@ (80014ec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10b      	bne.n	8001272 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>

			if(symmetry_status == CW){
 800125a:	1cbb      	adds	r3, r7, #2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb0>

				symmetry_type_for_halfcycle = SHORTEN;
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e002      	b.n	8001272 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>
			}
			else{

				symmetry_type_for_halfcycle = LENGTHEN;
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
			}
		}

		if(symmetry_status == CW){
 8001272:	1cbb      	adds	r3, r7, #2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d108      	bne.n	800128e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xd2>

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - current_symmetry;
 800127c:	4b99      	ldr	r3, [pc, #612]	@ (80014e4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x328>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	227f      	movs	r2, #127	@ 0x7f
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b2da      	uxtb	r2, r3
 8001288:	1cfb      	adds	r3, r7, #3
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e006      	b.n	800129c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe0>
		}
		else{ //CCW

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
 800128e:	4b95      	ldr	r3, [pc, #596]	@ (80014e4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x328>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	3b80      	subs	r3, #128	@ 0x80
 8001296:	b2da      	uxtb	r2, r3
 8001298:	1cfb      	adds	r3, r7, #3
 800129a:	701a      	strb	r2, [r3, #0]
		}

		pot_rotation_corrected_global = pot_rotation_corrected;
 800129c:	1cfb      	adds	r3, r7, #3
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b93      	ldr	r3, [pc, #588]	@ (80014f0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x334>)
 80012a4:	701a      	strb	r2, [r3, #0]

		//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
 80012a6:	4b93      	ldr	r3, [pc, #588]	@ (80014f4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x338>)
 80012a8:	881a      	ldrh	r2, [r3, #0]
 80012aa:	200a      	movs	r0, #10
 80012ac:	183b      	adds	r3, r7, r0
 80012ae:	2180      	movs	r1, #128	@ 0x80
 80012b0:	0049      	lsls	r1, r1, #1
 80012b2:	1a8a      	subs	r2, r1, r2
 80012b4:	801a      	strh	r2, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 80012b6:	1cfb      	adds	r3, r7, #3
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	0019      	movs	r1, r3
 80012be:	2408      	movs	r4, #8
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	183a      	adds	r2, r7, r0
 80012c4:	8812      	ldrh	r2, [r2, #0]
 80012c6:	434a      	muls	r2, r1
 80012c8:	801a      	strh	r2, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 80012ca:	1dbb      	adds	r3, r7, #6
 80012cc:	193a      	adds	r2, r7, r4
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	0a12      	lsrs	r2, r2, #8
 80012d2:	801a      	strh	r2, [r3, #0]


		//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 80012d4:	230e      	movs	r3, #14
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	1839      	adds	r1, r7, r0
 80012da:	1dba      	adds	r2, r7, #6
 80012dc:	8809      	ldrh	r1, [r1, #0]
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	1a8a      	subs	r2, r1, r2
 80012e2:	801a      	strh	r2, [r3, #0]

		uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 80012e4:	250c      	movs	r5, #12
 80012e6:	197b      	adds	r3, r7, r5
 80012e8:	1839      	adds	r1, r7, r0
 80012ea:	1dba      	adds	r2, r7, #6
 80012ec:	8809      	ldrh	r1, [r1, #0]
 80012ee:	8812      	ldrh	r2, [r2, #0]
 80012f0:	188a      	adds	r2, r1, r2
 80012f2:	801a      	strh	r2, [r3, #0]


		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 80012f4:	197b      	adds	r3, r7, r5
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	2bff      	cmp	r3, #255	@ 0xff
 80012fa:	d90f      	bls.n	800131c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x160>
 80012fc:	197b      	adds	r3, r7, r5
 80012fe:	881a      	ldrh	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	429a      	cmp	r2, r3
 8001306:	d000      	beq.n	800130a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x14e>
 8001308:	e0a4      	b.n	8001454 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x298>
 800130a:	193b      	adds	r3, r7, r4
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	2108      	movs	r1, #8
 8001310:	0018      	movs	r0, r3
 8001312:	f000 faeb 	bl	80018ec <unsigned_bitwise_modulo>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d000      	beq.n	800131c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x160>
 800131a:	e09b      	b.n	8001454 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x298>

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800131c:	2308      	movs	r3, #8
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	2108      	movs	r1, #8
 8001324:	0018      	movs	r0, r3
 8001326:	f000 fae1 	bl	80018ec <unsigned_bitwise_modulo>
 800132a:	0003      	movs	r3, r0
 800132c:	2b80      	cmp	r3, #128	@ 0x80
 800132e:	d114      	bne.n	800135a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x19e>
				//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

				//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
				//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

				if(symmetry_type_for_halfcycle == SHORTEN){
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x186>

					TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 800133a:	1d7b      	adds	r3, r7, #5
 800133c:	2202      	movs	r2, #2
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e007      	b.n	8001352 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x196>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d102      	bne.n	8001352 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x196>

					TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800134c:	1d7b      	adds	r3, r7, #5
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 8001352:	4b69      	ldr	r3, [pc, #420]	@ (80014f8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001358:	e201      	b.n	800175e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a2>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800135a:	2308      	movs	r3, #8
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	2108      	movs	r1, #8
 8001362:	0018      	movs	r0, r3
 8001364:	f000 fac2 	bl	80018ec <unsigned_bitwise_modulo>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d11e      	bne.n	80013aa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ee>

				//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 800136c:	220e      	movs	r2, #14
 800136e:	18bb      	adds	r3, r7, r2
 8001370:	18ba      	adds	r2, r7, r2
 8001372:	8812      	ldrh	r2, [r2, #0]
 8001374:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8001376:	220c      	movs	r2, #12
 8001378:	18bb      	adds	r3, r7, r2
 800137a:	18ba      	adds	r2, r7, r2
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1d6>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800138a:	1d7b      	adds	r3, r7, #5
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e007      	b.n	80013a2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e6>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e6>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800139c:	1d7b      	adds	r3, r7, #5
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 80013a2:	4b55      	ldr	r3, [pc, #340]	@ (80014f8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80013a8:	e1d9      	b.n	800175e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a2>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80013aa:	2308      	movs	r3, #8
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	2108      	movs	r1, #8
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 fa9a 	bl	80018ec <unsigned_bitwise_modulo>
 80013b8:	0003      	movs	r3, r0
 80013ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80013bc:	d81e      	bhi.n	80013fc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x240>

				//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80013be:	220e      	movs	r2, #14
 80013c0:	18bb      	adds	r3, r7, r2
 80013c2:	18ba      	adds	r2, r7, r2
 80013c4:	8812      	ldrh	r2, [r2, #0]
 80013c6:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80013c8:	220c      	movs	r2, #12
 80013ca:	18bb      	adds	r3, r7, r2
 80013cc:	18ba      	adds	r2, r7, r2
 80013ce:	8812      	ldrh	r2, [r2, #0]
 80013d0:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x228>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80013dc:	1d7b      	adds	r3, r7, #5
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e007      	b.n	80013f4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x238>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d102      	bne.n	80013f4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x238>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80013ee:	1d7b      	adds	r3, r7, #5
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 80013f4:	4b40      	ldr	r3, [pc, #256]	@ (80014f8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80013fa:	e1b0      	b.n	800175e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a2>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80013fc:	2308      	movs	r3, #8
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	2108      	movs	r1, #8
 8001404:	0018      	movs	r0, r3
 8001406:	f000 fa71 	bl	80018ec <unsigned_bitwise_modulo>
 800140a:	0003      	movs	r3, r0
 800140c:	2b80      	cmp	r3, #128	@ 0x80
 800140e:	d800      	bhi.n	8001412 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x256>
 8001410:	e1a5      	b.n	800175e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a2>

				//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001412:	220e      	movs	r2, #14
 8001414:	18bb      	adds	r3, r7, r2
 8001416:	18ba      	adds	r2, r7, r2
 8001418:	8812      	ldrh	r2, [r2, #0]
 800141a:	3a01      	subs	r2, #1
 800141c:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800141e:	220c      	movs	r2, #12
 8001420:	18bb      	adds	r3, r7, r2
 8001422:	18ba      	adds	r2, r7, r2
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	3201      	adds	r2, #1
 8001428:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d103      	bne.n	800143c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x280>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001434:	1d7b      	adds	r3, r7, #5
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e007      	b.n	800144c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x290>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x290>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001446:	1d7b      	adds	r3, r7, #5
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001452:	e184      	b.n	800175e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a2>
			}
		}

		else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8001454:	210c      	movs	r1, #12
 8001456:	187b      	adds	r3, r7, r1
 8001458:	881a      	ldrh	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	429a      	cmp	r2, r3
 8001460:	d810      	bhi.n	8001484 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2c8>
 8001462:	187b      	adds	r3, r7, r1
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	@ 0x80
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	429a      	cmp	r2, r3
 800146c:	d000      	beq.n	8001470 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2b4>
 800146e:	e177      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
 8001470:	2308      	movs	r3, #8
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	2108      	movs	r1, #8
 8001478:	0018      	movs	r0, r3
 800147a:	f000 fa37 	bl	80018ec <unsigned_bitwise_modulo>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d100      	bne.n	8001484 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2c8>
 8001482:	e16d      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001484:	2308      	movs	r3, #8
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2108      	movs	r1, #8
 800148c:	0018      	movs	r0, r3
 800148e:	f000 fa2d 	bl	80018ec <unsigned_bitwise_modulo>
 8001492:	0003      	movs	r3, r0
 8001494:	2b80      	cmp	r3, #128	@ 0x80
 8001496:	d15d      	bne.n	8001554 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x398>

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001498:	220e      	movs	r2, #14
 800149a:	18bb      	adds	r3, r7, r2
 800149c:	18ba      	adds	r2, r7, r2
 800149e:	8812      	ldrh	r2, [r2, #0]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80014a4:	210c      	movs	r1, #12
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	187a      	adds	r2, r7, r1
 80014aa:	8812      	ldrh	r2, [r2, #0]
 80014ac:	3201      	adds	r2, #1
 80014ae:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80014b0:	000c      	movs	r4, r1
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	2101      	movs	r1, #1
 80014b8:	0018      	movs	r0, r3
 80014ba:	f000 fa17 	bl	80018ec <unsigned_bitwise_modulo>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d129      	bne.n	8001516 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x35a>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	193a      	adds	r2, r7, r4
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	0852      	lsrs	r2, r2, #1
 80014ca:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d112      	bne.n	80014fc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x340>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80014d6:	1d7b      	adds	r3, r7, #5
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	e13d      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
 80014e4:	200002a8 	.word	0x200002a8
 80014e8:	200002ae 	.word	0x200002ae
 80014ec:	200002af 	.word	0x200002af
 80014f0:	200002c2 	.word	0x200002c2
 80014f4:	200002b4 	.word	0x200002b4
 80014f8:	200002b2 	.word	0x200002b2
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d000      	beq.n	8001508 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x34c>
 8001506:	e12b      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001508:	1d7b      	adds	r3, r7, #5
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 800150e:	4bc0      	ldr	r3, [pc, #768]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 8001510:	2202      	movs	r2, #2
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e124      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001516:	220c      	movs	r2, #12
 8001518:	18bb      	adds	r3, r7, r2
 800151a:	18ba      	adds	r2, r7, r2
 800151c:	8812      	ldrh	r2, [r2, #0]
 800151e:	0852      	lsrs	r2, r2, #1
 8001520:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d106      	bne.n	800153a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x37e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800152c:	1d7b      	adds	r3, r7, #5
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001532:	4bb7      	ldr	r3, [pc, #732]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e112      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d000      	beq.n	8001546 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x38a>
 8001544:	e10c      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001546:	1d7b      	adds	r3, r7, #5
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 800154c:	4bb0      	ldr	r3, [pc, #704]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 800154e:	2202      	movs	r2, #2
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e105      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001554:	2308      	movs	r3, #8
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	2108      	movs	r1, #8
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f9c5 	bl	80018ec <unsigned_bitwise_modulo>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d14a      	bne.n	80015fc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x440>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8001566:	220e      	movs	r2, #14
 8001568:	18bb      	adds	r3, r7, r2
 800156a:	18ba      	adds	r2, r7, r2
 800156c:	8812      	ldrh	r2, [r2, #0]
 800156e:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001570:	240c      	movs	r4, #12
 8001572:	193b      	adds	r3, r7, r4
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	2101      	movs	r1, #1
 8001578:	0018      	movs	r0, r3
 800157a:	f000 f9b7 	bl	80018ec <unsigned_bitwise_modulo>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d11d      	bne.n	80015be <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x402>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001582:	193b      	adds	r3, r7, r4
 8001584:	193a      	adds	r2, r7, r4
 8001586:	8812      	ldrh	r2, [r2, #0]
 8001588:	0852      	lsrs	r2, r2, #1
 800158a:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3e8>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001596:	1d7b      	adds	r3, r7, #5
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 800159c:	4b9c      	ldr	r3, [pc, #624]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	e0dd      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d000      	beq.n	80015b0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3f4>
 80015ae:	e0d7      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80015b0:	1d7b      	adds	r3, r7, #5
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 80015b6:	4b96      	ldr	r3, [pc, #600]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 80015b8:	2202      	movs	r2, #2
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e0d0      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80015be:	220c      	movs	r2, #12
 80015c0:	18bb      	adds	r3, r7, r2
 80015c2:	18ba      	adds	r2, r7, r2
 80015c4:	8812      	ldrh	r2, [r2, #0]
 80015c6:	0852      	lsrs	r2, r2, #1
 80015c8:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d106      	bne.n	80015e2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x426>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80015d4:	1d7b      	adds	r3, r7, #5
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 80015da:	4b8d      	ldr	r3, [pc, #564]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e0be      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d000      	beq.n	80015ee <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x432>
 80015ec:	e0b8      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80015ee:	1d7b      	adds	r3, r7, #5
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 80015f4:	4b86      	ldr	r3, [pc, #536]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e0b1      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80015fc:	2308      	movs	r3, #8
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2108      	movs	r1, #8
 8001604:	0018      	movs	r0, r3
 8001606:	f000 f971 	bl	80018ec <unsigned_bitwise_modulo>
 800160a:	0003      	movs	r3, r0
 800160c:	2b7f      	cmp	r3, #127	@ 0x7f
 800160e:	d84d      	bhi.n	80016ac <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4f0>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8001610:	220e      	movs	r2, #14
 8001612:	18bb      	adds	r3, r7, r2
 8001614:	18ba      	adds	r2, r7, r2
 8001616:	8812      	ldrh	r2, [r2, #0]
 8001618:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 800161a:	240c      	movs	r4, #12
 800161c:	193b      	adds	r3, r7, r4
 800161e:	193a      	adds	r2, r7, r4
 8001620:	8812      	ldrh	r2, [r2, #0]
 8001622:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001624:	193b      	adds	r3, r7, r4
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	0018      	movs	r0, r3
 800162c:	f000 f95e 	bl	80018ec <unsigned_bitwise_modulo>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d11d      	bne.n	8001670 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4b4>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001634:	193b      	adds	r3, r7, r4
 8001636:	193a      	adds	r2, r7, r4
 8001638:	8812      	ldrh	r2, [r2, #0]
 800163a:	0852      	lsrs	r2, r2, #1
 800163c:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x49a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001648:	1d7b      	adds	r3, r7, #5
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 800164e:	4b70      	ldr	r3, [pc, #448]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e084      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d000      	beq.n	8001662 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4a6>
 8001660:	e07e      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001662:	1d7b      	adds	r3, r7, #5
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001668:	4b69      	ldr	r3, [pc, #420]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 800166a:	2202      	movs	r2, #2
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e077      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001670:	220c      	movs	r2, #12
 8001672:	18bb      	adds	r3, r7, r2
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	8812      	ldrh	r2, [r2, #0]
 8001678:	0852      	lsrs	r2, r2, #1
 800167a:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4d8>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001686:	1d7b      	adds	r3, r7, #5
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 800168c:	4b60      	ldr	r3, [pc, #384]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e065      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d160      	bne.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800169e:	1d7b      	adds	r3, r7, #5
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 80016a4:	4b5a      	ldr	r3, [pc, #360]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 80016a6:	2202      	movs	r2, #2
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e059      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80016ac:	2308      	movs	r3, #8
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	2108      	movs	r1, #8
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 f919 	bl	80018ec <unsigned_bitwise_modulo>
 80016ba:	0003      	movs	r3, r0
 80016bc:	2b80      	cmp	r3, #128	@ 0x80
 80016be:	d94f      	bls.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80016c0:	220e      	movs	r2, #14
 80016c2:	18bb      	adds	r3, r7, r2
 80016c4:	18ba      	adds	r2, r7, r2
 80016c6:	8812      	ldrh	r2, [r2, #0]
 80016c8:	3a01      	subs	r2, #1
 80016ca:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80016cc:	240c      	movs	r4, #12
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	193a      	adds	r2, r7, r4
 80016d2:	8812      	ldrh	r2, [r2, #0]
 80016d4:	3201      	adds	r2, #1
 80016d6:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	0018      	movs	r0, r3
 80016e0:	f000 f904 	bl	80018ec <unsigned_bitwise_modulo>
 80016e4:	1e03      	subs	r3, r0, #0
 80016e6:	d11c      	bne.n	8001722 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x566>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	193a      	adds	r2, r7, r4
 80016ec:	8812      	ldrh	r2, [r2, #0]
 80016ee:	0852      	lsrs	r2, r2, #1
 80016f0:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d106      	bne.n	800170a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x54e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80016fc:	1d7b      	adds	r3, r7, #5
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001702:	4b43      	ldr	r3, [pc, #268]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e02a      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d125      	bne.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001714:	1d7b      	adds	r3, r7, #5
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 800171a:	4b3d      	ldr	r3, [pc, #244]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 800171c:	2202      	movs	r2, #2
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e01e      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001722:	220c      	movs	r2, #12
 8001724:	18bb      	adds	r3, r7, r2
 8001726:	18ba      	adds	r2, r7, r2
 8001728:	8812      	ldrh	r2, [r2, #0]
 800172a:	0852      	lsrs	r2, r2, #1
 800172c:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d106      	bne.n	8001746 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x58a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001738:	1d7b      	adds	r3, r7, #5
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 800173e:	4b34      	ldr	r3, [pc, #208]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e00c      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001750:	1d7b      	adds	r3, r7, #5
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001756:	4b2e      	ldr	r3, [pc, #184]	@ (8001810 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x654>)
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e000      	b.n	8001760 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a4>
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800175e:	46c0      	nop			@ (mov r8, r8)
		}

	//DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	//NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	//ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	if(symmetry_type_for_halfcycle == SHORTEN){
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d158      	bne.n	800181c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x660>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 800176a:	1d7b      	adds	r3, r7, #5
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5cc>

			TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001774:	230e      	movs	r3, #14
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	2280      	movs	r2, #128	@ 0x80
 800177c:	0052      	lsls	r2, r2, #1
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001784:	801a      	strh	r2, [r3, #0]
 8001786:	e09f      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001788:	1d7b      	adds	r3, r7, #5
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d11b      	bne.n	80017ca <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x60e>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x65c>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	2101      	movs	r1, #1
 800179a:	0018      	movs	r0, r3
 800179c:	f000 f8a6 	bl	80018ec <unsigned_bitwise_modulo>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d109      	bne.n	80017b8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fc>

				TIM16_final_start_value = 256 - manipulated_period_shorten;
 80017a4:	230e      	movs	r3, #14
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	0052      	lsls	r2, r2, #1
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 80017b4:	801a      	strh	r2, [r3, #0]
 80017b6:	e087      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten - 1;
 80017b8:	230e      	movs	r3, #14
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	22ff      	movs	r2, #255	@ 0xff
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 80017c6:	801a      	strh	r2, [r3, #0]
 80017c8:	e07e      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
			}
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 80017ca:	1d7b      	adds	r3, r7, #5
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d000      	beq.n	80017d6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x61a>
 80017d4:	e078      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x65c>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2101      	movs	r1, #1
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 f884 	bl	80018ec <unsigned_bitwise_modulo>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d109      	bne.n	80017fc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x640>

				TIM16_final_start_value = 256 - manipulated_period_shorten;
 80017e8:	230e      	movs	r3, #14
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	2280      	movs	r2, #128	@ 0x80
 80017f0:	0052      	lsls	r2, r2, #1
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	e065      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten + 1;
 80017fc:	230e      	movs	r3, #14
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	2202      	movs	r2, #2
 8001804:	32ff      	adds	r2, #255	@ 0xff
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b02      	ldr	r3, [pc, #8]	@ (8001814 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	e05b      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
 8001810:	200002b2 	.word	0x200002b2
 8001814:	200002b0 	.word	0x200002b0
 8001818:	200002ac 	.word	0x200002ac
			}
		}
	}
	else if(symmetry_type_for_halfcycle == LENGTHEN){
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d150      	bne.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001826:	1d7b      	adds	r3, r7, #5
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x688>

			TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001830:	230c      	movs	r3, #12
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	0052      	lsls	r2, r2, #1
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x724>)
 8001840:	801a      	strh	r2, [r3, #0]
 8001842:	e041      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001844:	1d7b      	adds	r3, r7, #5
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d11b      	bne.n	8001886 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6ca>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 800184e:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x728>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	2101      	movs	r1, #1
 8001856:	0018      	movs	r0, r3
 8001858:	f000 f848 	bl	80018ec <unsigned_bitwise_modulo>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d109      	bne.n	8001874 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b8>

				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001860:	230c      	movs	r3, #12
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	0052      	lsls	r2, r2, #1
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x724>)
 8001870:	801a      	strh	r2, [r3, #0]
 8001872:	e029      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_lengthen - 1;
 8001874:	230c      	movs	r3, #12
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	22ff      	movs	r2, #255	@ 0xff
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x724>)
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	e020      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
			}
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001886:	1d7b      	adds	r3, r7, #5
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d11b      	bne.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x728>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	2101      	movs	r1, #1
 8001898:	0018      	movs	r0, r3
 800189a:	f000 f827 	bl	80018ec <unsigned_bitwise_modulo>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d109      	bne.n	80018b6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6fa>

				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 80018a2:	230c      	movs	r3, #12
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	2280      	movs	r2, #128	@ 0x80
 80018aa:	0052      	lsls	r2, r2, #1
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x724>)
 80018b2:	801a      	strh	r2, [r3, #0]
 80018b4:	e008      	b.n	80018c8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70c>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
 80018b6:	230c      	movs	r3, #12
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	2202      	movs	r2, #2
 80018be:	32ff      	adds	r2, #255	@ 0xff
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x724>)
 80018c6:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
 80018c8:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x72c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff fc3c 	bl	800114c <Adjust_TIM16_Prescaler>
        TIM16_final_start_value = TIM16_raw_start_value;
        TIM16_prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
    #endif

    return 1;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bdb0      	pop	{r4, r5, r7, pc}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	200002b0 	.word	0x200002b0
 80018e4:	200002ac 	.word	0x200002ac
 80018e8:	200002b2 	.word	0x200002b2

080018ec <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	000a      	movs	r2, r1
 80018f6:	1cfb      	adds	r3, r7, #3
 80018f8:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 80018fa:	1cfb      	adds	r3, r7, #3
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	409a      	lsls	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	3b01      	subs	r3, #1
 8001906:	001a      	movs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4013      	ands	r3, r2
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}

08001914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001920:	480d      	ldr	r0, [pc, #52]	@ (8001958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001922:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001924:	f7ff fff6 	bl	8001914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <LoopForever+0x6>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	@ (8001960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <LoopForever+0xe>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	@ (800196c <LoopForever+0x16>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800194e:	f003 fc4d 	bl	80051ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001952:	f7ff f919 	bl	8000b88 <main>

08001956 <LoopForever>:

LoopForever:
  b LoopForever
 8001956:	e7fe      	b.n	8001956 <LoopForever>
  ldr   r0, =_estack
 8001958:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001964:	08005bf0 	.word	0x08005bf0
  ldr r2, =_sbss
 8001968:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800196c:	200002c8 	.word	0x200002c8

08001970 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08001974 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_Init+0x3c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_Init+0x3c>)
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	0049      	lsls	r1, r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f810 	bl	80019b4 <HAL_InitTick>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d003      	beq.n	80019a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e001      	b.n	80019a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff f9a6 	bl	8000cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	781b      	ldrb	r3, [r3, #0]
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40022000 	.word	0x40022000

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019bc:	230f      	movs	r3, #15
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HAL_InitTick+0x88>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d02b      	beq.n	8001a24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <HAL_InitTick+0x8c>)
 80019ce:	681c      	ldr	r4, [r3, #0]
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_InitTick+0x88>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	0019      	movs	r1, r3
 80019d6:	23fa      	movs	r3, #250	@ 0xfa
 80019d8:	0098      	lsls	r0, r3, #2
 80019da:	f7fe fb93 	bl	8000104 <__udivsi3>
 80019de:	0003      	movs	r3, r0
 80019e0:	0019      	movs	r1, r3
 80019e2:	0020      	movs	r0, r4
 80019e4:	f7fe fb8e 	bl	8000104 <__udivsi3>
 80019e8:	0003      	movs	r3, r0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 f8dd 	bl	8002baa <HAL_SYSTICK_Config>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d112      	bne.n	8001a1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d80a      	bhi.n	8001a10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	2301      	movs	r3, #1
 80019fe:	425b      	negs	r3, r3
 8001a00:	2200      	movs	r2, #0
 8001a02:	0018      	movs	r0, r3
 8001a04:	f001 f8ac 	bl	8002b60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <HAL_InitTick+0x90>)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00d      	b.n	8001a2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a10:	230f      	movs	r3, #15
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e008      	b.n	8001a2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e003      	b.n	8001a2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	781b      	ldrb	r3, [r3, #0]
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b005      	add	sp, #20
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20000004 	.word	0x20000004
 8001a44:	20000008 	.word	0x20000008

08001a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_IncTick+0x1c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	001a      	movs	r2, r3
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_IncTick+0x20>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	18d2      	adds	r2, r2, r3
 8001a58:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <HAL_IncTick+0x20>)
 8001a5a:	601a      	str	r2, [r3, #0]
}
 8001a5c:	46c0      	nop			@ (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	200002c4 	.word	0x200002c4

08001a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b02      	ldr	r3, [pc, #8]	@ (8001a7c <HAL_GetTick+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	200002c4 	.word	0x200002c4

08001a80 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001a90:	401a      	ands	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b002      	add	sp, #8
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	fe3fffff 	.word	0xfe3fffff

08001aa8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	23e0      	movs	r3, #224	@ 0xe0
 8001ab6:	045b      	lsls	r3, r3, #17
 8001ab8:	4013      	ands	r3, r2
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	2107      	movs	r1, #7
 8001ada:	4091      	lsls	r1, r2
 8001adc:	000a      	movs	r2, r1
 8001ade:	43d2      	mvns	r2, r2
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	400b      	ands	r3, r1
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4099      	lsls	r1, r3
 8001aec:	000b      	movs	r3, r1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b004      	add	sp, #16
 8001afa:	bd80      	pop	{r7, pc}

08001afc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	400a      	ands	r2, r1
 8001b10:	2107      	movs	r1, #7
 8001b12:	4091      	lsls	r1, r2
 8001b14:	000a      	movs	r2, r1
 8001b16:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b1e:	40da      	lsrs	r2, r3
 8001b20:	0013      	movs	r3, r2
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b002      	add	sp, #8
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	23c0      	movs	r3, #192	@ 0xc0
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b002      	add	sp, #8
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	211f      	movs	r1, #31
 8001b60:	400a      	ands	r2, r1
 8001b62:	210f      	movs	r1, #15
 8001b64:	4091      	lsls	r1, r2
 8001b66:	000a      	movs	r2, r1
 8001b68:	43d2      	mvns	r2, r2
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	0e9b      	lsrs	r3, r3, #26
 8001b70:	210f      	movs	r1, #15
 8001b72:	4019      	ands	r1, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	201f      	movs	r0, #31
 8001b78:	4003      	ands	r3, r0
 8001b7a:	4099      	lsls	r1, r3
 8001b7c:	000b      	movs	r3, r1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b84:	46c0      	nop			@ (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b004      	add	sp, #16
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	035b      	lsls	r3, r3, #13
 8001b9e:	0b5b      	lsrs	r3, r3, #13
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b002      	add	sp, #8
 8001bac:	bd80      	pop	{r7, pc}

08001bae <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	0352      	lsls	r2, r2, #13
 8001bc0:	0b52      	lsrs	r2, r2, #13
 8001bc2:	43d2      	mvns	r2, r2
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2203      	movs	r2, #3
 8001be0:	4013      	ands	r3, r2
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	0212      	lsls	r2, r2, #8
 8001c00:	43d2      	mvns	r2, r2
 8001c02:	401a      	ands	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	4904      	ldr	r1, [pc, #16]	@ (8001c20 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001c0e:	400b      	ands	r3, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	07ffff00 	.word	0x07ffff00

08001c24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	2280      	movs	r2, #128	@ 0x80
 8001c36:	0552      	lsls	r2, r2, #21
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	6fffffe8 	.word	0x6fffffe8

08001c4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	055b      	lsls	r3, r3, #21
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	055b      	lsls	r3, r3, #21
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d101      	bne.n	8001c6a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <LL_ADC_Enable+0x20>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	2201      	movs	r2, #1
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c8c:	46c0      	nop			@ (mov r8, r8)
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	7fffffe8 	.word	0x7fffffe8

08001c98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <LL_ADC_IsEnabled+0x18>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_ADC_IsEnabled+0x1a>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <LL_ADC_REG_StartConversion+0x20>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2204      	movs	r2, #4
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	7fffffe8 	.word	0x7fffffe8

08001ce0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e19f      	b.n	800206a <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d12a      	bne.n	8001d88 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4acf      	ldr	r2, [pc, #828]	@ (8002074 <HAL_ADC_Init+0x370>)
 8001d36:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4acf      	ldr	r2, [pc, #828]	@ (8002078 <HAL_ADC_Init+0x374>)
 8001d3c:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4ace      	ldr	r2, [pc, #824]	@ (800207c <HAL_ADC_Init+0x378>)
 8001d42:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4ace      	ldr	r2, [pc, #824]	@ (8002080 <HAL_ADC_Init+0x37c>)
 8001d48:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4acd      	ldr	r2, [pc, #820]	@ (8002084 <HAL_ADC_Init+0x380>)
 8001d4e:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4acd      	ldr	r2, [pc, #820]	@ (8002088 <HAL_ADC_Init+0x384>)
 8001d54:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4acc      	ldr	r2, [pc, #816]	@ (800208c <HAL_ADC_Init+0x388>)
 8001d5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2280      	movs	r2, #128	@ 0x80
 8001d60:	589b      	ldr	r3, [r3, r2]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2180      	movs	r1, #128	@ 0x80
 8001d6a:	4ac9      	ldr	r2, [pc, #804]	@ (8002090 <HAL_ADC_Init+0x38c>)
 8001d6c:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	589b      	ldr	r3, [r3, r2]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	0010      	movs	r0, r2
 8001d78:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2254      	movs	r2, #84	@ 0x54
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <LL_ADC_IsInternalRegulatorEnabled>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d115      	bne.n	8001dc2 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff ff42 	bl	8001c24 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001da0:	4bbc      	ldr	r3, [pc, #752]	@ (8002094 <HAL_ADC_Init+0x390>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	49bc      	ldr	r1, [pc, #752]	@ (8002098 <HAL_ADC_Init+0x394>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7fe f9ac 	bl	8000104 <__udivsi3>
 8001dac:	0003      	movs	r3, r0
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001db4:	e002      	b.n	8001dbc <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ff40 	bl	8001c4c <LL_ADC_IsInternalRegulatorEnabled>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d10f      	bne.n	8001df0 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de0:	2201      	movs	r2, #1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001de8:	231f      	movs	r3, #31
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff ff73 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	2210      	movs	r2, #16
 8001e04:	4013      	ands	r3, r2
 8001e06:	d000      	beq.n	8001e0a <HAL_ADC_Init+0x106>
 8001e08:	e122      	b.n	8002050 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d000      	beq.n	8001e12 <HAL_ADC_Init+0x10e>
 8001e10:	e11e      	b.n	8002050 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	4aa1      	ldr	r2, [pc, #644]	@ (800209c <HAL_ADC_Init+0x398>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f7ff ff36 	bl	8001c98 <LL_ADC_IsEnabled>
 8001e2c:	1e03      	subs	r3, r0, #0
 8001e2e:	d000      	beq.n	8001e32 <HAL_ADC_Init+0x12e>
 8001e30:	e0ad      	b.n	8001f8e <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7e1b      	ldrb	r3, [r3, #24]
 8001e3a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e3c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7e5b      	ldrb	r3, [r3, #25]
 8001e42:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e44:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7e9b      	ldrb	r3, [r3, #26]
 8001e4a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e4c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_ADC_Init+0x158>
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	015b      	lsls	r3, r3, #5
 8001e5a:	e000      	b.n	8001e5e <HAL_ADC_Init+0x15a>
 8001e5c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e5e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e64:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da04      	bge.n	8001e78 <HAL_ADC_Init+0x174>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	e001      	b.n	8001e7c <HAL_ADC_Init+0x178>
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001e7c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	212c      	movs	r1, #44	@ 0x2c
 8001e82:	5c5b      	ldrb	r3, [r3, r1]
 8001e84:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e86:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d115      	bne.n	8001ec4 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7e9b      	ldrb	r3, [r3, #26]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2280      	movs	r2, #128	@ 0x80
 8001ea4:	0252      	lsls	r2, r2, #9
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed0:	23e0      	movs	r3, #224	@ 0xe0
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001eda:	4313      	orrs	r3, r2
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a6d      	ldr	r2, [pc, #436]	@ (80020a0 <HAL_ADC_Init+0x39c>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0f9b      	lsrs	r3, r3, #30
 8001efe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f04:	4313      	orrs	r3, r2
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	223c      	movs	r2, #60	@ 0x3c
 8001f10:	5c9b      	ldrb	r3, [r3, r2]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d111      	bne.n	8001f3a <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0f9b      	lsrs	r3, r3, #30
 8001f1c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f22:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001f28:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001f2e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	2201      	movs	r2, #1
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4a58      	ldr	r2, [pc, #352]	@ (80020a4 <HAL_ADC_Init+0x3a0>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	23c0      	movs	r3, #192	@ 0xc0
 8001f56:	061b      	lsls	r3, r3, #24
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d018      	beq.n	8001f8e <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	05db      	lsls	r3, r3, #23
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d012      	beq.n	8001f8e <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	061b      	lsls	r3, r3, #24
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d00c      	beq.n	8001f8e <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001f74:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <HAL_ADC_Init+0x3a4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	@ (80020ac <HAL_ADC_Init+0x3a8>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	23f0      	movs	r3, #240	@ 0xf0
 8001f84:	039b      	lsls	r3, r3, #14
 8001f86:	401a      	ands	r2, r3
 8001f88:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_ADC_Init+0x3a4>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f96:	001a      	movs	r2, r3
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f7ff fd92 	bl	8001ac2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa6:	4942      	ldr	r1, [pc, #264]	@ (80020b0 <HAL_ADC_Init+0x3ac>)
 8001fa8:	001a      	movs	r2, r3
 8001faa:	f7ff fd8a 	bl	8001ac2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	4249      	negs	r1, r1
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fc8:	e018      	b.n	8001ffc <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	039b      	lsls	r3, r3, #14
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d112      	bne.n	8001ffc <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	221c      	movs	r2, #28
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2210      	movs	r2, #16
 8001fea:	4252      	negs	r2, r2
 8001fec:	409a      	lsls	r2, r3
 8001fee:	0011      	movs	r1, r2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2100      	movs	r1, #0
 8002002:	0018      	movs	r0, r3
 8002004:	f7ff fd7a 	bl	8001afc <LL_ADC_GetSamplingTimeCommonChannels>
 8002008:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800200e:	429a      	cmp	r2, r3
 8002010:	d10b      	bne.n	800202a <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	2203      	movs	r2, #3
 800201e:	4393      	bics	r3, r2
 8002020:	2201      	movs	r2, #1
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002028:	e01c      	b.n	8002064 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	2212      	movs	r2, #18
 8002030:	4393      	bics	r3, r2
 8002032:	2210      	movs	r2, #16
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203e:	2201      	movs	r2, #1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002046:	231f      	movs	r3, #31
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800204e:	e009      	b.n	8002064 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	2210      	movs	r2, #16
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800205c:	231f      	movs	r3, #31
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002064:	231f      	movs	r3, #31
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781b      	ldrb	r3, [r3, #0]
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b008      	add	sp, #32
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	080024cd 	.word	0x080024cd
 8002078:	080024dd 	.word	0x080024dd
 800207c:	080024ed 	.word	0x080024ed
 8002080:	080024fd 	.word	0x080024fd
 8002084:	080029c9 	.word	0x080029c9
 8002088:	080029d9 	.word	0x080029d9
 800208c:	080029e9 	.word	0x080029e9
 8002090:	08000d39 	.word	0x08000d39
 8002094:	20000004 	.word	0x20000004
 8002098:	00030d40 	.word	0x00030d40
 800209c:	fffffefd 	.word	0xfffffefd
 80020a0:	ffde0201 	.word	0xffde0201
 80020a4:	1ffffc02 	.word	0x1ffffc02
 80020a8:	40012708 	.word	0x40012708
 80020ac:	ffc3ffff 	.word	0xffc3ffff
 80020b0:	07ffff04 	.word	0x07ffff04

080020b4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7ff fe0d 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d135      	bne.n	8002136 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2254      	movs	r2, #84	@ 0x54
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_Start+0x24>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e035      	b.n	8002144 <HAL_ADC_Start+0x90>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2254      	movs	r2, #84	@ 0x54
 80020dc:	2101      	movs	r1, #1
 80020de:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020e0:	250f      	movs	r5, #15
 80020e2:	197c      	adds	r4, r7, r5
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 fbe8 	bl	80028bc <ADC_Enable>
 80020ec:	0003      	movs	r3, r0
 80020ee:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020f0:	197b      	adds	r3, r7, r5
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d119      	bne.n	800212c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fc:	4a13      	ldr	r2, [pc, #76]	@ (800214c <HAL_ADC_Start+0x98>)
 80020fe:	4013      	ands	r3, r2
 8002100:	2280      	movs	r2, #128	@ 0x80
 8002102:	0052      	lsls	r2, r2, #1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	221c      	movs	r2, #28
 8002116:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2254      	movs	r2, #84	@ 0x54
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff fdc9 	bl	8001cbc <LL_ADC_REG_StartConversion>
 800212a:	e008      	b.n	800213e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2254      	movs	r2, #84	@ 0x54
 8002130:	2100      	movs	r1, #0
 8002132:	5499      	strb	r1, [r3, r2]
 8002134:	e003      	b.n	800213e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002136:	230f      	movs	r3, #15
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2202      	movs	r2, #2
 800213c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800213e:	230f      	movs	r3, #15
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	781b      	ldrb	r3, [r3, #0]
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	fffff0fe 	.word	0xfffff0fe

08002150 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b08      	cmp	r3, #8
 8002160:	d102      	bne.n	8002168 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002162:	2308      	movs	r3, #8
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e00f      	b.n	8002188 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	d007      	beq.n	8002184 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	2220      	movs	r2, #32
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e072      	b.n	800226a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002184:	2304      	movs	r3, #4
 8002186:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002188:	f7ff fc70 	bl	8001a6c <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002190:	e01f      	b.n	80021d2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	d01c      	beq.n	80021d2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002198:	f7ff fc68 	bl	8001a6c <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d302      	bcc.n	80021ae <HAL_ADC_PollForConversion+0x5e>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d111      	bne.n	80021d2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	d10b      	bne.n	80021d2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	2204      	movs	r2, #4
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2254      	movs	r2, #84	@ 0x54
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e04b      	b.n	800226a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	d0d9      	beq.n	8002192 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff fc9a 	bl	8001b2a <LL_ADC_REG_IsTriggerSourceSWStart>
 80021f6:	1e03      	subs	r3, r0, #0
 80021f8:	d02e      	beq.n	8002258 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7e9b      	ldrb	r3, [r3, #26]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d12a      	bne.n	8002258 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2208      	movs	r2, #8
 800220a:	4013      	ands	r3, r2
 800220c:	2b08      	cmp	r3, #8
 800220e:	d123      	bne.n	8002258 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff fd63 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d110      	bne.n	8002240 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	210c      	movs	r1, #12
 800222a:	438a      	bics	r2, r1
 800222c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002232:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <HAL_ADC_PollForConversion+0x124>)
 8002234:	4013      	ands	r3, r2
 8002236:	2201      	movs	r2, #1
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	659a      	str	r2, [r3, #88]	@ 0x58
 800223e:	e00b      	b.n	8002258 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	2220      	movs	r2, #32
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	2201      	movs	r2, #1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	220c      	movs	r2, #12
 8002266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	fffffefe 	.word	0xfffffefe

08002278 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d018      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x56>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d014      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	2210      	movs	r2, #16
 80022c2:	4013      	ands	r3, r2
 80022c4:	d106      	bne.n	80022d4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	2280      	movs	r2, #128	@ 0x80
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	0010      	movs	r0, r2
 80022dc:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2202      	movs	r2, #2
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2204      	movs	r2, #4
 80022ea:	4013      	ands	r3, r2
 80022ec:	d003      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x66>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2204      	movs	r2, #4
 80022f2:	4013      	ands	r3, r2
 80022f4:	d107      	bne.n	8002306 <HAL_ADC_IRQHandler+0x76>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2208      	movs	r2, #8
 80022fa:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022fc:	d04e      	beq.n	800239c <HAL_ADC_IRQHandler+0x10c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2208      	movs	r2, #8
 8002302:	4013      	ands	r3, r2
 8002304:	d04a      	beq.n	800239c <HAL_ADC_IRQHandler+0x10c>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	2210      	movs	r2, #16
 800230c:	4013      	ands	r3, r2
 800230e:	d106      	bne.n	800231e <HAL_ADC_IRQHandler+0x8e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0018      	movs	r0, r3
 8002324:	f7ff fc01 	bl	8001b2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d02e      	beq.n	800238a <HAL_ADC_IRQHandler+0xfa>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7e9b      	ldrb	r3, [r3, #26]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d12a      	bne.n	800238a <HAL_ADC_IRQHandler+0xfa>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2208      	movs	r2, #8
 800233c:	4013      	ands	r3, r2
 800233e:	2b08      	cmp	r3, #8
 8002340:	d123      	bne.n	800238a <HAL_ADC_IRQHandler+0xfa>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff fcca 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d110      	bne.n	8002372 <HAL_ADC_IRQHandler+0xe2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	210c      	movs	r1, #12
 800235c:	438a      	bics	r2, r1
 800235e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	4a58      	ldr	r2, [pc, #352]	@ (80024c8 <HAL_ADC_IRQHandler+0x238>)
 8002366:	4013      	ands	r3, r2
 8002368:	2201      	movs	r2, #1
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002370:	e00b      	b.n	800238a <HAL_ADC_IRQHandler+0xfa>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	2220      	movs	r2, #32
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	2201      	movs	r2, #1
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	0010      	movs	r0, r2
 8002392:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	220c      	movs	r2, #12
 800239a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2280      	movs	r2, #128	@ 0x80
 80023a0:	4013      	ands	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_ADC_IRQHandler+0x13c>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	4013      	ands	r3, r2
 80023aa:	d00f      	beq.n	80023cc <HAL_ADC_IRQHandler+0x13c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	0252      	lsls	r2, r2, #9
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	0010      	movs	r0, r2
 80023c2:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2280      	movs	r2, #128	@ 0x80
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	d015      	beq.n	8002402 <HAL_ADC_IRQHandler+0x172>
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4013      	ands	r3, r2
 80023de:	d010      	beq.n	8002402 <HAL_ADC_IRQHandler+0x172>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	2280      	movs	r2, #128	@ 0x80
 80023e6:	0292      	lsls	r2, r2, #10
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	0010      	movs	r0, r2
 80023f6:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2280      	movs	r2, #128	@ 0x80
 80023fe:	0052      	lsls	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4013      	ands	r3, r2
 800240a:	d015      	beq.n	8002438 <HAL_ADC_IRQHandler+0x1a8>
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d010      	beq.n	8002438 <HAL_ADC_IRQHandler+0x1a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	2280      	movs	r2, #128	@ 0x80
 800241c:	02d2      	lsls	r2, r2, #11
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	0010      	movs	r0, r2
 800242c:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2280      	movs	r2, #128	@ 0x80
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2210      	movs	r2, #16
 800243c:	4013      	ands	r3, r2
 800243e:	d02c      	beq.n	800249a <HAL_ADC_IRQHandler+0x20a>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2210      	movs	r2, #16
 8002444:	4013      	ands	r3, r2
 8002446:	d028      	beq.n	800249a <HAL_ADC_IRQHandler+0x20a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <HAL_ADC_IRQHandler+0x1c6>
    {
      overrun_error = 1UL;
 8002450:	2301      	movs	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	e008      	b.n	8002468 <HAL_ADC_IRQHandler+0x1d8>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff fbb9 	bl	8001bd2 <LL_ADC_REG_GetDMATransfer>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d001      	beq.n	8002468 <HAL_ADC_IRQHandler+0x1d8>
      {
        overrun_error = 1UL;
 8002464:	2301      	movs	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d111      	bne.n	8002492 <HAL_ADC_IRQHandler+0x202>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002472:	2280      	movs	r2, #128	@ 0x80
 8002474:	00d2      	lsls	r2, r2, #3
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	2202      	movs	r2, #2
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	0010      	movs	r0, r2
 8002490:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2210      	movs	r2, #16
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	019b      	lsls	r3, r3, #6
 80024a0:	4013      	ands	r3, r2
 80024a2:	d00d      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x230>
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	4013      	ands	r3, r2
 80024ac:	d008      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x230>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 faa1 	bl	80029f8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2280      	movs	r2, #128	@ 0x80
 80024bc:	0192      	lsls	r2, r2, #6
 80024be:	601a      	str	r2, [r3, #0]
  }
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b006      	add	sp, #24
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	fffffefe 	.word	0xfffffefe

080024cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024d4:	46c0      	nop			@ (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024e4:	46c0      	nop			@ (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2317      	movs	r3, #23
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2254      	movs	r2, #84	@ 0x54
 8002526:	5c9b      	ldrb	r3, [r3, r2]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x24>
 800252c:	2302      	movs	r3, #2
 800252e:	e1c0      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x3a6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2254      	movs	r2, #84	@ 0x54
 8002534:	2101      	movs	r1, #1
 8002536:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff fbcf 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d000      	beq.n	8002548 <HAL_ADC_ConfigChannel+0x3c>
 8002546:	e1a3      	b.n	8002890 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d100      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x46>
 8002550:	e143      	b.n	80027da <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	429a      	cmp	r2, r3
 800255c:	d004      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002562:	4ac1      	ldr	r2, [pc, #772]	@ (8002868 <HAL_ADC_ConfigChannel+0x35c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d108      	bne.n	800257a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0019      	movs	r1, r3
 8002572:	0010      	movs	r0, r2
 8002574:	f7ff fb0a 	bl	8001b8c <LL_ADC_REG_SetSequencerChAdd>
 8002578:	e0c9      	b.n	800270e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	211f      	movs	r1, #31
 8002584:	400b      	ands	r3, r1
 8002586:	210f      	movs	r1, #15
 8002588:	4099      	lsls	r1, r3
 800258a:	000b      	movs	r3, r1
 800258c:	43db      	mvns	r3, r3
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	035b      	lsls	r3, r3, #13
 8002598:	0b5b      	lsrs	r3, r3, #13
 800259a:	d105      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x9c>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	221f      	movs	r2, #31
 80025a4:	4013      	ands	r3, r2
 80025a6:	e098      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d000      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0xa8>
 80025b2:	e091      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x1cc>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2202      	movs	r2, #2
 80025ba:	4013      	ands	r3, r2
 80025bc:	d000      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0xb4>
 80025be:	e089      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x1c8>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2204      	movs	r2, #4
 80025c6:	4013      	ands	r3, r2
 80025c8:	d000      	beq.n	80025cc <HAL_ADC_ConfigChannel+0xc0>
 80025ca:	e081      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x1c4>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2208      	movs	r2, #8
 80025d2:	4013      	ands	r3, r2
 80025d4:	d000      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0xcc>
 80025d6:	e079      	b.n	80026cc <HAL_ADC_ConfigChannel+0x1c0>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2210      	movs	r2, #16
 80025de:	4013      	ands	r3, r2
 80025e0:	d000      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0xd8>
 80025e2:	e071      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x1bc>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2220      	movs	r2, #32
 80025ea:	4013      	ands	r3, r2
 80025ec:	d000      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0xe4>
 80025ee:	e069      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x1b8>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2240      	movs	r2, #64	@ 0x40
 80025f6:	4013      	ands	r3, r2
 80025f8:	d000      	beq.n	80025fc <HAL_ADC_ConfigChannel+0xf0>
 80025fa:	e061      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x1b4>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2280      	movs	r2, #128	@ 0x80
 8002602:	4013      	ands	r3, r2
 8002604:	d000      	beq.n	8002608 <HAL_ADC_ConfigChannel+0xfc>
 8002606:	e059      	b.n	80026bc <HAL_ADC_ConfigChannel+0x1b0>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4013      	ands	r3, r2
 8002612:	d151      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1ac>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d149      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x1a8>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4013      	ands	r3, r2
 800262a:	d141      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1a4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4013      	ands	r3, r2
 8002636:	d139      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1a0>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	015b      	lsls	r3, r3, #5
 8002640:	4013      	ands	r3, r2
 8002642:	d131      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x19c>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	019b      	lsls	r3, r3, #6
 800264c:	4013      	ands	r3, r2
 800264e:	d129      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x198>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	01db      	lsls	r3, r3, #7
 8002658:	4013      	ands	r3, r2
 800265a:	d121      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x194>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	4013      	ands	r3, r2
 8002666:	d119      	bne.n	800269c <HAL_ADC_ConfigChannel+0x190>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	025b      	lsls	r3, r3, #9
 8002670:	4013      	ands	r3, r2
 8002672:	d111      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x18c>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	4013      	ands	r3, r2
 800267e:	d109      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x188>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	02db      	lsls	r3, r3, #11
 8002688:	4013      	ands	r3, r2
 800268a:	d001      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x184>
 800268c:	2312      	movs	r3, #18
 800268e:	e024      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 8002690:	2300      	movs	r3, #0
 8002692:	e022      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 8002694:	2311      	movs	r3, #17
 8002696:	e020      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 8002698:	2310      	movs	r3, #16
 800269a:	e01e      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 800269c:	230f      	movs	r3, #15
 800269e:	e01c      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026a0:	230e      	movs	r3, #14
 80026a2:	e01a      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026a4:	230d      	movs	r3, #13
 80026a6:	e018      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026a8:	230c      	movs	r3, #12
 80026aa:	e016      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026ac:	230b      	movs	r3, #11
 80026ae:	e014      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026b0:	230a      	movs	r3, #10
 80026b2:	e012      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026b4:	2309      	movs	r3, #9
 80026b6:	e010      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026b8:	2308      	movs	r3, #8
 80026ba:	e00e      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026bc:	2307      	movs	r3, #7
 80026be:	e00c      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026c0:	2306      	movs	r3, #6
 80026c2:	e00a      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026c4:	2305      	movs	r3, #5
 80026c6:	e008      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026c8:	2304      	movs	r3, #4
 80026ca:	e006      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026cc:	2303      	movs	r3, #3
 80026ce:	e004      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e002      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_ADC_ConfigChannel+0x1ce>
 80026d8:	2300      	movs	r3, #0
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	6852      	ldr	r2, [r2, #4]
 80026de:	201f      	movs	r0, #31
 80026e0:	4002      	ands	r2, r0
 80026e2:	4093      	lsls	r3, r2
 80026e4:	000a      	movs	r2, r1
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d808      	bhi.n	800270e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	001a      	movs	r2, r3
 800270a:	f7ff fa1f 	bl	8001b4c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	001a      	movs	r2, r3
 800271c:	f7ff fa66 	bl	8001bec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db00      	blt.n	800272a <HAL_ADC_ConfigChannel+0x21e>
 8002728:	e0bc      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800272a:	4b50      	ldr	r3, [pc, #320]	@ (800286c <HAL_ADC_ConfigChannel+0x360>)
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff f9bb 	bl	8001aa8 <LL_ADC_GetCommonPathInternalCh>
 8002732:	0003      	movs	r3, r0
 8002734:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4d      	ldr	r2, [pc, #308]	@ (8002870 <HAL_ADC_ConfigChannel+0x364>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d122      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	041b      	lsls	r3, r3, #16
 8002746:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002748:	d11d      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2280      	movs	r2, #128	@ 0x80
 800274e:	0412      	lsls	r2, r2, #16
 8002750:	4313      	orrs	r3, r2
 8002752:	4a46      	ldr	r2, [pc, #280]	@ (800286c <HAL_ADC_ConfigChannel+0x360>)
 8002754:	0019      	movs	r1, r3
 8002756:	0010      	movs	r0, r2
 8002758:	f7ff f992 	bl	8001a80 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800275c:	4b45      	ldr	r3, [pc, #276]	@ (8002874 <HAL_ADC_ConfigChannel+0x368>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4945      	ldr	r1, [pc, #276]	@ (8002878 <HAL_ADC_ConfigChannel+0x36c>)
 8002762:	0018      	movs	r0, r3
 8002764:	f7fd fcce 	bl	8000104 <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	0013      	movs	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	189b      	adds	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002776:	e002      	b.n	800277e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3b01      	subs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f9      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002784:	e08e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a3c      	ldr	r2, [pc, #240]	@ (800287c <HAL_ADC_ConfigChannel+0x370>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d10e      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	2380      	movs	r3, #128	@ 0x80
 8002794:	045b      	lsls	r3, r3, #17
 8002796:	4013      	ands	r3, r2
 8002798:	d109      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	0452      	lsls	r2, r2, #17
 80027a0:	4313      	orrs	r3, r2
 80027a2:	4a32      	ldr	r2, [pc, #200]	@ (800286c <HAL_ADC_ConfigChannel+0x360>)
 80027a4:	0019      	movs	r1, r3
 80027a6:	0010      	movs	r0, r2
 80027a8:	f7ff f96a 	bl	8001a80 <LL_ADC_SetCommonPathInternalCh>
 80027ac:	e07a      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a33      	ldr	r2, [pc, #204]	@ (8002880 <HAL_ADC_ConfigChannel+0x374>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d000      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x2ae>
 80027b8:	e074      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	2380      	movs	r3, #128	@ 0x80
 80027be:	03db      	lsls	r3, r3, #15
 80027c0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027c2:	d000      	beq.n	80027c6 <HAL_ADC_ConfigChannel+0x2ba>
 80027c4:	e06e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2280      	movs	r2, #128	@ 0x80
 80027ca:	03d2      	lsls	r2, r2, #15
 80027cc:	4313      	orrs	r3, r2
 80027ce:	4a27      	ldr	r2, [pc, #156]	@ (800286c <HAL_ADC_ConfigChannel+0x360>)
 80027d0:	0019      	movs	r1, r3
 80027d2:	0010      	movs	r0, r2
 80027d4:	f7ff f954 	bl	8001a80 <LL_ADC_SetCommonPathInternalCh>
 80027d8:	e064      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d004      	beq.n	80027f0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002868 <HAL_ADC_ConfigChannel+0x35c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d107      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0019      	movs	r1, r3
 80027fa:	0010      	movs	r0, r2
 80027fc:	f7ff f9d7 	bl	8001bae <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	da4d      	bge.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002808:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_ADC_ConfigChannel+0x360>)
 800280a:	0018      	movs	r0, r3
 800280c:	f7ff f94c 	bl	8001aa8 <LL_ADC_GetCommonPathInternalCh>
 8002810:	0003      	movs	r3, r0
 8002812:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <HAL_ADC_ConfigChannel+0x364>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d108      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4a18      	ldr	r2, [pc, #96]	@ (8002884 <HAL_ADC_ConfigChannel+0x378>)
 8002822:	4013      	ands	r3, r2
 8002824:	4a11      	ldr	r2, [pc, #68]	@ (800286c <HAL_ADC_ConfigChannel+0x360>)
 8002826:	0019      	movs	r1, r3
 8002828:	0010      	movs	r0, r2
 800282a:	f7ff f929 	bl	8001a80 <LL_ADC_SetCommonPathInternalCh>
 800282e:	e039      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a11      	ldr	r2, [pc, #68]	@ (800287c <HAL_ADC_ConfigChannel+0x370>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <HAL_ADC_ConfigChannel+0x37c>)
 800283e:	4013      	ands	r3, r2
 8002840:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <HAL_ADC_ConfigChannel+0x360>)
 8002842:	0019      	movs	r1, r3
 8002844:	0010      	movs	r0, r2
 8002846:	f7ff f91b 	bl	8001a80 <LL_ADC_SetCommonPathInternalCh>
 800284a:	e02b      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0b      	ldr	r2, [pc, #44]	@ (8002880 <HAL_ADC_ConfigChannel+0x374>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d126      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4a0c      	ldr	r2, [pc, #48]	@ (800288c <HAL_ADC_ConfigChannel+0x380>)
 800285a:	4013      	ands	r3, r2
 800285c:	4a03      	ldr	r2, [pc, #12]	@ (800286c <HAL_ADC_ConfigChannel+0x360>)
 800285e:	0019      	movs	r1, r3
 8002860:	0010      	movs	r0, r2
 8002862:	f7ff f90d 	bl	8001a80 <LL_ADC_SetCommonPathInternalCh>
 8002866:	e01d      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x398>
 8002868:	80000004 	.word	0x80000004
 800286c:	40012708 	.word	0x40012708
 8002870:	b0001000 	.word	0xb0001000
 8002874:	20000004 	.word	0x20000004
 8002878:	00030d40 	.word	0x00030d40
 800287c:	b8004000 	.word	0xb8004000
 8002880:	b4002000 	.word	0xb4002000
 8002884:	ff7fffff 	.word	0xff7fffff
 8002888:	feffffff 	.word	0xfeffffff
 800288c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	2220      	movs	r2, #32
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800289c:	2317      	movs	r3, #23
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2254      	movs	r2, #84	@ 0x54
 80028a8:	2100      	movs	r1, #0
 80028aa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80028ac:	2317      	movs	r3, #23
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	781b      	ldrb	r3, [r3, #0]
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b006      	add	sp, #24
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)

080028bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7ff f9e3 	bl	8001c98 <LL_ADC_IsEnabled>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d000      	beq.n	80028d8 <ADC_Enable+0x1c>
 80028d6:	e069      	b.n	80029ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4a36      	ldr	r2, [pc, #216]	@ (80029b8 <ADC_Enable+0xfc>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	d00d      	beq.n	8002900 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	2210      	movs	r2, #16
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f4:	2201      	movs	r2, #1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e056      	b.n	80029ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff f9b5 	bl	8001c74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800290a:	4b2c      	ldr	r3, [pc, #176]	@ (80029bc <ADC_Enable+0x100>)
 800290c:	0018      	movs	r0, r3
 800290e:	f7ff f8cb 	bl	8001aa8 <LL_ADC_GetCommonPathInternalCh>
 8002912:	0002      	movs	r2, r0
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	4013      	ands	r3, r2
 800291a:	d00f      	beq.n	800293c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800291c:	4b28      	ldr	r3, [pc, #160]	@ (80029c0 <ADC_Enable+0x104>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4928      	ldr	r1, [pc, #160]	@ (80029c4 <ADC_Enable+0x108>)
 8002922:	0018      	movs	r0, r3
 8002924:	f7fd fbee 	bl	8000104 <__udivsi3>
 8002928:	0003      	movs	r3, r0
 800292a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800292c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800292e:	e002      	b.n	8002936 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	3b01      	subs	r3, #1
 8002934:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f9      	bne.n	8002930 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e5b      	ldrb	r3, [r3, #25]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d033      	beq.n	80029ac <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002944:	f7ff f892 	bl	8001a6c <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800294c:	e027      	b.n	800299e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0018      	movs	r0, r3
 8002954:	f7ff f9a0 	bl	8001c98 <LL_ADC_IsEnabled>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d104      	bne.n	8002966 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0018      	movs	r0, r3
 8002962:	f7ff f987 	bl	8001c74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002966:	f7ff f881 	bl	8001a6c <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d914      	bls.n	800299e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2201      	movs	r2, #1
 800297c:	4013      	ands	r3, r2
 800297e:	2b01      	cmp	r3, #1
 8002980:	d00d      	beq.n	800299e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	2210      	movs	r2, #16
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	2201      	movs	r2, #1
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e007      	b.n	80029ae <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d1d0      	bne.n	800294e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b004      	add	sp, #16
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	80000017 	.word	0x80000017
 80029bc:	40012708 	.word	0x40012708
 80029c0:	20000004 	.word	0x20000004
 80029c4:	00030d40 	.word	0x00030d40

080029c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002a00:	46c0      	nop			@ (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	0002      	movs	r2, r0
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a1a:	d809      	bhi.n	8002a30 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	001a      	movs	r2, r3
 8002a22:	231f      	movs	r3, #31
 8002a24:	401a      	ands	r2, r3
 8002a26:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <__NVIC_EnableIRQ+0x30>)
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4091      	lsls	r1, r2
 8002a2c:	000a      	movs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002a30:	46c0      	nop			@ (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	0002      	movs	r2, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	1dfb      	adds	r3, r7, #7
 8002a48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a50:	d828      	bhi.n	8002aa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a52:	4a2f      	ldr	r2, [pc, #188]	@ (8002b10 <__NVIC_SetPriority+0xd4>)
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	33c0      	adds	r3, #192	@ 0xc0
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	589b      	ldr	r3, [r3, r2]
 8002a62:	1dfa      	adds	r2, r7, #7
 8002a64:	7812      	ldrb	r2, [r2, #0]
 8002a66:	0011      	movs	r1, r2
 8002a68:	2203      	movs	r2, #3
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	00d2      	lsls	r2, r2, #3
 8002a6e:	21ff      	movs	r1, #255	@ 0xff
 8002a70:	4091      	lsls	r1, r2
 8002a72:	000a      	movs	r2, r1
 8002a74:	43d2      	mvns	r2, r2
 8002a76:	401a      	ands	r2, r3
 8002a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	22ff      	movs	r2, #255	@ 0xff
 8002a80:	401a      	ands	r2, r3
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	0018      	movs	r0, r3
 8002a88:	2303      	movs	r3, #3
 8002a8a:	4003      	ands	r3, r0
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a90:	481f      	ldr	r0, [pc, #124]	@ (8002b10 <__NVIC_SetPriority+0xd4>)
 8002a92:	1dfb      	adds	r3, r7, #7
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	33c0      	adds	r3, #192	@ 0xc0
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002aa2:	e031      	b.n	8002b08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b14 <__NVIC_SetPriority+0xd8>)
 8002aa6:	1dfb      	adds	r3, r7, #7
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	0019      	movs	r1, r3
 8002aac:	230f      	movs	r3, #15
 8002aae:	400b      	ands	r3, r1
 8002ab0:	3b08      	subs	r3, #8
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3306      	adds	r3, #6
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	18d3      	adds	r3, r2, r3
 8002aba:	3304      	adds	r3, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1dfa      	adds	r2, r7, #7
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	0011      	movs	r1, r2
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	00d2      	lsls	r2, r2, #3
 8002aca:	21ff      	movs	r1, #255	@ 0xff
 8002acc:	4091      	lsls	r1, r2
 8002ace:	000a      	movs	r2, r1
 8002ad0:	43d2      	mvns	r2, r2
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	019b      	lsls	r3, r3, #6
 8002ada:	22ff      	movs	r2, #255	@ 0xff
 8002adc:	401a      	ands	r2, r3
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	4003      	ands	r3, r0
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aec:	4809      	ldr	r0, [pc, #36]	@ (8002b14 <__NVIC_SetPriority+0xd8>)
 8002aee:	1dfb      	adds	r3, r7, #7
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	001c      	movs	r4, r3
 8002af4:	230f      	movs	r3, #15
 8002af6:	4023      	ands	r3, r4
 8002af8:	3b08      	subs	r3, #8
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	430a      	orrs	r2, r1
 8002afe:	3306      	adds	r3, #6
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	18c3      	adds	r3, r0, r3
 8002b04:	3304      	adds	r3, #4
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b003      	add	sp, #12
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	045b      	lsls	r3, r3, #17
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d301      	bcc.n	8002b30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e010      	b.n	8002b52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b30:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <SysTick_Config+0x44>)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	3a01      	subs	r2, #1
 8002b36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b38:	2301      	movs	r3, #1
 8002b3a:	425b      	negs	r3, r3
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7ff ff7c 	bl	8002a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <SysTick_Config+0x44>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <SysTick_Config+0x44>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	1c02      	adds	r2, r0, #0
 8002b70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff ff5d 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b004      	add	sp, #16
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	0002      	movs	r2, r0
 8002b92:	1dfb      	adds	r3, r7, #7
 8002b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7ff ff33 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b002      	add	sp, #8
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7ff ffaf 	bl	8002b18 <SysTick_Config>
 8002bba:	0003      	movs	r3, r0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e077      	b.n	8002cc6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3d      	ldr	r2, [pc, #244]	@ (8002cd0 <HAL_DMA_Init+0x10c>)
 8002bdc:	4694      	mov	ip, r2
 8002bde:	4463      	add	r3, ip
 8002be0:	2114      	movs	r1, #20
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7fd fa8e 	bl	8000104 <__udivsi3>
 8002be8:	0003      	movs	r3, r0
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2225      	movs	r2, #37	@ 0x25
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4934      	ldr	r1, [pc, #208]	@ (8002cd4 <HAL_DMA_Init+0x110>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 f849 	bl	8002cd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	2380      	movs	r3, #128	@ 0x80
 8002c4c:	01db      	lsls	r3, r3, #7
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d102      	bne.n	8002c58 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c60:	213f      	movs	r1, #63	@ 0x3f
 8002c62:	400a      	ands	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c6e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d011      	beq.n	8002c9c <HAL_DMA_Init+0xd8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d80d      	bhi.n	8002c9c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f854 	bl	8002d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	e008      	b.n	8002cae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2225      	movs	r2, #37	@ 0x25
 8002cb8:	2101      	movs	r1, #1
 8002cba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	@ 0x24
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b002      	add	sp, #8
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			@ (mov r8, r8)
 8002cd0:	bffdfff8 	.word	0xbffdfff8
 8002cd4:	ffff800f 	.word	0xffff800f

08002cd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	4a10      	ldr	r2, [pc, #64]	@ (8002d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002ce8:	4694      	mov	ip, r2
 8002cea:	4463      	add	r3, ip
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	001a      	movs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	23ff      	movs	r3, #255	@ 0xff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	3b08      	subs	r3, #8
 8002d00:	2114      	movs	r1, #20
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7fd f9fe 	bl	8000104 <__udivsi3>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002d10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	221f      	movs	r2, #31
 8002d16:	4013      	ands	r3, r2
 8002d18:	2201      	movs	r2, #1
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002d20:	46c0      	nop			@ (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b004      	add	sp, #16
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	10008200 	.word	0x10008200
 8002d2c:	40020880 	.word	0x40020880

08002d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	223f      	movs	r2, #63	@ 0x3f
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d46:	4694      	mov	ip, r2
 8002d48:	4463      	add	r3, ip
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a07      	ldr	r2, [pc, #28]	@ (8002d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2201      	movs	r2, #1
 8002d62:	409a      	lsls	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002d68:	46c0      	nop			@ (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b004      	add	sp, #16
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	1000823f 	.word	0x1000823f
 8002d74:	40020940 	.word	0x40020940

08002d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d86:	e147      	b.n	8003018 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4091      	lsls	r1, r2
 8002d92:	000a      	movs	r2, r1
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d100      	bne.n	8002da0 <HAL_GPIO_Init+0x28>
 8002d9e:	e138      	b.n	8003012 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2203      	movs	r2, #3
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d005      	beq.n	8002db8 <HAL_GPIO_Init+0x40>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2203      	movs	r2, #3
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d130      	bne.n	8002e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	0013      	movs	r3, r2
 8002dc8:	43da      	mvns	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	0013      	movs	r3, r2
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dee:	2201      	movs	r2, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	409a      	lsls	r2, r3
 8002df4:	0013      	movs	r3, r2
 8002df6:	43da      	mvns	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	2201      	movs	r2, #1
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d017      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	409a      	lsls	r2, r3
 8002e34:	0013      	movs	r3, r2
 8002e36:	43da      	mvns	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	0013      	movs	r3, r2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d123      	bne.n	8002eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	08da      	lsrs	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3208      	adds	r2, #8
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	58d3      	ldr	r3, [r2, r3]
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2207      	movs	r2, #7
 8002e74:	4013      	ands	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2107      	movs	r1, #7
 8002e8e:	400b      	ands	r3, r1
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	409a      	lsls	r2, r3
 8002e94:	0013      	movs	r3, r2
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	0092      	lsls	r2, r2, #2
 8002ea6:	6939      	ldr	r1, [r7, #16]
 8002ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	0013      	movs	r3, r2
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	401a      	ands	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	0013      	movs	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	23c0      	movs	r3, #192	@ 0xc0
 8002ee4:	029b      	lsls	r3, r3, #10
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d100      	bne.n	8002eec <HAL_GPIO_Init+0x174>
 8002eea:	e092      	b.n	8003012 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002eec:	4a50      	ldr	r2, [pc, #320]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	3318      	adds	r3, #24
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	589b      	ldr	r3, [r3, r2]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2203      	movs	r2, #3
 8002efe:	4013      	ands	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	220f      	movs	r2, #15
 8002f04:	409a      	lsls	r2, r3
 8002f06:	0013      	movs	r3, r2
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	23a0      	movs	r3, #160	@ 0xa0
 8002f14:	05db      	lsls	r3, r3, #23
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0x1ca>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a45      	ldr	r2, [pc, #276]	@ (8003034 <HAL_GPIO_Init+0x2bc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <HAL_GPIO_Init+0x1c6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a44      	ldr	r2, [pc, #272]	@ (8003038 <HAL_GPIO_Init+0x2c0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x1c2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a43      	ldr	r2, [pc, #268]	@ (800303c <HAL_GPIO_Init+0x2c4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_GPIO_Init+0x1be>
 8002f32:	2303      	movs	r3, #3
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x1cc>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x1cc>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x1cc>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x1cc>
 8002f42:	2300      	movs	r3, #0
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	2103      	movs	r1, #3
 8002f48:	400a      	ands	r2, r1
 8002f4a:	00d2      	lsls	r2, r2, #3
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002f54:	4936      	ldr	r1, [pc, #216]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3318      	adds	r3, #24
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f62:	4b33      	ldr	r3, [pc, #204]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	035b      	lsls	r3, r3, #13
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002f8c:	4b28      	ldr	r3, [pc, #160]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	43da      	mvns	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	2380      	movs	r3, #128	@ 0x80
 8002fa2:	039b      	lsls	r3, r3, #14
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002fb8:	2384      	movs	r3, #132	@ 0x84
 8002fba:	58d3      	ldr	r3, [r2, r3]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	029b      	lsls	r3, r3, #10
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fdc:	4914      	ldr	r1, [pc, #80]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002fde:	2284      	movs	r2, #132	@ 0x84
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002fe4:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	58d3      	ldr	r3, [r2, r3]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	025b      	lsls	r3, r3, #9
 8002ffe:	4013      	ands	r3, r2
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800300a:	4909      	ldr	r1, [pc, #36]	@ (8003030 <HAL_GPIO_Init+0x2b8>)
 800300c:	2280      	movs	r2, #128	@ 0x80
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	40da      	lsrs	r2, r3
 8003020:	1e13      	subs	r3, r2, #0
 8003022:	d000      	beq.n	8003026 <HAL_GPIO_Init+0x2ae>
 8003024:	e6b0      	b.n	8002d88 <HAL_GPIO_Init+0x10>
  }
}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	46c0      	nop			@ (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b006      	add	sp, #24
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021800 	.word	0x40021800
 8003034:	50000400 	.word	0x50000400
 8003038:	50000800 	.word	0x50000800
 800303c:	50000c00 	.word	0x50000c00

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	0008      	movs	r0, r1
 800304a:	0011      	movs	r1, r2
 800304c:	1cbb      	adds	r3, r7, #2
 800304e:	1c02      	adds	r2, r0, #0
 8003050:	801a      	strh	r2, [r3, #0]
 8003052:	1c7b      	adds	r3, r7, #1
 8003054:	1c0a      	adds	r2, r1, #0
 8003056:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003058:	1c7b      	adds	r3, r7, #1
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003060:	1cbb      	adds	r3, r7, #2
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003068:	e003      	b.n	8003072 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800306a:	1cbb      	adds	r3, r7, #2
 800306c:	881a      	ldrh	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a19      	ldr	r2, [pc, #100]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	4b17      	ldr	r3, [pc, #92]	@ (80030ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d11f      	bne.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	0013      	movs	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4912      	ldr	r1, [pc, #72]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7fd f828 	bl	8000104 <__udivsi3>
 80030b4:	0003      	movs	r3, r0
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ba:	e008      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e001      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e009      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	401a      	ands	r2, r3
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	429a      	cmp	r2, r3
 80030de:	d0ed      	beq.n	80030bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	40007000 	.word	0x40007000
 80030f0:	fffff9ff 	.word	0xfffff9ff
 80030f4:	20000004 	.word	0x20000004
 80030f8:	000f4240 	.word	0x000f4240

080030fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e2fe      	b.n	800370c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	d100      	bne.n	800311a <HAL_RCC_OscConfig+0x1e>
 8003118:	e07c      	b.n	8003214 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311a:	4bc3      	ldr	r3, [pc, #780]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2238      	movs	r2, #56	@ 0x38
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003124:	4bc0      	ldr	r3, [pc, #768]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2203      	movs	r2, #3
 800312a:	4013      	ands	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b10      	cmp	r3, #16
 8003132:	d102      	bne.n	800313a <HAL_RCC_OscConfig+0x3e>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d002      	beq.n	8003140 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d10b      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	4bb9      	ldr	r3, [pc, #740]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	@ 0x80
 8003146:	029b      	lsls	r3, r3, #10
 8003148:	4013      	ands	r3, r2
 800314a:	d062      	beq.n	8003212 <HAL_RCC_OscConfig+0x116>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15e      	bne.n	8003212 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e2d9      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	2380      	movs	r3, #128	@ 0x80
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x78>
 8003164:	4bb0      	ldr	r3, [pc, #704]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4baf      	ldr	r3, [pc, #700]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800316a:	2180      	movs	r1, #128	@ 0x80
 800316c:	0249      	lsls	r1, r1, #9
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e020      	b.n	80031b6 <HAL_RCC_OscConfig+0xba>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	23a0      	movs	r3, #160	@ 0xa0
 800317a:	02db      	lsls	r3, r3, #11
 800317c:	429a      	cmp	r2, r3
 800317e:	d10e      	bne.n	800319e <HAL_RCC_OscConfig+0xa2>
 8003180:	4ba9      	ldr	r3, [pc, #676]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4ba8      	ldr	r3, [pc, #672]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003186:	2180      	movs	r1, #128	@ 0x80
 8003188:	02c9      	lsls	r1, r1, #11
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	4ba6      	ldr	r3, [pc, #664]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4ba5      	ldr	r3, [pc, #660]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	0249      	lsls	r1, r1, #9
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e00b      	b.n	80031b6 <HAL_RCC_OscConfig+0xba>
 800319e:	4ba2      	ldr	r3, [pc, #648]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4ba1      	ldr	r3, [pc, #644]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80031a4:	49a1      	ldr	r1, [pc, #644]	@ (800342c <HAL_RCC_OscConfig+0x330>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	4b9f      	ldr	r3, [pc, #636]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80031b0:	499f      	ldr	r1, [pc, #636]	@ (8003430 <HAL_RCC_OscConfig+0x334>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d014      	beq.n	80031e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe fc55 	bl	8001a6c <HAL_GetTick>
 80031c2:	0003      	movs	r3, r0
 80031c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fc50 	bl	8001a6c <HAL_GetTick>
 80031cc:	0002      	movs	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	@ 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e298      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031da:	4b93      	ldr	r3, [pc, #588]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	029b      	lsls	r3, r3, #10
 80031e2:	4013      	ands	r3, r2
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0xcc>
 80031e6:	e015      	b.n	8003214 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fc40 	bl	8001a6c <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f2:	f7fe fc3b 	bl	8001a6c <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	@ 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e283      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003204:	4b88      	ldr	r3, [pc, #544]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	029b      	lsls	r3, r3, #10
 800320c:	4013      	ands	r3, r2
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0xf6>
 8003210:	e000      	b.n	8003214 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2202      	movs	r2, #2
 800321a:	4013      	ands	r3, r2
 800321c:	d100      	bne.n	8003220 <HAL_RCC_OscConfig+0x124>
 800321e:	e099      	b.n	8003354 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003220:	4b81      	ldr	r3, [pc, #516]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2238      	movs	r2, #56	@ 0x38
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800322a:	4b7f      	ldr	r3, [pc, #508]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2203      	movs	r2, #3
 8003230:	4013      	ands	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d102      	bne.n	8003240 <HAL_RCC_OscConfig+0x144>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d002      	beq.n	8003246 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d135      	bne.n	80032b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003246:	4b78      	ldr	r3, [pc, #480]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4013      	ands	r3, r2
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x162>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e256      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b72      	ldr	r3, [pc, #456]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a74      	ldr	r2, [pc, #464]	@ (8003434 <HAL_RCC_OscConfig+0x338>)
 8003264:	4013      	ands	r3, r2
 8003266:	0019      	movs	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	021a      	lsls	r2, r3, #8
 800326e:	4b6e      	ldr	r3, [pc, #440]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d112      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800327a:	4b6b      	ldr	r3, [pc, #428]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6e      	ldr	r2, [pc, #440]	@ (8003438 <HAL_RCC_OscConfig+0x33c>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	4b67      	ldr	r3, [pc, #412]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800328e:	4b66      	ldr	r3, [pc, #408]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0adb      	lsrs	r3, r3, #11
 8003294:	2207      	movs	r2, #7
 8003296:	4013      	ands	r3, r2
 8003298:	4a68      	ldr	r2, [pc, #416]	@ (800343c <HAL_RCC_OscConfig+0x340>)
 800329a:	40da      	lsrs	r2, r3
 800329c:	4b68      	ldr	r3, [pc, #416]	@ (8003440 <HAL_RCC_OscConfig+0x344>)
 800329e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032a0:	4b68      	ldr	r3, [pc, #416]	@ (8003444 <HAL_RCC_OscConfig+0x348>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7fe fb85 	bl	80019b4 <HAL_InitTick>
 80032aa:	1e03      	subs	r3, r0, #0
 80032ac:	d051      	beq.n	8003352 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e22c      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d030      	beq.n	800331c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a5e      	ldr	r2, [pc, #376]	@ (8003438 <HAL_RCC_OscConfig+0x33c>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	4b57      	ldr	r3, [pc, #348]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80032ce:	4b56      	ldr	r3, [pc, #344]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b55      	ldr	r3, [pc, #340]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80032d4:	2180      	movs	r1, #128	@ 0x80
 80032d6:	0049      	lsls	r1, r1, #1
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fbc6 	bl	8001a6c <HAL_GetTick>
 80032e0:	0003      	movs	r3, r0
 80032e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fe fbc1 	bl	8001a6c <HAL_GetTick>
 80032ea:	0002      	movs	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e209      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2380      	movs	r3, #128	@ 0x80
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4013      	ands	r3, r2
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b48      	ldr	r3, [pc, #288]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a4a      	ldr	r2, [pc, #296]	@ (8003434 <HAL_RCC_OscConfig+0x338>)
 800330a:	4013      	ands	r3, r2
 800330c:	0019      	movs	r1, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	4b44      	ldr	r3, [pc, #272]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	e01b      	b.n	8003354 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800331c:	4b42      	ldr	r3, [pc, #264]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003322:	4949      	ldr	r1, [pc, #292]	@ (8003448 <HAL_RCC_OscConfig+0x34c>)
 8003324:	400a      	ands	r2, r1
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fba0 	bl	8001a6c <HAL_GetTick>
 800332c:	0003      	movs	r3, r0
 800332e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7fe fb9b 	bl	8001a6c <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1e3      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003344:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4013      	ands	r3, r2
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x236>
 8003350:	e000      	b.n	8003354 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003352:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2208      	movs	r2, #8
 800335a:	4013      	ands	r3, r2
 800335c:	d047      	beq.n	80033ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800335e:	4b32      	ldr	r3, [pc, #200]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2238      	movs	r2, #56	@ 0x38
 8003364:	4013      	ands	r3, r2
 8003366:	2b18      	cmp	r3, #24
 8003368:	d10a      	bne.n	8003380 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800336a:	4b2f      	ldr	r3, [pc, #188]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d03c      	beq.n	80033ee <HAL_RCC_OscConfig+0x2f2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d138      	bne.n	80033ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e1c5      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d019      	beq.n	80033bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003388:	4b27      	ldr	r3, [pc, #156]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800338a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800338c:	4b26      	ldr	r3, [pc, #152]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 800338e:	2101      	movs	r1, #1
 8003390:	430a      	orrs	r2, r1
 8003392:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fb6a 	bl	8001a6c <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339e:	f7fe fb65 	bl	8001a6c <HAL_GetTick>
 80033a2:	0002      	movs	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1ad      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80033b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b4:	2202      	movs	r2, #2
 80033b6:	4013      	ands	r3, r2
 80033b8:	d0f1      	beq.n	800339e <HAL_RCC_OscConfig+0x2a2>
 80033ba:	e018      	b.n	80033ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80033bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80033be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033c0:	4b19      	ldr	r3, [pc, #100]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	438a      	bics	r2, r1
 80033c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fb50 	bl	8001a6c <HAL_GetTick>
 80033cc:	0003      	movs	r3, r0
 80033ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fe fb4b 	bl	8001a6c <HAL_GetTick>
 80033d6:	0002      	movs	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e193      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e4:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 80033e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e8:	2202      	movs	r2, #2
 80033ea:	4013      	ands	r3, r2
 80033ec:	d1f1      	bne.n	80033d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2204      	movs	r2, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d100      	bne.n	80033fa <HAL_RCC_OscConfig+0x2fe>
 80033f8:	e0c6      	b.n	8003588 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	231f      	movs	r3, #31
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2238      	movs	r2, #56	@ 0x38
 8003408:	4013      	ands	r3, r2
 800340a:	2b20      	cmp	r3, #32
 800340c:	d11e      	bne.n	800344c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800340e:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <HAL_RCC_OscConfig+0x32c>)
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	2202      	movs	r2, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d100      	bne.n	800341a <HAL_RCC_OscConfig+0x31e>
 8003418:	e0b6      	b.n	8003588 <HAL_RCC_OscConfig+0x48c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d000      	beq.n	8003424 <HAL_RCC_OscConfig+0x328>
 8003422:	e0b1      	b.n	8003588 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e171      	b.n	800370c <HAL_RCC_OscConfig+0x610>
 8003428:	40021000 	.word	0x40021000
 800342c:	fffeffff 	.word	0xfffeffff
 8003430:	fffbffff 	.word	0xfffbffff
 8003434:	ffff80ff 	.word	0xffff80ff
 8003438:	ffffc7ff 	.word	0xffffc7ff
 800343c:	00f42400 	.word	0x00f42400
 8003440:	20000004 	.word	0x20000004
 8003444:	20000008 	.word	0x20000008
 8003448:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800344c:	4bb1      	ldr	r3, [pc, #708]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800344e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	055b      	lsls	r3, r3, #21
 8003454:	4013      	ands	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_RCC_OscConfig+0x360>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x362>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4bac      	ldr	r3, [pc, #688]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003466:	4bab      	ldr	r3, [pc, #684]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003468:	2180      	movs	r1, #128	@ 0x80
 800346a:	0549      	lsls	r1, r1, #21
 800346c:	430a      	orrs	r2, r1
 800346e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003470:	4ba8      	ldr	r3, [pc, #672]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003474:	2380      	movs	r3, #128	@ 0x80
 8003476:	055b      	lsls	r3, r3, #21
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800347e:	231f      	movs	r3, #31
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003486:	4ba4      	ldr	r3, [pc, #656]	@ (8003718 <HAL_RCC_OscConfig+0x61c>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4013      	ands	r3, r2
 8003490:	d11a      	bne.n	80034c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003492:	4ba1      	ldr	r3, [pc, #644]	@ (8003718 <HAL_RCC_OscConfig+0x61c>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4ba0      	ldr	r3, [pc, #640]	@ (8003718 <HAL_RCC_OscConfig+0x61c>)
 8003498:	2180      	movs	r1, #128	@ 0x80
 800349a:	0049      	lsls	r1, r1, #1
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80034a0:	f7fe fae4 	bl	8001a6c <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034aa:	f7fe fadf 	bl	8001a6c <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e127      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034bc:	4b96      	ldr	r3, [pc, #600]	@ (8003718 <HAL_RCC_OscConfig+0x61c>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	2380      	movs	r3, #128	@ 0x80
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4013      	ands	r3, r2
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x3e2>
 80034d0:	4b90      	ldr	r3, [pc, #576]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80034d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80034d6:	2101      	movs	r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034dc:	e01c      	b.n	8003518 <HAL_RCC_OscConfig+0x41c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x404>
 80034e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80034e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80034ec:	2104      	movs	r1, #4
 80034ee:	430a      	orrs	r2, r1
 80034f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034f2:	4b88      	ldr	r3, [pc, #544]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80034f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034f6:	4b87      	ldr	r3, [pc, #540]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0x41c>
 8003500:	4b84      	ldr	r3, [pc, #528]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003502:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003504:	4b83      	ldr	r3, [pc, #524]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003506:	2101      	movs	r1, #1
 8003508:	438a      	bics	r2, r1
 800350a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800350c:	4b81      	ldr	r3, [pc, #516]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800350e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003510:	4b80      	ldr	r3, [pc, #512]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003512:	2104      	movs	r1, #4
 8003514:	438a      	bics	r2, r1
 8003516:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d014      	beq.n	800354a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe faa4 	bl	8001a6c <HAL_GetTick>
 8003524:	0003      	movs	r3, r0
 8003526:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003528:	e009      	b.n	800353e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fe fa9f 	bl	8001a6c <HAL_GetTick>
 800352e:	0002      	movs	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	4a79      	ldr	r2, [pc, #484]	@ (800371c <HAL_RCC_OscConfig+0x620>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0e6      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353e:	4b75      	ldr	r3, [pc, #468]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003542:	2202      	movs	r2, #2
 8003544:	4013      	ands	r3, r2
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x42e>
 8003548:	e013      	b.n	8003572 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fe fa8f 	bl	8001a6c <HAL_GetTick>
 800354e:	0003      	movs	r3, r0
 8003550:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003552:	e009      	b.n	8003568 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fe fa8a 	bl	8001a6c <HAL_GetTick>
 8003558:	0002      	movs	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	4a6f      	ldr	r2, [pc, #444]	@ (800371c <HAL_RCC_OscConfig+0x620>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0d1      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003568:	4b6a      	ldr	r3, [pc, #424]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	2202      	movs	r2, #2
 800356e:	4013      	ands	r3, r2
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003572:	231f      	movs	r3, #31
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b65      	ldr	r3, [pc, #404]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800357e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003580:	4b64      	ldr	r3, [pc, #400]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003582:	4967      	ldr	r1, [pc, #412]	@ (8003720 <HAL_RCC_OscConfig+0x624>)
 8003584:	400a      	ands	r2, r1
 8003586:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d100      	bne.n	8003592 <HAL_RCC_OscConfig+0x496>
 8003590:	e0bb      	b.n	800370a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003592:	4b60      	ldr	r3, [pc, #384]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2238      	movs	r2, #56	@ 0x38
 8003598:	4013      	ands	r3, r2
 800359a:	2b10      	cmp	r3, #16
 800359c:	d100      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4a4>
 800359e:	e07b      	b.n	8003698 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d156      	bne.n	8003656 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b59      	ldr	r3, [pc, #356]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80035ae:	495d      	ldr	r1, [pc, #372]	@ (8003724 <HAL_RCC_OscConfig+0x628>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fa5a 	bl	8001a6c <HAL_GetTick>
 80035b8:	0003      	movs	r3, r0
 80035ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035be:	f7fe fa55 	bl	8001a6c <HAL_GetTick>
 80035c2:	0002      	movs	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e09d      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d0:	4b50      	ldr	r3, [pc, #320]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	049b      	lsls	r3, r3, #18
 80035d8:	4013      	ands	r3, r2
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a51      	ldr	r2, [pc, #324]	@ (8003728 <HAL_RCC_OscConfig+0x62c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1a      	ldr	r2, [r3, #32]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	431a      	orrs	r2, r3
 800360a:	4b42      	ldr	r3, [pc, #264]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800360c:	430a      	orrs	r2, r1
 800360e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003610:	4b40      	ldr	r3, [pc, #256]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b3f      	ldr	r3, [pc, #252]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003616:	2180      	movs	r1, #128	@ 0x80
 8003618:	0449      	lsls	r1, r1, #17
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800361e:	4b3d      	ldr	r3, [pc, #244]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b3c      	ldr	r3, [pc, #240]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003624:	2180      	movs	r1, #128	@ 0x80
 8003626:	0549      	lsls	r1, r1, #21
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe fa1e 	bl	8001a6c <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe fa19 	bl	8001a6c <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e061      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003648:	4b32      	ldr	r3, [pc, #200]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	@ 0x80
 800364e:	049b      	lsls	r3, r3, #18
 8003650:	4013      	ands	r3, r2
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x53a>
 8003654:	e059      	b.n	800370a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b2f      	ldr	r3, [pc, #188]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b2e      	ldr	r3, [pc, #184]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800365c:	4931      	ldr	r1, [pc, #196]	@ (8003724 <HAL_RCC_OscConfig+0x628>)
 800365e:	400a      	ands	r2, r1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe fa03 	bl	8001a6c <HAL_GetTick>
 8003666:	0003      	movs	r3, r0
 8003668:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe f9fe 	bl	8001a6c <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e046      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367e:	4b25      	ldr	r3, [pc, #148]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	049b      	lsls	r3, r3, #18
 8003686:	4013      	ands	r3, r2
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800368a:	4b22      	ldr	r3, [pc, #136]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	4b21      	ldr	r3, [pc, #132]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003690:	4926      	ldr	r1, [pc, #152]	@ (800372c <HAL_RCC_OscConfig+0x630>)
 8003692:	400a      	ands	r2, r1
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	e038      	b.n	800370a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e033      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2203      	movs	r2, #3
 80036ae:	401a      	ands	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d126      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2270      	movs	r2, #112	@ 0x70
 80036bc:	401a      	ands	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d11f      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	23fe      	movs	r3, #254	@ 0xfe
 80036ca:	01db      	lsls	r3, r3, #7
 80036cc:	401a      	ands	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d116      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	23f8      	movs	r3, #248	@ 0xf8
 80036dc:	039b      	lsls	r3, r3, #14
 80036de:	401a      	ands	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d10e      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	23e0      	movs	r3, #224	@ 0xe0
 80036ec:	051b      	lsls	r3, r3, #20
 80036ee:	401a      	ands	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	0f5b      	lsrs	r3, r3, #29
 80036fc:	075a      	lsls	r2, r3, #29
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b008      	add	sp, #32
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
 800371c:	00001388 	.word	0x00001388
 8003720:	efffffff 	.word	0xefffffff
 8003724:	feffffff 	.word	0xfeffffff
 8003728:	11c1808c 	.word	0x11c1808c
 800372c:	eefefffc 	.word	0xeefefffc

08003730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0e9      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b76      	ldr	r3, [pc, #472]	@ (8003920 <HAL_RCC_ClockConfig+0x1f0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2207      	movs	r2, #7
 800374a:	4013      	ands	r3, r2
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d91e      	bls.n	8003790 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2207      	movs	r2, #7
 8003758:	4393      	bics	r3, r2
 800375a:	0019      	movs	r1, r3
 800375c:	4b70      	ldr	r3, [pc, #448]	@ (8003920 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003764:	f7fe f982 	bl	8001a6c <HAL_GetTick>
 8003768:	0003      	movs	r3, r0
 800376a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800376c:	e009      	b.n	8003782 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376e:	f7fe f97d 	bl	8001a6c <HAL_GetTick>
 8003772:	0002      	movs	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <HAL_RCC_ClockConfig+0x1f4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0ca      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003782:	4b67      	ldr	r3, [pc, #412]	@ (8003920 <HAL_RCC_ClockConfig+0x1f0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2207      	movs	r2, #7
 8003788:	4013      	ands	r3, r2
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d1ee      	bne.n	800376e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2202      	movs	r2, #2
 8003796:	4013      	ands	r3, r2
 8003798:	d015      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2204      	movs	r2, #4
 80037a0:	4013      	ands	r3, r2
 80037a2:	d006      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037a4:	4b60      	ldr	r3, [pc, #384]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80037aa:	21e0      	movs	r1, #224	@ 0xe0
 80037ac:	01c9      	lsls	r1, r1, #7
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4a5d      	ldr	r2, [pc, #372]	@ (800392c <HAL_RCC_ClockConfig+0x1fc>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	4b59      	ldr	r3, [pc, #356]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80037c2:	430a      	orrs	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2201      	movs	r2, #1
 80037cc:	4013      	ands	r3, r2
 80037ce:	d057      	beq.n	8003880 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d8:	4b53      	ldr	r3, [pc, #332]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2380      	movs	r3, #128	@ 0x80
 80037de:	029b      	lsls	r3, r3, #10
 80037e0:	4013      	ands	r3, r2
 80037e2:	d12b      	bne.n	800383c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e097      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	049b      	lsls	r3, r3, #18
 80037f8:	4013      	ands	r3, r2
 80037fa:	d11f      	bne.n	800383c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e08b      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003808:	4b47      	ldr	r3, [pc, #284]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4013      	ands	r3, r2
 8003812:	d113      	bne.n	800383c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e07f      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d106      	bne.n	800382e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003820:	4b41      	ldr	r3, [pc, #260]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	2202      	movs	r2, #2
 8003826:	4013      	ands	r3, r2
 8003828:	d108      	bne.n	800383c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e074      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	4b3e      	ldr	r3, [pc, #248]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	2202      	movs	r2, #2
 8003834:	4013      	ands	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e06d      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800383c:	4b3a      	ldr	r3, [pc, #232]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2207      	movs	r2, #7
 8003842:	4393      	bics	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4b37      	ldr	r3, [pc, #220]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003850:	f7fe f90c 	bl	8001a6c <HAL_GetTick>
 8003854:	0003      	movs	r3, r0
 8003856:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003858:	e009      	b.n	800386e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385a:	f7fe f907 	bl	8001a6c <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	4a2f      	ldr	r2, [pc, #188]	@ (8003924 <HAL_RCC_ClockConfig+0x1f4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e054      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b2e      	ldr	r3, [pc, #184]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2238      	movs	r2, #56	@ 0x38
 8003874:	401a      	ands	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	429a      	cmp	r2, r3
 800387e:	d1ec      	bne.n	800385a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003880:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <HAL_RCC_ClockConfig+0x1f0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2207      	movs	r2, #7
 8003886:	4013      	ands	r3, r2
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d21e      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2207      	movs	r2, #7
 8003894:	4393      	bics	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	4b21      	ldr	r3, [pc, #132]	@ (8003920 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038a0:	f7fe f8e4 	bl	8001a6c <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038a8:	e009      	b.n	80038be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038aa:	f7fe f8df 	bl	8001a6c <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003924 <HAL_RCC_ClockConfig+0x1f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e02c      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038be:	4b18      	ldr	r3, [pc, #96]	@ (8003920 <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2207      	movs	r2, #7
 80038c4:	4013      	ands	r3, r2
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1ee      	bne.n	80038aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038d6:	4b14      	ldr	r3, [pc, #80]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	4a15      	ldr	r2, [pc, #84]	@ (8003930 <HAL_RCC_ClockConfig+0x200>)
 80038dc:	4013      	ands	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80038ea:	f000 f829 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038ee:	0001      	movs	r1, r0
 80038f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <HAL_RCC_ClockConfig+0x1f8>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	220f      	movs	r2, #15
 80038f8:	401a      	ands	r2, r3
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <HAL_RCC_ClockConfig+0x204>)
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	58d3      	ldr	r3, [r2, r3]
 8003900:	221f      	movs	r2, #31
 8003902:	4013      	ands	r3, r2
 8003904:	000a      	movs	r2, r1
 8003906:	40da      	lsrs	r2, r3
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_ClockConfig+0x208>)
 800390a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_ClockConfig+0x20c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0018      	movs	r0, r3
 8003912:	f7fe f84f 	bl	80019b4 <HAL_InitTick>
 8003916:	0003      	movs	r3, r0
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b004      	add	sp, #16
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40022000 	.word	0x40022000
 8003924:	00001388 	.word	0x00001388
 8003928:	40021000 	.word	0x40021000
 800392c:	fffff0ff 	.word	0xfffff0ff
 8003930:	ffff8fff 	.word	0xffff8fff
 8003934:	08005a58 	.word	0x08005a58
 8003938:	20000004 	.word	0x20000004
 800393c:	20000008 	.word	0x20000008

08003940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003946:	4b3c      	ldr	r3, [pc, #240]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2238      	movs	r2, #56	@ 0x38
 800394c:	4013      	ands	r3, r2
 800394e:	d10f      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003950:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	0adb      	lsrs	r3, r3, #11
 8003956:	2207      	movs	r2, #7
 8003958:	4013      	ands	r3, r2
 800395a:	2201      	movs	r2, #1
 800395c:	409a      	lsls	r2, r3
 800395e:	0013      	movs	r3, r2
 8003960:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003962:	6839      	ldr	r1, [r7, #0]
 8003964:	4835      	ldr	r0, [pc, #212]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003966:	f7fc fbcd 	bl	8000104 <__udivsi3>
 800396a:	0003      	movs	r3, r0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e05d      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003970:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2238      	movs	r2, #56	@ 0x38
 8003976:	4013      	ands	r3, r2
 8003978:	2b08      	cmp	r3, #8
 800397a:	d102      	bne.n	8003982 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800397c:	4b30      	ldr	r3, [pc, #192]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x100>)
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e054      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003982:	4b2d      	ldr	r3, [pc, #180]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2238      	movs	r2, #56	@ 0x38
 8003988:	4013      	ands	r3, r2
 800398a:	2b10      	cmp	r3, #16
 800398c:	d138      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800398e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2203      	movs	r2, #3
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003998:	4b27      	ldr	r3, [pc, #156]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	2207      	movs	r2, #7
 80039a0:	4013      	ands	r3, r2
 80039a2:	3301      	adds	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d10d      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4824      	ldr	r0, [pc, #144]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x100>)
 80039b0:	f7fc fba8 	bl	8000104 <__udivsi3>
 80039b4:	0003      	movs	r3, r0
 80039b6:	0019      	movs	r1, r3
 80039b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	227f      	movs	r2, #127	@ 0x7f
 80039c0:	4013      	ands	r3, r2
 80039c2:	434b      	muls	r3, r1
 80039c4:	617b      	str	r3, [r7, #20]
        break;
 80039c6:	e00d      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	481c      	ldr	r0, [pc, #112]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xfc>)
 80039cc:	f7fc fb9a 	bl	8000104 <__udivsi3>
 80039d0:	0003      	movs	r3, r0
 80039d2:	0019      	movs	r1, r3
 80039d4:	4b18      	ldr	r3, [pc, #96]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	227f      	movs	r2, #127	@ 0x7f
 80039dc:	4013      	ands	r3, r2
 80039de:	434b      	muls	r3, r1
 80039e0:	617b      	str	r3, [r7, #20]
        break;
 80039e2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80039e4:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	0f5b      	lsrs	r3, r3, #29
 80039ea:	2207      	movs	r2, #7
 80039ec:	4013      	ands	r3, r2
 80039ee:	3301      	adds	r3, #1
 80039f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	6978      	ldr	r0, [r7, #20]
 80039f6:	f7fc fb85 	bl	8000104 <__udivsi3>
 80039fa:	0003      	movs	r3, r0
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	e015      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a00:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2238      	movs	r2, #56	@ 0x38
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d103      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a14:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2238      	movs	r2, #56	@ 0x38
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b18      	cmp	r3, #24
 8003a1e:	d103      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a20:	23fa      	movs	r3, #250	@ 0xfa
 8003a22:	01db      	lsls	r3, r3, #7
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	e001      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a2c:	693b      	ldr	r3, [r7, #16]
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b006      	add	sp, #24
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	007a1200 	.word	0x007a1200

08003a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e056      	b.n	8003b04 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	223d      	movs	r2, #61	@ 0x3d
 8003a5a:	5c9b      	ldrb	r3, [r3, r2]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d113      	bne.n	8003a8a <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	223c      	movs	r2, #60	@ 0x3c
 8003a66:	2100      	movs	r1, #0
 8003a68:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f001 fa9d 	bl	8004fac <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a23      	ldr	r2, [pc, #140]	@ (8003b0c <HAL_TIM_Base_Init+0xc8>)
 8003a7e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	0010      	movs	r0, r2
 8003a88:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	223d      	movs	r2, #61	@ 0x3d
 8003a8e:	2102      	movs	r1, #2
 8003a90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	0010      	movs	r0, r2
 8003a9e:	f000 ff41 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2248      	movs	r2, #72	@ 0x48
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	223e      	movs	r2, #62	@ 0x3e
 8003aae:	2101      	movs	r1, #1
 8003ab0:	5499      	strb	r1, [r3, r2]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	223f      	movs	r2, #63	@ 0x3f
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	5499      	strb	r1, [r3, r2]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2240      	movs	r2, #64	@ 0x40
 8003abe:	2101      	movs	r1, #1
 8003ac0:	5499      	strb	r1, [r3, r2]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2241      	movs	r2, #65	@ 0x41
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	5499      	strb	r1, [r3, r2]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2242      	movs	r2, #66	@ 0x42
 8003ace:	2101      	movs	r1, #1
 8003ad0:	5499      	strb	r1, [r3, r2]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2243      	movs	r2, #67	@ 0x43
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2244      	movs	r2, #68	@ 0x44
 8003ade:	2101      	movs	r1, #1
 8003ae0:	5499      	strb	r1, [r3, r2]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2245      	movs	r2, #69	@ 0x45
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	5499      	strb	r1, [r3, r2]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2246      	movs	r2, #70	@ 0x46
 8003aee:	2101      	movs	r1, #1
 8003af0:	5499      	strb	r1, [r3, r2]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2247      	movs	r2, #71	@ 0x47
 8003af6:	2101      	movs	r1, #1
 8003af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	223d      	movs	r2, #61	@ 0x3d
 8003afe:	2101      	movs	r1, #1
 8003b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	08000e1d 	.word	0x08000e1d

08003b10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	223d      	movs	r2, #61	@ 0x3d
 8003b1c:	5c9b      	ldrb	r3, [r3, r2]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d001      	beq.n	8003b28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e035      	b.n	8003b94 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	223d      	movs	r2, #61	@ 0x3d
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a19      	ldr	r2, [pc, #100]	@ (8003b9c <HAL_TIM_Base_Start+0x8c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00a      	beq.n	8003b50 <HAL_TIM_Base_Start+0x40>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	05db      	lsls	r3, r3, #23
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start+0x40>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ba0 <HAL_TIM_Base_Start+0x90>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d116      	bne.n	8003b7e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4a13      	ldr	r2, [pc, #76]	@ (8003ba4 <HAL_TIM_Base_Start+0x94>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d016      	beq.n	8003b90 <HAL_TIM_Base_Start+0x80>
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	2380      	movs	r3, #128	@ 0x80
 8003b66:	025b      	lsls	r3, r3, #9
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d011      	beq.n	8003b90 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2101      	movs	r1, #1
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	e008      	b.n	8003b90 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2101      	movs	r1, #1
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e000      	b.n	8003b92 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	00010007 	.word	0x00010007

08003ba8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e056      	b.n	8003c68 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	223d      	movs	r2, #61	@ 0x3d
 8003bbe:	5c9b      	ldrb	r3, [r3, r2]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d113      	bne.n	8003bee <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	223c      	movs	r2, #60	@ 0x3c
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f001 f9eb 	bl	8004fac <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a23      	ldr	r2, [pc, #140]	@ (8003c70 <HAL_TIM_OC_Init+0xc8>)
 8003be2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	0010      	movs	r0, r2
 8003bec:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	223d      	movs	r2, #61	@ 0x3d
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	0019      	movs	r1, r3
 8003c00:	0010      	movs	r0, r2
 8003c02:	f000 fe8f 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2248      	movs	r2, #72	@ 0x48
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	223e      	movs	r2, #62	@ 0x3e
 8003c12:	2101      	movs	r1, #1
 8003c14:	5499      	strb	r1, [r3, r2]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	223f      	movs	r2, #63	@ 0x3f
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2240      	movs	r2, #64	@ 0x40
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2241      	movs	r2, #65	@ 0x41
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2242      	movs	r2, #66	@ 0x42
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2243      	movs	r2, #67	@ 0x43
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2244      	movs	r2, #68	@ 0x44
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2245      	movs	r2, #69	@ 0x45
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2246      	movs	r2, #70	@ 0x46
 8003c52:	2101      	movs	r1, #1
 8003c54:	5499      	strb	r1, [r3, r2]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2247      	movs	r2, #71	@ 0x47
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	223d      	movs	r2, #61	@ 0x3d
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	08003c75 	.word	0x08003c75

08003c74 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	230f      	movs	r3, #15
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d108      	bne.n	8003cae <HAL_TIM_OC_Start_IT+0x2a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	223e      	movs	r2, #62	@ 0x3e
 8003ca0:	5c9b      	ldrb	r3, [r3, r2]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	1e5a      	subs	r2, r3, #1
 8003ca8:	4193      	sbcs	r3, r2
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e037      	b.n	8003d1e <HAL_TIM_OC_Start_IT+0x9a>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d108      	bne.n	8003cc6 <HAL_TIM_OC_Start_IT+0x42>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	223f      	movs	r2, #63	@ 0x3f
 8003cb8:	5c9b      	ldrb	r3, [r3, r2]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	1e5a      	subs	r2, r3, #1
 8003cc0:	4193      	sbcs	r3, r2
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e02b      	b.n	8003d1e <HAL_TIM_OC_Start_IT+0x9a>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d108      	bne.n	8003cde <HAL_TIM_OC_Start_IT+0x5a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2240      	movs	r2, #64	@ 0x40
 8003cd0:	5c9b      	ldrb	r3, [r3, r2]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	4193      	sbcs	r3, r2
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	e01f      	b.n	8003d1e <HAL_TIM_OC_Start_IT+0x9a>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	d108      	bne.n	8003cf6 <HAL_TIM_OC_Start_IT+0x72>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2241      	movs	r2, #65	@ 0x41
 8003ce8:	5c9b      	ldrb	r3, [r3, r2]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	1e5a      	subs	r2, r3, #1
 8003cf0:	4193      	sbcs	r3, r2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e013      	b.n	8003d1e <HAL_TIM_OC_Start_IT+0x9a>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d108      	bne.n	8003d0e <HAL_TIM_OC_Start_IT+0x8a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2242      	movs	r2, #66	@ 0x42
 8003d00:	5c9b      	ldrb	r3, [r3, r2]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	1e5a      	subs	r2, r3, #1
 8003d08:	4193      	sbcs	r3, r2
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e007      	b.n	8003d1e <HAL_TIM_OC_Start_IT+0x9a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2243      	movs	r2, #67	@ 0x43
 8003d12:	5c9b      	ldrb	r3, [r3, r2]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	1e5a      	subs	r2, r3, #1
 8003d1a:	4193      	sbcs	r3, r2
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0c4      	b.n	8003eb0 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_OC_Start_IT+0xb2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	223e      	movs	r2, #62	@ 0x3e
 8003d30:	2102      	movs	r1, #2
 8003d32:	5499      	strb	r1, [r3, r2]
 8003d34:	e023      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0xfa>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_OC_Start_IT+0xc2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	223f      	movs	r2, #63	@ 0x3f
 8003d40:	2102      	movs	r1, #2
 8003d42:	5499      	strb	r1, [r3, r2]
 8003d44:	e01b      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0xfa>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_OC_Start_IT+0xd2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2240      	movs	r2, #64	@ 0x40
 8003d50:	2102      	movs	r1, #2
 8003d52:	5499      	strb	r1, [r3, r2]
 8003d54:	e013      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0xfa>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_OC_Start_IT+0xe2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2241      	movs	r2, #65	@ 0x41
 8003d60:	2102      	movs	r1, #2
 8003d62:	5499      	strb	r1, [r3, r2]
 8003d64:	e00b      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0xfa>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIM_OC_Start_IT+0xf2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2242      	movs	r2, #66	@ 0x42
 8003d70:	2102      	movs	r1, #2
 8003d72:	5499      	strb	r1, [r3, r2]
 8003d74:	e003      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0xfa>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2243      	movs	r2, #67	@ 0x43
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d02a      	beq.n	8003dda <HAL_TIM_OC_Start_IT+0x156>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d830      	bhi.n	8003dec <HAL_TIM_OC_Start_IT+0x168>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d01b      	beq.n	8003dc8 <HAL_TIM_OC_Start_IT+0x144>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d82a      	bhi.n	8003dec <HAL_TIM_OC_Start_IT+0x168>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_TIM_OC_Start_IT+0x120>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d009      	beq.n	8003db6 <HAL_TIM_OC_Start_IT+0x132>
 8003da2:	e023      	b.n	8003dec <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2102      	movs	r1, #2
 8003db0:	430a      	orrs	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]
      break;
 8003db4:	e01f      	b.n	8003df6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	60da      	str	r2, [r3, #12]
      break;
 8003dc6:	e016      	b.n	8003df6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2108      	movs	r1, #8
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]
      break;
 8003dd8:	e00d      	b.n	8003df6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2110      	movs	r1, #16
 8003de6:	430a      	orrs	r2, r1
 8003de8:	60da      	str	r2, [r3, #12]
      break;
 8003dea:	e004      	b.n	8003df6 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dec:	230f      	movs	r3, #15
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
      break;
 8003df4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003df6:	230f      	movs	r3, #15
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d154      	bne.n	8003eaa <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6839      	ldr	r1, [r7, #0]
 8003e06:	2201      	movs	r2, #1
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f001 f8ab 	bl	8004f64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a29      	ldr	r2, [pc, #164]	@ (8003eb8 <HAL_TIM_OC_Start_IT+0x234>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_TIM_OC_Start_IT+0x1a8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <HAL_TIM_OC_Start_IT+0x238>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_TIM_OC_Start_IT+0x1a8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a26      	ldr	r2, [pc, #152]	@ (8003ec0 <HAL_TIM_OC_Start_IT+0x23c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_OC_Start_IT+0x1ac>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_TIM_OC_Start_IT+0x1ae>
 8003e30:	2300      	movs	r3, #0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2180      	movs	r1, #128	@ 0x80
 8003e42:	0209      	lsls	r1, r1, #8
 8003e44:	430a      	orrs	r2, r1
 8003e46:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb8 <HAL_TIM_OC_Start_IT+0x234>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00a      	beq.n	8003e68 <HAL_TIM_OC_Start_IT+0x1e4>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	05db      	lsls	r3, r3, #23
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d004      	beq.n	8003e68 <HAL_TIM_OC_Start_IT+0x1e4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_TIM_OC_Start_IT+0x240>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d116      	bne.n	8003e96 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	4a16      	ldr	r2, [pc, #88]	@ (8003ec8 <HAL_TIM_OC_Start_IT+0x244>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d016      	beq.n	8003ea8 <HAL_TIM_OC_Start_IT+0x224>
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	025b      	lsls	r3, r3, #9
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d011      	beq.n	8003ea8 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2101      	movs	r1, #1
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	e008      	b.n	8003ea8 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e000      	b.n	8003eaa <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003eaa:	230f      	movs	r3, #15
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	781b      	ldrb	r3, [r3, #0]
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40014400 	.word	0x40014400
 8003ec0:	40014800 	.word	0x40014800
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	00010007 	.word	0x00010007

08003ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e056      	b.n	8003f8c <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	223d      	movs	r2, #61	@ 0x3d
 8003ee2:	5c9b      	ldrb	r3, [r3, r2]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d113      	bne.n	8003f12 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	223c      	movs	r2, #60	@ 0x3c
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f001 f859 	bl	8004fac <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a23      	ldr	r2, [pc, #140]	@ (8003f94 <HAL_TIM_PWM_Init+0xc8>)
 8003f06:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	0010      	movs	r0, r2
 8003f10:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	223d      	movs	r2, #61	@ 0x3d
 8003f16:	2102      	movs	r1, #2
 8003f18:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	0019      	movs	r1, r3
 8003f24:	0010      	movs	r0, r2
 8003f26:	f000 fcfd 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2248      	movs	r2, #72	@ 0x48
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	223e      	movs	r2, #62	@ 0x3e
 8003f36:	2101      	movs	r1, #1
 8003f38:	5499      	strb	r1, [r3, r2]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	223f      	movs	r2, #63	@ 0x3f
 8003f3e:	2101      	movs	r1, #1
 8003f40:	5499      	strb	r1, [r3, r2]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2240      	movs	r2, #64	@ 0x40
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2241      	movs	r2, #65	@ 0x41
 8003f4e:	2101      	movs	r1, #1
 8003f50:	5499      	strb	r1, [r3, r2]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2242      	movs	r2, #66	@ 0x42
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2243      	movs	r2, #67	@ 0x43
 8003f5e:	2101      	movs	r1, #1
 8003f60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2244      	movs	r2, #68	@ 0x44
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2245      	movs	r2, #69	@ 0x45
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2246      	movs	r2, #70	@ 0x46
 8003f76:	2101      	movs	r1, #1
 8003f78:	5499      	strb	r1, [r3, r2]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2247      	movs	r2, #71	@ 0x47
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	223d      	movs	r2, #61	@ 0x3d
 8003f86:	2101      	movs	r1, #1
 8003f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b002      	add	sp, #8
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	08003f99 	.word	0x08003f99

08003f98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fa0:	46c0      	nop			@ (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d108      	bne.n	8003fca <HAL_TIM_PWM_Start+0x22>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	223e      	movs	r2, #62	@ 0x3e
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	4193      	sbcs	r3, r2
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e037      	b.n	800403a <HAL_TIM_PWM_Start+0x92>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d108      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0x3a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	223f      	movs	r2, #63	@ 0x3f
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	1e5a      	subs	r2, r3, #1
 8003fdc:	4193      	sbcs	r3, r2
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e02b      	b.n	800403a <HAL_TIM_PWM_Start+0x92>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d108      	bne.n	8003ffa <HAL_TIM_PWM_Start+0x52>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2240      	movs	r2, #64	@ 0x40
 8003fec:	5c9b      	ldrb	r3, [r3, r2]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	1e5a      	subs	r2, r3, #1
 8003ff4:	4193      	sbcs	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e01f      	b.n	800403a <HAL_TIM_PWM_Start+0x92>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	d108      	bne.n	8004012 <HAL_TIM_PWM_Start+0x6a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2241      	movs	r2, #65	@ 0x41
 8004004:	5c9b      	ldrb	r3, [r3, r2]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	1e5a      	subs	r2, r3, #1
 800400c:	4193      	sbcs	r3, r2
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e013      	b.n	800403a <HAL_TIM_PWM_Start+0x92>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d108      	bne.n	800402a <HAL_TIM_PWM_Start+0x82>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2242      	movs	r2, #66	@ 0x42
 800401c:	5c9b      	ldrb	r3, [r3, r2]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	4193      	sbcs	r3, r2
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e007      	b.n	800403a <HAL_TIM_PWM_Start+0x92>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2243      	movs	r2, #67	@ 0x43
 800402e:	5c9b      	ldrb	r3, [r3, r2]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	4193      	sbcs	r3, r2
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e081      	b.n	8004146 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <HAL_TIM_PWM_Start+0xaa>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	223e      	movs	r2, #62	@ 0x3e
 800404c:	2102      	movs	r1, #2
 800404e:	5499      	strb	r1, [r3, r2]
 8004050:	e023      	b.n	800409a <HAL_TIM_PWM_Start+0xf2>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d104      	bne.n	8004062 <HAL_TIM_PWM_Start+0xba>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	223f      	movs	r2, #63	@ 0x3f
 800405c:	2102      	movs	r1, #2
 800405e:	5499      	strb	r1, [r3, r2]
 8004060:	e01b      	b.n	800409a <HAL_TIM_PWM_Start+0xf2>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d104      	bne.n	8004072 <HAL_TIM_PWM_Start+0xca>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2240      	movs	r2, #64	@ 0x40
 800406c:	2102      	movs	r1, #2
 800406e:	5499      	strb	r1, [r3, r2]
 8004070:	e013      	b.n	800409a <HAL_TIM_PWM_Start+0xf2>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d104      	bne.n	8004082 <HAL_TIM_PWM_Start+0xda>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2241      	movs	r2, #65	@ 0x41
 800407c:	2102      	movs	r1, #2
 800407e:	5499      	strb	r1, [r3, r2]
 8004080:	e00b      	b.n	800409a <HAL_TIM_PWM_Start+0xf2>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d104      	bne.n	8004092 <HAL_TIM_PWM_Start+0xea>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2242      	movs	r2, #66	@ 0x42
 800408c:	2102      	movs	r1, #2
 800408e:	5499      	strb	r1, [r3, r2]
 8004090:	e003      	b.n	800409a <HAL_TIM_PWM_Start+0xf2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2243      	movs	r2, #67	@ 0x43
 8004096:	2102      	movs	r1, #2
 8004098:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 ff5e 	bl	8004f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a28      	ldr	r2, [pc, #160]	@ (8004150 <HAL_TIM_PWM_Start+0x1a8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x11e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a27      	ldr	r2, [pc, #156]	@ (8004154 <HAL_TIM_PWM_Start+0x1ac>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x11e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a25      	ldr	r2, [pc, #148]	@ (8004158 <HAL_TIM_PWM_Start+0x1b0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_PWM_Start+0x122>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_TIM_PWM_Start+0x124>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2180      	movs	r1, #128	@ 0x80
 80040dc:	0209      	lsls	r1, r1, #8
 80040de:	430a      	orrs	r2, r1
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004150 <HAL_TIM_PWM_Start+0x1a8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00a      	beq.n	8004102 <HAL_TIM_PWM_Start+0x15a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	05db      	lsls	r3, r3, #23
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d004      	beq.n	8004102 <HAL_TIM_PWM_Start+0x15a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a17      	ldr	r2, [pc, #92]	@ (800415c <HAL_TIM_PWM_Start+0x1b4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d116      	bne.n	8004130 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <HAL_TIM_PWM_Start+0x1b8>)
 800410a:	4013      	ands	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d016      	beq.n	8004142 <HAL_TIM_PWM_Start+0x19a>
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	2380      	movs	r3, #128	@ 0x80
 8004118:	025b      	lsls	r3, r3, #9
 800411a:	429a      	cmp	r2, r3
 800411c:	d011      	beq.n	8004142 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2101      	movs	r1, #1
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412e:	e008      	b.n	8004142 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2101      	movs	r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e000      	b.n	8004144 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004142:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b004      	add	sp, #16
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	40000400 	.word	0x40000400
 8004160:	00010007 	.word	0x00010007

08004164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2202      	movs	r2, #2
 8004180:	4013      	ands	r3, r2
 8004182:	d027      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2202      	movs	r2, #2
 8004188:	4013      	ands	r3, r2
 800418a:	d023      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2203      	movs	r2, #3
 8004192:	4252      	negs	r2, r2
 8004194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2203      	movs	r2, #3
 80041a4:	4013      	ands	r3, r2
 80041a6:	d006      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2294      	movs	r2, #148	@ 0x94
 80041ac:	589b      	ldr	r3, [r3, r2]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	0010      	movs	r0, r2
 80041b2:	4798      	blx	r3
 80041b4:	e00b      	b.n	80041ce <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	229c      	movs	r2, #156	@ 0x9c
 80041ba:	589b      	ldr	r3, [r3, r2]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	0010      	movs	r0, r2
 80041c0:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	22a0      	movs	r2, #160	@ 0xa0
 80041c6:	589b      	ldr	r3, [r3, r2]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	0010      	movs	r0, r2
 80041cc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2204      	movs	r2, #4
 80041d8:	4013      	ands	r3, r2
 80041da:	d028      	beq.n	800422e <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2204      	movs	r2, #4
 80041e0:	4013      	ands	r3, r2
 80041e2:	d024      	beq.n	800422e <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2205      	movs	r2, #5
 80041ea:	4252      	negs	r2, r2
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	23c0      	movs	r3, #192	@ 0xc0
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4013      	ands	r3, r2
 8004200:	d006      	beq.n	8004210 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2294      	movs	r2, #148	@ 0x94
 8004206:	589b      	ldr	r3, [r3, r2]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	0010      	movs	r0, r2
 800420c:	4798      	blx	r3
 800420e:	e00b      	b.n	8004228 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	229c      	movs	r2, #156	@ 0x9c
 8004214:	589b      	ldr	r3, [r3, r2]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	0010      	movs	r0, r2
 800421a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	22a0      	movs	r2, #160	@ 0xa0
 8004220:	589b      	ldr	r3, [r3, r2]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	0010      	movs	r0, r2
 8004226:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2208      	movs	r2, #8
 8004232:	4013      	ands	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2208      	movs	r2, #8
 800423a:	4013      	ands	r3, r2
 800423c:	d023      	beq.n	8004286 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2209      	movs	r2, #9
 8004244:	4252      	negs	r2, r2
 8004246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2204      	movs	r2, #4
 800424c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	2203      	movs	r2, #3
 8004256:	4013      	ands	r3, r2
 8004258:	d006      	beq.n	8004268 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2294      	movs	r2, #148	@ 0x94
 800425e:	589b      	ldr	r3, [r3, r2]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	0010      	movs	r0, r2
 8004264:	4798      	blx	r3
 8004266:	e00b      	b.n	8004280 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	229c      	movs	r2, #156	@ 0x9c
 800426c:	589b      	ldr	r3, [r3, r2]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	0010      	movs	r0, r2
 8004272:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	22a0      	movs	r2, #160	@ 0xa0
 8004278:	589b      	ldr	r3, [r3, r2]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	0010      	movs	r0, r2
 800427e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2210      	movs	r2, #16
 800428a:	4013      	ands	r3, r2
 800428c:	d028      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2210      	movs	r2, #16
 8004292:	4013      	ands	r3, r2
 8004294:	d024      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2211      	movs	r2, #17
 800429c:	4252      	negs	r2, r2
 800429e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2208      	movs	r2, #8
 80042a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	23c0      	movs	r3, #192	@ 0xc0
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4013      	ands	r3, r2
 80042b2:	d006      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2294      	movs	r2, #148	@ 0x94
 80042b8:	589b      	ldr	r3, [r3, r2]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	0010      	movs	r0, r2
 80042be:	4798      	blx	r3
 80042c0:	e00b      	b.n	80042da <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	229c      	movs	r2, #156	@ 0x9c
 80042c6:	589b      	ldr	r3, [r3, r2]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	0010      	movs	r0, r2
 80042cc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	22a0      	movs	r2, #160	@ 0xa0
 80042d2:	589b      	ldr	r3, [r3, r2]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	0010      	movs	r0, r2
 80042d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	4013      	ands	r3, r2
 80042ee:	d00a      	beq.n	8004306 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2202      	movs	r2, #2
 80042f6:	4252      	negs	r2, r2
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2284      	movs	r2, #132	@ 0x84
 80042fe:	589b      	ldr	r3, [r3, r2]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	0010      	movs	r0, r2
 8004304:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2280      	movs	r2, #128	@ 0x80
 800430a:	4013      	ands	r3, r2
 800430c:	d104      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	2380      	movs	r3, #128	@ 0x80
 8004312:	019b      	lsls	r3, r3, #6
 8004314:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004316:	d00d      	beq.n	8004334 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2280      	movs	r2, #128	@ 0x80
 800431c:	4013      	ands	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a22      	ldr	r2, [pc, #136]	@ (80043b0 <HAL_TIM_IRQHandler+0x24c>)
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	22b4      	movs	r2, #180	@ 0xb4
 800432c:	589b      	ldr	r3, [r3, r2]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	0010      	movs	r0, r2
 8004332:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4013      	ands	r3, r2
 800433c:	d00d      	beq.n	800435a <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2280      	movs	r2, #128	@ 0x80
 8004342:	4013      	ands	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <HAL_TIM_IRQHandler+0x250>)
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	22b8      	movs	r2, #184	@ 0xb8
 8004352:	589b      	ldr	r3, [r3, r2]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	0010      	movs	r0, r2
 8004358:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2240      	movs	r2, #64	@ 0x40
 800435e:	4013      	ands	r3, r2
 8004360:	d00e      	beq.n	8004380 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2240      	movs	r2, #64	@ 0x40
 8004366:	4013      	ands	r3, r2
 8004368:	d00a      	beq.n	8004380 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2241      	movs	r2, #65	@ 0x41
 8004370:	4252      	negs	r2, r2
 8004372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	228c      	movs	r2, #140	@ 0x8c
 8004378:	589b      	ldr	r3, [r3, r2]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	0010      	movs	r0, r2
 800437e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2220      	movs	r2, #32
 8004384:	4013      	ands	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	4013      	ands	r3, r2
 800438e:	d00a      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2221      	movs	r2, #33	@ 0x21
 8004396:	4252      	negs	r2, r2
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	22ac      	movs	r2, #172	@ 0xac
 800439e:	589b      	ldr	r3, [r3, r2]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	0010      	movs	r0, r2
 80043a4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b004      	add	sp, #16
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	ffffdf7f 	.word	0xffffdf7f
 80043b4:	fffffeff 	.word	0xfffffeff

080043b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2317      	movs	r3, #23
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	223c      	movs	r2, #60	@ 0x3c
 80043d0:	5c9b      	ldrb	r3, [r3, r2]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_TIM_OC_ConfigChannel+0x22>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e048      	b.n	800446c <HAL_TIM_OC_ConfigChannel+0xb4>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	223c      	movs	r2, #60	@ 0x3c
 80043de:	2101      	movs	r1, #1
 80043e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b14      	cmp	r3, #20
 80043e6:	d835      	bhi.n	8004454 <HAL_TIM_OC_ConfigChannel+0x9c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	4b21      	ldr	r3, [pc, #132]	@ (8004474 <HAL_TIM_OC_ConfigChannel+0xbc>)
 80043ee:	18d3      	adds	r3, r2, r3
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	0011      	movs	r1, r2
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 fb15 	bl	8004a2c <TIM_OC1_SetConfig>
      break;
 8004402:	e02c      	b.n	800445e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f000 fb8d 	bl	8004b2c <TIM_OC2_SetConfig>
      break;
 8004412:	e024      	b.n	800445e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	0011      	movs	r1, r2
 800441c:	0018      	movs	r0, r3
 800441e:	f000 fc03 	bl	8004c28 <TIM_OC3_SetConfig>
      break;
 8004422:	e01c      	b.n	800445e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	0011      	movs	r1, r2
 800442c:	0018      	movs	r0, r3
 800442e:	f000 fc7d 	bl	8004d2c <TIM_OC4_SetConfig>
      break;
 8004432:	e014      	b.n	800445e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f000 fcd9 	bl	8004df4 <TIM_OC5_SetConfig>
      break;
 8004442:	e00c      	b.n	800445e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	0011      	movs	r1, r2
 800444c:	0018      	movs	r0, r3
 800444e:	f000 fd2b 	bl	8004ea8 <TIM_OC6_SetConfig>
      break;
 8004452:	e004      	b.n	800445e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004454:	2317      	movs	r3, #23
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
      break;
 800445c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	223c      	movs	r2, #60	@ 0x3c
 8004462:	2100      	movs	r1, #0
 8004464:	5499      	strb	r1, [r3, r2]

  return status;
 8004466:	2317      	movs	r3, #23
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	781b      	ldrb	r3, [r3, #0]
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b006      	add	sp, #24
 8004472:	bd80      	pop	{r7, pc}
 8004474:	08005a98 	.word	0x08005a98

08004478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004484:	2317      	movs	r3, #23
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	223c      	movs	r2, #60	@ 0x3c
 8004490:	5c9b      	ldrb	r3, [r3, r2]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004496:	2302      	movs	r3, #2
 8004498:	e0e5      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	223c      	movs	r2, #60	@ 0x3c
 800449e:	2101      	movs	r1, #1
 80044a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b14      	cmp	r3, #20
 80044a6:	d900      	bls.n	80044aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80044a8:	e0d1      	b.n	800464e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	009a      	lsls	r2, r3, #2
 80044ae:	4b70      	ldr	r3, [pc, #448]	@ (8004670 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80044b0:	18d3      	adds	r3, r2, r3
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0011      	movs	r1, r2
 80044be:	0018      	movs	r0, r3
 80044c0:	f000 fab4 	bl	8004a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2108      	movs	r1, #8
 80044d0:	430a      	orrs	r2, r1
 80044d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2104      	movs	r1, #4
 80044e0:	438a      	bics	r2, r1
 80044e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6999      	ldr	r1, [r3, #24]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	619a      	str	r2, [r3, #24]
      break;
 80044f6:	e0af      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	0011      	movs	r1, r2
 8004500:	0018      	movs	r0, r3
 8004502:	f000 fb13 	bl	8004b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2180      	movs	r1, #128	@ 0x80
 8004512:	0109      	lsls	r1, r1, #4
 8004514:	430a      	orrs	r2, r1
 8004516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4954      	ldr	r1, [pc, #336]	@ (8004674 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004524:	400a      	ands	r2, r1
 8004526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6999      	ldr	r1, [r3, #24]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	021a      	lsls	r2, r3, #8
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	619a      	str	r2, [r3, #24]
      break;
 800453c:	e08c      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	0011      	movs	r1, r2
 8004546:	0018      	movs	r0, r3
 8004548:	f000 fb6e 	bl	8004c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2108      	movs	r1, #8
 8004558:	430a      	orrs	r2, r1
 800455a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2104      	movs	r1, #4
 8004568:	438a      	bics	r2, r1
 800456a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69d9      	ldr	r1, [r3, #28]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	61da      	str	r2, [r3, #28]
      break;
 800457e:	e06b      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	0011      	movs	r1, r2
 8004588:	0018      	movs	r0, r3
 800458a:	f000 fbcf 	bl	8004d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2180      	movs	r1, #128	@ 0x80
 800459a:	0109      	lsls	r1, r1, #4
 800459c:	430a      	orrs	r2, r1
 800459e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4932      	ldr	r1, [pc, #200]	@ (8004674 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69d9      	ldr	r1, [r3, #28]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	021a      	lsls	r2, r3, #8
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	61da      	str	r2, [r3, #28]
      break;
 80045c4:	e048      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0011      	movs	r1, r2
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 fc10 	bl	8004df4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2108      	movs	r1, #8
 80045e0:	430a      	orrs	r2, r1
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2104      	movs	r1, #4
 80045f0:	438a      	bics	r2, r1
 80045f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004606:	e027      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	0011      	movs	r1, r2
 8004610:	0018      	movs	r0, r3
 8004612:	f000 fc49 	bl	8004ea8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2180      	movs	r1, #128	@ 0x80
 8004622:	0109      	lsls	r1, r1, #4
 8004624:	430a      	orrs	r2, r1
 8004626:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4910      	ldr	r1, [pc, #64]	@ (8004674 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004634:	400a      	ands	r2, r1
 8004636:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800464c:	e004      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800464e:	2317      	movs	r3, #23
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
      break;
 8004656:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	223c      	movs	r2, #60	@ 0x3c
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]

  return status;
 8004660:	2317      	movs	r3, #23
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b006      	add	sp, #24
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	08005aec 	.word	0x08005aec
 8004674:	fffffbff 	.word	0xfffffbff

08004678 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004680:	46c0      	nop			@ (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004690:	46c0      	nop			@ (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b002      	add	sp, #8
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a0:	46c0      	nop			@ (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b002      	add	sp, #8
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b0:	46c0      	nop			@ (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80046c0:	46c0      	nop			@ (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046f0:	46c0      	nop			@ (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b002      	add	sp, #8
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004700:	46c0      	nop			@ (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	b002      	add	sp, #8
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004710:	46c0      	nop			@ (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	230b      	movs	r3, #11
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	1c0a      	adds	r2, r1, #0
 8004728:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2317      	movs	r3, #23
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0ea      	b.n	8004912 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	223d      	movs	r2, #61	@ 0x3d
 8004740:	5c9b      	ldrb	r3, [r3, r2]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d000      	beq.n	800474a <HAL_TIM_RegisterCallback+0x32>
 8004748:	e08e      	b.n	8004868 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800474a:	230b      	movs	r3, #11
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b1b      	cmp	r3, #27
 8004752:	d900      	bls.n	8004756 <HAL_TIM_RegisterCallback+0x3e>
 8004754:	e083      	b.n	800485e <HAL_TIM_RegisterCallback+0x146>
 8004756:	009a      	lsls	r2, r3, #2
 8004758:	4b70      	ldr	r3, [pc, #448]	@ (800491c <HAL_TIM_RegisterCallback+0x204>)
 800475a:	18d3      	adds	r3, r2, r3
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004766:	e0d1      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800476e:	e0cd      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004776:	e0c9      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800477e:	e0c5      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004786:	e0c1      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800478e:	e0bd      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004796:	e0b9      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800479e:	e0b5      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80047a6:	e0b1      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80047ae:	e0ad      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80047b6:	e0a9      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80047be:	e0a5      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80047c6:	e0a1      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2180      	movs	r1, #128	@ 0x80
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	505a      	str	r2, [r3, r1]
        break;
 80047d0:	e09c      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2184      	movs	r1, #132	@ 0x84
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	505a      	str	r2, [r3, r1]
        break;
 80047da:	e097      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2188      	movs	r1, #136	@ 0x88
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	505a      	str	r2, [r3, r1]
        break;
 80047e4:	e092      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	218c      	movs	r1, #140	@ 0x8c
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	505a      	str	r2, [r3, r1]
        break;
 80047ee:	e08d      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2190      	movs	r1, #144	@ 0x90
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	505a      	str	r2, [r3, r1]
        break;
 80047f8:	e088      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2194      	movs	r1, #148	@ 0x94
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	505a      	str	r2, [r3, r1]
        break;
 8004802:	e083      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2198      	movs	r1, #152	@ 0x98
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	505a      	str	r2, [r3, r1]
        break;
 800480c:	e07e      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	219c      	movs	r1, #156	@ 0x9c
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	505a      	str	r2, [r3, r1]
        break;
 8004816:	e079      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	21a0      	movs	r1, #160	@ 0xa0
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	505a      	str	r2, [r3, r1]
        break;
 8004820:	e074      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	21a4      	movs	r1, #164	@ 0xa4
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	505a      	str	r2, [r3, r1]
        break;
 800482a:	e06f      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	21a8      	movs	r1, #168	@ 0xa8
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	505a      	str	r2, [r3, r1]
        break;
 8004834:	e06a      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	21ac      	movs	r1, #172	@ 0xac
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	505a      	str	r2, [r3, r1]
        break;
 800483e:	e065      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	21b0      	movs	r1, #176	@ 0xb0
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	505a      	str	r2, [r3, r1]
        break;
 8004848:	e060      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	21b4      	movs	r1, #180	@ 0xb4
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	505a      	str	r2, [r3, r1]
        break;
 8004852:	e05b      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	21b8      	movs	r1, #184	@ 0xb8
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	505a      	str	r2, [r3, r1]
        break;
 800485c:	e056      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800485e:	2317      	movs	r3, #23
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
        break;
 8004866:	e051      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	223d      	movs	r2, #61	@ 0x3d
 800486c:	5c9b      	ldrb	r3, [r3, r2]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d147      	bne.n	8004904 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 8004874:	230b      	movs	r3, #11
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b0d      	cmp	r3, #13
 800487c:	d83d      	bhi.n	80048fa <HAL_TIM_RegisterCallback+0x1e2>
 800487e:	009a      	lsls	r2, r3, #2
 8004880:	4b27      	ldr	r3, [pc, #156]	@ (8004920 <HAL_TIM_RegisterCallback+0x208>)
 8004882:	18d3      	adds	r3, r2, r3
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800488e:	e03d      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004896:	e039      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800489e:	e035      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80048a6:	e031      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80048ae:	e02d      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80048b6:	e029      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80048be:	e025      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80048c6:	e021      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80048ce:	e01d      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80048d6:	e019      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80048de:	e015      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80048e6:	e011      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80048ee:	e00d      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2180      	movs	r1, #128	@ 0x80
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	505a      	str	r2, [r3, r1]
        break;
 80048f8:	e008      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80048fa:	2317      	movs	r3, #23
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
        break;
 8004902:	e003      	b.n	800490c <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004904:	2317      	movs	r3, #23
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800490c:	2317      	movs	r3, #23
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	781b      	ldrb	r3, [r3, #0]
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b006      	add	sp, #24
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	08005b40 	.word	0x08005b40
 8004920:	08005bb0 	.word	0x08005bb0

08004924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a37      	ldr	r2, [pc, #220]	@ (8004a14 <TIM_Base_SetConfig+0xf0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d008      	beq.n	800494e <TIM_Base_SetConfig+0x2a>
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	2380      	movs	r3, #128	@ 0x80
 8004940:	05db      	lsls	r3, r3, #23
 8004942:	429a      	cmp	r2, r3
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0x2a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a33      	ldr	r2, [pc, #204]	@ (8004a18 <TIM_Base_SetConfig+0xf4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2270      	movs	r2, #112	@ 0x70
 8004952:	4393      	bics	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a2c      	ldr	r2, [pc, #176]	@ (8004a14 <TIM_Base_SetConfig+0xf0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d014      	beq.n	8004992 <TIM_Base_SetConfig+0x6e>
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	05db      	lsls	r3, r3, #23
 800496e:	429a      	cmp	r2, r3
 8004970:	d00f      	beq.n	8004992 <TIM_Base_SetConfig+0x6e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a28      	ldr	r2, [pc, #160]	@ (8004a18 <TIM_Base_SetConfig+0xf4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_Base_SetConfig+0x6e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a27      	ldr	r2, [pc, #156]	@ (8004a1c <TIM_Base_SetConfig+0xf8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_Base_SetConfig+0x6e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a26      	ldr	r2, [pc, #152]	@ (8004a20 <TIM_Base_SetConfig+0xfc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_Base_SetConfig+0x6e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a25      	ldr	r2, [pc, #148]	@ (8004a24 <TIM_Base_SetConfig+0x100>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d108      	bne.n	80049a4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a24      	ldr	r2, [pc, #144]	@ (8004a28 <TIM_Base_SetConfig+0x104>)
 8004996:	4013      	ands	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2280      	movs	r2, #128	@ 0x80
 80049a8:	4393      	bics	r3, r2
 80049aa:	001a      	movs	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a11      	ldr	r2, [pc, #68]	@ (8004a14 <TIM_Base_SetConfig+0xf0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0xbe>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a12      	ldr	r2, [pc, #72]	@ (8004a20 <TIM_Base_SetConfig+0xfc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0xbe>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a11      	ldr	r2, [pc, #68]	@ (8004a24 <TIM_Base_SetConfig+0x100>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d103      	bne.n	80049ea <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d106      	bne.n	8004a0a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2201      	movs	r2, #1
 8004a02:	4393      	bics	r3, r2
 8004a04:	001a      	movs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	611a      	str	r2, [r3, #16]
  }
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b004      	add	sp, #16
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40002000 	.word	0x40002000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800
 8004a28:	fffffcff 	.word	0xfffffcff

08004a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	2201      	movs	r2, #1
 8004a42:	4393      	bics	r3, r2
 8004a44:	001a      	movs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a2e      	ldr	r2, [pc, #184]	@ (8004b14 <TIM_OC1_SetConfig+0xe8>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2203      	movs	r2, #3
 8004a62:	4393      	bics	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2202      	movs	r2, #2
 8004a74:	4393      	bics	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a24      	ldr	r2, [pc, #144]	@ (8004b18 <TIM_OC1_SetConfig+0xec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_OC1_SetConfig+0x6e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a23      	ldr	r2, [pc, #140]	@ (8004b1c <TIM_OC1_SetConfig+0xf0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_OC1_SetConfig+0x6e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a22      	ldr	r2, [pc, #136]	@ (8004b20 <TIM_OC1_SetConfig+0xf4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10c      	bne.n	8004ab4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	4393      	bics	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a18      	ldr	r2, [pc, #96]	@ (8004b18 <TIM_OC1_SetConfig+0xec>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_OC1_SetConfig+0xa0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a17      	ldr	r2, [pc, #92]	@ (8004b1c <TIM_OC1_SetConfig+0xf0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC1_SetConfig+0xa0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a16      	ldr	r2, [pc, #88]	@ (8004b20 <TIM_OC1_SetConfig+0xf4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d111      	bne.n	8004af0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <TIM_OC1_SetConfig+0xf8>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4a14      	ldr	r2, [pc, #80]	@ (8004b28 <TIM_OC1_SetConfig+0xfc>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b006      	add	sp, #24
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	fffeff8f 	.word	0xfffeff8f
 8004b18:	40012c00 	.word	0x40012c00
 8004b1c:	40014400 	.word	0x40014400
 8004b20:	40014800 	.word	0x40014800
 8004b24:	fffffeff 	.word	0xfffffeff
 8004b28:	fffffdff 	.word	0xfffffdff

08004b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	2210      	movs	r2, #16
 8004b42:	4393      	bics	r3, r2
 8004b44:	001a      	movs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4a2c      	ldr	r2, [pc, #176]	@ (8004c0c <TIM_OC2_SetConfig+0xe0>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a2b      	ldr	r2, [pc, #172]	@ (8004c10 <TIM_OC2_SetConfig+0xe4>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2220      	movs	r2, #32
 8004b76:	4393      	bics	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a22      	ldr	r2, [pc, #136]	@ (8004c14 <TIM_OC2_SetConfig+0xe8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10d      	bne.n	8004baa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2280      	movs	r2, #128	@ 0x80
 8004b92:	4393      	bics	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2240      	movs	r2, #64	@ 0x40
 8004ba6:	4393      	bics	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a19      	ldr	r2, [pc, #100]	@ (8004c14 <TIM_OC2_SetConfig+0xe8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <TIM_OC2_SetConfig+0x96>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a18      	ldr	r2, [pc, #96]	@ (8004c18 <TIM_OC2_SetConfig+0xec>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC2_SetConfig+0x96>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a17      	ldr	r2, [pc, #92]	@ (8004c1c <TIM_OC2_SetConfig+0xf0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d113      	bne.n	8004bea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4a16      	ldr	r2, [pc, #88]	@ (8004c20 <TIM_OC2_SetConfig+0xf4>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4a15      	ldr	r2, [pc, #84]	@ (8004c24 <TIM_OC2_SetConfig+0xf8>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	621a      	str	r2, [r3, #32]
}
 8004c04:	46c0      	nop			@ (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b006      	add	sp, #24
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	feff8fff 	.word	0xfeff8fff
 8004c10:	fffffcff 	.word	0xfffffcff
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800
 8004c20:	fffffbff 	.word	0xfffffbff
 8004c24:	fffff7ff 	.word	0xfffff7ff

08004c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	4a31      	ldr	r2, [pc, #196]	@ (8004d04 <TIM_OC3_SetConfig+0xdc>)
 8004c3e:	401a      	ands	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a2d      	ldr	r2, [pc, #180]	@ (8004d08 <TIM_OC3_SetConfig+0xe0>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	4393      	bics	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4a27      	ldr	r2, [pc, #156]	@ (8004d0c <TIM_OC3_SetConfig+0xe4>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a23      	ldr	r2, [pc, #140]	@ (8004d10 <TIM_OC3_SetConfig+0xe8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10d      	bne.n	8004ca2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4a22      	ldr	r2, [pc, #136]	@ (8004d14 <TIM_OC3_SetConfig+0xec>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004d18 <TIM_OC3_SetConfig+0xf0>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d10 <TIM_OC3_SetConfig+0xe8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_OC3_SetConfig+0x92>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1b      	ldr	r2, [pc, #108]	@ (8004d1c <TIM_OC3_SetConfig+0xf4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_OC3_SetConfig+0x92>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d20 <TIM_OC3_SetConfig+0xf8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d113      	bne.n	8004ce2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	@ (8004d24 <TIM_OC3_SetConfig+0xfc>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	@ (8004d28 <TIM_OC3_SetConfig+0x100>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	46c0      	nop			@ (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b006      	add	sp, #24
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	fffffeff 	.word	0xfffffeff
 8004d08:	fffeff8f 	.word	0xfffeff8f
 8004d0c:	fffffdff 	.word	0xfffffdff
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	fffff7ff 	.word	0xfffff7ff
 8004d18:	fffffbff 	.word	0xfffffbff
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800
 8004d24:	ffffefff 	.word	0xffffefff
 8004d28:	ffffdfff 	.word	0xffffdfff

08004d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <TIM_OC4_SetConfig+0xa8>)
 8004d42:	401a      	ands	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a20      	ldr	r2, [pc, #128]	@ (8004dd8 <TIM_OC4_SetConfig+0xac>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ddc <TIM_OC4_SetConfig+0xb0>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	@ (8004de0 <TIM_OC4_SetConfig+0xb4>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	031b      	lsls	r3, r3, #12
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a17      	ldr	r2, [pc, #92]	@ (8004de4 <TIM_OC4_SetConfig+0xb8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_OC4_SetConfig+0x70>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a16      	ldr	r2, [pc, #88]	@ (8004de8 <TIM_OC4_SetConfig+0xbc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC4_SetConfig+0x70>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a15      	ldr	r2, [pc, #84]	@ (8004dec <TIM_OC4_SetConfig+0xc0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d109      	bne.n	8004db0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4a14      	ldr	r2, [pc, #80]	@ (8004df0 <TIM_OC4_SetConfig+0xc4>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	019b      	lsls	r3, r3, #6
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b006      	add	sp, #24
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	ffffefff 	.word	0xffffefff
 8004dd8:	feff8fff 	.word	0xfeff8fff
 8004ddc:	fffffcff 	.word	0xfffffcff
 8004de0:	ffffdfff 	.word	0xffffdfff
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800
 8004df0:	ffffbfff 	.word	0xffffbfff

08004df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4a21      	ldr	r2, [pc, #132]	@ (8004e90 <TIM_OC5_SetConfig+0x9c>)
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004e94 <TIM_OC5_SetConfig+0xa0>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4a19      	ldr	r2, [pc, #100]	@ (8004e98 <TIM_OC5_SetConfig+0xa4>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <TIM_OC5_SetConfig+0xa8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_OC5_SetConfig+0x66>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <TIM_OC5_SetConfig+0xac>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC5_SetConfig+0x66>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <TIM_OC5_SetConfig+0xb0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d109      	bne.n	8004e6e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e90 <TIM_OC5_SetConfig+0x9c>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	46c0      	nop			@ (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b006      	add	sp, #24
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	fffeffff 	.word	0xfffeffff
 8004e94:	fffeff8f 	.word	0xfffeff8f
 8004e98:	fffdffff 	.word	0xfffdffff
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	@ (8004f48 <TIM_OC6_SetConfig+0xa0>)
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f4c <TIM_OC6_SetConfig+0xa4>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f50 <TIM_OC6_SetConfig+0xa8>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	051b      	lsls	r3, r3, #20
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a16      	ldr	r2, [pc, #88]	@ (8004f54 <TIM_OC6_SetConfig+0xac>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d007      	beq.n	8004f10 <TIM_OC6_SetConfig+0x68>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a15      	ldr	r2, [pc, #84]	@ (8004f58 <TIM_OC6_SetConfig+0xb0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_OC6_SetConfig+0x68>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a14      	ldr	r2, [pc, #80]	@ (8004f5c <TIM_OC6_SetConfig+0xb4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d109      	bne.n	8004f24 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4a13      	ldr	r2, [pc, #76]	@ (8004f60 <TIM_OC6_SetConfig+0xb8>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b006      	add	sp, #24
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	ffefffff 	.word	0xffefffff
 8004f4c:	feff8fff 	.word	0xfeff8fff
 8004f50:	ffdfffff 	.word	0xffdfffff
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800
 8004f60:	fffbffff 	.word	0xfffbffff

08004f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	221f      	movs	r2, #31
 8004f74:	4013      	ands	r3, r2
 8004f76:	2201      	movs	r2, #1
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	0013      	movs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	43d2      	mvns	r2, r2
 8004f86:	401a      	ands	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	211f      	movs	r1, #31
 8004f94:	400b      	ands	r3, r1
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4099      	lsls	r1, r3
 8004f9a:	000b      	movs	r3, r1
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b006      	add	sp, #24
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2184      	movs	r1, #132	@ 0x84
 8004fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800502c <TIM_ResetCallback+0x80>)
 8004fba:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2188      	movs	r1, #136	@ 0x88
 8004fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005030 <TIM_ResetCallback+0x84>)
 8004fc2:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	218c      	movs	r1, #140	@ 0x8c
 8004fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005034 <TIM_ResetCallback+0x88>)
 8004fca:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2190      	movs	r1, #144	@ 0x90
 8004fd0:	4a19      	ldr	r2, [pc, #100]	@ (8005038 <TIM_ResetCallback+0x8c>)
 8004fd2:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2194      	movs	r1, #148	@ 0x94
 8004fd8:	4a18      	ldr	r2, [pc, #96]	@ (800503c <TIM_ResetCallback+0x90>)
 8004fda:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2198      	movs	r1, #152	@ 0x98
 8004fe0:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <TIM_ResetCallback+0x94>)
 8004fe2:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	219c      	movs	r1, #156	@ 0x9c
 8004fe8:	4a16      	ldr	r2, [pc, #88]	@ (8005044 <TIM_ResetCallback+0x98>)
 8004fea:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	21a0      	movs	r1, #160	@ 0xa0
 8004ff0:	4a15      	ldr	r2, [pc, #84]	@ (8005048 <TIM_ResetCallback+0x9c>)
 8004ff2:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	21a4      	movs	r1, #164	@ 0xa4
 8004ff8:	4a14      	ldr	r2, [pc, #80]	@ (800504c <TIM_ResetCallback+0xa0>)
 8004ffa:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	21a8      	movs	r1, #168	@ 0xa8
 8005000:	4a13      	ldr	r2, [pc, #76]	@ (8005050 <TIM_ResetCallback+0xa4>)
 8005002:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	21ac      	movs	r1, #172	@ 0xac
 8005008:	4a12      	ldr	r2, [pc, #72]	@ (8005054 <TIM_ResetCallback+0xa8>)
 800500a:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	21b0      	movs	r1, #176	@ 0xb0
 8005010:	4a11      	ldr	r2, [pc, #68]	@ (8005058 <TIM_ResetCallback+0xac>)
 8005012:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	21b4      	movs	r1, #180	@ 0xb4
 8005018:	4a10      	ldr	r2, [pc, #64]	@ (800505c <TIM_ResetCallback+0xb0>)
 800501a:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	21b8      	movs	r1, #184	@ 0xb8
 8005020:	4a0f      	ldr	r2, [pc, #60]	@ (8005060 <TIM_ResetCallback+0xb4>)
 8005022:	505a      	str	r2, [r3, r1]
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}
 800502c:	08004679 	.word	0x08004679
 8005030:	08004689 	.word	0x08004689
 8005034:	080046e9 	.word	0x080046e9
 8005038:	080046f9 	.word	0x080046f9
 800503c:	080046a9 	.word	0x080046a9
 8005040:	080046b9 	.word	0x080046b9
 8005044:	08004699 	.word	0x08004699
 8005048:	080046c9 	.word	0x080046c9
 800504c:	080046d9 	.word	0x080046d9
 8005050:	08004709 	.word	0x08004709
 8005054:	0800519d 	.word	0x0800519d
 8005058:	080051ad 	.word	0x080051ad
 800505c:	080051bd 	.word	0x080051bd
 8005060:	080051cd 	.word	0x080051cd

08005064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	223c      	movs	r2, #60	@ 0x3c
 8005076:	5c9b      	ldrb	r3, [r3, r2]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800507c:	2302      	movs	r3, #2
 800507e:	e06f      	b.n	8005160 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	223c      	movs	r2, #60	@ 0x3c
 8005084:	2101      	movs	r1, #1
 8005086:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	22ff      	movs	r2, #255	@ 0xff
 800508c:	4393      	bics	r3, r2
 800508e:	001a      	movs	r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a33      	ldr	r2, [pc, #204]	@ (8005168 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800509c:	401a      	ands	r2, r3
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4a30      	ldr	r2, [pc, #192]	@ (800516c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80050aa:	401a      	ands	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005170 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80050b8:	401a      	ands	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005174 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80050c6:	401a      	ands	r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a29      	ldr	r2, [pc, #164]	@ (8005178 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80050d4:	401a      	ands	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a26      	ldr	r2, [pc, #152]	@ (800517c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80050e2:	401a      	ands	r2, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a24      	ldr	r2, [pc, #144]	@ (8005180 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80050f0:	401a      	ands	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	041b      	lsls	r3, r3, #16
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a21      	ldr	r2, [pc, #132]	@ (8005184 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005100:	401a      	ands	r2, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d11c      	bne.n	800514e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a1d      	ldr	r2, [pc, #116]	@ (800518c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005118:	401a      	ands	r2, r3
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	051b      	lsls	r3, r3, #20
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a1a      	ldr	r2, [pc, #104]	@ (8005190 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005128:	401a      	ands	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005136:	401a      	ands	r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005144:	401a      	ands	r2, r3
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	223c      	movs	r2, #60	@ 0x3c
 800515a:	2100      	movs	r1, #0
 800515c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b004      	add	sp, #16
 8005166:	bd80      	pop	{r7, pc}
 8005168:	fffffcff 	.word	0xfffffcff
 800516c:	fffffbff 	.word	0xfffffbff
 8005170:	fffff7ff 	.word	0xfffff7ff
 8005174:	ffffefff 	.word	0xffffefff
 8005178:	ffffdfff 	.word	0xffffdfff
 800517c:	ffffbfff 	.word	0xffffbfff
 8005180:	fff0ffff 	.word	0xfff0ffff
 8005184:	efffffff 	.word	0xefffffff
 8005188:	40012c00 	.word	0x40012c00
 800518c:	ff0fffff 	.word	0xff0fffff
 8005190:	feffffff 	.word	0xfeffffff
 8005194:	fdffffff 	.word	0xfdffffff
 8005198:	dfffffff 	.word	0xdfffffff

0800519c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051a4:	46c0      	nop			@ (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80051b4:	46c0      	nop			@ (mov r8, r8)
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b002      	add	sp, #8
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051d4:	46c0      	nop			@ (mov r8, r8)
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b002      	add	sp, #8
 80051da:	bd80      	pop	{r7, pc}

080051dc <memset>:
 80051dc:	0003      	movs	r3, r0
 80051de:	1882      	adds	r2, r0, r2
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memset+0xa>
 80051e4:	4770      	bx	lr
 80051e6:	7019      	strb	r1, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	e7f9      	b.n	80051e0 <memset+0x4>

080051ec <__libc_init_array>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	2600      	movs	r6, #0
 80051f0:	4c0c      	ldr	r4, [pc, #48]	@ (8005224 <__libc_init_array+0x38>)
 80051f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005228 <__libc_init_array+0x3c>)
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	42a6      	cmp	r6, r4
 80051fa:	d109      	bne.n	8005210 <__libc_init_array+0x24>
 80051fc:	2600      	movs	r6, #0
 80051fe:	f000 f819 	bl	8005234 <_init>
 8005202:	4c0a      	ldr	r4, [pc, #40]	@ (800522c <__libc_init_array+0x40>)
 8005204:	4d0a      	ldr	r5, [pc, #40]	@ (8005230 <__libc_init_array+0x44>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	42a6      	cmp	r6, r4
 800520c:	d105      	bne.n	800521a <__libc_init_array+0x2e>
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	00b3      	lsls	r3, r6, #2
 8005212:	58eb      	ldr	r3, [r5, r3]
 8005214:	4798      	blx	r3
 8005216:	3601      	adds	r6, #1
 8005218:	e7ee      	b.n	80051f8 <__libc_init_array+0xc>
 800521a:	00b3      	lsls	r3, r6, #2
 800521c:	58eb      	ldr	r3, [r5, r3]
 800521e:	4798      	blx	r3
 8005220:	3601      	adds	r6, #1
 8005222:	e7f2      	b.n	800520a <__libc_init_array+0x1e>
 8005224:	08005be8 	.word	0x08005be8
 8005228:	08005be8 	.word	0x08005be8
 800522c:	08005bec 	.word	0x08005bec
 8005230:	08005be8 	.word	0x08005be8

08005234 <_init>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr

08005240 <_fini>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr
