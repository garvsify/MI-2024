
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d78  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08005e34  08005e34  00006e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006244  08006244  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006244  08006244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800624c  0800624c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800624c  0800624c  0000724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006250  08006250  00007250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006254  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000000c  08006260  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006260  00008404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f67  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029aa  00000000  00000000  0001cf9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7e  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017861  00000000  00000000  000217fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014686  00000000  00000000  0003905f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a7c8  00000000  00000000  0004d6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7ead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e88  00000000  00000000  000e7ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ebd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e1c 	.word	0x08005e1c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005e1c 	.word	0x08005e1c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
UART_HandleTypeDef huart2;


//FUNCTIONS
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2410      	movs	r4, #16
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2338      	movs	r3, #56	@ 0x38
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f005 fcb3 	bl	8005dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f005 fcac 	bl	8005dc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f002 fdfb 	bl	800306c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2240      	movs	r2, #64	@ 0x40
 8000490:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2208      	movs	r2, #8
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22c0      	movs	r2, #192	@ 0xc0
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0592      	lsls	r2, r2, #22
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 fe1d 	bl	8003104 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ce:	f000 fb27 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 f922 	bl	8003738 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004f8:	f000 fb12 	bl	8000b20 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f005 fc56 	bl	8005dc4 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b4a      	ldr	r3, [pc, #296]	@ (8000644 <MX_ADC1_Init+0x140>)
 800051a:	4a4b      	ldr	r2, [pc, #300]	@ (8000648 <MX_ADC1_Init+0x144>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b47      	ldr	r3, [pc, #284]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <MX_ADC1_Init+0x140>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000532:	4b44      	ldr	r3, [pc, #272]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0392      	lsls	r2, r2, #14
 8000538:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_ADC1_Init+0x140>)
 800053c:	2208      	movs	r2, #8
 800053e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000540:	4b40      	ldr	r3, [pc, #256]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000548:	2200      	movs	r2, #0
 800054a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054c:	4b3d      	ldr	r3, [pc, #244]	@ (8000644 <MX_ADC1_Init+0x140>)
 800054e:	2200      	movs	r2, #0
 8000550:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000552:	4b3c      	ldr	r3, [pc, #240]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000554:	2204      	movs	r2, #4
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <MX_ADC1_Init+0x140>)
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000560:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056c:	4b35      	ldr	r3, [pc, #212]	@ (8000644 <MX_ADC1_Init+0x140>)
 800056e:	222c      	movs	r2, #44	@ 0x2c
 8000570:	2100      	movs	r1, #0
 8000572:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000574:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800057a:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <MX_ADC1_Init+0x140>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000580:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000586:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000588:	223c      	movs	r2, #60	@ 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058e:	4b2d      	ldr	r3, [pc, #180]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 f928 	bl	80017ec <HAL_ADC_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 fabe 	bl	8000b20 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fc99 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005c6:	f000 faab 	bl	8000b20 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ADC1_Init+0x148>)
 80005ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2204      	movs	r2, #4
 80005d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fc86 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80005ec:	f000 fa98 	bl	8000b20 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0x14c>)
 80005f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2208      	movs	r2, #8
 80005fa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fc73 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000612:	f000 fa85 	bl	8000b20 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <MX_ADC1_Init+0x150>)
 800061a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	220c      	movs	r2, #12
 8000620:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_ADC1_Init+0x140>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fc60 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000638:	f000 fa72 	bl	8000b20 <Error_Handler>
  }
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40012400 	.word	0x40012400
 800064c:	04000002 	.word	0x04000002
 8000650:	10000010 	.word	0x10000010
 8000654:	14000020 	.word	0x14000020

08000658 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	231c      	movs	r3, #28
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f005 fbac 	bl	8005dc4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <MX_TIM14_Init+0x9c>)
 8000670:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <MX_TIM14_Init+0xa0>)
 8000682:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000694:	0018      	movs	r0, r3
 8000696:	f003 f9f9 	bl	8003a8c <HAL_TIM_Base_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fa3f 	bl	8000b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 fd03 	bl	80040b0 <HAL_TIM_PWM_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80006ae:	f000 fa37 	bl	8000b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2260      	movs	r2, #96	@ 0x60
 80006b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 100;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2264      	movs	r2, #100	@ 0x64
 80006bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ca:	1d39      	adds	r1, r7, #4
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f003 ffc3 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80006da:	f000 fa21 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80006de:	4b04      	ldr	r3, [pc, #16]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fc75 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b008      	add	sp, #32
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	2000010c 	.word	0x2000010c
 80006f4:	40002000 	.word	0x40002000
 80006f8:	000003ff 	.word	0x000003ff

080006fc <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	2334      	movs	r3, #52	@ 0x34
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	231c      	movs	r3, #28
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f005 fb59 	bl	8005dc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2334      	movs	r3, #52	@ 0x34
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f005 fb52 	bl	8005dc4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000720:	4b3a      	ldr	r3, [pc, #232]	@ (800080c <MX_TIM16_Init+0x110>)
 8000722:	4a3b      	ldr	r2, [pc, #236]	@ (8000810 <MX_TIM16_Init+0x114>)
 8000724:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000726:	4b39      	ldr	r3, [pc, #228]	@ (800080c <MX_TIM16_Init+0x110>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b37      	ldr	r3, [pc, #220]	@ (800080c <MX_TIM16_Init+0x110>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000732:	4b36      	ldr	r3, [pc, #216]	@ (800080c <MX_TIM16_Init+0x110>)
 8000734:	22ff      	movs	r2, #255	@ 0xff
 8000736:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000738:	4b34      	ldr	r3, [pc, #208]	@ (800080c <MX_TIM16_Init+0x110>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000740:	4b32      	ldr	r3, [pc, #200]	@ (800080c <MX_TIM16_Init+0x110>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000746:	4b31      	ldr	r3, [pc, #196]	@ (800080c <MX_TIM16_Init+0x110>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800074c:	4b2f      	ldr	r3, [pc, #188]	@ (800080c <MX_TIM16_Init+0x110>)
 800074e:	0018      	movs	r0, r3
 8000750:	f003 f99c 	bl	8003a8c <HAL_TIM_Base_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f9e2 	bl	8000b20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800075c:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_TIM16_Init+0x110>)
 800075e:	0018      	movs	r0, r3
 8000760:	f003 fa46 	bl	8003bf0 <HAL_TIM_OC_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f9da 	bl	8000b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800076c:	2134      	movs	r1, #52	@ 0x34
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	22ff      	movs	r2, #255	@ 0xff
 8000778:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1879      	adds	r1, r7, r1
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_TIM16_Init+0x110>)
 800079c:	2200      	movs	r2, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f003 fefc 	bl	800459c <HAL_TIM_OC_ConfigChannel>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80007a8:	f000 f9ba 	bl	8000b20 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_TIM16_Init+0x110>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_TIM16_Init+0x110>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2108      	movs	r1, #8
 80007b8:	430a      	orrs	r2, r1
 80007ba:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007da:	003b      	movs	r3, r7
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007ee:	003a      	movs	r2, r7
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_TIM16_Init+0x110>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f004 fd27 	bl	8005248 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80007fe:	f000 f98f 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b014      	add	sp, #80	@ 0x50
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	200001c8 	.word	0x200001c8
 8000810:	40014400 	.word	0x40014400

08000814 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	2334      	movs	r3, #52	@ 0x34
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	231c      	movs	r3, #28
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f005 facd 	bl	8005dc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2334      	movs	r3, #52	@ 0x34
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f005 fac6 	bl	8005dc4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000838:	4b3a      	ldr	r3, [pc, #232]	@ (8000924 <MX_TIM17_Init+0x110>)
 800083a:	4a3b      	ldr	r2, [pc, #236]	@ (8000928 <MX_TIM17_Init+0x114>)
 800083c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800083e:	4b39      	ldr	r3, [pc, #228]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800084a:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <MX_TIM17_Init+0x110>)
 800084c:	4a37      	ldr	r2, [pc, #220]	@ (800092c <MX_TIM17_Init+0x118>)
 800084e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000850:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	0052      	lsls	r2, r2, #1
 8000856:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000858:	4b32      	ldr	r3, [pc, #200]	@ (8000924 <MX_TIM17_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000864:	4b2f      	ldr	r3, [pc, #188]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000866:	0018      	movs	r0, r3
 8000868:	f003 f910 	bl	8003a8c <HAL_TIM_Base_Init>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000870:	f000 f956 	bl	8000b20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000874:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000876:	0018      	movs	r0, r3
 8000878:	f003 f9ba 	bl	8003bf0 <HAL_TIM_OC_Init>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f94e 	bl	8000b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000884:	2134      	movs	r1, #52	@ 0x34
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 65535;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	4a27      	ldr	r2, [pc, #156]	@ (800092c <MX_TIM17_Init+0x118>)
 8000890:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b0:	1879      	adds	r1, r7, r1
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f003 fe70 	bl	800459c <HAL_TIM_OC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 80008c0:	f000 f92e 	bl	8000b20 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	699a      	ldr	r2, [r3, #24]
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2108      	movs	r1, #8
 80008d0:	430a      	orrs	r2, r1
 80008d2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d4:	003b      	movs	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008da:	003b      	movs	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e0:	003b      	movs	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008e6:	003b      	movs	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ec:	003b      	movs	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f2:	003b      	movs	r3, r7
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0192      	lsls	r2, r2, #6
 80008f8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000900:	003b      	movs	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000906:	003a      	movs	r2, r7
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_TIM17_Init+0x110>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f004 fc9b 	bl	8005248 <HAL_TIMEx_ConfigBreakDeadTime>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000916:	f000 f903 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b014      	add	sp, #80	@ 0x50
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	20000284 	.word	0x20000284
 8000928:	40014800 	.word	0x40014800
 800092c:	0000ffff 	.word	0x0000ffff

08000930 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000936:	4a17      	ldr	r2, [pc, #92]	@ (8000994 <MX_USART2_UART_Init+0x64>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800093c:	22e1      	movs	r2, #225	@ 0xe1
 800093e:	0252      	lsls	r2, r2, #9
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <MX_USART2_UART_Init+0x60>)
 800097a:	0018      	movs	r0, r3
 800097c:	f004 fd20 	bl	80053c0 <HAL_UART_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f8cc 	bl	8000b20 <Error_Handler>
  }
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	20000340 	.word	0x20000340
 8000994:	40004400 	.word	0x40004400

08000998 <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_DMA_Init+0x48>)
 80009a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_DMA_Init+0x48>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <MX_DMA_Init+0x48>)
 80009ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2009      	movs	r0, #9
 80009bc:	f001 feee 	bl	800279c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009c0:	2009      	movs	r0, #9
 80009c2:	f001 ff00 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */ //- i think to do with scan mode adc
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	200b      	movs	r0, #11
 80009cc:	f001 fee6 	bl	800279c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 80009d0:	200b      	movs	r0, #11
 80009d2:	f001 fef8 	bl	80027c6 <HAL_NVIC_EnableIRQ>

}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b089      	sub	sp, #36	@ 0x24
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	240c      	movs	r4, #12
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	0018      	movs	r0, r3
 80009f0:	2314      	movs	r3, #20
 80009f2:	001a      	movs	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f005 f9e5 	bl	8005dc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b46      	ldr	r3, [pc, #280]	@ (8000b14 <MX_GPIO_Init+0x130>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fe:	4b45      	ldr	r3, [pc, #276]	@ (8000b14 <MX_GPIO_Init+0x130>)
 8000a00:	2104      	movs	r1, #4
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a06:	4b43      	ldr	r3, [pc, #268]	@ (8000b14 <MX_GPIO_Init+0x130>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	4b40      	ldr	r3, [pc, #256]	@ (8000b14 <MX_GPIO_Init+0x130>)
 8000a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a16:	4b3f      	ldr	r3, [pc, #252]	@ (8000b14 <MX_GPIO_Init+0x130>)
 8000a18:	2120      	movs	r1, #32
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b14 <MX_GPIO_Init+0x130>)
 8000a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a22:	2220      	movs	r2, #32
 8000a24:	4013      	ands	r3, r2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b14 <MX_GPIO_Init+0x130>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2e:	4b39      	ldr	r3, [pc, #228]	@ (8000b14 <MX_GPIO_Init+0x130>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a36:	4b37      	ldr	r3, [pc, #220]	@ (8000b14 <MX_GPIO_Init+0x130>)
 8000a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a42:	4b35      	ldr	r3, [pc, #212]	@ (8000b18 <MX_GPIO_Init+0x134>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	@ 0x40
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 faf1 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2204      	movs	r2, #4
 8000a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2288      	movs	r2, #136	@ 0x88
 8000a58:	0352      	lsls	r2, r2, #13
 8000a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	4a2d      	ldr	r2, [pc, #180]	@ (8000b1c <MX_GPIO_Init+0x138>)
 8000a66:	0019      	movs	r1, r3
 8000a68:	0010      	movs	r0, r2
 8000a6a:	f002 f97d 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */ // - on-board green LED
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2240      	movs	r2, #64	@ 0x40
 8000a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2201      	movs	r2, #1
 8000a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	4a25      	ldr	r2, [pc, #148]	@ (8000b18 <MX_GPIO_Init+0x134>)
 8000a84:	0019      	movs	r1, r3
 8000a86:	0010      	movs	r0, r2
 8000a88:	f002 f96e 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH0_Pin */
  GPIO_InitStruct.Pin = ADC_CH0_Pin;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2203      	movs	r2, #3
 8000a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH0_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	193a      	adds	r2, r7, r4
 8000aa0:	23a0      	movs	r3, #160	@ 0xa0
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 f95e 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH1_Pin */
  GPIO_InitStruct.Pin = ADC_CH1_Pin;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2202      	movs	r2, #2
 8000ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000abe:	193a      	adds	r2, r7, r4
 8000ac0:	23a0      	movs	r3, #160	@ 0xa0
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f002 f94e 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH4_Pin */
  GPIO_InitStruct.Pin = ADC_CH4_Pin;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2210      	movs	r2, #16
 8000ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH4_GPIO_Port, &GPIO_InitStruct);
 8000ade:	193a      	adds	r2, r7, r4
 8000ae0:	23a0      	movs	r3, #160	@ 0xa0
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 f93e 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH5_Pin */
  GPIO_InitStruct.Pin = ADC_CH5_Pin;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2220      	movs	r2, #32
 8000af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2203      	movs	r2, #3
 8000af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH5_GPIO_Port, &GPIO_InitStruct);
 8000afe:	193a      	adds	r2, r7, r4
 8000b00:	23a0      	movs	r3, #160	@ 0xa0
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 f92e 	bl	8002d68 <HAL_GPIO_Init>
  /*Configure GPIO pin : TIM14_CH1_Pin */
  /*GPIO_InitStruct.Pin = TIM14_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TIM14_CH1_GPIO_Port, &GPIO_InitStruct);*/
}
 8000b0c:	46c0      	nop			@ (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b009      	add	sp, #36	@ 0x24
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	50000800 	.word	0x50000800
 8000b1c:	50001400 	.word	0x50001400

08000b20 <Error_Handler>:

void Error_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <System_Init>:
  {

  }
}

void System_Init(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b30:	f000 fc6c 	bl	800140c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000b34:	f7ff fc88 	bl	8000448 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b38:	f7ff ff54 	bl	80009e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b3c:	f7ff ff2c 	bl	8000998 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000b40:	f7ff fef6 	bl	8000930 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000b44:	f7ff fcde 	bl	8000504 <MX_ADC1_Init>
	MX_TIM14_Init();
 8000b48:	f7ff fd86 	bl	8000658 <MX_TIM14_Init>
	MX_TIM16_Init();
 8000b4c:	f7ff fdd6 	bl	80006fc <MX_TIM16_Init>
	MX_TIM17_Init();
 8000b50:	f7ff fe60 	bl	8000814 <MX_TIM17_Init>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM16_callback);
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <System_Init+0x54>)
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <System_Init+0x58>)
 8000b58:	2114      	movs	r1, #20
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f003 fece 	bl	80048fc <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM16 (adc trig.) to the callback function in TIMx_callback.c for TIM17.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8000b60:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <System_Init+0x5c>)
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <System_Init+0x60>)
 8000b64:	2114      	movs	r1, #20
 8000b66:	0018      	movs	r0, r3
 8000b68:	f003 fec8 	bl	80048fc <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8000b6c:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <System_Init+0x64>)
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <System_Init+0x68>)
 8000b70:	2100      	movs	r1, #0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 f812 	bl	8001b9c <HAL_ADC_RegisterCallback>
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	08000b99 	.word	0x08000b99
 8000b84:	200001c8 	.word	0x200001c8
 8000b88:	08000ca9 	.word	0x08000ca9
 8000b8c:	20000284 	.word	0x20000284
 8000b90:	08000ce1 	.word	0x08000ce1
 8000b94:	20000028 	.word	0x20000028

08000b98 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim16, (uint16_t)TIM16_final_start_value); //this line must go here, or at least very near the beginning!
 8000ba0:	4b37      	ldr	r3, [pc, #220]	@ (8000c80 <TIM16_callback+0xe8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b37      	ldr	r3, [pc, #220]	@ (8000c84 <TIM16_callback+0xec>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24

	//interrupt flag is already cleared by stm32g0xx_it.c

	if(current_waveshape == TRIANGLE_MODE){
 8000bac:	4b36      	ldr	r3, [pc, #216]	@ (8000c88 <TIM16_callback+0xf0>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d109      	bne.n	8000bca <TIM16_callback+0x32>
		duty = tri_table_one_quadrant[current_one_quadrant_index];
 8000bb6:	4b35      	ldr	r3, [pc, #212]	@ (8000c8c <TIM16_callback+0xf4>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	4b34      	ldr	r3, [pc, #208]	@ (8000c90 <TIM16_callback+0xf8>)
 8000bc0:	0052      	lsls	r2, r2, #1
 8000bc2:	5ad2      	ldrh	r2, [r2, r3]
 8000bc4:	4b33      	ldr	r3, [pc, #204]	@ (8000c94 <TIM16_callback+0xfc>)
 8000bc6:	801a      	strh	r2, [r3, #0]
 8000bc8:	e016      	b.n	8000bf8 <TIM16_callback+0x60>
	}
	else if(current_waveshape == SINE_MODE){
 8000bca:	4b2f      	ldr	r3, [pc, #188]	@ (8000c88 <TIM16_callback+0xf0>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d109      	bne.n	8000be8 <TIM16_callback+0x50>
		duty = sine_table_one_quadrant[current_one_quadrant_index];
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <TIM16_callback+0xf4>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	001a      	movs	r2, r3
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <TIM16_callback+0x100>)
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	5ad2      	ldrh	r2, [r2, r3]
 8000be2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <TIM16_callback+0xfc>)
 8000be4:	801a      	strh	r2, [r3, #0]
 8000be6:	e007      	b.n	8000bf8 <TIM16_callback+0x60>
	}
	else if(current_waveshape == SQUARE_MODE){
 8000be8:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <TIM16_callback+0xf0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d102      	bne.n	8000bf8 <TIM16_callback+0x60>
		duty = 1023;
 8000bf2:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <TIM16_callback+0xfc>)
 8000bf4:	4a29      	ldr	r2, [pc, #164]	@ (8000c9c <TIM16_callback+0x104>)
 8000bf6:	801a      	strh	r2, [r3, #0]
	}
	if(current_one_quadrant_index == MAX_QUADRANT_INDEX){
 8000bf8:	4b24      	ldr	r3, [pc, #144]	@ (8000c8c <TIM16_callback+0xf4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b80      	cmp	r3, #128	@ 0x80
 8000c00:	d103      	bne.n	8000c0a <TIM16_callback+0x72>
		current_quadrant = SECOND_QUADRANT;
 8000c02:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <TIM16_callback+0x108>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e00f      	b.n	8000c2a <TIM16_callback+0x92>
	}
	else if((current_one_quadrant_index == MIN_QUADRANT_INDEX) && (current_quadrant == SECOND_QUADRANT)){
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <TIM16_callback+0xf4>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10a      	bne.n	8000c2a <TIM16_callback+0x92>
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <TIM16_callback+0x108>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d105      	bne.n	8000c2a <TIM16_callback+0x92>
		current_quadrant = FIRST_QUADRANT;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <TIM16_callback+0x108>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <TIM16_callback+0x10c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
	}
	if(current_quadrant == FIRST_QUADRANT){
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <TIM16_callback+0x108>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d107      	bne.n	8000c44 <TIM16_callback+0xac>
		current_one_quadrant_index++;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <TIM16_callback+0xf4>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <TIM16_callback+0xf4>)
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e006      	b.n	8000c52 <TIM16_callback+0xba>
	}
	else{
		current_one_quadrant_index--;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <TIM16_callback+0xf4>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <TIM16_callback+0xf4>)
 8000c50:	701a      	strb	r2, [r3, #0]
	}
	if(current_halfcycle == SECOND_HALFCYCLE){
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <TIM16_callback+0x10c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d107      	bne.n	8000c6c <TIM16_callback+0xd4>
		duty = 1023 - duty;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <TIM16_callback+0xfc>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <TIM16_callback+0x104>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <TIM16_callback+0xfc>)
 8000c6a:	801a      	strh	r2, [r3, #0]
	}

#endif

	//Write Duty
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <TIM16_callback+0xfc>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200003e0 	.word	0x200003e0
 8000c84:	200001c8 	.word	0x200001c8
 8000c88:	200003d4 	.word	0x200003d4
 8000c8c:	200003dc 	.word	0x200003dc
 8000c90:	08005f38 	.word	0x08005f38
 8000c94:	200003ee 	.word	0x200003ee
 8000c98:	08005e34 	.word	0x08005e34
 8000c9c:	000003ff 	.word	0x000003ff
 8000ca0:	200003de 	.word	0x200003de
 8000ca4:	200003dd 	.word	0x200003dd

08000ca8 <TIM17_callback>:

    return 1;
}

void TIM17_callback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	//Start ADC (in scan mode) conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <TIM17_callback+0x2c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <TIM17_callback+0x30>)
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <TIM17_callback+0x34>)
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 fffa 	bl	8001cb4 <HAL_ADC_Start_DMA>

	Stop_OC_TIM(htim, TIM_CHANNEL_1); //disable TIM17
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fa97 	bl	80011f8 <Stop_OC_TIM>
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	0800604e 	.word	0x0800604e
 8000cd8:	200003f4 	.word	0x200003f4
 8000cdc:	20000028 	.word	0x20000028

08000ce0 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 f870 	bl	8001dd0 <HAL_ADC_Stop_DMA>

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA[0]; //set ADC_Result to waveshape index value
 8000cf0:	210e      	movs	r1, #14
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d74 <ADC_DMA_conversion_complete_callback+0x94>)
 8000cf6:	8812      	ldrh	r2, [r2, #0]
 8000cf8:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <ADC_DMA_conversion_complete_callback+0x98>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d803      	bhi.n	8000d0c <ADC_DMA_conversion_complete_callback+0x2c>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <ADC_DMA_conversion_complete_callback+0x9c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e017      	b.n	8000d3c <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8000d0c:	230e      	movs	r3, #14
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <ADC_DMA_conversion_complete_callback+0xa0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d803      	bhi.n	8000d20 <ADC_DMA_conversion_complete_callback+0x40>
		current_waveshape = SINE_MODE; //sine wave
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <ADC_DMA_conversion_complete_callback+0x9c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e00d      	b.n	8000d3c <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8000d20:	230e      	movs	r3, #14
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	2380      	movs	r3, #128	@ 0x80
 8000d28:	015b      	lsls	r3, r3, #5
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d203      	bcs.n	8000d36 <ADC_DMA_conversion_complete_callback+0x56>
		current_waveshape = SQUARE_MODE; //square wave
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <ADC_DMA_conversion_complete_callback+0x9c>)
 8000d30:	2202      	movs	r2, #2
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e002      	b.n	8000d3c <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <ADC_DMA_conversion_complete_callback+0x9c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
	}

	//GET SPEED
	current_speed_linear = ADCResultsDMA[1] >> 2; //convert to 10-bit
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <ADC_DMA_conversion_complete_callback+0x94>)
 8000d3e:	885b      	ldrh	r3, [r3, #2]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <ADC_DMA_conversion_complete_callback+0xa4>)
 8000d48:	801a      	strh	r2, [r3, #0]
		#endif

	#endif

	//after initial conversion is complete, set the conversion complete flag
	if(initial_ADC_conversion_complete == 0){
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <ADC_DMA_conversion_complete_callback+0xa8>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <ADC_DMA_conversion_complete_callback+0x7a>

		initial_ADC_conversion_complete = 1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <ADC_DMA_conversion_complete_callback+0xa8>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
	}

	__HAL_TIM_SET_COUNTER(&htim17, 0); //set counter to 0
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <ADC_DMA_conversion_complete_callback+0xac>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
	Start_OC_TIM(&htim17, TIM_CHANNEL_1);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <ADC_DMA_conversion_complete_callback+0xac>)
 8000d64:	2100      	movs	r1, #0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 fa2a 	bl	80011c0 <Start_OC_TIM>
}
 8000d6c:	46c0      	nop			@ (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b004      	add	sp, #16
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200003f4 	.word	0x200003f4
 8000d78:	00000555 	.word	0x00000555
 8000d7c:	200003d4 	.word	0x200003d4
 8000d80:	00000aaa 	.word	0x00000aaa
 8000d84:	200003d6 	.word	0x200003d6
 8000d88:	200003fc 	.word	0x200003fc
 8000d8c:	20000284 	.word	0x20000284

08000d90 <main>:
//INCLUDES
#include "system.h"

int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	System_Init();
 8000d94:	f7ff feca 	bl	8000b2c <System_Init>

	Global_Interrupt_Enable();
 8000d98:	f000 f9e4 	bl	8001164 <Global_Interrupt_Enable>

	//START ADC TRIG. TIMER
	Start_OC_TIM(&htim17, TIM_CHANNEL_1); //start adc trig.
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <main+0x4c>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fa0d 	bl	80011c0 <Start_OC_TIM>

	//WAIT
	while(initial_ADC_conversion_complete == 0){}; //wait while first ADC conversion is ongoing
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <main+0x50>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0fa      	beq.n	8000da8 <main+0x18>

	process_TIM16_raw_start_value_and_prescaler();
 8000db2:	f000 fa3d 	bl	8001230 <process_TIM16_raw_start_value_and_prescaler>
	process_TIM16_final_start_value_and_prescaler_adjust();
 8000db6:	f000 fae3 	bl	8001380 <process_TIM16_final_start_value_and_prescaler_adjust>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_TIM(&htim14, TIM_CHANNEL_1); //start PWM
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <main+0x54>)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 f9d8 	bl	8001174 <Start_PWM_TIM>
	Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <main+0x58>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 f9f9 	bl	80011c0 <Start_OC_TIM>
	while (1)
	{
		process_TIM16_raw_start_value_and_prescaler();
 8000dce:	f000 fa2f 	bl	8001230 <process_TIM16_raw_start_value_and_prescaler>
		process_TIM16_final_start_value_and_prescaler_adjust();
 8000dd2:	f000 fad5 	bl	8001380 <process_TIM16_final_start_value_and_prescaler_adjust>
		process_TIM16_raw_start_value_and_prescaler();
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	e7f9      	b.n	8000dce <main+0x3e>
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	20000284 	.word	0x20000284
 8000de0:	200003fc 	.word	0x200003fc
 8000de4:	2000010c 	.word	0x2000010c
 8000de8:	200001c8 	.word	0x200001c8

08000dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_MspInit+0x44>)
 8000df4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_MspInit+0x44>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_MspInit+0x44>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	2201      	movs	r2, #1
 8000e04:	4013      	ands	r3, r2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <HAL_MspInit+0x44>)
 8000e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <HAL_MspInit+0x44>)
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0549      	lsls	r1, r1, #21
 8000e14:	430a      	orrs	r2, r1
 8000e16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_MspInit+0x44>)
 8000e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	4013      	ands	r3, r2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b08b      	sub	sp, #44	@ 0x2c
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	2414      	movs	r4, #20
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	0018      	movs	r0, r3
 8000e42:	2314      	movs	r3, #20
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f004 ffbc 	bl	8005dc4 <memset>
  if(hadc->Instance==ADC1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2d      	ldr	r2, [pc, #180]	@ (8000f08 <HAL_ADC_MspInit+0xd4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d154      	bne.n	8000f00 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e56:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <HAL_ADC_MspInit+0xd8>)
 8000e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <HAL_ADC_MspInit+0xd8>)
 8000e5c:	2180      	movs	r1, #128	@ 0x80
 8000e5e:	0349      	lsls	r1, r1, #13
 8000e60:	430a      	orrs	r2, r1
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e64:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <HAL_ADC_MspInit+0xd8>)
 8000e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	035b      	lsls	r3, r3, #13
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <HAL_ADC_MspInit+0xd8>)
 8000e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e76:	4b25      	ldr	r3, [pc, #148]	@ (8000f0c <HAL_ADC_MspInit+0xd8>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <HAL_ADC_MspInit+0xd8>)
 8000e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2233      	movs	r2, #51	@ 0x33
 8000e8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2203      	movs	r2, #3
 8000e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	193a      	adds	r2, r7, r4
 8000e9e:	23a0      	movs	r3, #160	@ 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 ff5f 	bl	8002d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000eac:	4a19      	ldr	r2, [pc, #100]	@ (8000f14 <HAL_ADC_MspInit+0xe0>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000eca:	2280      	movs	r2, #128	@ 0x80
 8000ecc:	0052      	lsls	r2, r2, #1
 8000ece:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000ed2:	2280      	movs	r2, #128	@ 0x80
 8000ed4:	00d2      	lsls	r2, r2, #3
 8000ed6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 fc8a 	bl	8002800 <HAL_DMA_Init>
 8000eec:	1e03      	subs	r3, r0, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000ef0:	f7ff fe16 	bl	8000b20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000ef8:	651a      	str	r2, [r3, #80]	@ 0x50
 8000efa:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <HAL_ADC_MspInit+0xdc>)
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b00b      	add	sp, #44	@ 0x2c
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	40012400 	.word	0x40012400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	200000b0 	.word	0x200000b0
 8000f14:	40020008 	.word	0x40020008

08000f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a26      	ldr	r2, [pc, #152]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xa8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10e      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f2a:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2e:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	0209      	lsls	r1, r1, #8
 8000f34:	430a      	orrs	r2, r1
 8000f36:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f38:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	4013      	ands	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f46:	e036      	b.n	8000fb6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d116      	bne.n	8000f80 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f56:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f58:	2180      	movs	r1, #128	@ 0x80
 8000f5a:	0289      	lsls	r1, r1, #10
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2015      	movs	r0, #21
 8000f74:	f001 fc12 	bl	800279c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000f78:	2015      	movs	r0, #21
 8000f7a:	f001 fc24 	bl	80027c6 <HAL_NVIC_EnableIRQ>
}
 8000f7e:	e01a      	b.n	8000fb6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <HAL_TIM_Base_MspInit+0xb4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d115      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	02c9      	lsls	r1, r1, #11
 8000f94:	430a      	orrs	r2, r1
 8000f96:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xac>)
 8000f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	02db      	lsls	r3, r3, #11
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2016      	movs	r0, #22
 8000fac:	f001 fbf6 	bl	800279c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000fb0:	2016      	movs	r0, #22
 8000fb2:	f001 fc08 	bl	80027c6 <HAL_NVIC_EnableIRQ>
}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b006      	add	sp, #24
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	40002000 	.word	0x40002000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40014400 	.word	0x40014400
 8000fcc:	40014800 	.word	0x40014800

08000fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	240c      	movs	r4, #12
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	0018      	movs	r0, r3
 8000fde:	2314      	movs	r3, #20
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f004 feee 	bl	8005dc4 <memset>
  if(htim->Instance==TIM14)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <HAL_TIM_MspPostInit+0x70>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d122      	bne.n	8001038 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <HAL_TIM_MspPostInit+0x74>)
 8000ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <HAL_TIM_MspPostInit+0x74>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_TIM_MspPostInit+0x74>)
 8001000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800100a:	0021      	movs	r1, r4
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2202      	movs	r2, #2
 8001016:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2204      	movs	r2, #4
 8001028:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	187a      	adds	r2, r7, r1
 800102c:	23a0      	movs	r3, #160	@ 0xa0
 800102e:	05db      	lsls	r3, r3, #23
 8001030:	0011      	movs	r1, r2
 8001032:	0018      	movs	r0, r3
 8001034:	f001 fe98 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b009      	add	sp, #36	@ 0x24
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	40002000 	.word	0x40002000
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08b      	sub	sp, #44	@ 0x2c
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	2414      	movs	r4, #20
 8001052:	193b      	adds	r3, r7, r4
 8001054:	0018      	movs	r0, r3
 8001056:	2314      	movs	r3, #20
 8001058:	001a      	movs	r2, r3
 800105a:	2100      	movs	r1, #0
 800105c:	f004 feb2 	bl	8005dc4 <memset>
  if(huart->Instance==USART2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <HAL_UART_MspInit+0x8c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d130      	bne.n	80010cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106a:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <HAL_UART_MspInit+0x90>)
 800106c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <HAL_UART_MspInit+0x90>)
 8001070:	2180      	movs	r1, #128	@ 0x80
 8001072:	0289      	lsls	r1, r1, #10
 8001074:	430a      	orrs	r2, r1
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <HAL_UART_MspInit+0x90>)
 800107a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_UART_MspInit+0x90>)
 8001088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <HAL_UART_MspInit+0x90>)
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	635a      	str	r2, [r3, #52]	@ 0x34
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_UART_MspInit+0x90>)
 8001094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001096:	2201      	movs	r2, #1
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800109e:	0021      	movs	r1, r4
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2201      	movs	r2, #1
 80010bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	187a      	adds	r2, r7, r1
 80010c0:	23a0      	movs	r3, #160	@ 0xa0
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 fe4e 	bl	8002d68 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b00b      	add	sp, #44	@ 0x2c
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40021000 	.word	0x40021000

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	e7fd      	b.n	80010e0 <NMI_Handler+0x4>

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	e7fd      	b.n	80010e8 <HardFault_Handler+0x4>

080010ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 f9ec 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	46c0      	nop			@ (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <DMA1_Channel1_IRQHandler+0x14>)
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fce4 	bl	8002ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	200000b0 	.word	0x200000b0

08001128 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <TIM16_IRQHandler+0x14>)
 800113a:	0018      	movs	r0, r3
 800113c:	f003 f904 	bl	8004348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	200001c8 	.word	0x200001c8

0800114c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <TIM17_IRQHandler+0x14>)
 8001152:	0018      	movs	r0, r3
 8001154:	f003 f8f8 	bl	8004348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	20000284 	.word	0x20000284

08001164 <Global_Interrupt_Enable>:
volatile uint8_t TIM16_prescaler_divisors_final_index = 0;
volatile uint16_t ADCResultsDMA[4] = {0};
volatile uint8_t initial_ADC_conversion_complete = 0;

//FUNCTION DEFINITIONS
uint8_t Global_Interrupt_Enable(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8001168:	b662      	cpsie	i
}
 800116a:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 800116c:	2301      	movs	r3, #1
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <Start_PWM_TIM>:

	__disable_irq();
	return 1;
}

uint8_t Start_PWM_TIM(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel){
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]

	uint8_t ok = 0;
 800117e:	250f      	movs	r5, #15
 8001180:	197b      	adds	r3, r7, r5
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
	ok = HAL_TIM_Base_Start(TIM);
 8001186:	197c      	adds	r4, r7, r5
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	0018      	movs	r0, r3
 800118c:	f002 fce4 	bl	8003b58 <HAL_TIM_Base_Start>
 8001190:	0003      	movs	r3, r0
 8001192:	7023      	strb	r3, [r4, #0]
	ok = HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 8001194:	197c      	adds	r4, r7, r5
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	0011      	movs	r1, r2
 800119c:	0018      	movs	r0, r3
 800119e:	f002 fff5 	bl	800418c <HAL_TIM_PWM_Start>
 80011a2:	0003      	movs	r3, r0
 80011a4:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80011a6:	197b      	adds	r3, r7, r5
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <Start_PWM_TIM+0x3e>

		Error_Handler();
 80011ae:	f7ff fcb7 	bl	8000b20 <Error_Handler>
	}

	return ok;
 80011b2:	230f      	movs	r3, #15
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bdb0      	pop	{r4, r5, r7, pc}

080011c0 <Start_OC_TIM>:

uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80011ca:	250f      	movs	r5, #15
 80011cc:	197c      	adds	r4, r7, r5
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	0011      	movs	r1, r2
 80011d4:	0018      	movs	r0, r3
 80011d6:	f002 fd79 	bl	8003ccc <HAL_TIM_OC_Start_IT>
 80011da:	0003      	movs	r3, r0
 80011dc:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 80011de:	197b      	adds	r3, r7, r5
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <Start_OC_TIM+0x2a>

		Error_Handler();
 80011e6:	f7ff fc9b 	bl	8000b20 <Error_Handler>
	}

	return ok;
 80011ea:	230f      	movs	r3, #15
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	781b      	ldrb	r3, [r3, #0]
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b004      	add	sp, #16
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}

080011f8 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8001202:	250f      	movs	r5, #15
 8001204:	197c      	adds	r4, r7, r5
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f002 fe81 	bl	8003f14 <HAL_TIM_OC_Stop_IT>
 8001212:	0003      	movs	r3, r0
 8001214:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8001216:	197b      	adds	r3, r7, r5
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <Stop_OC_TIM+0x2a>

		Error_Handler();
 800121e:	f7ff fc7f 	bl	8000b20 <Error_Handler>
	}

	return ok;
 8001222:	230f      	movs	r3, #15
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	781b      	ldrb	r3, [r3, #0]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bdb0      	pop	{r4, r5, r7, pc}

08001230 <process_TIM16_raw_start_value_and_prescaler>:

uint8_t process_TIM16_raw_start_value_and_prescaler(void){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

	uint16_t speed_control = 0;
 8001236:	210e      	movs	r1, #14
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2200      	movs	r2, #0
 800123c:	801a      	strh	r2, [r3, #0]
	uint32_t speed_control_32 = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
	uint8_t how_many_128 = 0;
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]

    current_speed_linear_32 = current_speed_linear;
 8001248:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <process_TIM16_raw_start_value_and_prescaler+0xa8>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	001a      	movs	r2, r3
 8001250:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <process_TIM16_raw_start_value_and_prescaler+0xac>)
 8001252:	601a      	str	r2, [r3, #0]
    speed_control_32 = current_speed_linear_32 * NUMBER_OF_FREQUENCY_STEPS;
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <process_TIM16_raw_start_value_and_prescaler+0xac>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	0013      	movs	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	189b      	adds	r3, r3, r2
 800125e:	011a      	lsls	r2, r3, #4
 8001260:	1ad2      	subs	r2, r2, r3
 8001262:	00d3      	lsls	r3, r2, #3
 8001264:	001a      	movs	r2, r3
 8001266:	60ba      	str	r2, [r7, #8]
    speed_control_32 = speed_control_32 >> 10;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	0a9b      	lsrs	r3, r3, #10
 800126c:	60bb      	str	r3, [r7, #8]
    speed_control = (uint16_t) speed_control_32;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	801a      	strh	r2, [r3, #0]
    //speed_control = (speed_adc_10_bit/1024)*883
        if(speed_control <= (127-12)){ //inequality is correct!
 8001274:	187b      	adds	r3, r7, r1
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	2b73      	cmp	r3, #115	@ 0x73
 800127a:	d80a      	bhi.n	8001292 <process_TIM16_raw_start_value_and_prescaler+0x62>
            TIM16_raw_start_value = (uint8_t) speed_control + 12; //set CCR
 800127c:	187b      	adds	r3, r7, r1
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	330c      	adds	r3, #12
 8001284:	001a      	movs	r2, r3
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <process_TIM16_raw_start_value_and_prescaler+0xb0>)
 8001288:	601a      	str	r2, [r3, #0]
            TIM16_base_prescaler_divisors_index = 1;
 800128a:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <process_TIM16_raw_start_value_and_prescaler+0xb4>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e01d      	b.n	80012ce <process_TIM16_raw_start_value_and_prescaler+0x9e>
        }
        else{ 	//(speed_control > (127-12))
            uint16_t speed_control_subtracted;
            speed_control_subtracted = speed_control - (127-12);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	220e      	movs	r2, #14
 8001296:	18ba      	adds	r2, r7, r2
 8001298:	8812      	ldrh	r2, [r2, #0]
 800129a:	3a73      	subs	r2, #115	@ 0x73
 800129c:	801a      	strh	r2, [r3, #0]
            how_many_128 = (uint8_t)(speed_control_subtracted >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	09db      	lsrs	r3, r3, #7
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	701a      	strb	r2, [r3, #0]
            TIM16_raw_start_value = (uint8_t)(speed_control_subtracted - (uint16_t)(how_many_128 << 7)); //how_many_128*128, set TMR0
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	01db      	lsls	r3, r3, #7
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	001a      	movs	r2, r3
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <process_TIM16_raw_start_value_and_prescaler+0xb0>)
 80012c0:	601a      	str	r2, [r3, #0]
            //biggest how_many_128 for NUMBER_OF_FREQUENCY_STEPS == 600 is 3
            //biggest base_prescaler_divisors_index == 5 for NUMBER_OF_FREQUENCY_STEPS == 600
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + 2);
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	3302      	adds	r3, #2
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <process_TIM16_raw_start_value_and_prescaler+0xb4>)
 80012cc:	701a      	strb	r2, [r3, #0]
        }
    return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b004      	add	sp, #16
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200003d6 	.word	0x200003d6
 80012dc:	200003d8 	.word	0x200003d8
 80012e0:	200003e8 	.word	0x200003e8
 80012e4:	200003ec 	.word	0x200003ec

080012e8 <adjust_and_set_TIM16_prescaler>:


uint8_t adjust_and_set_TIM16_prescaler(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

    if(TIM16_prescaler_adjust == DIVIDE_BY_TWO){
 80012ec:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <adjust_and_set_TIM16_prescaler+0x84>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <adjust_and_set_TIM16_prescaler+0x1e>
        TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index + 1;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <adjust_and_set_TIM16_prescaler+0x88>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <adjust_and_set_TIM16_prescaler+0x8c>)
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e023      	b.n	800134e <adjust_and_set_TIM16_prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust == DIVIDE_BY_FOUR){
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <adjust_and_set_TIM16_prescaler+0x84>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b03      	cmp	r3, #3
 800130e:	d107      	bne.n	8001320 <adjust_and_set_TIM16_prescaler+0x38>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index + 2;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <adjust_and_set_TIM16_prescaler+0x88>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	3302      	adds	r3, #2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <adjust_and_set_TIM16_prescaler+0x8c>)
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	e016      	b.n	800134e <adjust_and_set_TIM16_prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust == MULTIPLY_BY_TWO){
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <adjust_and_set_TIM16_prescaler+0x84>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d107      	bne.n	800133a <adjust_and_set_TIM16_prescaler+0x52>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index - 1;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <adjust_and_set_TIM16_prescaler+0x88>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <adjust_and_set_TIM16_prescaler+0x8c>)
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e009      	b.n	800134e <adjust_and_set_TIM16_prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust == DO_NOTHING){
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <adjust_and_set_TIM16_prescaler+0x84>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d104      	bne.n	800134e <adjust_and_set_TIM16_prescaler+0x66>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <adjust_and_set_TIM16_prescaler+0x88>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <adjust_and_set_TIM16_prescaler+0x8c>)
 800134c:	701a      	strb	r2, [r3, #0]
    }
    __HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index] - 1)); //have to take one off the divisor
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <adjust_and_set_TIM16_prescaler+0x8c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	001a      	movs	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <adjust_and_set_TIM16_prescaler+0x90>)
 8001358:	0052      	lsls	r2, r2, #1
 800135a:	5ad3      	ldrh	r3, [r2, r3]
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <adjust_and_set_TIM16_prescaler+0x94>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
    return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003e4 	.word	0x200003e4
 8001370:	200003ec 	.word	0x200003ec
 8001374:	200003f0 	.word	0x200003f0
 8001378:	0800603c 	.word	0x0800603c
 800137c:	200001c8 	.word	0x200001c8

08001380 <process_TIM16_final_start_value_and_prescaler_adjust>:
        return 1;
    }
#endif


uint8_t process_TIM16_final_start_value_and_prescaler_adjust(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
        }

    #endif

    #if SYMMETRY_ON_OR_OFF == 0
        TIM16_final_start_value = TIM16_raw_start_value;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <process_TIM16_final_start_value_and_prescaler_adjust+0x20>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <process_TIM16_final_start_value_and_prescaler_adjust+0x24>)
 800138a:	601a      	str	r2, [r3, #0]
        TIM16_prescaler_adjust = DO_NOTHING;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <process_TIM16_final_start_value_and_prescaler_adjust+0x28>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
        adjust_and_set_TIM16_prescaler();
 8001392:	f7ff ffa9 	bl	80012e8 <adjust_and_set_TIM16_prescaler>
    #endif

    return 1;
 8001396:	2301      	movs	r3, #1
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	200003e8 	.word	0x200003e8
 80013a4:	200003e0 	.word	0x200003e0
 80013a8:	200003e4 	.word	0x200003e4

080013ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	46c0      	nop			@ (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b8:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013bc:	f7ff fff6 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	@ (80013f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <LoopForever+0xe>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001404 <LoopForever+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013e6:	f004 fcf5 	bl	8005dd4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013ea:	f7ff fcd1 	bl	8000d90 <main>

080013ee <LoopForever>:

LoopForever:
  b LoopForever
 80013ee:	e7fe      	b.n	80013ee <LoopForever>
  ldr   r0, =_estack
 80013f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013fc:	08006254 	.word	0x08006254
  ldr r2, =_sbss
 8001400:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001404:	20000404 	.word	0x20000404

08001408 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_IRQHandler>
	...

0800140c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <HAL_Init+0x3c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_Init+0x3c>)
 800141e:	2180      	movs	r1, #128	@ 0x80
 8001420:	0049      	lsls	r1, r1, #1
 8001422:	430a      	orrs	r2, r1
 8001424:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f810 	bl	800144c <HAL_InitTick>
 800142c:	1e03      	subs	r3, r0, #0
 800142e:	d003      	beq.n	8001438 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e001      	b.n	800143c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fcd8 	bl	8000dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	781b      	ldrb	r3, [r3, #0]
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001454:	230f      	movs	r3, #15
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <HAL_InitTick+0x88>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d02b      	beq.n	80014bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <HAL_InitTick+0x8c>)
 8001466:	681c      	ldr	r4, [r3, #0]
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HAL_InitTick+0x88>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	0019      	movs	r1, r3
 800146e:	23fa      	movs	r3, #250	@ 0xfa
 8001470:	0098      	lsls	r0, r3, #2
 8001472:	f7fe fe47 	bl	8000104 <__udivsi3>
 8001476:	0003      	movs	r3, r0
 8001478:	0019      	movs	r1, r3
 800147a:	0020      	movs	r0, r4
 800147c:	f7fe fe42 	bl	8000104 <__udivsi3>
 8001480:	0003      	movs	r3, r0
 8001482:	0018      	movs	r0, r3
 8001484:	f001 f9af 	bl	80027e6 <HAL_SYSTICK_Config>
 8001488:	1e03      	subs	r3, r0, #0
 800148a:	d112      	bne.n	80014b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d80a      	bhi.n	80014a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	2301      	movs	r3, #1
 8001496:	425b      	negs	r3, r3
 8001498:	2200      	movs	r2, #0
 800149a:	0018      	movs	r0, r3
 800149c:	f001 f97e 	bl	800279c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_InitTick+0x90>)
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e00d      	b.n	80014c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014a8:	230f      	movs	r3, #15
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e008      	b.n	80014c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b2:	230f      	movs	r3, #15
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e003      	b.n	80014c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014bc:	230f      	movs	r3, #15
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b005      	add	sp, #20
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_IncTick+0x1c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	001a      	movs	r2, r3
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_IncTick+0x20>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	18d2      	adds	r2, r2, r3
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_IncTick+0x20>)
 80014f2:	601a      	str	r2, [r3, #0]
}
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000400 	.word	0x20000400

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <HAL_GetTick+0x10>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	20000400 	.word	0x20000400

08001518 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001528:	401a      	ands	r2, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	fe3fffff 	.word	0xfe3fffff

08001540 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	23e0      	movs	r3, #224	@ 0xe0
 800154e:	045b      	lsls	r3, r3, #17
 8001550:	4013      	ands	r3, r2
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}

0800155a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	2104      	movs	r1, #4
 800156e:	400a      	ands	r2, r1
 8001570:	2107      	movs	r1, #7
 8001572:	4091      	lsls	r1, r2
 8001574:	000a      	movs	r2, r1
 8001576:	43d2      	mvns	r2, r2
 8001578:	401a      	ands	r2, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2104      	movs	r1, #4
 800157e:	400b      	ands	r3, r1
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4099      	lsls	r1, r3
 8001584:	000b      	movs	r3, r1
 8001586:	431a      	orrs	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b004      	add	sp, #16
 8001592:	bd80      	pop	{r7, pc}

08001594 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	2104      	movs	r1, #4
 80015a6:	400a      	ands	r2, r1
 80015a8:	2107      	movs	r1, #7
 80015aa:	4091      	lsls	r1, r2
 80015ac:	000a      	movs	r2, r1
 80015ae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2104      	movs	r1, #4
 80015b4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80015b6:	40da      	lsrs	r2, r3
 80015b8:	0013      	movs	r3, r2
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	23c0      	movs	r3, #192	@ 0xc0
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d101      	bne.n	80015da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015da:	2300      	movs	r3, #0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	211f      	movs	r1, #31
 80015f8:	400a      	ands	r2, r1
 80015fa:	210f      	movs	r1, #15
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	43d2      	mvns	r2, r2
 8001602:	401a      	ands	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	0e9b      	lsrs	r3, r3, #26
 8001608:	210f      	movs	r1, #15
 800160a:	4019      	ands	r1, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	201f      	movs	r0, #31
 8001610:	4003      	ands	r3, r0
 8001612:	4099      	lsls	r1, r3
 8001614:	000b      	movs	r3, r1
 8001616:	431a      	orrs	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b004      	add	sp, #16
 8001622:	bd80      	pop	{r7, pc}

08001624 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	035b      	lsls	r3, r3, #13
 8001636:	0b5b      	lsrs	r3, r3, #13
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}

08001646 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	0352      	lsls	r2, r2, #13
 8001658:	0b52      	lsrs	r2, r2, #13
 800165a:	43d2      	mvns	r2, r2
 800165c:	401a      	ands	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	0212      	lsls	r2, r2, #8
 8001680:	43d2      	mvns	r2, r2
 8001682:	401a      	ands	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	400b      	ands	r3, r1
 800168c:	4904      	ldr	r1, [pc, #16]	@ (80016a0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800168e:	400b      	ands	r3, r1
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	07ffff00 	.word	0x07ffff00

080016a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	2280      	movs	r2, #128	@ 0x80
 80016b6:	0552      	lsls	r2, r2, #21
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	6fffffe8 	.word	0x6fffffe8

080016cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	055b      	lsls	r3, r3, #21
 80016dc:	401a      	ands	r2, r3
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	055b      	lsls	r3, r3, #21
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d101      	bne.n	80016ea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a04      	ldr	r2, [pc, #16]	@ (8001714 <LL_ADC_Enable+0x20>)
 8001702:	4013      	ands	r3, r2
 8001704:	2201      	movs	r2, #1
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}
 8001714:	7fffffe8 	.word	0x7fffffe8

08001718 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <LL_ADC_Disable+0x20>)
 8001726:	4013      	ands	r3, r2
 8001728:	2202      	movs	r2, #2
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}
 8001738:	7fffffe8 	.word	0x7fffffe8

0800173c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2201      	movs	r2, #1
 800174a:	4013      	ands	r3, r2
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <LL_ADC_IsEnabled+0x18>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <LL_ADC_IsEnabled+0x1a>
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}

0800175e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	2b02      	cmp	r3, #2
 8001770:	d101      	bne.n	8001776 <LL_ADC_IsDisableOngoing+0x18>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <LL_ADC_IsDisableOngoing+0x1a>
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}

08001780 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <LL_ADC_REG_StartConversion+0x20>)
 800178e:	4013      	ands	r3, r2
 8001790:	2204      	movs	r2, #4
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001798:	46c0      	nop			@ (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	7fffffe8 	.word	0x7fffffe8

080017a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <LL_ADC_REG_StopConversion+0x20>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	2210      	movs	r2, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	7fffffe8 	.word	0x7fffffe8

080017c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2204      	movs	r2, #4
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d101      	bne.n	80017e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f4:	231f      	movs	r3, #31
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e19f      	b.n	8001b52 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	2b00      	cmp	r3, #0
 8001818:	d12a      	bne.n	8001870 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4acf      	ldr	r2, [pc, #828]	@ (8001b5c <HAL_ADC_Init+0x370>)
 800181e:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4acf      	ldr	r2, [pc, #828]	@ (8001b60 <HAL_ADC_Init+0x374>)
 8001824:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4ace      	ldr	r2, [pc, #824]	@ (8001b64 <HAL_ADC_Init+0x378>)
 800182a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4ace      	ldr	r2, [pc, #824]	@ (8001b68 <HAL_ADC_Init+0x37c>)
 8001830:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4acd      	ldr	r2, [pc, #820]	@ (8001b6c <HAL_ADC_Init+0x380>)
 8001836:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4acd      	ldr	r2, [pc, #820]	@ (8001b70 <HAL_ADC_Init+0x384>)
 800183c:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4acc      	ldr	r2, [pc, #816]	@ (8001b74 <HAL_ADC_Init+0x388>)
 8001842:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2280      	movs	r2, #128	@ 0x80
 8001848:	589b      	ldr	r3, [r3, r2]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2180      	movs	r1, #128	@ 0x80
 8001852:	4ac9      	ldr	r2, [pc, #804]	@ (8001b78 <HAL_ADC_Init+0x38c>)
 8001854:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	589b      	ldr	r3, [r3, r2]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	0010      	movs	r0, r2
 8001860:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2254      	movs	r2, #84	@ 0x54
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ff29 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d115      	bne.n	80018aa <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0018      	movs	r0, r3
 8001884:	f7ff ff0e 	bl	80016a4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001888:	4bbc      	ldr	r3, [pc, #752]	@ (8001b7c <HAL_ADC_Init+0x390>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	49bc      	ldr	r1, [pc, #752]	@ (8001b80 <HAL_ADC_Init+0x394>)
 800188e:	0018      	movs	r0, r3
 8001890:	f7fe fc38 	bl	8000104 <__udivsi3>
 8001894:	0003      	movs	r3, r0
 8001896:	3301      	adds	r3, #1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800189c:	e002      	b.n	80018a4 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f9      	bne.n	800189e <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff ff0c 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d10f      	bne.n	80018d8 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018bc:	2210      	movs	r2, #16
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c8:	2201      	movs	r2, #1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80018d0:	231f      	movs	r3, #31
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff ff73 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 80018e2:	0003      	movs	r3, r0
 80018e4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	2210      	movs	r2, #16
 80018ec:	4013      	ands	r3, r2
 80018ee:	d000      	beq.n	80018f2 <HAL_ADC_Init+0x106>
 80018f0:	e122      	b.n	8001b38 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d000      	beq.n	80018fa <HAL_ADC_Init+0x10e>
 80018f8:	e11e      	b.n	8001b38 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	4aa1      	ldr	r2, [pc, #644]	@ (8001b84 <HAL_ADC_Init+0x398>)
 8001900:	4013      	ands	r3, r2
 8001902:	2202      	movs	r2, #2
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0018      	movs	r0, r3
 8001910:	f7ff ff14 	bl	800173c <LL_ADC_IsEnabled>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d000      	beq.n	800191a <HAL_ADC_Init+0x12e>
 8001918:	e0ad      	b.n	8001a76 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7e1b      	ldrb	r3, [r3, #24]
 8001922:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001924:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7e5b      	ldrb	r3, [r3, #25]
 800192a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800192c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7e9b      	ldrb	r3, [r3, #26]
 8001932:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001934:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_ADC_Init+0x158>
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	015b      	lsls	r3, r3, #5
 8001942:	e000      	b.n	8001946 <HAL_ADC_Init+0x15a>
 8001944:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001946:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800194c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	da04      	bge.n	8001960 <HAL_ADC_Init+0x174>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	e001      	b.n	8001964 <HAL_ADC_Init+0x178>
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001964:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	212c      	movs	r1, #44	@ 0x2c
 800196a:	5c5b      	ldrb	r3, [r3, r1]
 800196c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800196e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2220      	movs	r2, #32
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d115      	bne.n	80019ac <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7e9b      	ldrb	r3, [r3, #26]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	0252      	lsls	r2, r2, #9
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	e00b      	b.n	80019ac <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001998:	2220      	movs	r2, #32
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a4:	2201      	movs	r2, #1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00a      	beq.n	80019ca <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019b8:	23e0      	movs	r3, #224	@ 0xe0
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019c2:	4313      	orrs	r3, r2
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a6d      	ldr	r2, [pc, #436]	@ (8001b88 <HAL_ADC_Init+0x39c>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	430a      	orrs	r2, r1
 80019de:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	0f9b      	lsrs	r3, r3, #30
 80019e6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019ec:	4313      	orrs	r3, r2
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	223c      	movs	r2, #60	@ 0x3c
 80019f8:	5c9b      	ldrb	r3, [r3, r2]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d111      	bne.n	8001a22 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	0f9b      	lsrs	r3, r3, #30
 8001a04:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a0a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001a10:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001a16:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	4a58      	ldr	r2, [pc, #352]	@ (8001b8c <HAL_ADC_Init+0x3a0>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	23c0      	movs	r3, #192	@ 0xc0
 8001a3e:	061b      	lsls	r3, r3, #24
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d018      	beq.n	8001a76 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	05db      	lsls	r3, r3, #23
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d012      	beq.n	8001a76 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	061b      	lsls	r3, r3, #24
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d00c      	beq.n	8001a76 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001b90 <HAL_ADC_Init+0x3a4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	@ (8001b94 <HAL_ADC_Init+0x3a8>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	23f0      	movs	r3, #240	@ 0xf0
 8001a6c:	039b      	lsls	r3, r3, #14
 8001a6e:	401a      	ands	r2, r3
 8001a70:	4b47      	ldr	r3, [pc, #284]	@ (8001b90 <HAL_ADC_Init+0x3a4>)
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a7e:	001a      	movs	r2, r3
 8001a80:	2100      	movs	r1, #0
 8001a82:	f7ff fd6a 	bl	800155a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a8e:	4942      	ldr	r1, [pc, #264]	@ (8001b98 <HAL_ADC_Init+0x3ac>)
 8001a90:	001a      	movs	r2, r3
 8001a92:	f7ff fd62 	bl	800155a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	4249      	negs	r1, r1
 8001aac:	430a      	orrs	r2, r1
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ab0:	e018      	b.n	8001ae4 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	2380      	movs	r3, #128	@ 0x80
 8001ab8:	039b      	lsls	r3, r3, #14
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d112      	bne.n	8001ae4 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	221c      	movs	r2, #28
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	4252      	negs	r2, r2
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2100      	movs	r1, #0
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff fd52 	bl	8001594 <LL_ADC_GetSamplingTimeCommonChannels>
 8001af0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d10b      	bne.n	8001b12 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	2203      	movs	r2, #3
 8001b06:	4393      	bics	r3, r2
 8001b08:	2201      	movs	r2, #1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b10:	e01c      	b.n	8001b4c <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	2212      	movs	r2, #18
 8001b18:	4393      	bics	r3, r2
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b26:	2201      	movs	r2, #1
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001b2e:	231f      	movs	r3, #31
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b36:	e009      	b.n	8001b4c <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b44:	231f      	movs	r3, #31
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001b4c:	231f      	movs	r3, #31
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b008      	add	sp, #32
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	08001eb5 	.word	0x08001eb5
 8001b60:	08001ec5 	.word	0x08001ec5
 8001b64:	08001ed5 	.word	0x08001ed5
 8001b68:	08001ee5 	.word	0x08001ee5
 8001b6c:	08002615 	.word	0x08002615
 8001b70:	08002625 	.word	0x08002625
 8001b74:	08002635 	.word	0x08002635
 8001b78:	08000e35 	.word	0x08000e35
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	00030d40 	.word	0x00030d40
 8001b84:	fffffefd 	.word	0xfffffefd
 8001b88:	ffde0201 	.word	0xffde0201
 8001b8c:	1ffffc02 	.word	0x1ffffc02
 8001b90:	40012708 	.word	0x40012708
 8001b94:	ffc3ffff 	.word	0xffc3ffff
 8001b98:	07ffff04 	.word	0x07ffff04

08001b9c <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	230b      	movs	r3, #11
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	1c0a      	adds	r2, r1, #0
 8001bac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2317      	movs	r3, #23
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e06d      	b.n	8001ca8 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d03a      	beq.n	8001c4c <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8001bd6:	230b      	movs	r3, #11
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b0a      	cmp	r3, #10
 8001bde:	d82a      	bhi.n	8001c36 <HAL_ADC_RegisterCallback+0x9a>
 8001be0:	009a      	lsls	r2, r3, #2
 8001be2:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <HAL_ADC_RegisterCallback+0x114>)
 8001be4:	18d3      	adds	r3, r2, r3
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8001bf0:	e057      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8001bf8:	e053      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8001c00:	e04f      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8001c08:	e04b      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8001c10:	e047      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8001c18:	e043      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8001c20:	e03f      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	505a      	str	r2, [r3, r1]
        break;
 8001c2a:	e03a      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2184      	movs	r1, #132	@ 0x84
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	505a      	str	r2, [r3, r1]
        break;
 8001c34:	e035      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8001c42:	2317      	movs	r3, #23
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
        break;
 8001c4a:	e02a      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d11c      	bne.n	8001c8e <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8001c54:	230b      	movs	r3, #11
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b09      	cmp	r3, #9
 8001c5c:	d002      	beq.n	8001c64 <HAL_ADC_RegisterCallback+0xc8>
 8001c5e:	2b0a      	cmp	r3, #10
 8001c60:	d005      	beq.n	8001c6e <HAL_ADC_RegisterCallback+0xd2>
 8001c62:	e009      	b.n	8001c78 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2180      	movs	r1, #128	@ 0x80
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	505a      	str	r2, [r3, r1]
        break;
 8001c6c:	e019      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2184      	movs	r1, #132	@ 0x84
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	505a      	str	r2, [r3, r1]
        break;
 8001c76:	e014      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8001c84:	2317      	movs	r3, #23
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
        break;
 8001c8c:	e009      	b.n	8001ca2 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c92:	2210      	movs	r2, #16
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8001c9a:	2317      	movs	r3, #23
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ca2:	2317      	movs	r3, #23
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b006      	add	sp, #24
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	080060b0 	.word	0x080060b0

08001cb4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001cb4:	b5b0      	push	{r4, r5, r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fd7f 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d16c      	bne.n	8001da8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2254      	movs	r2, #84	@ 0x54
 8001cd2:	5c9b      	ldrb	r3, [r3, r2]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x28>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e06c      	b.n	8001db6 <HAL_ADC_Start_DMA+0x102>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2254      	movs	r2, #84	@ 0x54
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	d113      	bne.n	8001d18 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fd21 	bl	800173c <LL_ADC_IsEnabled>
 8001cfa:	1e03      	subs	r3, r0, #0
 8001cfc:	d004      	beq.n	8001d08 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff fd08 	bl	8001718 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d18:	2517      	movs	r5, #23
 8001d1a:	197c      	adds	r4, r7, r5
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 fb02 	bl	8002328 <ADC_Enable>
 8001d24:	0003      	movs	r3, r0
 8001d26:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d28:	002c      	movs	r4, r5
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d13e      	bne.n	8001db0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <HAL_ADC_Start_DMA+0x10c>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2280      	movs	r2, #128	@ 0x80
 8001d3c:	0052      	lsls	r2, r2, #1
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <HAL_ADC_Start_DMA+0x110>)
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d56:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <HAL_ADC_Start_DMA+0x114>)
 8001d58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dcc <HAL_ADC_Start_DMA+0x118>)
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	221c      	movs	r2, #28
 8001d68:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2254      	movs	r2, #84	@ 0x54
 8001d6e:	2100      	movs	r1, #0
 8001d70:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3340      	adds	r3, #64	@ 0x40
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	193c      	adds	r4, r7, r4
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f000 fdbe 	bl	8002914 <HAL_DMA_Start_IT>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fced 	bl	8001780 <LL_ADC_REG_StartConversion>
 8001da6:	e003      	b.n	8001db0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001da8:	2317      	movs	r3, #23
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	2202      	movs	r2, #2
 8001dae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001db0:	2317      	movs	r3, #23
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	781b      	ldrb	r3, [r3, #0]
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b006      	add	sp, #24
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	fffff0fe 	.word	0xfffff0fe
 8001dc4:	080024f1 	.word	0x080024f1
 8001dc8:	080025bd 	.word	0x080025bd
 8001dcc:	080025dd 	.word	0x080025dd

08001dd0 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2254      	movs	r2, #84	@ 0x54
 8001ddc:	5c9b      	ldrb	r3, [r3, r2]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Stop_DMA+0x16>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e05f      	b.n	8001ea6 <HAL_ADC_Stop_DMA+0xd6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2254      	movs	r2, #84	@ 0x54
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001dee:	250f      	movs	r5, #15
 8001df0:	197c      	adds	r4, r7, r5
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 fa55 	bl	80022a4 <ADC_ConversionStop>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001dfe:	0029      	movs	r1, r5
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d147      	bne.n	8001e98 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e0c:	2225      	movs	r2, #37	@ 0x25
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d112      	bne.n	8001e3c <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e1a:	000d      	movs	r5, r1
 8001e1c:	187c      	adds	r4, r7, r1
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 fdfe 	bl	8002a20 <HAL_DMA_Abort>
 8001e24:	0003      	movs	r3, r0
 8001e26:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001e28:	197b      	adds	r3, r7, r5
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e34:	2240      	movs	r2, #64	@ 0x40
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2110      	movs	r1, #16
 8001e48:	438a      	bics	r2, r1
 8001e4a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	18bb      	adds	r3, r7, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001e56:	18bc      	adds	r4, r7, r2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 faea 	bl	8002434 <ADC_Disable>
 8001e60:	0003      	movs	r3, r0
 8001e62:	7023      	strb	r3, [r4, #0]
 8001e64:	e003      	b.n	8001e6e <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 fae3 	bl	8002434 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e6e:	230f      	movs	r3, #15
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <HAL_ADC_Stop_DMA+0xe0>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2201      	movs	r2, #1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2101      	movs	r1, #1
 8001e94:	438a      	bics	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2254      	movs	r2, #84	@ 0x54
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b004      	add	sp, #16
 8001eac:	bdb0      	pop	{r4, r5, r7, pc}
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	fffffefe 	.word	0xfffffefe

08001eb4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001edc:	46c0      	nop			@ (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eec:	46c0      	nop			@ (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efe:	2317      	movs	r3, #23
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2254      	movs	r2, #84	@ 0x54
 8001f0e:	5c9b      	ldrb	r3, [r3, r2]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x24>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e1c0      	b.n	800229a <HAL_ADC_ConfigChannel+0x3a6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2254      	movs	r2, #84	@ 0x54
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff fc4f 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d000      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x3c>
 8001f2e:	e1a3      	b.n	8002278 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d100      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x46>
 8001f38:	e143      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d004      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f4a:	4ac1      	ldr	r2, [pc, #772]	@ (8002250 <HAL_ADC_ConfigChannel+0x35c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0019      	movs	r1, r3
 8001f5a:	0010      	movs	r0, r2
 8001f5c:	f7ff fb62 	bl	8001624 <LL_ADC_REG_SetSequencerChAdd>
 8001f60:	e0c9      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	211f      	movs	r1, #31
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	210f      	movs	r1, #15
 8001f70:	4099      	lsls	r1, r3
 8001f72:	000b      	movs	r3, r1
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	035b      	lsls	r3, r3, #13
 8001f80:	0b5b      	lsrs	r3, r3, #13
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x9c>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	e098      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	d000      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0xa8>
 8001f9a:	e091      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x1cc>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d000      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0xb4>
 8001fa6:	e089      	b.n	80020bc <HAL_ADC_ConfigChannel+0x1c8>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2204      	movs	r2, #4
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d000      	beq.n	8001fb4 <HAL_ADC_ConfigChannel+0xc0>
 8001fb2:	e081      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x1c4>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d000      	beq.n	8001fc0 <HAL_ADC_ConfigChannel+0xcc>
 8001fbe:	e079      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x1c0>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d000      	beq.n	8001fcc <HAL_ADC_ConfigChannel+0xd8>
 8001fca:	e071      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x1bc>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d000      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0xe4>
 8001fd6:	e069      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1b8>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2240      	movs	r2, #64	@ 0x40
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d000      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0xf0>
 8001fe2:	e061      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x1b4>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2280      	movs	r2, #128	@ 0x80
 8001fea:	4013      	ands	r3, r2
 8001fec:	d000      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0xfc>
 8001fee:	e059      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x1b0>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d151      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1ac>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4013      	ands	r3, r2
 8002006:	d149      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1a8>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4013      	ands	r3, r2
 8002012:	d141      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1a4>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	4013      	ands	r3, r2
 800201e:	d139      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1a0>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	015b      	lsls	r3, r3, #5
 8002028:	4013      	ands	r3, r2
 800202a:	d131      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x19c>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	019b      	lsls	r3, r3, #6
 8002034:	4013      	ands	r3, r2
 8002036:	d129      	bne.n	800208c <HAL_ADC_ConfigChannel+0x198>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	01db      	lsls	r3, r3, #7
 8002040:	4013      	ands	r3, r2
 8002042:	d121      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x194>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	4013      	ands	r3, r2
 800204e:	d119      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x190>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	025b      	lsls	r3, r3, #9
 8002058:	4013      	ands	r3, r2
 800205a:	d111      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x18c>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	@ 0x80
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	4013      	ands	r3, r2
 8002066:	d109      	bne.n	800207c <HAL_ADC_ConfigChannel+0x188>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	02db      	lsls	r3, r3, #11
 8002070:	4013      	ands	r3, r2
 8002072:	d001      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x184>
 8002074:	2312      	movs	r3, #18
 8002076:	e024      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002078:	2300      	movs	r3, #0
 800207a:	e022      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 800207c:	2311      	movs	r3, #17
 800207e:	e020      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002080:	2310      	movs	r3, #16
 8002082:	e01e      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002084:	230f      	movs	r3, #15
 8002086:	e01c      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002088:	230e      	movs	r3, #14
 800208a:	e01a      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 800208c:	230d      	movs	r3, #13
 800208e:	e018      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002090:	230c      	movs	r3, #12
 8002092:	e016      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002094:	230b      	movs	r3, #11
 8002096:	e014      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002098:	230a      	movs	r3, #10
 800209a:	e012      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 800209c:	2309      	movs	r3, #9
 800209e:	e010      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020a0:	2308      	movs	r3, #8
 80020a2:	e00e      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020a4:	2307      	movs	r3, #7
 80020a6:	e00c      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020a8:	2306      	movs	r3, #6
 80020aa:	e00a      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020ac:	2305      	movs	r3, #5
 80020ae:	e008      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020b0:	2304      	movs	r3, #4
 80020b2:	e006      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020b4:	2303      	movs	r3, #3
 80020b6:	e004      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e002      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1ce>
 80020c0:	2300      	movs	r3, #0
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	6852      	ldr	r2, [r2, #4]
 80020c6:	201f      	movs	r0, #31
 80020c8:	4002      	ands	r2, r0
 80020ca:	4093      	lsls	r3, r2
 80020cc:	000a      	movs	r2, r1
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d808      	bhi.n	80020f6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	f7ff fa77 	bl	80015e4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	001a      	movs	r2, r3
 8002104:	f7ff fab2 	bl	800166c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db00      	blt.n	8002112 <HAL_ADC_ConfigChannel+0x21e>
 8002110:	e0bc      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002112:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <HAL_ADC_ConfigChannel+0x360>)
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fa13 	bl	8001540 <LL_ADC_GetCommonPathInternalCh>
 800211a:	0003      	movs	r3, r0
 800211c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a4d      	ldr	r2, [pc, #308]	@ (8002258 <HAL_ADC_ConfigChannel+0x364>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d122      	bne.n	800216e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002130:	d11d      	bne.n	800216e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2280      	movs	r2, #128	@ 0x80
 8002136:	0412      	lsls	r2, r2, #16
 8002138:	4313      	orrs	r3, r2
 800213a:	4a46      	ldr	r2, [pc, #280]	@ (8002254 <HAL_ADC_ConfigChannel+0x360>)
 800213c:	0019      	movs	r1, r3
 800213e:	0010      	movs	r0, r2
 8002140:	f7ff f9ea 	bl	8001518 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002144:	4b45      	ldr	r3, [pc, #276]	@ (800225c <HAL_ADC_ConfigChannel+0x368>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4945      	ldr	r1, [pc, #276]	@ (8002260 <HAL_ADC_ConfigChannel+0x36c>)
 800214a:	0018      	movs	r0, r3
 800214c:	f7fd ffda 	bl	8000104 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	0013      	movs	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	189b      	adds	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800215e:	e002      	b.n	8002166 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3b01      	subs	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800216c:	e08e      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a3c      	ldr	r2, [pc, #240]	@ (8002264 <HAL_ADC_ConfigChannel+0x370>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d10e      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	045b      	lsls	r3, r3, #17
 800217e:	4013      	ands	r3, r2
 8002180:	d109      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2280      	movs	r2, #128	@ 0x80
 8002186:	0452      	lsls	r2, r2, #17
 8002188:	4313      	orrs	r3, r2
 800218a:	4a32      	ldr	r2, [pc, #200]	@ (8002254 <HAL_ADC_ConfigChannel+0x360>)
 800218c:	0019      	movs	r1, r3
 800218e:	0010      	movs	r0, r2
 8002190:	f7ff f9c2 	bl	8001518 <LL_ADC_SetCommonPathInternalCh>
 8002194:	e07a      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a33      	ldr	r2, [pc, #204]	@ (8002268 <HAL_ADC_ConfigChannel+0x374>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d000      	beq.n	80021a2 <HAL_ADC_ConfigChannel+0x2ae>
 80021a0:	e074      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	03db      	lsls	r3, r3, #15
 80021a8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80021aa:	d000      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x2ba>
 80021ac:	e06e      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	03d2      	lsls	r2, r2, #15
 80021b4:	4313      	orrs	r3, r2
 80021b6:	4a27      	ldr	r2, [pc, #156]	@ (8002254 <HAL_ADC_ConfigChannel+0x360>)
 80021b8:	0019      	movs	r1, r3
 80021ba:	0010      	movs	r0, r2
 80021bc:	f7ff f9ac 	bl	8001518 <LL_ADC_SetCommonPathInternalCh>
 80021c0:	e064      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d004      	beq.n	80021d8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002250 <HAL_ADC_ConfigChannel+0x35c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d107      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0019      	movs	r1, r3
 80021e2:	0010      	movs	r0, r2
 80021e4:	f7ff fa2f 	bl	8001646 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da4d      	bge.n	800228c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f0:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <HAL_ADC_ConfigChannel+0x360>)
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff f9a4 	bl	8001540 <LL_ADC_GetCommonPathInternalCh>
 80021f8:	0003      	movs	r3, r0
 80021fa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <HAL_ADC_ConfigChannel+0x364>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a18      	ldr	r2, [pc, #96]	@ (800226c <HAL_ADC_ConfigChannel+0x378>)
 800220a:	4013      	ands	r3, r2
 800220c:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <HAL_ADC_ConfigChannel+0x360>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f7ff f981 	bl	8001518 <LL_ADC_SetCommonPathInternalCh>
 8002216:	e039      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a11      	ldr	r2, [pc, #68]	@ (8002264 <HAL_ADC_ConfigChannel+0x370>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d108      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <HAL_ADC_ConfigChannel+0x37c>)
 8002226:	4013      	ands	r3, r2
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_ADC_ConfigChannel+0x360>)
 800222a:	0019      	movs	r1, r3
 800222c:	0010      	movs	r0, r2
 800222e:	f7ff f973 	bl	8001518 <LL_ADC_SetCommonPathInternalCh>
 8002232:	e02b      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0b      	ldr	r2, [pc, #44]	@ (8002268 <HAL_ADC_ConfigChannel+0x374>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d126      	bne.n	800228c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4a0c      	ldr	r2, [pc, #48]	@ (8002274 <HAL_ADC_ConfigChannel+0x380>)
 8002242:	4013      	ands	r3, r2
 8002244:	4a03      	ldr	r2, [pc, #12]	@ (8002254 <HAL_ADC_ConfigChannel+0x360>)
 8002246:	0019      	movs	r1, r3
 8002248:	0010      	movs	r0, r2
 800224a:	f7ff f965 	bl	8001518 <LL_ADC_SetCommonPathInternalCh>
 800224e:	e01d      	b.n	800228c <HAL_ADC_ConfigChannel+0x398>
 8002250:	80000004 	.word	0x80000004
 8002254:	40012708 	.word	0x40012708
 8002258:	b0001000 	.word	0xb0001000
 800225c:	20000000 	.word	0x20000000
 8002260:	00030d40 	.word	0x00030d40
 8002264:	b8004000 	.word	0xb8004000
 8002268:	b4002000 	.word	0xb4002000
 800226c:	ff7fffff 	.word	0xff7fffff
 8002270:	feffffff 	.word	0xfeffffff
 8002274:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227c:	2220      	movs	r2, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002284:	2317      	movs	r3, #23
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2254      	movs	r2, #84	@ 0x54
 8002290:	2100      	movs	r1, #0
 8002292:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002294:	2317      	movs	r3, #23
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	781b      	ldrb	r3, [r3, #0]
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b006      	add	sp, #24
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			@ (mov r8, r8)

080022a4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff fa89 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d031      	beq.n	800231e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff fa4d 	bl	800175e <LL_ADC_IsDisableOngoing>
 80022c4:	1e03      	subs	r3, r0, #0
 80022c6:	d104      	bne.n	80022d2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fa69 	bl	80017a4 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022d2:	f7ff f917 	bl	8001504 <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80022da:	e01a      	b.n	8002312 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022dc:	f7ff f912 	bl	8001504 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d913      	bls.n	8002312 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2204      	movs	r2, #4
 80022f2:	4013      	ands	r3, r2
 80022f4:	d00d      	beq.n	8002312 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	2210      	movs	r2, #16
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	2201      	movs	r2, #1
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e006      	b.n	8002320 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2204      	movs	r2, #4
 800231a:	4013      	ands	r3, r2
 800231c:	d1de      	bne.n	80022dc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}

08002328 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff f9ff 	bl	800173c <LL_ADC_IsEnabled>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d000      	beq.n	8002344 <ADC_Enable+0x1c>
 8002342:	e069      	b.n	8002418 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4a36      	ldr	r2, [pc, #216]	@ (8002424 <ADC_Enable+0xfc>)
 800234c:	4013      	ands	r3, r2
 800234e:	d00d      	beq.n	800236c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	2210      	movs	r2, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	2201      	movs	r2, #1
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e056      	b.n	800241a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff f9bf 	bl	80016f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002376:	4b2c      	ldr	r3, [pc, #176]	@ (8002428 <ADC_Enable+0x100>)
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff f8e1 	bl	8001540 <LL_ADC_GetCommonPathInternalCh>
 800237e:	0002      	movs	r2, r0
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	4013      	ands	r3, r2
 8002386:	d00f      	beq.n	80023a8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002388:	4b28      	ldr	r3, [pc, #160]	@ (800242c <ADC_Enable+0x104>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4928      	ldr	r1, [pc, #160]	@ (8002430 <ADC_Enable+0x108>)
 800238e:	0018      	movs	r0, r3
 8002390:	f7fd feb8 	bl	8000104 <__udivsi3>
 8002394:	0003      	movs	r3, r0
 8002396:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002398:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800239a:	e002      	b.n	80023a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3b01      	subs	r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7e5b      	ldrb	r3, [r3, #25]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d033      	beq.n	8002418 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80023b0:	f7ff f8a8 	bl	8001504 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023b8:	e027      	b.n	800240a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff f9bc 	bl	800173c <LL_ADC_IsEnabled>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d104      	bne.n	80023d2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff f991 	bl	80016f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023d2:	f7ff f897 	bl	8001504 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d914      	bls.n	800240a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d00d      	beq.n	800240a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	2210      	movs	r2, #16
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	2201      	movs	r2, #1
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e007      	b.n	800241a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	2b01      	cmp	r3, #1
 8002416:	d1d0      	bne.n	80023ba <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b004      	add	sp, #16
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	80000017 	.word	0x80000017
 8002428:	40012708 	.word	0x40012708
 800242c:	20000000 	.word	0x20000000
 8002430:	00030d40 	.word	0x00030d40

08002434 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff f98c 	bl	800175e <LL_ADC_IsDisableOngoing>
 8002446:	0003      	movs	r3, r0
 8002448:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	f7ff f974 	bl	800173c <LL_ADC_IsEnabled>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d046      	beq.n	80024e6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d143      	bne.n	80024e6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2205      	movs	r2, #5
 8002466:	4013      	ands	r3, r2
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10d      	bne.n	8002488 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff f951 	bl	8001718 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2203      	movs	r2, #3
 800247c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800247e:	f7ff f841 	bl	8001504 <HAL_GetTick>
 8002482:	0003      	movs	r3, r0
 8002484:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002486:	e028      	b.n	80024da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	2210      	movs	r2, #16
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002498:	2201      	movs	r2, #1
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e021      	b.n	80024e8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024a4:	f7ff f82e 	bl	8001504 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d913      	bls.n	80024da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	d00d      	beq.n	80024da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	2210      	movs	r2, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	2201      	movs	r2, #1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e006      	b.n	80024e8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d1de      	bne.n	80024a4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	2250      	movs	r2, #80	@ 0x50
 8002504:	4013      	ands	r3, r2
 8002506:	d142      	bne.n	800258e <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	2280      	movs	r2, #128	@ 0x80
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0018      	movs	r0, r3
 800251c:	f7ff f851 	bl	80015c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d02e      	beq.n	8002582 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	7e9b      	ldrb	r3, [r3, #26]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12a      	bne.n	8002582 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2208      	movs	r2, #8
 8002534:	4013      	ands	r3, r2
 8002536:	2b08      	cmp	r3, #8
 8002538:	d123      	bne.n	8002582 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0018      	movs	r0, r3
 8002540:	f7ff f942 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d110      	bne.n	800256a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	210c      	movs	r1, #12
 8002554:	438a      	bics	r2, r1
 8002556:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	4a16      	ldr	r2, [pc, #88]	@ (80025b8 <ADC_DMAConvCplt+0xc8>)
 800255e:	4013      	ands	r3, r2
 8002560:	2201      	movs	r2, #1
 8002562:	431a      	orrs	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	659a      	str	r2, [r3, #88]	@ 0x58
 8002568:	e00b      	b.n	8002582 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	2220      	movs	r2, #32
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257a:	2201      	movs	r2, #1
 800257c:	431a      	orrs	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	0010      	movs	r0, r2
 800258a:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800258c:	e010      	b.n	80025b0 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	2210      	movs	r2, #16
 8002594:	4013      	ands	r3, r2
 8002596:	d005      	beq.n	80025a4 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	0010      	movs	r0, r2
 80025a0:	4798      	blx	r3
}
 80025a2:	e005      	b.n	80025b0 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	0010      	movs	r0, r2
 80025ae:	4798      	blx	r3
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b004      	add	sp, #16
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	fffffefe 	.word	0xfffffefe

080025bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	0010      	movs	r0, r2
 80025d2:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d4:	46c0      	nop			@ (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b004      	add	sp, #16
 80025da:	bd80      	pop	{r7, pc}

080025dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	2204      	movs	r2, #4
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	0010      	movs	r0, r2
 800260a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800262c:	46c0      	nop			@ (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	0002      	movs	r2, r0
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b7f      	cmp	r3, #127	@ 0x7f
 8002656:	d809      	bhi.n	800266c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	001a      	movs	r2, r3
 800265e:	231f      	movs	r3, #31
 8002660:	401a      	ands	r2, r3
 8002662:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_EnableIRQ+0x30>)
 8002664:	2101      	movs	r1, #1
 8002666:	4091      	lsls	r1, r2
 8002668:	000a      	movs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	0002      	movs	r2, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b7f      	cmp	r3, #127	@ 0x7f
 800268c:	d828      	bhi.n	80026e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800268e:	4a2f      	ldr	r2, [pc, #188]	@ (800274c <__NVIC_SetPriority+0xd4>)
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b25b      	sxtb	r3, r3
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	33c0      	adds	r3, #192	@ 0xc0
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	589b      	ldr	r3, [r3, r2]
 800269e:	1dfa      	adds	r2, r7, #7
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	0011      	movs	r1, r2
 80026a4:	2203      	movs	r2, #3
 80026a6:	400a      	ands	r2, r1
 80026a8:	00d2      	lsls	r2, r2, #3
 80026aa:	21ff      	movs	r1, #255	@ 0xff
 80026ac:	4091      	lsls	r1, r2
 80026ae:	000a      	movs	r2, r1
 80026b0:	43d2      	mvns	r2, r2
 80026b2:	401a      	ands	r2, r3
 80026b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	22ff      	movs	r2, #255	@ 0xff
 80026bc:	401a      	ands	r2, r3
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	0018      	movs	r0, r3
 80026c4:	2303      	movs	r3, #3
 80026c6:	4003      	ands	r3, r0
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026cc:	481f      	ldr	r0, [pc, #124]	@ (800274c <__NVIC_SetPriority+0xd4>)
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	430a      	orrs	r2, r1
 80026d8:	33c0      	adds	r3, #192	@ 0xc0
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026de:	e031      	b.n	8002744 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002750 <__NVIC_SetPriority+0xd8>)
 80026e2:	1dfb      	adds	r3, r7, #7
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	0019      	movs	r1, r3
 80026e8:	230f      	movs	r3, #15
 80026ea:	400b      	ands	r3, r1
 80026ec:	3b08      	subs	r3, #8
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3306      	adds	r3, #6
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	18d3      	adds	r3, r2, r3
 80026f6:	3304      	adds	r3, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	1dfa      	adds	r2, r7, #7
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	0011      	movs	r1, r2
 8002700:	2203      	movs	r2, #3
 8002702:	400a      	ands	r2, r1
 8002704:	00d2      	lsls	r2, r2, #3
 8002706:	21ff      	movs	r1, #255	@ 0xff
 8002708:	4091      	lsls	r1, r2
 800270a:	000a      	movs	r2, r1
 800270c:	43d2      	mvns	r2, r2
 800270e:	401a      	ands	r2, r3
 8002710:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	22ff      	movs	r2, #255	@ 0xff
 8002718:	401a      	ands	r2, r3
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	0018      	movs	r0, r3
 8002720:	2303      	movs	r3, #3
 8002722:	4003      	ands	r3, r0
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002728:	4809      	ldr	r0, [pc, #36]	@ (8002750 <__NVIC_SetPriority+0xd8>)
 800272a:	1dfb      	adds	r3, r7, #7
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	001c      	movs	r4, r3
 8002730:	230f      	movs	r3, #15
 8002732:	4023      	ands	r3, r4
 8002734:	3b08      	subs	r3, #8
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	430a      	orrs	r2, r1
 800273a:	3306      	adds	r3, #6
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	18c3      	adds	r3, r0, r3
 8002740:	3304      	adds	r3, #4
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b003      	add	sp, #12
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	1e5a      	subs	r2, r3, #1
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	045b      	lsls	r3, r3, #17
 8002764:	429a      	cmp	r2, r3
 8002766:	d301      	bcc.n	800276c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002768:	2301      	movs	r3, #1
 800276a:	e010      	b.n	800278e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <SysTick_Config+0x44>)
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	3a01      	subs	r2, #1
 8002772:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002774:	2301      	movs	r3, #1
 8002776:	425b      	negs	r3, r3
 8002778:	2103      	movs	r1, #3
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff ff7c 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <SysTick_Config+0x44>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <SysTick_Config+0x44>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	210f      	movs	r1, #15
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	1c02      	adds	r2, r0, #0
 80027ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b25b      	sxtb	r3, r3
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>
}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	0002      	movs	r2, r0
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	0018      	movs	r0, r3
 80027da:	f7ff ff33 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7ff ffaf 	bl	8002754 <SysTick_Config>
 80027f6:	0003      	movs	r3, r0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e077      	b.n	8002902 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a3d      	ldr	r2, [pc, #244]	@ (800290c <HAL_DMA_Init+0x10c>)
 8002818:	4694      	mov	ip, r2
 800281a:	4463      	add	r3, ip
 800281c:	2114      	movs	r1, #20
 800281e:	0018      	movs	r0, r3
 8002820:	f7fd fc70 	bl	8000104 <__udivsi3>
 8002824:	0003      	movs	r3, r0
 8002826:	009a      	lsls	r2, r3, #2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2225      	movs	r2, #37	@ 0x25
 8002830:	2102      	movs	r1, #2
 8002832:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4934      	ldr	r1, [pc, #208]	@ (8002910 <HAL_DMA_Init+0x110>)
 8002840:	400a      	ands	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f000 fa23 	bl	8002cc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	2380      	movs	r3, #128	@ 0x80
 8002888:	01db      	lsls	r3, r3, #7
 800288a:	429a      	cmp	r2, r3
 800288c:	d102      	bne.n	8002894 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289c:	213f      	movs	r1, #63	@ 0x3f
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028aa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d011      	beq.n	80028d8 <HAL_DMA_Init+0xd8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d80d      	bhi.n	80028d8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 fa2e 	bl	8002d20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	e008      	b.n	80028ea <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2225      	movs	r2, #37	@ 0x25
 80028f4:	2101      	movs	r1, #1
 80028f6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	@ 0x24
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	bffdfff8 	.word	0xbffdfff8
 8002910:	ffff800f 	.word	0xffff800f

08002914 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2317      	movs	r3, #23
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2224      	movs	r2, #36	@ 0x24
 800292e:	5c9b      	ldrb	r3, [r3, r2]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_DMA_Start_IT+0x24>
 8002934:	2302      	movs	r3, #2
 8002936:	e06f      	b.n	8002a18 <HAL_DMA_Start_IT+0x104>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2224      	movs	r2, #36	@ 0x24
 800293c:	2101      	movs	r1, #1
 800293e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2225      	movs	r2, #37	@ 0x25
 8002944:	5c9b      	ldrb	r3, [r3, r2]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d157      	bne.n	80029fc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2225      	movs	r2, #37	@ 0x25
 8002950:	2102      	movs	r1, #2
 8002952:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	438a      	bics	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f969 	bl	8002c48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	210e      	movs	r1, #14
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e00f      	b.n	80029b0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2104      	movs	r1, #4
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	210a      	movs	r1, #10
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	025b      	lsls	r3, r3, #9
 80029ba:	4013      	ands	r3, r2
 80029bc:	d008      	beq.n	80029d0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	2180      	movs	r1, #128	@ 0x80
 80029ca:	0049      	lsls	r1, r1, #1
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e2:	2180      	movs	r1, #128	@ 0x80
 80029e4:	0049      	lsls	r1, r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2101      	movs	r1, #1
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e00a      	b.n	8002a12 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2280      	movs	r2, #128	@ 0x80
 8002a00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2224      	movs	r2, #36	@ 0x24
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002a0a:	2317      	movs	r3, #23
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002a12:	2317      	movs	r3, #23
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b006      	add	sp, #24
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e050      	b.n	8002ad4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2225      	movs	r2, #37	@ 0x25
 8002a36:	5c9b      	ldrb	r3, [r3, r2]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d008      	beq.n	8002a50 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2204      	movs	r2, #4
 8002a42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	@ 0x24
 8002a48:	2100      	movs	r1, #0
 8002a4a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e041      	b.n	8002ad4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	210e      	movs	r1, #14
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	491c      	ldr	r1, [pc, #112]	@ (8002adc <HAL_DMA_Abort+0xbc>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002a80:	4b17      	ldr	r3, [pc, #92]	@ (8002ae0 <HAL_DMA_Abort+0xc0>)
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	221c      	movs	r2, #28
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <HAL_DMA_Abort+0xc0>)
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a9e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab2:	490a      	ldr	r1, [pc, #40]	@ (8002adc <HAL_DMA_Abort+0xbc>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ac0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2225      	movs	r2, #37	@ 0x25
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2224      	movs	r2, #36	@ 0x24
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	fffffeff 	.word	0xfffffeff
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002aec:	4b55      	ldr	r3, [pc, #340]	@ (8002c44 <HAL_DMA_IRQHandler+0x160>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	221c      	movs	r2, #28
 8002b00:	4013      	ands	r3, r2
 8002b02:	2204      	movs	r2, #4
 8002b04:	409a      	lsls	r2, r3
 8002b06:	0013      	movs	r3, r2
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d027      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x7a>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2204      	movs	r2, #4
 8002b12:	4013      	ands	r3, r2
 8002b14:	d023      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d107      	bne.n	8002b32 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	438a      	bics	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002b32:	4b44      	ldr	r3, [pc, #272]	@ (8002c44 <HAL_DMA_IRQHandler+0x160>)
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	221c      	movs	r2, #28
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2204      	movs	r2, #4
 8002b40:	409a      	lsls	r2, r3
 8002b42:	4b40      	ldr	r3, [pc, #256]	@ (8002c44 <HAL_DMA_IRQHandler+0x160>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d100      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x6e>
 8002b50:	e073      	b.n	8002c3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	0010      	movs	r0, r2
 8002b5a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002b5c:	e06d      	b.n	8002c3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	221c      	movs	r2, #28
 8002b64:	4013      	ands	r3, r2
 8002b66:	2202      	movs	r2, #2
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d02e      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xec>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2202      	movs	r2, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	d02a      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2220      	movs	r2, #32
 8002b82:	4013      	ands	r3, r2
 8002b84:	d10b      	bne.n	8002b9e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	210a      	movs	r1, #10
 8002b92:	438a      	bics	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2225      	movs	r2, #37	@ 0x25
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002b9e:	4b29      	ldr	r3, [pc, #164]	@ (8002c44 <HAL_DMA_IRQHandler+0x160>)
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	221c      	movs	r2, #28
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2202      	movs	r2, #2
 8002bac:	409a      	lsls	r2, r3
 8002bae:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <HAL_DMA_IRQHandler+0x160>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	@ 0x24
 8002bb8:	2100      	movs	r1, #0
 8002bba:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d03a      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	0010      	movs	r0, r2
 8002bcc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002bce:	e034      	b.n	8002c3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	221c      	movs	r2, #28
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2208      	movs	r2, #8
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	0013      	movs	r3, r2
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4013      	ands	r3, r2
 8002be2:	d02b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x158>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2208      	movs	r2, #8
 8002be8:	4013      	ands	r3, r2
 8002bea:	d027      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	210e      	movs	r1, #14
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002bfc:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <HAL_DMA_IRQHandler+0x160>)
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	221c      	movs	r2, #28
 8002c06:	4013      	ands	r3, r2
 8002c08:	2201      	movs	r2, #1
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <HAL_DMA_IRQHandler+0x160>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2225      	movs	r2, #37	@ 0x25
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	@ 0x24
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	0010      	movs	r0, r2
 8002c38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	46c0      	nop			@ (mov r8, r8)
}
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40020000 	.word	0x40020000

08002c48 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002c70:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002c72:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <DMA_SetConfig+0x7c>)
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	221c      	movs	r2, #28
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2201      	movs	r2, #1
 8002c80:	409a      	lsls	r2, r3
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <DMA_SetConfig+0x7c>)
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d108      	bne.n	8002caa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ca8:	e007      	b.n	8002cba <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	60da      	str	r2, [r3, #12]
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
 8002cc4:	40020000 	.word	0x40020000

08002cc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	4a10      	ldr	r2, [pc, #64]	@ (8002d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002cd8:	4694      	mov	ip, r2
 8002cda:	4463      	add	r3, ip
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	001a      	movs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	001a      	movs	r2, r3
 8002cea:	23ff      	movs	r3, #255	@ 0xff
 8002cec:	4013      	ands	r3, r2
 8002cee:	3b08      	subs	r3, #8
 8002cf0:	2114      	movs	r1, #20
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7fd fa06 	bl	8000104 <__udivsi3>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a07      	ldr	r2, [pc, #28]	@ (8002d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002d00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	221f      	movs	r2, #31
 8002d06:	4013      	ands	r3, r2
 8002d08:	2201      	movs	r2, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002d10:	46c0      	nop			@ (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b004      	add	sp, #16
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	10008200 	.word	0x10008200
 8002d1c:	40020880 	.word	0x40020880

08002d20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	223f      	movs	r2, #63	@ 0x3f
 8002d2e:	4013      	ands	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d36:	4694      	mov	ip, r2
 8002d38:	4463      	add	r3, ip
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a07      	ldr	r2, [pc, #28]	@ (8002d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2201      	movs	r2, #1
 8002d52:	409a      	lsls	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b004      	add	sp, #16
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	1000823f 	.word	0x1000823f
 8002d64:	40020940 	.word	0x40020940

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d76:	e147      	b.n	8003008 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4091      	lsls	r1, r2
 8002d82:	000a      	movs	r2, r1
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d100      	bne.n	8002d90 <HAL_GPIO_Init+0x28>
 8002d8e:	e138      	b.n	8003002 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2203      	movs	r2, #3
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d005      	beq.n	8002da8 <HAL_GPIO_Init+0x40>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2203      	movs	r2, #3
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d130      	bne.n	8002e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	409a      	lsls	r2, r3
 8002db6:	0013      	movs	r3, r2
 8002db8:	43da      	mvns	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	0013      	movs	r3, r2
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dde:	2201      	movs	r2, #1
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
 8002de4:	0013      	movs	r3, r2
 8002de6:	43da      	mvns	r2, r3
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	2201      	movs	r2, #1
 8002df6:	401a      	ands	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	0013      	movs	r3, r2
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d017      	beq.n	8002e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	409a      	lsls	r2, r3
 8002e24:	0013      	movs	r3, r2
 8002e26:	43da      	mvns	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	409a      	lsls	r2, r3
 8002e38:	0013      	movs	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d123      	bne.n	8002e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	0092      	lsls	r2, r2, #2
 8002e5c:	58d3      	ldr	r3, [r2, r3]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2207      	movs	r2, #7
 8002e64:	4013      	ands	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	220f      	movs	r2, #15
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2107      	movs	r1, #7
 8002e7e:	400b      	ands	r3, r1
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	409a      	lsls	r2, r3
 8002e84:	0013      	movs	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	08da      	lsrs	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3208      	adds	r2, #8
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	6939      	ldr	r1, [r7, #16]
 8002e98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	401a      	ands	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	23c0      	movs	r3, #192	@ 0xc0
 8002ed4:	029b      	lsls	r3, r3, #10
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d100      	bne.n	8002edc <HAL_GPIO_Init+0x174>
 8002eda:	e092      	b.n	8003002 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002edc:	4a50      	ldr	r2, [pc, #320]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	3318      	adds	r3, #24
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	589b      	ldr	r3, [r3, r2]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2203      	movs	r2, #3
 8002eee:	4013      	ands	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	23a0      	movs	r3, #160	@ 0xa0
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x1ca>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a45      	ldr	r2, [pc, #276]	@ (8003024 <HAL_GPIO_Init+0x2bc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x1c6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a44      	ldr	r2, [pc, #272]	@ (8003028 <HAL_GPIO_Init+0x2c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x1c2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a43      	ldr	r2, [pc, #268]	@ (800302c <HAL_GPIO_Init+0x2c4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x1be>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x1cc>
 8002f26:	2305      	movs	r3, #5
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x1cc>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x1cc>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x1cc>
 8002f32:	2300      	movs	r3, #0
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	2103      	movs	r1, #3
 8002f38:	400a      	ands	r2, r1
 8002f3a:	00d2      	lsls	r2, r2, #3
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002f44:	4936      	ldr	r1, [pc, #216]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f52:	4b33      	ldr	r3, [pc, #204]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	2380      	movs	r3, #128	@ 0x80
 8002f68:	035b      	lsls	r3, r3, #13
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f76:	4b2a      	ldr	r3, [pc, #168]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002f7c:	4b28      	ldr	r3, [pc, #160]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43da      	mvns	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	039b      	lsls	r3, r3, #14
 8002f94:	4013      	ands	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002fa8:	2384      	movs	r3, #132	@ 0x84
 8002faa:	58d3      	ldr	r3, [r2, r3]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fcc:	4914      	ldr	r1, [pc, #80]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002fce:	2284      	movs	r2, #132	@ 0x84
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002fd4:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002fd6:	2380      	movs	r3, #128	@ 0x80
 8002fd8:	58d3      	ldr	r3, [r2, r3]
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	025b      	lsls	r3, r3, #9
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ffa:	4909      	ldr	r1, [pc, #36]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002ffc:	2280      	movs	r2, #128	@ 0x80
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	3301      	adds	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	40da      	lsrs	r2, r3
 8003010:	1e13      	subs	r3, r2, #0
 8003012:	d000      	beq.n	8003016 <HAL_GPIO_Init+0x2ae>
 8003014:	e6b0      	b.n	8002d78 <HAL_GPIO_Init+0x10>
  }
}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	46c0      	nop			@ (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b006      	add	sp, #24
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021800 	.word	0x40021800
 8003024:	50000400 	.word	0x50000400
 8003028:	50000800 	.word	0x50000800
 800302c:	50000c00 	.word	0x50000c00

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	0008      	movs	r0, r1
 800303a:	0011      	movs	r1, r2
 800303c:	1cbb      	adds	r3, r7, #2
 800303e:	1c02      	adds	r2, r0, #0
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	1c7b      	adds	r3, r7, #1
 8003044:	1c0a      	adds	r2, r1, #0
 8003046:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003048:	1c7b      	adds	r3, r7, #1
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003050:	1cbb      	adds	r3, r7, #2
 8003052:	881a      	ldrh	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003058:	e003      	b.n	8003062 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800305a:	1cbb      	adds	r3, r7, #2
 800305c:	881a      	ldrh	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800307a:	4013      	ands	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	2380      	movs	r3, #128	@ 0x80
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d11f      	bne.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003090:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	0013      	movs	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	189b      	adds	r3, r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4912      	ldr	r1, [pc, #72]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800309e:	0018      	movs	r0, r3
 80030a0:	f7fd f830 	bl	8000104 <__udivsi3>
 80030a4:	0003      	movs	r3, r0
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030aa:	e008      	b.n	80030be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e001      	b.n	80030be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e009      	b.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030be:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	401a      	ands	r2, r3
 80030c8:	2380      	movs	r3, #128	@ 0x80
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d0ed      	beq.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	40007000 	.word	0x40007000
 80030e0:	fffff9ff 	.word	0xfffff9ff
 80030e4:	20000000 	.word	0x20000000
 80030e8:	000f4240 	.word	0x000f4240

080030ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80030f0:	4b03      	ldr	r3, [pc, #12]	@ (8003100 <LL_RCC_GetAPB1Prescaler+0x14>)
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	23e0      	movs	r3, #224	@ 0xe0
 80030f6:	01db      	lsls	r3, r3, #7
 80030f8:	4013      	ands	r3, r2
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000

08003104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e2fe      	b.n	8003714 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	d100      	bne.n	8003122 <HAL_RCC_OscConfig+0x1e>
 8003120:	e07c      	b.n	800321c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4bc3      	ldr	r3, [pc, #780]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2238      	movs	r2, #56	@ 0x38
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312c:	4bc0      	ldr	r3, [pc, #768]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2203      	movs	r2, #3
 8003132:	4013      	ands	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b10      	cmp	r3, #16
 800313a:	d102      	bne.n	8003142 <HAL_RCC_OscConfig+0x3e>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d002      	beq.n	8003148 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4bb9      	ldr	r3, [pc, #740]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	029b      	lsls	r3, r3, #10
 8003150:	4013      	ands	r3, r2
 8003152:	d062      	beq.n	800321a <HAL_RCC_OscConfig+0x116>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d15e      	bne.n	800321a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e2d9      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	025b      	lsls	r3, r3, #9
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x78>
 800316c:	4bb0      	ldr	r3, [pc, #704]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4baf      	ldr	r3, [pc, #700]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003172:	2180      	movs	r1, #128	@ 0x80
 8003174:	0249      	lsls	r1, r1, #9
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e020      	b.n	80031be <HAL_RCC_OscConfig+0xba>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	23a0      	movs	r3, #160	@ 0xa0
 8003182:	02db      	lsls	r3, r3, #11
 8003184:	429a      	cmp	r2, r3
 8003186:	d10e      	bne.n	80031a6 <HAL_RCC_OscConfig+0xa2>
 8003188:	4ba9      	ldr	r3, [pc, #676]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4ba8      	ldr	r3, [pc, #672]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800318e:	2180      	movs	r1, #128	@ 0x80
 8003190:	02c9      	lsls	r1, r1, #11
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	4ba6      	ldr	r3, [pc, #664]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4ba5      	ldr	r3, [pc, #660]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800319c:	2180      	movs	r1, #128	@ 0x80
 800319e:	0249      	lsls	r1, r1, #9
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e00b      	b.n	80031be <HAL_RCC_OscConfig+0xba>
 80031a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031ac:	49a1      	ldr	r1, [pc, #644]	@ (8003434 <HAL_RCC_OscConfig+0x330>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031b8:	499f      	ldr	r1, [pc, #636]	@ (8003438 <HAL_RCC_OscConfig+0x334>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d014      	beq.n	80031f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe f99d 	bl	8001504 <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe f998 	bl	8001504 <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e298      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e2:	4b93      	ldr	r3, [pc, #588]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	029b      	lsls	r3, r3, #10
 80031ea:	4013      	ands	r3, r2
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xcc>
 80031ee:	e015      	b.n	800321c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe f988 	bl	8001504 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fa:	f7fe f983 	bl	8001504 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	@ 0x64
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e283      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320c:	4b88      	ldr	r3, [pc, #544]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	4013      	ands	r3, r2
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0xf6>
 8003218:	e000      	b.n	800321c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2202      	movs	r2, #2
 8003222:	4013      	ands	r3, r2
 8003224:	d100      	bne.n	8003228 <HAL_RCC_OscConfig+0x124>
 8003226:	e099      	b.n	800335c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003228:	4b81      	ldr	r3, [pc, #516]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2238      	movs	r2, #56	@ 0x38
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003232:	4b7f      	ldr	r3, [pc, #508]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2203      	movs	r2, #3
 8003238:	4013      	ands	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b10      	cmp	r3, #16
 8003240:	d102      	bne.n	8003248 <HAL_RCC_OscConfig+0x144>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d002      	beq.n	800324e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d135      	bne.n	80032ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800324e:	4b78      	ldr	r3, [pc, #480]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4013      	ands	r3, r2
 8003258:	d005      	beq.n	8003266 <HAL_RCC_OscConfig+0x162>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e256      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4a74      	ldr	r2, [pc, #464]	@ (800343c <HAL_RCC_OscConfig+0x338>)
 800326c:	4013      	ands	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	4b6e      	ldr	r3, [pc, #440]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d112      	bne.n	80032a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003282:	4b6b      	ldr	r3, [pc, #428]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6e      	ldr	r2, [pc, #440]	@ (8003440 <HAL_RCC_OscConfig+0x33c>)
 8003288:	4013      	ands	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	4b67      	ldr	r3, [pc, #412]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003296:	4b66      	ldr	r3, [pc, #408]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	0adb      	lsrs	r3, r3, #11
 800329c:	2207      	movs	r2, #7
 800329e:	4013      	ands	r3, r2
 80032a0:	4a68      	ldr	r2, [pc, #416]	@ (8003444 <HAL_RCC_OscConfig+0x340>)
 80032a2:	40da      	lsrs	r2, r3
 80032a4:	4b68      	ldr	r3, [pc, #416]	@ (8003448 <HAL_RCC_OscConfig+0x344>)
 80032a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032a8:	4b68      	ldr	r3, [pc, #416]	@ (800344c <HAL_RCC_OscConfig+0x348>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fe f8cd 	bl	800144c <HAL_InitTick>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d051      	beq.n	800335a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e22c      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d030      	beq.n	8003324 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003440 <HAL_RCC_OscConfig+0x33c>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	4b57      	ldr	r3, [pc, #348]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80032d6:	4b56      	ldr	r3, [pc, #344]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b55      	ldr	r3, [pc, #340]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80032dc:	2180      	movs	r1, #128	@ 0x80
 80032de:	0049      	lsls	r1, r1, #1
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe f90e 	bl	8001504 <HAL_GetTick>
 80032e8:	0003      	movs	r3, r0
 80032ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ee:	f7fe f909 	bl	8001504 <HAL_GetTick>
 80032f2:	0002      	movs	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e209      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003300:	4b4b      	ldr	r3, [pc, #300]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4013      	ands	r3, r2
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330c:	4b48      	ldr	r3, [pc, #288]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a4a      	ldr	r2, [pc, #296]	@ (800343c <HAL_RCC_OscConfig+0x338>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	4b44      	ldr	r3, [pc, #272]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	e01b      	b.n	800335c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003324:	4b42      	ldr	r3, [pc, #264]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b41      	ldr	r3, [pc, #260]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800332a:	4949      	ldr	r1, [pc, #292]	@ (8003450 <HAL_RCC_OscConfig+0x34c>)
 800332c:	400a      	ands	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe f8e8 	bl	8001504 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe f8e3 	bl	8001504 <HAL_GetTick>
 800333e:	0002      	movs	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1e3      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800334c:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4013      	ands	r3, r2
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x236>
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800335a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2208      	movs	r2, #8
 8003362:	4013      	ands	r3, r2
 8003364:	d047      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003366:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2238      	movs	r2, #56	@ 0x38
 800336c:	4013      	ands	r3, r2
 800336e:	2b18      	cmp	r3, #24
 8003370:	d10a      	bne.n	8003388 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003372:	4b2f      	ldr	r3, [pc, #188]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003376:	2202      	movs	r2, #2
 8003378:	4013      	ands	r3, r2
 800337a:	d03c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d138      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e1c5      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d019      	beq.n	80033c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003390:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003392:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003394:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003396:	2101      	movs	r1, #1
 8003398:	430a      	orrs	r2, r1
 800339a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe f8b2 	bl	8001504 <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fe f8ad 	bl	8001504 <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1ad      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033bc:	2202      	movs	r2, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	d0f1      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2a2>
 80033c2:	e018      	b.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80033c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80033c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033c8:	4b19      	ldr	r3, [pc, #100]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	438a      	bics	r2, r1
 80033ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f898 	bl	8001504 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033da:	f7fe f893 	bl	8001504 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e193      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ec:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80033ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f0:	2202      	movs	r2, #2
 80033f2:	4013      	ands	r3, r2
 80033f4:	d1f1      	bne.n	80033da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2204      	movs	r2, #4
 80033fc:	4013      	ands	r3, r2
 80033fe:	d100      	bne.n	8003402 <HAL_RCC_OscConfig+0x2fe>
 8003400:	e0c6      	b.n	8003590 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	231f      	movs	r3, #31
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800340a:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2238      	movs	r2, #56	@ 0x38
 8003410:	4013      	ands	r3, r2
 8003412:	2b20      	cmp	r3, #32
 8003414:	d11e      	bne.n	8003454 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003416:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	d100      	bne.n	8003422 <HAL_RCC_OscConfig+0x31e>
 8003420:	e0b6      	b.n	8003590 <HAL_RCC_OscConfig+0x48c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <HAL_RCC_OscConfig+0x328>
 800342a:	e0b1      	b.n	8003590 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e171      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
 8003430:	40021000 	.word	0x40021000
 8003434:	fffeffff 	.word	0xfffeffff
 8003438:	fffbffff 	.word	0xfffbffff
 800343c:	ffff80ff 	.word	0xffff80ff
 8003440:	ffffc7ff 	.word	0xffffc7ff
 8003444:	00f42400 	.word	0x00f42400
 8003448:	20000000 	.word	0x20000000
 800344c:	20000004 	.word	0x20000004
 8003450:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003454:	4bb1      	ldr	r3, [pc, #708]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	055b      	lsls	r3, r3, #21
 800345c:	4013      	ands	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_RCC_OscConfig+0x360>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x362>
 8003464:	2300      	movs	r3, #0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d011      	beq.n	800348e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	4bac      	ldr	r3, [pc, #688]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800346c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800346e:	4bab      	ldr	r3, [pc, #684]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003470:	2180      	movs	r1, #128	@ 0x80
 8003472:	0549      	lsls	r1, r1, #21
 8003474:	430a      	orrs	r2, r1
 8003476:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003478:	4ba8      	ldr	r3, [pc, #672]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800347a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	055b      	lsls	r3, r3, #21
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003486:	231f      	movs	r3, #31
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348e:	4ba4      	ldr	r3, [pc, #656]	@ (8003720 <HAL_RCC_OscConfig+0x61c>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4013      	ands	r3, r2
 8003498:	d11a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800349a:	4ba1      	ldr	r3, [pc, #644]	@ (8003720 <HAL_RCC_OscConfig+0x61c>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4ba0      	ldr	r3, [pc, #640]	@ (8003720 <HAL_RCC_OscConfig+0x61c>)
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	0049      	lsls	r1, r1, #1
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80034a8:	f7fe f82c 	bl	8001504 <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fe f827 	bl	8001504 <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e127      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c4:	4b96      	ldr	r3, [pc, #600]	@ (8003720 <HAL_RCC_OscConfig+0x61c>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4013      	ands	r3, r2
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x3e2>
 80034d8:	4b90      	ldr	r3, [pc, #576]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80034da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034dc:	4b8f      	ldr	r3, [pc, #572]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x41c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x404>
 80034ee:	4b8b      	ldr	r3, [pc, #556]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80034f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034f2:	4b8a      	ldr	r3, [pc, #552]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80034f4:	2104      	movs	r1, #4
 80034f6:	430a      	orrs	r2, r1
 80034f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034fa:	4b88      	ldr	r3, [pc, #544]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80034fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034fe:	4b87      	ldr	r3, [pc, #540]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003500:	2101      	movs	r1, #1
 8003502:	430a      	orrs	r2, r1
 8003504:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x41c>
 8003508:	4b84      	ldr	r3, [pc, #528]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800350a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800350c:	4b83      	ldr	r3, [pc, #524]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003514:	4b81      	ldr	r3, [pc, #516]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003516:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003518:	4b80      	ldr	r3, [pc, #512]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800351a:	2104      	movs	r1, #4
 800351c:	438a      	bics	r2, r1
 800351e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d014      	beq.n	8003552 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd ffec 	bl	8001504 <HAL_GetTick>
 800352c:	0003      	movs	r3, r0
 800352e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003530:	e009      	b.n	8003546 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fd ffe7 	bl	8001504 <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	4a79      	ldr	r2, [pc, #484]	@ (8003724 <HAL_RCC_OscConfig+0x620>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0e6      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003546:	4b75      	ldr	r3, [pc, #468]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	2202      	movs	r2, #2
 800354c:	4013      	ands	r3, r2
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x42e>
 8003550:	e013      	b.n	800357a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fd ffd7 	bl	8001504 <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800355a:	e009      	b.n	8003570 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fd ffd2 	bl	8001504 <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	4a6f      	ldr	r2, [pc, #444]	@ (8003724 <HAL_RCC_OscConfig+0x620>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0d1      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003570:	4b6a      	ldr	r3, [pc, #424]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003574:	2202      	movs	r2, #2
 8003576:	4013      	ands	r3, r2
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800357a:	231f      	movs	r3, #31
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b65      	ldr	r3, [pc, #404]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003588:	4b64      	ldr	r3, [pc, #400]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800358a:	4967      	ldr	r1, [pc, #412]	@ (8003728 <HAL_RCC_OscConfig+0x624>)
 800358c:	400a      	ands	r2, r1
 800358e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d100      	bne.n	800359a <HAL_RCC_OscConfig+0x496>
 8003598:	e0bb      	b.n	8003712 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800359a:	4b60      	ldr	r3, [pc, #384]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2238      	movs	r2, #56	@ 0x38
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d100      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4a4>
 80035a6:	e07b      	b.n	80036a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d156      	bne.n	800365e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b0:	4b5a      	ldr	r3, [pc, #360]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b59      	ldr	r3, [pc, #356]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80035b6:	495d      	ldr	r1, [pc, #372]	@ (800372c <HAL_RCC_OscConfig+0x628>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fd ffa2 	bl	8001504 <HAL_GetTick>
 80035c0:	0003      	movs	r3, r0
 80035c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fd ff9d 	bl	8001504 <HAL_GetTick>
 80035ca:	0002      	movs	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e09d      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d8:	4b50      	ldr	r3, [pc, #320]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	049b      	lsls	r3, r3, #18
 80035e0:	4013      	ands	r3, r2
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e4:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a51      	ldr	r2, [pc, #324]	@ (8003730 <HAL_RCC_OscConfig+0x62c>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003610:	431a      	orrs	r2, r3
 8003612:	4b42      	ldr	r3, [pc, #264]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003614:	430a      	orrs	r2, r1
 8003616:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	4b40      	ldr	r3, [pc, #256]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b3f      	ldr	r3, [pc, #252]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800361e:	2180      	movs	r1, #128	@ 0x80
 8003620:	0449      	lsls	r1, r1, #17
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003626:	4b3d      	ldr	r3, [pc, #244]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	4b3c      	ldr	r3, [pc, #240]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800362c:	2180      	movs	r1, #128	@ 0x80
 800362e:	0549      	lsls	r1, r1, #21
 8003630:	430a      	orrs	r2, r1
 8003632:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd ff66 	bl	8001504 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363e:	f7fd ff61 	bl	8001504 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e061      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003650:	4b32      	ldr	r3, [pc, #200]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	049b      	lsls	r3, r3, #18
 8003658:	4013      	ands	r3, r2
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x53a>
 800365c:	e059      	b.n	8003712 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b2f      	ldr	r3, [pc, #188]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b2e      	ldr	r3, [pc, #184]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003664:	4931      	ldr	r1, [pc, #196]	@ (800372c <HAL_RCC_OscConfig+0x628>)
 8003666:	400a      	ands	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fd ff4b 	bl	8001504 <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fd ff46 	bl	8001504 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e046      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003686:	4b25      	ldr	r3, [pc, #148]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	049b      	lsls	r3, r3, #18
 800368e:	4013      	ands	r3, r2
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003692:	4b22      	ldr	r3, [pc, #136]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	4b21      	ldr	r3, [pc, #132]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003698:	4926      	ldr	r1, [pc, #152]	@ (8003734 <HAL_RCC_OscConfig+0x630>)
 800369a:	400a      	ands	r2, r1
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	e038      	b.n	8003712 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e033      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2203      	movs	r2, #3
 80036b6:	401a      	ands	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d126      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2270      	movs	r2, #112	@ 0x70
 80036c4:	401a      	ands	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d11f      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	23fe      	movs	r3, #254	@ 0xfe
 80036d2:	01db      	lsls	r3, r3, #7
 80036d4:	401a      	ands	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d116      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	23f8      	movs	r3, #248	@ 0xf8
 80036e4:	039b      	lsls	r3, r3, #14
 80036e6:	401a      	ands	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d10e      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	23e0      	movs	r3, #224	@ 0xe0
 80036f4:	051b      	lsls	r3, r3, #20
 80036f6:	401a      	ands	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	0f5b      	lsrs	r3, r3, #29
 8003704:	075a      	lsls	r2, r3, #29
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b008      	add	sp, #32
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
 8003724:	00001388 	.word	0x00001388
 8003728:	efffffff 	.word	0xefffffff
 800372c:	feffffff 	.word	0xfeffffff
 8003730:	11c1808c 	.word	0x11c1808c
 8003734:	eefefffc 	.word	0xeefefffc

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0e9      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b76      	ldr	r3, [pc, #472]	@ (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2207      	movs	r2, #7
 8003752:	4013      	ands	r3, r2
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d91e      	bls.n	8003798 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b73      	ldr	r3, [pc, #460]	@ (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2207      	movs	r2, #7
 8003760:	4393      	bics	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	4b70      	ldr	r3, [pc, #448]	@ (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800376c:	f7fd feca 	bl	8001504 <HAL_GetTick>
 8003770:	0003      	movs	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003774:	e009      	b.n	800378a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003776:	f7fd fec5 	bl	8001504 <HAL_GetTick>
 800377a:	0002      	movs	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	4a6a      	ldr	r2, [pc, #424]	@ (800392c <HAL_RCC_ClockConfig+0x1f4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e0ca      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800378a:	4b67      	ldr	r3, [pc, #412]	@ (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2207      	movs	r2, #7
 8003790:	4013      	ands	r3, r2
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d1ee      	bne.n	8003776 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2202      	movs	r2, #2
 800379e:	4013      	ands	r3, r2
 80037a0:	d015      	beq.n	80037ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2204      	movs	r2, #4
 80037a8:	4013      	ands	r3, r2
 80037aa:	d006      	beq.n	80037ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037ac:	4b60      	ldr	r3, [pc, #384]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80037b2:	21e0      	movs	r1, #224	@ 0xe0
 80037b4:	01c9      	lsls	r1, r1, #7
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4a5d      	ldr	r2, [pc, #372]	@ (8003934 <HAL_RCC_ClockConfig+0x1fc>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	4b59      	ldr	r3, [pc, #356]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2201      	movs	r2, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	d057      	beq.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e0:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	029b      	lsls	r3, r3, #10
 80037e8:	4013      	ands	r3, r2
 80037ea:	d12b      	bne.n	8003844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e097      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	2380      	movs	r3, #128	@ 0x80
 80037fe:	049b      	lsls	r3, r3, #18
 8003800:	4013      	ands	r3, r2
 8003802:	d11f      	bne.n	8003844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e08b      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003810:	4b47      	ldr	r3, [pc, #284]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4013      	ands	r3, r2
 800381a:	d113      	bne.n	8003844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e07f      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d106      	bne.n	8003836 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003828:	4b41      	ldr	r3, [pc, #260]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 800382a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382c:	2202      	movs	r2, #2
 800382e:	4013      	ands	r3, r2
 8003830:	d108      	bne.n	8003844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e074      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003836:	4b3e      	ldr	r3, [pc, #248]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 8003838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383a:	2202      	movs	r2, #2
 800383c:	4013      	ands	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e06d      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003844:	4b3a      	ldr	r3, [pc, #232]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2207      	movs	r2, #7
 800384a:	4393      	bics	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003858:	f7fd fe54 	bl	8001504 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003860:	e009      	b.n	8003876 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003862:	f7fd fe4f 	bl	8001504 <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	4a2f      	ldr	r2, [pc, #188]	@ (800392c <HAL_RCC_ClockConfig+0x1f4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e054      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	4b2e      	ldr	r3, [pc, #184]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2238      	movs	r2, #56	@ 0x38
 800387c:	401a      	ands	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	429a      	cmp	r2, r3
 8003886:	d1ec      	bne.n	8003862 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2207      	movs	r2, #7
 800388e:	4013      	ands	r3, r2
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d21e      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b24      	ldr	r3, [pc, #144]	@ (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2207      	movs	r2, #7
 800389c:	4393      	bics	r3, r2
 800389e:	0019      	movs	r1, r3
 80038a0:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038a8:	f7fd fe2c 	bl	8001504 <HAL_GetTick>
 80038ac:	0003      	movs	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038b0:	e009      	b.n	80038c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7fd fe27 	bl	8001504 <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	4a1b      	ldr	r2, [pc, #108]	@ (800392c <HAL_RCC_ClockConfig+0x1f4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e02c      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038c6:	4b18      	ldr	r3, [pc, #96]	@ (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2207      	movs	r2, #7
 80038cc:	4013      	ands	r3, r2
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1ee      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2204      	movs	r2, #4
 80038da:	4013      	ands	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038de:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4a15      	ldr	r2, [pc, #84]	@ (8003938 <HAL_RCC_ClockConfig+0x200>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80038f2:	f000 f829 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 80038f6:	0001      	movs	r1, r0
 80038f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	220f      	movs	r2, #15
 8003900:	401a      	ands	r2, r3
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <HAL_RCC_ClockConfig+0x204>)
 8003904:	0092      	lsls	r2, r2, #2
 8003906:	58d3      	ldr	r3, [r2, r3]
 8003908:	221f      	movs	r2, #31
 800390a:	4013      	ands	r3, r2
 800390c:	000a      	movs	r2, r1
 800390e:	40da      	lsrs	r2, r3
 8003910:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_RCC_ClockConfig+0x208>)
 8003912:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_ClockConfig+0x20c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	0018      	movs	r0, r3
 800391a:	f7fd fd97 	bl	800144c <HAL_InitTick>
 800391e:	0003      	movs	r3, r0
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b004      	add	sp, #16
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40022000 	.word	0x40022000
 800392c:	00001388 	.word	0x00001388
 8003930:	40021000 	.word	0x40021000
 8003934:	fffff0ff 	.word	0xfffff0ff
 8003938:	ffff8fff 	.word	0xffff8fff
 800393c:	08006050 	.word	0x08006050
 8003940:	20000000 	.word	0x20000000
 8003944:	20000004 	.word	0x20000004

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2238      	movs	r2, #56	@ 0x38
 8003954:	4013      	ands	r3, r2
 8003956:	d10f      	bne.n	8003978 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003958:	4b39      	ldr	r3, [pc, #228]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0adb      	lsrs	r3, r3, #11
 800395e:	2207      	movs	r2, #7
 8003960:	4013      	ands	r3, r2
 8003962:	2201      	movs	r2, #1
 8003964:	409a      	lsls	r2, r3
 8003966:	0013      	movs	r3, r2
 8003968:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	4835      	ldr	r0, [pc, #212]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 800396e:	f7fc fbc9 	bl	8000104 <__udivsi3>
 8003972:	0003      	movs	r3, r0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e05d      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2238      	movs	r2, #56	@ 0x38
 800397e:	4013      	ands	r3, r2
 8003980:	2b08      	cmp	r3, #8
 8003982:	d102      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003984:	4b30      	ldr	r3, [pc, #192]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	e054      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800398a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2238      	movs	r2, #56	@ 0x38
 8003990:	4013      	ands	r3, r2
 8003992:	2b10      	cmp	r3, #16
 8003994:	d138      	bne.n	8003a08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003996:	4b2a      	ldr	r3, [pc, #168]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2203      	movs	r2, #3
 800399c:	4013      	ands	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a0:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	2207      	movs	r2, #7
 80039a8:	4013      	ands	r3, r2
 80039aa:	3301      	adds	r3, #1
 80039ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4824      	ldr	r0, [pc, #144]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x100>)
 80039b8:	f7fc fba4 	bl	8000104 <__udivsi3>
 80039bc:	0003      	movs	r3, r0
 80039be:	0019      	movs	r1, r3
 80039c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	227f      	movs	r2, #127	@ 0x7f
 80039c8:	4013      	ands	r3, r2
 80039ca:	434b      	muls	r3, r1
 80039cc:	617b      	str	r3, [r7, #20]
        break;
 80039ce:	e00d      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	481c      	ldr	r0, [pc, #112]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 80039d4:	f7fc fb96 	bl	8000104 <__udivsi3>
 80039d8:	0003      	movs	r3, r0
 80039da:	0019      	movs	r1, r3
 80039dc:	4b18      	ldr	r3, [pc, #96]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	227f      	movs	r2, #127	@ 0x7f
 80039e4:	4013      	ands	r3, r2
 80039e6:	434b      	muls	r3, r1
 80039e8:	617b      	str	r3, [r7, #20]
        break;
 80039ea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80039ec:	4b14      	ldr	r3, [pc, #80]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	0f5b      	lsrs	r3, r3, #29
 80039f2:	2207      	movs	r2, #7
 80039f4:	4013      	ands	r3, r2
 80039f6:	3301      	adds	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	6978      	ldr	r0, [r7, #20]
 80039fe:	f7fc fb81 	bl	8000104 <__udivsi3>
 8003a02:	0003      	movs	r3, r0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e015      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a08:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2238      	movs	r2, #56	@ 0x38
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d103      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a1c:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2238      	movs	r2, #56	@ 0x38
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b18      	cmp	r3, #24
 8003a26:	d103      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a28:	23fa      	movs	r3, #250	@ 0xfa
 8003a2a:	01db      	lsls	r3, r3, #7
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e001      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a34:	693b      	ldr	r3, [r7, #16]
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	40021000 	.word	0x40021000
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	007a1200 	.word	0x007a1200

08003a4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a50:	4b02      	ldr	r3, [pc, #8]	@ (8003a5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	20000000 	.word	0x20000000

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a64:	f7ff fff2 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a68:	0004      	movs	r4, r0
 8003a6a:	f7ff fb3f 	bl	80030ec <LL_RCC_GetAPB1Prescaler>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	0b1a      	lsrs	r2, r3, #12
 8003a72:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a74:	0092      	lsls	r2, r2, #2
 8003a76:	58d3      	ldr	r3, [r2, r3]
 8003a78:	221f      	movs	r2, #31
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	40dc      	lsrs	r4, r3
 8003a7e:	0023      	movs	r3, r4
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bdb0      	pop	{r4, r5, r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	08006090 	.word	0x08006090

08003a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e056      	b.n	8003b4c <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	223d      	movs	r2, #61	@ 0x3d
 8003aa2:	5c9b      	ldrb	r3, [r3, r2]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d113      	bne.n	8003ad2 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	223c      	movs	r2, #60	@ 0x3c
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f001 fb6b 	bl	8005190 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a23      	ldr	r2, [pc, #140]	@ (8003b54 <HAL_TIM_Base_Init+0xc8>)
 8003ac6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	0010      	movs	r0, r2
 8003ad0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	223d      	movs	r2, #61	@ 0x3d
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	0010      	movs	r0, r2
 8003ae6:	f001 f80f 	bl	8004b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2248      	movs	r2, #72	@ 0x48
 8003aee:	2101      	movs	r1, #1
 8003af0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	223e      	movs	r2, #62	@ 0x3e
 8003af6:	2101      	movs	r1, #1
 8003af8:	5499      	strb	r1, [r3, r2]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	223f      	movs	r2, #63	@ 0x3f
 8003afe:	2101      	movs	r1, #1
 8003b00:	5499      	strb	r1, [r3, r2]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2240      	movs	r2, #64	@ 0x40
 8003b06:	2101      	movs	r1, #1
 8003b08:	5499      	strb	r1, [r3, r2]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2241      	movs	r2, #65	@ 0x41
 8003b0e:	2101      	movs	r1, #1
 8003b10:	5499      	strb	r1, [r3, r2]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2242      	movs	r2, #66	@ 0x42
 8003b16:	2101      	movs	r1, #1
 8003b18:	5499      	strb	r1, [r3, r2]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2243      	movs	r2, #67	@ 0x43
 8003b1e:	2101      	movs	r1, #1
 8003b20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2244      	movs	r2, #68	@ 0x44
 8003b26:	2101      	movs	r1, #1
 8003b28:	5499      	strb	r1, [r3, r2]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2245      	movs	r2, #69	@ 0x45
 8003b2e:	2101      	movs	r1, #1
 8003b30:	5499      	strb	r1, [r3, r2]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2246      	movs	r2, #70	@ 0x46
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2247      	movs	r2, #71	@ 0x47
 8003b3e:	2101      	movs	r1, #1
 8003b40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	223d      	movs	r2, #61	@ 0x3d
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b002      	add	sp, #8
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	08000f19 	.word	0x08000f19

08003b58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	223d      	movs	r2, #61	@ 0x3d
 8003b64:	5c9b      	ldrb	r3, [r3, r2]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d001      	beq.n	8003b70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e035      	b.n	8003bdc <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	223d      	movs	r2, #61	@ 0x3d
 8003b74:	2102      	movs	r1, #2
 8003b76:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <HAL_TIM_Base_Start+0x8c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00a      	beq.n	8003b98 <HAL_TIM_Base_Start+0x40>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	05db      	lsls	r3, r3, #23
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d004      	beq.n	8003b98 <HAL_TIM_Base_Start+0x40>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a15      	ldr	r2, [pc, #84]	@ (8003be8 <HAL_TIM_Base_Start+0x90>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d116      	bne.n	8003bc6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	@ (8003bec <HAL_TIM_Base_Start+0x94>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d016      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x80>
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	025b      	lsls	r3, r3, #9
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d011      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	e008      	b.n	8003bd8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e000      	b.n	8003bda <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b004      	add	sp, #16
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40000400 	.word	0x40000400
 8003bec:	00010007 	.word	0x00010007

08003bf0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e056      	b.n	8003cb0 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	223d      	movs	r2, #61	@ 0x3d
 8003c06:	5c9b      	ldrb	r3, [r3, r2]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d113      	bne.n	8003c36 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	223c      	movs	r2, #60	@ 0x3c
 8003c12:	2100      	movs	r1, #0
 8003c14:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f001 fab9 	bl	8005190 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a23      	ldr	r2, [pc, #140]	@ (8003cb8 <HAL_TIM_OC_Init+0xc8>)
 8003c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	0010      	movs	r0, r2
 8003c34:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	223d      	movs	r2, #61	@ 0x3d
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	0019      	movs	r1, r3
 8003c48:	0010      	movs	r0, r2
 8003c4a:	f000 ff5d 	bl	8004b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2248      	movs	r2, #72	@ 0x48
 8003c52:	2101      	movs	r1, #1
 8003c54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	223e      	movs	r2, #62	@ 0x3e
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	223f      	movs	r2, #63	@ 0x3f
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2240      	movs	r2, #64	@ 0x40
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2241      	movs	r2, #65	@ 0x41
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2242      	movs	r2, #66	@ 0x42
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2243      	movs	r2, #67	@ 0x43
 8003c82:	2101      	movs	r1, #1
 8003c84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2244      	movs	r2, #68	@ 0x44
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	5499      	strb	r1, [r3, r2]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2245      	movs	r2, #69	@ 0x45
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2246      	movs	r2, #70	@ 0x46
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2247      	movs	r2, #71	@ 0x47
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	223d      	movs	r2, #61	@ 0x3d
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	08003cbd 	.word	0x08003cbd

08003cbc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	230f      	movs	r3, #15
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <HAL_TIM_OC_Start_IT+0x2a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	223e      	movs	r2, #62	@ 0x3e
 8003ce8:	5c9b      	ldrb	r3, [r3, r2]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	1e5a      	subs	r2, r3, #1
 8003cf0:	4193      	sbcs	r3, r2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e037      	b.n	8003d66 <HAL_TIM_OC_Start_IT+0x9a>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d108      	bne.n	8003d0e <HAL_TIM_OC_Start_IT+0x42>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	223f      	movs	r2, #63	@ 0x3f
 8003d00:	5c9b      	ldrb	r3, [r3, r2]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	1e5a      	subs	r2, r3, #1
 8003d08:	4193      	sbcs	r3, r2
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e02b      	b.n	8003d66 <HAL_TIM_OC_Start_IT+0x9a>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d108      	bne.n	8003d26 <HAL_TIM_OC_Start_IT+0x5a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2240      	movs	r2, #64	@ 0x40
 8003d18:	5c9b      	ldrb	r3, [r3, r2]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	1e5a      	subs	r2, r3, #1
 8003d20:	4193      	sbcs	r3, r2
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e01f      	b.n	8003d66 <HAL_TIM_OC_Start_IT+0x9a>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d108      	bne.n	8003d3e <HAL_TIM_OC_Start_IT+0x72>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2241      	movs	r2, #65	@ 0x41
 8003d30:	5c9b      	ldrb	r3, [r3, r2]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	4193      	sbcs	r3, r2
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e013      	b.n	8003d66 <HAL_TIM_OC_Start_IT+0x9a>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d108      	bne.n	8003d56 <HAL_TIM_OC_Start_IT+0x8a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2242      	movs	r2, #66	@ 0x42
 8003d48:	5c9b      	ldrb	r3, [r3, r2]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	1e5a      	subs	r2, r3, #1
 8003d50:	4193      	sbcs	r3, r2
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e007      	b.n	8003d66 <HAL_TIM_OC_Start_IT+0x9a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2243      	movs	r2, #67	@ 0x43
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	1e5a      	subs	r2, r3, #1
 8003d62:	4193      	sbcs	r3, r2
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0c4      	b.n	8003ef8 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_OC_Start_IT+0xb2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	223e      	movs	r2, #62	@ 0x3e
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]
 8003d7c:	e023      	b.n	8003dc6 <HAL_TIM_OC_Start_IT+0xfa>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_OC_Start_IT+0xc2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	223f      	movs	r2, #63	@ 0x3f
 8003d88:	2102      	movs	r1, #2
 8003d8a:	5499      	strb	r1, [r3, r2]
 8003d8c:	e01b      	b.n	8003dc6 <HAL_TIM_OC_Start_IT+0xfa>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_OC_Start_IT+0xd2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2240      	movs	r2, #64	@ 0x40
 8003d98:	2102      	movs	r1, #2
 8003d9a:	5499      	strb	r1, [r3, r2]
 8003d9c:	e013      	b.n	8003dc6 <HAL_TIM_OC_Start_IT+0xfa>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_OC_Start_IT+0xe2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2241      	movs	r2, #65	@ 0x41
 8003da8:	2102      	movs	r1, #2
 8003daa:	5499      	strb	r1, [r3, r2]
 8003dac:	e00b      	b.n	8003dc6 <HAL_TIM_OC_Start_IT+0xfa>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_OC_Start_IT+0xf2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2242      	movs	r2, #66	@ 0x42
 8003db8:	2102      	movs	r1, #2
 8003dba:	5499      	strb	r1, [r3, r2]
 8003dbc:	e003      	b.n	8003dc6 <HAL_TIM_OC_Start_IT+0xfa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2243      	movs	r2, #67	@ 0x43
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d02a      	beq.n	8003e22 <HAL_TIM_OC_Start_IT+0x156>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d830      	bhi.n	8003e34 <HAL_TIM_OC_Start_IT+0x168>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d01b      	beq.n	8003e10 <HAL_TIM_OC_Start_IT+0x144>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d82a      	bhi.n	8003e34 <HAL_TIM_OC_Start_IT+0x168>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_TIM_OC_Start_IT+0x120>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d009      	beq.n	8003dfe <HAL_TIM_OC_Start_IT+0x132>
 8003dea:	e023      	b.n	8003e34 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2102      	movs	r1, #2
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	60da      	str	r2, [r3, #12]
      break;
 8003dfc:	e01f      	b.n	8003e3e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2104      	movs	r1, #4
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	60da      	str	r2, [r3, #12]
      break;
 8003e0e:	e016      	b.n	8003e3e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2108      	movs	r1, #8
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	60da      	str	r2, [r3, #12]
      break;
 8003e20:	e00d      	b.n	8003e3e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2110      	movs	r1, #16
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	60da      	str	r2, [r3, #12]
      break;
 8003e32:	e004      	b.n	8003e3e <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e34:	230f      	movs	r3, #15
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
      break;
 8003e3c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003e3e:	230f      	movs	r3, #15
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d154      	bne.n	8003ef2 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6839      	ldr	r1, [r7, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	0018      	movs	r0, r3
 8003e52:	f001 f979 	bl	8005148 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a29      	ldr	r2, [pc, #164]	@ (8003f00 <HAL_TIM_OC_Start_IT+0x234>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <HAL_TIM_OC_Start_IT+0x1a8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a27      	ldr	r2, [pc, #156]	@ (8003f04 <HAL_TIM_OC_Start_IT+0x238>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIM_OC_Start_IT+0x1a8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a26      	ldr	r2, [pc, #152]	@ (8003f08 <HAL_TIM_OC_Start_IT+0x23c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_TIM_OC_Start_IT+0x1ac>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_TIM_OC_Start_IT+0x1ae>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2180      	movs	r1, #128	@ 0x80
 8003e8a:	0209      	lsls	r1, r1, #8
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1a      	ldr	r2, [pc, #104]	@ (8003f00 <HAL_TIM_OC_Start_IT+0x234>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00a      	beq.n	8003eb0 <HAL_TIM_OC_Start_IT+0x1e4>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	2380      	movs	r3, #128	@ 0x80
 8003ea0:	05db      	lsls	r3, r3, #23
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d004      	beq.n	8003eb0 <HAL_TIM_OC_Start_IT+0x1e4>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	@ (8003f0c <HAL_TIM_OC_Start_IT+0x240>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d116      	bne.n	8003ede <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <HAL_TIM_OC_Start_IT+0x244>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d016      	beq.n	8003ef0 <HAL_TIM_OC_Start_IT+0x224>
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	025b      	lsls	r3, r3, #9
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d011      	beq.n	8003ef0 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	e008      	b.n	8003ef0 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2101      	movs	r1, #1
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e000      	b.n	8003ef2 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003ef2:	230f      	movs	r3, #15
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	781b      	ldrb	r3, [r3, #0]
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	00010007 	.word	0x00010007

08003f14 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1e:	230f      	movs	r3, #15
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d02a      	beq.n	8003f82 <HAL_TIM_OC_Stop_IT+0x6e>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d830      	bhi.n	8003f94 <HAL_TIM_OC_Stop_IT+0x80>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d01b      	beq.n	8003f70 <HAL_TIM_OC_Stop_IT+0x5c>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d82a      	bhi.n	8003f94 <HAL_TIM_OC_Stop_IT+0x80>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_TIM_OC_Stop_IT+0x38>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d009      	beq.n	8003f5e <HAL_TIM_OC_Stop_IT+0x4a>
 8003f4a:	e023      	b.n	8003f94 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2102      	movs	r1, #2
 8003f58:	438a      	bics	r2, r1
 8003f5a:	60da      	str	r2, [r3, #12]
      break;
 8003f5c:	e01f      	b.n	8003f9e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2104      	movs	r1, #4
 8003f6a:	438a      	bics	r2, r1
 8003f6c:	60da      	str	r2, [r3, #12]
      break;
 8003f6e:	e016      	b.n	8003f9e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2108      	movs	r1, #8
 8003f7c:	438a      	bics	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]
      break;
 8003f80:	e00d      	b.n	8003f9e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2110      	movs	r1, #16
 8003f8e:	438a      	bics	r2, r1
 8003f90:	60da      	str	r2, [r3, #12]
      break;
 8003f92:	e004      	b.n	8003f9e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8003f94:	230f      	movs	r3, #15
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
      break;
 8003f9c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003f9e:	230f      	movs	r3, #15
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d000      	beq.n	8003faa <HAL_TIM_OC_Stop_IT+0x96>
 8003fa8:	e06e      	b.n	8004088 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f001 f8c8 	bl	8005148 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a36      	ldr	r2, [pc, #216]	@ (8004098 <HAL_TIM_OC_Stop_IT+0x184>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d009      	beq.n	8003fd6 <HAL_TIM_OC_Stop_IT+0xc2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a35      	ldr	r2, [pc, #212]	@ (800409c <HAL_TIM_OC_Stop_IT+0x188>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_TIM_OC_Stop_IT+0xc2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a33      	ldr	r2, [pc, #204]	@ (80040a0 <HAL_TIM_OC_Stop_IT+0x18c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_OC_Stop_IT+0xc6>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_TIM_OC_Stop_IT+0xc8>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d013      	beq.n	8004008 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80040a4 <HAL_TIM_OC_Stop_IT+0x190>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d10d      	bne.n	8004008 <HAL_TIM_OC_Stop_IT+0xf4>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <HAL_TIM_OC_Stop_IT+0x194>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_OC_Stop_IT+0xf4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	492a      	ldr	r1, [pc, #168]	@ (80040ac <HAL_TIM_OC_Stop_IT+0x198>)
 8004004:	400a      	ands	r2, r1
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4a25      	ldr	r2, [pc, #148]	@ (80040a4 <HAL_TIM_OC_Stop_IT+0x190>)
 8004010:	4013      	ands	r3, r2
 8004012:	d10d      	bne.n	8004030 <HAL_TIM_OC_Stop_IT+0x11c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a23      	ldr	r2, [pc, #140]	@ (80040a8 <HAL_TIM_OC_Stop_IT+0x194>)
 800401c:	4013      	ands	r3, r2
 800401e:	d107      	bne.n	8004030 <HAL_TIM_OC_Stop_IT+0x11c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2101      	movs	r1, #1
 800402c:	438a      	bics	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <HAL_TIM_OC_Stop_IT+0x12c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	223e      	movs	r2, #62	@ 0x3e
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]
 800403e:	e023      	b.n	8004088 <HAL_TIM_OC_Stop_IT+0x174>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d104      	bne.n	8004050 <HAL_TIM_OC_Stop_IT+0x13c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	223f      	movs	r2, #63	@ 0x3f
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]
 800404e:	e01b      	b.n	8004088 <HAL_TIM_OC_Stop_IT+0x174>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b08      	cmp	r3, #8
 8004054:	d104      	bne.n	8004060 <HAL_TIM_OC_Stop_IT+0x14c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2240      	movs	r2, #64	@ 0x40
 800405a:	2101      	movs	r1, #1
 800405c:	5499      	strb	r1, [r3, r2]
 800405e:	e013      	b.n	8004088 <HAL_TIM_OC_Stop_IT+0x174>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d104      	bne.n	8004070 <HAL_TIM_OC_Stop_IT+0x15c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2241      	movs	r2, #65	@ 0x41
 800406a:	2101      	movs	r1, #1
 800406c:	5499      	strb	r1, [r3, r2]
 800406e:	e00b      	b.n	8004088 <HAL_TIM_OC_Stop_IT+0x174>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b10      	cmp	r3, #16
 8004074:	d104      	bne.n	8004080 <HAL_TIM_OC_Stop_IT+0x16c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2242      	movs	r2, #66	@ 0x42
 800407a:	2101      	movs	r1, #1
 800407c:	5499      	strb	r1, [r3, r2]
 800407e:	e003      	b.n	8004088 <HAL_TIM_OC_Stop_IT+0x174>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2243      	movs	r2, #67	@ 0x43
 8004084:	2101      	movs	r1, #1
 8004086:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8004088:	230f      	movs	r3, #15
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	781b      	ldrb	r3, [r3, #0]
}
 800408e:	0018      	movs	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	b004      	add	sp, #16
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800
 80040a4:	00001111 	.word	0x00001111
 80040a8:	00000444 	.word	0x00000444
 80040ac:	ffff7fff 	.word	0xffff7fff

080040b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e056      	b.n	8004170 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223d      	movs	r2, #61	@ 0x3d
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d113      	bne.n	80040f6 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	223c      	movs	r2, #60	@ 0x3c
 80040d2:	2100      	movs	r1, #0
 80040d4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f001 f859 	bl	8005190 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a23      	ldr	r2, [pc, #140]	@ (8004178 <HAL_TIM_PWM_Init+0xc8>)
 80040ea:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	0010      	movs	r0, r2
 80040f4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	223d      	movs	r2, #61	@ 0x3d
 80040fa:	2102      	movs	r1, #2
 80040fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	0019      	movs	r1, r3
 8004108:	0010      	movs	r0, r2
 800410a:	f000 fcfd 	bl	8004b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2248      	movs	r2, #72	@ 0x48
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	223e      	movs	r2, #62	@ 0x3e
 800411a:	2101      	movs	r1, #1
 800411c:	5499      	strb	r1, [r3, r2]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	223f      	movs	r2, #63	@ 0x3f
 8004122:	2101      	movs	r1, #1
 8004124:	5499      	strb	r1, [r3, r2]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2240      	movs	r2, #64	@ 0x40
 800412a:	2101      	movs	r1, #1
 800412c:	5499      	strb	r1, [r3, r2]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2241      	movs	r2, #65	@ 0x41
 8004132:	2101      	movs	r1, #1
 8004134:	5499      	strb	r1, [r3, r2]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2242      	movs	r2, #66	@ 0x42
 800413a:	2101      	movs	r1, #1
 800413c:	5499      	strb	r1, [r3, r2]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2243      	movs	r2, #67	@ 0x43
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2244      	movs	r2, #68	@ 0x44
 800414a:	2101      	movs	r1, #1
 800414c:	5499      	strb	r1, [r3, r2]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2245      	movs	r2, #69	@ 0x45
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2246      	movs	r2, #70	@ 0x46
 800415a:	2101      	movs	r1, #1
 800415c:	5499      	strb	r1, [r3, r2]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2247      	movs	r2, #71	@ 0x47
 8004162:	2101      	movs	r1, #1
 8004164:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	223d      	movs	r2, #61	@ 0x3d
 800416a:	2101      	movs	r1, #1
 800416c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	b002      	add	sp, #8
 8004176:	bd80      	pop	{r7, pc}
 8004178:	0800417d 	.word	0x0800417d

0800417c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d108      	bne.n	80041ae <HAL_TIM_PWM_Start+0x22>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	223e      	movs	r2, #62	@ 0x3e
 80041a0:	5c9b      	ldrb	r3, [r3, r2]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	1e5a      	subs	r2, r3, #1
 80041a8:	4193      	sbcs	r3, r2
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	e037      	b.n	800421e <HAL_TIM_PWM_Start+0x92>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d108      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x3a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	223f      	movs	r2, #63	@ 0x3f
 80041b8:	5c9b      	ldrb	r3, [r3, r2]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	1e5a      	subs	r2, r3, #1
 80041c0:	4193      	sbcs	r3, r2
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e02b      	b.n	800421e <HAL_TIM_PWM_Start+0x92>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d108      	bne.n	80041de <HAL_TIM_PWM_Start+0x52>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2240      	movs	r2, #64	@ 0x40
 80041d0:	5c9b      	ldrb	r3, [r3, r2]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	1e5a      	subs	r2, r3, #1
 80041d8:	4193      	sbcs	r3, r2
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	e01f      	b.n	800421e <HAL_TIM_PWM_Start+0x92>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d108      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x6a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2241      	movs	r2, #65	@ 0x41
 80041e8:	5c9b      	ldrb	r3, [r3, r2]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	1e5a      	subs	r2, r3, #1
 80041f0:	4193      	sbcs	r3, r2
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e013      	b.n	800421e <HAL_TIM_PWM_Start+0x92>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d108      	bne.n	800420e <HAL_TIM_PWM_Start+0x82>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2242      	movs	r2, #66	@ 0x42
 8004200:	5c9b      	ldrb	r3, [r3, r2]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	1e5a      	subs	r2, r3, #1
 8004208:	4193      	sbcs	r3, r2
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e007      	b.n	800421e <HAL_TIM_PWM_Start+0x92>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2243      	movs	r2, #67	@ 0x43
 8004212:	5c9b      	ldrb	r3, [r3, r2]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	4193      	sbcs	r3, r2
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e081      	b.n	800432a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <HAL_TIM_PWM_Start+0xaa>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	223e      	movs	r2, #62	@ 0x3e
 8004230:	2102      	movs	r1, #2
 8004232:	5499      	strb	r1, [r3, r2]
 8004234:	e023      	b.n	800427e <HAL_TIM_PWM_Start+0xf2>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b04      	cmp	r3, #4
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Start+0xba>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	223f      	movs	r2, #63	@ 0x3f
 8004240:	2102      	movs	r1, #2
 8004242:	5499      	strb	r1, [r3, r2]
 8004244:	e01b      	b.n	800427e <HAL_TIM_PWM_Start+0xf2>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start+0xca>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2240      	movs	r2, #64	@ 0x40
 8004250:	2102      	movs	r1, #2
 8004252:	5499      	strb	r1, [r3, r2]
 8004254:	e013      	b.n	800427e <HAL_TIM_PWM_Start+0xf2>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0xda>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2241      	movs	r2, #65	@ 0x41
 8004260:	2102      	movs	r1, #2
 8004262:	5499      	strb	r1, [r3, r2]
 8004264:	e00b      	b.n	800427e <HAL_TIM_PWM_Start+0xf2>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b10      	cmp	r3, #16
 800426a:	d104      	bne.n	8004276 <HAL_TIM_PWM_Start+0xea>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2242      	movs	r2, #66	@ 0x42
 8004270:	2102      	movs	r1, #2
 8004272:	5499      	strb	r1, [r3, r2]
 8004274:	e003      	b.n	800427e <HAL_TIM_PWM_Start+0xf2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2243      	movs	r2, #67	@ 0x43
 800427a:	2102      	movs	r1, #2
 800427c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	0018      	movs	r0, r3
 8004288:	f000 ff5e 	bl	8005148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a28      	ldr	r2, [pc, #160]	@ (8004334 <HAL_TIM_PWM_Start+0x1a8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_TIM_PWM_Start+0x11e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a27      	ldr	r2, [pc, #156]	@ (8004338 <HAL_TIM_PWM_Start+0x1ac>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_TIM_PWM_Start+0x11e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a25      	ldr	r2, [pc, #148]	@ (800433c <HAL_TIM_PWM_Start+0x1b0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PWM_Start+0x122>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_PWM_Start+0x124>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2180      	movs	r1, #128	@ 0x80
 80042c0:	0209      	lsls	r1, r1, #8
 80042c2:	430a      	orrs	r2, r1
 80042c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004334 <HAL_TIM_PWM_Start+0x1a8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00a      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x15a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	05db      	lsls	r3, r3, #23
 80042d8:	429a      	cmp	r2, r3
 80042da:	d004      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x15a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a17      	ldr	r2, [pc, #92]	@ (8004340 <HAL_TIM_PWM_Start+0x1b4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d116      	bne.n	8004314 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a15      	ldr	r2, [pc, #84]	@ (8004344 <HAL_TIM_PWM_Start+0x1b8>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d016      	beq.n	8004326 <HAL_TIM_PWM_Start+0x19a>
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	2380      	movs	r3, #128	@ 0x80
 80042fc:	025b      	lsls	r3, r3, #9
 80042fe:	429a      	cmp	r2, r3
 8004300:	d011      	beq.n	8004326 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e008      	b.n	8004326 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2101      	movs	r1, #1
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e000      	b.n	8004328 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b004      	add	sp, #16
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800
 8004340:	40000400 	.word	0x40000400
 8004344:	00010007 	.word	0x00010007

08004348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	d027      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2202      	movs	r2, #2
 800436c:	4013      	ands	r3, r2
 800436e:	d023      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2203      	movs	r2, #3
 8004376:	4252      	negs	r2, r2
 8004378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2203      	movs	r2, #3
 8004388:	4013      	ands	r3, r2
 800438a:	d006      	beq.n	800439a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2294      	movs	r2, #148	@ 0x94
 8004390:	589b      	ldr	r3, [r3, r2]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	0010      	movs	r0, r2
 8004396:	4798      	blx	r3
 8004398:	e00b      	b.n	80043b2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	229c      	movs	r2, #156	@ 0x9c
 800439e:	589b      	ldr	r3, [r3, r2]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	0010      	movs	r0, r2
 80043a4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	22a0      	movs	r2, #160	@ 0xa0
 80043aa:	589b      	ldr	r3, [r3, r2]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	0010      	movs	r0, r2
 80043b0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2204      	movs	r2, #4
 80043bc:	4013      	ands	r3, r2
 80043be:	d028      	beq.n	8004412 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2204      	movs	r2, #4
 80043c4:	4013      	ands	r3, r2
 80043c6:	d024      	beq.n	8004412 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2205      	movs	r2, #5
 80043ce:	4252      	negs	r2, r2
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	23c0      	movs	r3, #192	@ 0xc0
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4013      	ands	r3, r2
 80043e4:	d006      	beq.n	80043f4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2294      	movs	r2, #148	@ 0x94
 80043ea:	589b      	ldr	r3, [r3, r2]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	0010      	movs	r0, r2
 80043f0:	4798      	blx	r3
 80043f2:	e00b      	b.n	800440c <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	229c      	movs	r2, #156	@ 0x9c
 80043f8:	589b      	ldr	r3, [r3, r2]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	0010      	movs	r0, r2
 80043fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	22a0      	movs	r2, #160	@ 0xa0
 8004404:	589b      	ldr	r3, [r3, r2]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	0010      	movs	r0, r2
 800440a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2208      	movs	r2, #8
 8004416:	4013      	ands	r3, r2
 8004418:	d027      	beq.n	800446a <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2208      	movs	r2, #8
 800441e:	4013      	ands	r3, r2
 8004420:	d023      	beq.n	800446a <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2209      	movs	r2, #9
 8004428:	4252      	negs	r2, r2
 800442a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2203      	movs	r2, #3
 800443a:	4013      	ands	r3, r2
 800443c:	d006      	beq.n	800444c <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2294      	movs	r2, #148	@ 0x94
 8004442:	589b      	ldr	r3, [r3, r2]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	0010      	movs	r0, r2
 8004448:	4798      	blx	r3
 800444a:	e00b      	b.n	8004464 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	229c      	movs	r2, #156	@ 0x9c
 8004450:	589b      	ldr	r3, [r3, r2]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	0010      	movs	r0, r2
 8004456:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	22a0      	movs	r2, #160	@ 0xa0
 800445c:	589b      	ldr	r3, [r3, r2]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	0010      	movs	r0, r2
 8004462:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2210      	movs	r2, #16
 800446e:	4013      	ands	r3, r2
 8004470:	d028      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2210      	movs	r2, #16
 8004476:	4013      	ands	r3, r2
 8004478:	d024      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2211      	movs	r2, #17
 8004480:	4252      	negs	r2, r2
 8004482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2208      	movs	r2, #8
 8004488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	23c0      	movs	r3, #192	@ 0xc0
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4013      	ands	r3, r2
 8004496:	d006      	beq.n	80044a6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2294      	movs	r2, #148	@ 0x94
 800449c:	589b      	ldr	r3, [r3, r2]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	0010      	movs	r0, r2
 80044a2:	4798      	blx	r3
 80044a4:	e00b      	b.n	80044be <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	229c      	movs	r2, #156	@ 0x9c
 80044aa:	589b      	ldr	r3, [r3, r2]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	0010      	movs	r0, r2
 80044b0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	22a0      	movs	r2, #160	@ 0xa0
 80044b6:	589b      	ldr	r3, [r3, r2]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	0010      	movs	r0, r2
 80044bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2201      	movs	r2, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	d00a      	beq.n	80044ea <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2202      	movs	r2, #2
 80044da:	4252      	negs	r2, r2
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2284      	movs	r2, #132	@ 0x84
 80044e2:	589b      	ldr	r3, [r3, r2]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	0010      	movs	r0, r2
 80044e8:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2280      	movs	r2, #128	@ 0x80
 80044ee:	4013      	ands	r3, r2
 80044f0:	d104      	bne.n	80044fc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	019b      	lsls	r3, r3, #6
 80044f8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044fa:	d00d      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2280      	movs	r2, #128	@ 0x80
 8004500:	4013      	ands	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a22      	ldr	r2, [pc, #136]	@ (8004594 <HAL_TIM_IRQHandler+0x24c>)
 800450a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	22b4      	movs	r2, #180	@ 0xb4
 8004510:	589b      	ldr	r3, [r3, r2]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	0010      	movs	r0, r2
 8004516:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	2380      	movs	r3, #128	@ 0x80
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4013      	ands	r3, r2
 8004520:	d00d      	beq.n	800453e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2280      	movs	r2, #128	@ 0x80
 8004526:	4013      	ands	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1a      	ldr	r2, [pc, #104]	@ (8004598 <HAL_TIM_IRQHandler+0x250>)
 8004530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	22b8      	movs	r2, #184	@ 0xb8
 8004536:	589b      	ldr	r3, [r3, r2]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	0010      	movs	r0, r2
 800453c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2240      	movs	r2, #64	@ 0x40
 8004542:	4013      	ands	r3, r2
 8004544:	d00e      	beq.n	8004564 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2240      	movs	r2, #64	@ 0x40
 800454a:	4013      	ands	r3, r2
 800454c:	d00a      	beq.n	8004564 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2241      	movs	r2, #65	@ 0x41
 8004554:	4252      	negs	r2, r2
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	228c      	movs	r2, #140	@ 0x8c
 800455c:	589b      	ldr	r3, [r3, r2]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	0010      	movs	r0, r2
 8004562:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2220      	movs	r2, #32
 8004568:	4013      	ands	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	4013      	ands	r3, r2
 8004572:	d00a      	beq.n	800458a <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2221      	movs	r2, #33	@ 0x21
 800457a:	4252      	negs	r2, r2
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	22ac      	movs	r2, #172	@ 0xac
 8004582:	589b      	ldr	r3, [r3, r2]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	0010      	movs	r0, r2
 8004588:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b004      	add	sp, #16
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	ffffdf7f 	.word	0xffffdf7f
 8004598:	fffffeff 	.word	0xfffffeff

0800459c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2317      	movs	r3, #23
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	223c      	movs	r2, #60	@ 0x3c
 80045b4:	5c9b      	ldrb	r3, [r3, r2]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_TIM_OC_ConfigChannel+0x22>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e048      	b.n	8004650 <HAL_TIM_OC_ConfigChannel+0xb4>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	223c      	movs	r2, #60	@ 0x3c
 80045c2:	2101      	movs	r1, #1
 80045c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b14      	cmp	r3, #20
 80045ca:	d835      	bhi.n	8004638 <HAL_TIM_OC_ConfigChannel+0x9c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	009a      	lsls	r2, r3, #2
 80045d0:	4b21      	ldr	r3, [pc, #132]	@ (8004658 <HAL_TIM_OC_ConfigChannel+0xbc>)
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	0011      	movs	r1, r2
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fb15 	bl	8004c10 <TIM_OC1_SetConfig>
      break;
 80045e6:	e02c      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	0011      	movs	r1, r2
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 fb8d 	bl	8004d10 <TIM_OC2_SetConfig>
      break;
 80045f6:	e024      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	0011      	movs	r1, r2
 8004600:	0018      	movs	r0, r3
 8004602:	f000 fc03 	bl	8004e0c <TIM_OC3_SetConfig>
      break;
 8004606:	e01c      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	0011      	movs	r1, r2
 8004610:	0018      	movs	r0, r3
 8004612:	f000 fc7d 	bl	8004f10 <TIM_OC4_SetConfig>
      break;
 8004616:	e014      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	0011      	movs	r1, r2
 8004620:	0018      	movs	r0, r3
 8004622:	f000 fcd9 	bl	8004fd8 <TIM_OC5_SetConfig>
      break;
 8004626:	e00c      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	0011      	movs	r1, r2
 8004630:	0018      	movs	r0, r3
 8004632:	f000 fd2b 	bl	800508c <TIM_OC6_SetConfig>
      break;
 8004636:	e004      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004638:	2317      	movs	r3, #23
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	2201      	movs	r2, #1
 800463e:	701a      	strb	r2, [r3, #0]
      break;
 8004640:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	223c      	movs	r2, #60	@ 0x3c
 8004646:	2100      	movs	r1, #0
 8004648:	5499      	strb	r1, [r3, r2]

  return status;
 800464a:	2317      	movs	r3, #23
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	781b      	ldrb	r3, [r3, #0]
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b006      	add	sp, #24
 8004656:	bd80      	pop	{r7, pc}
 8004658:	080060dc 	.word	0x080060dc

0800465c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004668:	2317      	movs	r3, #23
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	223c      	movs	r2, #60	@ 0x3c
 8004674:	5c9b      	ldrb	r3, [r3, r2]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_TIM_PWM_ConfigChannel+0x22>
 800467a:	2302      	movs	r3, #2
 800467c:	e0e5      	b.n	800484a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	223c      	movs	r2, #60	@ 0x3c
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b14      	cmp	r3, #20
 800468a:	d900      	bls.n	800468e <HAL_TIM_PWM_ConfigChannel+0x32>
 800468c:	e0d1      	b.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	009a      	lsls	r2, r3, #2
 8004692:	4b70      	ldr	r3, [pc, #448]	@ (8004854 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004694:	18d3      	adds	r3, r2, r3
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	0011      	movs	r1, r2
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 fab4 	bl	8004c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2108      	movs	r1, #8
 80046b4:	430a      	orrs	r2, r1
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2104      	movs	r1, #4
 80046c4:	438a      	bics	r2, r1
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	619a      	str	r2, [r3, #24]
      break;
 80046da:	e0af      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	0011      	movs	r1, r2
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 fb13 	bl	8004d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2180      	movs	r1, #128	@ 0x80
 80046f6:	0109      	lsls	r1, r1, #4
 80046f8:	430a      	orrs	r2, r1
 80046fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4954      	ldr	r1, [pc, #336]	@ (8004858 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004708:	400a      	ands	r2, r1
 800470a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	619a      	str	r2, [r3, #24]
      break;
 8004720:	e08c      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	0011      	movs	r1, r2
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fb6e 	bl	8004e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2108      	movs	r1, #8
 800473c:	430a      	orrs	r2, r1
 800473e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2104      	movs	r1, #4
 800474c:	438a      	bics	r2, r1
 800474e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69d9      	ldr	r1, [r3, #28]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	61da      	str	r2, [r3, #28]
      break;
 8004762:	e06b      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	0011      	movs	r1, r2
 800476c:	0018      	movs	r0, r3
 800476e:	f000 fbcf 	bl	8004f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2180      	movs	r1, #128	@ 0x80
 800477e:	0109      	lsls	r1, r1, #4
 8004780:	430a      	orrs	r2, r1
 8004782:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4932      	ldr	r1, [pc, #200]	@ (8004858 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004790:	400a      	ands	r2, r1
 8004792:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69d9      	ldr	r1, [r3, #28]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	021a      	lsls	r2, r3, #8
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	61da      	str	r2, [r3, #28]
      break;
 80047a8:	e048      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0011      	movs	r1, r2
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 fc10 	bl	8004fd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2108      	movs	r1, #8
 80047c4:	430a      	orrs	r2, r1
 80047c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2104      	movs	r1, #4
 80047d4:	438a      	bics	r2, r1
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047ea:	e027      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	0011      	movs	r1, r2
 80047f4:	0018      	movs	r0, r3
 80047f6:	f000 fc49 	bl	800508c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2180      	movs	r1, #128	@ 0x80
 8004806:	0109      	lsls	r1, r1, #4
 8004808:	430a      	orrs	r2, r1
 800480a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4910      	ldr	r1, [pc, #64]	@ (8004858 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004818:	400a      	ands	r2, r1
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	021a      	lsls	r2, r3, #8
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004830:	e004      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004832:	2317      	movs	r3, #23
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
      break;
 800483a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	223c      	movs	r2, #60	@ 0x3c
 8004840:	2100      	movs	r1, #0
 8004842:	5499      	strb	r1, [r3, r2]

  return status;
 8004844:	2317      	movs	r3, #23
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	781b      	ldrb	r3, [r3, #0]
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b006      	add	sp, #24
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	08006130 	.word	0x08006130
 8004858:	fffffbff 	.word	0xfffffbff

0800485c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b002      	add	sp, #8
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004874:	46c0      	nop			@ (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004884:	46c0      	nop			@ (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b4:	46c0      	nop			@ (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d4:	46c0      	nop			@ (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b002      	add	sp, #8
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80048f4:	46c0      	nop			@ (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b002      	add	sp, #8
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	230b      	movs	r3, #11
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	1c0a      	adds	r2, r1, #0
 800490c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2317      	movs	r3, #23
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0ea      	b.n	8004af6 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	223d      	movs	r2, #61	@ 0x3d
 8004924:	5c9b      	ldrb	r3, [r3, r2]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d000      	beq.n	800492e <HAL_TIM_RegisterCallback+0x32>
 800492c:	e08e      	b.n	8004a4c <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800492e:	230b      	movs	r3, #11
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b1b      	cmp	r3, #27
 8004936:	d900      	bls.n	800493a <HAL_TIM_RegisterCallback+0x3e>
 8004938:	e083      	b.n	8004a42 <HAL_TIM_RegisterCallback+0x146>
 800493a:	009a      	lsls	r2, r3, #2
 800493c:	4b70      	ldr	r3, [pc, #448]	@ (8004b00 <HAL_TIM_RegisterCallback+0x204>)
 800493e:	18d3      	adds	r3, r2, r3
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800494a:	e0d1      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004952:	e0cd      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800495a:	e0c9      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004962:	e0c5      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800496a:	e0c1      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004972:	e0bd      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800497a:	e0b9      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004982:	e0b5      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800498a:	e0b1      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004992:	e0ad      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800499a:	e0a9      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80049a2:	e0a5      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80049aa:	e0a1      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2180      	movs	r1, #128	@ 0x80
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	505a      	str	r2, [r3, r1]
        break;
 80049b4:	e09c      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2184      	movs	r1, #132	@ 0x84
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	505a      	str	r2, [r3, r1]
        break;
 80049be:	e097      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2188      	movs	r1, #136	@ 0x88
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	505a      	str	r2, [r3, r1]
        break;
 80049c8:	e092      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	218c      	movs	r1, #140	@ 0x8c
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	505a      	str	r2, [r3, r1]
        break;
 80049d2:	e08d      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2190      	movs	r1, #144	@ 0x90
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	505a      	str	r2, [r3, r1]
        break;
 80049dc:	e088      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2194      	movs	r1, #148	@ 0x94
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	505a      	str	r2, [r3, r1]
        break;
 80049e6:	e083      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2198      	movs	r1, #152	@ 0x98
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	505a      	str	r2, [r3, r1]
        break;
 80049f0:	e07e      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	219c      	movs	r1, #156	@ 0x9c
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	505a      	str	r2, [r3, r1]
        break;
 80049fa:	e079      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	21a0      	movs	r1, #160	@ 0xa0
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	505a      	str	r2, [r3, r1]
        break;
 8004a04:	e074      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	21a4      	movs	r1, #164	@ 0xa4
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	505a      	str	r2, [r3, r1]
        break;
 8004a0e:	e06f      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	21a8      	movs	r1, #168	@ 0xa8
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	505a      	str	r2, [r3, r1]
        break;
 8004a18:	e06a      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	21ac      	movs	r1, #172	@ 0xac
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	505a      	str	r2, [r3, r1]
        break;
 8004a22:	e065      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	21b0      	movs	r1, #176	@ 0xb0
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	505a      	str	r2, [r3, r1]
        break;
 8004a2c:	e060      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	21b4      	movs	r1, #180	@ 0xb4
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	505a      	str	r2, [r3, r1]
        break;
 8004a36:	e05b      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	21b8      	movs	r1, #184	@ 0xb8
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	505a      	str	r2, [r3, r1]
        break;
 8004a40:	e056      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004a42:	2317      	movs	r3, #23
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
        break;
 8004a4a:	e051      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	223d      	movs	r2, #61	@ 0x3d
 8004a50:	5c9b      	ldrb	r3, [r3, r2]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d147      	bne.n	8004ae8 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 8004a58:	230b      	movs	r3, #11
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b0d      	cmp	r3, #13
 8004a60:	d83d      	bhi.n	8004ade <HAL_TIM_RegisterCallback+0x1e2>
 8004a62:	009a      	lsls	r2, r3, #2
 8004a64:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <HAL_TIM_RegisterCallback+0x208>)
 8004a66:	18d3      	adds	r3, r2, r3
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004a72:	e03d      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004a7a:	e039      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004a82:	e035      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004a8a:	e031      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004a92:	e02d      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004a9a:	e029      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004aa2:	e025      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004aaa:	e021      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004ab2:	e01d      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004aba:	e019      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004ac2:	e015      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004aca:	e011      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004ad2:	e00d      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2180      	movs	r1, #128	@ 0x80
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	505a      	str	r2, [r3, r1]
        break;
 8004adc:	e008      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004ade:	2317      	movs	r3, #23
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
        break;
 8004ae6:	e003      	b.n	8004af0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004ae8:	2317      	movs	r3, #23
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004af0:	2317      	movs	r3, #23
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	781b      	ldrb	r3, [r3, #0]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b006      	add	sp, #24
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	08006184 	.word	0x08006184
 8004b04:	080061f4 	.word	0x080061f4

08004b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a37      	ldr	r2, [pc, #220]	@ (8004bf8 <TIM_Base_SetConfig+0xf0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d008      	beq.n	8004b32 <TIM_Base_SetConfig+0x2a>
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	05db      	lsls	r3, r3, #23
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d003      	beq.n	8004b32 <TIM_Base_SetConfig+0x2a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a33      	ldr	r2, [pc, #204]	@ (8004bfc <TIM_Base_SetConfig+0xf4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d108      	bne.n	8004b44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2270      	movs	r2, #112	@ 0x70
 8004b36:	4393      	bics	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf8 <TIM_Base_SetConfig+0xf0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d014      	beq.n	8004b76 <TIM_Base_SetConfig+0x6e>
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	05db      	lsls	r3, r3, #23
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d00f      	beq.n	8004b76 <TIM_Base_SetConfig+0x6e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a28      	ldr	r2, [pc, #160]	@ (8004bfc <TIM_Base_SetConfig+0xf4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM_Base_SetConfig+0x6e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a27      	ldr	r2, [pc, #156]	@ (8004c00 <TIM_Base_SetConfig+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <TIM_Base_SetConfig+0x6e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a26      	ldr	r2, [pc, #152]	@ (8004c04 <TIM_Base_SetConfig+0xfc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_Base_SetConfig+0x6e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a25      	ldr	r2, [pc, #148]	@ (8004c08 <TIM_Base_SetConfig+0x100>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d108      	bne.n	8004b88 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a24      	ldr	r2, [pc, #144]	@ (8004c0c <TIM_Base_SetConfig+0x104>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	001a      	movs	r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a11      	ldr	r2, [pc, #68]	@ (8004bf8 <TIM_Base_SetConfig+0xf0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <TIM_Base_SetConfig+0xbe>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a12      	ldr	r2, [pc, #72]	@ (8004c04 <TIM_Base_SetConfig+0xfc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_Base_SetConfig+0xbe>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a11      	ldr	r2, [pc, #68]	@ (8004c08 <TIM_Base_SetConfig+0x100>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d103      	bne.n	8004bce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d106      	bne.n	8004bee <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2201      	movs	r2, #1
 8004be6:	4393      	bics	r3, r2
 8004be8:	001a      	movs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	611a      	str	r2, [r3, #16]
  }
}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40002000 	.word	0x40002000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800
 8004c0c:	fffffcff 	.word	0xfffffcff

08004c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	2201      	movs	r2, #1
 8004c26:	4393      	bics	r3, r2
 8004c28:	001a      	movs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004cf8 <TIM_OC1_SetConfig+0xe8>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2203      	movs	r2, #3
 8004c46:	4393      	bics	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2202      	movs	r2, #2
 8004c58:	4393      	bics	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <TIM_OC1_SetConfig+0xec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_OC1_SetConfig+0x6e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <TIM_OC1_SetConfig+0xf0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_OC1_SetConfig+0x6e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a22      	ldr	r2, [pc, #136]	@ (8004d04 <TIM_OC1_SetConfig+0xf4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d10c      	bne.n	8004c98 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2208      	movs	r2, #8
 8004c82:	4393      	bics	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2204      	movs	r2, #4
 8004c94:	4393      	bics	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a18      	ldr	r2, [pc, #96]	@ (8004cfc <TIM_OC1_SetConfig+0xec>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_OC1_SetConfig+0xa0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a17      	ldr	r2, [pc, #92]	@ (8004d00 <TIM_OC1_SetConfig+0xf0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC1_SetConfig+0xa0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a16      	ldr	r2, [pc, #88]	@ (8004d04 <TIM_OC1_SetConfig+0xf4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d111      	bne.n	8004cd4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4a15      	ldr	r2, [pc, #84]	@ (8004d08 <TIM_OC1_SetConfig+0xf8>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4a14      	ldr	r2, [pc, #80]	@ (8004d0c <TIM_OC1_SetConfig+0xfc>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b006      	add	sp, #24
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	fffeff8f 	.word	0xfffeff8f
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800
 8004d08:	fffffeff 	.word	0xfffffeff
 8004d0c:	fffffdff 	.word	0xfffffdff

08004d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	2210      	movs	r2, #16
 8004d26:	4393      	bics	r3, r2
 8004d28:	001a      	movs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <TIM_OC2_SetConfig+0xe0>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4a2b      	ldr	r2, [pc, #172]	@ (8004df4 <TIM_OC2_SetConfig+0xe4>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	4393      	bics	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a22      	ldr	r2, [pc, #136]	@ (8004df8 <TIM_OC2_SetConfig+0xe8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10d      	bne.n	8004d8e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2280      	movs	r2, #128	@ 0x80
 8004d76:	4393      	bics	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2240      	movs	r2, #64	@ 0x40
 8004d8a:	4393      	bics	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <TIM_OC2_SetConfig+0xe8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_OC2_SetConfig+0x96>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <TIM_OC2_SetConfig+0xec>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC2_SetConfig+0x96>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <TIM_OC2_SetConfig+0xf0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d113      	bne.n	8004dce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4a16      	ldr	r2, [pc, #88]	@ (8004e04 <TIM_OC2_SetConfig+0xf4>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <TIM_OC2_SetConfig+0xf8>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	621a      	str	r2, [r3, #32]
}
 8004de8:	46c0      	nop			@ (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b006      	add	sp, #24
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	feff8fff 	.word	0xfeff8fff
 8004df4:	fffffcff 	.word	0xfffffcff
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800
 8004e04:	fffffbff 	.word	0xfffffbff
 8004e08:	fffff7ff 	.word	0xfffff7ff

08004e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	4a31      	ldr	r2, [pc, #196]	@ (8004ee8 <TIM_OC3_SetConfig+0xdc>)
 8004e22:	401a      	ands	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a2d      	ldr	r2, [pc, #180]	@ (8004eec <TIM_OC3_SetConfig+0xe0>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2203      	movs	r2, #3
 8004e40:	4393      	bics	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	4a27      	ldr	r2, [pc, #156]	@ (8004ef0 <TIM_OC3_SetConfig+0xe4>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a23      	ldr	r2, [pc, #140]	@ (8004ef4 <TIM_OC3_SetConfig+0xe8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10d      	bne.n	8004e86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4a22      	ldr	r2, [pc, #136]	@ (8004ef8 <TIM_OC3_SetConfig+0xec>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4a1e      	ldr	r2, [pc, #120]	@ (8004efc <TIM_OC3_SetConfig+0xf0>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a1a      	ldr	r2, [pc, #104]	@ (8004ef4 <TIM_OC3_SetConfig+0xe8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_OC3_SetConfig+0x92>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a1b      	ldr	r2, [pc, #108]	@ (8004f00 <TIM_OC3_SetConfig+0xf4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_OC3_SetConfig+0x92>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1a      	ldr	r2, [pc, #104]	@ (8004f04 <TIM_OC3_SetConfig+0xf8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d113      	bne.n	8004ec6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	@ (8004f08 <TIM_OC3_SetConfig+0xfc>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <TIM_OC3_SetConfig+0x100>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	46c0      	nop			@ (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b006      	add	sp, #24
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	fffffeff 	.word	0xfffffeff
 8004eec:	fffeff8f 	.word	0xfffeff8f
 8004ef0:	fffffdff 	.word	0xfffffdff
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	fffff7ff 	.word	0xfffff7ff
 8004efc:	fffffbff 	.word	0xfffffbff
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800
 8004f08:	ffffefff 	.word	0xffffefff
 8004f0c:	ffffdfff 	.word	0xffffdfff

08004f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	4a24      	ldr	r2, [pc, #144]	@ (8004fb8 <TIM_OC4_SetConfig+0xa8>)
 8004f26:	401a      	ands	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a20      	ldr	r2, [pc, #128]	@ (8004fbc <TIM_OC4_SetConfig+0xac>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc0 <TIM_OC4_SetConfig+0xb0>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc4 <TIM_OC4_SetConfig+0xb4>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	@ (8004fc8 <TIM_OC4_SetConfig+0xb8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_OC4_SetConfig+0x70>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <TIM_OC4_SetConfig+0xbc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_OC4_SetConfig+0x70>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a15      	ldr	r2, [pc, #84]	@ (8004fd0 <TIM_OC4_SetConfig+0xc0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d109      	bne.n	8004f94 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4a14      	ldr	r2, [pc, #80]	@ (8004fd4 <TIM_OC4_SetConfig+0xc4>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b006      	add	sp, #24
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	ffffefff 	.word	0xffffefff
 8004fbc:	feff8fff 	.word	0xfeff8fff
 8004fc0:	fffffcff 	.word	0xfffffcff
 8004fc4:	ffffdfff 	.word	0xffffdfff
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800
 8004fd4:	ffffbfff 	.word	0xffffbfff

08004fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4a21      	ldr	r2, [pc, #132]	@ (8005074 <TIM_OC5_SetConfig+0x9c>)
 8004fee:	401a      	ands	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4a1d      	ldr	r2, [pc, #116]	@ (8005078 <TIM_OC5_SetConfig+0xa0>)
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4a19      	ldr	r2, [pc, #100]	@ (800507c <TIM_OC5_SetConfig+0xa4>)
 8005016:	4013      	ands	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a15      	ldr	r2, [pc, #84]	@ (8005080 <TIM_OC5_SetConfig+0xa8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_OC5_SetConfig+0x66>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a14      	ldr	r2, [pc, #80]	@ (8005084 <TIM_OC5_SetConfig+0xac>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_OC5_SetConfig+0x66>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a13      	ldr	r2, [pc, #76]	@ (8005088 <TIM_OC5_SetConfig+0xb0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d109      	bne.n	8005052 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4a0c      	ldr	r2, [pc, #48]	@ (8005074 <TIM_OC5_SetConfig+0x9c>)
 8005042:	4013      	ands	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	46c0      	nop			@ (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	b006      	add	sp, #24
 8005072:	bd80      	pop	{r7, pc}
 8005074:	fffeffff 	.word	0xfffeffff
 8005078:	fffeff8f 	.word	0xfffeff8f
 800507c:	fffdffff 	.word	0xfffdffff
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40014400 	.word	0x40014400
 8005088:	40014800 	.word	0x40014800

0800508c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	4a22      	ldr	r2, [pc, #136]	@ (800512c <TIM_OC6_SetConfig+0xa0>)
 80050a2:	401a      	ands	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <TIM_OC6_SetConfig+0xa4>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005134 <TIM_OC6_SetConfig+0xa8>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	051b      	lsls	r3, r3, #20
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <TIM_OC6_SetConfig+0xac>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_OC6_SetConfig+0x68>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a15      	ldr	r2, [pc, #84]	@ (800513c <TIM_OC6_SetConfig+0xb0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_OC6_SetConfig+0x68>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a14      	ldr	r2, [pc, #80]	@ (8005140 <TIM_OC6_SetConfig+0xb4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d109      	bne.n	8005108 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4a13      	ldr	r2, [pc, #76]	@ (8005144 <TIM_OC6_SetConfig+0xb8>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	029b      	lsls	r3, r3, #10
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b006      	add	sp, #24
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	ffefffff 	.word	0xffefffff
 8005130:	feff8fff 	.word	0xfeff8fff
 8005134:	ffdfffff 	.word	0xffdfffff
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800
 8005144:	fffbffff 	.word	0xfffbffff

08005148 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	221f      	movs	r2, #31
 8005158:	4013      	ands	r3, r2
 800515a:	2201      	movs	r2, #1
 800515c:	409a      	lsls	r2, r3
 800515e:	0013      	movs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	43d2      	mvns	r2, r2
 800516a:	401a      	ands	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1a      	ldr	r2, [r3, #32]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	211f      	movs	r1, #31
 8005178:	400b      	ands	r3, r1
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4099      	lsls	r1, r3
 800517e:	000b      	movs	r3, r1
 8005180:	431a      	orrs	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b006      	add	sp, #24
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2184      	movs	r1, #132	@ 0x84
 800519c:	4a1c      	ldr	r2, [pc, #112]	@ (8005210 <TIM_ResetCallback+0x80>)
 800519e:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2188      	movs	r1, #136	@ 0x88
 80051a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005214 <TIM_ResetCallback+0x84>)
 80051a6:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	218c      	movs	r1, #140	@ 0x8c
 80051ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005218 <TIM_ResetCallback+0x88>)
 80051ae:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2190      	movs	r1, #144	@ 0x90
 80051b4:	4a19      	ldr	r2, [pc, #100]	@ (800521c <TIM_ResetCallback+0x8c>)
 80051b6:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2194      	movs	r1, #148	@ 0x94
 80051bc:	4a18      	ldr	r2, [pc, #96]	@ (8005220 <TIM_ResetCallback+0x90>)
 80051be:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2198      	movs	r1, #152	@ 0x98
 80051c4:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <TIM_ResetCallback+0x94>)
 80051c6:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	219c      	movs	r1, #156	@ 0x9c
 80051cc:	4a16      	ldr	r2, [pc, #88]	@ (8005228 <TIM_ResetCallback+0x98>)
 80051ce:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	21a0      	movs	r1, #160	@ 0xa0
 80051d4:	4a15      	ldr	r2, [pc, #84]	@ (800522c <TIM_ResetCallback+0x9c>)
 80051d6:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	21a4      	movs	r1, #164	@ 0xa4
 80051dc:	4a14      	ldr	r2, [pc, #80]	@ (8005230 <TIM_ResetCallback+0xa0>)
 80051de:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	21a8      	movs	r1, #168	@ 0xa8
 80051e4:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <TIM_ResetCallback+0xa4>)
 80051e6:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	21ac      	movs	r1, #172	@ 0xac
 80051ec:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <TIM_ResetCallback+0xa8>)
 80051ee:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	21b0      	movs	r1, #176	@ 0xb0
 80051f4:	4a11      	ldr	r2, [pc, #68]	@ (800523c <TIM_ResetCallback+0xac>)
 80051f6:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	21b4      	movs	r1, #180	@ 0xb4
 80051fc:	4a10      	ldr	r2, [pc, #64]	@ (8005240 <TIM_ResetCallback+0xb0>)
 80051fe:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	21b8      	movs	r1, #184	@ 0xb8
 8005204:	4a0f      	ldr	r2, [pc, #60]	@ (8005244 <TIM_ResetCallback+0xb4>)
 8005206:	505a      	str	r2, [r3, r1]
}
 8005208:	46c0      	nop			@ (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}
 8005210:	0800485d 	.word	0x0800485d
 8005214:	0800486d 	.word	0x0800486d
 8005218:	080048cd 	.word	0x080048cd
 800521c:	080048dd 	.word	0x080048dd
 8005220:	0800488d 	.word	0x0800488d
 8005224:	0800489d 	.word	0x0800489d
 8005228:	0800487d 	.word	0x0800487d
 800522c:	080048ad 	.word	0x080048ad
 8005230:	080048bd 	.word	0x080048bd
 8005234:	080048ed 	.word	0x080048ed
 8005238:	08005381 	.word	0x08005381
 800523c:	08005391 	.word	0x08005391
 8005240:	080053a1 	.word	0x080053a1
 8005244:	080053b1 	.word	0x080053b1

08005248 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	223c      	movs	r2, #60	@ 0x3c
 800525a:	5c9b      	ldrb	r3, [r3, r2]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005260:	2302      	movs	r3, #2
 8005262:	e06f      	b.n	8005344 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	223c      	movs	r2, #60	@ 0x3c
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	22ff      	movs	r2, #255	@ 0xff
 8005270:	4393      	bics	r3, r2
 8005272:	001a      	movs	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a33      	ldr	r2, [pc, #204]	@ (800534c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005280:	401a      	ands	r2, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a30      	ldr	r2, [pc, #192]	@ (8005350 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800528e:	401a      	ands	r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4a2e      	ldr	r2, [pc, #184]	@ (8005354 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800529c:	401a      	ands	r2, r3
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005358 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80052aa:	401a      	ands	r2, r3
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a29      	ldr	r2, [pc, #164]	@ (800535c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80052b8:	401a      	ands	r2, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a26      	ldr	r2, [pc, #152]	@ (8005360 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80052c6:	401a      	ands	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a24      	ldr	r2, [pc, #144]	@ (8005364 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80052d4:	401a      	ands	r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a21      	ldr	r2, [pc, #132]	@ (8005368 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80052e4:	401a      	ands	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1e      	ldr	r2, [pc, #120]	@ (800536c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d11c      	bne.n	8005332 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005370 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80052fc:	401a      	ands	r2, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	051b      	lsls	r3, r3, #20
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a1a      	ldr	r2, [pc, #104]	@ (8005374 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800530c:	401a      	ands	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a17      	ldr	r2, [pc, #92]	@ (8005378 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800531a:	401a      	ands	r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a15      	ldr	r2, [pc, #84]	@ (800537c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005328:	401a      	ands	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	223c      	movs	r2, #60	@ 0x3c
 800533e:	2100      	movs	r1, #0
 8005340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}
 800534c:	fffffcff 	.word	0xfffffcff
 8005350:	fffffbff 	.word	0xfffffbff
 8005354:	fffff7ff 	.word	0xfffff7ff
 8005358:	ffffefff 	.word	0xffffefff
 800535c:	ffffdfff 	.word	0xffffdfff
 8005360:	ffffbfff 	.word	0xffffbfff
 8005364:	fff0ffff 	.word	0xfff0ffff
 8005368:	efffffff 	.word	0xefffffff
 800536c:	40012c00 	.word	0x40012c00
 8005370:	ff0fffff 	.word	0xff0fffff
 8005374:	feffffff 	.word	0xfeffffff
 8005378:	fdffffff 	.word	0xfdffffff
 800537c:	dfffffff 	.word	0xdfffffff

08005380 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005388:	46c0      	nop			@ (mov r8, r8)
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005398:	46c0      	nop			@ (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	b002      	add	sp, #8
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a8:	46c0      	nop			@ (mov r8, r8)
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b002      	add	sp, #8
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053b8:	46c0      	nop			@ (mov r8, r8)
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b002      	add	sp, #8
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e046      	b.n	8005460 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2288      	movs	r2, #136	@ 0x88
 80053d6:	589b      	ldr	r3, [r3, r2]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d107      	bne.n	80053ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2284      	movs	r2, #132	@ 0x84
 80053e0:	2100      	movs	r1, #0
 80053e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7fb fe2e 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2288      	movs	r2, #136	@ 0x88
 80053f0:	2124      	movs	r1, #36	@ 0x24
 80053f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2101      	movs	r1, #1
 8005400:	438a      	bics	r2, r1
 8005402:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	0018      	movs	r0, r3
 8005410:	f000 faa4 	bl	800595c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	0018      	movs	r0, r3
 8005418:	f000 f828 	bl	800546c <UART_SetConfig>
 800541c:	0003      	movs	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e01c      	b.n	8005460 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	490d      	ldr	r1, [pc, #52]	@ (8005468 <HAL_UART_Init+0xa8>)
 8005432:	400a      	ands	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	212a      	movs	r1, #42	@ 0x2a
 8005442:	438a      	bics	r2, r1
 8005444:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2101      	movs	r1, #1
 8005452:	430a      	orrs	r2, r1
 8005454:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 fb33 	bl	8005ac4 <UART_CheckIdleState>
 800545e:	0003      	movs	r3, r0
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	b002      	add	sp, #8
 8005466:	bd80      	pop	{r7, pc}
 8005468:	ffffb7ff 	.word	0xffffb7ff

0800546c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	b5b0      	push	{r4, r5, r7, lr}
 800546e:	b090      	sub	sp, #64	@ 0x40
 8005470:	af00      	add	r7, sp, #0
 8005472:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005474:	231a      	movs	r3, #26
 8005476:	2220      	movs	r2, #32
 8005478:	189b      	adds	r3, r3, r2
 800547a:	19db      	adds	r3, r3, r7
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	431a      	orrs	r2, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	431a      	orrs	r2, r3
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	4313      	orrs	r3, r2
 8005496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4ac4      	ldr	r2, [pc, #784]	@ (80057b0 <UART_SetConfig+0x344>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	0019      	movs	r1, r3
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054aa:	430b      	orrs	r3, r1
 80054ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4abf      	ldr	r2, [pc, #764]	@ (80057b4 <UART_SetConfig+0x348>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	0018      	movs	r0, r3
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	68d9      	ldr	r1, [r3, #12]
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	0003      	movs	r3, r0
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4ab9      	ldr	r2, [pc, #740]	@ (80057b8 <UART_SetConfig+0x34c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054de:	4313      	orrs	r3, r2
 80054e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4ab4      	ldr	r2, [pc, #720]	@ (80057bc <UART_SetConfig+0x350>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	0019      	movs	r1, r3
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	220f      	movs	r2, #15
 8005500:	4393      	bics	r3, r2
 8005502:	0018      	movs	r0, r3
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	0003      	movs	r3, r0
 800550e:	430b      	orrs	r3, r1
 8005510:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4aaa      	ldr	r2, [pc, #680]	@ (80057c0 <UART_SetConfig+0x354>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d131      	bne.n	8005580 <UART_SetConfig+0x114>
 800551c:	4ba9      	ldr	r3, [pc, #676]	@ (80057c4 <UART_SetConfig+0x358>)
 800551e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005520:	2203      	movs	r2, #3
 8005522:	4013      	ands	r3, r2
 8005524:	2b03      	cmp	r3, #3
 8005526:	d01d      	beq.n	8005564 <UART_SetConfig+0xf8>
 8005528:	d823      	bhi.n	8005572 <UART_SetConfig+0x106>
 800552a:	2b02      	cmp	r3, #2
 800552c:	d00c      	beq.n	8005548 <UART_SetConfig+0xdc>
 800552e:	d820      	bhi.n	8005572 <UART_SetConfig+0x106>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <UART_SetConfig+0xce>
 8005534:	2b01      	cmp	r3, #1
 8005536:	d00e      	beq.n	8005556 <UART_SetConfig+0xea>
 8005538:	e01b      	b.n	8005572 <UART_SetConfig+0x106>
 800553a:	231b      	movs	r3, #27
 800553c:	2220      	movs	r2, #32
 800553e:	189b      	adds	r3, r3, r2
 8005540:	19db      	adds	r3, r3, r7
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e071      	b.n	800562c <UART_SetConfig+0x1c0>
 8005548:	231b      	movs	r3, #27
 800554a:	2220      	movs	r2, #32
 800554c:	189b      	adds	r3, r3, r2
 800554e:	19db      	adds	r3, r3, r7
 8005550:	2202      	movs	r2, #2
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	e06a      	b.n	800562c <UART_SetConfig+0x1c0>
 8005556:	231b      	movs	r3, #27
 8005558:	2220      	movs	r2, #32
 800555a:	189b      	adds	r3, r3, r2
 800555c:	19db      	adds	r3, r3, r7
 800555e:	2204      	movs	r2, #4
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e063      	b.n	800562c <UART_SetConfig+0x1c0>
 8005564:	231b      	movs	r3, #27
 8005566:	2220      	movs	r2, #32
 8005568:	189b      	adds	r3, r3, r2
 800556a:	19db      	adds	r3, r3, r7
 800556c:	2208      	movs	r2, #8
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e05c      	b.n	800562c <UART_SetConfig+0x1c0>
 8005572:	231b      	movs	r3, #27
 8005574:	2220      	movs	r2, #32
 8005576:	189b      	adds	r3, r3, r2
 8005578:	19db      	adds	r3, r3, r7
 800557a:	2210      	movs	r2, #16
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e055      	b.n	800562c <UART_SetConfig+0x1c0>
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a90      	ldr	r2, [pc, #576]	@ (80057c8 <UART_SetConfig+0x35c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d106      	bne.n	8005598 <UART_SetConfig+0x12c>
 800558a:	231b      	movs	r3, #27
 800558c:	2220      	movs	r2, #32
 800558e:	189b      	adds	r3, r3, r2
 8005590:	19db      	adds	r3, r3, r7
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e049      	b.n	800562c <UART_SetConfig+0x1c0>
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a86      	ldr	r2, [pc, #536]	@ (80057b8 <UART_SetConfig+0x34c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d13e      	bne.n	8005620 <UART_SetConfig+0x1b4>
 80055a2:	4b88      	ldr	r3, [pc, #544]	@ (80057c4 <UART_SetConfig+0x358>)
 80055a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055a6:	23c0      	movs	r3, #192	@ 0xc0
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	4013      	ands	r3, r2
 80055ac:	22c0      	movs	r2, #192	@ 0xc0
 80055ae:	0112      	lsls	r2, r2, #4
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d027      	beq.n	8005604 <UART_SetConfig+0x198>
 80055b4:	22c0      	movs	r2, #192	@ 0xc0
 80055b6:	0112      	lsls	r2, r2, #4
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d82a      	bhi.n	8005612 <UART_SetConfig+0x1a6>
 80055bc:	2280      	movs	r2, #128	@ 0x80
 80055be:	0112      	lsls	r2, r2, #4
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d011      	beq.n	80055e8 <UART_SetConfig+0x17c>
 80055c4:	2280      	movs	r2, #128	@ 0x80
 80055c6:	0112      	lsls	r2, r2, #4
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d822      	bhi.n	8005612 <UART_SetConfig+0x1a6>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <UART_SetConfig+0x16e>
 80055d0:	2280      	movs	r2, #128	@ 0x80
 80055d2:	00d2      	lsls	r2, r2, #3
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00e      	beq.n	80055f6 <UART_SetConfig+0x18a>
 80055d8:	e01b      	b.n	8005612 <UART_SetConfig+0x1a6>
 80055da:	231b      	movs	r3, #27
 80055dc:	2220      	movs	r2, #32
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	19db      	adds	r3, r3, r7
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	e021      	b.n	800562c <UART_SetConfig+0x1c0>
 80055e8:	231b      	movs	r3, #27
 80055ea:	2220      	movs	r2, #32
 80055ec:	189b      	adds	r3, r3, r2
 80055ee:	19db      	adds	r3, r3, r7
 80055f0:	2202      	movs	r2, #2
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e01a      	b.n	800562c <UART_SetConfig+0x1c0>
 80055f6:	231b      	movs	r3, #27
 80055f8:	2220      	movs	r2, #32
 80055fa:	189b      	adds	r3, r3, r2
 80055fc:	19db      	adds	r3, r3, r7
 80055fe:	2204      	movs	r2, #4
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	e013      	b.n	800562c <UART_SetConfig+0x1c0>
 8005604:	231b      	movs	r3, #27
 8005606:	2220      	movs	r2, #32
 8005608:	189b      	adds	r3, r3, r2
 800560a:	19db      	adds	r3, r3, r7
 800560c:	2208      	movs	r2, #8
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	e00c      	b.n	800562c <UART_SetConfig+0x1c0>
 8005612:	231b      	movs	r3, #27
 8005614:	2220      	movs	r2, #32
 8005616:	189b      	adds	r3, r3, r2
 8005618:	19db      	adds	r3, r3, r7
 800561a:	2210      	movs	r2, #16
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e005      	b.n	800562c <UART_SetConfig+0x1c0>
 8005620:	231b      	movs	r3, #27
 8005622:	2220      	movs	r2, #32
 8005624:	189b      	adds	r3, r3, r2
 8005626:	19db      	adds	r3, r3, r7
 8005628:	2210      	movs	r2, #16
 800562a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a61      	ldr	r2, [pc, #388]	@ (80057b8 <UART_SetConfig+0x34c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d000      	beq.n	8005638 <UART_SetConfig+0x1cc>
 8005636:	e092      	b.n	800575e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005638:	231b      	movs	r3, #27
 800563a:	2220      	movs	r2, #32
 800563c:	189b      	adds	r3, r3, r2
 800563e:	19db      	adds	r3, r3, r7
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b08      	cmp	r3, #8
 8005644:	d015      	beq.n	8005672 <UART_SetConfig+0x206>
 8005646:	dc18      	bgt.n	800567a <UART_SetConfig+0x20e>
 8005648:	2b04      	cmp	r3, #4
 800564a:	d00d      	beq.n	8005668 <UART_SetConfig+0x1fc>
 800564c:	dc15      	bgt.n	800567a <UART_SetConfig+0x20e>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <UART_SetConfig+0x1ec>
 8005652:	2b02      	cmp	r3, #2
 8005654:	d005      	beq.n	8005662 <UART_SetConfig+0x1f6>
 8005656:	e010      	b.n	800567a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7fe fa02 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 800565c:	0003      	movs	r3, r0
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005660:	e014      	b.n	800568c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005662:	4b5a      	ldr	r3, [pc, #360]	@ (80057cc <UART_SetConfig+0x360>)
 8005664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005666:	e011      	b.n	800568c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005668:	f7fe f96e 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 800566c:	0003      	movs	r3, r0
 800566e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005670:	e00c      	b.n	800568c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	2380      	movs	r3, #128	@ 0x80
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005678:	e008      	b.n	800568c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800567e:	231a      	movs	r3, #26
 8005680:	2220      	movs	r2, #32
 8005682:	189b      	adds	r3, r3, r2
 8005684:	19db      	adds	r3, r3, r7
 8005686:	2201      	movs	r2, #1
 8005688:	701a      	strb	r2, [r3, #0]
        break;
 800568a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800568c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568e:	2b00      	cmp	r3, #0
 8005690:	d100      	bne.n	8005694 <UART_SetConfig+0x228>
 8005692:	e147      	b.n	8005924 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005698:	4b4d      	ldr	r3, [pc, #308]	@ (80057d0 <UART_SetConfig+0x364>)
 800569a:	0052      	lsls	r2, r2, #1
 800569c:	5ad3      	ldrh	r3, [r2, r3]
 800569e:	0019      	movs	r1, r3
 80056a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80056a2:	f7fa fd2f 	bl	8000104 <__udivsi3>
 80056a6:	0003      	movs	r3, r0
 80056a8:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	0013      	movs	r3, r2
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d305      	bcc.n	80056c6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d906      	bls.n	80056d4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80056c6:	231a      	movs	r3, #26
 80056c8:	2220      	movs	r2, #32
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	19db      	adds	r3, r3, r7
 80056ce:	2201      	movs	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e127      	b.n	8005924 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e0:	4b3b      	ldr	r3, [pc, #236]	@ (80057d0 <UART_SetConfig+0x364>)
 80056e2:	0052      	lsls	r2, r2, #1
 80056e4:	5ad3      	ldrh	r3, [r2, r3]
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	69b8      	ldr	r0, [r7, #24]
 80056f2:	69f9      	ldr	r1, [r7, #28]
 80056f4:	f7fa fd92 	bl	800021c <__aeabi_uldivmod>
 80056f8:	0002      	movs	r2, r0
 80056fa:	000b      	movs	r3, r1
 80056fc:	0e11      	lsrs	r1, r2, #24
 80056fe:	021d      	lsls	r5, r3, #8
 8005700:	430d      	orrs	r5, r1
 8005702:	0214      	lsls	r4, r2, #8
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68b8      	ldr	r0, [r7, #8]
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	1900      	adds	r0, r0, r4
 8005716:	4169      	adcs	r1, r5
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	2300      	movs	r3, #0
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f7fa fd79 	bl	800021c <__aeabi_uldivmod>
 800572a:	0002      	movs	r2, r0
 800572c:	000b      	movs	r3, r1
 800572e:	0013      	movs	r3, r2
 8005730:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005734:	23c0      	movs	r3, #192	@ 0xc0
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	429a      	cmp	r2, r3
 800573a:	d309      	bcc.n	8005750 <UART_SetConfig+0x2e4>
 800573c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	035b      	lsls	r3, r3, #13
 8005742:	429a      	cmp	r2, r3
 8005744:	d204      	bcs.n	8005750 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800574c:	60da      	str	r2, [r3, #12]
 800574e:	e0e9      	b.n	8005924 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005750:	231a      	movs	r3, #26
 8005752:	2220      	movs	r2, #32
 8005754:	189b      	adds	r3, r3, r2
 8005756:	19db      	adds	r3, r3, r7
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e0e2      	b.n	8005924 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	2380      	movs	r3, #128	@ 0x80
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	429a      	cmp	r2, r3
 8005768:	d000      	beq.n	800576c <UART_SetConfig+0x300>
 800576a:	e083      	b.n	8005874 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800576c:	231b      	movs	r3, #27
 800576e:	2220      	movs	r2, #32
 8005770:	189b      	adds	r3, r3, r2
 8005772:	19db      	adds	r3, r3, r7
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b08      	cmp	r3, #8
 8005778:	d015      	beq.n	80057a6 <UART_SetConfig+0x33a>
 800577a:	dc2b      	bgt.n	80057d4 <UART_SetConfig+0x368>
 800577c:	2b04      	cmp	r3, #4
 800577e:	d00d      	beq.n	800579c <UART_SetConfig+0x330>
 8005780:	dc28      	bgt.n	80057d4 <UART_SetConfig+0x368>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <UART_SetConfig+0x320>
 8005786:	2b02      	cmp	r3, #2
 8005788:	d005      	beq.n	8005796 <UART_SetConfig+0x32a>
 800578a:	e023      	b.n	80057d4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fe f968 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8005790:	0003      	movs	r3, r0
 8005792:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005794:	e027      	b.n	80057e6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <UART_SetConfig+0x360>)
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800579a:	e024      	b.n	80057e6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579c:	f7fe f8d4 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 80057a0:	0003      	movs	r3, r0
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057a4:	e01f      	b.n	80057e6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a6:	2380      	movs	r3, #128	@ 0x80
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057ac:	e01b      	b.n	80057e6 <UART_SetConfig+0x37a>
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	cfff69f3 	.word	0xcfff69f3
 80057b4:	ffffcfff 	.word	0xffffcfff
 80057b8:	40008000 	.word	0x40008000
 80057bc:	11fff4ff 	.word	0x11fff4ff
 80057c0:	40013800 	.word	0x40013800
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40004400 	.word	0x40004400
 80057cc:	00f42400 	.word	0x00f42400
 80057d0:	0800622c 	.word	0x0800622c
      default:
        pclk = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80057d8:	231a      	movs	r3, #26
 80057da:	2220      	movs	r2, #32
 80057dc:	189b      	adds	r3, r3, r2
 80057de:	19db      	adds	r3, r3, r7
 80057e0:	2201      	movs	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
        break;
 80057e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d100      	bne.n	80057ee <UART_SetConfig+0x382>
 80057ec:	e09a      	b.n	8005924 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057f2:	4b58      	ldr	r3, [pc, #352]	@ (8005954 <UART_SetConfig+0x4e8>)
 80057f4:	0052      	lsls	r2, r2, #1
 80057f6:	5ad3      	ldrh	r3, [r2, r3]
 80057f8:	0019      	movs	r1, r3
 80057fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80057fc:	f7fa fc82 	bl	8000104 <__udivsi3>
 8005800:	0003      	movs	r3, r0
 8005802:	005a      	lsls	r2, r3, #1
 8005804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	18d2      	adds	r2, r2, r3
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	0019      	movs	r1, r3
 8005812:	0010      	movs	r0, r2
 8005814:	f7fa fc76 	bl	8000104 <__udivsi3>
 8005818:	0003      	movs	r3, r0
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	2b0f      	cmp	r3, #15
 8005820:	d921      	bls.n	8005866 <UART_SetConfig+0x3fa>
 8005822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005824:	2380      	movs	r3, #128	@ 0x80
 8005826:	025b      	lsls	r3, r3, #9
 8005828:	429a      	cmp	r2, r3
 800582a:	d21c      	bcs.n	8005866 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	b29a      	uxth	r2, r3
 8005830:	200e      	movs	r0, #14
 8005832:	2420      	movs	r4, #32
 8005834:	1903      	adds	r3, r0, r4
 8005836:	19db      	adds	r3, r3, r7
 8005838:	210f      	movs	r1, #15
 800583a:	438a      	bics	r2, r1
 800583c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	b29b      	uxth	r3, r3
 8005844:	2207      	movs	r2, #7
 8005846:	4013      	ands	r3, r2
 8005848:	b299      	uxth	r1, r3
 800584a:	1903      	adds	r3, r0, r4
 800584c:	19db      	adds	r3, r3, r7
 800584e:	1902      	adds	r2, r0, r4
 8005850:	19d2      	adds	r2, r2, r7
 8005852:	8812      	ldrh	r2, [r2, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	1902      	adds	r2, r0, r4
 800585e:	19d2      	adds	r2, r2, r7
 8005860:	8812      	ldrh	r2, [r2, #0]
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	e05e      	b.n	8005924 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005866:	231a      	movs	r3, #26
 8005868:	2220      	movs	r2, #32
 800586a:	189b      	adds	r3, r3, r2
 800586c:	19db      	adds	r3, r3, r7
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e057      	b.n	8005924 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005874:	231b      	movs	r3, #27
 8005876:	2220      	movs	r2, #32
 8005878:	189b      	adds	r3, r3, r2
 800587a:	19db      	adds	r3, r3, r7
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b08      	cmp	r3, #8
 8005880:	d015      	beq.n	80058ae <UART_SetConfig+0x442>
 8005882:	dc18      	bgt.n	80058b6 <UART_SetConfig+0x44a>
 8005884:	2b04      	cmp	r3, #4
 8005886:	d00d      	beq.n	80058a4 <UART_SetConfig+0x438>
 8005888:	dc15      	bgt.n	80058b6 <UART_SetConfig+0x44a>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <UART_SetConfig+0x428>
 800588e:	2b02      	cmp	r3, #2
 8005890:	d005      	beq.n	800589e <UART_SetConfig+0x432>
 8005892:	e010      	b.n	80058b6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005894:	f7fe f8e4 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8005898:	0003      	movs	r3, r0
 800589a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800589c:	e014      	b.n	80058c8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800589e:	4b2e      	ldr	r3, [pc, #184]	@ (8005958 <UART_SetConfig+0x4ec>)
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058a2:	e011      	b.n	80058c8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a4:	f7fe f850 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 80058a8:	0003      	movs	r3, r0
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058ac:	e00c      	b.n	80058c8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ae:	2380      	movs	r3, #128	@ 0x80
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058b4:	e008      	b.n	80058c8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80058ba:	231a      	movs	r3, #26
 80058bc:	2220      	movs	r2, #32
 80058be:	189b      	adds	r3, r3, r2
 80058c0:	19db      	adds	r3, r3, r7
 80058c2:	2201      	movs	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
        break;
 80058c6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80058c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d02a      	beq.n	8005924 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058d2:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <UART_SetConfig+0x4e8>)
 80058d4:	0052      	lsls	r2, r2, #1
 80058d6:	5ad3      	ldrh	r3, [r2, r3]
 80058d8:	0019      	movs	r1, r3
 80058da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80058dc:	f7fa fc12 	bl	8000104 <__udivsi3>
 80058e0:	0003      	movs	r3, r0
 80058e2:	001a      	movs	r2, r3
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	18d2      	adds	r2, r2, r3
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	0019      	movs	r1, r3
 80058f2:	0010      	movs	r0, r2
 80058f4:	f7fa fc06 	bl	8000104 <__udivsi3>
 80058f8:	0003      	movs	r3, r0
 80058fa:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	d90a      	bls.n	8005918 <UART_SetConfig+0x4ac>
 8005902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	025b      	lsls	r3, r3, #9
 8005908:	429a      	cmp	r2, r3
 800590a:	d205      	bcs.n	8005918 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	b29a      	uxth	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	e005      	b.n	8005924 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005918:	231a      	movs	r3, #26
 800591a:	2220      	movs	r2, #32
 800591c:	189b      	adds	r3, r3, r2
 800591e:	19db      	adds	r3, r3, r7
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	226a      	movs	r2, #106	@ 0x6a
 8005928:	2101      	movs	r1, #1
 800592a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	2268      	movs	r2, #104	@ 0x68
 8005930:	2101      	movs	r1, #1
 8005932:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	2200      	movs	r2, #0
 8005938:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	2200      	movs	r2, #0
 800593e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005940:	231a      	movs	r3, #26
 8005942:	2220      	movs	r2, #32
 8005944:	189b      	adds	r3, r3, r2
 8005946:	19db      	adds	r3, r3, r7
 8005948:	781b      	ldrb	r3, [r3, #0]
}
 800594a:	0018      	movs	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	b010      	add	sp, #64	@ 0x40
 8005950:	bdb0      	pop	{r4, r5, r7, pc}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	0800622c 	.word	0x0800622c
 8005958:	00f42400 	.word	0x00f42400

0800595c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	2208      	movs	r2, #8
 800596a:	4013      	ands	r3, r2
 800596c:	d00b      	beq.n	8005986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4a4a      	ldr	r2, [pc, #296]	@ (8005aa0 <UART_AdvFeatureConfig+0x144>)
 8005976:	4013      	ands	r3, r2
 8005978:	0019      	movs	r1, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	2201      	movs	r2, #1
 800598c:	4013      	ands	r3, r2
 800598e:	d00b      	beq.n	80059a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4a43      	ldr	r2, [pc, #268]	@ (8005aa4 <UART_AdvFeatureConfig+0x148>)
 8005998:	4013      	ands	r3, r2
 800599a:	0019      	movs	r1, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	2202      	movs	r2, #2
 80059ae:	4013      	ands	r3, r2
 80059b0:	d00b      	beq.n	80059ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4a3b      	ldr	r2, [pc, #236]	@ (8005aa8 <UART_AdvFeatureConfig+0x14c>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	0019      	movs	r1, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ce:	2204      	movs	r2, #4
 80059d0:	4013      	ands	r3, r2
 80059d2:	d00b      	beq.n	80059ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4a34      	ldr	r2, [pc, #208]	@ (8005aac <UART_AdvFeatureConfig+0x150>)
 80059dc:	4013      	ands	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	2210      	movs	r2, #16
 80059f2:	4013      	ands	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab0 <UART_AdvFeatureConfig+0x154>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a12:	2220      	movs	r2, #32
 8005a14:	4013      	ands	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4a25      	ldr	r2, [pc, #148]	@ (8005ab4 <UART_AdvFeatureConfig+0x158>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	0019      	movs	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	2240      	movs	r2, #64	@ 0x40
 8005a36:	4013      	ands	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab8 <UART_AdvFeatureConfig+0x15c>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	0019      	movs	r1, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a56:	2380      	movs	r3, #128	@ 0x80
 8005a58:	035b      	lsls	r3, r3, #13
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d10b      	bne.n	8005a76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <UART_AdvFeatureConfig+0x160>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	0019      	movs	r1, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7a:	2280      	movs	r2, #128	@ 0x80
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d00b      	beq.n	8005a98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4a0e      	ldr	r2, [pc, #56]	@ (8005ac0 <UART_AdvFeatureConfig+0x164>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }
}
 8005a98:	46c0      	nop			@ (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b002      	add	sp, #8
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	ffff7fff 	.word	0xffff7fff
 8005aa4:	fffdffff 	.word	0xfffdffff
 8005aa8:	fffeffff 	.word	0xfffeffff
 8005aac:	fffbffff 	.word	0xfffbffff
 8005ab0:	ffffefff 	.word	0xffffefff
 8005ab4:	ffffdfff 	.word	0xffffdfff
 8005ab8:	ffefffff 	.word	0xffefffff
 8005abc:	ff9fffff 	.word	0xff9fffff
 8005ac0:	fff7ffff 	.word	0xfff7ffff

08005ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b092      	sub	sp, #72	@ 0x48
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2290      	movs	r2, #144	@ 0x90
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ad4:	f7fb fd16 	bl	8001504 <HAL_GetTick>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d12d      	bne.n	8005b46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aec:	2280      	movs	r2, #128	@ 0x80
 8005aee:	0391      	lsls	r1, r2, #14
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4a47      	ldr	r2, [pc, #284]	@ (8005c10 <UART_CheckIdleState+0x14c>)
 8005af4:	9200      	str	r2, [sp, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f000 f88e 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d022      	beq.n	8005b46 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b00:	f3ef 8310 	mrs	r3, PRIMASK
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	f383 8810 	msr	PRIMASK, r3
}
 8005b14:	46c0      	nop			@ (mov r8, r8)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2180      	movs	r1, #128	@ 0x80
 8005b22:	438a      	bics	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2c:	f383 8810 	msr	PRIMASK, r3
}
 8005b30:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2288      	movs	r2, #136	@ 0x88
 8005b36:	2120      	movs	r1, #32
 8005b38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2284      	movs	r2, #132	@ 0x84
 8005b3e:	2100      	movs	r1, #0
 8005b40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e060      	b.n	8005c08 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d146      	bne.n	8005be2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b56:	2280      	movs	r2, #128	@ 0x80
 8005b58:	03d1      	lsls	r1, r2, #15
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c10 <UART_CheckIdleState+0x14c>)
 8005b5e:	9200      	str	r2, [sp, #0]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f000 f859 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 8005b66:	1e03      	subs	r3, r0, #0
 8005b68:	d03b      	beq.n	8005be2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b70:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b74:	2301      	movs	r3, #1
 8005b76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f383 8810 	msr	PRIMASK, r3
}
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4922      	ldr	r1, [pc, #136]	@ (8005c14 <UART_CheckIdleState+0x150>)
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f383 8810 	msr	PRIMASK, r3
}
 8005b9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ba2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f383 8810 	msr	PRIMASK, r3
}
 8005bb0:	46c0      	nop			@ (mov r8, r8)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	438a      	bics	r2, r1
 8005bc0:	609a      	str	r2, [r3, #8]
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f383 8810 	msr	PRIMASK, r3
}
 8005bcc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	228c      	movs	r2, #140	@ 0x8c
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2284      	movs	r2, #132	@ 0x84
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e012      	b.n	8005c08 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2288      	movs	r2, #136	@ 0x88
 8005be6:	2120      	movs	r1, #32
 8005be8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	228c      	movs	r2, #140	@ 0x8c
 8005bee:	2120      	movs	r1, #32
 8005bf0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2284      	movs	r2, #132	@ 0x84
 8005c02:	2100      	movs	r1, #0
 8005c04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	0018      	movs	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b010      	add	sp, #64	@ 0x40
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	01ffffff 	.word	0x01ffffff
 8005c14:	fffffedf 	.word	0xfffffedf

08005c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	1dfb      	adds	r3, r7, #7
 8005c26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c28:	e051      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	d04e      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c30:	f7fb fc68 	bl	8001504 <HAL_GetTick>
 8005c34:	0002      	movs	r2, r0
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d302      	bcc.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e051      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2204      	movs	r2, #4
 8005c52:	4013      	ands	r3, r2
 8005c54:	d03b      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb6>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b80      	cmp	r3, #128	@ 0x80
 8005c5a:	d038      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb6>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b40      	cmp	r3, #64	@ 0x40
 8005c60:	d035      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d111      	bne.n	8005c94 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2208      	movs	r2, #8
 8005c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f000 f83c 	bl	8005cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2290      	movs	r2, #144	@ 0x90
 8005c84:	2108      	movs	r1, #8
 8005c86:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2284      	movs	r2, #132	@ 0x84
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e02c      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69da      	ldr	r2, [r3, #28]
 8005c9a:	2380      	movs	r3, #128	@ 0x80
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d112      	bne.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2280      	movs	r2, #128	@ 0x80
 8005cae:	0112      	lsls	r2, r2, #4
 8005cb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 f81f 	bl	8005cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2290      	movs	r2, #144	@ 0x90
 8005cbe:	2120      	movs	r1, #32
 8005cc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2284      	movs	r2, #132	@ 0x84
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e00f      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	425a      	negs	r2, r3
 8005cde:	4153      	adcs	r3, r2
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	001a      	movs	r2, r3
 8005ce4:	1dfb      	adds	r3, r7, #7
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d09e      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	0018      	movs	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	b004      	add	sp, #16
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08e      	sub	sp, #56	@ 0x38
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d00:	f3ef 8310 	mrs	r3, PRIMASK
 8005d04:	617b      	str	r3, [r7, #20]
  return(result);
 8005d06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f383 8810 	msr	PRIMASK, r3
}
 8005d14:	46c0      	nop			@ (mov r8, r8)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4926      	ldr	r1, [pc, #152]	@ (8005dbc <UART_EndRxTransfer+0xc4>)
 8005d22:	400a      	ands	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f383 8810 	msr	PRIMASK, r3
}
 8005d30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d32:	f3ef 8310 	mrs	r3, PRIMASK
 8005d36:	623b      	str	r3, [r7, #32]
  return(result);
 8005d38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	491b      	ldr	r1, [pc, #108]	@ (8005dc0 <UART_EndRxTransfer+0xc8>)
 8005d54:	400a      	ands	r2, r1
 8005d56:	609a      	str	r2, [r3, #8]
 8005d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5e:	f383 8810 	msr	PRIMASK, r3
}
 8005d62:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d118      	bne.n	8005d9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d70:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d76:	2301      	movs	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f383 8810 	msr	PRIMASK, r3
}
 8005d80:	46c0      	nop			@ (mov r8, r8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2110      	movs	r1, #16
 8005d8e:	438a      	bics	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	228c      	movs	r2, #140	@ 0x8c
 8005da2:	2120      	movs	r1, #32
 8005da4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b00e      	add	sp, #56	@ 0x38
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	fffffedf 	.word	0xfffffedf
 8005dc0:	effffffe 	.word	0xeffffffe

08005dc4 <memset>:
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	1882      	adds	r2, r0, r2
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d100      	bne.n	8005dce <memset+0xa>
 8005dcc:	4770      	bx	lr
 8005dce:	7019      	strb	r1, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	e7f9      	b.n	8005dc8 <memset+0x4>

08005dd4 <__libc_init_array>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	4c0c      	ldr	r4, [pc, #48]	@ (8005e0c <__libc_init_array+0x38>)
 8005dda:	4d0d      	ldr	r5, [pc, #52]	@ (8005e10 <__libc_init_array+0x3c>)
 8005ddc:	1b64      	subs	r4, r4, r5
 8005dde:	10a4      	asrs	r4, r4, #2
 8005de0:	42a6      	cmp	r6, r4
 8005de2:	d109      	bne.n	8005df8 <__libc_init_array+0x24>
 8005de4:	2600      	movs	r6, #0
 8005de6:	f000 f819 	bl	8005e1c <_init>
 8005dea:	4c0a      	ldr	r4, [pc, #40]	@ (8005e14 <__libc_init_array+0x40>)
 8005dec:	4d0a      	ldr	r5, [pc, #40]	@ (8005e18 <__libc_init_array+0x44>)
 8005dee:	1b64      	subs	r4, r4, r5
 8005df0:	10a4      	asrs	r4, r4, #2
 8005df2:	42a6      	cmp	r6, r4
 8005df4:	d105      	bne.n	8005e02 <__libc_init_array+0x2e>
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	00b3      	lsls	r3, r6, #2
 8005dfa:	58eb      	ldr	r3, [r5, r3]
 8005dfc:	4798      	blx	r3
 8005dfe:	3601      	adds	r6, #1
 8005e00:	e7ee      	b.n	8005de0 <__libc_init_array+0xc>
 8005e02:	00b3      	lsls	r3, r6, #2
 8005e04:	58eb      	ldr	r3, [r5, r3]
 8005e06:	4798      	blx	r3
 8005e08:	3601      	adds	r6, #1
 8005e0a:	e7f2      	b.n	8005df2 <__libc_init_array+0x1e>
 8005e0c:	0800624c 	.word	0x0800624c
 8005e10:	0800624c 	.word	0x0800624c
 8005e14:	08006250 	.word	0x08006250
 8005e18:	0800624c 	.word	0x0800624c

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	46c0      	nop			@ (mov r8, r8)
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
