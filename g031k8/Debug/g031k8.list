
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6f0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d7ac  0800d7ac  0000e7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e21c  0800e21c  00010458  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e21c  0800e21c  0000f21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e224  0800e224  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e224  0800e224  0000f224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e228  0800e228  0000f228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000458  20000000  0800e22c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  20000458  0800e684  00010458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cf0  0800e684  00010cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021204  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000472f  00000000  00000000  00031684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001278  00000000  00000000  00037598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015ae8  00000000  00000000  00038810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008423  00000000  00000000  0004e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0005671b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000054e0  00000000  00000000  00056760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000458 	.word	0x20000458
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d794 	.word	0x0800d794

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000045c 	.word	0x2000045c
 8000100:	0800d794 	.word	0x0800d794

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000474 	.word	0x20000474
 80004fc:	0800d7ac 	.word	0x0800d7ac
 8000500:	20000484 	.word	0x20000484
 8000504:	20000000 	.word	0x20000000
 8000508:	0800d7b4 	.word	0x0800d7b4
 800050c:	20000008 	.word	0x20000008
 8000510:	0800d7bc 	.word	0x0800d7bc
 8000514:	20000010 	.word	0x20000010
 8000518:	0800d7c4 	.word	0x0800d7c4
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8fd 	bl	80007aa <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f912 	bl	80007fc <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f90d 	bl	800081a <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f908 	bl	8000838 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f903 	bl	8000856 <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa7b 	bl	8000b5c <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa95 	bl	8000ba6 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 faa3 	bl	8000bd8 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 faab 	bl	8000bfe <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fab9 	bl	8000c30 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000438 	.word	0x20000438
 80006cc:	20000c7c 	.word	0x20000c7c
 80006d0:	20000c58 	.word	0x20000c58
 80006d4:	20000430 	.word	0x20000430
 80006d8:	20000434 	.word	0x20000434
 80006dc:	2000043c 	.word	0x2000043c
 80006e0:	20000440 	.word	0x20000440
 80006e4:	200004bc 	.word	0x200004bc
 80006e8:	20000494 	.word	0x20000494
 80006ec:	200004c4 	.word	0x200004c4
 80006f0:	200004c5 	.word	0x200004c5
 80006f4:	200004c6 	.word	0x200004c6
 80006f8:	200004c7 	.word	0x200004c7
 80006fc:	200004c8 	.word	0x200004c8

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	701a      	strb	r2, [r3, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	891b      	ldrh	r3, [r3, #8]
 800076a:	b29b      	uxth	r3, r3
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b29b      	uxth	r3, r3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	705a      	strb	r2, [r3, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7a9b      	ldrb	r3, [r3, #10]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	709a      	strb	r2, [r3, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	b29b      	uxth	r3, r3
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	70da      	strb	r2, [r3, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000794:	b29b      	uxth	r3, r3
 8000796:	089b      	lsrs	r3, r3, #2
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	711a      	strb	r2, [r3, #4]

	return 1;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}

080007aa <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 80007b4:	210f      	movs	r1, #15
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007c4:	d803      	bhi.n	80007ce <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	719a      	strb	r2, [r3, #6]
 80007cc:	e011      	b.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b55      	cmp	r3, #85	@ 0x55
 80007d6:	d803      	bhi.n	80007e0 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2201      	movs	r2, #1
 80007dc:	719a      	strb	r2, [r3, #6]
 80007de:	e008      	b.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db02      	blt.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2202      	movs	r2, #2
 80007f0:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b004      	add	sp, #16
 80007fa:	bd80      	pop	{r7, pc}

080007fc <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	885b      	ldrh	r3, [r3, #2]
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	811a      	strh	r2, [r3, #8]

	return 1;
 8000810:	2301      	movs	r3, #1
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	729a      	strb	r2, [r3, #10]

	return 1;
 800082e:	2301      	movs	r3, #1
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}

08000838 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	88db      	ldrh	r3, [r3, #6]
 8000846:	b29a      	uxth	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	819a      	strh	r2, [r3, #12]

	return 1;
 800084c:	2301      	movs	r3, #1
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}

08000856 <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	891b      	ldrh	r3, [r3, #8]
 8000864:	b29a      	uxth	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}

08000874 <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 8000886:	2317      	movs	r3, #23
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e020      	b.n	80008d2 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000890:	2117      	movs	r1, #23
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da06      	bge.n	80008b0 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	227f      	movs	r2, #127	@ 0x7f
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e00a      	b.n	80008c6 <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 80008b0:	2117      	movs	r1, #23
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	18d2      	adds	r2, r2, r3
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	68f9      	ldr	r1, [r7, #12]
 80008c0:	18cb      	adds	r3, r1, r3
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 80008c6:	2117      	movs	r1, #23
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	3201      	adds	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	2317      	movs	r3, #23
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d9d9      	bls.n	8000890 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 80008dc:	2301      	movs	r3, #1
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b006      	add	sp, #24
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b088      	sub	sp, #32
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008f8:	2316      	movs	r3, #22
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	231f      	movs	r3, #31
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e02c      	b.n	8000964 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 800090a:	211f      	movs	r1, #31
 800090c:	187b      	adds	r3, r7, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	2016      	movs	r0, #22
 8000918:	183b      	adds	r3, r7, r0
 800091a:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 800091c:	183b      	adds	r3, r7, r0
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b01      	cmp	r3, #1
 8000924:	d106      	bne.n	8000934 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e011      	b.n	8000958 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000934:	2216      	movs	r2, #22
 8000936:	18bb      	adds	r3, r7, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2bff      	cmp	r3, #255	@ 0xff
 800093e:	d004      	beq.n	800094a <Read_and_Interpret_Misc_From_Flash+0x64>
 8000940:	18bb      	adds	r3, r7, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d106      	bne.n	8000958 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 800094a:	231f      	movs	r3, #31
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000958:	211f      	movs	r1, #31
 800095a:	187b      	adds	r3, r7, r1
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	187b      	adds	r3, r7, r1
 8000960:	3201      	adds	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	231f      	movs	r3, #31
 8000966:	18fa      	adds	r2, r7, r3
 8000968:	2128      	movs	r1, #40	@ 0x28
 800096a:	187b      	adds	r3, r7, r1
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3ca      	bcc.n	800090a <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	18d3      	adds	r3, r2, r3
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	2116      	movs	r1, #22
 8000980:	187b      	adds	r3, r7, r1
 8000982:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000984:	187b      	adds	r3, r7, r1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0018      	movs	r0, r3
 8000994:	f005 fcb6 	bl	8006304 <Clear_Status_Bit>
 8000998:	e00f      	b.n	80009ba <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 800099a:	2216      	movs	r2, #22
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d004      	beq.n	80009b0 <Read_and_Interpret_Misc_From_Flash+0xca>
 80009a6:	18bb      	adds	r3, r7, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2bff      	cmp	r3, #255	@ 0xff
 80009ae:	d104      	bne.n	80009ba <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f005 fc93 	bl	80062e0 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 80009ba:	2328      	movs	r3, #40	@ 0x28
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	2116      	movs	r1, #22
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d107      	bne.n	80009e8 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	00da      	lsls	r2, r3, #3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f005 fc7d 	bl	80062e0 <Set_Status_Bit>
 80009e6:	e011      	b.n	8000a0c <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 80009e8:	2216      	movs	r2, #22
 80009ea:	18bb      	adds	r3, r7, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <Read_and_Interpret_Misc_From_Flash+0x118>
 80009f4:	18bb      	adds	r3, r7, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2bff      	cmp	r3, #255	@ 0xff
 80009fc:	d106      	bne.n	8000a0c <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	00da      	lsls	r2, r3, #3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f005 fc7c 	bl	8006304 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000a0c:	2328      	movs	r3, #40	@ 0x28
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3302      	adds	r3, #2
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	18d3      	adds	r3, r2, r3
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	2116      	movs	r1, #22
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d908      	bls.n	8000a3c <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000a2a:	2117      	movs	r1, #23
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e005      	b.n	8000a48 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000a3c:	2316      	movs	r3, #22
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b008      	add	sp, #32
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a60:	2317      	movs	r3, #23
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	e03c      	b.n	8000ae4 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a6a:	2117      	movs	r1, #23
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	18d3      	adds	r3, r2, r3
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d112      	bne.n	8000aa2 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	189b      	adds	r3, r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	001a      	movs	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	f7ff fe30 	bl	8000700 <Convert_All_Preset_Values>
 8000aa0:	e01a      	b.n	8000ad8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000aa2:	2117      	movs	r1, #23
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d111      	bne.n	8000ad8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	189b      	adds	r3, r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	001a      	movs	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	189b      	adds	r3, r3, r2
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	f7ff fe14 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000ad8:	2117      	movs	r1, #23
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	3201      	adds	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	2317      	movs	r3, #23
 8000ae6:	18fa      	adds	r2, r7, r3
 8000ae8:	2320      	movs	r3, #32
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d3ba      	bcc.n	8000a6a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b006      	add	sp, #24
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000b06:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f7ff feb2 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000b12:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000b14:	0019      	movs	r1, r3
 8000b16:	0010      	movs	r0, r2
 8000b18:	f7ff feac 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b50 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f7ff fea6 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	0010      	movs	r0, r2
 8000b30:	f7ff fea0 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	0800f800 	.word	0x0800f800
 8000b44:	20000008 	.word	0x20000008
 8000b48:	0800f808 	.word	0x0800f808
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	0800f810 	.word	0x0800f810
 8000b54:	20000018 	.word	0x20000018
 8000b58:	0800f818 	.word	0x0800f818

08000b5c <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b6e:	d803      	bhi.n	8000b78 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	719a      	strb	r2, [r3, #6]
 8000b76:	e011      	b.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b55      	cmp	r3, #85	@ 0x55
 8000b80:	d803      	bhi.n	8000b8a <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2201      	movs	r2, #1
 8000b86:	719a      	strb	r2, [r3, #6]
 8000b88:	e008      	b.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db02      	blt.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	210e      	movs	r1, #14
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	8812      	ldrh	r2, [r2, #0]
 8000bc2:	00d2      	lsls	r2, r2, #3
 8000bc4:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	187a      	adds	r2, r7, r1
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	811a      	strh	r2, [r3, #8]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	729a      	strb	r2, [r3, #10]

	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000c08:	210f      	movs	r1, #15
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	18db      	adds	r3, r3, r3
 8000c1a:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	819a      	strh	r2, [r3, #12]

	return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b004      	add	sp, #16
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	187a      	adds	r2, r7, r1
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c74:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c82:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c84:	2301      	movs	r3, #1
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000438 	.word	0x20000438
 8000c94:	200004c4 	.word	0x200004c4

08000c98 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000ca8:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000cb6:	705a      	strb	r2, [r3, #1]

	return 1;
 8000cb8:	2301      	movs	r3, #1
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	20000430 	.word	0x20000430
 8000cc8:	200004c4 	.word	0x200004c4

08000ccc <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000cdc:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000cea:	709a      	strb	r2, [r3, #2]

	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000434 	.word	0x20000434
 8000cfc:	200004c4 	.word	0x200004c4

08000d00 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d10:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000d1e:	70da      	strb	r2, [r3, #3]

	return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	2000043c 	.word	0x2000043c
 8000d30:	200004c4 	.word	0x200004c4

08000d34 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d44:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000d52:	711a      	strb	r2, [r3, #4]

	return 1;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000440 	.word	0x20000440
 8000d64:	200004c4 	.word	0x200004c4

08000d68 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d74:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d84:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d88:	2203      	movs	r2, #3
 8000d8a:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d94:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000da4:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000db4:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	701a      	strb	r2, [r3, #0]

	return 1;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000438 	.word	0x20000438
 8000dc8:	20000430 	.word	0x20000430
 8000dcc:	20000434 	.word	0x20000434
 8000dd0:	2000043c 	.word	0x2000043c
 8000dd4:	20000440 	.word	0x20000440

08000dd8 <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	240f      	movs	r4, #15
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	1c02      	adds	r2, r0, #0
 8000dea:	701a      	strb	r2, [r3, #0]

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 8000dec:	2117      	movs	r1, #23
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	193a      	adds	r2, r7, r4
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]

	*(user_presets_used_array_ptr + preset_index) = YES;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	18d3      	adds	r3, r2, r3
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fc9c 	bl	8000752 <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000e22:	2404      	movs	r4, #4
 8000e24:	9400      	str	r4, [sp, #0]
 8000e26:	f7ff fe14 	bl	8000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																user_presets_used_array_ptr,
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b007      	add	sp, #28
 8000e32:	bd90      	pop	{r4, r7, pc}

08000e34 <set_LED_to_state>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t set_LED_to_state(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	1cfb      	adds	r3, r7, #3
 8000e40:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM){
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	d114      	bne.n	8000e74 <set_LED_to_state+0x40>

		if(LED_fsm.current_state != LED_CONFIRM){
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <set_LED_to_state+0x8c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d026      	beq.n	8000ea2 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e5e:	2296      	movs	r2, #150	@ 0x96
 8000e60:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <set_LED_to_state+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a16      	ldr	r2, [pc, #88]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e72:	e016      	b.n	8000ea2 <set_LED_to_state+0x6e>
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	1cfa      	adds	r2, r7, #3
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d00f      	beq.n	8000ea2 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e8c:	2296      	movs	r2, #150	@ 0x96
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <set_LED_to_state+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1cfa      	adds	r2, r7, #3
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	701a      	strb	r2, [r3, #0]

	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000448 	.word	0x20000448
 8000ec4:	200005e0 	.word	0x200005e0
 8000ec8:	20000020 	.word	0x20000020
 8000ecc:	200004c9 	.word	0x200004c9

08000ed0 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000ed8:	210f      	movs	r1, #15
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	187a      	adds	r2, r7, r1
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	09d2      	lsrs	r2, r2, #7
 8000eea:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000ef8:	2300      	movs	r3, #0
	}
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	187a      	adds	r2, r7, r1
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	09d2      	lsrs	r2, r2, #7
 8000f1c:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000f2a:	2301      	movs	r3, #1
	}
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	220c      	movs	r2, #12
 8000f42:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	200e      	movs	r0, #14
 8000f4c:	183b      	adds	r3, r7, r0
 8000f4e:	0912      	lsrs	r2, r2, #4
 8000f50:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000f52:	183a      	adds	r2, r7, r0
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d101      	bne.n	8000f62 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000f62:	2300      	movs	r3, #0
	}
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000f74:	210f      	movs	r1, #15
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	220b      	movs	r2, #11
 8000f7a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	200e      	movs	r0, #14
 8000f84:	183b      	adds	r3, r7, r0
 8000f86:	0912      	lsrs	r2, r2, #4
 8000f88:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000f8a:	183a      	adds	r2, r7, r0
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d101      	bne.n	8000f9a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000f9a:	2300      	movs	r3, #0
	}
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b004      	add	sp, #16
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b77      	cmp	r3, #119	@ 0x77
 8000fb4:	d91d      	bls.n	8000ff2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b79      	cmp	r3, #121	@ 0x79
 8000fbe:	d101      	bne.n	8000fc4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e017      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fcc:	d101      	bne.n	8000fd2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e010      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fda:	d101      	bne.n	8000fe0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e009      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b7c      	cmp	r3, #124	@ 0x7c
 8000fe8:	d101      	bne.n	8000fee <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e002      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000ff2:	2300      	movs	r3, #0
	}
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b77      	cmp	r3, #119	@ 0x77
 800100c:	d901      	bls.n	8001012 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 800100e:	2300      	movs	r3, #0
 8001010:	e023      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b14      	cmp	r3, #20
 800101a:	d101      	bne.n	8001020 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 800101c:	2301      	movs	r3, #1
 800101e:	e01c      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b15      	cmp	r3, #21
 8001028:	d101      	bne.n	800102e <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 800102a:	2301      	movs	r3, #1
 800102c:	e015      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b16      	cmp	r3, #22
 8001036:	d101      	bne.n	800103c <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8001038:	2301      	movs	r3, #1
 800103a:	e00e      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b17      	cmp	r3, #23
 8001044:	d101      	bne.n	800104a <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8001046:	2301      	movs	r3, #1
 8001048:	e007      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b18      	cmp	r3, #24
 8001052:	d101      	bne.n	8001058 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8001058:	2300      	movs	r3, #0
		}
	}
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}

08001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b79      	cmp	r3, #121	@ 0x79
 8001074:	d108      	bne.n	8001088 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8001080:	2301      	movs	r3, #1
 8001082:	e031      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001084:	2300      	movs	r3, #0
 8001086:	e02f      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001090:	d10d      	bne.n	80010ae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80010a4:	d101      	bne.n	80010aa <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e01e      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e01c      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b7c      	cmp	r3, #124	@ 0x7c
 80010b6:	d108      	bne.n	80010ca <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e010      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e00e      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b7d      	cmp	r3, #125	@ 0x7d
 80010d2:	d108      	bne.n	80010e6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 80010de:	2301      	movs	r3, #1
 80010e0:	e002      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 80010e6:	2300      	movs	r3, #0
	}
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8001100:	d101      	bne.n	8001106 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8001106:	2300      	movs	r3, #0
	}
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	000a      	movs	r2, r1
 800111a:	1cfb      	adds	r3, r7, #3
 800111c:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	200f      	movs	r0, #15
 8001126:	183b      	adds	r3, r7, r0
 8001128:	210f      	movs	r1, #15
 800112a:	400a      	ands	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 800112e:	210e      	movs	r1, #14
 8001130:	187b      	adds	r3, r7, r1
 8001132:	1cfa      	adds	r2, r7, #3
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8001138:	183a      	adds	r2, r7, r0
 800113a:	187b      	adds	r3, r7, r1
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d101      	bne.n	8001148 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8001148:	2300      	movs	r3, #0
	}
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800115a:	230e      	movs	r3, #14
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001162:	230d      	movs	r3, #13
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e011      	b.n	8001190 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800116c:	200d      	movs	r0, #13
 800116e:	183b      	adds	r3, r7, r0
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	0019      	movs	r1, r3
 800117a:	220e      	movs	r2, #14
 800117c:	18bb      	adds	r3, r7, r2
 800117e:	18ba      	adds	r2, r7, r2
 8001180:	8812      	ldrh	r2, [r2, #0]
 8001182:	188a      	adds	r2, r1, r2
 8001184:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001186:	183b      	adds	r3, r7, r0
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	183b      	adds	r3, r7, r0
 800118c:	3201      	adds	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	230d      	movs	r3, #13
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b09      	cmp	r3, #9
 8001198:	d9e8      	bls.n	800116c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800119a:	230e      	movs	r3, #14
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 80011a8:	2300      	movs	r3, #0
	}
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b004      	add	sp, #16
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80011ba:	230f      	movs	r3, #15
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e00a      	b.n	80011da <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 80011c4:	200f      	movs	r0, #15
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80011d0:	183b      	adds	r3, r7, r0
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	3201      	adds	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	230f      	movs	r3, #15
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d9ef      	bls.n	80011c4 <Clear_Data_Buffer+0x12>
	}

	return 1;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}

080011ee <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	000a      	movs	r2, r1
 80011f8:	1cfb      	adds	r3, r7, #3
 80011fa:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	1cfa      	adds	r2, r7, #3
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d901      	bls.n	800120e <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 800120e:	2300      	movs	r3, #0
	}
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}

08001218 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2bf8      	cmp	r3, #248	@ 0xf8
 8001228:	d101      	bne.n	800122e <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 800122a:	2301      	movs	r3, #1
 800122c:	e023      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2bfa      	cmp	r3, #250	@ 0xfa
 8001236:	d101      	bne.n	800123c <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 8001238:	2301      	movs	r3, #1
 800123a:	e01c      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2bfb      	cmp	r3, #251	@ 0xfb
 8001244:	d101      	bne.n	800124a <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8001246:	2301      	movs	r3, #1
 8001248:	e015      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2bfc      	cmp	r3, #252	@ 0xfc
 8001252:	d101      	bne.n	8001258 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001254:	2301      	movs	r3, #1
 8001256:	e00e      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001260:	d101      	bne.n	8001266 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001262:	2301      	movs	r3, #1
 8001264:	e007      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2bff      	cmp	r3, #255	@ 0xff
 800126e:	d101      	bne.n	8001274 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001274:	2300      	movs	r3, #0
	}
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}

0800127e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800127e:	b5b0      	push	{r4, r5, r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001286:	250f      	movs	r5, #15
 8001288:	197c      	adds	r4, r7, r5
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	00da      	lsls	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f005 f810 	bl	80062b8 <Get_Status_Bit>
 8001298:	0003      	movs	r3, r0
 800129a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800129c:	197b      	adds	r3, r7, r5
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 80012a8:	2300      	movs	r3, #0
	}
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}

080012b2 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	005a      	lsls	r2, r3, #1
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f005 f81d 	bl	8006304 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	009a      	lsls	r2, r3, #2
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	0011      	movs	r1, r2
 80012d2:	0018      	movs	r0, r3
 80012d4:	f005 f816 	bl	8006304 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]

	return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <Reset_All_Controllers+0x9c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <Reset_All_Controllers+0x9c>)
 80012fa:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <Reset_All_Controllers+0xa0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <Reset_All_Controllers+0xa0>)
 8001304:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <Reset_All_Controllers+0xa4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <Reset_All_Controllers+0xa4>)
 800130e:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001318:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <Reset_All_Controllers+0xac>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <Reset_All_Controllers+0xac>)
 8001322:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <Reset_All_Controllers+0x9c>)
 8001326:	2202      	movs	r2, #2
 8001328:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <Reset_All_Controllers+0xa0>)
 800132c:	2202      	movs	r2, #2
 800132e:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <Reset_All_Controllers+0xa4>)
 8001332:	2202      	movs	r2, #2
 8001334:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001338:	2202      	movs	r2, #2
 800133a:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <Reset_All_Controllers+0xac>)
 800133e:	2202      	movs	r2, #2
 8001340:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 8001342:	230e      	movs	r3, #14
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	223f      	movs	r2, #63	@ 0x3f
 8001348:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e00c      	b.n	800136e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001354:	200f      	movs	r0, #15
 8001356:	183b      	adds	r3, r7, r0
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <Reset_All_Controllers+0xb0>)
 800135c:	210e      	movs	r1, #14
 800135e:	1879      	adds	r1, r7, r1
 8001360:	7809      	ldrb	r1, [r1, #0]
 8001362:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001364:	183b      	adds	r3, r7, r0
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	183b      	adds	r3, r7, r0
 800136a:	3201      	adds	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d9ed      	bls.n	8001354 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	20000438 	.word	0x20000438
 8001388:	20000430 	.word	0x20000430
 800138c:	20000434 	.word	0x20000434
 8001390:	2000043c 	.word	0x2000043c
 8001394:	20000440 	.word	0x20000440
 8001398:	200004c4 	.word	0x200004c4

0800139c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013a8:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <Set_Local_Control+0x60>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <Set_Local_Control+0x60>)
 80013b2:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <Set_Local_Control+0x64>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <Set_Local_Control+0x64>)
 80013bc:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <Set_Local_Control+0x68>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <Set_Local_Control+0x68>)
 80013c6:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <Set_Local_Control+0x6c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <Set_Local_Control+0x6c>)
 80013d0:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <Set_Local_Control+0x60>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <Set_Local_Control+0x64>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <Set_Local_Control+0x68>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <Set_Local_Control+0x6c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]

	return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000438 	.word	0x20000438
 80013fc:	20000430 	.word	0x20000430
 8001400:	20000434 	.word	0x20000434
 8001404:	2000043c 	.word	0x2000043c
 8001408:	20000440 	.word	0x20000440

0800140c <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	00da      	lsls	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	0011      	movs	r1, r2
 800141c:	0018      	movs	r0, r3
 800141e:	f004 ff71 	bl	8006304 <Clear_Status_Bit>

	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}

0800142c <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f004 ff4f 	bl	80062e0 <Set_Status_Bit>

	return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b002      	add	sp, #8
 800144a:	bd80      	pop	{r7, pc}

0800144c <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001450:	4904      	ldr	r1, [pc, #16]	@ (8001464 <Start_UART_Receive+0x18>)
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <Start_UART_Receive+0x1c>)
 8001454:	2201      	movs	r2, #1
 8001456:	0018      	movs	r0, r3
 8001458:	f00a fe44 	bl	800c0e4 <HAL_UART_Receive_DMA>

	return 1;
 800145c:	2301      	movs	r3, #1
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200004dc 	.word	0x200004dc
 8001468:	20000a48 	.word	0x20000a48

0800146c <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	000a      	movs	r2, r1
 8001476:	1cfb      	adds	r3, r7, #3
 8001478:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 800148a:	2117      	movs	r1, #23
 800148c:	187b      	adds	r3, r7, r1
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 800149a:	1cfb      	adds	r3, r7, #3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10d      	bne.n	80014be <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 80014a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <Pot_Check+0x1ec>)
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 80014a6:	4b6d      	ldr	r3, [pc, #436]	@ (800165c <Pot_Check+0x1f0>)
 80014a8:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 80014aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001660 <Pot_Check+0x1f4>)
 80014ac:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2246      	movs	r2, #70	@ 0x46
 80014b6:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 80014b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <Pot_Check+0x1f8>)
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	e04e      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 80014be:	1cfb      	adds	r3, r7, #3
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10f      	bne.n	80014e6 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 80014c6:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <Pot_Check+0x1fc>)
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 80014ca:	4b68      	ldr	r3, [pc, #416]	@ (800166c <Pot_Check+0x200>)
 80014cc:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 80014ce:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <Pot_Check+0x204>)
 80014d0:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3302      	adds	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 80014d8:	2317      	movs	r3, #23
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2246      	movs	r2, #70	@ 0x46
 80014de:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 80014e0:	4b64      	ldr	r3, [pc, #400]	@ (8001674 <Pot_Check+0x208>)
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e03a      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 80014e6:	1cfb      	adds	r3, r7, #3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d10f      	bne.n	800150e <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 80014ee:	4b62      	ldr	r3, [pc, #392]	@ (8001678 <Pot_Check+0x20c>)
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 80014f2:	4b62      	ldr	r3, [pc, #392]	@ (800167c <Pot_Check+0x210>)
 80014f4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 80014f6:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <Pot_Check+0x214>)
 80014f8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2246      	movs	r2, #70	@ 0x46
 8001506:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001508:	4b5e      	ldr	r3, [pc, #376]	@ (8001684 <Pot_Check+0x218>)
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	e026      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 800150e:	1cfb      	adds	r3, r7, #3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d10f      	bne.n	8001536 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001516:	4b5c      	ldr	r3, [pc, #368]	@ (8001688 <Pot_Check+0x21c>)
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 800151a:	4b5c      	ldr	r3, [pc, #368]	@ (800168c <Pot_Check+0x220>)
 800151c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 800151e:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <Pot_Check+0x224>)
 8001520:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3306      	adds	r3, #6
 8001526:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001528:	2317      	movs	r3, #23
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2246      	movs	r2, #70	@ 0x46
 800152e:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001530:	4b58      	ldr	r3, [pc, #352]	@ (8001694 <Pot_Check+0x228>)
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	e012      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001536:	1cfb      	adds	r3, r7, #3
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b04      	cmp	r3, #4
 800153c:	d10e      	bne.n	800155c <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 800153e:	4b56      	ldr	r3, [pc, #344]	@ (8001698 <Pot_Check+0x22c>)
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8001542:	4b56      	ldr	r3, [pc, #344]	@ (800169c <Pot_Check+0x230>)
 8001544:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001546:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <Pot_Check+0x234>)
 8001548:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3308      	adds	r3, #8
 800154e:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001550:	2317      	movs	r3, #23
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	2246      	movs	r2, #70	@ 0x46
 8001556:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001558:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <Pot_Check+0x238>)
 800155a:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10b      	bne.n	800157e <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	881a      	ldrh	r2, [r3, #0]
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e066      	b.n	800164c <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10b      	bne.n	80015a0 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e055      	b.n	800164c <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d150      	bne.n	800164c <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 80015b0:	200a      	movs	r0, #10
 80015b2:	183b      	adds	r3, r7, r0
 80015b4:	2200      	movs	r2, #0
 80015b6:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d907      	bls.n	80015d4 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	8819      	ldrh	r1, [r3, #0]
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	183b      	adds	r3, r7, r0
 80015ce:	1a8a      	subs	r2, r1, r2
 80015d0:	801a      	strh	r2, [r3, #0]
 80015d2:	e00d      	b.n	80015f0 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d907      	bls.n	80015f0 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	8819      	ldrh	r1, [r3, #0]
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	230a      	movs	r3, #10
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	1a8a      	subs	r2, r1, r2
 80015ee:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 80015f0:	2317      	movs	r3, #23
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	220a      	movs	r2, #10
 80015fa:	18ba      	adds	r2, r7, r2
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d924      	bls.n	800164c <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e018      	b.n	800164c <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <Pot_Check+0x23c>)
 8001630:	2120      	movs	r1, #32
 8001632:	0018      	movs	r0, r3
 8001634:	f004 fe66 	bl	8006304 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <Pot_Check+0x23c>)
 800163a:	2140      	movs	r1, #64	@ 0x40
 800163c:	0018      	movs	r0, r3
 800163e:	f004 fe61 	bl	8006304 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001642:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <Pot_Check+0x23c>)
 8001644:	2108      	movs	r1, #8
 8001646:	0018      	movs	r0, r3
 8001648:	f004 fe5c 	bl	8006304 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b00a      	add	sp, #40	@ 0x28
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	200004e4 	.word	0x200004e4
 800165c:	200004e6 	.word	0x200004e6
 8001660:	200004dd 	.word	0x200004dd
 8001664:	20000438 	.word	0x20000438
 8001668:	200004e8 	.word	0x200004e8
 800166c:	200004ea 	.word	0x200004ea
 8001670:	200004de 	.word	0x200004de
 8001674:	20000430 	.word	0x20000430
 8001678:	200004ec 	.word	0x200004ec
 800167c:	200004ee 	.word	0x200004ee
 8001680:	200004df 	.word	0x200004df
 8001684:	20000434 	.word	0x20000434
 8001688:	200004f0 	.word	0x200004f0
 800168c:	200004f2 	.word	0x200004f2
 8001690:	200004e0 	.word	0x200004e0
 8001694:	2000043c 	.word	0x2000043c
 8001698:	200004f4 	.word	0x200004f4
 800169c:	200004f6 	.word	0x200004f6
 80016a0:	200004e1 	.word	0x200004e1
 80016a4:	20000440 	.word	0x20000440
 80016a8:	20000c3c 	.word	0x20000c3c

080016ac <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80016b4:	250f      	movs	r5, #15
 80016b6:	197c      	adds	r4, r7, r5
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	00da      	lsls	r2, r3, #3
 80016bc:	23a0      	movs	r3, #160	@ 0xa0
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f006 fe9e 	bl	8008404 <HAL_GPIO_ReadPin>
 80016c8:	0003      	movs	r3, r0
 80016ca:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10a      	bne.n	80016ea <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01e      	beq.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e017      	b.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b0e      	cmp	r3, #14
 80016f0:	d013      	beq.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d109      	bne.n	800170e <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 8001704:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e005      	b.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001718:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e006      	b.n	8001738 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b0e      	cmp	r3, #14
 8001730:	d102      	bne.n	8001738 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001738:	2301      	movs	r3, #1
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bdb0      	pop	{r4, r5, r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	20000024 	.word	0x20000024
 8001748:	200004f8 	.word	0x200004f8

0800174c <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b093      	sub	sp, #76	@ 0x4c
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	2410      	movs	r4, #16
 8001754:	193b      	adds	r3, r7, r4
 8001756:	0018      	movs	r0, r3
 8001758:	2338      	movs	r3, #56	@ 0x38
 800175a:	001a      	movs	r2, r3
 800175c:	2100      	movs	r1, #0
 800175e:	f00b ffe3 	bl	800d728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001762:	003b      	movs	r3, r7
 8001764:	0018      	movs	r0, r3
 8001766:	2310      	movs	r3, #16
 8001768:	001a      	movs	r2, r3
 800176a:	2100      	movs	r1, #0
 800176c:	f00b ffdc 	bl	800d728 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	0018      	movs	r0, r3
 8001776:	f007 fab7 	bl	8008ce8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001780:	193b      	adds	r3, r7, r4
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	0052      	lsls	r2, r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001788:	0021      	movs	r1, r4
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2240      	movs	r2, #64	@ 0x40
 8001794:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2202      	movs	r2, #2
 800179a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2202      	movs	r2, #2
 80017a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2208      	movs	r2, #8
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	0292      	lsls	r2, r2, #10
 80017b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	22c0      	movs	r2, #192	@ 0xc0
 80017ba:	04d2      	lsls	r2, r2, #19
 80017bc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	2280      	movs	r2, #128	@ 0x80
 80017c2:	0592      	lsls	r2, r2, #22
 80017c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	0018      	movs	r0, r3
 80017ca:	f007 fad9 	bl	8008d80 <HAL_RCC_OscConfig>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017d2:	f000 fdcb 	bl	800236c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	003b      	movs	r3, r7
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	003b      	movs	r3, r7
 80017de:	2202      	movs	r2, #2
 80017e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	003b      	movs	r3, r7
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e8:	003b      	movs	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ee:	003b      	movs	r3, r7
 80017f0:	2102      	movs	r1, #2
 80017f2:	0018      	movs	r0, r3
 80017f4:	f007 fdde 	bl	80093b4 <HAL_RCC_ClockConfig>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017fc:	f000 fdb6 	bl	800236c <Error_Handler>
  }
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b013      	add	sp, #76	@ 0x4c
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	0018      	movs	r0, r3
 8001812:	230c      	movs	r3, #12
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f00b ff86 	bl	800d728 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800181c:	4b54      	ldr	r3, [pc, #336]	@ (8001970 <MX_ADC1_Init+0x168>)
 800181e:	4a55      	ldr	r2, [pc, #340]	@ (8001974 <MX_ADC1_Init+0x16c>)
 8001820:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001822:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001824:	2280      	movs	r2, #128	@ 0x80
 8001826:	05d2      	lsls	r2, r2, #23
 8001828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800182a:	4b51      	ldr	r3, [pc, #324]	@ (8001970 <MX_ADC1_Init+0x168>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001830:	4b4f      	ldr	r3, [pc, #316]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001836:	4b4e      	ldr	r3, [pc, #312]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	0392      	lsls	r2, r2, #14
 800183c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800183e:	4b4c      	ldr	r3, [pc, #304]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001840:	2208      	movs	r2, #8
 8001842:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001844:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001846:	2200      	movs	r2, #0
 8001848:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800184a:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <MX_ADC1_Init+0x168>)
 800184c:	2200      	movs	r2, #0
 800184e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001850:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001852:	2200      	movs	r2, #0
 8001854:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001856:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001858:	2205      	movs	r2, #5
 800185a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800185c:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <MX_ADC1_Init+0x168>)
 800185e:	2220      	movs	r2, #32
 8001860:	2100      	movs	r1, #0
 8001862:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001864:	4b42      	ldr	r3, [pc, #264]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186a:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <MX_ADC1_Init+0x168>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001870:	4b3f      	ldr	r3, [pc, #252]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001872:	222c      	movs	r2, #44	@ 0x2c
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001878:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <MX_ADC1_Init+0x168>)
 800187a:	2200      	movs	r2, #0
 800187c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001880:	2200      	movs	r2, #0
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001886:	2200      	movs	r2, #0
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800188a:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <MX_ADC1_Init+0x168>)
 800188c:	223c      	movs	r2, #60	@ 0x3c
 800188e:	2100      	movs	r1, #0
 8001890:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001892:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001894:	2200      	movs	r2, #0
 8001896:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001898:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <MX_ADC1_Init+0x168>)
 800189a:	0018      	movs	r0, r3
 800189c:	f004 ff60 	bl	8006760 <HAL_ADC_Init>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80018a4:	f000 fd62 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ba:	1d3a      	adds	r2, r7, #4
 80018bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <MX_ADC1_Init+0x168>)
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f005 fad1 	bl	8006e68 <HAL_ADC_ConfigChannel>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d001      	beq.n	80018ce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80018ca:	f000 fd4f 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4a29      	ldr	r2, [pc, #164]	@ (8001978 <MX_ADC1_Init+0x170>)
 80018d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2204      	movs	r2, #4
 80018d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e0:	1d3a      	adds	r2, r7, #4
 80018e2:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <MX_ADC1_Init+0x168>)
 80018e4:	0011      	movs	r1, r2
 80018e6:	0018      	movs	r0, r3
 80018e8:	f005 fabe 	bl	8006e68 <HAL_ADC_ConfigChannel>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80018f0:	f000 fd3c 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4a21      	ldr	r2, [pc, #132]	@ (800197c <MX_ADC1_Init+0x174>)
 80018f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2208      	movs	r2, #8
 80018fe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001906:	1d3a      	adds	r2, r7, #4
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MX_ADC1_Init+0x168>)
 800190a:	0011      	movs	r1, r2
 800190c:	0018      	movs	r0, r3
 800190e:	f005 faab 	bl	8006e68 <HAL_ADC_ConfigChannel>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d001      	beq.n	800191a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001916:	f000 fd29 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <MX_ADC1_Init+0x178>)
 800191e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	220c      	movs	r2, #12
 8001924:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192c:	1d3a      	adds	r2, r7, #4
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001930:	0011      	movs	r1, r2
 8001932:	0018      	movs	r0, r3
 8001934:	f005 fa98 	bl	8006e68 <HAL_ADC_ConfigChannel>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800193c:	f000 fd16 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <MX_ADC1_Init+0x17c>)
 8001944:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2210      	movs	r2, #16
 800194a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001952:	1d3a      	adds	r2, r7, #4
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001956:	0011      	movs	r1, r2
 8001958:	0018      	movs	r0, r3
 800195a:	f005 fa85 	bl	8006e68 <HAL_ADC_ConfigChannel>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001962:	f000 fd03 	bl	800236c <Error_Handler>
  }
}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	200004fc 	.word	0x200004fc
 8001974:	40012400 	.word	0x40012400
 8001978:	04000002 	.word	0x04000002
 800197c:	10000010 	.word	0x10000010
 8001980:	14000020 	.word	0x14000020
 8001984:	18000040 	.word	0x18000040

08001988 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800198e:	2334      	movs	r3, #52	@ 0x34
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	0018      	movs	r0, r3
 8001994:	231c      	movs	r3, #28
 8001996:	001a      	movs	r2, r3
 8001998:	2100      	movs	r1, #0
 800199a:	f00b fec5 	bl	800d728 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800199e:	003b      	movs	r3, r7
 80019a0:	0018      	movs	r0, r3
 80019a2:	2334      	movs	r3, #52	@ 0x34
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f00b febe 	bl	800d728 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80019ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ae:	4a3b      	ldr	r2, [pc, #236]	@ (8001a9c <MX_TIM16_Init+0x114>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80019b2:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019c0:	22ff      	movs	r2, #255	@ 0xff
 80019c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019c6:	2280      	movs	r2, #128	@ 0x80
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b31      	ldr	r3, [pc, #196]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f008 f80e 	bl	80099fc <HAL_TIM_Base_Init>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80019e4:	f000 fcc2 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80019e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f008 f90c 	bl	8009c08 <HAL_TIM_OC_Init>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80019f4:	f000 fcba 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019f8:	2134      	movs	r1, #52	@ 0x34
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	22ff      	movs	r2, #255	@ 0xff
 8001a04:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	1879      	adds	r1, r7, r1
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f008 ff60 	bl	800a8f0 <HAL_TIM_OC_ConfigChannel>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001a34:	f000 fc9a 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2108      	movs	r1, #8
 8001a44:	438a      	bics	r2, r1
 8001a46:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a48:	003b      	movs	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a4e:	003b      	movs	r3, r7
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a54:	003b      	movs	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a66:	003b      	movs	r3, r7
 8001a68:	2280      	movs	r2, #128	@ 0x80
 8001a6a:	0192      	lsls	r2, r2, #6
 8001a6c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a6e:	003b      	movs	r3, r7
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a74:	003b      	movs	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001a7a:	003a      	movs	r2, r7
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f00a f95b 	bl	800bd3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8001a8a:	f000 fc6f 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b014      	add	sp, #80	@ 0x50
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	20000758 	.word	0x20000758
 8001a9c:	40014400 	.word	0x40014400

08001aa0 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	0018      	movs	r0, r3
 8001aac:	2310      	movs	r3, #16
 8001aae:	001a      	movs	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f00b fe39 	bl	800d728 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab6:	2314      	movs	r3, #20
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	0018      	movs	r0, r3
 8001abc:	230c      	movs	r3, #12
 8001abe:	001a      	movs	r2, r3
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f00b fe31 	bl	800d728 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	0018      	movs	r0, r3
 8001aca:	2310      	movs	r3, #16
 8001acc:	001a      	movs	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f00b fe2a 	bl	800d728 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ad6:	2280      	movs	r2, #128	@ 0x80
 8001ad8:	05d2      	lsls	r2, r2, #23
 8001ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ade:	223f      	movs	r2, #63	@ 0x3f
 8001ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001ae8:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001aea:	4a2a      	ldr	r2, [pc, #168]	@ (8001b94 <MX_TIM2_Init+0xf4>)
 8001aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001af0:	2280      	movs	r2, #128	@ 0x80
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001af8:	2280      	movs	r2, #128	@ 0x80
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f007 ff7c 	bl	80099fc <HAL_TIM_Base_Init>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001b08:	f000 fc30 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	0152      	lsls	r2, r2, #5
 8001b14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b16:	187a      	adds	r2, r7, r1
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f009 f8eb 	bl	800acf8 <HAL_TIM_ConfigClockSource>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b26:	f000 fc21 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f008 fc17 	bl	800a360 <HAL_TIM_IC_Init>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b36:	f000 fc19 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2114      	movs	r1, #20
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b48:	187a      	adds	r2, r7, r1
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f00a f88c 	bl	800bc6c <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001b58:	f000 fc08 	bl	800236c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2202      	movs	r2, #2
 8001b60:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2201      	movs	r2, #1
 8001b66:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	220f      	movs	r2, #15
 8001b72:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b74:	1d39      	adds	r1, r7, #4
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f008 ff18 	bl	800a9b0 <HAL_TIM_IC_ConfigChannel>
 8001b80:	1e03      	subs	r3, r0, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001b84:	f000 fbf2 	bl	800236c <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b00c      	add	sp, #48	@ 0x30
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000814 	.word	0x20000814
 8001b94:	001fffff 	.word	0x001fffff

08001b98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08e      	sub	sp, #56	@ 0x38
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	2328      	movs	r3, #40	@ 0x28
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f00b fdbd 	bl	800d728 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	231c      	movs	r3, #28
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	001a      	movs	r2, r3
 8001bb8:	2100      	movs	r1, #0
 8001bba:	f00b fdb5 	bl	800d728 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbe:	003b      	movs	r3, r7
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	231c      	movs	r3, #28
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	f00b fdae 	bl	800d728 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bcc:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bce:	4a33      	ldr	r2, [pc, #204]	@ (8001c9c <MX_TIM3_Init+0x104>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001bd2:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <MX_TIM3_Init+0x108>)
 8001bd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001bde:	4b2e      	ldr	r3, [pc, #184]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001be0:	4a30      	ldr	r2, [pc, #192]	@ (8001ca4 <MX_TIM3_Init+0x10c>)
 8001be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001be4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001be6:	2280      	movs	r2, #128	@ 0x80
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bee:	2280      	movs	r2, #128	@ 0x80
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f007 ff01 	bl	80099fc <HAL_TIM_Base_Init>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bfe:	f000 fbb5 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c02:	2128      	movs	r1, #40	@ 0x28
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	0152      	lsls	r2, r2, #5
 8001c0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c0c:	187a      	adds	r2, r7, r1
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c10:	0011      	movs	r1, r2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f009 f870 	bl	800acf8 <HAL_TIM_ConfigClockSource>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c1c:	f000 fba6 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f007 fff0 	bl	8009c08 <HAL_TIM_OC_Init>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c2c:	f000 fb9e 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	211c      	movs	r1, #28
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c3e:	187a      	adds	r2, r7, r1
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f00a f811 	bl	800bc6c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001c4e:	f000 fb8d 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c52:	003b      	movs	r3, r7
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c58:	003b      	movs	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5e:	003b      	movs	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c64:	003b      	movs	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	0039      	movs	r1, r7
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	0018      	movs	r0, r3
 8001c72:	f008 fe3d 	bl	800a8f0 <HAL_TIM_OC_ConfigChannel>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001c7a:	f000 fb77 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2108      	movs	r1, #8
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b00e      	add	sp, #56	@ 0x38
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	200008d0 	.word	0x200008d0
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	00007fff 	.word	0x00007fff
 8001ca4:	00000fff 	.word	0x00000fff

08001ca8 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b09c      	sub	sp, #112	@ 0x70
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	2360      	movs	r3, #96	@ 0x60
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f00b fd35 	bl	800d728 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbe:	2354      	movs	r3, #84	@ 0x54
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	f00b fd2d 	bl	800d728 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	2338      	movs	r3, #56	@ 0x38
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	231c      	movs	r3, #28
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f00b fd25 	bl	800d728 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	2334      	movs	r3, #52	@ 0x34
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f00b fd1e 	bl	800d728 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cec:	4b5f      	ldr	r3, [pc, #380]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cee:	4a60      	ldr	r2, [pc, #384]	@ (8001e70 <MX_TIM1_Init+0x1c8>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d00:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <MX_TIM1_Init+0x1cc>)
 8001d02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d04:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	0052      	lsls	r2, r2, #1
 8001d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d0c:	4b57      	ldr	r3, [pc, #348]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d12:	4b56      	ldr	r3, [pc, #344]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d18:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f007 fe6e 	bl	80099fc <HAL_TIM_Base_Init>
 8001d20:	1e03      	subs	r3, r0, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001d24:	f000 fb22 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	2160      	movs	r1, #96	@ 0x60
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	0152      	lsls	r2, r2, #5
 8001d30:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d32:	187a      	adds	r2, r7, r1
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d36:	0011      	movs	r1, r2
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f008 ffdd 	bl	800acf8 <HAL_TIM_ConfigClockSource>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d42:	f000 fb13 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d46:	4b49      	ldr	r3, [pc, #292]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f008 f9bd 	bl	800a0c8 <HAL_TIM_PWM_Init>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001d52:	f000 fb0b 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2154      	movs	r1, #84	@ 0x54
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d6a:	187a      	adds	r2, r7, r1
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f009 ff7b 	bl	800bc6c <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d7a:	f000 faf7 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7e:	2138      	movs	r1, #56	@ 0x38
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2260      	movs	r2, #96	@ 0x60
 8001d84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001daa:	1879      	adds	r1, r7, r1
 8001dac:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dae:	2204      	movs	r2, #4
 8001db0:	0018      	movs	r0, r3
 8001db2:	f008 fea1 	bl	800aaf8 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001dba:	f000 fad7 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	492b      	ldr	r1, [pc, #172]	@ (8001e78 <MX_TIM1_Init+0x1d0>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dce:	2338      	movs	r3, #56	@ 0x38
 8001dd0:	18f9      	adds	r1, r7, r3
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f008 fe8e 	bl	800aaf8 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001de0:	f000 fac4 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001de4:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4922      	ldr	r1, [pc, #136]	@ (8001e78 <MX_TIM1_Init+0x1d0>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	0192      	lsls	r2, r2, #6
 8001e18:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	0492      	lsls	r2, r2, #18
 8001e32:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e46:	1d3a      	adds	r2, r7, #4
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f009 ff75 	bl	800bd3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001e56:	f000 fa89 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f003 fbd7 	bl	8005610 <HAL_TIM_MspPostInit>

}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b01c      	add	sp, #112	@ 0x70
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	2000098c 	.word	0x2000098c
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	000003ff 	.word	0x000003ff
 8001e78:	fffff7ff 	.word	0xfffff7ff

08001e7c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	@ 0x50
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e82:	2334      	movs	r3, #52	@ 0x34
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	0018      	movs	r0, r3
 8001e88:	231c      	movs	r3, #28
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f00b fc4b 	bl	800d728 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e92:	003b      	movs	r3, r7
 8001e94:	0018      	movs	r0, r3
 8001e96:	2334      	movs	r3, #52	@ 0x34
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f00b fc44 	bl	800d728 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8001f90 <MX_TIM17_Init+0x114>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001ea6:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8001f94 <MX_TIM17_Init+0x118>)
 8001eaa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 8001eb2:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eb4:	4a38      	ldr	r2, [pc, #224]	@ (8001f98 <MX_TIM17_Init+0x11c>)
 8001eb6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001eb8:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec6:	4b31      	ldr	r3, [pc, #196]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f007 fd94 	bl	80099fc <HAL_TIM_Base_Init>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001ed8:	f000 fa48 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f007 fe92 	bl	8009c08 <HAL_TIM_OC_Init>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f000 fa40 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001eec:	2134      	movs	r1, #52	@ 0x34
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	4a29      	ldr	r2, [pc, #164]	@ (8001f9c <MX_TIM17_Init+0x120>)
 8001ef8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f18:	1879      	adds	r1, r7, r1
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f008 fce6 	bl	800a8f0 <HAL_TIM_OC_ConfigChannel>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001f28:	f000 fa20 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2108      	movs	r1, #8
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3c:	003b      	movs	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f42:	003b      	movs	r3, r7
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f48:	003b      	movs	r3, r7
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f4e:	003b      	movs	r3, r7
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f54:	003b      	movs	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f5a:	003b      	movs	r3, r7
 8001f5c:	2280      	movs	r2, #128	@ 0x80
 8001f5e:	0192      	lsls	r2, r2, #6
 8001f60:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f62:	003b      	movs	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f68:	003b      	movs	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001f6e:	003a      	movs	r2, r7
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f72:	0011      	movs	r1, r2
 8001f74:	0018      	movs	r0, r3
 8001f76:	f009 fee1 	bl	800bd3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001f7e:	f000 f9f5 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b014      	add	sp, #80	@ 0x50
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	2000069c 	.word	0x2000069c
 8001f90:	40014800 	.word	0x40014800
 8001f94:	00007fff 	.word	0x00007fff
 8001f98:	000003ff 	.word	0x000003ff
 8001f9c:	000001ff 	.word	0x000001ff

08001fa0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fa6:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <MX_LPTIM1_Init+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fb2:	22e0      	movs	r2, #224	@ 0xe0
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fba:	4a14      	ldr	r2, [pc, #80]	@ (800200c <MX_LPTIM1_Init+0x6c>)
 8001fbc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	03d2      	lsls	r2, r2, #15
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f006 fa73 	bl	80084cc <HAL_LPTIM_Init>
 8001fe6:	1e03      	subs	r3, r0, #0
 8001fe8:	d001      	beq.n	8001fee <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001fea:	f000 f9bf 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001fee:	2202      	movs	r2, #2
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	2011      	movs	r0, #17
 8001ff4:	f005 fd42 	bl	8007a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001ff8:	2011      	movs	r0, #17
 8001ffa:	f005 fd54 	bl	8007aa6 <HAL_NVIC_EnableIRQ>
}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000bcc 	.word	0x20000bcc
 8002008:	40007c00 	.word	0x40007c00
 800200c:	0000ffff 	.word	0x0000ffff

08002010 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	0018      	movs	r0, r3
 800201a:	231c      	movs	r3, #28
 800201c:	001a      	movs	r2, r3
 800201e:	2100      	movs	r1, #0
 8002020:	f00b fb82 	bl	800d728 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002026:	4a20      	ldr	r2, [pc, #128]	@ (80020a8 <MX_TIM14_Init+0x98>)
 8002028:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 800202a:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800202c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <MX_TIM14_Init+0x9c>)
 800202e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <MX_TIM14_Init+0xa0>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800203c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800204e:	0018      	movs	r0, r3
 8002050:	f007 fcd4 	bl	80099fc <HAL_TIM_Base_Init>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8002058:	f000 f988 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800205e:	0018      	movs	r0, r3
 8002060:	f007 fdd2 	bl	8009c08 <HAL_TIM_OC_Init>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d001      	beq.n	800206c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8002068:	f000 f980 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_TIM14_Init+0xa0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002088:	1d39      	adds	r1, r7, #4
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800208c:	2200      	movs	r2, #0
 800208e:	0018      	movs	r0, r3
 8002090:	f008 fc2e 	bl	800a8f0 <HAL_TIM_OC_ConfigChannel>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d001      	beq.n	800209c <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8002098:	f000 f968 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800209c:	46c0      	nop			@ (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b008      	add	sp, #32
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200005e0 	.word	0x200005e0
 80020a8:	40002000 	.word	0x40002000
 80020ac:	00007fff 	.word	0x00007fff
 80020b0:	20000020 	.word	0x20000020

080020b4 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80020b8:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020ba:	4a16      	ldr	r2, [pc, #88]	@ (8002114 <MX_USART2_UART_Init+0x60>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020c0:	4a15      	ldr	r2, [pc, #84]	@ (8002118 <MX_USART2_UART_Init+0x64>)
 80020c2:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020d8:	220c      	movs	r2, #12
 80020da:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fa:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020fc:	0018      	movs	r0, r3
 80020fe:	f009 fed9 	bl	800beb4 <HAL_UART_Init>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d001      	beq.n	800210a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002106:	f000 f931 	bl	800236c <Error_Handler>
  }
}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000a48 	.word	0x20000a48
 8002114:	40004400 	.word	0x40004400
 8002118:	00007a12 	.word	0x00007a12

0800211c <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_DMA_Init+0x48>)
 8002124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <MX_DMA_Init+0x48>)
 8002128:	2101      	movs	r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	639a      	str	r2, [r3, #56]	@ 0x38
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <MX_DMA_Init+0x48>)
 8002130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2009      	movs	r0, #9
 8002140:	f005 fc9c 	bl	8007a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002144:	2009      	movs	r0, #9
 8002146:	f005 fcae 	bl	8007aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 800214a:	2202      	movs	r2, #2
 800214c:	2102      	movs	r1, #2
 800214e:	200a      	movs	r0, #10
 8002150:	f005 fc94 	bl	8007a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002154:	200a      	movs	r0, #10
 8002156:	f005 fca6 	bl	8007aa6 <HAL_NVIC_EnableIRQ>

}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	40021000 	.word	0x40021000

08002168 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08b      	sub	sp, #44	@ 0x2c
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	2414      	movs	r4, #20
 8002170:	193b      	adds	r3, r7, r4
 8002172:	0018      	movs	r0, r3
 8002174:	2314      	movs	r3, #20
 8002176:	001a      	movs	r2, r3
 8002178:	2100      	movs	r1, #0
 800217a:	f00b fad5 	bl	800d728 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b77      	ldr	r3, [pc, #476]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002182:	4b76      	ldr	r3, [pc, #472]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002184:	2104      	movs	r1, #4
 8002186:	430a      	orrs	r2, r1
 8002188:	635a      	str	r2, [r3, #52]	@ 0x34
 800218a:	4b74      	ldr	r3, [pc, #464]	@ (800235c <MX_GPIO_Init+0x1f4>)
 800218c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002196:	4b71      	ldr	r3, [pc, #452]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219a:	4b70      	ldr	r3, [pc, #448]	@ (800235c <MX_GPIO_Init+0x1f4>)
 800219c:	2120      	movs	r1, #32
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021a2:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	2220      	movs	r2, #32
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021b2:	4b6a      	ldr	r3, [pc, #424]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	430a      	orrs	r2, r1
 80021b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ba:	4b68      	ldr	r3, [pc, #416]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021be:	2201      	movs	r2, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b65      	ldr	r3, [pc, #404]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ca:	4b64      	ldr	r3, [pc, #400]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021cc:	2102      	movs	r1, #2
 80021ce:	430a      	orrs	r2, r1
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d2:	4b62      	ldr	r3, [pc, #392]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021de:	4b60      	ldr	r3, [pc, #384]	@ (8002360 <MX_GPIO_Init+0x1f8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	2140      	movs	r1, #64	@ 0x40
 80021e4:	0018      	movs	r0, r3
 80021e6:	f006 f92a 	bl	800843e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	2204      	movs	r2, #4
 80021ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	2288      	movs	r2, #136	@ 0x88
 80021f4:	0352      	lsls	r2, r2, #13
 80021f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <MX_GPIO_Init+0x1fc>)
 8002202:	0019      	movs	r1, r3
 8002204:	0010      	movs	r0, r2
 8002206:	f005 ff99 	bl	800813c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 800220a:	0021      	movs	r1, r4
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	000c      	movs	r4, r1
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2201      	movs	r2, #1
 800221a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8002228:	193a      	adds	r2, r7, r4
 800222a:	23a0      	movs	r3, #160	@ 0xa0
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f005 ff83 	bl	800813c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002236:	193b      	adds	r3, r7, r4
 8002238:	2240      	movs	r2, #64	@ 0x40
 800223a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	193b      	adds	r3, r7, r4
 800223e:	2201      	movs	r2, #1
 8002240:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	193b      	adds	r3, r7, r4
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	193b      	adds	r3, r7, r4
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800224e:	193b      	adds	r3, r7, r4
 8002250:	4a43      	ldr	r2, [pc, #268]	@ (8002360 <MX_GPIO_Init+0x1f8>)
 8002252:	0019      	movs	r1, r3
 8002254:	0010      	movs	r0, r2
 8002256:	f005 ff71 	bl	800813c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 800225a:	193b      	adds	r3, r7, r4
 800225c:	2280      	movs	r2, #128	@ 0x80
 800225e:	00d2      	lsls	r2, r2, #3
 8002260:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	193b      	adds	r3, r7, r4
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002268:	193b      	adds	r3, r7, r4
 800226a:	2201      	movs	r2, #1
 800226c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800226e:	193a      	adds	r2, r7, r4
 8002270:	23a0      	movs	r3, #160	@ 0xa0
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	0011      	movs	r1, r2
 8002276:	0018      	movs	r0, r3
 8002278:	f005 ff60 	bl	800813c <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 800227c:	193b      	adds	r3, r7, r4
 800227e:	2240      	movs	r2, #64	@ 0x40
 8002280:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	2201      	movs	r2, #1
 8002286:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	193b      	adds	r3, r7, r4
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	193b      	adds	r3, r7, r4
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002294:	193b      	adds	r3, r7, r4
 8002296:	4a34      	ldr	r2, [pc, #208]	@ (8002368 <MX_GPIO_Init+0x200>)
 8002298:	0019      	movs	r1, r3
 800229a:	0010      	movs	r0, r2
 800229c:	f005 ff4e 	bl	800813c <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 80022a0:	193b      	adds	r3, r7, r4
 80022a2:	2210      	movs	r2, #16
 80022a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	193b      	adds	r3, r7, r4
 80022a8:	2201      	movs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <MX_GPIO_Init+0x200>)
 80022bc:	0019      	movs	r1, r3
 80022be:	0010      	movs	r0, r2
 80022c0:	f005 ff3c 	bl	800813c <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80022c4:	0021      	movs	r1, r4
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	22c4      	movs	r2, #196	@ 0xc4
 80022d0:	0392      	lsls	r2, r2, #14
 80022d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 80022d4:	000c      	movs	r4, r1
 80022d6:	193b      	adds	r3, r7, r4
 80022d8:	2202      	movs	r2, #2
 80022da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	193b      	adds	r3, r7, r4
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <MX_GPIO_Init+0x200>)
 80022e6:	0019      	movs	r1, r3
 80022e8:	0010      	movs	r0, r2
 80022ea:	f005 ff27 	bl	800813c <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 80022ee:	0021      	movs	r1, r4
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	0152      	lsls	r2, r2, #5
 80022f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f8:	000c      	movs	r4, r1
 80022fa:	193b      	adds	r3, r7, r4
 80022fc:	2201      	movs	r2, #1
 80022fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	193b      	adds	r3, r7, r4
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	193b      	adds	r3, r7, r4
 8002308:	2200      	movs	r2, #0
 800230a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 800230c:	193a      	adds	r2, r7, r4
 800230e:	23a0      	movs	r3, #160	@ 0xa0
 8002310:	05db      	lsls	r3, r3, #23
 8002312:	0011      	movs	r1, r2
 8002314:	0018      	movs	r0, r3
 8002316:	f005 ff11 	bl	800813c <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 800231a:	0021      	movs	r1, r4
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2280      	movs	r2, #128	@ 0x80
 8002320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2201      	movs	r2, #1
 8002326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8002334:	187a      	adds	r2, r7, r1
 8002336:	23a0      	movs	r3, #160	@ 0xa0
 8002338:	05db      	lsls	r3, r3, #23
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f005 fefd 	bl	800813c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 8002342:	2202      	movs	r2, #2
 8002344:	2102      	movs	r1, #2
 8002346:	2007      	movs	r0, #7
 8002348:	f005 fb98 	bl	8007a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800234c:	2007      	movs	r0, #7
 800234e:	f005 fbaa 	bl	8007aa6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b00b      	add	sp, #44	@ 0x2c
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	40021000 	.word	0x40021000
 8002360:	50000800 	.word	0x50000800
 8002364:	50001400 	.word	0x50001400
 8002368:	50000400 	.word	0x50000400

0800236c <Error_Handler>:

void Error_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	e7fd      	b.n	8002374 <Error_Handler+0x8>

08002378 <System_Init>:
  {

  }
}

void System_Init(void){
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800237c:	f004 f800 	bl	8006380 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002380:	f7ff f9e4 	bl	800174c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002384:	f7ff fef0 	bl	8002168 <MX_GPIO_Init>
	MX_DMA_Init();
 8002388:	f7ff fec8 	bl	800211c <MX_DMA_Init>
	MX_USART2_UART_Init();
 800238c:	f7ff fe92 	bl	80020b4 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8002390:	f7ff fa3a 	bl	8001808 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002394:	f7ff faf8 	bl	8001988 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002398:	f7ff fb82 	bl	8001aa0 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 800239c:	f7ff fbfc 	bl	8001b98 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 80023a0:	f7ff fc82 	bl	8001ca8 <MX_TIM1_Init>
	MX_TIM17_Init();
 80023a4:	f7ff fd6a 	bl	8001e7c <MX_TIM17_Init>
	MX_TIM14_Init();
 80023a8:	f7ff fe32 	bl	8002010 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 80023ac:	f7ff fdf8 	bl	8001fa0 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80023b0:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <System_Init+0xc0>)
 80023b2:	0018      	movs	r0, r3
 80023b4:	f005 f980 	bl	80076b8 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80023b8:	4a20      	ldr	r2, [pc, #128]	@ (800243c <System_Init+0xc4>)
 80023ba:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <System_Init+0xc8>)
 80023bc:	210e      	movs	r1, #14
 80023be:	0018      	movs	r0, r3
 80023c0:	f008 fdf4 	bl	800afac <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80023c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <System_Init+0xcc>)
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <System_Init+0xc0>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	0018      	movs	r0, r3
 80023cc:	f004 fba0 	bl	8006b10 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 80023d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <System_Init+0xd0>)
 80023d2:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <System_Init+0xd4>)
 80023d4:	2112      	movs	r1, #18
 80023d6:	0018      	movs	r0, r3
 80023d8:	f008 fde8 	bl	800afac <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 80023dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002450 <System_Init+0xd8>)
 80023de:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <System_Init+0xd4>)
 80023e0:	210e      	movs	r1, #14
 80023e2:	0018      	movs	r0, r3
 80023e4:	f008 fde2 	bl	800afac <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 80023e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <System_Init+0xdc>)
 80023ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <System_Init+0xe0>)
 80023ec:	2114      	movs	r1, #20
 80023ee:	0018      	movs	r0, r3
 80023f0:	f008 fddc 	bl	800afac <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 80023f4:	4a19      	ldr	r2, [pc, #100]	@ (800245c <System_Init+0xe4>)
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <System_Init+0xe8>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	0018      	movs	r0, r3
 80023fc:	f009 fdc2 	bl	800bf84 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8002400:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <System_Init+0xec>)
 8002402:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <System_Init+0xe8>)
 8002404:	2103      	movs	r1, #3
 8002406:	0018      	movs	r0, r3
 8002408:	f009 fdbc 	bl	800bf84 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 800240c:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <System_Init+0xf0>)
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <System_Init+0xf4>)
 8002410:	2102      	movs	r1, #2
 8002412:	0018      	movs	r0, r3
 8002414:	f006 fa80 	bl	8008918 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002418:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <System_Init+0xf8>)
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <System_Init+0xfc>)
 800241c:	2114      	movs	r1, #20
 800241e:	0018      	movs	r0, r3
 8002420:	f008 fdc4 	bl	800afac <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <System_Init+0x100>)
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <System_Init+0x104>)
 8002428:	2114      	movs	r1, #20
 800242a:	0018      	movs	r0, r3
 800242c:	f008 fdbe 	bl	800afac <HAL_TIM_RegisterCallback>
}
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	200004fc 	.word	0x200004fc
 800243c:	08002481 	.word	0x08002481
 8002440:	20000758 	.word	0x20000758
 8002444:	080024d5 	.word	0x080024d5
 8002448:	08002569 	.word	0x08002569
 800244c:	20000814 	.word	0x20000814
 8002450:	08002685 	.word	0x08002685
 8002454:	08002791 	.word	0x08002791
 8002458:	200008d0 	.word	0x200008d0
 800245c:	080028cd 	.word	0x080028cd
 8002460:	20000a48 	.word	0x20000a48
 8002464:	080028dd 	.word	0x080028dd
 8002468:	08003cbd 	.word	0x08003cbd
 800246c:	20000bcc 	.word	0x20000bcc
 8002470:	08004315 	.word	0x08004315
 8002474:	2000069c 	.word	0x2000069c
 8002478:	08004325 	.word	0x08004325
 800247c:	200005e0 	.word	0x200005e0

08002480 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <TIM16_callback+0x40>)
 800248a:	0018      	movs	r0, r3
 800248c:	f002 fb58 	bl	8004b40 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <TIM16_callback+0x40>)
 8002492:	2100      	movs	r1, #0
 8002494:	0018      	movs	r0, r3
 8002496:	f002 fb7f 	bl	8004b98 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800249a:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <TIM16_callback+0x44>)
 800249c:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <TIM16_callback+0x40>)
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f002 fc6f 	bl	8004d84 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80024a6:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <TIM16_callback+0x48>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	001a      	movs	r2, r3
 80024ac:	4907      	ldr	r1, [pc, #28]	@ (80024cc <TIM16_callback+0x4c>)
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <TIM16_callback+0x50>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f004 fbb9 	bl	8006c28 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	20000c58 	.word	0x20000c58
 80024c4:	20000028 	.word	0x20000028
 80024c8:	0800dfcc 	.word	0x0800dfcc
 80024cc:	20000c4c 	.word	0x20000c4c
 80024d0:	200004fc 	.word	0x200004fc

080024d4 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f004 fc30 	bl	8006d44 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 80024e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002554 <ADC_DMA_conversion_complete_callback+0x80>)
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <ADC_DMA_conversion_complete_callback+0x84>)
 80024e8:	0011      	movs	r1, r2
 80024ea:	0018      	movs	r0, r3
 80024ec:	f002 fce0 	bl	8004eb0 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 80024f0:	f7fe f816 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 80024f4:	250f      	movs	r5, #15
 80024f6:	197c      	adds	r4, r7, r5
 80024f8:	4b18      	ldr	r3, [pc, #96]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 80024fa:	2108      	movs	r1, #8
 80024fc:	0018      	movs	r0, r3
 80024fe:	f003 fedb 	bl	80062b8 <Get_Status_Bit>
 8002502:	0003      	movs	r3, r0
 8002504:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002506:	197b      	adds	r3, r7, r5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10a      	bne.n	8002524 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 800250e:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002510:	8a5b      	ldrh	r3, [r3, #18]
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002516:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <ADC_DMA_conversion_complete_callback+0x8c>)
 800251a:	8b5b      	ldrh	r3, [r3, #26]
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002520:	835a      	strh	r2, [r3, #26]
 8002522:	e003      	b.n	800252c <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8002524:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002526:	0018      	movs	r0, r3
 8002528:	f002 fad4 	bl	8004ad4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 800252e:	0018      	movs	r0, r3
 8002530:	f003 fa34 	bl	800599c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 8002536:	2110      	movs	r1, #16
 8002538:	0018      	movs	r0, r3
 800253a:	f003 febd 	bl	80062b8 <Get_Status_Bit>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d104      	bne.n	800254c <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 8002544:	2110      	movs	r1, #16
 8002546:	0018      	movs	r0, r3
 8002548:	f003 feca 	bl	80062e0 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 800254c:	46c0      	nop			@ (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	20000c4c 	.word	0x20000c4c
 8002558:	20000c7c 	.word	0x20000c7c
 800255c:	20000c3c 	.word	0x20000c3c
 8002560:	20000cc4 	.word	0x20000cc4
 8002564:	20000c58 	.word	0x20000c58

08002568 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2100      	movs	r1, #0
 8002574:	0018      	movs	r0, r3
 8002576:	f008 fc95 	bl	800aea4 <HAL_TIM_ReadCapturedValue>
 800257a:	0002      	movs	r2, r0
 800257c:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <TIM2_ch1_IP_capture_callback+0x100>)
 800257e:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <TIM2_ch1_IP_capture_callback+0x100>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0a5b      	lsrs	r3, r3, #9
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b38      	ldr	r3, [pc, #224]	@ (800266c <TIM2_ch1_IP_capture_callback+0x104>)
 800258a:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 800258c:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002596:	f002 f989 	bl	80048ac <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 800259a:	4b35      	ldr	r3, [pc, #212]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 80025a0:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80025a6:	e05b      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80025a8:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d124      	bne.n	80025fc <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 80025b2:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <TIM2_ch1_IP_capture_callback+0x104>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b80      	cmp	r3, #128	@ 0x80
 80025ba:	d951      	bls.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 80025bc:	f002 f958 	bl	8004870 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 80025cc:	4a29      	ldr	r2, [pc, #164]	@ (8002674 <TIM2_ch1_IP_capture_callback+0x10c>)
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <TIM2_ch1_IP_capture_callback+0x110>)
 80025d0:	0011      	movs	r1, r2
 80025d2:	0018      	movs	r0, r3
 80025d4:	f002 f93a 	bl	800484c <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80025d8:	4b28      	ldr	r3, [pc, #160]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d004      	beq.n	80025ec <TIM2_ch1_IP_capture_callback+0x84>
 80025e2:	4b26      	ldr	r3, [pc, #152]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d101      	bne.n	80025f0 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 80025ec:	f002 fdac 	bl	8005148 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 80025f0:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <TIM2_ch1_IP_capture_callback+0x118>)
 80025f2:	2104      	movs	r1, #4
 80025f4:	0018      	movs	r0, r3
 80025f6:	f003 fe73 	bl	80062e0 <Set_Status_Bit>
}
 80025fa:	e031      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 80025fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d108      	bne.n	8002618 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002606:	f002 f951 	bl	80048ac <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800260c:	2203      	movs	r2, #3
 800260e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002610:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 8002612:	2202      	movs	r2, #2
 8002614:	705a      	strb	r2, [r3, #1]
}
 8002616:	e023      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002618:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b03      	cmp	r3, #3
 8002620:	d11e      	bne.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8002622:	f002 f925 	bl	8004870 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 8002628:	2202      	movs	r2, #2
 800262a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800262e:	2203      	movs	r2, #3
 8002630:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002634:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <TIM2_ch1_IP_capture_callback+0x110>)
 8002636:	0011      	movs	r1, r2
 8002638:	0018      	movs	r0, r3
 800263a:	f002 f907 	bl	800484c <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800263e:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b05      	cmp	r3, #5
 8002646:	d004      	beq.n	8002652 <TIM2_ch1_IP_capture_callback+0xea>
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b07      	cmp	r3, #7
 8002650:	d101      	bne.n	8002656 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8002652:	f002 fd79 	bl	8005148 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <TIM2_ch1_IP_capture_callback+0x118>)
 8002658:	2104      	movs	r1, #4
 800265a:	0018      	movs	r0, r3
 800265c:	f003 fe40 	bl	80062e0 <Set_Status_Bit>
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000c34 	.word	0x20000c34
 800266c:	20000c38 	.word	0x20000c38
 8002670:	20000444 	.word	0x20000444
 8002674:	20000ca0 	.word	0x20000ca0
 8002678:	20000c58 	.word	0x20000c58
 800267c:	20000430 	.word	0x20000430
 8002680:	20000c3c 	.word	0x20000c3c

08002684 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 800268c:	240c      	movs	r4, #12
 800268e:	193b      	adds	r3, r7, r4
 8002690:	4a3a      	ldr	r2, [pc, #232]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002692:	7852      	ldrb	r2, [r2, #1]
 8002694:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002696:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d131      	bne.n	8002704 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 80026a0:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 80026ac:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <TIM2_ch1_overflow_callback+0x100>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80026b2:	4b35      	ldr	r3, [pc, #212]	@ (8002788 <TIM2_ch1_overflow_callback+0x104>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	23a0      	movs	r3, #160	@ 0xa0
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	2201      	movs	r2, #1
 80026c2:	0018      	movs	r0, r3
 80026c4:	f005 febb 	bl	800843e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <TIM2_ch1_overflow_callback+0x108>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	2140      	movs	r1, #64	@ 0x40
 80026ce:	0018      	movs	r0, r3
 80026d0:	f005 feb5 	bl	800843e <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80026d4:	4b29      	ldr	r3, [pc, #164]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d049      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80026de:	4b27      	ldr	r3, [pc, #156]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d044      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
 80026e8:	4b24      	ldr	r3, [pc, #144]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d03f      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026f4:	4a21      	ldr	r2, [pc, #132]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026fc:	193a      	adds	r2, r7, r4
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8002702:	e036      	b.n	8002772 <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002704:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d131      	bne.n	8002772 <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800270e:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002716:	2203      	movs	r2, #3
 8002718:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <TIM2_ch1_overflow_callback+0x100>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <TIM2_ch1_overflow_callback+0x104>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	0099      	lsls	r1, r3, #2
 800272a:	23a0      	movs	r3, #160	@ 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	2201      	movs	r2, #1
 8002730:	0018      	movs	r0, r3
 8002732:	f005 fe84 	bl	800843e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <TIM2_ch1_overflow_callback+0x108>)
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	0018      	movs	r0, r3
 800273e:	f005 fe7e 	bl	800843e <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b04      	cmp	r3, #4
 800274a:	d012      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b06      	cmp	r3, #6
 8002754:	d00d      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800275c:	2b08      	cmp	r3, #8
 800275e:	d008      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002762:	4a06      	ldr	r2, [pc, #24]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 800276a:	220c      	movs	r2, #12
 800276c:	18ba      	adds	r2, r7, r2
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	701a      	strb	r2, [r3, #0]
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b005      	add	sp, #20
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	20000430 	.word	0x20000430
 8002780:	20000444 	.word	0x20000444
 8002784:	20000ce8 	.word	0x20000ce8
 8002788:	20000c3a 	.word	0x20000c3a
 800278c:	50000800 	.word	0x50000800

08002790 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002798:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b0b      	cmp	r3, #11
 80027a0:	d01c      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80027a2:	4b3f      	ldr	r3, [pc, #252]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d017      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80027ac:	4b3c      	ldr	r3, [pc, #240]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b0d      	cmp	r3, #13
 80027b4:	d012      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80027b6:	4b3a      	ldr	r3, [pc, #232]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d00d      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80027c0:	4b37      	ldr	r3, [pc, #220]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b11      	cmp	r3, #17
 80027c8:	d008      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80027ca:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80027d0:	2b12      	cmp	r3, #18
 80027d2:	d003      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 80027d4:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f002 f9b2 	bl	8004b40 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 80027dc:	4b32      	ldr	r3, [pc, #200]	@ (80028a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 80027de:	2100      	movs	r1, #0
 80027e0:	0018      	movs	r0, r3
 80027e2:	f003 fd02 	bl	80061ea <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 80027e6:	4b31      	ldr	r3, [pc, #196]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d106      	bne.n	80027fe <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 80027f0:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 80027f6:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	705a      	strb	r2, [r3, #1]
 80027fc:	e00a      	b.n	8002814 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d105      	bne.n	8002814 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002808:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800280e:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002810:	2203      	movs	r2, #3
 8002812:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002814:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b0b      	cmp	r3, #11
 800281c:	d03c      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d037      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b0d      	cmp	r3, #13
 8002830:	d032      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b10      	cmp	r3, #16
 800283a:	d02d      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800283c:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b11      	cmp	r3, #17
 8002844:	d028      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800284c:	2b12      	cmp	r3, #18
 800284e:	d023      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002850:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002854:	0011      	movs	r1, r2
 8002856:	0018      	movs	r0, r3
 8002858:	f001 fff8 	bl	800484c <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 800285c:	4a15      	ldr	r2, [pc, #84]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f001 fff2 	bl	800484c <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 800286a:	2108      	movs	r1, #8
 800286c:	0018      	movs	r0, r3
 800286e:	f003 fd37 	bl	80062e0 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002874:	2100      	movs	r1, #0
 8002876:	0018      	movs	r0, r3
 8002878:	f002 f98e 	bl	8004b98 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800287c:	4a0f      	ldr	r2, [pc, #60]	@ (80028bc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f002 fa7e 	bl	8004d84 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002888:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	001a      	movs	r2, r3
 800288e:	490d      	ldr	r1, [pc, #52]	@ (80028c4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 8002890:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 8002892:	0018      	movs	r0, r3
 8002894:	f004 f9c8 	bl	8006c28 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000430 	.word	0x20000430
 80028a4:	20000ca0 	.word	0x20000ca0
 80028a8:	200008d0 	.word	0x200008d0
 80028ac:	20000444 	.word	0x20000444
 80028b0:	20000cc4 	.word	0x20000cc4
 80028b4:	20000c58 	.word	0x20000c58
 80028b8:	20000c3c 	.word	0x20000c3c
 80028bc:	20000028 	.word	0x20000028
 80028c0:	0800dfcc 	.word	0x0800dfcc
 80028c4:	20000c4c 	.word	0x20000c4c
 80028c8:	200004fc 	.word	0x200004fc

080028cc <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 80028e4:	4bbe      	ldr	r3, [pc, #760]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fe fc96 	bl	8001218 <Is_System_Real_Time_Status_Byte>
 80028ec:	0003      	movs	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <UART2_RX_transfer_complete_callback+0x1a>
 80028f2:	f000 fc0c 	bl	800310e <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 80028f6:	4bbb      	ldr	r3, [pc, #748]	@ (8002be4 <UART2_RX_transfer_complete_callback+0x308>)
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	0018      	movs	r0, r3
 80028fc:	f003 fcdc 	bl	80062b8 <Get_Status_Bit>
 8002900:	0003      	movs	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <UART2_RX_transfer_complete_callback+0x2e>
 8002906:	f001 f895 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 800290a:	4bb7      	ldr	r3, [pc, #732]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d159      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>
 8002914:	4bb5      	ldr	r3, [pc, #724]	@ (8002bec <UART2_RX_transfer_complete_callback+0x310>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d154      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800291e:	4bb4      	ldr	r3, [pc, #720]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b04      	cmp	r3, #4
 8002926:	d013      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002928:	4bb1      	ldr	r3, [pc, #708]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d00e      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8002932:	4baf      	ldr	r3, [pc, #700]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b06      	cmp	r3, #6
 800293a:	d009      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 800293c:	4bac      	ldr	r3, [pc, #688]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b03      	cmp	r3, #3
 8002944:	d004      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002946:	4baa      	ldr	r3, [pc, #680]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d13b      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002950:	4ba3      	ldr	r3, [pc, #652]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2bfa      	cmp	r3, #250	@ 0xfa
 8002958:	d10b      	bne.n	8002972 <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 800295a:	4ba5      	ldr	r3, [pc, #660]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800295c:	4aa4      	ldr	r2, [pc, #656]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800295e:	7812      	ldrb	r2, [r2, #0]
 8002960:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8002962:	4ba3      	ldr	r3, [pc, #652]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002964:	2209      	movs	r2, #9
 8002966:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002968:	4ba2      	ldr	r3, [pc, #648]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800296e:	f001 f85e 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002972:	4b9b      	ldr	r3, [pc, #620]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2bf8      	cmp	r3, #248	@ 0xf8
 800297a:	d001      	beq.n	8002980 <UART2_RX_transfer_complete_callback+0xa4>
 800297c:	f001 f857 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002980:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002982:	4a9b      	ldr	r2, [pc, #620]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002988:	4b99      	ldr	r3, [pc, #612]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800298a:	220b      	movs	r2, #11
 800298c:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 800298e:	4b99      	ldr	r3, [pc, #612]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	0099      	lsls	r1, r3, #2
 8002998:	23a0      	movs	r3, #160	@ 0xa0
 800299a:	05db      	lsls	r3, r3, #23
 800299c:	2200      	movs	r2, #0
 800299e:	0018      	movs	r0, r3
 80029a0:	f005 fd4d 	bl	800843e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029a4:	4b94      	ldr	r3, [pc, #592]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	2140      	movs	r1, #64	@ 0x40
 80029aa:	0018      	movs	r0, r3
 80029ac:	f005 fd47 	bl	800843e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80029b0:	4b8d      	ldr	r3, [pc, #564]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029b6:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 80029c2:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80029c4:	f001 f833 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 80029c8:	4b89      	ldr	r3, [pc, #548]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d123      	bne.n	8002a1a <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029d2:	4b83      	ldr	r3, [pc, #524]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2bf8      	cmp	r3, #248	@ 0xf8
 80029da:	d001      	beq.n	80029e0 <UART2_RX_transfer_complete_callback+0x104>
 80029dc:	f001 f82a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	23a0      	movs	r3, #160	@ 0xa0
 80029e6:	05db      	lsls	r3, r3, #23
 80029e8:	2200      	movs	r2, #0
 80029ea:	0018      	movs	r0, r3
 80029ec:	f005 fd27 	bl	800843e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029f0:	4b81      	ldr	r3, [pc, #516]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	2140      	movs	r1, #64	@ 0x40
 80029f6:	0018      	movs	r0, r3
 80029f8:	f005 fd21 	bl	800843e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80029fc:	4b7a      	ldr	r3, [pc, #488]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a02:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	4b79      	ldr	r3, [pc, #484]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a0e:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002a10:	4b77      	ldr	r3, [pc, #476]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a12:	220a      	movs	r2, #10
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	f001 f80d 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002a1a:	4b75      	ldr	r3, [pc, #468]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b0a      	cmp	r3, #10
 8002a22:	d145      	bne.n	8002ab0 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a24:	4b6e      	ldr	r3, [pc, #440]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a2c:	d001      	beq.n	8002a32 <UART2_RX_transfer_complete_callback+0x156>
 8002a2e:	f001 f801 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a32:	4b6d      	ldr	r3, [pc, #436]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a38:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a44:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a46:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b0b      	cmp	r3, #11
 8002a4e:	d80f      	bhi.n	8002a70 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	23a0      	movs	r3, #160	@ 0xa0
 8002a56:	05db      	lsls	r3, r3, #23
 8002a58:	2200      	movs	r2, #0
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f005 fcef 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a60:	4b65      	ldr	r3, [pc, #404]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	2140      	movs	r1, #64	@ 0x40
 8002a66:	0018      	movs	r0, r3
 8002a68:	f005 fce9 	bl	800843e <HAL_GPIO_WritePin>
 8002a6c:	f000 ffe2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a70:	4b60      	ldr	r3, [pc, #384]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b18      	cmp	r3, #24
 8002a78:	d80f      	bhi.n	8002a9a <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	0099      	lsls	r1, r3, #2
 8002a7e:	23a0      	movs	r3, #160	@ 0xa0
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	2201      	movs	r2, #1
 8002a84:	0018      	movs	r0, r3
 8002a86:	f005 fcda 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2140      	movs	r1, #64	@ 0x40
 8002a90:	0018      	movs	r0, r3
 8002a92:	f005 fcd4 	bl	800843e <HAL_GPIO_WritePin>
 8002a96:	f000 ffcd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002a9a:	4b55      	ldr	r3, [pc, #340]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002aa0:	4b53      	ldr	r3, [pc, #332]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002aa6:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	f000 ffc2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b0b      	cmp	r3, #11
 8002ab8:	d142      	bne.n	8002b40 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002aba:	4b49      	ldr	r3, [pc, #292]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ac2:	d001      	beq.n	8002ac8 <UART2_RX_transfer_complete_callback+0x1ec>
 8002ac4:	f000 ffb6 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002ac8:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002ace:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b46      	ldr	r3, [pc, #280]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ada:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002adc:	4b45      	ldr	r3, [pc, #276]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b0b      	cmp	r3, #11
 8002ae4:	d80f      	bhi.n	8002b06 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	0099      	lsls	r1, r3, #2
 8002aea:	23a0      	movs	r3, #160	@ 0xa0
 8002aec:	05db      	lsls	r3, r3, #23
 8002aee:	2200      	movs	r2, #0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f005 fca4 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002af6:	4b40      	ldr	r3, [pc, #256]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	2140      	movs	r1, #64	@ 0x40
 8002afc:	0018      	movs	r0, r3
 8002afe:	f005 fc9e 	bl	800843e <HAL_GPIO_WritePin>
 8002b02:	f000 ff97 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002b06:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b18      	cmp	r3, #24
 8002b0e:	d80f      	bhi.n	8002b30 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	23a0      	movs	r3, #160	@ 0xa0
 8002b16:	05db      	lsls	r3, r3, #23
 8002b18:	2201      	movs	r2, #1
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f005 fc8f 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b20:	4b35      	ldr	r3, [pc, #212]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	2140      	movs	r1, #64	@ 0x40
 8002b26:	0018      	movs	r0, r3
 8002b28:	f005 fc89 	bl	800843e <HAL_GPIO_WritePin>
 8002b2c:	f000 ff82 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002b30:	4b30      	ldr	r3, [pc, #192]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8002b36:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002b38:	220c      	movs	r2, #12
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	f000 ff7a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002b40:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d158      	bne.n	8002bfc <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b4a:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b52:	d138      	bne.n	8002bc6 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b54:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002b5a:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b66:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b0b      	cmp	r3, #11
 8002b70:	d80f      	bhi.n	8002b92 <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	0099      	lsls	r1, r3, #2
 8002b76:	23a0      	movs	r3, #160	@ 0xa0
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f005 fc5e 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	2140      	movs	r1, #64	@ 0x40
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f005 fc58 	bl	800843e <HAL_GPIO_WritePin>
 8002b8e:	f000 ff51 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b18      	cmp	r3, #24
 8002b9a:	d80f      	bhi.n	8002bbc <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	23a0      	movs	r3, #160	@ 0xa0
 8002ba2:	05db      	lsls	r3, r3, #23
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f005 fc49 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2140      	movs	r1, #64	@ 0x40
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f005 fc43 	bl	800843e <HAL_GPIO_WritePin>
 8002bb8:	f000 ff3c 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	f000 ff37 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2bfa      	cmp	r3, #250	@ 0xfa
 8002bce:	d001      	beq.n	8002bd4 <UART2_RX_transfer_complete_callback+0x2f8>
 8002bd0:	f000 ff30 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002bd6:	220d      	movs	r2, #13
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	f000 ff2b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	200004dc 	.word	0x200004dc
 8002be4:	20000c3c 	.word	0x20000c3c
 8002be8:	20000ce8 	.word	0x20000ce8
 8002bec:	20000444 	.word	0x20000444
 8002bf0:	20000430 	.word	0x20000430
 8002bf4:	20000c3a 	.word	0x20000c3a
 8002bf8:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002bfc:	4bdc      	ldr	r3, [pc, #880]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b0d      	cmp	r3, #13
 8002c04:	d160      	bne.n	8002cc8 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c06:	4bdb      	ldr	r3, [pc, #876]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c0e:	d001      	beq.n	8002c14 <UART2_RX_transfer_complete_callback+0x338>
 8002c10:	f000 ff10 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002c14:	4bd8      	ldr	r3, [pc, #864]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 ff92 	bl	8004b40 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	0099      	lsls	r1, r3, #2
 8002c20:	23a0      	movs	r3, #160	@ 0xa0
 8002c22:	05db      	lsls	r3, r3, #23
 8002c24:	2201      	movs	r2, #1
 8002c26:	0018      	movs	r0, r3
 8002c28:	f005 fc09 	bl	800843e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c2c:	4bd3      	ldr	r3, [pc, #844]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2140      	movs	r1, #64	@ 0x40
 8002c32:	0018      	movs	r0, r3
 8002c34:	f005 fc03 	bl	800843e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	0099      	lsls	r1, r3, #2
 8002c3c:	23a0      	movs	r3, #160	@ 0xa0
 8002c3e:	05db      	lsls	r3, r3, #23
 8002c40:	2200      	movs	r2, #0
 8002c42:	0018      	movs	r0, r3
 8002c44:	f005 fbfb 	bl	800843e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002c48:	4bcc      	ldr	r3, [pc, #816]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2140      	movs	r1, #64	@ 0x40
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f005 fbf5 	bl	800843e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002c54:	4bca      	ldr	r3, [pc, #808]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002c5a:	4bca      	ldr	r3, [pc, #808]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002c60:	4bc3      	ldr	r3, [pc, #780]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002c62:	220d      	movs	r2, #13
 8002c64:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c66:	4bc2      	ldr	r3, [pc, #776]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002c68:	2208      	movs	r2, #8
 8002c6a:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002c6c:	4bc6      	ldr	r3, [pc, #792]	@ (8002f88 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002c6e:	2100      	movs	r1, #0
 8002c70:	0018      	movs	r0, r3
 8002c72:	f003 faba 	bl	80061ea <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002c76:	4bc5      	ldr	r3, [pc, #788]	@ (8002f8c <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002c7c:	4ac4      	ldr	r2, [pc, #784]	@ (8002f90 <UART2_RX_transfer_complete_callback+0x6b4>)
 8002c7e:	4bbe      	ldr	r3, [pc, #760]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c80:	0011      	movs	r1, r2
 8002c82:	0018      	movs	r0, r3
 8002c84:	f001 fde2 	bl	800484c <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002c88:	4ac2      	ldr	r2, [pc, #776]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002c8a:	4bbb      	ldr	r3, [pc, #748]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f001 fddc 	bl	800484c <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002c94:	4bc0      	ldr	r3, [pc, #768]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c96:	2108      	movs	r1, #8
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f003 fb21 	bl	80062e0 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002c9e:	4bbd      	ldr	r3, [pc, #756]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f001 ff78 	bl	8004b98 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002ca8:	4abc      	ldr	r2, [pc, #752]	@ (8002f9c <UART2_RX_transfer_complete_callback+0x6c0>)
 8002caa:	4bba      	ldr	r3, [pc, #744]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002cac:	0011      	movs	r1, r2
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f002 f868 	bl	8004d84 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002cb4:	4bba      	ldr	r3, [pc, #744]	@ (8002fa0 <UART2_RX_transfer_complete_callback+0x6c4>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	001a      	movs	r2, r3
 8002cba:	49ba      	ldr	r1, [pc, #744]	@ (8002fa4 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002cbc:	4bba      	ldr	r3, [pc, #744]	@ (8002fa8 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f003 ffb2 	bl	8006c28 <HAL_ADC_Start_DMA>
 8002cc4:	f000 feb6 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002cc8:	4ba9      	ldr	r3, [pc, #676]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d146      	bne.n	8002d60 <UART2_RX_transfer_complete_callback+0x484>
 8002cd2:	4bb1      	ldr	r3, [pc, #708]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f003 faee 	bl	80062b8 <Get_Status_Bit>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d13f      	bne.n	8002d60 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ce0:	4ba4      	ldr	r3, [pc, #656]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ce8:	d001      	beq.n	8002cee <UART2_RX_transfer_complete_callback+0x412>
 8002cea:	f000 fea3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002cee:	4ba4      	ldr	r3, [pc, #656]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cf4:	4ba3      	ldr	r3, [pc, #652]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4ba1      	ldr	r3, [pc, #644]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d00:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002d02:	4ba0      	ldr	r3, [pc, #640]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b0b      	cmp	r3, #11
 8002d0a:	d80f      	bhi.n	8002d2c <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	23a0      	movs	r3, #160	@ 0xa0
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	2200      	movs	r2, #0
 8002d16:	0018      	movs	r0, r3
 8002d18:	f005 fb91 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d1c:	4b97      	ldr	r3, [pc, #604]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	0018      	movs	r0, r3
 8002d24:	f005 fb8b 	bl	800843e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d28:	f000 fe84 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002d2c:	4b95      	ldr	r3, [pc, #596]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d80f      	bhi.n	8002d56 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	0099      	lsls	r1, r3, #2
 8002d3a:	23a0      	movs	r3, #160	@ 0xa0
 8002d3c:	05db      	lsls	r3, r3, #23
 8002d3e:	2201      	movs	r2, #1
 8002d40:	0018      	movs	r0, r3
 8002d42:	f005 fb7c 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d46:	4b8d      	ldr	r3, [pc, #564]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2140      	movs	r1, #64	@ 0x40
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f005 fb76 	bl	800843e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d52:	f000 fe6f 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002d56:	4b8b      	ldr	r3, [pc, #556]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d5c:	f000 fe6a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002d60:	4b83      	ldr	r3, [pc, #524]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d14c      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>
 8002d6a:	4b88      	ldr	r3, [pc, #544]	@ (8002f8c <UART2_RX_transfer_complete_callback+0x6b0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d147      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>
 8002d74:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d76:	2120      	movs	r1, #32
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f003 fa9d 	bl	80062b8 <Get_Status_Bit>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d13f      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d84:	4b7b      	ldr	r3, [pc, #492]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d8c:	d11e      	bne.n	8002dcc <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002d94:	4b7b      	ldr	r3, [pc, #492]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b79      	ldr	r3, [pc, #484]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002da2:	4b77      	ldr	r3, [pc, #476]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002da8:	4b71      	ldr	r3, [pc, #452]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002daa:	2210      	movs	r2, #16
 8002dac:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002dae:	4b70      	ldr	r3, [pc, #448]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002db0:	2208      	movs	r2, #8
 8002db2:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002db4:	4b78      	ldr	r3, [pc, #480]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002db6:	2120      	movs	r1, #32
 8002db8:	0018      	movs	r0, r3
 8002dba:	f003 faa3 	bl	8006304 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002dbe:	4b76      	ldr	r3, [pc, #472]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002dc0:	2140      	movs	r1, #64	@ 0x40
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f003 fa9e 	bl	8006304 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002dc8:	f000 fe33 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002dcc:	4b69      	ldr	r3, [pc, #420]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2bfa      	cmp	r3, #250	@ 0xfa
 8002dd4:	d001      	beq.n	8002dda <UART2_RX_transfer_complete_callback+0x4fe>
 8002dd6:	f000 fe2c 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002dda:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002de0:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002de2:	220e      	movs	r2, #14
 8002de4:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002de6:	4b62      	ldr	r3, [pc, #392]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002de8:	2208      	movs	r2, #8
 8002dea:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002dec:	4b6a      	ldr	r3, [pc, #424]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002dee:	2120      	movs	r1, #32
 8002df0:	0018      	movs	r0, r3
 8002df2:	f003 fa87 	bl	8006304 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002df6:	4b68      	ldr	r3, [pc, #416]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002df8:	2140      	movs	r1, #64	@ 0x40
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f003 fa82 	bl	8006304 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e00:	f000 fe17 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002e04:	4b5a      	ldr	r3, [pc, #360]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b0e      	cmp	r3, #14
 8002e0c:	d123      	bne.n	8002e56 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e0e:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e16:	d001      	beq.n	8002e1c <UART2_RX_transfer_complete_callback+0x540>
 8002e18:	f000 fe0c 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	23a0      	movs	r3, #160	@ 0xa0
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	2200      	movs	r2, #0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f005 fb09 	bl	800843e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e2c:	4b53      	ldr	r3, [pc, #332]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2140      	movs	r1, #64	@ 0x40
 8002e32:	0018      	movs	r0, r3
 8002e34:	f005 fb03 	bl	800843e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002e38:	4b51      	ldr	r3, [pc, #324]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002e3e:	4b51      	ldr	r3, [pc, #324]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b4e      	ldr	r3, [pc, #312]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e4a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002e4c:	4b48      	ldr	r3, [pc, #288]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e4e:	220f      	movs	r2, #15
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	f000 fdef 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002e56:	4b46      	ldr	r3, [pc, #280]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d142      	bne.n	8002ee6 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e60:	4b44      	ldr	r3, [pc, #272]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e68:	d001      	beq.n	8002e6e <UART2_RX_transfer_complete_callback+0x592>
 8002e6a:	f000 fde3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002e6e:	4b45      	ldr	r3, [pc, #276]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	4b42      	ldr	r3, [pc, #264]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e7a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e7c:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b0b      	cmp	r3, #11
 8002e84:	d80f      	bhi.n	8002ea6 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	0099      	lsls	r1, r3, #2
 8002e8a:	23a0      	movs	r3, #160	@ 0xa0
 8002e8c:	05db      	lsls	r3, r3, #23
 8002e8e:	2200      	movs	r2, #0
 8002e90:	0018      	movs	r0, r3
 8002e92:	f005 fad4 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e96:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2140      	movs	r1, #64	@ 0x40
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f005 face 	bl	800843e <HAL_GPIO_WritePin>
 8002ea2:	f000 fdc7 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ea6:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b18      	cmp	r3, #24
 8002eae:	d80f      	bhi.n	8002ed0 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	0099      	lsls	r1, r3, #2
 8002eb4:	23a0      	movs	r3, #160	@ 0xa0
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	2201      	movs	r2, #1
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f005 fabf 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2140      	movs	r1, #64	@ 0x40
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f005 fab9 	bl	800843e <HAL_GPIO_WritePin>
 8002ecc:	f000 fdb2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ed8:	2208      	movs	r2, #8
 8002eda:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002edc:	4b29      	ldr	r3, [pc, #164]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	f000 fda7 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002ee6:	4b22      	ldr	r3, [pc, #136]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d15d      	bne.n	8002fac <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ef0:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ef8:	d001      	beq.n	8002efe <UART2_RX_transfer_complete_callback+0x622>
 8002efa:	f000 fd9b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002efe:	4b21      	ldr	r3, [pc, #132]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f0a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b0b      	cmp	r3, #11
 8002f14:	d80f      	bhi.n	8002f36 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	0099      	lsls	r1, r3, #2
 8002f1a:	23a0      	movs	r3, #160	@ 0xa0
 8002f1c:	05db      	lsls	r3, r3, #23
 8002f1e:	2200      	movs	r2, #0
 8002f20:	0018      	movs	r0, r3
 8002f22:	f005 fa8c 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2140      	movs	r1, #64	@ 0x40
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f005 fa86 	bl	800843e <HAL_GPIO_WritePin>
 8002f32:	f000 fd7f 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002f36:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b18      	cmp	r3, #24
 8002f3e:	d80f      	bhi.n	8002f60 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	23a0      	movs	r3, #160	@ 0xa0
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	2201      	movs	r2, #1
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f005 fa77 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	2140      	movs	r1, #64	@ 0x40
 8002f56:	0018      	movs	r0, r3
 8002f58:	f005 fa71 	bl	800843e <HAL_GPIO_WritePin>
 8002f5c:	f000 fd6a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002f62:	2211      	movs	r2, #17
 8002f64:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002f66:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	f000 fd62 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8002f70:	20000430 	.word	0x20000430
 8002f74:	200004dc 	.word	0x200004dc
 8002f78:	20000ca0 	.word	0x20000ca0
 8002f7c:	50000800 	.word	0x50000800
 8002f80:	20000ce8 	.word	0x20000ce8
 8002f84:	20000c3a 	.word	0x20000c3a
 8002f88:	200008d0 	.word	0x200008d0
 8002f8c:	20000444 	.word	0x20000444
 8002f90:	20000cc4 	.word	0x20000cc4
 8002f94:	20000c58 	.word	0x20000c58
 8002f98:	20000c3c 	.word	0x20000c3c
 8002f9c:	20000028 	.word	0x20000028
 8002fa0:	0800dfcc 	.word	0x0800dfcc
 8002fa4:	20000c4c 	.word	0x20000c4c
 8002fa8:	200004fc 	.word	0x200004fc
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002fac:	4bed      	ldr	r3, [pc, #948]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b11      	cmp	r3, #17
 8002fb4:	d146      	bne.n	8003044 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002fb6:	4bec      	ldr	r3, [pc, #944]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2bf8      	cmp	r3, #248	@ 0xf8
 8002fbe:	d135      	bne.n	800302c <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002fc0:	4bea      	ldr	r3, [pc, #936]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4be8      	ldr	r3, [pc, #928]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fcc:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002fce:	4be7      	ldr	r3, [pc, #924]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b0b      	cmp	r3, #11
 8002fd6:	d80f      	bhi.n	8002ff8 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	23a0      	movs	r3, #160	@ 0xa0
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f005 fa2b 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fe8:	4be1      	ldr	r3, [pc, #900]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	2140      	movs	r1, #64	@ 0x40
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f005 fa25 	bl	800843e <HAL_GPIO_WritePin>
 8002ff4:	f000 fd1e 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ff8:	4bdc      	ldr	r3, [pc, #880]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b18      	cmp	r3, #24
 8003000:	d80f      	bhi.n	8003022 <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	0099      	lsls	r1, r3, #2
 8003006:	23a0      	movs	r3, #160	@ 0xa0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	2201      	movs	r2, #1
 800300c:	0018      	movs	r0, r3
 800300e:	f005 fa16 	bl	800843e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003012:	4bd7      	ldr	r3, [pc, #860]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8003014:	2200      	movs	r2, #0
 8003016:	2140      	movs	r1, #64	@ 0x40
 8003018:	0018      	movs	r0, r3
 800301a:	f005 fa10 	bl	800843e <HAL_GPIO_WritePin>
 800301e:	f000 fd09 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8003022:	4bd2      	ldr	r3, [pc, #840]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	f000 fd04 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800302c:	4bce      	ldr	r3, [pc, #824]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2bfa      	cmp	r3, #250	@ 0xfa
 8003034:	d001      	beq.n	800303a <UART2_RX_transfer_complete_callback+0x75e>
 8003036:	f000 fcfd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 800303a:	4bca      	ldr	r3, [pc, #808]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 800303c:	2212      	movs	r2, #18
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	f000 fcf8 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8003044:	4bc7      	ldr	r3, [pc, #796]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b12      	cmp	r3, #18
 800304c:	d001      	beq.n	8003052 <UART2_RX_transfer_complete_callback+0x776>
 800304e:	f000 fcf1 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003052:	4bc5      	ldr	r3, [pc, #788]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2bf8      	cmp	r3, #248	@ 0xf8
 800305a:	d001      	beq.n	8003060 <UART2_RX_transfer_complete_callback+0x784>
 800305c:	f000 fcea 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8003060:	4bc4      	ldr	r3, [pc, #784]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 8003062:	0018      	movs	r0, r3
 8003064:	f001 fd6c 	bl	8004b40 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	23a0      	movs	r3, #160	@ 0xa0
 800306e:	05db      	lsls	r3, r3, #23
 8003070:	2201      	movs	r2, #1
 8003072:	0018      	movs	r0, r3
 8003074:	f005 f9e3 	bl	800843e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003078:	4bbd      	ldr	r3, [pc, #756]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	@ 0x40
 800307e:	0018      	movs	r0, r3
 8003080:	f005 f9dd 	bl	800843e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	23a0      	movs	r3, #160	@ 0xa0
 800308a:	05db      	lsls	r3, r3, #23
 800308c:	2200      	movs	r2, #0
 800308e:	0018      	movs	r0, r3
 8003090:	f005 f9d5 	bl	800843e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003094:	4bb6      	ldr	r3, [pc, #728]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8003096:	2201      	movs	r2, #1
 8003098:	2140      	movs	r1, #64	@ 0x40
 800309a:	0018      	movs	r0, r3
 800309c:	f005 f9cf 	bl	800843e <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80030a0:	4bb0      	ldr	r3, [pc, #704]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 80030a2:	2212      	movs	r2, #18
 80030a4:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80030a6:	4baf      	ldr	r3, [pc, #700]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 80030a8:	2208      	movs	r2, #8
 80030aa:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 80030ac:	4baf      	ldr	r3, [pc, #700]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 80030b2:	4bb1      	ldr	r3, [pc, #708]	@ (8003378 <UART2_RX_transfer_complete_callback+0xa9c>)
 80030b4:	2100      	movs	r1, #0
 80030b6:	0018      	movs	r0, r3
 80030b8:	f003 f897 	bl	80061ea <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 80030bc:	4baf      	ldr	r3, [pc, #700]	@ (800337c <UART2_RX_transfer_complete_callback+0xaa0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80030c2:	4aaf      	ldr	r2, [pc, #700]	@ (8003380 <UART2_RX_transfer_complete_callback+0xaa4>)
 80030c4:	4bab      	ldr	r3, [pc, #684]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 80030c6:	0011      	movs	r1, r2
 80030c8:	0018      	movs	r0, r3
 80030ca:	f001 fbbf 	bl	800484c <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 80030ce:	4aad      	ldr	r2, [pc, #692]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030d0:	4ba8      	ldr	r3, [pc, #672]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 80030d2:	0011      	movs	r1, r2
 80030d4:	0018      	movs	r0, r3
 80030d6:	f001 fbb9 	bl	800484c <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 80030da:	4bab      	ldr	r3, [pc, #684]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80030dc:	2108      	movs	r1, #8
 80030de:	0018      	movs	r0, r3
 80030e0:	f003 f8fe 	bl	80062e0 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80030e4:	4ba7      	ldr	r3, [pc, #668]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030e6:	2100      	movs	r1, #0
 80030e8:	0018      	movs	r0, r3
 80030ea:	f001 fd55 	bl	8004b98 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80030ee:	4aa7      	ldr	r2, [pc, #668]	@ (800338c <UART2_RX_transfer_complete_callback+0xab0>)
 80030f0:	4ba4      	ldr	r3, [pc, #656]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f001 fe45 	bl	8004d84 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80030fa:	4ba5      	ldr	r3, [pc, #660]	@ (8003390 <UART2_RX_transfer_complete_callback+0xab4>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	001a      	movs	r2, r3
 8003100:	49a4      	ldr	r1, [pc, #656]	@ (8003394 <UART2_RX_transfer_complete_callback+0xab8>)
 8003102:	4ba5      	ldr	r3, [pc, #660]	@ (8003398 <UART2_RX_transfer_complete_callback+0xabc>)
 8003104:	0018      	movs	r0, r3
 8003106:	f003 fd8f 	bl	8006c28 <HAL_ADC_Start_DMA>
 800310a:	f000 fc93 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 800310e:	4ba3      	ldr	r3, [pc, #652]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d000      	beq.n	800311a <UART2_RX_transfer_complete_callback+0x83e>
 8003118:	e29e      	b.n	8003658 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 800311a:	4ba1      	ldr	r3, [pc, #644]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d000      	beq.n	8003126 <UART2_RX_transfer_complete_callback+0x84a>
 8003124:	e0a3      	b.n	800326e <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003126:	4b9f      	ldr	r3, [pc, #636]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003128:	0018      	movs	r0, r3
 800312a:	f7fe f812 	bl	8001152 <Is_Data_Buffer_Empty>
 800312e:	0003      	movs	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d001      	beq.n	8003138 <UART2_RX_transfer_complete_callback+0x85c>
 8003134:	f000 fc7e 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003138:	4b8b      	ldr	r3, [pc, #556]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800313a:	0018      	movs	r0, r3
 800313c:	f7fd fec8 	bl	8000ed0 <Is_Status_Byte>
 8003140:	0003      	movs	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <UART2_RX_transfer_complete_callback+0x86e>
 8003146:	f000 fc75 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 800314a:	4b87      	ldr	r3, [pc, #540]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd fef1 	bl	8000f34 <Is_PC_Status_Byte>
 8003152:	0003      	movs	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d134      	bne.n	80031c2 <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003158:	4b83      	ldr	r3, [pc, #524]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4b90      	ldr	r3, [pc, #576]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003160:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003162:	4b91      	ldr	r3, [pc, #580]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	4b7f      	ldr	r3, [pc, #508]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f7fd ffcf 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003172:	0003      	movs	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10d      	bne.n	8003194 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 8003178:	4b7b      	ldr	r3, [pc, #492]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b87      	ldr	r3, [pc, #540]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003180:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	4b80      	ldr	r3, [pc, #512]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003188:	0011      	movs	r1, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f003 f8a8 	bl	80062e0 <Set_Status_Bit>
 8003190:	f000 fc50 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003194:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003196:	0018      	movs	r0, r3
 8003198:	f7fe f871 	bl	800127e <Is_OMNI_On>
 800319c:	0003      	movs	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d001      	beq.n	80031a6 <UART2_RX_transfer_complete_callback+0x8ca>
 80031a2:	f000 fc47 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80031a6:	4b70      	ldr	r3, [pc, #448]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b7b      	ldr	r3, [pc, #492]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 80031ae:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	005a      	lsls	r2, r3, #1
 80031b4:	4b74      	ldr	r3, [pc, #464]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80031b6:	0011      	movs	r1, r2
 80031b8:	0018      	movs	r0, r3
 80031ba:	f003 f891 	bl	80062e0 <Set_Status_Bit>
 80031be:	f000 fc39 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80031c2:	4b69      	ldr	r3, [pc, #420]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd fed1 	bl	8000f6c <Is_CC_Status_Byte>
 80031ca:	0003      	movs	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d134      	bne.n	800323a <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 80031d0:	4b65      	ldr	r3, [pc, #404]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b72      	ldr	r3, [pc, #456]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 80031d8:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80031da:	4b73      	ldr	r3, [pc, #460]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031e2:	0011      	movs	r1, r2
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7fd ff93 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80031ea:	0003      	movs	r3, r0
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10d      	bne.n	800320c <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 80031f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b69      	ldr	r3, [pc, #420]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 80031f8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	005a      	lsls	r2, r3, #1
 80031fe:	4b62      	ldr	r3, [pc, #392]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003200:	0011      	movs	r1, r2
 8003202:	0018      	movs	r0, r3
 8003204:	f003 f86c 	bl	80062e0 <Set_Status_Bit>
 8003208:	f000 fc14 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 800320c:	4b5e      	ldr	r3, [pc, #376]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800320e:	0018      	movs	r0, r3
 8003210:	f7fe f835 	bl	800127e <Is_OMNI_On>
 8003214:	0003      	movs	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <UART2_RX_transfer_complete_callback+0x942>
 800321a:	f000 fc0b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 800321e:	4b52      	ldr	r3, [pc, #328]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b5d      	ldr	r3, [pc, #372]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003226:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	005a      	lsls	r2, r3, #1
 800322c:	4b56      	ldr	r3, [pc, #344]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f003 f855 	bl	80062e0 <Set_Status_Bit>
 8003236:	f000 fbfd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 800323a:	4b4b      	ldr	r3, [pc, #300]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd ff57 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003242:	0003      	movs	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <UART2_RX_transfer_complete_callback+0x970>
 8003248:	f000 fbf4 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 800324c:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b52      	ldr	r3, [pc, #328]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003254:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 8003256:	4b52      	ldr	r3, [pc, #328]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	005a      	lsls	r2, r3, #1
 8003260:	4b49      	ldr	r3, [pc, #292]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003262:	0011      	movs	r1, r2
 8003264:	0018      	movs	r0, r3
 8003266:	f003 f83b 	bl	80062e0 <Set_Status_Bit>
 800326a:	f000 fbe3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 800326e:	4b4c      	ldr	r3, [pc, #304]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <UART2_RX_transfer_complete_callback+0x9a0>
 8003278:	f000 fbdc 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 800327c:	4b3a      	ldr	r3, [pc, #232]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800327e:	0018      	movs	r0, r3
 8003280:	f7fd fe3f 	bl	8000f02 <Is_Data_Byte>
 8003284:	0003      	movs	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d000      	beq.n	800328c <UART2_RX_transfer_complete_callback+0x9b0>
 800328a:	e151      	b.n	8003530 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	005a      	lsls	r2, r3, #1
 8003290:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003292:	0011      	movs	r1, r2
 8003294:	0018      	movs	r0, r3
 8003296:	f003 f823 	bl	80062e0 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 800329a:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 800329c:	0018      	movs	r0, r3
 800329e:	f7fd fe49 	bl	8000f34 <Is_PC_Status_Byte>
 80032a2:	0003      	movs	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d143      	bne.n	8003330 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80032a8:	4b3f      	ldr	r3, [pc, #252]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 80032b0:	0011      	movs	r1, r2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fd ff2c 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80032b8:	0003      	movs	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d008      	beq.n	80032d0 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80032be:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fd ffdc 	bl	800127e <Is_OMNI_On>
 80032c6:	0003      	movs	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d001      	beq.n	80032d0 <UART2_RX_transfer_complete_callback+0x9f4>
 80032cc:	f000 fbb2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80032d0:	4b34      	ldr	r3, [pc, #208]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd ff3d 	bl	8001152 <Is_Data_Buffer_Empty>
 80032d8:	0003      	movs	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <UART2_RX_transfer_complete_callback+0xa06>
 80032de:	f000 fba9 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80032e2:	4b21      	ldr	r3, [pc, #132]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80032e4:	2104      	movs	r1, #4
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fd ff81 	bl	80011ee <Is_Program_Change_Data_Byte_In_Range>
 80032ec:	0003      	movs	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10f      	bne.n	8003312 <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 80032f2:	f7fd fd39 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80032f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3301      	adds	r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	4b2a      	ldr	r3, [pc, #168]	@ (80033ac <UART2_RX_transfer_complete_callback+0xad0>)
 8003302:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003304:	f7fd f90c 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003308:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800330a:	2108      	movs	r1, #8
 800330c:	0018      	movs	r0, r3
 800330e:	f002 fff9 	bl	8006304 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 8003312:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd ff4c 	bl	80011b2 <Clear_Data_Buffer>
								active_status_byte = 0;
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003322:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <UART2_RX_transfer_complete_callback+0xad4>)
 8003324:	0011      	movs	r1, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f7fd ffc3 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 800332c:	f000 fb82 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003332:	0018      	movs	r0, r3
 8003334:	f7fd fe1a 	bl	8000f6c <Is_CC_Status_Byte>
 8003338:	0003      	movs	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <UART2_RX_transfer_complete_callback+0xa66>
 800333e:	f000 fb79 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003342:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003344:	0018      	movs	r0, r3
 8003346:	f7fd ff04 	bl	8001152 <Is_Data_Buffer_Empty>
 800334a:	0003      	movs	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d131      	bne.n	80033b4 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003358:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <UART2_RX_transfer_complete_callback+0xad4>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e368      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	20000430 	.word	0x20000430
 8003368:	200004dc 	.word	0x200004dc
 800336c:	20000c3a 	.word	0x20000c3a
 8003370:	50000800 	.word	0x50000800
 8003374:	20000ca0 	.word	0x20000ca0
 8003378:	200008d0 	.word	0x200008d0
 800337c:	20000444 	.word	0x20000444
 8003380:	20000cc4 	.word	0x20000cc4
 8003384:	20000c58 	.word	0x20000c58
 8003388:	20000c3c 	.word	0x20000c3c
 800338c:	20000028 	.word	0x20000028
 8003390:	0800dfcc 	.word	0x0800dfcc
 8003394:	20000c4c 	.word	0x20000c4c
 8003398:	200004fc 	.word	0x200004fc
 800339c:	200004cb 	.word	0x200004cb
 80033a0:	200004cc 	.word	0x200004cc
 80033a4:	200004d0 	.word	0x200004d0
 80033a8:	200004ca 	.word	0x200004ca
 80033ac:	200004bc 	.word	0x200004bc
 80033b0:	20000c44 	.word	0x20000c44

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80033b4:	4bd6      	ldr	r3, [pc, #856]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4bd6      	ldr	r3, [pc, #856]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033bc:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80033be:	4ad6      	ldr	r2, [pc, #856]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033c0:	4bd6      	ldr	r3, [pc, #856]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fd ff74 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80033ca:	4bd2      	ldr	r3, [pc, #840]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fd fde9 	bl	8000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80033d2:	0003      	movs	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d14c      	bne.n	8003472 <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 80033d8:	4bd1      	ldr	r3, [pc, #836]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4bd1      	ldr	r3, [pc, #836]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fd fe94 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033e8:	0003      	movs	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d139      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80033ee:	4ace      	ldr	r2, [pc, #824]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033f0:	4bc8      	ldr	r3, [pc, #800]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033f2:	0011      	movs	r1, r2
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fd fe34 	bl	8001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80033fa:	0003      	movs	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d130      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003400:	4bc4      	ldr	r3, [pc, #784]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b79      	cmp	r3, #121	@ 0x79
 8003408:	d10b      	bne.n	8003422 <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 800340a:	4ac8      	ldr	r2, [pc, #800]	@ (800372c <UART2_RX_transfer_complete_callback+0xe50>)
 800340c:	4bc8      	ldr	r3, [pc, #800]	@ (8003730 <UART2_RX_transfer_complete_callback+0xe54>)
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f7fd ff69 	bl	80012e8 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003416:	4bc0      	ldr	r3, [pc, #768]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003418:	2108      	movs	r1, #8
 800341a:	0018      	movs	r0, r3
 800341c:	f002 ff72 	bl	8006304 <Clear_Status_Bit>
 8003420:	e01f      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003422:	4bbc      	ldr	r3, [pc, #752]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b7a      	cmp	r3, #122	@ 0x7a
 800342a:	d107      	bne.n	800343c <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 800342c:	f7fd ffb6 	bl	800139c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003430:	4bb9      	ldr	r3, [pc, #740]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003432:	2108      	movs	r1, #8
 8003434:	0018      	movs	r0, r3
 8003436:	f002 ff65 	bl	8006304 <Clear_Status_Bit>
 800343a:	e012      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 800343c:	4bb5      	ldr	r3, [pc, #724]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b7c      	cmp	r3, #124	@ 0x7c
 8003444:	d104      	bne.n	8003450 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 8003446:	4bb4      	ldr	r3, [pc, #720]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003448:	0018      	movs	r0, r3
 800344a:	f7fd ffdf 	bl	800140c <Set_OMNI_Off>
 800344e:	e008      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003450:	4bb0      	ldr	r3, [pc, #704]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b7d      	cmp	r3, #125	@ 0x7d
 8003458:	d103      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 800345a:	4baf      	ldr	r3, [pc, #700]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800345c:	0018      	movs	r0, r3
 800345e:	f7fd ffe5 	bl	800142c <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 8003462:	4bb4      	ldr	r3, [pc, #720]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003468:	4baa      	ldr	r3, [pc, #680]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 800346a:	0018      	movs	r0, r3
 800346c:	f7fd fea1 	bl	80011b2 <Clear_Data_Buffer>
 8003470:	e2e0      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003472:	4ba8      	ldr	r3, [pc, #672]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003474:	0018      	movs	r0, r3
 8003476:	f7fd fdc1 	bl	8000ffc <Is_Utilised_CC_First_Data_Byte>
 800347a:	0003      	movs	r3, r0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d14f      	bne.n	8003520 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003480:	4ba7      	ldr	r3, [pc, #668]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4ba7      	ldr	r3, [pc, #668]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 8003488:	0011      	movs	r1, r2
 800348a:	0018      	movs	r0, r3
 800348c:	f7fd fe40 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003490:	0003      	movs	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d006      	beq.n	80034a4 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003496:	4ba0      	ldr	r3, [pc, #640]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003498:	0018      	movs	r0, r3
 800349a:	f7fd fef0 	bl	800127e <Is_OMNI_On>
 800349e:	0003      	movs	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d135      	bne.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80034a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b14      	cmp	r3, #20
 80034ac:	d104      	bne.n	80034b8 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fd fbd7 	bl	8000c64 <Set_Waveshape_to_CC_Mode_and_Value>
 80034b6:	e02b      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80034b8:	4b96      	ldr	r3, [pc, #600]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b15      	cmp	r3, #21
 80034c0:	d109      	bne.n	80034d6 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034c2:	4b99      	ldr	r3, [pc, #612]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7fd fbe7 	bl	8000c98 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80034ca:	4b93      	ldr	r3, [pc, #588]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034cc:	2108      	movs	r1, #8
 80034ce:	0018      	movs	r0, r3
 80034d0:	f002 ff18 	bl	8006304 <Clear_Status_Bit>
 80034d4:	e01c      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80034d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b16      	cmp	r3, #22
 80034de:	d104      	bne.n	80034ea <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034e0:	4b91      	ldr	r3, [pc, #580]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fd fbf2 	bl	8000ccc <Set_Depth_to_CC_Mode_and_Value>
 80034e8:	e012      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80034ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b17      	cmp	r3, #23
 80034f2:	d104      	bne.n	80034fe <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7fd fc02 	bl	8000d00 <Set_Symmetry_to_CC_Mode_and_Value>
 80034fc:	e008      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80034fe:	4b85      	ldr	r3, [pc, #532]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b18      	cmp	r3, #24
 8003506:	d103      	bne.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003508:	4b87      	ldr	r3, [pc, #540]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 800350a:	0018      	movs	r0, r3
 800350c:	f7fd fc12 	bl	8000d34 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003510:	4b88      	ldr	r3, [pc, #544]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003518:	0018      	movs	r0, r3
 800351a:	f7fd fe4a 	bl	80011b2 <Clear_Data_Buffer>
 800351e:	e289      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003520:	4b84      	ldr	r3, [pc, #528]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003526:	4b7b      	ldr	r3, [pc, #492]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003528:	0018      	movs	r0, r3
 800352a:	f7fd fe42 	bl	80011b2 <Clear_Data_Buffer>
 800352e:	e281      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003530:	4b78      	ldr	r3, [pc, #480]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003532:	0018      	movs	r0, r3
 8003534:	f7fd fe3d 	bl	80011b2 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003538:	4a77      	ldr	r2, [pc, #476]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800353a:	4b78      	ldr	r3, [pc, #480]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 800353c:	0011      	movs	r1, r2
 800353e:	0018      	movs	r0, r3
 8003540:	f7fd feb7 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003544:	4b72      	ldr	r3, [pc, #456]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003546:	0018      	movs	r0, r3
 8003548:	f7fd fcf4 	bl	8000f34 <Is_PC_Status_Byte>
 800354c:	0003      	movs	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d131      	bne.n	80035b6 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8003552:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b72      	ldr	r3, [pc, #456]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 800355a:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800355c:	4b70      	ldr	r3, [pc, #448]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b6b      	ldr	r3, [pc, #428]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003564:	0011      	movs	r1, r2
 8003566:	0018      	movs	r0, r3
 8003568:	f7fd fdd2 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800356c:	0003      	movs	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10c      	bne.n	800358c <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 8003572:	4b67      	ldr	r3, [pc, #412]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b6e      	ldr	r3, [pc, #440]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800357a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800357c:	2380      	movs	r3, #128	@ 0x80
 800357e:	005a      	lsls	r2, r3, #1
 8003580:	4b65      	ldr	r3, [pc, #404]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f002 feab 	bl	80062e0 <Set_Status_Bit>
 800358a:	e253      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 800358c:	4b62      	ldr	r3, [pc, #392]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd fe75 	bl	800127e <Is_OMNI_On>
 8003594:	0003      	movs	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d000      	beq.n	800359c <UART2_RX_transfer_complete_callback+0xcc0>
 800359a:	e24b      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800359c:	4b5c      	ldr	r3, [pc, #368]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4b64      	ldr	r3, [pc, #400]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80035a4:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80035a6:	2380      	movs	r3, #128	@ 0x80
 80035a8:	005a      	lsls	r2, r3, #1
 80035aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035ac:	0011      	movs	r1, r2
 80035ae:	0018      	movs	r0, r3
 80035b0:	f002 fe96 	bl	80062e0 <Set_Status_Bit>
 80035b4:	e23e      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80035b6:	4b56      	ldr	r3, [pc, #344]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fd fcd7 	bl	8000f6c <Is_CC_Status_Byte>
 80035be:	0003      	movs	r3, r0
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d131      	bne.n	8003628 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 80035c4:	4b52      	ldr	r3, [pc, #328]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b56      	ldr	r3, [pc, #344]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 80035cc:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80035ce:	4b54      	ldr	r3, [pc, #336]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035d6:	0011      	movs	r1, r2
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fd fd99 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80035de:	0003      	movs	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10c      	bne.n	80035fe <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 80035e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80035ec:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	005a      	lsls	r2, r3, #1
 80035f2:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f002 fe72 	bl	80062e0 <Set_Status_Bit>
 80035fc:	e21a      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80035fe:	4b46      	ldr	r3, [pc, #280]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003600:	0018      	movs	r0, r3
 8003602:	f7fd fe3c 	bl	800127e <Is_OMNI_On>
 8003606:	0003      	movs	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d000      	beq.n	800360e <UART2_RX_transfer_complete_callback+0xd32>
 800360c:	e212      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800360e:	4b40      	ldr	r3, [pc, #256]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003616:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003618:	2380      	movs	r3, #128	@ 0x80
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f002 fe5d 	bl	80062e0 <Set_Status_Bit>
 8003626:	e205      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003628:	4b39      	ldr	r3, [pc, #228]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800362a:	0018      	movs	r0, r3
 800362c:	f7fd fd60 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003630:	0003      	movs	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d000      	beq.n	8003638 <UART2_RX_transfer_complete_callback+0xd5c>
 8003636:	e1fd      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003638:	4b35      	ldr	r3, [pc, #212]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4b3d      	ldr	r3, [pc, #244]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003640:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003642:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	005a      	lsls	r2, r3, #1
 800364c:	4b32      	ldr	r3, [pc, #200]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800364e:	0011      	movs	r1, r2
 8003650:	0018      	movs	r0, r3
 8003652:	f002 fe45 	bl	80062e0 <Set_Status_Bit>
 8003656:	e1ed      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003658:	4b36      	ldr	r3, [pc, #216]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d100      	bne.n	8003664 <UART2_RX_transfer_complete_callback+0xd88>
 8003662:	e1e7      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	4b2b      	ldr	r3, [pc, #172]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f002 fe23 	bl	80062b8 <Get_Status_Bit>
 8003672:	0003      	movs	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10d      	bne.n	8003694 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8003678:	4b2e      	ldr	r3, [pc, #184]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 800367e:	4b25      	ldr	r3, [pc, #148]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003680:	0018      	movs	r0, r3
 8003682:	f7fd fd96 	bl	80011b2 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003686:	4a24      	ldr	r2, [pc, #144]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003688:	4b24      	ldr	r3, [pc, #144]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f7fd fe10 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 8003692:	e1cf      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003694:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003696:	0018      	movs	r0, r3
 8003698:	f7fd fc33 	bl	8000f02 <Is_Data_Byte>
 800369c:	0003      	movs	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d000      	beq.n	80036a4 <UART2_RX_transfer_complete_callback+0xdc8>
 80036a2:	e133      	b.n	800390c <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80036a4:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7fd fc44 	bl	8000f34 <Is_PC_Status_Byte>
 80036ac:	0003      	movs	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d144      	bne.n	800373c <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7fd fd4c 	bl	8001152 <Is_Data_Buffer_Empty>
 80036ba:	0003      	movs	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d000      	beq.n	80036c2 <UART2_RX_transfer_complete_callback+0xde6>
 80036c0:	e1b8      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80036c2:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80036c4:	2104      	movs	r1, #4
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7fd fd91 	bl	80011ee <Is_Program_Change_Data_Byte_In_Range>
 80036cc:	0003      	movs	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10f      	bne.n	80036f2 <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 80036d2:	f7fd fb49 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80036d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3301      	adds	r3, #1
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <UART2_RX_transfer_complete_callback+0xe5c>)
 80036e2:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80036e4:	f7fc ff1c 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80036ea:	2108      	movs	r1, #8
 80036ec:	0018      	movs	r0, r3
 80036ee:	f002 fe09 	bl	8006304 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 80036f2:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fd fd5c 	bl	80011b2 <Clear_Data_Buffer>
							active_status_byte = 0;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003700:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 8003704:	0011      	movs	r1, r2
 8003706:	0018      	movs	r0, r3
 8003708:	f7fd fdd3 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 800370c:	e192      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	200004dc 	.word	0x200004dc
 8003714:	200004d0 	.word	0x200004d0
 8003718:	20000c3c 	.word	0x20000c3c
 800371c:	20000c44 	.word	0x20000c44
 8003720:	200004ca 	.word	0x200004ca
 8003724:	200004cc 	.word	0x200004cc
 8003728:	200004d1 	.word	0x200004d1
 800372c:	20000028 	.word	0x20000028
 8003730:	20000c58 	.word	0x20000c58
 8003734:	200004cb 	.word	0x200004cb
 8003738:	200004bc 	.word	0x200004bc

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 800373c:	4bc4      	ldr	r3, [pc, #784]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800373e:	0018      	movs	r0, r3
 8003740:	f7fd fc14 	bl	8000f6c <Is_CC_Status_Byte>
 8003744:	0003      	movs	r3, r0
 8003746:	2b01      	cmp	r3, #1
 8003748:	d000      	beq.n	800374c <UART2_RX_transfer_complete_callback+0xe70>
 800374a:	e0d2      	b.n	80038f2 <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800374c:	4bc1      	ldr	r3, [pc, #772]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800374e:	0018      	movs	r0, r3
 8003750:	f7fd fcff 	bl	8001152 <Is_Data_Buffer_Empty>
 8003754:	0003      	movs	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d108      	bne.n	800376c <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800375a:	4bbf      	ldr	r3, [pc, #764]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4bbc      	ldr	r3, [pc, #752]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003762:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003764:	4bbd      	ldr	r3, [pc, #756]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e163      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 800376c:	4bba      	ldr	r3, [pc, #744]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4bb8      	ldr	r3, [pc, #736]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003774:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003776:	4aba      	ldr	r2, [pc, #744]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003778:	4bb8      	ldr	r3, [pc, #736]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 800377a:	0011      	movs	r1, r2
 800377c:	0018      	movs	r0, r3
 800377e:	f7fd fd98 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003782:	4bb7      	ldr	r3, [pc, #732]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003784:	2108      	movs	r1, #8
 8003786:	0018      	movs	r0, r3
 8003788:	f002 fdbc 	bl	8006304 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800378c:	4bb1      	ldr	r3, [pc, #708]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800378e:	0018      	movs	r0, r3
 8003790:	f7fd fc08 	bl	8000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003794:	0003      	movs	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d14c      	bne.n	8003834 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 800379a:	4bb2      	ldr	r3, [pc, #712]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4bab      	ldr	r3, [pc, #684]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80037a2:	0011      	movs	r1, r2
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7fd fcb3 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80037aa:	0003      	movs	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d139      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80037b0:	4aad      	ldr	r2, [pc, #692]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80037b2:	4ba8      	ldr	r3, [pc, #672]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fd fc53 	bl	8001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80037bc:	0003      	movs	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d130      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80037c2:	4ba4      	ldr	r3, [pc, #656]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b79      	cmp	r3, #121	@ 0x79
 80037ca:	d10b      	bne.n	80037e4 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 80037cc:	4aa7      	ldr	r2, [pc, #668]	@ (8003a6c <UART2_RX_transfer_complete_callback+0x1190>)
 80037ce:	4ba8      	ldr	r3, [pc, #672]	@ (8003a70 <UART2_RX_transfer_complete_callback+0x1194>)
 80037d0:	0011      	movs	r1, r2
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fd fd88 	bl	80012e8 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037d8:	4ba1      	ldr	r3, [pc, #644]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80037da:	2108      	movs	r1, #8
 80037dc:	0018      	movs	r0, r3
 80037de:	f002 fd91 	bl	8006304 <Clear_Status_Bit>
 80037e2:	e01f      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80037e4:	4b9b      	ldr	r3, [pc, #620]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b7a      	cmp	r3, #122	@ 0x7a
 80037ec:	d107      	bne.n	80037fe <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 80037ee:	f7fd fdd5 	bl	800139c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037f2:	4b9b      	ldr	r3, [pc, #620]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80037f4:	2108      	movs	r1, #8
 80037f6:	0018      	movs	r0, r3
 80037f8:	f002 fd84 	bl	8006304 <Clear_Status_Bit>
 80037fc:	e012      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80037fe:	4b95      	ldr	r3, [pc, #596]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b7c      	cmp	r3, #124	@ 0x7c
 8003806:	d104      	bne.n	8003812 <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003808:	4b95      	ldr	r3, [pc, #596]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800380a:	0018      	movs	r0, r3
 800380c:	f7fd fdfe 	bl	800140c <Set_OMNI_Off>
 8003810:	e008      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003812:	4b90      	ldr	r3, [pc, #576]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b7d      	cmp	r3, #125	@ 0x7d
 800381a:	d103      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 800381c:	4b90      	ldr	r3, [pc, #576]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800381e:	0018      	movs	r0, r3
 8003820:	f7fd fe04 	bl	800142c <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003824:	4b8a      	ldr	r3, [pc, #552]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800382a:	4b8a      	ldr	r3, [pc, #552]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd fcc0 	bl	80011b2 <Clear_Data_Buffer>
 8003832:	e0ff      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003834:	4b87      	ldr	r3, [pc, #540]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fbe0 	bl	8000ffc <Is_Utilised_CC_First_Data_Byte>
 800383c:	0003      	movs	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d14f      	bne.n	80038e2 <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003842:	4b88      	ldr	r3, [pc, #544]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	4b81      	ldr	r3, [pc, #516]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800384a:	0011      	movs	r1, r2
 800384c:	0018      	movs	r0, r3
 800384e:	f7fd fc5f 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003852:	0003      	movs	r3, r0
 8003854:	2b01      	cmp	r3, #1
 8003856:	d006      	beq.n	8003866 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003858:	4b81      	ldr	r3, [pc, #516]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800385a:	0018      	movs	r0, r3
 800385c:	f7fd fd0f 	bl	800127e <Is_OMNI_On>
 8003860:	0003      	movs	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d135      	bne.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003866:	4b7b      	ldr	r3, [pc, #492]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b14      	cmp	r3, #20
 800386e:	d104      	bne.n	800387a <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003870:	4b7d      	ldr	r3, [pc, #500]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 8003872:	0018      	movs	r0, r3
 8003874:	f7fd f9f6 	bl	8000c64 <Set_Waveshape_to_CC_Mode_and_Value>
 8003878:	e02b      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 800387a:	4b76      	ldr	r3, [pc, #472]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b15      	cmp	r3, #21
 8003882:	d109      	bne.n	8003898 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003884:	4b78      	ldr	r3, [pc, #480]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 8003886:	0018      	movs	r0, r3
 8003888:	f7fd fa06 	bl	8000c98 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800388c:	4b74      	ldr	r3, [pc, #464]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800388e:	2108      	movs	r1, #8
 8003890:	0018      	movs	r0, r3
 8003892:	f002 fd37 	bl	8006304 <Clear_Status_Bit>
 8003896:	e01c      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003898:	4b6e      	ldr	r3, [pc, #440]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b16      	cmp	r3, #22
 80038a0:	d104      	bne.n	80038ac <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038a2:	4b71      	ldr	r3, [pc, #452]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7fd fa11 	bl	8000ccc <Set_Depth_to_CC_Mode_and_Value>
 80038aa:	e012      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80038ac:	4b69      	ldr	r3, [pc, #420]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b17      	cmp	r3, #23
 80038b4:	d104      	bne.n	80038c0 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fd fa21 	bl	8000d00 <Set_Symmetry_to_CC_Mode_and_Value>
 80038be:	e008      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80038c0:	4b64      	ldr	r3, [pc, #400]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b18      	cmp	r3, #24
 80038c8:	d103      	bne.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038ca:	4b67      	ldr	r3, [pc, #412]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fd fa31 	bl	8000d34 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80038d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80038d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd fc69 	bl	80011b2 <Clear_Data_Buffer>
 80038e0:	e0a8      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 80038e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80038e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7fd fc61 	bl	80011b2 <Clear_Data_Buffer>
 80038f0:	e0a0      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 80038f2:	4b57      	ldr	r3, [pc, #348]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fd fbfb 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 80038fa:	0003      	movs	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d000      	beq.n	8003902 <UART2_RX_transfer_complete_callback+0x1026>
 8003900:	e098      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003902:	4b54      	ldr	r3, [pc, #336]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003904:	0018      	movs	r0, r3
 8003906:	f7fd fc24 	bl	8001152 <Is_Data_Buffer_Empty>
 800390a:	e093      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 800390c:	4b51      	ldr	r3, [pc, #324]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800390e:	0018      	movs	r0, r3
 8003910:	f7fd fc4f 	bl	80011b2 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003914:	4a52      	ldr	r2, [pc, #328]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003916:	4b51      	ldr	r3, [pc, #324]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 8003918:	0011      	movs	r1, r2
 800391a:	0018      	movs	r0, r3
 800391c:	f7fd fcc9 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003920:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003922:	0018      	movs	r0, r3
 8003924:	f7fd fb06 	bl	8000f34 <Is_PC_Status_Byte>
 8003928:	0003      	movs	r3, r0
 800392a:	2b01      	cmp	r3, #1
 800392c:	d130      	bne.n	8003990 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 800392e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	4b4f      	ldr	r3, [pc, #316]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 8003936:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003938:	4b4a      	ldr	r3, [pc, #296]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b46      	ldr	r3, [pc, #280]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f7fd fbe4 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003948:	0003      	movs	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10c      	bne.n	8003968 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 800394e:	4b42      	ldr	r3, [pc, #264]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b3e      	ldr	r3, [pc, #248]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003956:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	005a      	lsls	r2, r3, #1
 800395c:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800395e:	0011      	movs	r1, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f002 fcbd 	bl	80062e0 <Set_Status_Bit>
 8003966:	e065      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003968:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800396a:	0018      	movs	r0, r3
 800396c:	f7fd fc87 	bl	800127e <Is_OMNI_On>
 8003970:	0003      	movs	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d15e      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003976:	4b38      	ldr	r3, [pc, #224]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800397e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	005a      	lsls	r2, r3, #1
 8003984:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003986:	0011      	movs	r1, r2
 8003988:	0018      	movs	r0, r3
 800398a:	f002 fca9 	bl	80062e0 <Set_Status_Bit>
 800398e:	e051      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003990:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd faea 	bl	8000f6c <Is_CC_Status_Byte>
 8003998:	0003      	movs	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d130      	bne.n	8003a00 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 800399e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	4b33      	ldr	r3, [pc, #204]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 80039a6:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039b0:	0011      	movs	r1, r2
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fd fbac 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80039b8:	0003      	movs	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10c      	bne.n	80039d8 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b22      	ldr	r3, [pc, #136]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80039c6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	005a      	lsls	r2, r3, #1
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039ce:	0011      	movs	r1, r2
 80039d0:	0018      	movs	r0, r3
 80039d2:	f002 fc85 	bl	80062e0 <Set_Status_Bit>
 80039d6:	e02d      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80039d8:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fd fc4f 	bl	800127e <Is_OMNI_On>
 80039e0:	0003      	movs	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d126      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80039e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b18      	ldr	r3, [pc, #96]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80039ee:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	005a      	lsls	r2, r3, #1
 80039f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039f6:	0011      	movs	r1, r2
 80039f8:	0018      	movs	r0, r3
 80039fa:	f002 fc71 	bl	80062e0 <Set_Status_Bit>
 80039fe:	e019      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003a00:	4b15      	ldr	r3, [pc, #84]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7fd fb74 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d112      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003a16:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003a24:	0011      	movs	r1, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f002 fc5a 	bl	80062e0 <Set_Status_Bit>
 8003a2c:	e002      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	e000      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003a32:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003a3a:	4907      	ldr	r1, [pc, #28]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <UART2_RX_transfer_complete_callback+0x119c>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	0018      	movs	r0, r3
 8003a42:	f008 fb4f 	bl	800c0e4 <HAL_UART_Receive_DMA>
}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	200004cb 	.word	0x200004cb
 8003a54:	200004d0 	.word	0x200004d0
 8003a58:	200004dc 	.word	0x200004dc
 8003a5c:	20000c44 	.word	0x20000c44
 8003a60:	20000c3c 	.word	0x20000c3c
 8003a64:	200004ca 	.word	0x200004ca
 8003a68:	200004d1 	.word	0x200004d1
 8003a6c:	20000028 	.word	0x20000028
 8003a70:	20000c58 	.word	0x20000c58
 8003a74:	200004cc 	.word	0x200004cc
 8003a78:	20000a48 	.word	0x20000a48

08003a7c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	0002      	movs	r2, r0
 8003a84:	1dbb      	adds	r3, r7, #6
 8003a86:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8003a88:	1dbb      	adds	r3, r7, #6
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	2b80      	cmp	r3, #128	@ 0x80
 8003a8e:	d117      	bne.n	8003ac0 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d004      	beq.n	8003aa4 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003aa4:	2380      	movs	r3, #128	@ 0x80
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	23a0      	movs	r3, #160	@ 0xa0
 8003aaa:	05db      	lsls	r3, r3, #23
 8003aac:	2201      	movs	r2, #1
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f004 fcc5 	bl	800843e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2140      	movs	r1, #64	@ 0x40
 8003aba:	0018      	movs	r0, r3
 8003abc:	f004 fcbf 	bl	800843e <HAL_GPIO_WritePin>
		}
	}
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000430 	.word	0x20000430
 8003acc:	50000800 	.word	0x50000800

08003ad0 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003adc:	1dbb      	adds	r3, r7, #6
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b80      	cmp	r3, #128	@ 0x80
 8003ae2:	d000      	beq.n	8003ae6 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003ae4:	e0dd      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003ae6:	4b71      	ldr	r3, [pc, #452]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d114      	bne.n	8003b1a <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	23a0      	movs	r3, #160	@ 0xa0
 8003af6:	05db      	lsls	r3, r3, #23
 8003af8:	2200      	movs	r2, #0
 8003afa:	0018      	movs	r0, r3
 8003afc:	f004 fc9f 	bl	800843e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b00:	4b6b      	ldr	r3, [pc, #428]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f004 fc99 	bl	800843e <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003b0c:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b12:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003b18:	e0c3      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003b1a:	4b64      	ldr	r3, [pc, #400]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d114      	bne.n	8003b4e <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	23a0      	movs	r3, #160	@ 0xa0
 8003b2a:	05db      	lsls	r3, r3, #23
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f004 fc85 	bl	800843e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b34:	4b5e      	ldr	r3, [pc, #376]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	2140      	movs	r1, #64	@ 0x40
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f004 fc7f 	bl	800843e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003b40:	4b5a      	ldr	r3, [pc, #360]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b42:	2203      	movs	r2, #3
 8003b44:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b46:	4b59      	ldr	r3, [pc, #356]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b48:	2207      	movs	r2, #7
 8003b4a:	701a      	strb	r2, [r3, #0]
}
 8003b4c:	e0a9      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d114      	bne.n	8003b82 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	0099      	lsls	r1, r3, #2
 8003b5c:	23a0      	movs	r3, #160	@ 0xa0
 8003b5e:	05db      	lsls	r3, r3, #23
 8003b60:	2200      	movs	r2, #0
 8003b62:	0018      	movs	r0, r3
 8003b64:	f004 fc6b 	bl	800843e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b68:	4b51      	ldr	r3, [pc, #324]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2140      	movs	r1, #64	@ 0x40
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f004 fc65 	bl	800843e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003b74:	4b4d      	ldr	r3, [pc, #308]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b76:	2202      	movs	r2, #2
 8003b78:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	701a      	strb	r2, [r3, #0]
}
 8003b80:	e08f      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d12b      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003b8c:	4b49      	ldr	r3, [pc, #292]	@ (8003cb4 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d126      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003b96:	4b48      	ldr	r3, [pc, #288]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b98:	2120      	movs	r1, #32
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f002 fb8c 	bl	80062b8 <Get_Status_Bit>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d11e      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ba6:	2380      	movs	r3, #128	@ 0x80
 8003ba8:	0099      	lsls	r1, r3, #2
 8003baa:	23a0      	movs	r3, #160	@ 0xa0
 8003bac:	05db      	lsls	r3, r3, #23
 8003bae:	2200      	movs	r2, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f004 fc44 	bl	800843e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	2140      	movs	r1, #64	@ 0x40
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f004 fc3e 	bl	800843e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003bc8:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bca:	2207      	movs	r2, #7
 8003bcc:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003bce:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f002 fb96 	bl	8006304 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003bd8:	4b37      	ldr	r3, [pc, #220]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bda:	2140      	movs	r1, #64	@ 0x40
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f002 fb91 	bl	8006304 <Clear_Status_Bit>
 8003be2:	e05e      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003be4:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d12b      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003bee:	4b31      	ldr	r3, [pc, #196]	@ (8003cb4 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d126      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f002 fb5b 	bl	80062b8 <Get_Status_Bit>
 8003c02:	0003      	movs	r3, r0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d11e      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	0099      	lsls	r1, r3, #2
 8003c0c:	23a0      	movs	r3, #160	@ 0xa0
 8003c0e:	05db      	lsls	r3, r3, #23
 8003c10:	2200      	movs	r2, #0
 8003c12:	0018      	movs	r0, r3
 8003c14:	f004 fc13 	bl	800843e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	2140      	movs	r1, #64	@ 0x40
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f004 fc0d 	bl	800843e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003c24:	4b21      	ldr	r3, [pc, #132]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c26:	2208      	movs	r2, #8
 8003c28:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003c30:	4b21      	ldr	r3, [pc, #132]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003c32:	2120      	movs	r1, #32
 8003c34:	0018      	movs	r0, r3
 8003c36:	f002 fb65 	bl	8006304 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003c3c:	2140      	movs	r1, #64	@ 0x40
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f002 fb60 	bl	8006304 <Clear_Status_Bit>
 8003c44:	e02d      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003c46:	4b19      	ldr	r3, [pc, #100]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	d114      	bne.n	8003c7a <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	0099      	lsls	r1, r3, #2
 8003c54:	23a0      	movs	r3, #160	@ 0xa0
 8003c56:	05db      	lsls	r3, r3, #23
 8003c58:	2200      	movs	r2, #0
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f004 fbef 	bl	800843e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	2140      	movs	r1, #64	@ 0x40
 8003c66:	0018      	movs	r0, r3
 8003c68:	f004 fbe9 	bl	800843e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c6e:	2207      	movs	r2, #7
 8003c70:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c74:	2206      	movs	r2, #6
 8003c76:	701a      	strb	r2, [r3, #0]
}
 8003c78:	e013      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d10e      	bne.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	23a0      	movs	r3, #160	@ 0xa0
 8003c8a:	05db      	lsls	r3, r3, #23
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f004 fbd5 	bl	800843e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c94:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f004 fbcf 	bl	800843e <HAL_GPIO_WritePin>
}
 8003ca0:	e7ff      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	20000430 	.word	0x20000430
 8003cb0:	50000800 	.word	0x50000800
 8003cb4:	20000444 	.word	0x20000444
 8003cb8:	20000c3c 	.word	0x20000c3c

08003cbc <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};
	static volatile enum Validate preset_save_mode_is_inactive = YES;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003cc4:	250f      	movs	r5, #15
 8003cc6:	197c      	adds	r4, r7, r5
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	00da      	lsls	r2, r3, #3
 8003ccc:	23a0      	movs	r3, #160	@ 0xa0
 8003cce:	05db      	lsls	r3, r3, #23
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f004 fb96 	bl	8008404 <HAL_GPIO_ReadPin>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	7023      	strb	r3, [r4, #0]

	if(preset_save_mode_is_inactive == YES){
 8003cdc:	4bc2      	ldr	r3, [pc, #776]	@ (8003fe8 <LPTIM1_callback+0x32c>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d000      	beq.n	8003ce8 <LPTIM1_callback+0x2c>
 8003ce6:	e1a2      	b.n	800402e <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003ce8:	4bc0      	ldr	r3, [pc, #768]	@ (8003fec <LPTIM1_callback+0x330>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d10a      	bne.n	8003d08 <LPTIM1_callback+0x4c>
 8003cf2:	197b      	adds	r3, r7, r5
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003cfa:	4bbc      	ldr	r3, [pc, #752]	@ (8003fec <LPTIM1_callback+0x330>)
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003d00:	4bba      	ldr	r3, [pc, #744]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	705a      	strb	r2, [r3, #1]
 8003d06:	e070      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003d08:	4bb8      	ldr	r3, [pc, #736]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d10b      	bne.n	8003d2a <LPTIM1_callback+0x6e>
 8003d12:	230f      	movs	r3, #15
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d1c:	4bb3      	ldr	r3, [pc, #716]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d1e:	2205      	movs	r2, #5
 8003d20:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003d22:	4bb2      	ldr	r3, [pc, #712]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d24:	2202      	movs	r2, #2
 8003d26:	705a      	strb	r2, [r3, #1]
 8003d28:	e05f      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003d2a:	4bb0      	ldr	r3, [pc, #704]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d10b      	bne.n	8003d4c <LPTIM1_callback+0x90>
 8003d34:	230f      	movs	r3, #15
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d3e:	4bab      	ldr	r3, [pc, #684]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d40:	2205      	movs	r2, #5
 8003d42:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003d44:	4ba9      	ldr	r3, [pc, #676]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d46:	2203      	movs	r2, #3
 8003d48:	705a      	strb	r2, [r3, #1]
 8003d4a:	e04e      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003d4c:	4ba7      	ldr	r3, [pc, #668]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d122      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d56:	230f      	movs	r3, #15
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d60:	4ba3      	ldr	r3, [pc, #652]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d6a:	4ba2      	ldr	r3, [pc, #648]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d6c:	2120      	movs	r1, #32
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f002 faa2 	bl	80062b8 <Get_Status_Bit>
 8003d74:	0003      	movs	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d110      	bne.n	8003d9c <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d7a:	4b9c      	ldr	r3, [pc, #624]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003d80:	4b9a      	ldr	r3, [pc, #616]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d82:	2206      	movs	r2, #6
 8003d84:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003d86:	4b9b      	ldr	r3, [pc, #620]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d88:	2120      	movs	r1, #32
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f002 faba 	bl	8006304 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003d90:	4b98      	ldr	r3, [pc, #608]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d92:	2140      	movs	r1, #64	@ 0x40
 8003d94:	0018      	movs	r0, r3
 8003d96:	f002 fab5 	bl	8006304 <Clear_Status_Bit>
 8003d9a:	e026      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003d9c:	4b93      	ldr	r3, [pc, #588]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d121      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003da6:	230f      	movs	r3, #15
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11c      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003db0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d117      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003dba:	4b8e      	ldr	r3, [pc, #568]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f002 fa7a 	bl	80062b8 <Get_Status_Bit>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10f      	bne.n	8003dea <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003dca:	4b88      	ldr	r3, [pc, #544]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dcc:	2205      	movs	r2, #5
 8003dce:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003dd0:	4b86      	ldr	r3, [pc, #536]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003dd6:	4b87      	ldr	r3, [pc, #540]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003dd8:	2120      	movs	r1, #32
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f002 fa92 	bl	8006304 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003de0:	4b84      	ldr	r3, [pc, #528]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003de2:	2140      	movs	r1, #64	@ 0x40
 8003de4:	0018      	movs	r0, r3
 8003de6:	f002 fa8d 	bl	8006304 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003dea:	4b80      	ldr	r3, [pc, #512]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d004      	beq.n	8003dfe <LPTIM1_callback+0x142>
 8003df4:	4b7d      	ldr	r3, [pc, #500]	@ (8003fec <LPTIM1_callback+0x330>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d11a      	bne.n	8003e34 <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff8 <LPTIM1_callback+0x33c>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d108      	bne.n	8003e1a <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	0099      	lsls	r1, r3, #2
 8003e0c:	23a0      	movs	r3, #160	@ 0xa0
 8003e0e:	05db      	lsls	r3, r3, #23
 8003e10:	2200      	movs	r2, #0
 8003e12:	0018      	movs	r0, r3
 8003e14:	f004 fb13 	bl	800843e <HAL_GPIO_WritePin>
 8003e18:	e00c      	b.n	8003e34 <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003e1a:	4b77      	ldr	r3, [pc, #476]	@ (8003ff8 <LPTIM1_callback+0x33c>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	0099      	lsls	r1, r3, #2
 8003e28:	23a0      	movs	r3, #160	@ 0xa0
 8003e2a:	05db      	lsls	r3, r3, #23
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f004 fb05 	bl	800843e <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003e34:	2380      	movs	r3, #128	@ 0x80
 8003e36:	011a      	lsls	r2, r3, #4
 8003e38:	4b6e      	ldr	r3, [pc, #440]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f002 fa3b 	bl	80062b8 <Get_Status_Bit>
 8003e42:	0003      	movs	r3, r0
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d000      	beq.n	8003e4a <LPTIM1_callback+0x18e>
 8003e48:	e0c0      	b.n	8003fcc <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	4b69      	ldr	r3, [pc, #420]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f002 fa56 	bl	8006304 <Clear_Status_Bit>

			pots_counter = 0;
 8003e58:	4b68      	ldr	r3, [pc, #416]	@ (8003ffc <LPTIM1_callback+0x340>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003e5e:	4b63      	ldr	r3, [pc, #396]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d004      	beq.n	8003e72 <LPTIM1_callback+0x1b6>
 8003e68:	4b60      	ldr	r3, [pc, #384]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d105      	bne.n	8003e7e <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e72:	4b63      	ldr	r3, [pc, #396]	@ (8004000 <LPTIM1_callback+0x344>)
 8003e74:	2101      	movs	r1, #1
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7fd faf8 	bl	800146c <Pot_Check>
 8003e7c:	e069      	b.n	8003f52 <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d117      	bne.n	8003eb8 <LPTIM1_callback+0x1fc>
 8003e88:	4b59      	ldr	r3, [pc, #356]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d112      	bne.n	8003eb8 <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e92:	4b58      	ldr	r3, [pc, #352]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e94:	2140      	movs	r1, #64	@ 0x40
 8003e96:	0018      	movs	r0, r3
 8003e98:	f002 fa22 	bl	80062e0 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e9c:	4b55      	ldr	r3, [pc, #340]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e9e:	2120      	movs	r1, #32
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f002 fa09 	bl	80062b8 <Get_Status_Bit>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d152      	bne.n	8003f52 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003eac:	4b54      	ldr	r3, [pc, #336]	@ (8004000 <LPTIM1_callback+0x344>)
 8003eae:	2101      	movs	r1, #1
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7fd fadb 	bl	800146c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003eb6:	e04c      	b.n	8003f52 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003fec <LPTIM1_callback+0x330>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d12b      	bne.n	8003f1a <LPTIM1_callback+0x25e>
 8003ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d126      	bne.n	8003f1a <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ecc:	4b49      	ldr	r3, [pc, #292]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003ece:	2140      	movs	r1, #64	@ 0x40
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f002 fa05 	bl	80062e0 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003ed6:	4b47      	ldr	r3, [pc, #284]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003ed8:	2120      	movs	r1, #32
 8003eda:	0018      	movs	r0, r3
 8003edc:	f002 f9ec 	bl	80062b8 <Get_Status_Bit>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d135      	bne.n	8003f52 <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	0099      	lsls	r1, r3, #2
 8003eea:	23a0      	movs	r3, #160	@ 0xa0
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	2201      	movs	r2, #1
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f004 faa4 	bl	800843e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003ef6:	4b43      	ldr	r3, [pc, #268]	@ (8004004 <LPTIM1_callback+0x348>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2140      	movs	r1, #64	@ 0x40
 8003efc:	0018      	movs	r0, r3
 8003efe:	f004 fa9e 	bl	800843e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <LPTIM1_callback+0x34c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 8003f08:	4b40      	ldr	r3, [pc, #256]	@ (800400c <LPTIM1_callback+0x350>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fd faaa 	bl	800146c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f18:	e01b      	b.n	8003f52 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003f1a:	4b34      	ldr	r3, [pc, #208]	@ (8003fec <LPTIM1_callback+0x330>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d116      	bne.n	8003f52 <LPTIM1_callback+0x296>
 8003f24:	4b32      	ldr	r3, [pc, #200]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d111      	bne.n	8003f52 <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003f2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003f30:	2140      	movs	r1, #64	@ 0x40
 8003f32:	0018      	movs	r0, r3
 8003f34:	f002 f9d4 	bl	80062e0 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f38:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f002 f9bb 	bl	80062b8 <Get_Status_Bit>
 8003f42:	0003      	movs	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d104      	bne.n	8003f52 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f48:	4b2d      	ldr	r3, [pc, #180]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fd fa8d 	bl	800146c <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003f52:	4b2f      	ldr	r3, [pc, #188]	@ (8004010 <LPTIM1_callback+0x354>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d004      	beq.n	8003f66 <LPTIM1_callback+0x2aa>
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <LPTIM1_callback+0x354>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d104      	bne.n	8003f70 <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003f66:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f68:	2100      	movs	r1, #0
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fd fa7e 	bl	800146c <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003f70:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <LPTIM1_callback+0x358>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d004      	beq.n	8003f84 <LPTIM1_callback+0x2c8>
 8003f7a:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <LPTIM1_callback+0x358>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d104      	bne.n	8003f8e <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003f84:	4b1e      	ldr	r3, [pc, #120]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f86:	2102      	movs	r1, #2
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fd fa6f 	bl	800146c <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003f8e:	4b22      	ldr	r3, [pc, #136]	@ (8004018 <LPTIM1_callback+0x35c>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d004      	beq.n	8003fa2 <LPTIM1_callback+0x2e6>
 8003f98:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <LPTIM1_callback+0x35c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d104      	bne.n	8003fac <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003fa2:	4b17      	ldr	r3, [pc, #92]	@ (8004000 <LPTIM1_callback+0x344>)
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fd fa60 	bl	800146c <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003fac:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <LPTIM1_callback+0x360>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d004      	beq.n	8003fc0 <LPTIM1_callback+0x304>
 8003fb6:	4b19      	ldr	r3, [pc, #100]	@ (800401c <LPTIM1_callback+0x360>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d136      	bne.n	800402e <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004000 <LPTIM1_callback+0x344>)
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fd fa51 	bl	800146c <Pot_Check>
 8003fca:	e030      	b.n	800402e <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <LPTIM1_callback+0x340>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b40      	cmp	r3, #64	@ 0x40
 8003fd4:	d124      	bne.n	8004020 <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003fdc:	0011      	movs	r1, r2
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f002 f97e 	bl	80062e0 <Set_Status_Bit>
 8003fe4:	e023      	b.n	800402e <LPTIM1_callback+0x372>
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	20000025 	.word	0x20000025
 8003fec:	20000430 	.word	0x20000430
 8003ff0:	20000444 	.word	0x20000444
 8003ff4:	20000c3c 	.word	0x20000c3c
 8003ff8:	20000c28 	.word	0x20000c28
 8003ffc:	200004e2 	.word	0x200004e2
 8004000:	20000c4c 	.word	0x20000c4c
 8004004:	50000800 	.word	0x50000800
 8004008:	20000ce8 	.word	0x20000ce8
 800400c:	20000c3a 	.word	0x20000c3a
 8004010:	20000438 	.word	0x20000438
 8004014:	20000434 	.word	0x20000434
 8004018:	2000043c 	.word	0x2000043c
 800401c:	20000440 	.word	0x20000440
			}
			else{

				pots_counter++;
 8004020:	4ba8      	ldr	r3, [pc, #672]	@ (80042c4 <LPTIM1_callback+0x608>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3301      	adds	r3, #1
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4ba6      	ldr	r3, [pc, #664]	@ (80042c4 <LPTIM1_callback+0x608>)
 800402c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 800402e:	4ba6      	ldr	r3, [pc, #664]	@ (80042c8 <LPTIM1_callback+0x60c>)
 8004030:	0018      	movs	r0, r3
 8004032:	f7fd fb3b 	bl	80016ac <Check_Tap_Tempo_Switch_State>
	static enum Preset_Selected preset = PRESET_ONE;
	static enum Validate first_time = YES;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 8004036:	230e      	movs	r3, #14
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	4aa4      	ldr	r2, [pc, #656]	@ (80042cc <LPTIM1_callback+0x610>)
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	701a      	strb	r2, [r3, #0]


	if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8004040:	4ba1      	ldr	r3, [pc, #644]	@ (80042c8 <LPTIM1_callback+0x60c>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d000      	beq.n	800404c <LPTIM1_callback+0x390>
 800404a:	e0ae      	b.n	80041aa <LPTIM1_callback+0x4ee>

		if((Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == YES)
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	4b9f      	ldr	r3, [pc, #636]	@ (80042d0 <LPTIM1_callback+0x614>)
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f002 f92f 	bl	80062b8 <Get_Status_Bit>
 800405a:	0003      	movs	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d112      	bne.n	8004086 <LPTIM1_callback+0x3ca>
			&& (Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out) == NO)){
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	019a      	lsls	r2, r3, #6
 8004064:	4b9a      	ldr	r3, [pc, #616]	@ (80042d0 <LPTIM1_callback+0x614>)
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f002 f925 	bl	80062b8 <Get_Status_Bit>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d109      	bne.n	8004086 <LPTIM1_callback+0x3ca>

			Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	4b96      	ldr	r3, [pc, #600]	@ (80042d0 <LPTIM1_callback+0x614>)
 8004078:	0011      	movs	r1, r2
 800407a:	0018      	movs	r0, r3
 800407c:	f002 f942 	bl	8006304 <Clear_Status_Bit>
			advance_idle_counter = 0;
 8004080:	4b94      	ldr	r3, [pc, #592]	@ (80042d4 <LPTIM1_callback+0x618>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
		}

		if((depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 8004086:	4b94      	ldr	r3, [pc, #592]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a94      	ldr	r2, [pc, #592]	@ (80042dc <LPTIM1_callback+0x620>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d809      	bhi.n	80040a4 <LPTIM1_callback+0x3e8>
 8004090:	4b91      	ldr	r3, [pc, #580]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2bf9      	cmp	r3, #249	@ 0xf9
 8004096:	d805      	bhi.n	80040a4 <LPTIM1_callback+0x3e8>

			//save count will always be less than advance count
			depressed_num++;
 8004098:	4b8f      	ldr	r3, [pc, #572]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	4b8e      	ldr	r3, [pc, #568]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e104      	b.n	80042ae <LPTIM1_callback+0x5f2>
		}
		else if((depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 80040a4:	4b8c      	ldr	r3, [pc, #560]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a8c      	ldr	r2, [pc, #560]	@ (80042dc <LPTIM1_callback+0x620>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d824      	bhi.n	80040f8 <LPTIM1_callback+0x43c>
 80040ae:	4b8a      	ldr	r3, [pc, #552]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2bf9      	cmp	r3, #249	@ 0xf9
 80040b4:	d920      	bls.n	80040f8 <LPTIM1_callback+0x43c>

			if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out) == YES){
 80040b6:	2380      	movs	r3, #128	@ 0x80
 80040b8:	019a      	lsls	r2, r3, #6
 80040ba:	4b85      	ldr	r3, [pc, #532]	@ (80042d0 <LPTIM1_callback+0x614>)
 80040bc:	0011      	movs	r1, r2
 80040be:	0018      	movs	r0, r3
 80040c0:	f002 f8fa 	bl	80062b8 <Get_Status_Bit>
 80040c4:	0003      	movs	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d110      	bne.n	80040ec <LPTIM1_callback+0x430>

				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	4b80      	ldr	r3, [pc, #512]	@ (80042d0 <LPTIM1_callback+0x614>)
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f002 f916 	bl	8006304 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out);
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	019a      	lsls	r2, r3, #6
 80040dc:	4b7c      	ldr	r3, [pc, #496]	@ (80042d0 <LPTIM1_callback+0x614>)
 80040de:	0011      	movs	r1, r2
 80040e0:	0018      	movs	r0, r3
 80040e2:	f002 f90f 	bl	8006304 <Clear_Status_Bit>
				advance_idle_counter = 0;
 80040e6:	4b7b      	ldr	r3, [pc, #492]	@ (80042d4 <LPTIM1_callback+0x618>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
			}

			depressed_num++;
 80040ec:	4b7a      	ldr	r3, [pc, #488]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	4b79      	ldr	r3, [pc, #484]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e0da      	b.n	80042ae <LPTIM1_callback+0x5f2>
		}
		else{

			preset_save_mode_is_inactive = NO;
 80040f8:	4b79      	ldr	r3, [pc, #484]	@ (80042e0 <LPTIM1_callback+0x624>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
			depressed_num = 0;
 80040fe:	4b76      	ldr	r3, [pc, #472]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

			if(first_time == YES){
 8004104:	4b77      	ldr	r3, [pc, #476]	@ (80042e4 <LPTIM1_callback+0x628>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <LPTIM1_callback+0x460>

				first_time = NO;
 800410c:	4b75      	ldr	r3, [pc, #468]	@ (80042e4 <LPTIM1_callback+0x628>)
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
				led_state_saved = led_state;
 8004112:	4b75      	ldr	r3, [pc, #468]	@ (80042e8 <LPTIM1_callback+0x62c>)
 8004114:	220e      	movs	r2, #14
 8004116:	18ba      	adds	r2, r7, r2
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	701a      	strb	r2, [r3, #0]
			}

			if(preset == PRESET_ONE){
 800411c:	4b73      	ldr	r3, [pc, #460]	@ (80042ec <LPTIM1_callback+0x630>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d108      	bne.n	8004136 <LPTIM1_callback+0x47a>

				set_LED_to_state(&LED_fsm, LED_ONE_BLINK);
 8004124:	4b69      	ldr	r3, [pc, #420]	@ (80042cc <LPTIM1_callback+0x610>)
 8004126:	2103      	movs	r1, #3
 8004128:	0018      	movs	r0, r3
 800412a:	f7fc fe83 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_TWO;
 800412e:	4b6f      	ldr	r3, [pc, #444]	@ (80042ec <LPTIM1_callback+0x630>)
 8004130:	2202      	movs	r2, #2
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e025      	b.n	8004182 <LPTIM1_callback+0x4c6>
			}
			else if(preset == PRESET_TWO){
 8004136:	4b6d      	ldr	r3, [pc, #436]	@ (80042ec <LPTIM1_callback+0x630>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d108      	bne.n	8004150 <LPTIM1_callback+0x494>

				set_LED_to_state(&LED_fsm, LED_TWO_BLINK);
 800413e:	4b63      	ldr	r3, [pc, #396]	@ (80042cc <LPTIM1_callback+0x610>)
 8004140:	2104      	movs	r1, #4
 8004142:	0018      	movs	r0, r3
 8004144:	f7fc fe76 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_THREE;
 8004148:	4b68      	ldr	r3, [pc, #416]	@ (80042ec <LPTIM1_callback+0x630>)
 800414a:	2203      	movs	r2, #3
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e018      	b.n	8004182 <LPTIM1_callback+0x4c6>
			}
			else if(preset == PRESET_THREE){
 8004150:	4b66      	ldr	r3, [pc, #408]	@ (80042ec <LPTIM1_callback+0x630>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d108      	bne.n	800416a <LPTIM1_callback+0x4ae>

				set_LED_to_state(&LED_fsm, LED_THREE_BLINK);
 8004158:	4b5c      	ldr	r3, [pc, #368]	@ (80042cc <LPTIM1_callback+0x610>)
 800415a:	2105      	movs	r1, #5
 800415c:	0018      	movs	r0, r3
 800415e:	f7fc fe69 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_FOUR;
 8004162:	4b62      	ldr	r3, [pc, #392]	@ (80042ec <LPTIM1_callback+0x630>)
 8004164:	2204      	movs	r2, #4
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e00b      	b.n	8004182 <LPTIM1_callback+0x4c6>
			}
			else if(preset == PRESET_FOUR){
 800416a:	4b60      	ldr	r3, [pc, #384]	@ (80042ec <LPTIM1_callback+0x630>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <LPTIM1_callback+0x4c6>

				set_LED_to_state(&LED_fsm, LED_FOUR_BLINK);
 8004172:	4b56      	ldr	r3, [pc, #344]	@ (80042cc <LPTIM1_callback+0x610>)
 8004174:	2106      	movs	r1, #6
 8004176:	0018      	movs	r0, r3
 8004178:	f7fc fe5c 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_ONE;
 800417c:	4b5b      	ldr	r3, [pc, #364]	@ (80042ec <LPTIM1_callback+0x630>)
 800417e:	2201      	movs	r2, #1
 8004180:	701a      	strb	r2, [r3, #0]
			}

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004182:	4b5b      	ldr	r3, [pc, #364]	@ (80042f0 <LPTIM1_callback+0x634>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b05      	cmp	r3, #5
 800418a:	d000      	beq.n	800418e <LPTIM1_callback+0x4d2>
 800418c:	e08f      	b.n	80042ae <LPTIM1_callback+0x5f2>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 800418e:	210c      	movs	r1, #12
 8004190:	187b      	adds	r3, r7, r1
 8004192:	4a57      	ldr	r2, [pc, #348]	@ (80042f0 <LPTIM1_callback+0x634>)
 8004194:	7812      	ldrb	r2, [r2, #0]
 8004196:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 8004198:	4b55      	ldr	r3, [pc, #340]	@ (80042f0 <LPTIM1_callback+0x634>)
 800419a:	4a55      	ldr	r2, [pc, #340]	@ (80042f0 <LPTIM1_callback+0x634>)
 800419c:	7852      	ldrb	r2, [r2, #1]
 800419e:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 80041a0:	4b53      	ldr	r3, [pc, #332]	@ (80042f0 <LPTIM1_callback+0x634>)
 80041a2:	187a      	adds	r2, r7, r1
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	705a      	strb	r2, [r3, #1]
 80041a8:	e081      	b.n	80042ae <LPTIM1_callback+0x5f2>
			}
		}
	}
	else{

		if((preset_save_mode_is_inactive == NO) && (depressed_num == 0)){ //timer only start counting if footswitch has been held down and released
 80041aa:	4b4d      	ldr	r3, [pc, #308]	@ (80042e0 <LPTIM1_callback+0x624>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d119      	bne.n	80041e8 <LPTIM1_callback+0x52c>
 80041b4:	4b48      	ldr	r3, [pc, #288]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d115      	bne.n	80041e8 <LPTIM1_callback+0x52c>

			if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == NO){
 80041bc:	2380      	movs	r3, #128	@ 0x80
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	4b43      	ldr	r3, [pc, #268]	@ (80042d0 <LPTIM1_callback+0x614>)
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f002 f877 	bl	80062b8 <Get_Status_Bit>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d10c      	bne.n	80041e8 <LPTIM1_callback+0x52c>

				Set_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 80041ce:	2380      	movs	r3, #128	@ 0x80
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	4b3f      	ldr	r3, [pc, #252]	@ (80042d0 <LPTIM1_callback+0x614>)
 80041d4:	0011      	movs	r1, r2
 80041d6:	0018      	movs	r0, r3
 80041d8:	f002 f882 	bl	80062e0 <Set_Status_Bit>

				//debug
				HAL_GPIO_WritePin(MONITOR_2_GPIO_Port, MONITOR_2_Pin, 1);
 80041dc:	4b45      	ldr	r3, [pc, #276]	@ (80042f4 <LPTIM1_callback+0x638>)
 80041de:	2201      	movs	r2, #1
 80041e0:	2110      	movs	r1, #16
 80041e2:	0018      	movs	r0, r3
 80041e4:	f004 f92b 	bl	800843e <HAL_GPIO_WritePin>
				//debug end
			}
		}

		if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out) == YES){
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	019a      	lsls	r2, r3, #6
 80041ec:	4b38      	ldr	r3, [pc, #224]	@ (80042d0 <LPTIM1_callback+0x614>)
 80041ee:	0011      	movs	r1, r2
 80041f0:	0018      	movs	r0, r3
 80041f2:	f002 f861 	bl	80062b8 <Get_Status_Bit>
 80041f6:	0003      	movs	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d155      	bne.n	80042a8 <LPTIM1_callback+0x5ec>

			//don't clear timeout flag here

			//debug
			HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
 80041fc:	4b3d      	ldr	r3, [pc, #244]	@ (80042f4 <LPTIM1_callback+0x638>)
 80041fe:	2201      	movs	r2, #1
 8004200:	2140      	movs	r1, #64	@ 0x40
 8004202:	0018      	movs	r0, r3
 8004204:	f004 f91b 	bl	800843e <HAL_GPIO_WritePin>
			//debug end

			if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)
 8004208:	4b33      	ldr	r3, [pc, #204]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2bf9      	cmp	r3, #249	@ 0xf9
 800420e:	d94b      	bls.n	80042a8 <LPTIM1_callback+0x5ec>
				&& (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT)){
 8004210:	4b31      	ldr	r3, [pc, #196]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a31      	ldr	r2, [pc, #196]	@ (80042dc <LPTIM1_callback+0x620>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d846      	bhi.n	80042a8 <LPTIM1_callback+0x5ec>

				//led confirm - overwrite prev state with saved state
				LED_fsm.prev_state = led_state_saved;
 800421a:	4b33      	ldr	r3, [pc, #204]	@ (80042e8 <LPTIM1_callback+0x62c>)
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	4b2b      	ldr	r3, [pc, #172]	@ (80042cc <LPTIM1_callback+0x610>)
 8004220:	705a      	strb	r2, [r3, #1]
				set_LED_to_state(&LED_fsm, LED_CONFIRM);
 8004222:	4b2a      	ldr	r3, [pc, #168]	@ (80042cc <LPTIM1_callback+0x610>)
 8004224:	2107      	movs	r1, #7
 8004226:	0018      	movs	r0, r3
 8004228:	f7fc fe04 	bl	8000e34 <set_LED_to_state>

				//reset
				first_time = YES;
 800422c:	4b2d      	ldr	r3, [pc, #180]	@ (80042e4 <LPTIM1_callback+0x628>)
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
				preset_save_mode_is_inactive = YES;
 8004232:	4b2b      	ldr	r3, [pc, #172]	@ (80042e0 <LPTIM1_callback+0x624>)
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]

				//get correct preset, as it will be 'off by one'
				if(preset == PRESET_ONE){
 8004238:	4b2c      	ldr	r3, [pc, #176]	@ (80042ec <LPTIM1_callback+0x630>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d103      	bne.n	8004248 <LPTIM1_callback+0x58c>

					preset = PRESET_FOUR;
 8004240:	4b2a      	ldr	r3, [pc, #168]	@ (80042ec <LPTIM1_callback+0x630>)
 8004242:	2204      	movs	r2, #4
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e016      	b.n	8004276 <LPTIM1_callback+0x5ba>
				}
				else if(preset == PRESET_TWO){
 8004248:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <LPTIM1_callback+0x630>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d103      	bne.n	8004258 <LPTIM1_callback+0x59c>

					preset = PRESET_ONE;
 8004250:	4b26      	ldr	r3, [pc, #152]	@ (80042ec <LPTIM1_callback+0x630>)
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e00e      	b.n	8004276 <LPTIM1_callback+0x5ba>
				}
				else if(preset == PRESET_THREE){
 8004258:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <LPTIM1_callback+0x630>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d103      	bne.n	8004268 <LPTIM1_callback+0x5ac>

					preset = PRESET_TWO;
 8004260:	4b22      	ldr	r3, [pc, #136]	@ (80042ec <LPTIM1_callback+0x630>)
 8004262:	2202      	movs	r2, #2
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e006      	b.n	8004276 <LPTIM1_callback+0x5ba>
				}
				else if(preset == PRESET_FOUR){
 8004268:	4b20      	ldr	r3, [pc, #128]	@ (80042ec <LPTIM1_callback+0x630>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d102      	bne.n	8004276 <LPTIM1_callback+0x5ba>

					preset = PRESET_THREE;
 8004270:	4b1e      	ldr	r3, [pc, #120]	@ (80042ec <LPTIM1_callback+0x630>)
 8004272:	2203      	movs	r2, #3
 8004274:	701a      	strb	r2, [r3, #0]
				}

				//convert running params to preset, and update user preset and user preset used
				Store_Params_as_User_Preset(preset,
 8004276:	4b1d      	ldr	r3, [pc, #116]	@ (80042ec <LPTIM1_callback+0x630>)
 8004278:	7818      	ldrb	r0, [r3, #0]
 800427a:	4c1f      	ldr	r4, [pc, #124]	@ (80042f8 <LPTIM1_callback+0x63c>)
 800427c:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <LPTIM1_callback+0x640>)
 800427e:	4920      	ldr	r1, [pc, #128]	@ (8004300 <LPTIM1_callback+0x644>)
 8004280:	4b20      	ldr	r3, [pc, #128]	@ (8004304 <LPTIM1_callback+0x648>)
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	4b20      	ldr	r3, [pc, #128]	@ (8004308 <LPTIM1_callback+0x64c>)
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	0023      	movs	r3, r4
 800428a:	f7fc fda5 	bl	8000dd8 <Store_Params_as_User_Preset>
											user_presets_array,
											factory_presets_array,
											presets_converted_array);

				//set the current pot mode to PC_MODE and update current preset active
				Set_All_Pots_to_PC_Mode();
 800428e:	f7fc fd6b 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
				preset_selected = preset;
 8004292:	4b16      	ldr	r3, [pc, #88]	@ (80042ec <LPTIM1_callback+0x630>)
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <LPTIM1_callback+0x650>)
 8004298:	701a      	strb	r2, [r3, #0]

				//store presets in flash
				//@TODO

				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out);
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	019a      	lsls	r2, r3, #6
 800429e:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <LPTIM1_callback+0x614>)
 80042a0:	0011      	movs	r1, r2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f002 f82e 	bl	8006304 <Clear_Status_Bit>
			}
		}

		depressed_num = 0; //important if switch is released early
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80042ae:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <LPTIM1_callback+0x654>)
 80042b0:	22fa      	movs	r2, #250	@ 0xfa
 80042b2:	21fa      	movs	r1, #250	@ 0xfa
 80042b4:	0018      	movs	r0, r3
 80042b6:	f004 f9b9 	bl	800862c <HAL_LPTIM_SetOnce_Start_IT>

}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bdb0      	pop	{r4, r5, r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	200004e2 	.word	0x200004e2
 80042c8:	20000c28 	.word	0x20000c28
 80042cc:	20000448 	.word	0x20000448
 80042d0:	20000c3c 	.word	0x20000c3c
 80042d4:	20000c48 	.word	0x20000c48
 80042d8:	20000c2c 	.word	0x20000c2c
 80042dc:	000009c3 	.word	0x000009c3
 80042e0:	20000025 	.word	0x20000025
 80042e4:	20000026 	.word	0x20000026
 80042e8:	20000c30 	.word	0x20000c30
 80042ec:	20000027 	.word	0x20000027
 80042f0:	20000430 	.word	0x20000430
 80042f4:	50000400 	.word	0x50000400
 80042f8:	20000484 	.word	0x20000484
 80042fc:	200004c0 	.word	0x200004c0
 8004300:	20000c58 	.word	0x20000c58
 8004304:	20000494 	.word	0x20000494
 8004308:	20000474 	.word	0x20000474
 800430c:	200004bc 	.word	0x200004bc
 8004310:	20000bcc 	.word	0x20000bcc

08004314 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]


}
 800431c:	46c0      	nop			@ (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}

08004324 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 800432c:	4bd1      	ldr	r3, [pc, #836]	@ (8004674 <TIM14_callback+0x350>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d106      	bne.n	8004344 <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004336:	4bd0      	ldr	r3, [pc, #832]	@ (8004678 <TIM14_callback+0x354>)
 8004338:	2201      	movs	r2, #1
 800433a:	2140      	movs	r1, #64	@ 0x40
 800433c:	0018      	movs	r0, r3
 800433e:	f004 f87e 	bl	800843e <HAL_GPIO_WritePin>

				set_LED_to_state(&LED_fsm, prev);
			}
		}
	}
}
 8004342:	e1c3      	b.n	80046cc <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 8004344:	4bcb      	ldr	r3, [pc, #812]	@ (8004674 <TIM14_callback+0x350>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d106      	bne.n	800435c <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800434e:	4bca      	ldr	r3, [pc, #808]	@ (8004678 <TIM14_callback+0x354>)
 8004350:	2200      	movs	r2, #0
 8004352:	2140      	movs	r1, #64	@ 0x40
 8004354:	0018      	movs	r0, r3
 8004356:	f004 f872 	bl	800843e <HAL_GPIO_WritePin>
}
 800435a:	e1b7      	b.n	80046cc <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 800435c:	4bc5      	ldr	r3, [pc, #788]	@ (8004674 <TIM14_callback+0x350>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b03      	cmp	r3, #3
 8004364:	d133      	bne.n	80043ce <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004366:	4bc5      	ldr	r3, [pc, #788]	@ (800467c <TIM14_callback+0x358>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 800436e:	4bc4      	ldr	r3, [pc, #784]	@ (8004680 <TIM14_callback+0x35c>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004378:	4bbf      	ldr	r3, [pc, #764]	@ (8004678 <TIM14_callback+0x354>)
 800437a:	2201      	movs	r2, #1
 800437c:	2140      	movs	r1, #64	@ 0x40
 800437e:	0018      	movs	r0, r3
 8004380:	f004 f85d 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 8004384:	4bbe      	ldr	r3, [pc, #760]	@ (8004680 <TIM14_callback+0x35c>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	3301      	adds	r3, #1
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4bbc      	ldr	r3, [pc, #752]	@ (8004680 <TIM14_callback+0x35c>)
 8004390:	701a      	strb	r2, [r3, #0]
}
 8004392:	e19b      	b.n	80046cc <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 8004394:	4bba      	ldr	r3, [pc, #744]	@ (8004680 <TIM14_callback+0x35c>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b04      	cmp	r3, #4
 800439c:	d900      	bls.n	80043a0 <TIM14_callback+0x7c>
 800439e:	e195      	b.n	80046cc <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80043a0:	4bb5      	ldr	r3, [pc, #724]	@ (8004678 <TIM14_callback+0x354>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	2140      	movs	r1, #64	@ 0x40
 80043a6:	0018      	movs	r0, r3
 80043a8:	f004 f849 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 80043ac:	4bb4      	ldr	r3, [pc, #720]	@ (8004680 <TIM14_callback+0x35c>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	4bb2      	ldr	r3, [pc, #712]	@ (8004680 <TIM14_callback+0x35c>)
 80043b8:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 80043ba:	4bb1      	ldr	r3, [pc, #708]	@ (8004680 <TIM14_callback+0x35c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d000      	beq.n	80043c6 <TIM14_callback+0xa2>
 80043c4:	e182      	b.n	80046cc <TIM14_callback+0x3a8>
				LED_counter = 0;
 80043c6:	4bae      	ldr	r3, [pc, #696]	@ (8004680 <TIM14_callback+0x35c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
}
 80043cc:	e17e      	b.n	80046cc <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 80043ce:	4ba9      	ldr	r3, [pc, #676]	@ (8004674 <TIM14_callback+0x350>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d156      	bne.n	8004486 <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80043d8:	4ba8      	ldr	r3, [pc, #672]	@ (800467c <TIM14_callback+0x358>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2200      	movs	r2, #0
 80043de:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 80043e0:	4ba7      	ldr	r3, [pc, #668]	@ (8004680 <TIM14_callback+0x35c>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d815      	bhi.n	8004416 <TIM14_callback+0xf2>
 80043ea:	4ba5      	ldr	r3, [pc, #660]	@ (8004680 <TIM14_callback+0x35c>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2201      	movs	r2, #1
 80043f2:	4013      	ands	r3, r2
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10d      	bne.n	8004416 <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80043fa:	4b9f      	ldr	r3, [pc, #636]	@ (8004678 <TIM14_callback+0x354>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	2140      	movs	r1, #64	@ 0x40
 8004400:	0018      	movs	r0, r3
 8004402:	f004 f81c 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 8004406:	4b9e      	ldr	r3, [pc, #632]	@ (8004680 <TIM14_callback+0x35c>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3301      	adds	r3, #1
 800440e:	b2da      	uxtb	r2, r3
 8004410:	4b9b      	ldr	r3, [pc, #620]	@ (8004680 <TIM14_callback+0x35c>)
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e15a      	b.n	80046cc <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 8004416:	4b9a      	ldr	r3, [pc, #616]	@ (8004680 <TIM14_callback+0x35c>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d815      	bhi.n	800444c <TIM14_callback+0x128>
 8004420:	4b97      	ldr	r3, [pc, #604]	@ (8004680 <TIM14_callback+0x35c>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2201      	movs	r2, #1
 8004428:	4013      	ands	r3, r2
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10d      	bne.n	800444c <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004430:	4b91      	ldr	r3, [pc, #580]	@ (8004678 <TIM14_callback+0x354>)
 8004432:	2200      	movs	r2, #0
 8004434:	2140      	movs	r1, #64	@ 0x40
 8004436:	0018      	movs	r0, r3
 8004438:	f004 f801 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 800443c:	4b90      	ldr	r3, [pc, #576]	@ (8004680 <TIM14_callback+0x35c>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	3301      	adds	r3, #1
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4b8e      	ldr	r3, [pc, #568]	@ (8004680 <TIM14_callback+0x35c>)
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	e13f      	b.n	80046cc <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 800444c:	4b8c      	ldr	r3, [pc, #560]	@ (8004680 <TIM14_callback+0x35c>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b06      	cmp	r3, #6
 8004454:	d900      	bls.n	8004458 <TIM14_callback+0x134>
 8004456:	e139      	b.n	80046cc <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004458:	4b87      	ldr	r3, [pc, #540]	@ (8004678 <TIM14_callback+0x354>)
 800445a:	2200      	movs	r2, #0
 800445c:	2140      	movs	r1, #64	@ 0x40
 800445e:	0018      	movs	r0, r3
 8004460:	f003 ffed 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 8004464:	4b86      	ldr	r3, [pc, #536]	@ (8004680 <TIM14_callback+0x35c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	3301      	adds	r3, #1
 800446c:	b2da      	uxtb	r2, r3
 800446e:	4b84      	ldr	r3, [pc, #528]	@ (8004680 <TIM14_callback+0x35c>)
 8004470:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8004472:	4b83      	ldr	r3, [pc, #524]	@ (8004680 <TIM14_callback+0x35c>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b07      	cmp	r3, #7
 800447a:	d000      	beq.n	800447e <TIM14_callback+0x15a>
 800447c:	e126      	b.n	80046cc <TIM14_callback+0x3a8>
				LED_counter = 0;
 800447e:	4b80      	ldr	r3, [pc, #512]	@ (8004680 <TIM14_callback+0x35c>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
}
 8004484:	e122      	b.n	80046cc <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 8004486:	4b7b      	ldr	r3, [pc, #492]	@ (8004674 <TIM14_callback+0x350>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b05      	cmp	r3, #5
 800448e:	d156      	bne.n	800453e <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004490:	4b7a      	ldr	r3, [pc, #488]	@ (800467c <TIM14_callback+0x358>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2200      	movs	r2, #0
 8004496:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8004498:	4b79      	ldr	r3, [pc, #484]	@ (8004680 <TIM14_callback+0x35c>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d815      	bhi.n	80044ce <TIM14_callback+0x1aa>
 80044a2:	4b77      	ldr	r3, [pc, #476]	@ (8004680 <TIM14_callback+0x35c>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2201      	movs	r2, #1
 80044aa:	4013      	ands	r3, r2
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80044b2:	4b71      	ldr	r3, [pc, #452]	@ (8004678 <TIM14_callback+0x354>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	2140      	movs	r1, #64	@ 0x40
 80044b8:	0018      	movs	r0, r3
 80044ba:	f003 ffc0 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 80044be:	4b70      	ldr	r3, [pc, #448]	@ (8004680 <TIM14_callback+0x35c>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3301      	adds	r3, #1
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004680 <TIM14_callback+0x35c>)
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e0fe      	b.n	80046cc <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 80044ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004680 <TIM14_callback+0x35c>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d815      	bhi.n	8004504 <TIM14_callback+0x1e0>
 80044d8:	4b69      	ldr	r3, [pc, #420]	@ (8004680 <TIM14_callback+0x35c>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2201      	movs	r2, #1
 80044e0:	4013      	ands	r3, r2
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10d      	bne.n	8004504 <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044e8:	4b63      	ldr	r3, [pc, #396]	@ (8004678 <TIM14_callback+0x354>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	2140      	movs	r1, #64	@ 0x40
 80044ee:	0018      	movs	r0, r3
 80044f0:	f003 ffa5 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 80044f4:	4b62      	ldr	r3, [pc, #392]	@ (8004680 <TIM14_callback+0x35c>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4b60      	ldr	r3, [pc, #384]	@ (8004680 <TIM14_callback+0x35c>)
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e0e3      	b.n	80046cc <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 8004504:	4b5e      	ldr	r3, [pc, #376]	@ (8004680 <TIM14_callback+0x35c>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b08      	cmp	r3, #8
 800450c:	d900      	bls.n	8004510 <TIM14_callback+0x1ec>
 800450e:	e0dd      	b.n	80046cc <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004510:	4b59      	ldr	r3, [pc, #356]	@ (8004678 <TIM14_callback+0x354>)
 8004512:	2200      	movs	r2, #0
 8004514:	2140      	movs	r1, #64	@ 0x40
 8004516:	0018      	movs	r0, r3
 8004518:	f003 ff91 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 800451c:	4b58      	ldr	r3, [pc, #352]	@ (8004680 <TIM14_callback+0x35c>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3301      	adds	r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4b56      	ldr	r3, [pc, #344]	@ (8004680 <TIM14_callback+0x35c>)
 8004528:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 800452a:	4b55      	ldr	r3, [pc, #340]	@ (8004680 <TIM14_callback+0x35c>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b09      	cmp	r3, #9
 8004532:	d000      	beq.n	8004536 <TIM14_callback+0x212>
 8004534:	e0ca      	b.n	80046cc <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004536:	4b52      	ldr	r3, [pc, #328]	@ (8004680 <TIM14_callback+0x35c>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
}
 800453c:	e0c6      	b.n	80046cc <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 800453e:	4b4d      	ldr	r3, [pc, #308]	@ (8004674 <TIM14_callback+0x350>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b06      	cmp	r3, #6
 8004546:	d156      	bne.n	80045f6 <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004548:	4b4c      	ldr	r3, [pc, #304]	@ (800467c <TIM14_callback+0x358>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2200      	movs	r2, #0
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004550:	4b4b      	ldr	r3, [pc, #300]	@ (8004680 <TIM14_callback+0x35c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b06      	cmp	r3, #6
 8004558:	d815      	bhi.n	8004586 <TIM14_callback+0x262>
 800455a:	4b49      	ldr	r3, [pc, #292]	@ (8004680 <TIM14_callback+0x35c>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2201      	movs	r2, #1
 8004562:	4013      	ands	r3, r2
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10d      	bne.n	8004586 <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800456a:	4b43      	ldr	r3, [pc, #268]	@ (8004678 <TIM14_callback+0x354>)
 800456c:	2201      	movs	r2, #1
 800456e:	2140      	movs	r1, #64	@ 0x40
 8004570:	0018      	movs	r0, r3
 8004572:	f003 ff64 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 8004576:	4b42      	ldr	r3, [pc, #264]	@ (8004680 <TIM14_callback+0x35c>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	3301      	adds	r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	4b3f      	ldr	r3, [pc, #252]	@ (8004680 <TIM14_callback+0x35c>)
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e0a2      	b.n	80046cc <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004586:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <TIM14_callback+0x35c>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b06      	cmp	r3, #6
 800458e:	d815      	bhi.n	80045bc <TIM14_callback+0x298>
 8004590:	4b3b      	ldr	r3, [pc, #236]	@ (8004680 <TIM14_callback+0x35c>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2201      	movs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d10d      	bne.n	80045bc <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80045a0:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <TIM14_callback+0x354>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	2140      	movs	r1, #64	@ 0x40
 80045a6:	0018      	movs	r0, r3
 80045a8:	f003 ff49 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 80045ac:	4b34      	ldr	r3, [pc, #208]	@ (8004680 <TIM14_callback+0x35c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	3301      	adds	r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4b32      	ldr	r3, [pc, #200]	@ (8004680 <TIM14_callback+0x35c>)
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e087      	b.n	80046cc <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 80045bc:	4b30      	ldr	r3, [pc, #192]	@ (8004680 <TIM14_callback+0x35c>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b0a      	cmp	r3, #10
 80045c4:	d900      	bls.n	80045c8 <TIM14_callback+0x2a4>
 80045c6:	e081      	b.n	80046cc <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80045c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004678 <TIM14_callback+0x354>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	2140      	movs	r1, #64	@ 0x40
 80045ce:	0018      	movs	r0, r3
 80045d0:	f003 ff35 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 80045d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004680 <TIM14_callback+0x35c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3301      	adds	r3, #1
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4b28      	ldr	r3, [pc, #160]	@ (8004680 <TIM14_callback+0x35c>)
 80045e0:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 80045e2:	4b27      	ldr	r3, [pc, #156]	@ (8004680 <TIM14_callback+0x35c>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b0b      	cmp	r3, #11
 80045ea:	d000      	beq.n	80045ee <TIM14_callback+0x2ca>
 80045ec:	e06e      	b.n	80046cc <TIM14_callback+0x3a8>
				LED_counter = 0;
 80045ee:	4b24      	ldr	r3, [pc, #144]	@ (8004680 <TIM14_callback+0x35c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
}
 80045f4:	e06a      	b.n	80046cc <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 80045f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004674 <TIM14_callback+0x350>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b07      	cmp	r3, #7
 80045fe:	d165      	bne.n	80046cc <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004600:	4b1e      	ldr	r3, [pc, #120]	@ (800467c <TIM14_callback+0x358>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2200      	movs	r2, #0
 8004606:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <TIM14_callback+0x35c>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b06      	cmp	r3, #6
 8004610:	d815      	bhi.n	800463e <TIM14_callback+0x31a>
 8004612:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <TIM14_callback+0x35c>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2201      	movs	r2, #1
 800461a:	4013      	ands	r3, r2
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10d      	bne.n	800463e <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004622:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <TIM14_callback+0x354>)
 8004624:	2201      	movs	r2, #1
 8004626:	2140      	movs	r1, #64	@ 0x40
 8004628:	0018      	movs	r0, r3
 800462a:	f003 ff08 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 800462e:	4b14      	ldr	r3, [pc, #80]	@ (8004680 <TIM14_callback+0x35c>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	3301      	adds	r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <TIM14_callback+0x35c>)
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e046      	b.n	80046cc <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <TIM14_callback+0x35c>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b06      	cmp	r3, #6
 8004646:	d81d      	bhi.n	8004684 <TIM14_callback+0x360>
 8004648:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <TIM14_callback+0x35c>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2201      	movs	r2, #1
 8004650:	4013      	ands	r3, r2
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d115      	bne.n	8004684 <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004658:	4b07      	ldr	r3, [pc, #28]	@ (8004678 <TIM14_callback+0x354>)
 800465a:	2200      	movs	r2, #0
 800465c:	2140      	movs	r1, #64	@ 0x40
 800465e:	0018      	movs	r0, r3
 8004660:	f003 feed 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 8004664:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <TIM14_callback+0x35c>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	3301      	adds	r3, #1
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <TIM14_callback+0x35c>)
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	e02b      	b.n	80046cc <TIM14_callback+0x3a8>
 8004674:	20000448 	.word	0x20000448
 8004678:	50000800 	.word	0x50000800
 800467c:	200005e0 	.word	0x200005e0
 8004680:	200004c9 	.word	0x200004c9
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004684:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <TIM14_callback+0x3b0>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b0a      	cmp	r3, #10
 800468c:	d81e      	bhi.n	80046cc <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800468e:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <TIM14_callback+0x3b4>)
 8004690:	2200      	movs	r2, #0
 8004692:	2140      	movs	r1, #64	@ 0x40
 8004694:	0018      	movs	r0, r3
 8004696:	f003 fed2 	bl	800843e <HAL_GPIO_WritePin>
			LED_counter++;
 800469a:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <TIM14_callback+0x3b0>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3301      	adds	r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <TIM14_callback+0x3b0>)
 80046a6:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 80046a8:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <TIM14_callback+0x3b0>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b0b      	cmp	r3, #11
 80046b0:	d10c      	bne.n	80046cc <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 80046b2:	210f      	movs	r1, #15
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	4a09      	ldr	r2, [pc, #36]	@ (80046dc <TIM14_callback+0x3b8>)
 80046b8:	7852      	ldrb	r2, [r2, #1]
 80046ba:	701a      	strb	r2, [r3, #0]
				set_LED_to_state(&LED_fsm, prev);
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <TIM14_callback+0x3b8>)
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f7fc fbb5 	bl	8000e34 <set_LED_to_state>
}
 80046ca:	e7ff      	b.n	80046cc <TIM14_callback+0x3a8>
 80046cc:	46c0      	nop			@ (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	200004c9 	.word	0x200004c9
 80046d8:	50000800 	.word	0x50000800
 80046dc:	20000448 	.word	0x20000448

080046e0 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	0002      	movs	r2, r0
 80046e8:	6039      	str	r1, [r7, #0]
 80046ea:	1dbb      	adds	r3, r7, #6
 80046ec:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 80046ee:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <Input_Capture_Processing+0xe0>)
 80046f0:	2104      	movs	r1, #4
 80046f2:	0018      	movs	r0, r3
 80046f4:	f001 fe06 	bl	8006304 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 80046f8:	1dbb      	adds	r3, r7, #6
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	0018      	movs	r0, r3
 8004700:	f001 fd8f 	bl	8006222 <isPrime>
 8004704:	0003      	movs	r3, r0
 8004706:	2b01      	cmp	r3, #1
 8004708:	d106      	bne.n	8004718 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 800470a:	1dbb      	adds	r3, r7, #6
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	3301      	adds	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	1dbb      	adds	r3, r7, #6
 8004716:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8004718:	1dbb      	adds	r3, r7, #6
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	019b      	lsls	r3, r3, #6
 8004720:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004722:	2317      	movs	r3, #23
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e02d      	b.n	8004788 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 800472c:	2317      	movs	r3, #23
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	2280      	movs	r2, #128	@ 0x80
 8004736:	0052      	lsls	r2, r2, #1
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	b29a      	uxth	r2, r3
 800473c:	1dbb      	adds	r3, r7, #6
 800473e:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8004740:	1dbb      	adds	r3, r7, #6
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	001a      	movs	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	0011      	movs	r1, r2
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fd5f 	bl	8000210 <__aeabi_uidivmod>
 8004752:	000b      	movs	r3, r1
 8004754:	001a      	movs	r2, r3
 8004756:	210e      	movs	r1, #14
 8004758:	187b      	adds	r3, r7, r1
 800475a:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 800475c:	187b      	adds	r3, r7, r1
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8004764:	1dbb      	adds	r3, r7, #6
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	0019      	movs	r1, r3
 800476c:	6938      	ldr	r0, [r7, #16]
 800476e:	f7fb fcc9 	bl	8000104 <__udivsi3>
 8004772:	0003      	movs	r3, r0
 8004774:	b29a      	uxth	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	835a      	strh	r2, [r3, #26]
			break;
 800477a:	e00a      	b.n	8004792 <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 800477c:	2117      	movs	r1, #23
 800477e:	187b      	adds	r3, r7, r1
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	187b      	adds	r3, r7, r1
 8004784:	3201      	adds	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	2317      	movs	r3, #23
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b80      	cmp	r3, #128	@ 0x80
 8004790:	d9cc      	bls.n	800472c <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8004792:	1dbb      	adds	r3, r7, #6
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	2280      	movs	r2, #128	@ 0x80
 800479a:	0052      	lsls	r2, r2, #1
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	b29a      	uxth	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	0018      	movs	r0, r3
 80047aa:	f000 f9f5 	bl	8004b98 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f001 f8f3 	bl	800599c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 80047b6:	2301      	movs	r3, #1
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b006      	add	sp, #24
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000c3c 	.word	0x20000c3c

080047c4 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 80047ca:	1dfc      	adds	r4, r7, #7
 80047cc:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <Start_Input_Capture_Timer+0x30>)
 80047ce:	2100      	movs	r1, #0
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 f811 	bl	80047f8 <Start_IC_TIM>
 80047d6:	0003      	movs	r3, r0
 80047d8:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80047da:	1dfb      	adds	r3, r7, #7
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 80047e2:	f7fd fdc3 	bl	800236c <Error_Handler>
	}

	return ok;
 80047e6:	1dfb      	adds	r3, r7, #7
 80047e8:	781b      	ldrb	r3, [r3, #0]
}
 80047ea:	0018      	movs	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	b003      	add	sp, #12
 80047f0:	bd90      	pop	{r4, r7, pc}
 80047f2:	46c0      	nop			@ (mov r8, r8)
 80047f4:	20000814 	.word	0x20000814

080047f8 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8004802:	250f      	movs	r5, #15
 8004804:	197c      	adds	r4, r7, r5
 8004806:	4b10      	ldr	r3, [pc, #64]	@ (8004848 <Start_IC_TIM+0x50>)
 8004808:	0018      	movs	r0, r3
 800480a:	f005 f9a9 	bl	8009b60 <HAL_TIM_Base_Start_IT>
 800480e:	0003      	movs	r3, r0
 8004810:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <Start_IC_TIM+0x50>)
 8004816:	0011      	movs	r1, r2
 8004818:	0018      	movs	r0, r3
 800481a:	f005 fe0f 	bl	800a43c <HAL_TIM_IC_Start_IT>
 800481e:	0003      	movs	r3, r0
 8004820:	0019      	movs	r1, r3
 8004822:	197b      	adds	r3, r7, r5
 8004824:	197a      	adds	r2, r7, r5
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	400a      	ands	r2, r1
 800482a:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 800482c:	197b      	adds	r3, r7, r5
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <Start_IC_TIM+0x40>

		Error_Handler();
 8004834:	f7fd fd9a 	bl	800236c <Error_Handler>
	}

	return ok_AND;
 8004838:	230f      	movs	r3, #15
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	781b      	ldrb	r3, [r3, #0]
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b004      	add	sp, #16
 8004844:	bdb0      	pop	{r4, r5, r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	20000814 	.word	0x20000814

0800484c <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0010      	movs	r0, r2
 800485c:	0019      	movs	r1, r3
 800485e:	2324      	movs	r3, #36	@ 0x24
 8004860:	001a      	movs	r2, r3
 8004862:	f008 ff8d 	bl	800d780 <memcpy>

	return 1;
 8004866:	2301      	movs	r3, #1
}
 8004868:	0018      	movs	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}

08004870 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <Start_Measurement_Reelapse_Timer+0x34>)
 8004876:	2100      	movs	r1, #0
 8004878:	0018      	movs	r0, r3
 800487a:	f001 fcb6 	bl	80061ea <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800487e:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <Start_Measurement_Reelapse_Timer+0x34>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8004886:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <Start_Measurement_Reelapse_Timer+0x38>)
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29a      	uxth	r2, r3
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <Start_Measurement_Reelapse_Timer+0x34>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004892:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <Start_Measurement_Reelapse_Timer+0x34>)
 8004894:	2100      	movs	r1, #0
 8004896:	0018      	movs	r0, r3
 8004898:	f001 fc8b 	bl	80061b2 <Start_OC_TIM>

	return 1;
 800489c:	2301      	movs	r3, #1
}
 800489e:	0018      	movs	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	200008d0 	.word	0x200008d0
 80048a8:	20000c38 	.word	0x20000c38

080048ac <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 80048b0:	4b03      	ldr	r3, [pc, #12]	@ (80048c0 <Begin_Input_Capture_Measurement+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2200      	movs	r2, #0
 80048b6:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 80048b8:	2301      	movs	r3, #1
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000814 	.word	0x20000814

080048c4 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 80048c8:	f7fd fd56 	bl	8002378 <System_Init>

	//STARTUP
	Startup();
 80048cc:	f000 fb5a 	bl	8004f84 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80048d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004a00 <main+0x13c>)
 80048d2:	2104      	movs	r1, #4
 80048d4:	0018      	movs	r0, r3
 80048d6:	f001 fcef 	bl	80062b8 <Get_Status_Bit>
 80048da:	0003      	movs	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d107      	bne.n	80048f0 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 80048e0:	4b48      	ldr	r3, [pc, #288]	@ (8004a04 <main+0x140>)
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4a48      	ldr	r2, [pc, #288]	@ (8004a08 <main+0x144>)
 80048e8:	0011      	movs	r1, r2
 80048ea:	0018      	movs	r0, r3
 80048ec:	f7ff fef8 	bl	80046e0 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 80048f0:	4b43      	ldr	r3, [pc, #268]	@ (8004a00 <main+0x13c>)
 80048f2:	2140      	movs	r1, #64	@ 0x40
 80048f4:	0018      	movs	r0, r3
 80048f6:	f001 fcdf 	bl	80062b8 <Get_Status_Bit>
 80048fa:	0003      	movs	r3, r0
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d12b      	bne.n	8004958 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8004900:	4b42      	ldr	r3, [pc, #264]	@ (8004a0c <main+0x148>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	23fa      	movs	r3, #250	@ 0xfa
 8004906:	01db      	lsls	r3, r3, #7
 8004908:	429a      	cmp	r2, r3
 800490a:	d218      	bcs.n	800493e <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 800490c:	4b40      	ldr	r3, [pc, #256]	@ (8004a10 <main+0x14c>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004916:	4b3a      	ldr	r3, [pc, #232]	@ (8004a00 <main+0x13c>)
 8004918:	2140      	movs	r1, #64	@ 0x40
 800491a:	0018      	movs	r0, r3
 800491c:	f001 fcf2 	bl	8006304 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004920:	4b37      	ldr	r3, [pc, #220]	@ (8004a00 <main+0x13c>)
 8004922:	2120      	movs	r1, #32
 8004924:	0018      	movs	r0, r3
 8004926:	f001 fced 	bl	8006304 <Clear_Status_Bit>
					idle_counter = 0;
 800492a:	4b38      	ldr	r3, [pc, #224]	@ (8004a0c <main+0x148>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e012      	b.n	8004958 <main+0x94>
				}
				else{

					idle_counter++;
 8004932:	4b36      	ldr	r3, [pc, #216]	@ (8004a0c <main+0x148>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <main+0x148>)
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e00c      	b.n	8004958 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800493e:	4b30      	ldr	r3, [pc, #192]	@ (8004a00 <main+0x13c>)
 8004940:	2140      	movs	r1, #64	@ 0x40
 8004942:	0018      	movs	r0, r3
 8004944:	f001 fcde 	bl	8006304 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004948:	4b2d      	ldr	r3, [pc, #180]	@ (8004a00 <main+0x13c>)
 800494a:	2120      	movs	r1, #32
 800494c:	0018      	movs	r0, r3
 800494e:	f001 fcc7 	bl	80062e0 <Set_Status_Bit>
				idle_counter = 0;
 8004952:	4b2e      	ldr	r3, [pc, #184]	@ (8004a0c <main+0x148>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004958:	2380      	movs	r3, #128	@ 0x80
 800495a:	005a      	lsls	r2, r3, #1
 800495c:	4b28      	ldr	r3, [pc, #160]	@ (8004a00 <main+0x13c>)
 800495e:	0011      	movs	r1, r2
 8004960:	0018      	movs	r0, r3
 8004962:	f001 fca9 	bl	80062b8 <Get_Status_Bit>
 8004966:	0003      	movs	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d122      	bne.n	80049b2 <main+0xee>

			if(midi_counter < MIDI_COUNT){
 800496c:	4b29      	ldr	r3, [pc, #164]	@ (8004a14 <main+0x150>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a29      	ldr	r2, [pc, #164]	@ (8004a18 <main+0x154>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d805      	bhi.n	8004982 <main+0xbe>

				midi_counter++;
 8004976:	4b27      	ldr	r3, [pc, #156]	@ (8004a14 <main+0x150>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <main+0x150>)
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e017      	b.n	80049b2 <main+0xee>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8004982:	2380      	movs	r3, #128	@ 0x80
 8004984:	005a      	lsls	r2, r3, #1
 8004986:	4b1e      	ldr	r3, [pc, #120]	@ (8004a00 <main+0x13c>)
 8004988:	0011      	movs	r1, r2
 800498a:	0018      	movs	r0, r3
 800498c:	f001 fcba 	bl	8006304 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	009a      	lsls	r2, r3, #2
 8004994:	4b1a      	ldr	r3, [pc, #104]	@ (8004a00 <main+0x13c>)
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f001 fca1 	bl	80062e0 <Set_Status_Bit>
				active_status_byte = 0;
 800499e:	4b1f      	ldr	r3, [pc, #124]	@ (8004a1c <main+0x158>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80049a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <main+0x15c>)
 80049a6:	0018      	movs	r0, r3
 80049a8:	f7fc fc03 	bl	80011b2 <Clear_Data_Buffer>
				midi_counter = 0;
 80049ac:	4b19      	ldr	r3, [pc, #100]	@ (8004a14 <main+0x150>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == YES){
 80049b2:	2380      	movs	r3, #128	@ 0x80
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <main+0x13c>)
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f001 fc7c 	bl	80062b8 <Get_Status_Bit>
 80049c0:	0003      	movs	r3, r0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d184      	bne.n	80048d0 <main+0xc>

			if(advance_idle_counter < ADVANCE_IDLE_COUNT){
 80049c6:	4b17      	ldr	r3, [pc, #92]	@ (8004a24 <main+0x160>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a13      	ldr	r2, [pc, #76]	@ (8004a18 <main+0x154>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d805      	bhi.n	80049dc <main+0x118>

				advance_idle_counter++;
 80049d0:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <main+0x160>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	4b13      	ldr	r3, [pc, #76]	@ (8004a24 <main+0x160>)
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e779      	b.n	80048d0 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 80049dc:	2380      	movs	r3, #128	@ 0x80
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	4b07      	ldr	r3, [pc, #28]	@ (8004a00 <main+0x13c>)
 80049e2:	0011      	movs	r1, r2
 80049e4:	0018      	movs	r0, r3
 80049e6:	f001 fc8d 	bl	8006304 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out);
 80049ea:	2380      	movs	r3, #128	@ 0x80
 80049ec:	019a      	lsls	r2, r3, #6
 80049ee:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <main+0x13c>)
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f001 fc74 	bl	80062e0 <Set_Status_Bit>
				advance_idle_counter = 0;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <main+0x160>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80049fe:	e767      	b.n	80048d0 <main+0xc>
 8004a00:	20000c3c 	.word	0x20000c3c
 8004a04:	20000c38 	.word	0x20000c38
 8004a08:	20000ca0 	.word	0x20000ca0
 8004a0c:	20000c40 	.word	0x20000c40
 8004a10:	20000444 	.word	0x20000444
 8004a14:	20000c44 	.word	0x20000c44
 8004a18:	00030d3f 	.word	0x00030d3f
 8004a1c:	200004cb 	.word	0x200004cb
 8004a20:	200004d0 	.word	0x200004d0
 8004a24:	20000c48 	.word	0x20000c48

08004a28 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8004a34:	2417      	movs	r4, #23
 8004a36:	193b      	adds	r3, r7, r4
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f005 f842 	bl	8009ac8 <HAL_TIM_Base_Start>
 8004a44:	0003      	movs	r3, r0
 8004a46:	0019      	movs	r1, r3
 8004a48:	193b      	adds	r3, r7, r4
 8004a4a:	193a      	adds	r2, r7, r4
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	0011      	movs	r1, r2
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f005 fba3 	bl	800a1a4 <HAL_TIM_PWM_Start>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	0019      	movs	r1, r3
 8004a62:	193b      	adds	r3, r7, r4
 8004a64:	193a      	adds	r2, r7, r4
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	0011      	movs	r1, r2
 8004a72:	0018      	movs	r0, r3
 8004a74:	f005 fb96 	bl	800a1a4 <HAL_TIM_PWM_Start>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	193b      	adds	r3, r7, r4
 8004a7e:	193a      	adds	r2, r7, r4
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 8004a86:	193b      	adds	r3, r7, r4
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 8004a8e:	f7fd fc6d 	bl	800236c <Error_Handler>
	}

	return ok_OR;
 8004a92:	2317      	movs	r3, #23
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	781b      	ldrb	r3, [r3, #0]
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b007      	add	sp, #28
 8004a9e:	bd90      	pop	{r4, r7, pc}

08004aa0 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8004aa6:	1dfc      	adds	r4, r7, #7
 8004aa8:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <Start_Freq_Gen_Timer+0x30>)
 8004aaa:	2100      	movs	r1, #0
 8004aac:	0018      	movs	r0, r3
 8004aae:	f001 fb80 	bl	80061b2 <Start_OC_TIM>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004abe:	f7fd fc55 	bl	800236c <Error_Handler>
	}

	return ok;
 8004ac2:	1dfb      	adds	r3, r7, #7
 8004ac4:	781b      	ldrb	r3, [r3, #0]
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b003      	add	sp, #12
 8004acc:	bd90      	pop	{r4, r7, pc}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	20000758 	.word	0x20000758

08004ad4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004ae0:	210b      	movs	r1, #11
 8004ae2:	187b      	adds	r3, r7, r1
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	891b      	ldrh	r3, [r3, #8]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	001a      	movs	r2, r3
 8004af0:	0013      	movs	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	189b      	adds	r3, r3, r2
 8004af6:	019b      	lsls	r3, r3, #6
 8004af8:	189b      	adds	r3, r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	0a9b      	lsrs	r3, r3, #10
 8004b04:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	09da      	lsrs	r2, r3, #7
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	187b      	adds	r3, r7, r1
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	01db      	lsls	r3, r3, #7
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2280      	movs	r2, #128	@ 0x80
 8004b2a:	00d2      	lsls	r2, r2, #3
 8004b2c:	411a      	asrs	r2, r3
 8004b2e:	0013      	movs	r3, r2
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	835a      	strh	r2, [r3, #26]

    return 1;
 8004b36:	2301      	movs	r3, #1
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8b1b      	ldrh	r3, [r3, #24]
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	4b10      	ldr	r3, [pc, #64]	@ (8004b90 <Set_Oscillator_Values+0x50>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8b1b      	ldrh	r3, [r3, #24]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <Set_Oscillator_Values+0x50>)
 8004b5e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8bdb      	ldrh	r3, [r3, #30]
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <Set_Oscillator_Values+0x50>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	885b      	ldrh	r3, [r3, #2]
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	4b08      	ldr	r3, [pc, #32]	@ (8004b94 <Set_Oscillator_Values+0x54>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	889b      	ldrh	r3, [r3, #4]
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <Set_Oscillator_Values+0x54>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 8004b84:	2301      	movs	r3, #1
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b002      	add	sp, #8
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	20000758 	.word	0x20000758
 8004b94:	2000098c 	.word	0x2000098c

08004b98 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	000a      	movs	r2, r1
 8004ba2:	1cfb      	adds	r3, r7, #3
 8004ba4:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 8004ba6:	1cfb      	adds	r3, r7, #3
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d144      	bne.n	8004c38 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	89db      	ldrh	r3, [r3, #14]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	89db      	ldrh	r3, [r3, #14]
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	2380      	movs	r3, #128	@ 0x80
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d102      	bne.n	8004bd0 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	89db      	ldrh	r3, [r3, #14]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	741a      	strb	r2, [r3, #16]
 8004be6:	e05a      	b.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	89db      	ldrh	r3, [r3, #14]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b80      	cmp	r3, #128	@ 0x80
 8004bf0:	d106      	bne.n	8004c00 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	741a      	strb	r2, [r3, #16]
 8004bfe:	e04e      	b.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	89db      	ldrh	r3, [r3, #14]
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d106      	bne.n	8004c1c <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	741a      	strb	r2, [r3, #16]
 8004c1a:	e040      	b.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	89db      	ldrh	r3, [r3, #14]
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	23c0      	movs	r3, #192	@ 0xc0
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d139      	bne.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	741a      	strb	r2, [r3, #16]
 8004c36:	e032      	b.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004c38:	1cfb      	adds	r3, r7, #3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d11f      	bne.n	8004c80 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	799b      	ldrb	r3, [r3, #6]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d004      	beq.n	8004c54 <Calculate_Next_Main_Oscillator_Values+0xbc>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	799b      	ldrb	r3, [r3, #6]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	22a7      	movs	r2, #167	@ 0xa7
 8004c58:	0052      	lsls	r2, r2, #1
 8004c5a:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	741a      	strb	r2, [r3, #16]
 8004c68:	e019      	b.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2280      	movs	r2, #128	@ 0x80
 8004c6e:	0052      	lsls	r2, r2, #1
 8004c70:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	741a      	strb	r2, [r3, #16]
 8004c7e:	e00e      	b.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 8004c80:	1cfb      	adds	r3, r7, #3
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d10a      	bne.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	89db      	ldrh	r3, [r3, #14]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	799b      	ldrb	r3, [r3, #6]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	89db      	ldrh	r3, [r3, #14]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	001a      	movs	r2, r3
 8004cb0:	4b31      	ldr	r3, [pc, #196]	@ (8004d78 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8004cb2:	0052      	lsls	r2, r2, #1
 8004cb4:	5ad2      	ldrh	r2, [r2, r3]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	e029      	b.n	8004d10 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	799b      	ldrb	r3, [r3, #6]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d109      	bne.n	8004cda <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	89db      	ldrh	r3, [r3, #14]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	001a      	movs	r2, r3
 8004cce:	4b2b      	ldr	r3, [pc, #172]	@ (8004d7c <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004cd0:	0052      	lsls	r2, r2, #1
 8004cd2:	5ad2      	ldrh	r2, [r2, r3]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	e01a      	b.n	8004d10 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	799b      	ldrb	r3, [r3, #6]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d108      	bne.n	8004cf6 <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	89db      	ldrh	r3, [r3, #14]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2bff      	cmp	r3, #255	@ 0xff
 8004cec:	d803      	bhi.n	8004cf6 <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a23      	ldr	r2, [pc, #140]	@ (8004d80 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e00c      	b.n	8004d10 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	799b      	ldrb	r3, [r3, #6]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d107      	bne.n	8004d10 <Calculate_Next_Main_Oscillator_Values+0x178>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	89db      	ldrh	r3, [r3, #14]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2bff      	cmp	r3, #255	@ 0xff
 8004d08:	d902      	bls.n	8004d10 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7a9b      	ldrb	r3, [r3, #10]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d18:	d108      	bne.n	8004d2c <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	e01b      	b.n	8004d64 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7a9b      	ldrb	r3, [r3, #10]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d013      	beq.n	8004d5e <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	001a      	movs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7a9b      	ldrb	r3, [r3, #10]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	4353      	muls	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4a0b      	ldr	r2, [pc, #44]	@ (8004d80 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e002      	b.n	8004d64 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a07      	ldr	r2, [pc, #28]	@ (8004d80 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004d62:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	805a      	strh	r2, [r3, #2]

	return 1;
 8004d6e:	2301      	movs	r3, #1
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b004      	add	sp, #16
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	0800dbcc 	.word	0x0800dbcc
 8004d7c:	0800d7cc 	.word	0x0800d7cc
 8004d80:	000003ff 	.word	0x000003ff

08004d84 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4a44      	ldr	r2, [pc, #272]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004d92:	5a9b      	ldrh	r3, [r3, r2]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	4a41      	ldr	r2, [pc, #260]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004d9e:	5a9b      	ldrh	r3, [r3, r2]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	1e5a      	subs	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b299      	uxth	r1, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	0052      	lsls	r2, r2, #1
 8004dae:	52d1      	strh	r1, [r2, r3]
 8004db0:	e006      	b.n	8004dc0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b299      	uxth	r1, r3
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	2380      	movs	r3, #128	@ 0x80
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4a38      	ldr	r2, [pc, #224]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004dc4:	5a9b      	ldrh	r3, [r3, r2]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10e      	bne.n	8004dea <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	4a35      	ldr	r2, [pc, #212]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004dd0:	2180      	movs	r1, #128	@ 0x80
 8004dd2:	0089      	lsls	r1, r1, #2
 8004dd4:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004dda:	5a9b      	ldrh	r3, [r3, r2]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b299      	uxth	r1, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	4a30      	ldr	r2, [pc, #192]	@ (8004ea8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004de6:	5299      	strh	r1, [r3, r2]
 8004de8:	e026      	b.n	8004e38 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	4a2e      	ldr	r2, [pc, #184]	@ (8004ea8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004dee:	5a9b      	ldrh	r3, [r3, r2]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004dfa:	2180      	movs	r1, #128	@ 0x80
 8004dfc:	0089      	lsls	r1, r1, #2
 8004dfe:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4a28      	ldr	r2, [pc, #160]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e04:	5a9b      	ldrh	r3, [r3, r2]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b299      	uxth	r1, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e10:	5299      	strh	r1, [r3, r2]
 8004e12:	e011      	b.n	8004e38 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4a23      	ldr	r2, [pc, #140]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e18:	5a9b      	ldrh	r3, [r3, r2]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b299      	uxth	r1, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	4a20      	ldr	r2, [pc, #128]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e24:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004e2a:	5a9b      	ldrh	r3, [r3, r2]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b299      	uxth	r1, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004e36:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e3c:	5a9b      	ldrh	r3, [r3, r2]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	001a      	movs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	18d2      	adds	r2, r2, r3
 8004e4a:	2380      	movs	r3, #128	@ 0x80
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	dd13      	ble.n	8004e7a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	4913      	ldr	r1, [pc, #76]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e58:	5a5b      	ldrh	r3, [r3, r1]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	18cb      	adds	r3, r1, r3
 8004e66:	4911      	ldr	r1, [pc, #68]	@ (8004eac <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8004e68:	468c      	mov	ip, r1
 8004e6a:	4463      	add	r3, ip
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	18d3      	adds	r3, r2, r3
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	809a      	strh	r2, [r3, #4]
 8004e78:	e00f      	b.n	8004e9a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4909      	ldr	r1, [pc, #36]	@ (8004ea4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e80:	5a5b      	ldrh	r3, [r3, r1]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	0019      	movs	r1, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	18cb      	adds	r3, r1, r3
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	18d3      	adds	r3, r2, r3
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8004e9a:	2301      	movs	r3, #1
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	00000402 	.word	0x00000402
 8004ea8:	00000404 	.word	0x00000404
 8004eac:	7ffffe00 	.word	0x7ffffe00

08004eb0 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	2116      	movs	r1, #22
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	0952      	lsrs	r2, r2, #5
 8004ec6:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ece:	d803      	bhi.n	8004ed8 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	719a      	strb	r2, [r3, #6]
 8004ed6:	e010      	b.n	8004efa <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004ed8:	2316      	movs	r3, #22
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	2b55      	cmp	r3, #85	@ 0x55
 8004ee0:	d803      	bhi.n	8004eea <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	719a      	strb	r2, [r3, #6]
 8004ee8:	e007      	b.n	8004efa <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004eea:	2316      	movs	r3, #22
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ef2:	d802      	bhi.n	8004efa <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	3302      	adds	r3, #2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	2114      	movs	r1, #20
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	0952      	lsrs	r2, r2, #5
 8004f08:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004f0a:	187b      	adds	r3, r7, r1
 8004f0c:	187a      	adds	r2, r7, r1
 8004f0e:	8812      	ldrh	r2, [r2, #0]
 8004f10:	00d2      	lsls	r2, r2, #3
 8004f12:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	187a      	adds	r2, r7, r1
 8004f18:	8812      	ldrh	r2, [r2, #0]
 8004f1a:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	2113      	movs	r1, #19
 8004f2a:	187b      	adds	r3, r7, r1
 8004f2c:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	187a      	adds	r2, r7, r1
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	3306      	adds	r3, #6
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	2110      	movs	r1, #16
 8004f40:	187b      	adds	r3, r7, r1
 8004f42:	0952      	lsrs	r2, r2, #5
 8004f44:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8004f46:	187a      	adds	r2, r7, r1
 8004f48:	187b      	adds	r3, r7, r1
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	18db      	adds	r3, r3, r3
 8004f4e:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	187a      	adds	r2, r7, r1
 8004f54:	8812      	ldrh	r2, [r2, #0]
 8004f56:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	210e      	movs	r1, #14
 8004f62:	187b      	adds	r3, r7, r1
 8004f64:	0952      	lsrs	r2, r2, #5
 8004f66:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8004f68:	187b      	adds	r3, r7, r1
 8004f6a:	187a      	adds	r2, r7, r1
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	187a      	adds	r2, r7, r1
 8004f76:	8812      	ldrh	r2, [r2, #0]
 8004f78:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8004f7a:	2301      	movs	r3, #1
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b006      	add	sp, #24
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8004f8a:	2007      	movs	r0, #7
 8004f8c:	f002 fd9b 	bl	8007ac6 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8004f90:	4b5a      	ldr	r3, [pc, #360]	@ (80050fc <Startup+0x178>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	4b59      	ldr	r3, [pc, #356]	@ (80050fc <Startup+0x178>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8004fa0:	4b57      	ldr	r3, [pc, #348]	@ (8005100 <Startup+0x17c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	4b56      	ldr	r3, [pc, #344]	@ (8005100 <Startup+0x17c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2101      	movs	r1, #1
 8004fac:	430a      	orrs	r2, r1
 8004fae:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	0099      	lsls	r1, r3, #2
 8004fb4:	23a0      	movs	r3, #160	@ 0xa0
 8004fb6:	05db      	lsls	r3, r3, #23
 8004fb8:	2201      	movs	r2, #1
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f003 fa3f 	bl	800843e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004fc0:	2380      	movs	r3, #128	@ 0x80
 8004fc2:	0159      	lsls	r1, r3, #5
 8004fc4:	23a0      	movs	r3, #160	@ 0xa0
 8004fc6:	05db      	lsls	r3, r3, #23
 8004fc8:	2201      	movs	r2, #1
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f003 fa37 	bl	800843e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004fd0:	23a0      	movs	r3, #160	@ 0xa0
 8004fd2:	05db      	lsls	r3, r3, #23
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2180      	movs	r1, #128	@ 0x80
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f003 fa30 	bl	800843e <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004fde:	f7fb fa33 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8004fe2:	f7fb fd8d 	bl	8000b00 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8004fe6:	4b47      	ldr	r3, [pc, #284]	@ (8005104 <Startup+0x180>)
 8004fe8:	4a47      	ldr	r2, [pc, #284]	@ (8005108 <Startup+0x184>)
 8004fea:	4948      	ldr	r1, [pc, #288]	@ (800510c <Startup+0x188>)
 8004fec:	4c48      	ldr	r4, [pc, #288]	@ (8005110 <Startup+0x18c>)
 8004fee:	2004      	movs	r0, #4
 8004ff0:	9000      	str	r0, [sp, #0]
 8004ff2:	0020      	movs	r0, r4
 8004ff4:	f7fb fc77 	bl	80008e6 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004ff8:	4b46      	ldr	r3, [pc, #280]	@ (8005114 <Startup+0x190>)
 8004ffa:	4a47      	ldr	r2, [pc, #284]	@ (8005118 <Startup+0x194>)
 8004ffc:	4943      	ldr	r1, [pc, #268]	@ (800510c <Startup+0x188>)
 8004ffe:	4847      	ldr	r0, [pc, #284]	@ (800511c <Startup+0x198>)
 8005000:	2404      	movs	r4, #4
 8005002:	9400      	str	r4, [sp, #0]
 8005004:	f7fb fd25 	bl	8000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8005008:	4b45      	ldr	r3, [pc, #276]	@ (8005120 <Startup+0x19c>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	001a      	movs	r2, r3
 800500e:	4945      	ldr	r1, [pc, #276]	@ (8005124 <Startup+0x1a0>)
 8005010:	4b45      	ldr	r3, [pc, #276]	@ (8005128 <Startup+0x1a4>)
 8005012:	0018      	movs	r0, r3
 8005014:	f001 fe08 	bl	8006c28 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8005018:	46c0      	nop			@ (mov r8, r8)
 800501a:	4b3b      	ldr	r3, [pc, #236]	@ (8005108 <Startup+0x184>)
 800501c:	2110      	movs	r1, #16
 800501e:	0018      	movs	r0, r3
 8005020:	f001 f94a 	bl	80062b8 <Get_Status_Bit>
 8005024:	1e03      	subs	r3, r0, #0
 8005026:	d0f8      	beq.n	800501a <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8005028:	1dbb      	adds	r3, r7, #6
 800502a:	2200      	movs	r2, #0
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	e02c      	b.n	800508a <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8005030:	4b3e      	ldr	r3, [pc, #248]	@ (800512c <Startup+0x1a8>)
 8005032:	799b      	ldrb	r3, [r3, #6]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d111      	bne.n	800505e <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 800503a:	4b3c      	ldr	r3, [pc, #240]	@ (800512c <Startup+0x1a8>)
 800503c:	7a9b      	ldrb	r3, [r3, #10]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	001a      	movs	r2, r3
 8005042:	0013      	movs	r3, r2
 8005044:	029b      	lsls	r3, r3, #10
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	11db      	asrs	r3, r3, #7
 800504a:	b29b      	uxth	r3, r3
 800504c:	1dba      	adds	r2, r7, #6
 800504e:	8812      	ldrh	r2, [r2, #0]
 8005050:	4937      	ldr	r1, [pc, #220]	@ (8005130 <Startup+0x1ac>)
 8005052:	1acb      	subs	r3, r1, r3
 8005054:	b299      	uxth	r1, r3
 8005056:	4b37      	ldr	r3, [pc, #220]	@ (8005134 <Startup+0x1b0>)
 8005058:	0052      	lsls	r2, r2, #1
 800505a:	52d1      	strh	r1, [r2, r3]
 800505c:	e010      	b.n	8005080 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 800505e:	4b33      	ldr	r3, [pc, #204]	@ (800512c <Startup+0x1a8>)
 8005060:	7a9b      	ldrb	r3, [r3, #10]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	001a      	movs	r2, r3
 8005066:	0013      	movs	r3, r2
 8005068:	029b      	lsls	r3, r3, #10
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	121b      	asrs	r3, r3, #8
 800506e:	b29b      	uxth	r3, r3
 8005070:	1dba      	adds	r2, r7, #6
 8005072:	8812      	ldrh	r2, [r2, #0]
 8005074:	492e      	ldr	r1, [pc, #184]	@ (8005130 <Startup+0x1ac>)
 8005076:	1acb      	subs	r3, r1, r3
 8005078:	b299      	uxth	r1, r3
 800507a:	4b2e      	ldr	r3, [pc, #184]	@ (8005134 <Startup+0x1b0>)
 800507c:	0052      	lsls	r2, r2, #1
 800507e:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8005080:	1dbb      	adds	r3, r7, #6
 8005082:	881a      	ldrh	r2, [r3, #0]
 8005084:	1dbb      	adds	r3, r7, #6
 8005086:	3201      	adds	r2, #1
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	1dbb      	adds	r3, r7, #6
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	2380      	movs	r3, #128	@ 0x80
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	429a      	cmp	r2, r3
 8005094:	d9cc      	bls.n	8005030 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8005096:	4b25      	ldr	r3, [pc, #148]	@ (800512c <Startup+0x1a8>)
 8005098:	2102      	movs	r1, #2
 800509a:	0018      	movs	r0, r3
 800509c:	f7ff fd7c 	bl	8004b98 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80050a0:	4a24      	ldr	r2, [pc, #144]	@ (8005134 <Startup+0x1b0>)
 80050a2:	4b22      	ldr	r3, [pc, #136]	@ (800512c <Startup+0x1a8>)
 80050a4:	0011      	movs	r1, r2
 80050a6:	0018      	movs	r0, r3
 80050a8:	f7ff fe6c 	bl	8004d84 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80050ac:	4b1f      	ldr	r3, [pc, #124]	@ (800512c <Startup+0x1a8>)
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7ff fd46 	bl	8004b40 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80050b4:	4b20      	ldr	r3, [pc, #128]	@ (8005138 <Startup+0x1b4>)
 80050b6:	220c      	movs	r2, #12
 80050b8:	2104      	movs	r1, #4
 80050ba:	0018      	movs	r0, r3
 80050bc:	f7ff fcb4 	bl	8004a28 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 80050c0:	f7ff fcee 	bl	8004aa0 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 80050c4:	f7fc f9c2 	bl	800144c <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 80050c8:	f7ff fb7c 	bl	80047c4 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80050cc:	f001 f8ec 	bl	80062a8 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80050d0:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <Startup+0x1b8>)
 80050d2:	22fa      	movs	r2, #250	@ 0xfa
 80050d4:	21fa      	movs	r1, #250	@ 0xfa
 80050d6:	0018      	movs	r0, r3
 80050d8:	f003 faa8 	bl	800862c <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 80050dc:	4b18      	ldr	r3, [pc, #96]	@ (8005140 <Startup+0x1bc>)
 80050de:	2201      	movs	r2, #1
 80050e0:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 80050e2:	4b18      	ldr	r3, [pc, #96]	@ (8005144 <Startup+0x1c0>)
 80050e4:	2100      	movs	r1, #0
 80050e6:	0018      	movs	r0, r3
 80050e8:	f001 f863 	bl	80061b2 <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80050ec:	2007      	movs	r0, #7
 80050ee:	f002 fcda 	bl	8007aa6 <HAL_NVIC_EnableIRQ>

	return 1;
 80050f2:	2301      	movs	r3, #1
}
 80050f4:	0018      	movs	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b003      	add	sp, #12
 80050fa:	bd90      	pop	{r4, r7, pc}
 80050fc:	20000814 	.word	0x20000814
 8005100:	20000758 	.word	0x20000758
 8005104:	200004ca 	.word	0x200004ca
 8005108:	20000c3c 	.word	0x20000c3c
 800510c:	200004c0 	.word	0x200004c0
 8005110:	0800f820 	.word	0x0800f820
 8005114:	20000484 	.word	0x20000484
 8005118:	20000474 	.word	0x20000474
 800511c:	20000494 	.word	0x20000494
 8005120:	0800dfcc 	.word	0x0800dfcc
 8005124:	20000c4c 	.word	0x20000c4c
 8005128:	200004fc 	.word	0x200004fc
 800512c:	20000c58 	.word	0x20000c58
 8005130:	000003ff 	.word	0x000003ff
 8005134:	20000028 	.word	0x20000028
 8005138:	2000098c 	.word	0x2000098c
 800513c:	20000bcc 	.word	0x20000bcc
 8005140:	20000448 	.word	0x20000448
 8005144:	200005e0 	.word	0x200005e0

08005148 <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	4a12      	ldr	r2, [pc, #72]	@ (800519c <Advance_Pending_States+0x54>)
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8005156:	4b11      	ldr	r3, [pc, #68]	@ (800519c <Advance_Pending_States+0x54>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b05      	cmp	r3, #5
 800515e:	d103      	bne.n	8005168 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8005160:	4b0e      	ldr	r3, [pc, #56]	@ (800519c <Advance_Pending_States+0x54>)
 8005162:	2204      	movs	r2, #4
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	e007      	b.n	8005178 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <Advance_Pending_States+0x54>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b07      	cmp	r3, #7
 8005170:	d102      	bne.n	8005178 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <Advance_Pending_States+0x54>)
 8005174:	2206      	movs	r2, #6
 8005176:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b06      	cmp	r3, #6
 800517e:	d007      	beq.n	8005190 <Advance_Pending_States+0x48>
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d003      	beq.n	8005190 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8005188:	4b04      	ldr	r3, [pc, #16]	@ (800519c <Advance_Pending_States+0x54>)
 800518a:	1d3a      	adds	r2, r7, #4
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8005190:	2301      	movs	r3, #1
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b002      	add	sp, #8
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	20000430 	.word	0x20000430

080051a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a6:	4b0f      	ldr	r3, [pc, #60]	@ (80051e4 <HAL_MspInit+0x44>)
 80051a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051aa:	4b0e      	ldr	r3, [pc, #56]	@ (80051e4 <HAL_MspInit+0x44>)
 80051ac:	2101      	movs	r1, #1
 80051ae:	430a      	orrs	r2, r1
 80051b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80051b2:	4b0c      	ldr	r3, [pc, #48]	@ (80051e4 <HAL_MspInit+0x44>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	2201      	movs	r2, #1
 80051b8:	4013      	ands	r3, r2
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051be:	4b09      	ldr	r3, [pc, #36]	@ (80051e4 <HAL_MspInit+0x44>)
 80051c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051c2:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <HAL_MspInit+0x44>)
 80051c4:	2180      	movs	r1, #128	@ 0x80
 80051c6:	0549      	lsls	r1, r1, #21
 80051c8:	430a      	orrs	r2, r1
 80051ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <HAL_MspInit+0x44>)
 80051ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	055b      	lsls	r3, r3, #21
 80051d4:	4013      	ands	r3, r2
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	b002      	add	sp, #8
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			@ (mov r8, r8)
 80051e4:	40021000 	.word	0x40021000

080051e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b08b      	sub	sp, #44	@ 0x2c
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f0:	2414      	movs	r4, #20
 80051f2:	193b      	adds	r3, r7, r4
 80051f4:	0018      	movs	r0, r3
 80051f6:	2314      	movs	r3, #20
 80051f8:	001a      	movs	r2, r3
 80051fa:	2100      	movs	r1, #0
 80051fc:	f008 fa94 	bl	800d728 <memset>
  if(hadc->Instance==ADC1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2e      	ldr	r2, [pc, #184]	@ (80052c0 <HAL_ADC_MspInit+0xd8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d155      	bne.n	80052b6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800520a:	4b2e      	ldr	r3, [pc, #184]	@ (80052c4 <HAL_ADC_MspInit+0xdc>)
 800520c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800520e:	4b2d      	ldr	r3, [pc, #180]	@ (80052c4 <HAL_ADC_MspInit+0xdc>)
 8005210:	2180      	movs	r1, #128	@ 0x80
 8005212:	0349      	lsls	r1, r1, #13
 8005214:	430a      	orrs	r2, r1
 8005216:	641a      	str	r2, [r3, #64]	@ 0x40
 8005218:	4b2a      	ldr	r3, [pc, #168]	@ (80052c4 <HAL_ADC_MspInit+0xdc>)
 800521a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	035b      	lsls	r3, r3, #13
 8005220:	4013      	ands	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005226:	4b27      	ldr	r3, [pc, #156]	@ (80052c4 <HAL_ADC_MspInit+0xdc>)
 8005228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522a:	4b26      	ldr	r3, [pc, #152]	@ (80052c4 <HAL_ADC_MspInit+0xdc>)
 800522c:	2101      	movs	r1, #1
 800522e:	430a      	orrs	r2, r1
 8005230:	635a      	str	r2, [r3, #52]	@ 0x34
 8005232:	4b24      	ldr	r3, [pc, #144]	@ (80052c4 <HAL_ADC_MspInit+0xdc>)
 8005234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005236:	2201      	movs	r2, #1
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800523e:	193b      	adds	r3, r7, r4
 8005240:	2273      	movs	r2, #115	@ 0x73
 8005242:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005244:	193b      	adds	r3, r7, r4
 8005246:	2203      	movs	r2, #3
 8005248:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524a:	193b      	adds	r3, r7, r4
 800524c:	2200      	movs	r2, #0
 800524e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005250:	193a      	adds	r2, r7, r4
 8005252:	23a0      	movs	r3, #160	@ 0xa0
 8005254:	05db      	lsls	r3, r3, #23
 8005256:	0011      	movs	r1, r2
 8005258:	0018      	movs	r0, r3
 800525a:	f002 ff6f 	bl	800813c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800525e:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 8005260:	4a1a      	ldr	r2, [pc, #104]	@ (80052cc <HAL_ADC_MspInit+0xe4>)
 8005262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005264:	4b18      	ldr	r3, [pc, #96]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 8005266:	2205      	movs	r2, #5
 8005268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800526a:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 800526c:	2200      	movs	r2, #0
 800526e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005270:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 8005272:	2200      	movs	r2, #0
 8005274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005276:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 8005278:	2280      	movs	r2, #128	@ 0x80
 800527a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800527c:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 800527e:	2280      	movs	r2, #128	@ 0x80
 8005280:	0052      	lsls	r2, r2, #1
 8005282:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005284:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 8005286:	2280      	movs	r2, #128	@ 0x80
 8005288:	00d2      	lsls	r2, r2, #3
 800528a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800528c:	4b0e      	ldr	r3, [pc, #56]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 800528e:	2200      	movs	r2, #0
 8005290:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 8005294:	2280      	movs	r2, #128	@ 0x80
 8005296:	0192      	lsls	r2, r2, #6
 8005298:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800529a:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 800529c:	0018      	movs	r0, r3
 800529e:	f002 fc2f 	bl	8007b00 <HAL_DMA_Init>
 80052a2:	1e03      	subs	r3, r0, #0
 80052a4:	d001      	beq.n	80052aa <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80052a6:	f7fd f861 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a06      	ldr	r2, [pc, #24]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 80052ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_ADC_MspInit+0xe0>)
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b00b      	add	sp, #44	@ 0x2c
 80052bc:	bd90      	pop	{r4, r7, pc}
 80052be:	46c0      	nop			@ (mov r8, r8)
 80052c0:	40012400 	.word	0x40012400
 80052c4:	40021000 	.word	0x40021000
 80052c8:	20000584 	.word	0x20000584
 80052cc:	40020008 	.word	0x40020008

080052d0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b097      	sub	sp, #92	@ 0x5c
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d8:	2344      	movs	r3, #68	@ 0x44
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	0018      	movs	r0, r3
 80052de:	2314      	movs	r3, #20
 80052e0:	001a      	movs	r2, r3
 80052e2:	2100      	movs	r1, #0
 80052e4:	f008 fa20 	bl	800d728 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052e8:	241c      	movs	r4, #28
 80052ea:	193b      	adds	r3, r7, r4
 80052ec:	0018      	movs	r0, r3
 80052ee:	2328      	movs	r3, #40	@ 0x28
 80052f0:	001a      	movs	r2, r3
 80052f2:	2100      	movs	r1, #0
 80052f4:	f008 fa18 	bl	800d728 <memset>
  if(hlptim->Instance==LPTIM1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a46      	ldr	r2, [pc, #280]	@ (8005418 <HAL_LPTIM_MspInit+0x148>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d13e      	bne.n	8005380 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8005302:	193b      	adds	r3, r7, r4
 8005304:	2280      	movs	r2, #128	@ 0x80
 8005306:	0092      	lsls	r2, r2, #2
 8005308:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 800530a:	193b      	adds	r3, r7, r4
 800530c:	2200      	movs	r2, #0
 800530e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005310:	193b      	adds	r3, r7, r4
 8005312:	0018      	movs	r0, r3
 8005314:	f004 f9f8 	bl	8009708 <HAL_RCCEx_PeriphCLKConfig>
 8005318:	1e03      	subs	r3, r0, #0
 800531a:	d001      	beq.n	8005320 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 800531c:	f7fd f826 	bl	800236c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005320:	4b3e      	ldr	r3, [pc, #248]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 8005322:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005324:	4b3d      	ldr	r3, [pc, #244]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 8005326:	2180      	movs	r1, #128	@ 0x80
 8005328:	0609      	lsls	r1, r1, #24
 800532a:	430a      	orrs	r2, r1
 800532c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800532e:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	0fdb      	lsrs	r3, r3, #31
 8005334:	07db      	lsls	r3, r3, #31
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800533a:	4b38      	ldr	r3, [pc, #224]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 800533c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800533e:	4b37      	ldr	r3, [pc, #220]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 8005340:	2102      	movs	r1, #2
 8005342:	430a      	orrs	r2, r1
 8005344:	635a      	str	r2, [r3, #52]	@ 0x34
 8005346:	4b35      	ldr	r3, [pc, #212]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 8005348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534a:	2202      	movs	r2, #2
 800534c:	4013      	ands	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005352:	2144      	movs	r1, #68	@ 0x44
 8005354:	187b      	adds	r3, r7, r1
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535a:	187b      	adds	r3, r7, r1
 800535c:	2202      	movs	r2, #2
 800535e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	187b      	adds	r3, r7, r1
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005366:	187b      	adds	r3, r7, r1
 8005368:	2200      	movs	r2, #0
 800536a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 800536c:	187b      	adds	r3, r7, r1
 800536e:	2205      	movs	r2, #5
 8005370:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005372:	187b      	adds	r3, r7, r1
 8005374:	4a2a      	ldr	r2, [pc, #168]	@ (8005420 <HAL_LPTIM_MspInit+0x150>)
 8005376:	0019      	movs	r1, r3
 8005378:	0010      	movs	r0, r2
 800537a:	f002 fedf 	bl	800813c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 800537e:	e046      	b.n	800540e <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a27      	ldr	r2, [pc, #156]	@ (8005424 <HAL_LPTIM_MspInit+0x154>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d141      	bne.n	800540e <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800538a:	211c      	movs	r1, #28
 800538c:	187b      	adds	r3, r7, r1
 800538e:	2280      	movs	r2, #128	@ 0x80
 8005390:	00d2      	lsls	r2, r2, #3
 8005392:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8005394:	187b      	adds	r3, r7, r1
 8005396:	2200      	movs	r2, #0
 8005398:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800539a:	187b      	adds	r3, r7, r1
 800539c:	0018      	movs	r0, r3
 800539e:	f004 f9b3 	bl	8009708 <HAL_RCCEx_PeriphCLKConfig>
 80053a2:	1e03      	subs	r3, r0, #0
 80053a4:	d001      	beq.n	80053aa <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 80053a6:	f7fc ffe1 	bl	800236c <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80053aa:	4b1c      	ldr	r3, [pc, #112]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 80053ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ae:	4b1b      	ldr	r3, [pc, #108]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 80053b0:	2180      	movs	r1, #128	@ 0x80
 80053b2:	05c9      	lsls	r1, r1, #23
 80053b4:	430a      	orrs	r2, r1
 80053b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80053b8:	4b18      	ldr	r3, [pc, #96]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 80053ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	05db      	lsls	r3, r3, #23
 80053c0:	4013      	ands	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c6:	4b15      	ldr	r3, [pc, #84]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 80053c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ca:	4b14      	ldr	r3, [pc, #80]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 80053cc:	2101      	movs	r1, #1
 80053ce:	430a      	orrs	r2, r1
 80053d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80053d2:	4b12      	ldr	r3, [pc, #72]	@ (800541c <HAL_LPTIM_MspInit+0x14c>)
 80053d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d6:	2201      	movs	r2, #1
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053de:	2144      	movs	r1, #68	@ 0x44
 80053e0:	187b      	adds	r3, r7, r1
 80053e2:	2280      	movs	r2, #128	@ 0x80
 80053e4:	0052      	lsls	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	187b      	adds	r3, r7, r1
 80053ea:	2202      	movs	r2, #2
 80053ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	2200      	movs	r2, #0
 80053f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f4:	187b      	adds	r3, r7, r1
 80053f6:	2200      	movs	r2, #0
 80053f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 80053fa:	187b      	adds	r3, r7, r1
 80053fc:	2205      	movs	r2, #5
 80053fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005400:	187a      	adds	r2, r7, r1
 8005402:	23a0      	movs	r3, #160	@ 0xa0
 8005404:	05db      	lsls	r3, r3, #23
 8005406:	0011      	movs	r1, r2
 8005408:	0018      	movs	r0, r3
 800540a:	f002 fe97 	bl	800813c <HAL_GPIO_Init>
}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	46bd      	mov	sp, r7
 8005412:	b017      	add	sp, #92	@ 0x5c
 8005414:	bd90      	pop	{r4, r7, pc}
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	40007c00 	.word	0x40007c00
 800541c:	40021000 	.word	0x40021000
 8005420:	50000400 	.word	0x50000400
 8005424:	40009400 	.word	0x40009400

08005428 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b099      	sub	sp, #100	@ 0x64
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005430:	234c      	movs	r3, #76	@ 0x4c
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	0018      	movs	r0, r3
 8005436:	2314      	movs	r3, #20
 8005438:	001a      	movs	r2, r3
 800543a:	2100      	movs	r1, #0
 800543c:	f008 f974 	bl	800d728 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005440:	2424      	movs	r4, #36	@ 0x24
 8005442:	193b      	adds	r3, r7, r4
 8005444:	0018      	movs	r0, r3
 8005446:	2328      	movs	r3, #40	@ 0x28
 8005448:	001a      	movs	r2, r3
 800544a:	2100      	movs	r1, #0
 800544c:	f008 f96c 	bl	800d728 <memset>
  if(htim_base->Instance==TIM1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a68      	ldr	r2, [pc, #416]	@ (80055f8 <HAL_TIM_Base_MspInit+0x1d0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d11d      	bne.n	8005496 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800545a:	193b      	adds	r3, r7, r4
 800545c:	2280      	movs	r2, #128	@ 0x80
 800545e:	0392      	lsls	r2, r2, #14
 8005460:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8005462:	193b      	adds	r3, r7, r4
 8005464:	2200      	movs	r2, #0
 8005466:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005468:	193b      	adds	r3, r7, r4
 800546a:	0018      	movs	r0, r3
 800546c:	f004 f94c 	bl	8009708 <HAL_RCCEx_PeriphCLKConfig>
 8005470:	1e03      	subs	r3, r0, #0
 8005472:	d001      	beq.n	8005478 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8005474:	f7fc ff7a 	bl	800236c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005478:	4b60      	ldr	r3, [pc, #384]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 800547a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800547c:	4b5f      	ldr	r3, [pc, #380]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 800547e:	2180      	movs	r1, #128	@ 0x80
 8005480:	0109      	lsls	r1, r1, #4
 8005482:	430a      	orrs	r2, r1
 8005484:	641a      	str	r2, [r3, #64]	@ 0x40
 8005486:	4b5d      	ldr	r3, [pc, #372]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 8005488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	4013      	ands	r3, r2
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8005494:	e0ab      	b.n	80055ee <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	2380      	movs	r3, #128	@ 0x80
 800549c:	05db      	lsls	r3, r3, #23
 800549e:	429a      	cmp	r2, r3
 80054a0:	d138      	bne.n	8005514 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054a2:	4b56      	ldr	r3, [pc, #344]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80054a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054a6:	4b55      	ldr	r3, [pc, #340]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80054a8:	2101      	movs	r1, #1
 80054aa:	430a      	orrs	r2, r1
 80054ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80054ae:	4b53      	ldr	r3, [pc, #332]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	2201      	movs	r2, #1
 80054b4:	4013      	ands	r3, r2
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ba:	4b50      	ldr	r3, [pc, #320]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80054bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054be:	4b4f      	ldr	r3, [pc, #316]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80054c0:	2101      	movs	r1, #1
 80054c2:	430a      	orrs	r2, r1
 80054c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80054c6:	4b4d      	ldr	r3, [pc, #308]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80054c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ca:	2201      	movs	r2, #1
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80054d2:	214c      	movs	r1, #76	@ 0x4c
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	2280      	movs	r2, #128	@ 0x80
 80054d8:	0212      	lsls	r2, r2, #8
 80054da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	2202      	movs	r2, #2
 80054e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	2201      	movs	r2, #1
 80054e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	2200      	movs	r2, #0
 80054ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	2202      	movs	r2, #2
 80054f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80054f4:	187a      	adds	r2, r7, r1
 80054f6:	23a0      	movs	r3, #160	@ 0xa0
 80054f8:	05db      	lsls	r3, r3, #23
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f002 fe1d 	bl	800813c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8005502:	2202      	movs	r2, #2
 8005504:	2102      	movs	r1, #2
 8005506:	200f      	movs	r0, #15
 8005508:	f002 fab8 	bl	8007a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800550c:	200f      	movs	r0, #15
 800550e:	f002 faca 	bl	8007aa6 <HAL_NVIC_EnableIRQ>
}
 8005512:	e06c      	b.n	80055ee <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a39      	ldr	r2, [pc, #228]	@ (8005600 <HAL_TIM_Base_MspInit+0x1d8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d114      	bne.n	8005548 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800551e:	4b37      	ldr	r3, [pc, #220]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 8005520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005522:	4b36      	ldr	r3, [pc, #216]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 8005524:	2102      	movs	r1, #2
 8005526:	430a      	orrs	r2, r1
 8005528:	63da      	str	r2, [r3, #60]	@ 0x3c
 800552a:	4b34      	ldr	r3, [pc, #208]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	2202      	movs	r2, #2
 8005530:	4013      	ands	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005536:	2200      	movs	r2, #0
 8005538:	2100      	movs	r1, #0
 800553a:	2010      	movs	r0, #16
 800553c:	f002 fa9e 	bl	8007a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005540:	2010      	movs	r0, #16
 8005542:	f002 fab0 	bl	8007aa6 <HAL_NVIC_EnableIRQ>
}
 8005546:	e052      	b.n	80055ee <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2d      	ldr	r2, [pc, #180]	@ (8005604 <HAL_TIM_Base_MspInit+0x1dc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d116      	bne.n	8005580 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005552:	4b2a      	ldr	r3, [pc, #168]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 8005554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005556:	4b29      	ldr	r3, [pc, #164]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 8005558:	2180      	movs	r1, #128	@ 0x80
 800555a:	0289      	lsls	r1, r1, #10
 800555c:	430a      	orrs	r2, r1
 800555e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005560:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 8005562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	029b      	lsls	r3, r3, #10
 8005568:	4013      	ands	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800556e:	2200      	movs	r2, #0
 8005570:	2100      	movs	r1, #0
 8005572:	2015      	movs	r0, #21
 8005574:	f002 fa82 	bl	8007a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005578:	2015      	movs	r0, #21
 800557a:	f002 fa94 	bl	8007aa6 <HAL_NVIC_EnableIRQ>
}
 800557e:	e036      	b.n	80055ee <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a20      	ldr	r2, [pc, #128]	@ (8005608 <HAL_TIM_Base_MspInit+0x1e0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d116      	bne.n	80055b8 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800558a:	4b1c      	ldr	r3, [pc, #112]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 800558c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800558e:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 8005590:	2180      	movs	r1, #128	@ 0x80
 8005592:	02c9      	lsls	r1, r1, #11
 8005594:	430a      	orrs	r2, r1
 8005596:	641a      	str	r2, [r3, #64]	@ 0x40
 8005598:	4b18      	ldr	r3, [pc, #96]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 800559a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800559c:	2380      	movs	r3, #128	@ 0x80
 800559e:	02db      	lsls	r3, r3, #11
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 80055a6:	2203      	movs	r2, #3
 80055a8:	2103      	movs	r1, #3
 80055aa:	2016      	movs	r0, #22
 80055ac:	f002 fa66 	bl	8007a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80055b0:	2016      	movs	r0, #22
 80055b2:	f002 fa78 	bl	8007aa6 <HAL_NVIC_EnableIRQ>
}
 80055b6:	e01a      	b.n	80055ee <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a13      	ldr	r2, [pc, #76]	@ (800560c <HAL_TIM_Base_MspInit+0x1e4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d115      	bne.n	80055ee <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 80055c2:	4b0e      	ldr	r3, [pc, #56]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80055c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c6:	4b0d      	ldr	r3, [pc, #52]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80055c8:	2180      	movs	r1, #128	@ 0x80
 80055ca:	0209      	lsls	r1, r1, #8
 80055cc:	430a      	orrs	r2, r1
 80055ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80055d0:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <HAL_TIM_Base_MspInit+0x1d4>)
 80055d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055d4:	2380      	movs	r3, #128	@ 0x80
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	4013      	ands	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 80055de:	2203      	movs	r2, #3
 80055e0:	2103      	movs	r1, #3
 80055e2:	2013      	movs	r0, #19
 80055e4:	f002 fa4a 	bl	8007a7c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80055e8:	2013      	movs	r0, #19
 80055ea:	f002 fa5c 	bl	8007aa6 <HAL_NVIC_EnableIRQ>
}
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	46bd      	mov	sp, r7
 80055f2:	b019      	add	sp, #100	@ 0x64
 80055f4:	bd90      	pop	{r4, r7, pc}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40021000 	.word	0x40021000
 8005600:	40000400 	.word	0x40000400
 8005604:	40014400 	.word	0x40014400
 8005608:	40014800 	.word	0x40014800
 800560c:	40002000 	.word	0x40002000

08005610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b08b      	sub	sp, #44	@ 0x2c
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005618:	2414      	movs	r4, #20
 800561a:	193b      	adds	r3, r7, r4
 800561c:	0018      	movs	r0, r3
 800561e:	2314      	movs	r3, #20
 8005620:	001a      	movs	r2, r3
 8005622:	2100      	movs	r1, #0
 8005624:	f008 f880 	bl	800d728 <memset>
  if(htim->Instance==TIM1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a25      	ldr	r2, [pc, #148]	@ (80056c4 <HAL_TIM_MspPostInit+0xb4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d144      	bne.n	80056bc <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005632:	4b25      	ldr	r3, [pc, #148]	@ (80056c8 <HAL_TIM_MspPostInit+0xb8>)
 8005634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <HAL_TIM_MspPostInit+0xb8>)
 8005638:	2101      	movs	r1, #1
 800563a:	430a      	orrs	r2, r1
 800563c:	635a      	str	r2, [r3, #52]	@ 0x34
 800563e:	4b22      	ldr	r3, [pc, #136]	@ (80056c8 <HAL_TIM_MspPostInit+0xb8>)
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	2201      	movs	r2, #1
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800564a:	4b1f      	ldr	r3, [pc, #124]	@ (80056c8 <HAL_TIM_MspPostInit+0xb8>)
 800564c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800564e:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <HAL_TIM_MspPostInit+0xb8>)
 8005650:	2102      	movs	r1, #2
 8005652:	430a      	orrs	r2, r1
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34
 8005656:	4b1c      	ldr	r3, [pc, #112]	@ (80056c8 <HAL_TIM_MspPostInit+0xb8>)
 8005658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565a:	2202      	movs	r2, #2
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8005662:	193b      	adds	r3, r7, r4
 8005664:	2280      	movs	r2, #128	@ 0x80
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800566a:	193b      	adds	r3, r7, r4
 800566c:	2202      	movs	r2, #2
 800566e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005670:	193b      	adds	r3, r7, r4
 8005672:	2200      	movs	r2, #0
 8005674:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005676:	193b      	adds	r3, r7, r4
 8005678:	2200      	movs	r2, #0
 800567a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800567c:	193b      	adds	r3, r7, r4
 800567e:	2202      	movs	r2, #2
 8005680:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005682:	193a      	adds	r2, r7, r4
 8005684:	23a0      	movs	r3, #160	@ 0xa0
 8005686:	05db      	lsls	r3, r3, #23
 8005688:	0011      	movs	r1, r2
 800568a:	0018      	movs	r0, r3
 800568c:	f002 fd56 	bl	800813c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8005690:	0021      	movs	r1, r4
 8005692:	187b      	adds	r3, r7, r1
 8005694:	2208      	movs	r2, #8
 8005696:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005698:	187b      	adds	r3, r7, r1
 800569a:	2202      	movs	r2, #2
 800569c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569e:	187b      	adds	r3, r7, r1
 80056a0:	2200      	movs	r2, #0
 80056a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a4:	187b      	adds	r3, r7, r1
 80056a6:	2200      	movs	r2, #0
 80056a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80056aa:	187b      	adds	r3, r7, r1
 80056ac:	2201      	movs	r2, #1
 80056ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80056b0:	187b      	adds	r3, r7, r1
 80056b2:	4a06      	ldr	r2, [pc, #24]	@ (80056cc <HAL_TIM_MspPostInit+0xbc>)
 80056b4:	0019      	movs	r1, r3
 80056b6:	0010      	movs	r0, r2
 80056b8:	f002 fd40 	bl	800813c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80056bc:	46c0      	nop			@ (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b00b      	add	sp, #44	@ 0x2c
 80056c2:	bd90      	pop	{r4, r7, pc}
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40021000 	.word	0x40021000
 80056cc:	50000400 	.word	0x50000400

080056d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b08b      	sub	sp, #44	@ 0x2c
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d8:	2414      	movs	r4, #20
 80056da:	193b      	adds	r3, r7, r4
 80056dc:	0018      	movs	r0, r3
 80056de:	2314      	movs	r3, #20
 80056e0:	001a      	movs	r2, r3
 80056e2:	2100      	movs	r1, #0
 80056e4:	f008 f820 	bl	800d728 <memset>
  if(huart->Instance==USART2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005818 <HAL_UART_MspInit+0x148>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d000      	beq.n	80056f4 <HAL_UART_MspInit+0x24>
 80056f2:	e08d      	b.n	8005810 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056f4:	4b49      	ldr	r3, [pc, #292]	@ (800581c <HAL_UART_MspInit+0x14c>)
 80056f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056f8:	4b48      	ldr	r3, [pc, #288]	@ (800581c <HAL_UART_MspInit+0x14c>)
 80056fa:	2180      	movs	r1, #128	@ 0x80
 80056fc:	0289      	lsls	r1, r1, #10
 80056fe:	430a      	orrs	r2, r1
 8005700:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005702:	4b46      	ldr	r3, [pc, #280]	@ (800581c <HAL_UART_MspInit+0x14c>)
 8005704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005706:	2380      	movs	r3, #128	@ 0x80
 8005708:	029b      	lsls	r3, r3, #10
 800570a:	4013      	ands	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005710:	4b42      	ldr	r3, [pc, #264]	@ (800581c <HAL_UART_MspInit+0x14c>)
 8005712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005714:	4b41      	ldr	r3, [pc, #260]	@ (800581c <HAL_UART_MspInit+0x14c>)
 8005716:	2101      	movs	r1, #1
 8005718:	430a      	orrs	r2, r1
 800571a:	635a      	str	r2, [r3, #52]	@ 0x34
 800571c:	4b3f      	ldr	r3, [pc, #252]	@ (800581c <HAL_UART_MspInit+0x14c>)
 800571e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005720:	2201      	movs	r2, #1
 8005722:	4013      	ands	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8005728:	0021      	movs	r1, r4
 800572a:	187b      	adds	r3, r7, r1
 800572c:	220c      	movs	r2, #12
 800572e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005730:	187b      	adds	r3, r7, r1
 8005732:	2202      	movs	r2, #2
 8005734:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005736:	187b      	adds	r3, r7, r1
 8005738:	2201      	movs	r2, #1
 800573a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800573c:	187b      	adds	r3, r7, r1
 800573e:	2200      	movs	r2, #0
 8005740:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005742:	187b      	adds	r3, r7, r1
 8005744:	2201      	movs	r2, #1
 8005746:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005748:	187a      	adds	r2, r7, r1
 800574a:	23a0      	movs	r3, #160	@ 0xa0
 800574c:	05db      	lsls	r3, r3, #23
 800574e:	0011      	movs	r1, r2
 8005750:	0018      	movs	r0, r3
 8005752:	f002 fcf3 	bl	800813c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005756:	4b32      	ldr	r3, [pc, #200]	@ (8005820 <HAL_UART_MspInit+0x150>)
 8005758:	4a32      	ldr	r2, [pc, #200]	@ (8005824 <HAL_UART_MspInit+0x154>)
 800575a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800575c:	4b30      	ldr	r3, [pc, #192]	@ (8005820 <HAL_UART_MspInit+0x150>)
 800575e:	2234      	movs	r2, #52	@ 0x34
 8005760:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005762:	4b2f      	ldr	r3, [pc, #188]	@ (8005820 <HAL_UART_MspInit+0x150>)
 8005764:	2200      	movs	r2, #0
 8005766:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005768:	4b2d      	ldr	r3, [pc, #180]	@ (8005820 <HAL_UART_MspInit+0x150>)
 800576a:	2200      	movs	r2, #0
 800576c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800576e:	4b2c      	ldr	r3, [pc, #176]	@ (8005820 <HAL_UART_MspInit+0x150>)
 8005770:	2280      	movs	r2, #128	@ 0x80
 8005772:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005774:	4b2a      	ldr	r3, [pc, #168]	@ (8005820 <HAL_UART_MspInit+0x150>)
 8005776:	2200      	movs	r2, #0
 8005778:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800577a:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <HAL_UART_MspInit+0x150>)
 800577c:	2200      	movs	r2, #0
 800577e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005780:	4b27      	ldr	r3, [pc, #156]	@ (8005820 <HAL_UART_MspInit+0x150>)
 8005782:	2200      	movs	r2, #0
 8005784:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005786:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <HAL_UART_MspInit+0x150>)
 8005788:	2280      	movs	r2, #128	@ 0x80
 800578a:	0152      	lsls	r2, r2, #5
 800578c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800578e:	4b24      	ldr	r3, [pc, #144]	@ (8005820 <HAL_UART_MspInit+0x150>)
 8005790:	0018      	movs	r0, r3
 8005792:	f002 f9b5 	bl	8007b00 <HAL_DMA_Init>
 8005796:	1e03      	subs	r3, r0, #0
 8005798:	d001      	beq.n	800579e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800579a:	f7fc fde7 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2180      	movs	r1, #128	@ 0x80
 80057a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005820 <HAL_UART_MspInit+0x150>)
 80057a4:	505a      	str	r2, [r3, r1]
 80057a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005820 <HAL_UART_MspInit+0x150>)
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80057ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057ae:	4a1f      	ldr	r2, [pc, #124]	@ (800582c <HAL_UART_MspInit+0x15c>)
 80057b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80057b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057b4:	2235      	movs	r2, #53	@ 0x35
 80057b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057ba:	2210      	movs	r2, #16
 80057bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057be:	4b1a      	ldr	r3, [pc, #104]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057c4:	4b18      	ldr	r3, [pc, #96]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057c6:	2280      	movs	r2, #128	@ 0x80
 80057c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057ca:	4b17      	ldr	r3, [pc, #92]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057d0:	4b15      	ldr	r3, [pc, #84]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80057d6:	4b14      	ldr	r3, [pc, #80]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057d8:	2200      	movs	r2, #0
 80057da:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057dc:	4b12      	ldr	r3, [pc, #72]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057de:	2280      	movs	r2, #128	@ 0x80
 80057e0:	0152      	lsls	r2, r2, #5
 80057e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80057e4:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057e6:	0018      	movs	r0, r3
 80057e8:	f002 f98a 	bl	8007b00 <HAL_DMA_Init>
 80057ec:	1e03      	subs	r3, r0, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 80057f0:	f7fc fdbc 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80057fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <HAL_UART_MspInit+0x158>)
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8005800:	2201      	movs	r2, #1
 8005802:	2101      	movs	r1, #1
 8005804:	201c      	movs	r0, #28
 8005806:	f002 f939 	bl	8007a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800580a:	201c      	movs	r0, #28
 800580c:	f002 f94b 	bl	8007aa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005810:	46c0      	nop			@ (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b00b      	add	sp, #44	@ 0x2c
 8005816:	bd90      	pop	{r4, r7, pc}
 8005818:	40004400 	.word	0x40004400
 800581c:	40021000 	.word	0x40021000
 8005820:	20000b14 	.word	0x20000b14
 8005824:	4002001c 	.word	0x4002001c
 8005828:	20000b70 	.word	0x20000b70
 800582c:	40020030 	.word	0x40020030

08005830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005834:	46c0      	nop			@ (mov r8, r8)
 8005836:	e7fd      	b.n	8005834 <NMI_Handler+0x4>

08005838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800583c:	46c0      	nop			@ (mov r8, r8)
 800583e:	e7fd      	b.n	800583c <HardFault_Handler+0x4>

08005840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005844:	46c0      	nop			@ (mov r8, r8)
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005858:	f000 fdfc 	bl	8006454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800585c:	46c0      	nop			@ (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8005866:	2080      	movs	r0, #128	@ 0x80
 8005868:	f002 fe06 	bl	8008478 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800586c:	46c0      	nop			@ (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005878:	4b03      	ldr	r3, [pc, #12]	@ (8005888 <DMA1_Channel1_IRQHandler+0x14>)
 800587a:	0018      	movs	r0, r3
 800587c:	f002 fb1c 	bl	8007eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005880:	46c0      	nop			@ (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	20000584 	.word	0x20000584

0800588c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005890:	4b05      	ldr	r3, [pc, #20]	@ (80058a8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005892:	0018      	movs	r0, r3
 8005894:	f002 fb10 	bl	8007eb8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005898:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <DMA1_Channel2_3_IRQHandler+0x20>)
 800589a:	0018      	movs	r0, r3
 800589c:	f002 fb0c 	bl	8007eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80058a0:	46c0      	nop			@ (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	20000b14 	.word	0x20000b14
 80058ac:	20000b70 	.word	0x20000b70

080058b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058b4:	4b03      	ldr	r3, [pc, #12]	@ (80058c4 <TIM2_IRQHandler+0x14>)
 80058b6:	0018      	movs	r0, r3
 80058b8:	f004 fef0 	bl	800a69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058bc:	46c0      	nop			@ (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	20000814 	.word	0x20000814

080058c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80058cc:	4b03      	ldr	r3, [pc, #12]	@ (80058dc <TIM3_IRQHandler+0x14>)
 80058ce:	0018      	movs	r0, r3
 80058d0:	f004 fee4 	bl	800a69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80058d4:	46c0      	nop			@ (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	200008d0 	.word	0x200008d0

080058e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80058e4:	4b03      	ldr	r3, [pc, #12]	@ (80058f4 <TIM16_IRQHandler+0x14>)
 80058e6:	0018      	movs	r0, r3
 80058e8:	f004 fed8 	bl	800a69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80058ec:	46c0      	nop			@ (mov r8, r8)
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	20000758 	.word	0x20000758

080058f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058fc:	4b03      	ldr	r3, [pc, #12]	@ (800590c <USART2_IRQHandler+0x14>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f006 fc4e 	bl	800c1a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005904:	46c0      	nop			@ (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	20000a48 	.word	0x20000a48

08005910 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005914:	4b03      	ldr	r3, [pc, #12]	@ (8005924 <LPTIM1_IRQHandler+0x14>)
 8005916:	0018      	movs	r0, r3
 8005918:	f002 ff1c 	bl	8008754 <HAL_LPTIM_IRQHandler>
}
 800591c:	46c0      	nop			@ (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	20000bcc 	.word	0x20000bcc

08005928 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800592c:	4b03      	ldr	r3, [pc, #12]	@ (800593c <TIM17_IRQHandler+0x14>)
 800592e:	0018      	movs	r0, r3
 8005930:	f004 feb4 	bl	800a69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005934:	46c0      	nop			@ (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	46c0      	nop			@ (mov r8, r8)
 800593c:	2000069c 	.word	0x2000069c

08005940 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005944:	4b03      	ldr	r3, [pc, #12]	@ (8005954 <TIM14_IRQHandler+0x14>)
 8005946:	0018      	movs	r0, r3
 8005948:	f004 fea8 	bl	800a69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800594c:	46c0      	nop			@ (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	200005e0 	.word	0x200005e0

08005958 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	5c9b      	ldrb	r3, [r3, r2]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d107      	bne.n	800597c <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	8b5b      	ldrh	r3, [r3, #26]
 8005970:	b29b      	uxth	r3, r3
 8005972:	18db      	adds	r3, r3, r3
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	839a      	strh	r2, [r3, #28]
 800597a:	e00a      	b.n	8005992 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	5c9b      	ldrb	r3, [r3, r2]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8b5b      	ldrh	r3, [r3, #26]
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8005992:	2301      	movs	r3, #1
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}

0800599c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80059a4:	2317      	movs	r3, #23
 80059a6:	18fb      	adds	r3, r7, r3
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80059ac:	2316      	movs	r3, #22
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 80059b4:	2315      	movs	r3, #21
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 80059bc:	2114      	movs	r1, #20
 80059be:	187b      	adds	r3, r7, r1
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	899b      	ldrh	r3, [r3, #12]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80059cc:	d803      	bhi.n	80059d6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	e003      	b.n	80059de <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 80059d6:	2314      	movs	r3, #20
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	799b      	ldrb	r3, [r3, #6]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d004      	beq.n	80059f2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	799b      	ldrb	r3, [r3, #6]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d146      	bne.n	8005a80 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	7c1b      	ldrb	r3, [r3, #16]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7c5b      	ldrb	r3, [r3, #17]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7c1b      	ldrb	r3, [r3, #16]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d113      	bne.n	8005a38 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7c5b      	ldrb	r3, [r3, #17]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10e      	bne.n	8005a38 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8005a1a:	2314      	movs	r3, #20
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005a24:	2316      	movs	r3, #22
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	2201      	movs	r2, #1
 8005a2a:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005a2c:	e027      	b.n	8005a7e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005a2e:	2316      	movs	r3, #22
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005a36:	e022      	b.n	8005a7e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7c1b      	ldrb	r3, [r3, #16]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7c5b      	ldrb	r3, [r3, #17]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d009      	beq.n	8005a60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7c1b      	ldrb	r3, [r3, #16]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d13c      	bne.n	8005ad0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	7c5b      	ldrb	r3, [r3, #17]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d137      	bne.n	8005ad0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8005a60:	2314      	movs	r3, #20
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 8005a6a:	2316      	movs	r3, #22
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005a72:	e02d      	b.n	8005ad0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005a74:	2316      	movs	r3, #22
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	2201      	movs	r2, #1
 8005a7a:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005a7c:	e028      	b.n	8005ad0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005a7e:	e027      	b.n	8005ad0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	799b      	ldrb	r3, [r3, #6]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d123      	bne.n	8005ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7c1b      	ldrb	r3, [r3, #16]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10e      	bne.n	8005ab2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8005a94:	2314      	movs	r3, #20
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d104      	bne.n	8005aa8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005a9e:	2316      	movs	r3, #22
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e014      	b.n	8005ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005aa8:	2316      	movs	r3, #22
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e00f      	b.n	8005ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 8005ab2:	2314      	movs	r3, #20
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 8005abc:	2316      	movs	r3, #22
 8005abe:	18fb      	adds	r3, r7, r3
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e005      	b.n	8005ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005ac6:	2316      	movs	r3, #22
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e000      	b.n	8005ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005ad0:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8005ad2:	2314      	movs	r3, #20
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	899b      	ldrh	r3, [r3, #12]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	2315      	movs	r3, #21
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	217f      	movs	r1, #127	@ 0x7f
 8005aea:	1a8a      	subs	r2, r1, r2
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e007      	b.n	8005b00 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	899b      	ldrh	r3, [r3, #12]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	2315      	movs	r3, #21
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	3a80      	subs	r2, #128	@ 0x80
 8005afe:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	8a5b      	ldrh	r3, [r3, #18]
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	200e      	movs	r0, #14
 8005b08:	183b      	adds	r3, r7, r0
 8005b0a:	2180      	movs	r1, #128	@ 0x80
 8005b0c:	0049      	lsls	r1, r1, #1
 8005b0e:	1a8a      	subs	r2, r1, r2
 8005b10:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8005b12:	0001      	movs	r1, r0
 8005b14:	187b      	adds	r3, r7, r1
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	2215      	movs	r2, #21
 8005b1a:	18ba      	adds	r2, r7, r2
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	435a      	muls	r2, r3
 8005b20:	0013      	movs	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	189b      	adds	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	10da      	asrs	r2, r3, #3
 8005b2a:	240c      	movs	r4, #12
 8005b2c:	193b      	adds	r3, r7, r4
 8005b2e:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005b30:	250a      	movs	r5, #10
 8005b32:	197b      	adds	r3, r7, r5
 8005b34:	193a      	adds	r2, r7, r4
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	0a12      	lsrs	r2, r2, #8
 8005b3a:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8005b3c:	2312      	movs	r3, #18
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	0008      	movs	r0, r1
 8005b42:	1879      	adds	r1, r7, r1
 8005b44:	197a      	adds	r2, r7, r5
 8005b46:	8809      	ldrh	r1, [r1, #0]
 8005b48:	8812      	ldrh	r2, [r2, #0]
 8005b4a:	1a8a      	subs	r2, r1, r2
 8005b4c:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8005b4e:	2610      	movs	r6, #16
 8005b50:	19bb      	adds	r3, r7, r6
 8005b52:	1839      	adds	r1, r7, r0
 8005b54:	197a      	adds	r2, r7, r5
 8005b56:	8809      	ldrh	r1, [r1, #0]
 8005b58:	8812      	ldrh	r2, [r2, #0]
 8005b5a:	188a      	adds	r2, r1, r2
 8005b5c:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8005b5e:	19bb      	adds	r3, r7, r6
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	2bff      	cmp	r3, #255	@ 0xff
 8005b64:	d90f      	bls.n	8005b86 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005b66:	19bb      	adds	r3, r7, r6
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	2380      	movs	r3, #128	@ 0x80
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d000      	beq.n	8005b74 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 8005b72:	e0b0      	b.n	8005cd6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8005b74:	193b      	adds	r3, r7, r4
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	2108      	movs	r1, #8
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f000 fb80 	bl	8006280 <unsigned_bitwise_modulo>
 8005b80:	1e03      	subs	r3, r0, #0
 8005b82:	d000      	beq.n	8005b86 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005b84:	e0a7      	b.n	8005cd6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005b86:	230c      	movs	r3, #12
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	2108      	movs	r1, #8
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f000 fb76 	bl	8006280 <unsigned_bitwise_modulo>
 8005b94:	0003      	movs	r3, r0
 8005b96:	2b80      	cmp	r3, #128	@ 0x80
 8005b98:	d117      	bne.n	8005bca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005b9a:	2316      	movs	r3, #22
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d104      	bne.n	8005bae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8005ba4:	2317      	movs	r3, #23
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	2202      	movs	r2, #2
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	e008      	b.n	8005bc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005bae:	2316      	movs	r3, #22
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d103      	bne.n	8005bc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005bb8:	2317      	movs	r3, #23
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005bc8:	e21f      	b.n	800600a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005bca:	230c      	movs	r3, #12
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	2108      	movs	r1, #8
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 fb54 	bl	8006280 <unsigned_bitwise_modulo>
 8005bd8:	1e03      	subs	r3, r0, #0
 8005bda:	d121      	bne.n	8005c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005bdc:	2212      	movs	r2, #18
 8005bde:	18bb      	adds	r3, r7, r2
 8005be0:	18ba      	adds	r2, r7, r2
 8005be2:	8812      	ldrh	r2, [r2, #0]
 8005be4:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005be6:	2210      	movs	r2, #16
 8005be8:	18bb      	adds	r3, r7, r2
 8005bea:	18ba      	adds	r2, r7, r2
 8005bec:	8812      	ldrh	r2, [r2, #0]
 8005bee:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005bf0:	2316      	movs	r3, #22
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005bfa:	2317      	movs	r3, #23
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e008      	b.n	8005c16 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005c04:	2316      	movs	r3, #22
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d103      	bne.n	8005c16 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c0e:	2317      	movs	r3, #23
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005c1e:	e1f4      	b.n	800600a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005c20:	230c      	movs	r3, #12
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	2108      	movs	r1, #8
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f000 fb29 	bl	8006280 <unsigned_bitwise_modulo>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c32:	d821      	bhi.n	8005c78 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005c34:	2212      	movs	r2, #18
 8005c36:	18bb      	adds	r3, r7, r2
 8005c38:	18ba      	adds	r2, r7, r2
 8005c3a:	8812      	ldrh	r2, [r2, #0]
 8005c3c:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005c3e:	2210      	movs	r2, #16
 8005c40:	18bb      	adds	r3, r7, r2
 8005c42:	18ba      	adds	r2, r7, r2
 8005c44:	8812      	ldrh	r2, [r2, #0]
 8005c46:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005c48:	2316      	movs	r3, #22
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c52:	2317      	movs	r3, #23
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	e008      	b.n	8005c6e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005c5c:	2316      	movs	r3, #22
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d103      	bne.n	8005c6e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c66:	2317      	movs	r3, #23
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	2100      	movs	r1, #0
 8005c74:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005c76:	e1c8      	b.n	800600a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005c78:	230c      	movs	r3, #12
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	2108      	movs	r1, #8
 8005c80:	0018      	movs	r0, r3
 8005c82:	f000 fafd 	bl	8006280 <unsigned_bitwise_modulo>
 8005c86:	0003      	movs	r3, r0
 8005c88:	2b80      	cmp	r3, #128	@ 0x80
 8005c8a:	d800      	bhi.n	8005c8e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8005c8c:	e1bd      	b.n	800600a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005c8e:	2212      	movs	r2, #18
 8005c90:	18bb      	adds	r3, r7, r2
 8005c92:	18ba      	adds	r2, r7, r2
 8005c94:	8812      	ldrh	r2, [r2, #0]
 8005c96:	3a01      	subs	r2, #1
 8005c98:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005c9a:	2210      	movs	r2, #16
 8005c9c:	18bb      	adds	r3, r7, r2
 8005c9e:	18ba      	adds	r2, r7, r2
 8005ca0:	8812      	ldrh	r2, [r2, #0]
 8005ca2:	3201      	adds	r2, #1
 8005ca4:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005ca6:	2316      	movs	r3, #22
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005cb0:	2317      	movs	r3, #23
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	e008      	b.n	8005ccc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005cba:	2316      	movs	r3, #22
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d103      	bne.n	8005ccc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005cc4:	2317      	movs	r3, #23
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005cd4:	e199      	b.n	800600a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8005cd6:	2110      	movs	r1, #16
 8005cd8:	187b      	adds	r3, r7, r1
 8005cda:	881a      	ldrh	r2, [r3, #0]
 8005cdc:	2380      	movs	r3, #128	@ 0x80
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d810      	bhi.n	8005d06 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005ce4:	187b      	adds	r3, r7, r1
 8005ce6:	881a      	ldrh	r2, [r3, #0]
 8005ce8:	2380      	movs	r3, #128	@ 0x80
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d000      	beq.n	8005cf2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8005cf0:	e18c      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	2108      	movs	r1, #8
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 fac0 	bl	8006280 <unsigned_bitwise_modulo>
 8005d00:	1e03      	subs	r3, r0, #0
 8005d02:	d100      	bne.n	8005d06 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005d04:	e182      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005d06:	230c      	movs	r3, #12
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	2108      	movs	r1, #8
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f000 fab6 	bl	8006280 <unsigned_bitwise_modulo>
 8005d14:	0003      	movs	r3, r0
 8005d16:	2b80      	cmp	r3, #128	@ 0x80
 8005d18:	d159      	bne.n	8005dce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005d1a:	2212      	movs	r2, #18
 8005d1c:	18bb      	adds	r3, r7, r2
 8005d1e:	18ba      	adds	r2, r7, r2
 8005d20:	8812      	ldrh	r2, [r2, #0]
 8005d22:	3a01      	subs	r2, #1
 8005d24:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005d26:	2110      	movs	r1, #16
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	187a      	adds	r2, r7, r1
 8005d2c:	8812      	ldrh	r2, [r2, #0]
 8005d2e:	3201      	adds	r2, #1
 8005d30:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005d32:	000c      	movs	r4, r1
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f000 faa0 	bl	8006280 <unsigned_bitwise_modulo>
 8005d40:	1e03      	subs	r3, r0, #0
 8005d42:	d121      	bne.n	8005d88 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005d44:	193b      	adds	r3, r7, r4
 8005d46:	193a      	adds	r2, r7, r4
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	0852      	lsrs	r2, r2, #1
 8005d4c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005d4e:	2316      	movs	r3, #22
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d108      	bne.n	8005d6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d58:	2317      	movs	r3, #23
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	2100      	movs	r1, #0
 8005d66:	5499      	strb	r1, [r3, r2]
 8005d68:	e150      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d6a:	2316      	movs	r3, #22
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d000      	beq.n	8005d76 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8005d74:	e14a      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d76:	2317      	movs	r3, #23
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	2101      	movs	r1, #1
 8005d84:	5499      	strb	r1, [r3, r2]
 8005d86:	e141      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005d88:	2210      	movs	r2, #16
 8005d8a:	18bb      	adds	r3, r7, r2
 8005d8c:	18ba      	adds	r2, r7, r2
 8005d8e:	8812      	ldrh	r2, [r2, #0]
 8005d90:	0852      	lsrs	r2, r2, #1
 8005d92:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005d94:	2316      	movs	r3, #22
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d108      	bne.n	8005db0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d9e:	2317      	movs	r3, #23
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	2100      	movs	r1, #0
 8005dac:	5499      	strb	r1, [r3, r2]
 8005dae:	e12d      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005db0:	2316      	movs	r3, #22
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d000      	beq.n	8005dbc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 8005dba:	e127      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005dbc:	2317      	movs	r3, #23
 8005dbe:	18fb      	adds	r3, r7, r3
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	2101      	movs	r1, #1
 8005dca:	5499      	strb	r1, [r3, r2]
 8005dcc:	e11e      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005dce:	230c      	movs	r3, #12
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	2108      	movs	r1, #8
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 fa52 	bl	8006280 <unsigned_bitwise_modulo>
 8005ddc:	1e03      	subs	r3, r0, #0
 8005dde:	d152      	bne.n	8005e86 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005de0:	2212      	movs	r2, #18
 8005de2:	18bb      	adds	r3, r7, r2
 8005de4:	18ba      	adds	r2, r7, r2
 8005de6:	8812      	ldrh	r2, [r2, #0]
 8005de8:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005dea:	2410      	movs	r4, #16
 8005dec:	193b      	adds	r3, r7, r4
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	2101      	movs	r1, #1
 8005df2:	0018      	movs	r0, r3
 8005df4:	f000 fa44 	bl	8006280 <unsigned_bitwise_modulo>
 8005df8:	1e03      	subs	r3, r0, #0
 8005dfa:	d121      	bne.n	8005e40 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005dfc:	193b      	adds	r3, r7, r4
 8005dfe:	193a      	adds	r2, r7, r4
 8005e00:	8812      	ldrh	r2, [r2, #0]
 8005e02:	0852      	lsrs	r2, r2, #1
 8005e04:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005e06:	2316      	movs	r3, #22
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d108      	bne.n	8005e22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e10:	2317      	movs	r3, #23
 8005e12:	18fb      	adds	r3, r7, r3
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	5499      	strb	r1, [r3, r2]
 8005e20:	e0f4      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005e22:	2316      	movs	r3, #22
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d000      	beq.n	8005e2e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8005e2c:	e0ee      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e2e:	2317      	movs	r3, #23
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	5499      	strb	r1, [r3, r2]
 8005e3e:	e0e5      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005e40:	2210      	movs	r2, #16
 8005e42:	18bb      	adds	r3, r7, r2
 8005e44:	18ba      	adds	r2, r7, r2
 8005e46:	8812      	ldrh	r2, [r2, #0]
 8005e48:	0852      	lsrs	r2, r2, #1
 8005e4a:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005e4c:	2316      	movs	r3, #22
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d108      	bne.n	8005e68 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e56:	2317      	movs	r3, #23
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	2100      	movs	r1, #0
 8005e64:	5499      	strb	r1, [r3, r2]
 8005e66:	e0d1      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005e68:	2316      	movs	r3, #22
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d000      	beq.n	8005e74 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8005e72:	e0cb      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005e74:	2317      	movs	r3, #23
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	2101      	movs	r1, #1
 8005e82:	5499      	strb	r1, [r3, r2]
 8005e84:	e0c2      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005e86:	230c      	movs	r3, #12
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	2108      	movs	r1, #8
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f000 f9f6 	bl	8006280 <unsigned_bitwise_modulo>
 8005e94:	0003      	movs	r3, r0
 8005e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e98:	d856      	bhi.n	8005f48 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005e9a:	2212      	movs	r2, #18
 8005e9c:	18bb      	adds	r3, r7, r2
 8005e9e:	18ba      	adds	r2, r7, r2
 8005ea0:	8812      	ldrh	r2, [r2, #0]
 8005ea2:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005ea4:	2410      	movs	r4, #16
 8005ea6:	193b      	adds	r3, r7, r4
 8005ea8:	193a      	adds	r2, r7, r4
 8005eaa:	8812      	ldrh	r2, [r2, #0]
 8005eac:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005eae:	193b      	adds	r3, r7, r4
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f000 f9e3 	bl	8006280 <unsigned_bitwise_modulo>
 8005eba:	1e03      	subs	r3, r0, #0
 8005ebc:	d121      	bne.n	8005f02 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005ebe:	193b      	adds	r3, r7, r4
 8005ec0:	193a      	adds	r2, r7, r4
 8005ec2:	8812      	ldrh	r2, [r2, #0]
 8005ec4:	0852      	lsrs	r2, r2, #1
 8005ec6:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005ec8:	2316      	movs	r3, #22
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d108      	bne.n	8005ee4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ed2:	2317      	movs	r3, #23
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	2100      	movs	r1, #0
 8005ee0:	5499      	strb	r1, [r3, r2]
 8005ee2:	e093      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005ee4:	2316      	movs	r3, #22
 8005ee6:	18fb      	adds	r3, r7, r3
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d000      	beq.n	8005ef0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 8005eee:	e08d      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ef0:	2317      	movs	r3, #23
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	2101      	movs	r1, #1
 8005efe:	5499      	strb	r1, [r3, r2]
 8005f00:	e084      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005f02:	2210      	movs	r2, #16
 8005f04:	18bb      	adds	r3, r7, r2
 8005f06:	18ba      	adds	r2, r7, r2
 8005f08:	8812      	ldrh	r2, [r2, #0]
 8005f0a:	0852      	lsrs	r2, r2, #1
 8005f0c:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005f0e:	2316      	movs	r3, #22
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d108      	bne.n	8005f2a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005f18:	2317      	movs	r3, #23
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	2100      	movs	r1, #0
 8005f26:	5499      	strb	r1, [r3, r2]
 8005f28:	e070      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005f2a:	2316      	movs	r3, #22
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d000      	beq.n	8005f36 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8005f34:	e06a      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005f36:	2317      	movs	r3, #23
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	2101      	movs	r1, #1
 8005f44:	5499      	strb	r1, [r3, r2]
 8005f46:	e061      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005f48:	230c      	movs	r3, #12
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	2108      	movs	r1, #8
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 f995 	bl	8006280 <unsigned_bitwise_modulo>
 8005f56:	0003      	movs	r3, r0
 8005f58:	2b80      	cmp	r3, #128	@ 0x80
 8005f5a:	d957      	bls.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005f5c:	2212      	movs	r2, #18
 8005f5e:	18bb      	adds	r3, r7, r2
 8005f60:	18ba      	adds	r2, r7, r2
 8005f62:	8812      	ldrh	r2, [r2, #0]
 8005f64:	3a01      	subs	r2, #1
 8005f66:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005f68:	2410      	movs	r4, #16
 8005f6a:	193b      	adds	r3, r7, r4
 8005f6c:	193a      	adds	r2, r7, r4
 8005f6e:	8812      	ldrh	r2, [r2, #0]
 8005f70:	3201      	adds	r2, #1
 8005f72:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005f74:	193b      	adds	r3, r7, r4
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	2101      	movs	r1, #1
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f000 f980 	bl	8006280 <unsigned_bitwise_modulo>
 8005f80:	1e03      	subs	r3, r0, #0
 8005f82:	d120      	bne.n	8005fc6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005f84:	193b      	adds	r3, r7, r4
 8005f86:	193a      	adds	r2, r7, r4
 8005f88:	8812      	ldrh	r2, [r2, #0]
 8005f8a:	0852      	lsrs	r2, r2, #1
 8005f8c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005f8e:	2316      	movs	r3, #22
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005f98:	2317      	movs	r3, #23
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]
 8005fa8:	e030      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005faa:	2316      	movs	r3, #22
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d12b      	bne.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005fb4:	2317      	movs	r3, #23
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	5499      	strb	r1, [r3, r2]
 8005fc4:	e022      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	18bb      	adds	r3, r7, r2
 8005fca:	18ba      	adds	r2, r7, r2
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	0852      	lsrs	r2, r2, #1
 8005fd0:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005fd2:	2316      	movs	r3, #22
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d108      	bne.n	8005fee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005fdc:	2317      	movs	r3, #23
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	2100      	movs	r1, #0
 8005fea:	5499      	strb	r1, [r3, r2]
 8005fec:	e00e      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005fee:	2316      	movs	r3, #22
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d109      	bne.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005ff8:	2317      	movs	r3, #23
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	2101      	movs	r1, #1
 8006006:	5499      	strb	r1, [r3, r2]
 8006008:	e000      	b.n	800600c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800600a:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 800600c:	2316      	movs	r3, #22
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d152      	bne.n	80060bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8006016:	2317      	movs	r3, #23
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006020:	2312      	movs	r3, #18
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	2280      	movs	r2, #128	@ 0x80
 8006028:	0052      	lsls	r2, r2, #1
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	b29a      	uxth	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	829a      	strh	r2, [r3, #20]
 8006032:	e099      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006034:	2317      	movs	r3, #23
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d11b      	bne.n	8006076 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	89db      	ldrh	r3, [r3, #14]
 8006042:	b29b      	uxth	r3, r3
 8006044:	2101      	movs	r1, #1
 8006046:	0018      	movs	r0, r3
 8006048:	f000 f91a 	bl	8006280 <unsigned_bitwise_modulo>
 800604c:	1e03      	subs	r3, r0, #0
 800604e:	d109      	bne.n	8006064 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006050:	2312      	movs	r3, #18
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	2280      	movs	r2, #128	@ 0x80
 8006058:	0052      	lsls	r2, r2, #1
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b29a      	uxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	829a      	strh	r2, [r3, #20]
 8006062:	e081      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8006064:	2312      	movs	r3, #18
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	22ff      	movs	r2, #255	@ 0xff
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	829a      	strh	r2, [r3, #20]
 8006074:	e078      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006076:	2317      	movs	r3, #23
 8006078:	18fb      	adds	r3, r7, r3
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d000      	beq.n	8006082 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8006080:	e072      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	89db      	ldrh	r3, [r3, #14]
 8006086:	b29b      	uxth	r3, r3
 8006088:	2101      	movs	r1, #1
 800608a:	0018      	movs	r0, r3
 800608c:	f000 f8f8 	bl	8006280 <unsigned_bitwise_modulo>
 8006090:	1e03      	subs	r3, r0, #0
 8006092:	d109      	bne.n	80060a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006094:	2312      	movs	r3, #18
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	2280      	movs	r2, #128	@ 0x80
 800609c:	0052      	lsls	r2, r2, #1
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	829a      	strh	r2, [r3, #20]
 80060a6:	e05f      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 80060a8:	2312      	movs	r3, #18
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	2202      	movs	r2, #2
 80060b0:	32ff      	adds	r2, #255	@ 0xff
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	829a      	strh	r2, [r3, #20]
 80060ba:	e055      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 80060bc:	2316      	movs	r3, #22
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d150      	bne.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80060c6:	2317      	movs	r3, #23
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d109      	bne.n	80060e4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80060d0:	2310      	movs	r3, #16
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	2280      	movs	r2, #128	@ 0x80
 80060d8:	0052      	lsls	r2, r2, #1
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	829a      	strh	r2, [r3, #20]
 80060e2:	e041      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80060e4:	2317      	movs	r3, #23
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d11b      	bne.n	8006126 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	89db      	ldrh	r3, [r3, #14]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2101      	movs	r1, #1
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 f8c2 	bl	8006280 <unsigned_bitwise_modulo>
 80060fc:	1e03      	subs	r3, r0, #0
 80060fe:	d109      	bne.n	8006114 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8006100:	2310      	movs	r3, #16
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	2280      	movs	r2, #128	@ 0x80
 8006108:	0052      	lsls	r2, r2, #1
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	829a      	strh	r2, [r3, #20]
 8006112:	e029      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8006114:	2310      	movs	r3, #16
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	22ff      	movs	r2, #255	@ 0xff
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	b29a      	uxth	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	829a      	strh	r2, [r3, #20]
 8006124:	e020      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006126:	2317      	movs	r3, #23
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d11b      	bne.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	89db      	ldrh	r3, [r3, #14]
 8006134:	b29b      	uxth	r3, r3
 8006136:	2101      	movs	r1, #1
 8006138:	0018      	movs	r0, r3
 800613a:	f000 f8a1 	bl	8006280 <unsigned_bitwise_modulo>
 800613e:	1e03      	subs	r3, r0, #0
 8006140:	d109      	bne.n	8006156 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8006142:	2310      	movs	r3, #16
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	2280      	movs	r2, #128	@ 0x80
 800614a:	0052      	lsls	r2, r2, #1
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	829a      	strh	r2, [r3, #20]
 8006154:	e008      	b.n	8006168 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8006156:	2310      	movs	r3, #16
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	2202      	movs	r2, #2
 800615e:	32ff      	adds	r2, #255	@ 0xff
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	b29a      	uxth	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	0018      	movs	r0, r3
 800616c:	f7ff fbf4 	bl	8005958 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8a9b      	ldrh	r3, [r3, #20]
 8006174:	b29b      	uxth	r3, r3
 8006176:	2280      	movs	r2, #128	@ 0x80
 8006178:	0052      	lsls	r2, r2, #1
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	b29a      	uxth	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8adb      	ldrh	r3, [r3, #22]
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8b9b      	ldrh	r3, [r3, #28]
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	83da      	strh	r2, [r3, #30]

    return 1;
 800619e:	2301      	movs	r3, #1
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b007      	add	sp, #28
 80061a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80061ac:	46c0      	nop			@ (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80061b2:	b5b0      	push	{r4, r5, r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80061bc:	250f      	movs	r5, #15
 80061be:	197c      	adds	r4, r7, r5
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	0011      	movs	r1, r2
 80061c6:	0018      	movs	r0, r3
 80061c8:	f003 fd8c 	bl	8009ce4 <HAL_TIM_OC_Start_IT>
 80061cc:	0003      	movs	r3, r0
 80061ce:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 80061d0:	197b      	adds	r3, r7, r5
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <Start_OC_TIM+0x2a>

		Error_Handler();
 80061d8:	f7fc f8c8 	bl	800236c <Error_Handler>
	}

	return ok;
 80061dc:	230f      	movs	r3, #15
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	781b      	ldrb	r3, [r3, #0]
}
 80061e2:	0018      	movs	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	b004      	add	sp, #16
 80061e8:	bdb0      	pop	{r4, r5, r7, pc}

080061ea <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80061ea:	b5b0      	push	{r4, r5, r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 80061f4:	250f      	movs	r5, #15
 80061f6:	197c      	adds	r4, r7, r5
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0011      	movs	r1, r2
 80061fe:	0018      	movs	r0, r3
 8006200:	f003 fe94 	bl	8009f2c <HAL_TIM_OC_Stop_IT>
 8006204:	0003      	movs	r3, r0
 8006206:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8006208:	197b      	adds	r3, r7, r5
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <Stop_OC_TIM+0x2a>

		Error_Handler();
 8006210:	f7fc f8ac 	bl	800236c <Error_Handler>
	}

	return ok;
 8006214:	230f      	movs	r3, #15
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	781b      	ldrb	r3, [r3, #0]
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b004      	add	sp, #16
 8006220:	bdb0      	pop	{r4, r5, r7, pc}

08006222 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	0002      	movs	r2, r0
 800622a:	1dbb      	adds	r3, r7, #6
 800622c:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 800622e:	230e      	movs	r3, #14
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	2202      	movs	r2, #2
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e014      	b.n	8006262 <isPrime+0x40>
        if (x % d == 0)
 8006238:	1dba      	adds	r2, r7, #6
 800623a:	230e      	movs	r3, #14
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	8812      	ldrh	r2, [r2, #0]
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	0019      	movs	r1, r3
 8006244:	0010      	movs	r0, r2
 8006246:	f7f9 ffe3 	bl	8000210 <__aeabi_uidivmod>
 800624a:	000b      	movs	r3, r1
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <isPrime+0x34>
            return NO;
 8006252:	2300      	movs	r3, #0
 8006254:	e010      	b.n	8006278 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8006256:	210e      	movs	r1, #14
 8006258:	187b      	adds	r3, r7, r1
 800625a:	881a      	ldrh	r2, [r3, #0]
 800625c:	187b      	adds	r3, r7, r1
 800625e:	3201      	adds	r2, #1
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	220e      	movs	r2, #14
 8006264:	18bb      	adds	r3, r7, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	18ba      	adds	r2, r7, r2
 800626a:	8812      	ldrh	r2, [r2, #0]
 800626c:	435a      	muls	r2, r3
 800626e:	1dbb      	adds	r3, r7, #6
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	dde0      	ble.n	8006238 <isPrime+0x16>
    }
    return YES;
 8006276:	2301      	movs	r3, #1
}
 8006278:	0018      	movs	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b004      	add	sp, #16
 800627e:	bd80      	pop	{r7, pc}

08006280 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	000a      	movs	r2, r1
 800628a:	1cfb      	adds	r3, r7, #3
 800628c:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 800628e:	1cfb      	adds	r3, r7, #3
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2201      	movs	r2, #1
 8006294:	409a      	lsls	r2, r3
 8006296:	0013      	movs	r3, r2
 8006298:	3b01      	subs	r3, #1
 800629a:	001a      	movs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4013      	ands	r3, r2
}
 80062a0:	0018      	movs	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b002      	add	sp, #8
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80062ac:	b662      	cpsie	i
}
 80062ae:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80062b0:	2301      	movs	r3, #1
}
 80062b2:	0018      	movs	r0, r3
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	000a      	movs	r2, r1
 80062c2:	1cbb      	adds	r3, r7, #2
 80062c4:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	1cba      	adds	r2, r7, #2
 80062cc:	8812      	ldrh	r2, [r2, #0]
 80062ce:	4013      	ands	r3, r2
 80062d0:	d001      	beq.n	80062d6 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 80062d6:	2300      	movs	r3, #0
    }
}
 80062d8:	0018      	movs	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	b002      	add	sp, #8
 80062de:	bd80      	pop	{r7, pc}

080062e0 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	000a      	movs	r2, r1
 80062ea:	1cbb      	adds	r3, r7, #2
 80062ec:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	1cbb      	adds	r3, r7, #2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	601a      	str	r2, [r3, #0]
}
 80062fc:	46c0      	nop			@ (mov r8, r8)
 80062fe:	46bd      	mov	sp, r7
 8006300:	b002      	add	sp, #8
 8006302:	bd80      	pop	{r7, pc}

08006304 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	000a      	movs	r2, r1
 800630e:	1cbb      	adds	r3, r7, #2
 8006310:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	1cba      	adds	r2, r7, #2
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	43d2      	mvns	r2, r2
 800631c:	401a      	ands	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
}
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	46bd      	mov	sp, r7
 8006326:	b002      	add	sp, #8
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800632c:	480d      	ldr	r0, [pc, #52]	@ (8006364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800632e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006330:	f7ff ff3a 	bl	80061a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006334:	480c      	ldr	r0, [pc, #48]	@ (8006368 <LoopForever+0x6>)
  ldr r1, =_edata
 8006336:	490d      	ldr	r1, [pc, #52]	@ (800636c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006338:	4a0d      	ldr	r2, [pc, #52]	@ (8006370 <LoopForever+0xe>)
  movs r3, #0
 800633a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800633c:	e002      	b.n	8006344 <LoopCopyDataInit>

0800633e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800633e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006342:	3304      	adds	r3, #4

08006344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006348:	d3f9      	bcc.n	800633e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800634a:	4a0a      	ldr	r2, [pc, #40]	@ (8006374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800634c:	4c0a      	ldr	r4, [pc, #40]	@ (8006378 <LoopForever+0x16>)
  movs r3, #0
 800634e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006350:	e001      	b.n	8006356 <LoopFillZerobss>

08006352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006354:	3204      	adds	r2, #4

08006356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006358:	d3fb      	bcc.n	8006352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800635a:	f007 f9ed 	bl	800d738 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800635e:	f7fe fab1 	bl	80048c4 <main>

08006362 <LoopForever>:

LoopForever:
  b LoopForever
 8006362:	e7fe      	b.n	8006362 <LoopForever>
  ldr   r0, =_estack
 8006364:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800636c:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 8006370:	0800e22c 	.word	0x0800e22c
  ldr r2, =_sbss
 8006374:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 8006378:	20000cf0 	.word	0x20000cf0

0800637c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800637c:	e7fe      	b.n	800637c <ADC1_IRQHandler>
	...

08006380 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006386:	1dfb      	adds	r3, r7, #7
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800638c:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <HAL_Init+0x3c>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <HAL_Init+0x3c>)
 8006392:	2180      	movs	r1, #128	@ 0x80
 8006394:	0049      	lsls	r1, r1, #1
 8006396:	430a      	orrs	r2, r1
 8006398:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800639a:	2000      	movs	r0, #0
 800639c:	f000 f810 	bl	80063c0 <HAL_InitTick>
 80063a0:	1e03      	subs	r3, r0, #0
 80063a2:	d003      	beq.n	80063ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80063a4:	1dfb      	adds	r3, r7, #7
 80063a6:	2201      	movs	r2, #1
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	e001      	b.n	80063b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80063ac:	f7fe fef8 	bl	80051a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063b0:	1dfb      	adds	r3, r7, #7
 80063b2:	781b      	ldrb	r3, [r3, #0]
}
 80063b4:	0018      	movs	r0, r3
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b002      	add	sp, #8
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40022000 	.word	0x40022000

080063c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063c0:	b590      	push	{r4, r7, lr}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80063c8:	230f      	movs	r3, #15
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80063d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006448 <HAL_InitTick+0x88>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d02b      	beq.n	8006430 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80063d8:	4b1c      	ldr	r3, [pc, #112]	@ (800644c <HAL_InitTick+0x8c>)
 80063da:	681c      	ldr	r4, [r3, #0]
 80063dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006448 <HAL_InitTick+0x88>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	0019      	movs	r1, r3
 80063e2:	23fa      	movs	r3, #250	@ 0xfa
 80063e4:	0098      	lsls	r0, r3, #2
 80063e6:	f7f9 fe8d 	bl	8000104 <__udivsi3>
 80063ea:	0003      	movs	r3, r0
 80063ec:	0019      	movs	r1, r3
 80063ee:	0020      	movs	r0, r4
 80063f0:	f7f9 fe88 	bl	8000104 <__udivsi3>
 80063f4:	0003      	movs	r3, r0
 80063f6:	0018      	movs	r0, r3
 80063f8:	f001 fb75 	bl	8007ae6 <HAL_SYSTICK_Config>
 80063fc:	1e03      	subs	r3, r0, #0
 80063fe:	d112      	bne.n	8006426 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d80a      	bhi.n	800641c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	2301      	movs	r3, #1
 800640a:	425b      	negs	r3, r3
 800640c:	2200      	movs	r2, #0
 800640e:	0018      	movs	r0, r3
 8006410:	f001 fb34 	bl	8007a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006414:	4b0e      	ldr	r3, [pc, #56]	@ (8006450 <HAL_InitTick+0x90>)
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e00d      	b.n	8006438 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800641c:	230f      	movs	r3, #15
 800641e:	18fb      	adds	r3, r7, r3
 8006420:	2201      	movs	r2, #1
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	e008      	b.n	8006438 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006426:	230f      	movs	r3, #15
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e003      	b.n	8006438 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006430:	230f      	movs	r3, #15
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	2201      	movs	r2, #1
 8006436:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006438:	230f      	movs	r3, #15
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	781b      	ldrb	r3, [r3, #0]
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b005      	add	sp, #20
 8006444:	bd90      	pop	{r4, r7, pc}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	20000454 	.word	0x20000454
 800644c:	2000044c 	.word	0x2000044c
 8006450:	20000450 	.word	0x20000450

08006454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006458:	4b05      	ldr	r3, [pc, #20]	@ (8006470 <HAL_IncTick+0x1c>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	001a      	movs	r2, r3
 800645e:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <HAL_IncTick+0x20>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	18d2      	adds	r2, r2, r3
 8006464:	4b03      	ldr	r3, [pc, #12]	@ (8006474 <HAL_IncTick+0x20>)
 8006466:	601a      	str	r2, [r3, #0]
}
 8006468:	46c0      	nop			@ (mov r8, r8)
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	46c0      	nop			@ (mov r8, r8)
 8006470:	20000454 	.word	0x20000454
 8006474:	20000cec 	.word	0x20000cec

08006478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  return uwTick;
 800647c:	4b02      	ldr	r3, [pc, #8]	@ (8006488 <HAL_GetTick+0x10>)
 800647e:	681b      	ldr	r3, [r3, #0]
}
 8006480:	0018      	movs	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			@ (mov r8, r8)
 8006488:	20000cec 	.word	0x20000cec

0800648c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a05      	ldr	r2, [pc, #20]	@ (80064b0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800649c:	401a      	ands	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	46c0      	nop			@ (mov r8, r8)
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b002      	add	sp, #8
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	fe3fffff 	.word	0xfe3fffff

080064b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	23e0      	movs	r3, #224	@ 0xe0
 80064c2:	045b      	lsls	r3, r3, #17
 80064c4:	4013      	ands	r3, r2
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b002      	add	sp, #8
 80064cc:	bd80      	pop	{r7, pc}

080064ce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	2104      	movs	r1, #4
 80064e2:	400a      	ands	r2, r1
 80064e4:	2107      	movs	r1, #7
 80064e6:	4091      	lsls	r1, r2
 80064e8:	000a      	movs	r2, r1
 80064ea:	43d2      	mvns	r2, r2
 80064ec:	401a      	ands	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2104      	movs	r1, #4
 80064f2:	400b      	ands	r3, r1
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4099      	lsls	r1, r3
 80064f8:	000b      	movs	r3, r1
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006500:	46c0      	nop			@ (mov r8, r8)
 8006502:	46bd      	mov	sp, r7
 8006504:	b004      	add	sp, #16
 8006506:	bd80      	pop	{r7, pc}

08006508 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	2104      	movs	r1, #4
 800651a:	400a      	ands	r2, r1
 800651c:	2107      	movs	r1, #7
 800651e:	4091      	lsls	r1, r2
 8006520:	000a      	movs	r2, r1
 8006522:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2104      	movs	r1, #4
 8006528:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800652a:	40da      	lsrs	r2, r3
 800652c:	0013      	movs	r3, r2
}
 800652e:	0018      	movs	r0, r3
 8006530:	46bd      	mov	sp, r7
 8006532:	b002      	add	sp, #8
 8006534:	bd80      	pop	{r7, pc}

08006536 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	23c0      	movs	r3, #192	@ 0xc0
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	4013      	ands	r3, r2
 8006548:	d101      	bne.n	800654e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800654e:	2300      	movs	r3, #0
}
 8006550:	0018      	movs	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}

08006558 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	211f      	movs	r1, #31
 800656c:	400a      	ands	r2, r1
 800656e:	210f      	movs	r1, #15
 8006570:	4091      	lsls	r1, r2
 8006572:	000a      	movs	r2, r1
 8006574:	43d2      	mvns	r2, r2
 8006576:	401a      	ands	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0e9b      	lsrs	r3, r3, #26
 800657c:	210f      	movs	r1, #15
 800657e:	4019      	ands	r1, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	201f      	movs	r0, #31
 8006584:	4003      	ands	r3, r0
 8006586:	4099      	lsls	r1, r3
 8006588:	000b      	movs	r3, r1
 800658a:	431a      	orrs	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006590:	46c0      	nop			@ (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b004      	add	sp, #16
 8006596:	bd80      	pop	{r7, pc}

08006598 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	035b      	lsls	r3, r3, #13
 80065aa:	0b5b      	lsrs	r3, r3, #13
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b002      	add	sp, #8
 80065b8:	bd80      	pop	{r7, pc}

080065ba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	0352      	lsls	r2, r2, #13
 80065cc:	0b52      	lsrs	r2, r2, #13
 80065ce:	43d2      	mvns	r2, r2
 80065d0:	401a      	ands	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80065d6:	46c0      	nop			@ (mov r8, r8)
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	0212      	lsls	r2, r2, #8
 80065f4:	43d2      	mvns	r2, r2
 80065f6:	401a      	ands	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	400b      	ands	r3, r1
 8006600:	4904      	ldr	r1, [pc, #16]	@ (8006614 <LL_ADC_SetChannelSamplingTime+0x34>)
 8006602:	400b      	ands	r3, r1
 8006604:	431a      	orrs	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800660a:	46c0      	nop			@ (mov r8, r8)
 800660c:	46bd      	mov	sp, r7
 800660e:	b004      	add	sp, #16
 8006610:	bd80      	pop	{r7, pc}
 8006612:	46c0      	nop			@ (mov r8, r8)
 8006614:	07ffff00 	.word	0x07ffff00

08006618 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	4a05      	ldr	r2, [pc, #20]	@ (800663c <LL_ADC_EnableInternalRegulator+0x24>)
 8006626:	4013      	ands	r3, r2
 8006628:	2280      	movs	r2, #128	@ 0x80
 800662a:	0552      	lsls	r2, r2, #21
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	b002      	add	sp, #8
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	6fffffe8 	.word	0x6fffffe8

08006640 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	2380      	movs	r3, #128	@ 0x80
 800664e:	055b      	lsls	r3, r3, #21
 8006650:	401a      	ands	r2, r3
 8006652:	2380      	movs	r3, #128	@ 0x80
 8006654:	055b      	lsls	r3, r3, #21
 8006656:	429a      	cmp	r2, r3
 8006658:	d101      	bne.n	800665e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800665e:	2300      	movs	r3, #0
}
 8006660:	0018      	movs	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}

08006668 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4a04      	ldr	r2, [pc, #16]	@ (8006688 <LL_ADC_Enable+0x20>)
 8006676:	4013      	ands	r3, r2
 8006678:	2201      	movs	r2, #1
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006680:	46c0      	nop			@ (mov r8, r8)
 8006682:	46bd      	mov	sp, r7
 8006684:	b002      	add	sp, #8
 8006686:	bd80      	pop	{r7, pc}
 8006688:	7fffffe8 	.word	0x7fffffe8

0800668c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	4a04      	ldr	r2, [pc, #16]	@ (80066ac <LL_ADC_Disable+0x20>)
 800669a:	4013      	ands	r3, r2
 800669c:	2202      	movs	r2, #2
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80066a4:	46c0      	nop			@ (mov r8, r8)
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b002      	add	sp, #8
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	7fffffe8 	.word	0x7fffffe8

080066b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2201      	movs	r2, #1
 80066be:	4013      	ands	r3, r2
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <LL_ADC_IsEnabled+0x18>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <LL_ADC_IsEnabled+0x1a>
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	0018      	movs	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	b002      	add	sp, #8
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2202      	movs	r2, #2
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d101      	bne.n	80066ea <LL_ADC_IsDisableOngoing+0x18>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <LL_ADC_IsDisableOngoing+0x1a>
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	0018      	movs	r0, r3
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b002      	add	sp, #8
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	4a04      	ldr	r2, [pc, #16]	@ (8006714 <LL_ADC_REG_StartConversion+0x20>)
 8006702:	4013      	ands	r3, r2
 8006704:	2204      	movs	r2, #4
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800670c:	46c0      	nop			@ (mov r8, r8)
 800670e:	46bd      	mov	sp, r7
 8006710:	b002      	add	sp, #8
 8006712:	bd80      	pop	{r7, pc}
 8006714:	7fffffe8 	.word	0x7fffffe8

08006718 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a04      	ldr	r2, [pc, #16]	@ (8006738 <LL_ADC_REG_StopConversion+0x20>)
 8006726:	4013      	ands	r3, r2
 8006728:	2210      	movs	r2, #16
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006730:	46c0      	nop			@ (mov r8, r8)
 8006732:	46bd      	mov	sp, r7
 8006734:	b002      	add	sp, #8
 8006736:	bd80      	pop	{r7, pc}
 8006738:	7fffffe8 	.word	0x7fffffe8

0800673c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2204      	movs	r2, #4
 800674a:	4013      	ands	r3, r2
 800674c:	2b04      	cmp	r3, #4
 800674e:	d101      	bne.n	8006754 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006754:	2300      	movs	r3, #0
}
 8006756:	0018      	movs	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	b002      	add	sp, #8
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006768:	231f      	movs	r3, #31
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006770:	2300      	movs	r3, #0
 8006772:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e19f      	b.n	8006ac6 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678a:	2b00      	cmp	r3, #0
 800678c:	d12a      	bne.n	80067e4 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4acf      	ldr	r2, [pc, #828]	@ (8006ad0 <HAL_ADC_Init+0x370>)
 8006792:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4acf      	ldr	r2, [pc, #828]	@ (8006ad4 <HAL_ADC_Init+0x374>)
 8006798:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4ace      	ldr	r2, [pc, #824]	@ (8006ad8 <HAL_ADC_Init+0x378>)
 800679e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4ace      	ldr	r2, [pc, #824]	@ (8006adc <HAL_ADC_Init+0x37c>)
 80067a4:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4acd      	ldr	r2, [pc, #820]	@ (8006ae0 <HAL_ADC_Init+0x380>)
 80067aa:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4acd      	ldr	r2, [pc, #820]	@ (8006ae4 <HAL_ADC_Init+0x384>)
 80067b0:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4acc      	ldr	r2, [pc, #816]	@ (8006ae8 <HAL_ADC_Init+0x388>)
 80067b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2280      	movs	r2, #128	@ 0x80
 80067bc:	589b      	ldr	r3, [r3, r2]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2180      	movs	r1, #128	@ 0x80
 80067c6:	4ac9      	ldr	r2, [pc, #804]	@ (8006aec <HAL_ADC_Init+0x38c>)
 80067c8:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2280      	movs	r2, #128	@ 0x80
 80067ce:	589b      	ldr	r3, [r3, r2]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	0010      	movs	r0, r2
 80067d4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2254      	movs	r2, #84	@ 0x54
 80067e0:	2100      	movs	r1, #0
 80067e2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	0018      	movs	r0, r3
 80067ea:	f7ff ff29 	bl	8006640 <LL_ADC_IsInternalRegulatorEnabled>
 80067ee:	1e03      	subs	r3, r0, #0
 80067f0:	d115      	bne.n	800681e <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	0018      	movs	r0, r3
 80067f8:	f7ff ff0e 	bl	8006618 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067fc:	4bbc      	ldr	r3, [pc, #752]	@ (8006af0 <HAL_ADC_Init+0x390>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	49bc      	ldr	r1, [pc, #752]	@ (8006af4 <HAL_ADC_Init+0x394>)
 8006802:	0018      	movs	r0, r3
 8006804:	f7f9 fc7e 	bl	8000104 <__udivsi3>
 8006808:	0003      	movs	r3, r0
 800680a:	3301      	adds	r3, #1
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006810:	e002      	b.n	8006818 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b01      	subs	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f9      	bne.n	8006812 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	0018      	movs	r0, r3
 8006824:	f7ff ff0c 	bl	8006640 <LL_ADC_IsInternalRegulatorEnabled>
 8006828:	1e03      	subs	r3, r0, #0
 800682a:	d10f      	bne.n	800684c <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006830:	2210      	movs	r2, #16
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683c:	2201      	movs	r2, #1
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006844:	231f      	movs	r3, #31
 8006846:	18fb      	adds	r3, r7, r3
 8006848:	2201      	movs	r2, #1
 800684a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	0018      	movs	r0, r3
 8006852:	f7ff ff73 	bl	800673c <LL_ADC_REG_IsConversionOngoing>
 8006856:	0003      	movs	r3, r0
 8006858:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685e:	2210      	movs	r2, #16
 8006860:	4013      	ands	r3, r2
 8006862:	d000      	beq.n	8006866 <HAL_ADC_Init+0x106>
 8006864:	e122      	b.n	8006aac <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d000      	beq.n	800686e <HAL_ADC_Init+0x10e>
 800686c:	e11e      	b.n	8006aac <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006872:	4aa1      	ldr	r2, [pc, #644]	@ (8006af8 <HAL_ADC_Init+0x398>)
 8006874:	4013      	ands	r3, r2
 8006876:	2202      	movs	r2, #2
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	0018      	movs	r0, r3
 8006884:	f7ff ff14 	bl	80066b0 <LL_ADC_IsEnabled>
 8006888:	1e03      	subs	r3, r0, #0
 800688a:	d000      	beq.n	800688e <HAL_ADC_Init+0x12e>
 800688c:	e0ad      	b.n	80069ea <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	7e1b      	ldrb	r3, [r3, #24]
 8006896:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006898:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	7e5b      	ldrb	r3, [r3, #25]
 800689e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80068a0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7e9b      	ldrb	r3, [r3, #26]
 80068a6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80068a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <HAL_ADC_Init+0x158>
 80068b2:	2380      	movs	r3, #128	@ 0x80
 80068b4:	015b      	lsls	r3, r3, #5
 80068b6:	e000      	b.n	80068ba <HAL_ADC_Init+0x15a>
 80068b8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80068ba:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80068c0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da04      	bge.n	80068d4 <HAL_ADC_Init+0x174>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	e001      	b.n	80068d8 <HAL_ADC_Init+0x178>
 80068d4:	2380      	movs	r3, #128	@ 0x80
 80068d6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80068d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	212c      	movs	r1, #44	@ 0x2c
 80068de:	5c5b      	ldrb	r3, [r3, r1]
 80068e0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80068e2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	5c9b      	ldrb	r3, [r3, r2]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d115      	bne.n	8006920 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	7e9b      	ldrb	r3, [r3, #26]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d105      	bne.n	8006908 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2280      	movs	r2, #128	@ 0x80
 8006900:	0252      	lsls	r2, r2, #9
 8006902:	4313      	orrs	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e00b      	b.n	8006920 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690c:	2220      	movs	r2, #32
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006918:	2201      	movs	r2, #1
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800692c:	23e0      	movs	r3, #224	@ 0xe0
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006936:	4313      	orrs	r3, r2
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4a6d      	ldr	r2, [pc, #436]	@ (8006afc <HAL_ADC_Init+0x39c>)
 8006946:	4013      	ands	r3, r2
 8006948:	0019      	movs	r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	430a      	orrs	r2, r1
 8006952:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	0f9b      	lsrs	r3, r3, #30
 800695a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006960:	4313      	orrs	r3, r2
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	223c      	movs	r2, #60	@ 0x3c
 800696c:	5c9b      	ldrb	r3, [r3, r2]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d111      	bne.n	8006996 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	0f9b      	lsrs	r3, r3, #30
 8006978:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800697e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006984:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800698a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	2201      	movs	r2, #1
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	4a58      	ldr	r2, [pc, #352]	@ (8006b00 <HAL_ADC_Init+0x3a0>)
 800699e:	4013      	ands	r3, r2
 80069a0:	0019      	movs	r1, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	23c0      	movs	r3, #192	@ 0xc0
 80069b2:	061b      	lsls	r3, r3, #24
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d018      	beq.n	80069ea <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80069bc:	2380      	movs	r3, #128	@ 0x80
 80069be:	05db      	lsls	r3, r3, #23
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d012      	beq.n	80069ea <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80069c8:	2380      	movs	r3, #128	@ 0x80
 80069ca:	061b      	lsls	r3, r3, #24
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d00c      	beq.n	80069ea <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80069d0:	4b4c      	ldr	r3, [pc, #304]	@ (8006b04 <HAL_ADC_Init+0x3a4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a4c      	ldr	r2, [pc, #304]	@ (8006b08 <HAL_ADC_Init+0x3a8>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	0019      	movs	r1, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	23f0      	movs	r3, #240	@ 0xf0
 80069e0:	039b      	lsls	r3, r3, #14
 80069e2:	401a      	ands	r2, r3
 80069e4:	4b47      	ldr	r3, [pc, #284]	@ (8006b04 <HAL_ADC_Init+0x3a4>)
 80069e6:	430a      	orrs	r2, r1
 80069e8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f2:	001a      	movs	r2, r3
 80069f4:	2100      	movs	r1, #0
 80069f6:	f7ff fd6a 	bl	80064ce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a02:	4942      	ldr	r1, [pc, #264]	@ (8006b0c <HAL_ADC_Init+0x3ac>)
 8006a04:	001a      	movs	r2, r3
 8006a06:	f7ff fd62 	bl	80064ce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2110      	movs	r1, #16
 8006a1e:	4249      	negs	r1, r1
 8006a20:	430a      	orrs	r2, r1
 8006a22:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a24:	e018      	b.n	8006a58 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	2380      	movs	r3, #128	@ 0x80
 8006a2c:	039b      	lsls	r3, r3, #14
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d112      	bne.n	8006a58 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	221c      	movs	r2, #28
 8006a42:	4013      	ands	r3, r2
 8006a44:	2210      	movs	r2, #16
 8006a46:	4252      	negs	r2, r2
 8006a48:	409a      	lsls	r2, r3
 8006a4a:	0011      	movs	r1, r2
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f7ff fd52 	bl	8006508 <LL_ADC_GetSamplingTimeCommonChannels>
 8006a64:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d10b      	bne.n	8006a86 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a78:	2203      	movs	r2, #3
 8006a7a:	4393      	bics	r3, r2
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006a84:	e01c      	b.n	8006ac0 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a8a:	2212      	movs	r2, #18
 8006a8c:	4393      	bics	r3, r2
 8006a8e:	2210      	movs	r2, #16
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006aa2:	231f      	movs	r3, #31
 8006aa4:	18fb      	adds	r3, r7, r3
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006aaa:	e009      	b.n	8006ac0 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006ab8:	231f      	movs	r3, #31
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	2201      	movs	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006ac0:	231f      	movs	r3, #31
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	781b      	ldrb	r3, [r3, #0]
}
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	b008      	add	sp, #32
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	08006e29 	.word	0x08006e29
 8006ad4:	08006e39 	.word	0x08006e39
 8006ad8:	08006e49 	.word	0x08006e49
 8006adc:	08006e59 	.word	0x08006e59
 8006ae0:	080078b1 	.word	0x080078b1
 8006ae4:	080078c1 	.word	0x080078c1
 8006ae8:	080078d1 	.word	0x080078d1
 8006aec:	080051e9 	.word	0x080051e9
 8006af0:	2000044c 	.word	0x2000044c
 8006af4:	00030d40 	.word	0x00030d40
 8006af8:	fffffefd 	.word	0xfffffefd
 8006afc:	ffde0201 	.word	0xffde0201
 8006b00:	1ffffc02 	.word	0x1ffffc02
 8006b04:	40012708 	.word	0x40012708
 8006b08:	ffc3ffff 	.word	0xffc3ffff
 8006b0c:	07ffff04 	.word	0x07ffff04

08006b10 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	230b      	movs	r3, #11
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	1c0a      	adds	r2, r1, #0
 8006b20:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b22:	2317      	movs	r3, #23
 8006b24:	18fb      	adds	r3, r7, r3
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d107      	bne.n	8006b40 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b34:	2210      	movs	r2, #16
 8006b36:	431a      	orrs	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e06d      	b.n	8006c1c <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b44:	2201      	movs	r2, #1
 8006b46:	4013      	ands	r3, r2
 8006b48:	d03a      	beq.n	8006bc0 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8006b4a:	230b      	movs	r3, #11
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b0a      	cmp	r3, #10
 8006b52:	d82a      	bhi.n	8006baa <HAL_ADC_RegisterCallback+0x9a>
 8006b54:	009a      	lsls	r2, r3, #2
 8006b56:	4b33      	ldr	r3, [pc, #204]	@ (8006c24 <HAL_ADC_RegisterCallback+0x114>)
 8006b58:	18d3      	adds	r3, r2, r3
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006b64:	e057      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006b6c:	e053      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006b74:	e04f      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006b7c:	e04b      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006b84:	e047      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006b8c:	e043      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006b94:	e03f      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2180      	movs	r1, #128	@ 0x80
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	505a      	str	r2, [r3, r1]
        break;
 8006b9e:	e03a      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2184      	movs	r1, #132	@ 0x84
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	505a      	str	r2, [r3, r1]
        break;
 8006ba8:	e035      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bae:	2210      	movs	r2, #16
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006bb6:	2317      	movs	r3, #23
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
        break;
 8006bbe:	e02a      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d11c      	bne.n	8006c02 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8006bc8:	230b      	movs	r3, #11
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b09      	cmp	r3, #9
 8006bd0:	d002      	beq.n	8006bd8 <HAL_ADC_RegisterCallback+0xc8>
 8006bd2:	2b0a      	cmp	r3, #10
 8006bd4:	d005      	beq.n	8006be2 <HAL_ADC_RegisterCallback+0xd2>
 8006bd6:	e009      	b.n	8006bec <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2180      	movs	r1, #128	@ 0x80
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	505a      	str	r2, [r3, r1]
        break;
 8006be0:	e019      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2184      	movs	r1, #132	@ 0x84
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	505a      	str	r2, [r3, r1]
        break;
 8006bea:	e014      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006bf8:	2317      	movs	r3, #23
 8006bfa:	18fb      	adds	r3, r7, r3
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	701a      	strb	r2, [r3, #0]
        break;
 8006c00:	e009      	b.n	8006c16 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c06:	2210      	movs	r2, #16
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8006c0e:	2317      	movs	r3, #23
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006c16:	2317      	movs	r3, #23
 8006c18:	18fb      	adds	r3, r7, r3
 8006c1a:	781b      	ldrb	r3, [r3, #0]
}
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b006      	add	sp, #24
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	0800e030 	.word	0x0800e030

08006c28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006c28:	b5b0      	push	{r4, r5, r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7ff fd7f 	bl	800673c <LL_ADC_REG_IsConversionOngoing>
 8006c3e:	1e03      	subs	r3, r0, #0
 8006c40:	d16c      	bne.n	8006d1c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2254      	movs	r2, #84	@ 0x54
 8006c46:	5c9b      	ldrb	r3, [r3, r2]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_ADC_Start_DMA+0x28>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e06c      	b.n	8006d2a <HAL_ADC_Start_DMA+0x102>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2254      	movs	r2, #84	@ 0x54
 8006c54:	2101      	movs	r1, #1
 8006c56:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4013      	ands	r3, r2
 8006c62:	d113      	bne.n	8006c8c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f7ff fd21 	bl	80066b0 <LL_ADC_IsEnabled>
 8006c6e:	1e03      	subs	r3, r0, #0
 8006c70:	d004      	beq.n	8006c7c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	0018      	movs	r0, r3
 8006c78:	f7ff fd08 	bl	800668c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2101      	movs	r1, #1
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006c8c:	2517      	movs	r5, #23
 8006c8e:	197c      	adds	r4, r7, r5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 fb02 	bl	800729c <ADC_Enable>
 8006c98:	0003      	movs	r3, r0
 8006c9a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006c9c:	002c      	movs	r4, r5
 8006c9e:	193b      	adds	r3, r7, r4
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d13e      	bne.n	8006d24 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006caa:	4a22      	ldr	r2, [pc, #136]	@ (8006d34 <HAL_ADC_Start_DMA+0x10c>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	2280      	movs	r2, #128	@ 0x80
 8006cb0:	0052      	lsls	r2, r2, #1
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8006d38 <HAL_ADC_Start_DMA+0x110>)
 8006cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cca:	4a1c      	ldr	r2, [pc, #112]	@ (8006d3c <HAL_ADC_Start_DMA+0x114>)
 8006ccc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d40 <HAL_ADC_Start_DMA+0x118>)
 8006cd4:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	221c      	movs	r2, #28
 8006cdc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2254      	movs	r2, #84	@ 0x54
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2110      	movs	r1, #16
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3340      	adds	r3, #64	@ 0x40
 8006d00:	0019      	movs	r1, r3
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	193c      	adds	r4, r7, r4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f000 ff84 	bl	8007c14 <HAL_DMA_Start_IT>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f7ff fced 	bl	80066f4 <LL_ADC_REG_StartConversion>
 8006d1a:	e003      	b.n	8006d24 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006d1c:	2317      	movs	r3, #23
 8006d1e:	18fb      	adds	r3, r7, r3
 8006d20:	2202      	movs	r2, #2
 8006d22:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006d24:	2317      	movs	r3, #23
 8006d26:	18fb      	adds	r3, r7, r3
 8006d28:	781b      	ldrb	r3, [r3, #0]
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b006      	add	sp, #24
 8006d30:	bdb0      	pop	{r4, r5, r7, pc}
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	fffff0fe 	.word	0xfffff0fe
 8006d38:	08007465 	.word	0x08007465
 8006d3c:	08007531 	.word	0x08007531
 8006d40:	08007551 	.word	0x08007551

08006d44 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006d44:	b5b0      	push	{r4, r5, r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2254      	movs	r2, #84	@ 0x54
 8006d50:	5c9b      	ldrb	r3, [r3, r2]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <HAL_ADC_Stop_DMA+0x16>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e05f      	b.n	8006e1a <HAL_ADC_Stop_DMA+0xd6>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2254      	movs	r2, #84	@ 0x54
 8006d5e:	2101      	movs	r1, #1
 8006d60:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006d62:	250f      	movs	r5, #15
 8006d64:	197c      	adds	r4, r7, r5
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f000 fa55 	bl	8007218 <ADC_ConversionStop>
 8006d6e:	0003      	movs	r3, r0
 8006d70:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006d72:	0029      	movs	r1, r5
 8006d74:	187b      	adds	r3, r7, r1
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d147      	bne.n	8006e0c <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d80:	2225      	movs	r2, #37	@ 0x25
 8006d82:	5c9b      	ldrb	r3, [r3, r2]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d112      	bne.n	8006db0 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8e:	000d      	movs	r5, r1
 8006d90:	187c      	adds	r4, r7, r1
 8006d92:	0018      	movs	r0, r3
 8006d94:	f000 ffc4 	bl	8007d20 <HAL_DMA_Abort>
 8006d98:	0003      	movs	r3, r0
 8006d9a:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006d9c:	197b      	adds	r3, r7, r5
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da8:	2240      	movs	r2, #64	@ 0x40
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2110      	movs	r1, #16
 8006dbc:	438a      	bics	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	18bb      	adds	r3, r7, r2
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d107      	bne.n	8006dda <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006dca:	18bc      	adds	r4, r7, r2
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f000 faea 	bl	80073a8 <ADC_Disable>
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	7023      	strb	r3, [r4, #0]
 8006dd8:	e003      	b.n	8006de2 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f000 fae3 	bl	80073a8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006de2:	230f      	movs	r3, #15
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d107      	bne.n	8006dfc <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df0:	4a0c      	ldr	r2, [pc, #48]	@ (8006e24 <HAL_ADC_Stop_DMA+0xe0>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	2201      	movs	r2, #1
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2101      	movs	r1, #1
 8006e08:	438a      	bics	r2, r1
 8006e0a:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2254      	movs	r2, #84	@ 0x54
 8006e10:	2100      	movs	r1, #0
 8006e12:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006e14:	230f      	movs	r3, #15
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	781b      	ldrb	r3, [r3, #0]
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b004      	add	sp, #16
 8006e20:	bdb0      	pop	{r4, r5, r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	fffffefe 	.word	0xfffffefe

08006e28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006e30:	46c0      	nop			@ (mov r8, r8)
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b002      	add	sp, #8
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006e40:	46c0      	nop			@ (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b002      	add	sp, #8
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006e50:	46c0      	nop			@ (mov r8, r8)
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b002      	add	sp, #8
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e60:	46c0      	nop			@ (mov r8, r8)
 8006e62:	46bd      	mov	sp, r7
 8006e64:	b002      	add	sp, #8
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e72:	2317      	movs	r3, #23
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	2200      	movs	r2, #0
 8006e78:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2254      	movs	r2, #84	@ 0x54
 8006e82:	5c9b      	ldrb	r3, [r3, r2]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_ADC_ConfigChannel+0x24>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e1c0      	b.n	800720e <HAL_ADC_ConfigChannel+0x3a6>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2254      	movs	r2, #84	@ 0x54
 8006e90:	2101      	movs	r1, #1
 8006e92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff fc4f 	bl	800673c <LL_ADC_REG_IsConversionOngoing>
 8006e9e:	1e03      	subs	r3, r0, #0
 8006ea0:	d000      	beq.n	8006ea4 <HAL_ADC_ConfigChannel+0x3c>
 8006ea2:	e1a3      	b.n	80071ec <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d100      	bne.n	8006eae <HAL_ADC_ConfigChannel+0x46>
 8006eac:	e143      	b.n	8007136 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	2380      	movs	r3, #128	@ 0x80
 8006eb4:	061b      	lsls	r3, r3, #24
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d004      	beq.n	8006ec4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006ebe:	4ac1      	ldr	r2, [pc, #772]	@ (80071c4 <HAL_ADC_ConfigChannel+0x35c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d108      	bne.n	8006ed6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	0019      	movs	r1, r3
 8006ece:	0010      	movs	r0, r2
 8006ed0:	f7ff fb62 	bl	8006598 <LL_ADC_REG_SetSequencerChAdd>
 8006ed4:	e0c9      	b.n	800706a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	211f      	movs	r1, #31
 8006ee0:	400b      	ands	r3, r1
 8006ee2:	210f      	movs	r1, #15
 8006ee4:	4099      	lsls	r1, r3
 8006ee6:	000b      	movs	r3, r1
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	4013      	ands	r3, r2
 8006eec:	0019      	movs	r1, r3
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	035b      	lsls	r3, r3, #13
 8006ef4:	0b5b      	lsrs	r3, r3, #13
 8006ef6:	d105      	bne.n	8006f04 <HAL_ADC_ConfigChannel+0x9c>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	0e9b      	lsrs	r3, r3, #26
 8006efe:	221f      	movs	r2, #31
 8006f00:	4013      	ands	r3, r2
 8006f02:	e098      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d000      	beq.n	8006f10 <HAL_ADC_ConfigChannel+0xa8>
 8006f0e:	e091      	b.n	8007034 <HAL_ADC_ConfigChannel+0x1cc>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2202      	movs	r2, #2
 8006f16:	4013      	ands	r3, r2
 8006f18:	d000      	beq.n	8006f1c <HAL_ADC_ConfigChannel+0xb4>
 8006f1a:	e089      	b.n	8007030 <HAL_ADC_ConfigChannel+0x1c8>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2204      	movs	r2, #4
 8006f22:	4013      	ands	r3, r2
 8006f24:	d000      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0xc0>
 8006f26:	e081      	b.n	800702c <HAL_ADC_ConfigChannel+0x1c4>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d000      	beq.n	8006f34 <HAL_ADC_ConfigChannel+0xcc>
 8006f32:	e079      	b.n	8007028 <HAL_ADC_ConfigChannel+0x1c0>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2210      	movs	r2, #16
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d000      	beq.n	8006f40 <HAL_ADC_ConfigChannel+0xd8>
 8006f3e:	e071      	b.n	8007024 <HAL_ADC_ConfigChannel+0x1bc>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2220      	movs	r2, #32
 8006f46:	4013      	ands	r3, r2
 8006f48:	d000      	beq.n	8006f4c <HAL_ADC_ConfigChannel+0xe4>
 8006f4a:	e069      	b.n	8007020 <HAL_ADC_ConfigChannel+0x1b8>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2240      	movs	r2, #64	@ 0x40
 8006f52:	4013      	ands	r3, r2
 8006f54:	d000      	beq.n	8006f58 <HAL_ADC_ConfigChannel+0xf0>
 8006f56:	e061      	b.n	800701c <HAL_ADC_ConfigChannel+0x1b4>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2280      	movs	r2, #128	@ 0x80
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d000      	beq.n	8006f64 <HAL_ADC_ConfigChannel+0xfc>
 8006f62:	e059      	b.n	8007018 <HAL_ADC_ConfigChannel+0x1b0>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	2380      	movs	r3, #128	@ 0x80
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	d151      	bne.n	8007014 <HAL_ADC_ConfigChannel+0x1ac>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	2380      	movs	r3, #128	@ 0x80
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d149      	bne.n	8007010 <HAL_ADC_ConfigChannel+0x1a8>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	2380      	movs	r3, #128	@ 0x80
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4013      	ands	r3, r2
 8006f86:	d141      	bne.n	800700c <HAL_ADC_ConfigChannel+0x1a4>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	2380      	movs	r3, #128	@ 0x80
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	4013      	ands	r3, r2
 8006f92:	d139      	bne.n	8007008 <HAL_ADC_ConfigChannel+0x1a0>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	2380      	movs	r3, #128	@ 0x80
 8006f9a:	015b      	lsls	r3, r3, #5
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d131      	bne.n	8007004 <HAL_ADC_ConfigChannel+0x19c>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	2380      	movs	r3, #128	@ 0x80
 8006fa6:	019b      	lsls	r3, r3, #6
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d129      	bne.n	8007000 <HAL_ADC_ConfigChannel+0x198>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	2380      	movs	r3, #128	@ 0x80
 8006fb2:	01db      	lsls	r3, r3, #7
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	d121      	bne.n	8006ffc <HAL_ADC_ConfigChannel+0x194>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	2380      	movs	r3, #128	@ 0x80
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d119      	bne.n	8006ff8 <HAL_ADC_ConfigChannel+0x190>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	2380      	movs	r3, #128	@ 0x80
 8006fca:	025b      	lsls	r3, r3, #9
 8006fcc:	4013      	ands	r3, r2
 8006fce:	d111      	bne.n	8006ff4 <HAL_ADC_ConfigChannel+0x18c>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d109      	bne.n	8006ff0 <HAL_ADC_ConfigChannel+0x188>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	02db      	lsls	r3, r3, #11
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d001      	beq.n	8006fec <HAL_ADC_ConfigChannel+0x184>
 8006fe8:	2312      	movs	r3, #18
 8006fea:	e024      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8006fec:	2300      	movs	r3, #0
 8006fee:	e022      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8006ff0:	2311      	movs	r3, #17
 8006ff2:	e020      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	e01e      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8006ff8:	230f      	movs	r3, #15
 8006ffa:	e01c      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8006ffc:	230e      	movs	r3, #14
 8006ffe:	e01a      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007000:	230d      	movs	r3, #13
 8007002:	e018      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007004:	230c      	movs	r3, #12
 8007006:	e016      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007008:	230b      	movs	r3, #11
 800700a:	e014      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 800700c:	230a      	movs	r3, #10
 800700e:	e012      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007010:	2309      	movs	r3, #9
 8007012:	e010      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007014:	2308      	movs	r3, #8
 8007016:	e00e      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007018:	2307      	movs	r3, #7
 800701a:	e00c      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 800701c:	2306      	movs	r3, #6
 800701e:	e00a      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007020:	2305      	movs	r3, #5
 8007022:	e008      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007024:	2304      	movs	r3, #4
 8007026:	e006      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007028:	2303      	movs	r3, #3
 800702a:	e004      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 800702c:	2302      	movs	r3, #2
 800702e:	e002      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <HAL_ADC_ConfigChannel+0x1ce>
 8007034:	2300      	movs	r3, #0
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	6852      	ldr	r2, [r2, #4]
 800703a:	201f      	movs	r0, #31
 800703c:	4002      	ands	r2, r0
 800703e:	4093      	lsls	r3, r2
 8007040:	000a      	movs	r2, r1
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	089b      	lsrs	r3, r3, #2
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	429a      	cmp	r2, r3
 8007056:	d808      	bhi.n	800706a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6859      	ldr	r1, [r3, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	001a      	movs	r2, r3
 8007066:	f7ff fa77 	bl	8006558 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6819      	ldr	r1, [r3, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	001a      	movs	r2, r3
 8007078:	f7ff fab2 	bl	80065e0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	db00      	blt.n	8007086 <HAL_ADC_ConfigChannel+0x21e>
 8007084:	e0bc      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007086:	4b50      	ldr	r3, [pc, #320]	@ (80071c8 <HAL_ADC_ConfigChannel+0x360>)
 8007088:	0018      	movs	r0, r3
 800708a:	f7ff fa13 	bl	80064b4 <LL_ADC_GetCommonPathInternalCh>
 800708e:	0003      	movs	r3, r0
 8007090:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a4d      	ldr	r2, [pc, #308]	@ (80071cc <HAL_ADC_ConfigChannel+0x364>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d122      	bne.n	80070e2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	2380      	movs	r3, #128	@ 0x80
 80070a0:	041b      	lsls	r3, r3, #16
 80070a2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80070a4:	d11d      	bne.n	80070e2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2280      	movs	r2, #128	@ 0x80
 80070aa:	0412      	lsls	r2, r2, #16
 80070ac:	4313      	orrs	r3, r2
 80070ae:	4a46      	ldr	r2, [pc, #280]	@ (80071c8 <HAL_ADC_ConfigChannel+0x360>)
 80070b0:	0019      	movs	r1, r3
 80070b2:	0010      	movs	r0, r2
 80070b4:	f7ff f9ea 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070b8:	4b45      	ldr	r3, [pc, #276]	@ (80071d0 <HAL_ADC_ConfigChannel+0x368>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4945      	ldr	r1, [pc, #276]	@ (80071d4 <HAL_ADC_ConfigChannel+0x36c>)
 80070be:	0018      	movs	r0, r3
 80070c0:	f7f9 f820 	bl	8000104 <__udivsi3>
 80070c4:	0003      	movs	r3, r0
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	0013      	movs	r3, r2
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	189b      	adds	r3, r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80070d2:	e002      	b.n	80070da <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f9      	bne.n	80070d4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80070e0:	e08e      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a3c      	ldr	r2, [pc, #240]	@ (80071d8 <HAL_ADC_ConfigChannel+0x370>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d10e      	bne.n	800710a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	2380      	movs	r3, #128	@ 0x80
 80070f0:	045b      	lsls	r3, r3, #17
 80070f2:	4013      	ands	r3, r2
 80070f4:	d109      	bne.n	800710a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2280      	movs	r2, #128	@ 0x80
 80070fa:	0452      	lsls	r2, r2, #17
 80070fc:	4313      	orrs	r3, r2
 80070fe:	4a32      	ldr	r2, [pc, #200]	@ (80071c8 <HAL_ADC_ConfigChannel+0x360>)
 8007100:	0019      	movs	r1, r3
 8007102:	0010      	movs	r0, r2
 8007104:	f7ff f9c2 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 8007108:	e07a      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a33      	ldr	r2, [pc, #204]	@ (80071dc <HAL_ADC_ConfigChannel+0x374>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d000      	beq.n	8007116 <HAL_ADC_ConfigChannel+0x2ae>
 8007114:	e074      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	2380      	movs	r3, #128	@ 0x80
 800711a:	03db      	lsls	r3, r3, #15
 800711c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800711e:	d000      	beq.n	8007122 <HAL_ADC_ConfigChannel+0x2ba>
 8007120:	e06e      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2280      	movs	r2, #128	@ 0x80
 8007126:	03d2      	lsls	r2, r2, #15
 8007128:	4313      	orrs	r3, r2
 800712a:	4a27      	ldr	r2, [pc, #156]	@ (80071c8 <HAL_ADC_ConfigChannel+0x360>)
 800712c:	0019      	movs	r1, r3
 800712e:	0010      	movs	r0, r2
 8007130:	f7ff f9ac 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 8007134:	e064      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	2380      	movs	r3, #128	@ 0x80
 800713c:	061b      	lsls	r3, r3, #24
 800713e:	429a      	cmp	r2, r3
 8007140:	d004      	beq.n	800714c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007146:	4a1f      	ldr	r2, [pc, #124]	@ (80071c4 <HAL_ADC_ConfigChannel+0x35c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d107      	bne.n	800715c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	0019      	movs	r1, r3
 8007156:	0010      	movs	r0, r2
 8007158:	f7ff fa2f 	bl	80065ba <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	da4d      	bge.n	8007200 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007164:	4b18      	ldr	r3, [pc, #96]	@ (80071c8 <HAL_ADC_ConfigChannel+0x360>)
 8007166:	0018      	movs	r0, r3
 8007168:	f7ff f9a4 	bl	80064b4 <LL_ADC_GetCommonPathInternalCh>
 800716c:	0003      	movs	r3, r0
 800716e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a15      	ldr	r2, [pc, #84]	@ (80071cc <HAL_ADC_ConfigChannel+0x364>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d108      	bne.n	800718c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4a18      	ldr	r2, [pc, #96]	@ (80071e0 <HAL_ADC_ConfigChannel+0x378>)
 800717e:	4013      	ands	r3, r2
 8007180:	4a11      	ldr	r2, [pc, #68]	@ (80071c8 <HAL_ADC_ConfigChannel+0x360>)
 8007182:	0019      	movs	r1, r3
 8007184:	0010      	movs	r0, r2
 8007186:	f7ff f981 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 800718a:	e039      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a11      	ldr	r2, [pc, #68]	@ (80071d8 <HAL_ADC_ConfigChannel+0x370>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d108      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4a12      	ldr	r2, [pc, #72]	@ (80071e4 <HAL_ADC_ConfigChannel+0x37c>)
 800719a:	4013      	ands	r3, r2
 800719c:	4a0a      	ldr	r2, [pc, #40]	@ (80071c8 <HAL_ADC_ConfigChannel+0x360>)
 800719e:	0019      	movs	r1, r3
 80071a0:	0010      	movs	r0, r2
 80071a2:	f7ff f973 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 80071a6:	e02b      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a0b      	ldr	r2, [pc, #44]	@ (80071dc <HAL_ADC_ConfigChannel+0x374>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d126      	bne.n	8007200 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	4a0c      	ldr	r2, [pc, #48]	@ (80071e8 <HAL_ADC_ConfigChannel+0x380>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	4a03      	ldr	r2, [pc, #12]	@ (80071c8 <HAL_ADC_ConfigChannel+0x360>)
 80071ba:	0019      	movs	r1, r3
 80071bc:	0010      	movs	r0, r2
 80071be:	f7ff f965 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 80071c2:	e01d      	b.n	8007200 <HAL_ADC_ConfigChannel+0x398>
 80071c4:	80000004 	.word	0x80000004
 80071c8:	40012708 	.word	0x40012708
 80071cc:	b0001000 	.word	0xb0001000
 80071d0:	2000044c 	.word	0x2000044c
 80071d4:	00030d40 	.word	0x00030d40
 80071d8:	b8004000 	.word	0xb8004000
 80071dc:	b4002000 	.word	0xb4002000
 80071e0:	ff7fffff 	.word	0xff7fffff
 80071e4:	feffffff 	.word	0xfeffffff
 80071e8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f0:	2220      	movs	r2, #32
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80071f8:	2317      	movs	r3, #23
 80071fa:	18fb      	adds	r3, r7, r3
 80071fc:	2201      	movs	r2, #1
 80071fe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2254      	movs	r2, #84	@ 0x54
 8007204:	2100      	movs	r1, #0
 8007206:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007208:	2317      	movs	r3, #23
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	781b      	ldrb	r3, [r3, #0]
}
 800720e:	0018      	movs	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	b006      	add	sp, #24
 8007214:	bd80      	pop	{r7, pc}
 8007216:	46c0      	nop			@ (mov r8, r8)

08007218 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	0018      	movs	r0, r3
 8007226:	f7ff fa89 	bl	800673c <LL_ADC_REG_IsConversionOngoing>
 800722a:	1e03      	subs	r3, r0, #0
 800722c:	d031      	beq.n	8007292 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	0018      	movs	r0, r3
 8007234:	f7ff fa4d 	bl	80066d2 <LL_ADC_IsDisableOngoing>
 8007238:	1e03      	subs	r3, r0, #0
 800723a:	d104      	bne.n	8007246 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	0018      	movs	r0, r3
 8007242:	f7ff fa69 	bl	8006718 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007246:	f7ff f917 	bl	8006478 <HAL_GetTick>
 800724a:	0003      	movs	r3, r0
 800724c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800724e:	e01a      	b.n	8007286 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007250:	f7ff f912 	bl	8006478 <HAL_GetTick>
 8007254:	0002      	movs	r2, r0
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d913      	bls.n	8007286 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2204      	movs	r2, #4
 8007266:	4013      	ands	r3, r2
 8007268:	d00d      	beq.n	8007286 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800726e:	2210      	movs	r2, #16
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727a:	2201      	movs	r2, #1
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e006      	b.n	8007294 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2204      	movs	r2, #4
 800728e:	4013      	ands	r3, r2
 8007290:	d1de      	bne.n	8007250 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	0018      	movs	r0, r3
 8007296:	46bd      	mov	sp, r7
 8007298:	b004      	add	sp, #16
 800729a:	bd80      	pop	{r7, pc}

0800729c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	0018      	movs	r0, r3
 80072ae:	f7ff f9ff 	bl	80066b0 <LL_ADC_IsEnabled>
 80072b2:	1e03      	subs	r3, r0, #0
 80072b4:	d000      	beq.n	80072b8 <ADC_Enable+0x1c>
 80072b6:	e069      	b.n	800738c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4a36      	ldr	r2, [pc, #216]	@ (8007398 <ADC_Enable+0xfc>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	d00d      	beq.n	80072e0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c8:	2210      	movs	r2, #16
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d4:	2201      	movs	r2, #1
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e056      	b.n	800738e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7ff f9bf 	bl	8006668 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80072ea:	4b2c      	ldr	r3, [pc, #176]	@ (800739c <ADC_Enable+0x100>)
 80072ec:	0018      	movs	r0, r3
 80072ee:	f7ff f8e1 	bl	80064b4 <LL_ADC_GetCommonPathInternalCh>
 80072f2:	0002      	movs	r2, r0
 80072f4:	2380      	movs	r3, #128	@ 0x80
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	4013      	ands	r3, r2
 80072fa:	d00f      	beq.n	800731c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80072fc:	4b28      	ldr	r3, [pc, #160]	@ (80073a0 <ADC_Enable+0x104>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4928      	ldr	r1, [pc, #160]	@ (80073a4 <ADC_Enable+0x108>)
 8007302:	0018      	movs	r0, r3
 8007304:	f7f8 fefe 	bl	8000104 <__udivsi3>
 8007308:	0003      	movs	r3, r0
 800730a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800730c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800730e:	e002      	b.n	8007316 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	3b01      	subs	r3, #1
 8007314:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f9      	bne.n	8007310 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7e5b      	ldrb	r3, [r3, #25]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d033      	beq.n	800738c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007324:	f7ff f8a8 	bl	8006478 <HAL_GetTick>
 8007328:	0003      	movs	r3, r0
 800732a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800732c:	e027      	b.n	800737e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	0018      	movs	r0, r3
 8007334:	f7ff f9bc 	bl	80066b0 <LL_ADC_IsEnabled>
 8007338:	1e03      	subs	r3, r0, #0
 800733a:	d104      	bne.n	8007346 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	0018      	movs	r0, r3
 8007342:	f7ff f991 	bl	8006668 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007346:	f7ff f897 	bl	8006478 <HAL_GetTick>
 800734a:	0002      	movs	r2, r0
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d914      	bls.n	800737e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2201      	movs	r2, #1
 800735c:	4013      	ands	r3, r2
 800735e:	2b01      	cmp	r3, #1
 8007360:	d00d      	beq.n	800737e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007366:	2210      	movs	r2, #16
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007372:	2201      	movs	r2, #1
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e007      	b.n	800738e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2201      	movs	r2, #1
 8007386:	4013      	ands	r3, r2
 8007388:	2b01      	cmp	r3, #1
 800738a:	d1d0      	bne.n	800732e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	0018      	movs	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	b004      	add	sp, #16
 8007394:	bd80      	pop	{r7, pc}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	80000017 	.word	0x80000017
 800739c:	40012708 	.word	0x40012708
 80073a0:	2000044c 	.word	0x2000044c
 80073a4:	00030d40 	.word	0x00030d40

080073a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7ff f98c 	bl	80066d2 <LL_ADC_IsDisableOngoing>
 80073ba:	0003      	movs	r3, r0
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f7ff f974 	bl	80066b0 <LL_ADC_IsEnabled>
 80073c8:	1e03      	subs	r3, r0, #0
 80073ca:	d046      	beq.n	800745a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d143      	bne.n	800745a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	2205      	movs	r2, #5
 80073da:	4013      	ands	r3, r2
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d10d      	bne.n	80073fc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7ff f951 	bl	800668c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2203      	movs	r2, #3
 80073f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80073f2:	f7ff f841 	bl	8006478 <HAL_GetTick>
 80073f6:	0003      	movs	r3, r0
 80073f8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80073fa:	e028      	b.n	800744e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007400:	2210      	movs	r2, #16
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800740c:	2201      	movs	r2, #1
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e021      	b.n	800745c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007418:	f7ff f82e 	bl	8006478 <HAL_GetTick>
 800741c:	0002      	movs	r2, r0
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d913      	bls.n	800744e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2201      	movs	r2, #1
 800742e:	4013      	ands	r3, r2
 8007430:	d00d      	beq.n	800744e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007436:	2210      	movs	r2, #16
 8007438:	431a      	orrs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007442:	2201      	movs	r2, #1
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e006      	b.n	800745c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	2201      	movs	r2, #1
 8007456:	4013      	ands	r3, r2
 8007458:	d1de      	bne.n	8007418 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	0018      	movs	r0, r3
 800745e:	46bd      	mov	sp, r7
 8007460:	b004      	add	sp, #16
 8007462:	bd80      	pop	{r7, pc}

08007464 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007470:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007476:	2250      	movs	r2, #80	@ 0x50
 8007478:	4013      	ands	r3, r2
 800747a:	d142      	bne.n	8007502 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007480:	2280      	movs	r2, #128	@ 0x80
 8007482:	0092      	lsls	r2, r2, #2
 8007484:	431a      	orrs	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	0018      	movs	r0, r3
 8007490:	f7ff f851 	bl	8006536 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007494:	1e03      	subs	r3, r0, #0
 8007496:	d02e      	beq.n	80074f6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	7e9b      	ldrb	r3, [r3, #26]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d12a      	bne.n	80074f6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2208      	movs	r2, #8
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d123      	bne.n	80074f6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f7ff f942 	bl	800673c <LL_ADC_REG_IsConversionOngoing>
 80074b8:	1e03      	subs	r3, r0, #0
 80074ba:	d110      	bne.n	80074de <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	210c      	movs	r1, #12
 80074c8:	438a      	bics	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d0:	4a16      	ldr	r2, [pc, #88]	@ (800752c <ADC_DMAConvCplt+0xc8>)
 80074d2:	4013      	ands	r3, r2
 80074d4:	2201      	movs	r2, #1
 80074d6:	431a      	orrs	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	659a      	str	r2, [r3, #88]	@ 0x58
 80074dc:	e00b      	b.n	80074f6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e2:	2220      	movs	r2, #32
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	2201      	movs	r2, #1
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	0010      	movs	r0, r2
 80074fe:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007500:	e010      	b.n	8007524 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007506:	2210      	movs	r2, #16
 8007508:	4013      	ands	r3, r2
 800750a:	d005      	beq.n	8007518 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	0010      	movs	r0, r2
 8007514:	4798      	blx	r3
}
 8007516:	e005      	b.n	8007524 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800751c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	0010      	movs	r0, r2
 8007522:	4798      	blx	r3
}
 8007524:	46c0      	nop			@ (mov r8, r8)
 8007526:	46bd      	mov	sp, r7
 8007528:	b004      	add	sp, #16
 800752a:	bd80      	pop	{r7, pc}
 800752c:	fffffefe 	.word	0xfffffefe

08007530 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	0010      	movs	r0, r2
 8007546:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007548:	46c0      	nop			@ (mov r8, r8)
 800754a:	46bd      	mov	sp, r7
 800754c:	b004      	add	sp, #16
 800754e:	bd80      	pop	{r7, pc}

08007550 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007562:	2240      	movs	r2, #64	@ 0x40
 8007564:	431a      	orrs	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800756e:	2204      	movs	r2, #4
 8007570:	431a      	orrs	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	0010      	movs	r0, r2
 800757e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007580:	46c0      	nop			@ (mov r8, r8)
 8007582:	46bd      	mov	sp, r7
 8007584:	b004      	add	sp, #16
 8007586:	bd80      	pop	{r7, pc}

08007588 <LL_ADC_GetCommonClock>:
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	23f0      	movs	r3, #240	@ 0xf0
 8007596:	039b      	lsls	r3, r3, #14
 8007598:	4013      	ands	r3, r2
}
 800759a:	0018      	movs	r0, r3
 800759c:	46bd      	mov	sp, r7
 800759e:	b002      	add	sp, #8
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <LL_ADC_GetClock>:
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	0f9b      	lsrs	r3, r3, #30
 80075b0:	079b      	lsls	r3, r3, #30
}
 80075b2:	0018      	movs	r0, r3
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b002      	add	sp, #8
 80075b8:	bd80      	pop	{r7, pc}

080075ba <LL_ADC_SetCalibrationFactor>:
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	22b4      	movs	r2, #180	@ 0xb4
 80075c8:	589b      	ldr	r3, [r3, r2]
 80075ca:	227f      	movs	r2, #127	@ 0x7f
 80075cc:	4393      	bics	r3, r2
 80075ce:	001a      	movs	r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	21b4      	movs	r1, #180	@ 0xb4
 80075d8:	505a      	str	r2, [r3, r1]
}
 80075da:	46c0      	nop			@ (mov r8, r8)
 80075dc:	46bd      	mov	sp, r7
 80075de:	b002      	add	sp, #8
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <LL_ADC_GetCalibrationFactor>:
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	22b4      	movs	r2, #180	@ 0xb4
 80075ee:	589b      	ldr	r3, [r3, r2]
 80075f0:	227f      	movs	r2, #127	@ 0x7f
 80075f2:	4013      	ands	r3, r2
}
 80075f4:	0018      	movs	r0, r3
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b002      	add	sp, #8
 80075fa:	bd80      	pop	{r7, pc}

080075fc <LL_ADC_Enable>:
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	4a04      	ldr	r2, [pc, #16]	@ (800761c <LL_ADC_Enable+0x20>)
 800760a:	4013      	ands	r3, r2
 800760c:	2201      	movs	r2, #1
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	609a      	str	r2, [r3, #8]
}
 8007614:	46c0      	nop			@ (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	b002      	add	sp, #8
 800761a:	bd80      	pop	{r7, pc}
 800761c:	7fffffe8 	.word	0x7fffffe8

08007620 <LL_ADC_Disable>:
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	4a04      	ldr	r2, [pc, #16]	@ (8007640 <LL_ADC_Disable+0x20>)
 800762e:	4013      	ands	r3, r2
 8007630:	2202      	movs	r2, #2
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	609a      	str	r2, [r3, #8]
}
 8007638:	46c0      	nop			@ (mov r8, r8)
 800763a:	46bd      	mov	sp, r7
 800763c:	b002      	add	sp, #8
 800763e:	bd80      	pop	{r7, pc}
 8007640:	7fffffe8 	.word	0x7fffffe8

08007644 <LL_ADC_IsEnabled>:
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2201      	movs	r2, #1
 8007652:	4013      	ands	r3, r2
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <LL_ADC_IsEnabled+0x18>
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <LL_ADC_IsEnabled+0x1a>
 800765c:	2300      	movs	r3, #0
}
 800765e:	0018      	movs	r0, r3
 8007660:	46bd      	mov	sp, r7
 8007662:	b002      	add	sp, #8
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <LL_ADC_StartCalibration>:
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	4a05      	ldr	r2, [pc, #20]	@ (800768c <LL_ADC_StartCalibration+0x24>)
 8007676:	4013      	ands	r3, r2
 8007678:	2280      	movs	r2, #128	@ 0x80
 800767a:	0612      	lsls	r2, r2, #24
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	46bd      	mov	sp, r7
 8007686:	b002      	add	sp, #8
 8007688:	bd80      	pop	{r7, pc}
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	7fffffe8 	.word	0x7fffffe8

08007690 <LL_ADC_IsCalibrationOnGoing>:
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	0fdb      	lsrs	r3, r3, #31
 800769e:	07da      	lsls	r2, r3, #31
 80076a0:	2380      	movs	r3, #128	@ 0x80
 80076a2:	061b      	lsls	r3, r3, #24
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d101      	bne.n	80076ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <LL_ADC_IsCalibrationOnGoing+0x1e>
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	0018      	movs	r0, r3
 80076b0:	46bd      	mov	sp, r7
 80076b2:	b002      	add	sp, #8
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80076b8:	b590      	push	{r4, r7, lr}
 80076ba:	b08b      	sub	sp, #44	@ 0x2c
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2254      	movs	r2, #84	@ 0x54
 80076cc:	5c9b      	ldrb	r3, [r3, r2]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_ADCEx_Calibration_Start+0x1e>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e0dd      	b.n	8007892 <HAL_ADCEx_Calibration_Start+0x1da>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2254      	movs	r2, #84	@ 0x54
 80076da:	2101      	movs	r1, #1
 80076dc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80076de:	231f      	movs	r3, #31
 80076e0:	18fc      	adds	r4, r7, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	0018      	movs	r0, r3
 80076e6:	f7ff fe5f 	bl	80073a8 <ADC_Disable>
 80076ea:	0003      	movs	r3, r0
 80076ec:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	0018      	movs	r0, r3
 80076f4:	f7ff ffa6 	bl	8007644 <LL_ADC_IsEnabled>
 80076f8:	1e03      	subs	r3, r0, #0
 80076fa:	d000      	beq.n	80076fe <HAL_ADCEx_Calibration_Start+0x46>
 80076fc:	e0bc      	b.n	8007878 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007702:	4a66      	ldr	r2, [pc, #408]	@ (800789c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8007704:	4013      	ands	r3, r2
 8007706:	2202      	movs	r2, #2
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	4a62      	ldr	r2, [pc, #392]	@ (80078a0 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8007716:	4013      	ands	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	495f      	ldr	r1, [pc, #380]	@ (80078a4 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8007726:	400a      	ands	r2, r1
 8007728:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800772a:	2300      	movs	r3, #0
 800772c:	627b      	str	r3, [r7, #36]	@ 0x24
 800772e:	e02d      	b.n	800778c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	0018      	movs	r0, r3
 8007736:	f7ff ff97 	bl	8007668 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800773a:	e014      	b.n	8007766 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a58      	ldr	r2, [pc, #352]	@ (80078a8 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d90d      	bls.n	8007766 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800774e:	2212      	movs	r2, #18
 8007750:	4393      	bics	r3, r2
 8007752:	2210      	movs	r2, #16
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2254      	movs	r2, #84	@ 0x54
 800775e:	2100      	movs	r1, #0
 8007760:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e095      	b.n	8007892 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	0018      	movs	r0, r3
 800776c:	f7ff ff90 	bl	8007690 <LL_ADC_IsCalibrationOnGoing>
 8007770:	1e03      	subs	r3, r0, #0
 8007772:	d1e3      	bne.n	800773c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	0018      	movs	r0, r3
 800777a:	f7ff ff32 	bl	80075e2 <LL_ADC_GetCalibrationFactor>
 800777e:	0002      	movs	r2, r0
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	189b      	adds	r3, r3, r2
 8007784:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	3301      	adds	r3, #1
 800778a:	627b      	str	r3, [r7, #36]	@ 0x24
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	2b07      	cmp	r3, #7
 8007790:	d9ce      	bls.n	8007730 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007792:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007794:	6a38      	ldr	r0, [r7, #32]
 8007796:	f7f8 fcb5 	bl	8000104 <__udivsi3>
 800779a:	0003      	movs	r3, r0
 800779c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	0018      	movs	r0, r3
 80077a4:	f7ff ff2a 	bl	80075fc <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	0018      	movs	r0, r3
 80077ae:	f7ff fef8 	bl	80075a2 <LL_ADC_GetClock>
 80077b2:	1e03      	subs	r3, r0, #0
 80077b4:	d11b      	bne.n	80077ee <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077b6:	4b3d      	ldr	r3, [pc, #244]	@ (80078ac <HAL_ADCEx_Calibration_Start+0x1f4>)
 80077b8:	0018      	movs	r0, r3
 80077ba:	f7ff fee5 	bl	8007588 <LL_ADC_GetCommonClock>
 80077be:	0003      	movs	r3, r0
 80077c0:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	23e0      	movs	r3, #224	@ 0xe0
 80077c6:	035b      	lsls	r3, r3, #13
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d310      	bcc.n	80077ee <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	0c9b      	lsrs	r3, r3, #18
 80077d0:	3b03      	subs	r3, #3
 80077d2:	2201      	movs	r2, #1
 80077d4:	409a      	lsls	r2, r3
 80077d6:	0013      	movs	r3, r2
 80077d8:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	085b      	lsrs	r3, r3, #1
 80077de:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80077e0:	e002      	b.n	80077e8 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f9      	bne.n	80077e2 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6a3a      	ldr	r2, [r7, #32]
 80077f4:	0011      	movs	r1, r2
 80077f6:	0018      	movs	r0, r3
 80077f8:	f7ff fedf 	bl	80075ba <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	0018      	movs	r0, r3
 8007802:	f7ff ff0d 	bl	8007620 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007806:	f7fe fe37 	bl	8006478 <HAL_GetTick>
 800780a:	0003      	movs	r3, r0
 800780c:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800780e:	e01b      	b.n	8007848 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007810:	f7fe fe32 	bl	8006478 <HAL_GetTick>
 8007814:	0002      	movs	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d914      	bls.n	8007848 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	0018      	movs	r0, r3
 8007824:	f7ff ff0e 	bl	8007644 <LL_ADC_IsEnabled>
 8007828:	1e03      	subs	r3, r0, #0
 800782a:	d00d      	beq.n	8007848 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007830:	2210      	movs	r2, #16
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783c:	2201      	movs	r2, #1
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e024      	b.n	8007892 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	0018      	movs	r0, r3
 800784e:	f7ff fef9 	bl	8007644 <LL_ADC_IsEnabled>
 8007852:	1e03      	subs	r3, r0, #0
 8007854:	d1dc      	bne.n	8007810 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68d9      	ldr	r1, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	430a      	orrs	r2, r1
 8007864:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800786a:	2203      	movs	r2, #3
 800786c:	4393      	bics	r3, r2
 800786e:	2201      	movs	r2, #1
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	659a      	str	r2, [r3, #88]	@ 0x58
 8007876:	e005      	b.n	8007884 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787c:	2210      	movs	r2, #16
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2254      	movs	r2, #84	@ 0x54
 8007888:	2100      	movs	r1, #0
 800788a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800788c:	231f      	movs	r3, #31
 800788e:	18fb      	adds	r3, r7, r3
 8007890:	781b      	ldrb	r3, [r3, #0]
}
 8007892:	0018      	movs	r0, r3
 8007894:	46bd      	mov	sp, r7
 8007896:	b00b      	add	sp, #44	@ 0x2c
 8007898:	bd90      	pop	{r4, r7, pc}
 800789a:	46c0      	nop			@ (mov r8, r8)
 800789c:	fffffefd 	.word	0xfffffefd
 80078a0:	00008003 	.word	0x00008003
 80078a4:	ffff7ffc 	.word	0xffff7ffc
 80078a8:	0002f1ff 	.word	0x0002f1ff
 80078ac:	40012708 	.word	0x40012708

080078b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80078b8:	46c0      	nop			@ (mov r8, r8)
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b002      	add	sp, #8
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80078c8:	46c0      	nop			@ (mov r8, r8)
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b002      	add	sp, #8
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80078d8:	46c0      	nop			@ (mov r8, r8)
 80078da:	46bd      	mov	sp, r7
 80078dc:	b002      	add	sp, #8
 80078de:	bd80      	pop	{r7, pc}

080078e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	0002      	movs	r2, r0
 80078e8:	1dfb      	adds	r3, r7, #7
 80078ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80078ec:	1dfb      	adds	r3, r7, #7
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80078f2:	d809      	bhi.n	8007908 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078f4:	1dfb      	adds	r3, r7, #7
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	001a      	movs	r2, r3
 80078fa:	231f      	movs	r3, #31
 80078fc:	401a      	ands	r2, r3
 80078fe:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <__NVIC_EnableIRQ+0x30>)
 8007900:	2101      	movs	r1, #1
 8007902:	4091      	lsls	r1, r2
 8007904:	000a      	movs	r2, r1
 8007906:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007908:	46c0      	nop			@ (mov r8, r8)
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}
 8007910:	e000e100 	.word	0xe000e100

08007914 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	0002      	movs	r2, r0
 800791c:	1dfb      	adds	r3, r7, #7
 800791e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007920:	1dfb      	adds	r3, r7, #7
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b7f      	cmp	r3, #127	@ 0x7f
 8007926:	d810      	bhi.n	800794a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007928:	1dfb      	adds	r3, r7, #7
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	001a      	movs	r2, r3
 800792e:	231f      	movs	r3, #31
 8007930:	4013      	ands	r3, r2
 8007932:	4908      	ldr	r1, [pc, #32]	@ (8007954 <__NVIC_DisableIRQ+0x40>)
 8007934:	2201      	movs	r2, #1
 8007936:	409a      	lsls	r2, r3
 8007938:	0013      	movs	r3, r2
 800793a:	2280      	movs	r2, #128	@ 0x80
 800793c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800793e:	f3bf 8f4f 	dsb	sy
}
 8007942:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007944:	f3bf 8f6f 	isb	sy
}
 8007948:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800794a:	46c0      	nop			@ (mov r8, r8)
 800794c:	46bd      	mov	sp, r7
 800794e:	b002      	add	sp, #8
 8007950:	bd80      	pop	{r7, pc}
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	e000e100 	.word	0xe000e100

08007958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007958:	b590      	push	{r4, r7, lr}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	0002      	movs	r2, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	1dfb      	adds	r3, r7, #7
 8007964:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007966:	1dfb      	adds	r3, r7, #7
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b7f      	cmp	r3, #127	@ 0x7f
 800796c:	d828      	bhi.n	80079c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800796e:	4a2f      	ldr	r2, [pc, #188]	@ (8007a2c <__NVIC_SetPriority+0xd4>)
 8007970:	1dfb      	adds	r3, r7, #7
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	b25b      	sxtb	r3, r3
 8007976:	089b      	lsrs	r3, r3, #2
 8007978:	33c0      	adds	r3, #192	@ 0xc0
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	589b      	ldr	r3, [r3, r2]
 800797e:	1dfa      	adds	r2, r7, #7
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	0011      	movs	r1, r2
 8007984:	2203      	movs	r2, #3
 8007986:	400a      	ands	r2, r1
 8007988:	00d2      	lsls	r2, r2, #3
 800798a:	21ff      	movs	r1, #255	@ 0xff
 800798c:	4091      	lsls	r1, r2
 800798e:	000a      	movs	r2, r1
 8007990:	43d2      	mvns	r2, r2
 8007992:	401a      	ands	r2, r3
 8007994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	019b      	lsls	r3, r3, #6
 800799a:	22ff      	movs	r2, #255	@ 0xff
 800799c:	401a      	ands	r2, r3
 800799e:	1dfb      	adds	r3, r7, #7
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	0018      	movs	r0, r3
 80079a4:	2303      	movs	r3, #3
 80079a6:	4003      	ands	r3, r0
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079ac:	481f      	ldr	r0, [pc, #124]	@ (8007a2c <__NVIC_SetPriority+0xd4>)
 80079ae:	1dfb      	adds	r3, r7, #7
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	089b      	lsrs	r3, r3, #2
 80079b6:	430a      	orrs	r2, r1
 80079b8:	33c0      	adds	r3, #192	@ 0xc0
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80079be:	e031      	b.n	8007a24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a30 <__NVIC_SetPriority+0xd8>)
 80079c2:	1dfb      	adds	r3, r7, #7
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	0019      	movs	r1, r3
 80079c8:	230f      	movs	r3, #15
 80079ca:	400b      	ands	r3, r1
 80079cc:	3b08      	subs	r3, #8
 80079ce:	089b      	lsrs	r3, r3, #2
 80079d0:	3306      	adds	r3, #6
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	18d3      	adds	r3, r2, r3
 80079d6:	3304      	adds	r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	1dfa      	adds	r2, r7, #7
 80079dc:	7812      	ldrb	r2, [r2, #0]
 80079de:	0011      	movs	r1, r2
 80079e0:	2203      	movs	r2, #3
 80079e2:	400a      	ands	r2, r1
 80079e4:	00d2      	lsls	r2, r2, #3
 80079e6:	21ff      	movs	r1, #255	@ 0xff
 80079e8:	4091      	lsls	r1, r2
 80079ea:	000a      	movs	r2, r1
 80079ec:	43d2      	mvns	r2, r2
 80079ee:	401a      	ands	r2, r3
 80079f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	019b      	lsls	r3, r3, #6
 80079f6:	22ff      	movs	r2, #255	@ 0xff
 80079f8:	401a      	ands	r2, r3
 80079fa:	1dfb      	adds	r3, r7, #7
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	0018      	movs	r0, r3
 8007a00:	2303      	movs	r3, #3
 8007a02:	4003      	ands	r3, r0
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a08:	4809      	ldr	r0, [pc, #36]	@ (8007a30 <__NVIC_SetPriority+0xd8>)
 8007a0a:	1dfb      	adds	r3, r7, #7
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	001c      	movs	r4, r3
 8007a10:	230f      	movs	r3, #15
 8007a12:	4023      	ands	r3, r4
 8007a14:	3b08      	subs	r3, #8
 8007a16:	089b      	lsrs	r3, r3, #2
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	3306      	adds	r3, #6
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	18c3      	adds	r3, r0, r3
 8007a20:	3304      	adds	r3, #4
 8007a22:	601a      	str	r2, [r3, #0]
}
 8007a24:	46c0      	nop			@ (mov r8, r8)
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b003      	add	sp, #12
 8007a2a:	bd90      	pop	{r4, r7, pc}
 8007a2c:	e000e100 	.word	0xe000e100
 8007a30:	e000ed00 	.word	0xe000ed00

08007a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	1e5a      	subs	r2, r3, #1
 8007a40:	2380      	movs	r3, #128	@ 0x80
 8007a42:	045b      	lsls	r3, r3, #17
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d301      	bcc.n	8007a4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e010      	b.n	8007a6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a78 <SysTick_Config+0x44>)
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	3a01      	subs	r2, #1
 8007a52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a54:	2301      	movs	r3, #1
 8007a56:	425b      	negs	r3, r3
 8007a58:	2103      	movs	r1, #3
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7ff ff7c 	bl	8007958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a60:	4b05      	ldr	r3, [pc, #20]	@ (8007a78 <SysTick_Config+0x44>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a66:	4b04      	ldr	r3, [pc, #16]	@ (8007a78 <SysTick_Config+0x44>)
 8007a68:	2207      	movs	r2, #7
 8007a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	0018      	movs	r0, r3
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b002      	add	sp, #8
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	46c0      	nop			@ (mov r8, r8)
 8007a78:	e000e010 	.word	0xe000e010

08007a7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	210f      	movs	r1, #15
 8007a88:	187b      	adds	r3, r7, r1
 8007a8a:	1c02      	adds	r2, r0, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	187b      	adds	r3, r7, r1
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	b25b      	sxtb	r3, r3
 8007a96:	0011      	movs	r1, r2
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f7ff ff5d 	bl	8007958 <__NVIC_SetPriority>
}
 8007a9e:	46c0      	nop			@ (mov r8, r8)
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	b004      	add	sp, #16
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	0002      	movs	r2, r0
 8007aae:	1dfb      	adds	r3, r7, #7
 8007ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ab2:	1dfb      	adds	r3, r7, #7
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	b25b      	sxtb	r3, r3
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f7ff ff11 	bl	80078e0 <__NVIC_EnableIRQ>
}
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b002      	add	sp, #8
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	0002      	movs	r2, r0
 8007ace:	1dfb      	adds	r3, r7, #7
 8007ad0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007ad2:	1dfb      	adds	r3, r7, #7
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f7ff ff1b 	bl	8007914 <__NVIC_DisableIRQ>
}
 8007ade:	46c0      	nop			@ (mov r8, r8)
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b002      	add	sp, #8
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7ff ff9f 	bl	8007a34 <SysTick_Config>
 8007af6:	0003      	movs	r3, r0
}
 8007af8:	0018      	movs	r0, r3
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b002      	add	sp, #8
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e077      	b.n	8007c02 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a3d      	ldr	r2, [pc, #244]	@ (8007c0c <HAL_DMA_Init+0x10c>)
 8007b18:	4694      	mov	ip, r2
 8007b1a:	4463      	add	r3, ip
 8007b1c:	2114      	movs	r1, #20
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f7f8 faf0 	bl	8000104 <__udivsi3>
 8007b24:	0003      	movs	r3, r0
 8007b26:	009a      	lsls	r2, r3, #2
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2225      	movs	r2, #37	@ 0x25
 8007b30:	2102      	movs	r1, #2
 8007b32:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4934      	ldr	r1, [pc, #208]	@ (8007c10 <HAL_DMA_Init+0x110>)
 8007b40:	400a      	ands	r2, r1
 8007b42:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6819      	ldr	r1, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f000 fa8d 	bl	800809c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	2380      	movs	r3, #128	@ 0x80
 8007b88:	01db      	lsls	r3, r3, #7
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d102      	bne.n	8007b94 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9c:	213f      	movs	r1, #63	@ 0x3f
 8007b9e:	400a      	ands	r2, r1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007baa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d011      	beq.n	8007bd8 <HAL_DMA_Init+0xd8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d80d      	bhi.n	8007bd8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f000 fa98 	bl	80080f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007bd4:	605a      	str	r2, [r3, #4]
 8007bd6:	e008      	b.n	8007bea <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2225      	movs	r2, #37	@ 0x25
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2224      	movs	r2, #36	@ 0x24
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	0018      	movs	r0, r3
 8007c04:	46bd      	mov	sp, r7
 8007c06:	b002      	add	sp, #8
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	46c0      	nop			@ (mov r8, r8)
 8007c0c:	bffdfff8 	.word	0xbffdfff8
 8007c10:	ffff800f 	.word	0xffff800f

08007c14 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c22:	2317      	movs	r3, #23
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	2200      	movs	r2, #0
 8007c28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2224      	movs	r2, #36	@ 0x24
 8007c2e:	5c9b      	ldrb	r3, [r3, r2]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_DMA_Start_IT+0x24>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e06f      	b.n	8007d18 <HAL_DMA_Start_IT+0x104>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2224      	movs	r2, #36	@ 0x24
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2225      	movs	r2, #37	@ 0x25
 8007c44:	5c9b      	ldrb	r3, [r3, r2]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d157      	bne.n	8007cfc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2225      	movs	r2, #37	@ 0x25
 8007c50:	2102      	movs	r1, #2
 8007c52:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2101      	movs	r1, #1
 8007c66:	438a      	bics	r2, r1
 8007c68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f9d3 	bl	800801c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d008      	beq.n	8007c90 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	210e      	movs	r1, #14
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e00f      	b.n	8007cb0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2104      	movs	r1, #4
 8007c9c:	438a      	bics	r2, r1
 8007c9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	210a      	movs	r1, #10
 8007cac:	430a      	orrs	r2, r1
 8007cae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	2380      	movs	r3, #128	@ 0x80
 8007cb8:	025b      	lsls	r3, r3, #9
 8007cba:	4013      	ands	r3, r2
 8007cbc:	d008      	beq.n	8007cd0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc8:	2180      	movs	r1, #128	@ 0x80
 8007cca:	0049      	lsls	r1, r1, #1
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d008      	beq.n	8007cea <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce2:	2180      	movs	r1, #128	@ 0x80
 8007ce4:	0049      	lsls	r1, r1, #1
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	e00a      	b.n	8007d12 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2280      	movs	r2, #128	@ 0x80
 8007d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2224      	movs	r2, #36	@ 0x24
 8007d06:	2100      	movs	r1, #0
 8007d08:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007d0a:	2317      	movs	r3, #23
 8007d0c:	18fb      	adds	r3, r7, r3
 8007d0e:	2201      	movs	r2, #1
 8007d10:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007d12:	2317      	movs	r3, #23
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	781b      	ldrb	r3, [r3, #0]
}
 8007d18:	0018      	movs	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b006      	add	sp, #24
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e050      	b.n	8007dd4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2225      	movs	r2, #37	@ 0x25
 8007d36:	5c9b      	ldrb	r3, [r3, r2]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d008      	beq.n	8007d50 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2204      	movs	r2, #4
 8007d42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2224      	movs	r2, #36	@ 0x24
 8007d48:	2100      	movs	r1, #0
 8007d4a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e041      	b.n	8007dd4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	210e      	movs	r1, #14
 8007d5c:	438a      	bics	r2, r1
 8007d5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d6a:	491c      	ldr	r1, [pc, #112]	@ (8007ddc <HAL_DMA_Abort+0xbc>)
 8007d6c:	400a      	ands	r2, r1
 8007d6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	438a      	bics	r2, r1
 8007d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007d80:	4b17      	ldr	r3, [pc, #92]	@ (8007de0 <HAL_DMA_Abort+0xc0>)
 8007d82:	6859      	ldr	r1, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d88:	221c      	movs	r2, #28
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	4b13      	ldr	r3, [pc, #76]	@ (8007de0 <HAL_DMA_Abort+0xc0>)
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007d9e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00c      	beq.n	8007dc2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db2:	490a      	ldr	r1, [pc, #40]	@ (8007ddc <HAL_DMA_Abort+0xbc>)
 8007db4:	400a      	ands	r2, r1
 8007db6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007dc0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2225      	movs	r2, #37	@ 0x25
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2224      	movs	r2, #36	@ 0x24
 8007dce:	2100      	movs	r1, #0
 8007dd0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	b002      	add	sp, #8
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	fffffeff 	.word	0xfffffeff
 8007de0:	40020000 	.word	0x40020000

08007de4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dec:	210f      	movs	r1, #15
 8007dee:	187b      	adds	r3, r7, r1
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2225      	movs	r2, #37	@ 0x25
 8007df8:	5c9b      	ldrb	r3, [r3, r2]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d006      	beq.n	8007e0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2204      	movs	r2, #4
 8007e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007e06:	187b      	adds	r3, r7, r1
 8007e08:	2201      	movs	r2, #1
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	e049      	b.n	8007ea2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	210e      	movs	r1, #14
 8007e1a:	438a      	bics	r2, r1
 8007e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2101      	movs	r1, #1
 8007e2a:	438a      	bics	r2, r1
 8007e2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e38:	491d      	ldr	r1, [pc, #116]	@ (8007eb0 <HAL_DMA_Abort_IT+0xcc>)
 8007e3a:	400a      	ands	r2, r1
 8007e3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb4 <HAL_DMA_Abort_IT+0xd0>)
 8007e40:	6859      	ldr	r1, [r3, #4]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	221c      	movs	r2, #28
 8007e48:	4013      	ands	r3, r2
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	409a      	lsls	r2, r3
 8007e4e:	4b19      	ldr	r3, [pc, #100]	@ (8007eb4 <HAL_DMA_Abort_IT+0xd0>)
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007e5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00c      	beq.n	8007e80 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e70:	490f      	ldr	r1, [pc, #60]	@ (8007eb0 <HAL_DMA_Abort_IT+0xcc>)
 8007e72:	400a      	ands	r2, r1
 8007e74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007e7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2225      	movs	r2, #37	@ 0x25
 8007e84:	2101      	movs	r1, #1
 8007e86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2224      	movs	r2, #36	@ 0x24
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	0010      	movs	r0, r2
 8007ea0:	4798      	blx	r3
    }
  }
  return status;
 8007ea2:	230f      	movs	r3, #15
 8007ea4:	18fb      	adds	r3, r7, r3
 8007ea6:	781b      	ldrb	r3, [r3, #0]
}
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b004      	add	sp, #16
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	fffffeff 	.word	0xfffffeff
 8007eb4:	40020000 	.word	0x40020000

08007eb8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007ec0:	4b55      	ldr	r3, [pc, #340]	@ (8008018 <HAL_DMA_IRQHandler+0x160>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed2:	221c      	movs	r2, #28
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	409a      	lsls	r2, r3
 8007eda:	0013      	movs	r3, r2
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d027      	beq.n	8007f32 <HAL_DMA_IRQHandler+0x7a>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	d023      	beq.n	8007f32 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	d107      	bne.n	8007f06 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2104      	movs	r1, #4
 8007f02:	438a      	bics	r2, r1
 8007f04:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007f06:	4b44      	ldr	r3, [pc, #272]	@ (8008018 <HAL_DMA_IRQHandler+0x160>)
 8007f08:	6859      	ldr	r1, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0e:	221c      	movs	r2, #28
 8007f10:	4013      	ands	r3, r2
 8007f12:	2204      	movs	r2, #4
 8007f14:	409a      	lsls	r2, r3
 8007f16:	4b40      	ldr	r3, [pc, #256]	@ (8008018 <HAL_DMA_IRQHandler+0x160>)
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d100      	bne.n	8007f26 <HAL_DMA_IRQHandler+0x6e>
 8007f24:	e073      	b.n	800800e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	0010      	movs	r0, r2
 8007f2e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007f30:	e06d      	b.n	800800e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f36:	221c      	movs	r2, #28
 8007f38:	4013      	ands	r3, r2
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	409a      	lsls	r2, r3
 8007f3e:	0013      	movs	r3, r2
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4013      	ands	r3, r2
 8007f44:	d02e      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0xec>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	d02a      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2220      	movs	r2, #32
 8007f56:	4013      	ands	r3, r2
 8007f58:	d10b      	bne.n	8007f72 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	210a      	movs	r1, #10
 8007f66:	438a      	bics	r2, r1
 8007f68:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2225      	movs	r2, #37	@ 0x25
 8007f6e:	2101      	movs	r1, #1
 8007f70:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007f72:	4b29      	ldr	r3, [pc, #164]	@ (8008018 <HAL_DMA_IRQHandler+0x160>)
 8007f74:	6859      	ldr	r1, [r3, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7a:	221c      	movs	r2, #28
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2202      	movs	r2, #2
 8007f80:	409a      	lsls	r2, r3
 8007f82:	4b25      	ldr	r3, [pc, #148]	@ (8008018 <HAL_DMA_IRQHandler+0x160>)
 8007f84:	430a      	orrs	r2, r1
 8007f86:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2224      	movs	r2, #36	@ 0x24
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d03a      	beq.n	800800e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	0010      	movs	r0, r2
 8007fa0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007fa2:	e034      	b.n	800800e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa8:	221c      	movs	r2, #28
 8007faa:	4013      	ands	r3, r2
 8007fac:	2208      	movs	r2, #8
 8007fae:	409a      	lsls	r2, r3
 8007fb0:	0013      	movs	r3, r2
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	d02b      	beq.n	8008010 <HAL_DMA_IRQHandler+0x158>
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2208      	movs	r2, #8
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	d027      	beq.n	8008010 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	210e      	movs	r1, #14
 8007fcc:	438a      	bics	r2, r1
 8007fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007fd0:	4b11      	ldr	r3, [pc, #68]	@ (8008018 <HAL_DMA_IRQHandler+0x160>)
 8007fd2:	6859      	ldr	r1, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	221c      	movs	r2, #28
 8007fda:	4013      	ands	r3, r2
 8007fdc:	2201      	movs	r2, #1
 8007fde:	409a      	lsls	r2, r3
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8008018 <HAL_DMA_IRQHandler+0x160>)
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2225      	movs	r2, #37	@ 0x25
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2224      	movs	r2, #36	@ 0x24
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	0010      	movs	r0, r2
 800800c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800800e:	46c0      	nop			@ (mov r8, r8)
 8008010:	46c0      	nop			@ (mov r8, r8)
}
 8008012:	46bd      	mov	sp, r7
 8008014:	b004      	add	sp, #16
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40020000 	.word	0x40020000

0800801c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008032:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008044:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008046:	4b14      	ldr	r3, [pc, #80]	@ (8008098 <DMA_SetConfig+0x7c>)
 8008048:	6859      	ldr	r1, [r3, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804e:	221c      	movs	r2, #28
 8008050:	4013      	ands	r3, r2
 8008052:	2201      	movs	r2, #1
 8008054:	409a      	lsls	r2, r3
 8008056:	4b10      	ldr	r3, [pc, #64]	@ (8008098 <DMA_SetConfig+0x7c>)
 8008058:	430a      	orrs	r2, r1
 800805a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b10      	cmp	r3, #16
 800806a:	d108      	bne.n	800807e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800807c:	e007      	b.n	800808e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	60da      	str	r2, [r3, #12]
}
 800808e:	46c0      	nop			@ (mov r8, r8)
 8008090:	46bd      	mov	sp, r7
 8008092:	b004      	add	sp, #16
 8008094:	bd80      	pop	{r7, pc}
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	40020000 	.word	0x40020000

0800809c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a8:	089b      	lsrs	r3, r3, #2
 80080aa:	4a10      	ldr	r2, [pc, #64]	@ (80080ec <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80080ac:	4694      	mov	ip, r2
 80080ae:	4463      	add	r3, ip
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	001a      	movs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	001a      	movs	r2, r3
 80080be:	23ff      	movs	r3, #255	@ 0xff
 80080c0:	4013      	ands	r3, r2
 80080c2:	3b08      	subs	r3, #8
 80080c4:	2114      	movs	r1, #20
 80080c6:	0018      	movs	r0, r3
 80080c8:	f7f8 f81c 	bl	8000104 <__udivsi3>
 80080cc:	0003      	movs	r3, r0
 80080ce:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a07      	ldr	r2, [pc, #28]	@ (80080f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80080d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	221f      	movs	r2, #31
 80080da:	4013      	ands	r3, r2
 80080dc:	2201      	movs	r2, #1
 80080de:	409a      	lsls	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80080e4:	46c0      	nop			@ (mov r8, r8)
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b004      	add	sp, #16
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	10008200 	.word	0x10008200
 80080f0:	40020880 	.word	0x40020880

080080f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	223f      	movs	r2, #63	@ 0x3f
 8008102:	4013      	ands	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4a0a      	ldr	r2, [pc, #40]	@ (8008134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800810a:	4694      	mov	ip, r2
 800810c:	4463      	add	r3, ip
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	001a      	movs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a07      	ldr	r2, [pc, #28]	@ (8008138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800811a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3b01      	subs	r3, #1
 8008120:	2203      	movs	r2, #3
 8008122:	4013      	ands	r3, r2
 8008124:	2201      	movs	r2, #1
 8008126:	409a      	lsls	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800812c:	46c0      	nop			@ (mov r8, r8)
 800812e:	46bd      	mov	sp, r7
 8008130:	b004      	add	sp, #16
 8008132:	bd80      	pop	{r7, pc}
 8008134:	1000823f 	.word	0x1000823f
 8008138:	40020940 	.word	0x40020940

0800813c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008146:	2300      	movs	r3, #0
 8008148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800814a:	e147      	b.n	80083dc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2101      	movs	r1, #1
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	4091      	lsls	r1, r2
 8008156:	000a      	movs	r2, r1
 8008158:	4013      	ands	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d100      	bne.n	8008164 <HAL_GPIO_Init+0x28>
 8008162:	e138      	b.n	80083d6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2203      	movs	r2, #3
 800816a:	4013      	ands	r3, r2
 800816c:	2b01      	cmp	r3, #1
 800816e:	d005      	beq.n	800817c <HAL_GPIO_Init+0x40>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	2203      	movs	r2, #3
 8008176:	4013      	ands	r3, r2
 8008178:	2b02      	cmp	r3, #2
 800817a:	d130      	bne.n	80081de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	2203      	movs	r2, #3
 8008188:	409a      	lsls	r2, r3
 800818a:	0013      	movs	r3, r2
 800818c:	43da      	mvns	r2, r3
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	4013      	ands	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	409a      	lsls	r2, r3
 800819e:	0013      	movs	r3, r2
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081b2:	2201      	movs	r2, #1
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	409a      	lsls	r2, r3
 80081b8:	0013      	movs	r3, r2
 80081ba:	43da      	mvns	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4013      	ands	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	091b      	lsrs	r3, r3, #4
 80081c8:	2201      	movs	r2, #1
 80081ca:	401a      	ands	r2, r3
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	409a      	lsls	r2, r3
 80081d0:	0013      	movs	r3, r2
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	2203      	movs	r2, #3
 80081e4:	4013      	ands	r3, r2
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d017      	beq.n	800821a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	2203      	movs	r2, #3
 80081f6:	409a      	lsls	r2, r3
 80081f8:	0013      	movs	r3, r2
 80081fa:	43da      	mvns	r2, r3
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	4013      	ands	r3, r2
 8008200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	409a      	lsls	r2, r3
 800820c:	0013      	movs	r3, r2
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2203      	movs	r2, #3
 8008220:	4013      	ands	r3, r2
 8008222:	2b02      	cmp	r3, #2
 8008224:	d123      	bne.n	800826e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	08da      	lsrs	r2, r3, #3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3208      	adds	r2, #8
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	58d3      	ldr	r3, [r2, r3]
 8008232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2207      	movs	r2, #7
 8008238:	4013      	ands	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	220f      	movs	r2, #15
 800823e:	409a      	lsls	r2, r3
 8008240:	0013      	movs	r3, r2
 8008242:	43da      	mvns	r2, r3
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4013      	ands	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	691a      	ldr	r2, [r3, #16]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2107      	movs	r1, #7
 8008252:	400b      	ands	r3, r1
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	409a      	lsls	r2, r3
 8008258:	0013      	movs	r3, r2
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	08da      	lsrs	r2, r3, #3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3208      	adds	r2, #8
 8008268:	0092      	lsls	r2, r2, #2
 800826a:	6939      	ldr	r1, [r7, #16]
 800826c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	2203      	movs	r2, #3
 800827a:	409a      	lsls	r2, r3
 800827c:	0013      	movs	r3, r2
 800827e:	43da      	mvns	r2, r3
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	4013      	ands	r3, r2
 8008284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2203      	movs	r2, #3
 800828c:	401a      	ands	r2, r3
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	409a      	lsls	r2, r3
 8008294:	0013      	movs	r3, r2
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	4313      	orrs	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	23c0      	movs	r3, #192	@ 0xc0
 80082a8:	029b      	lsls	r3, r3, #10
 80082aa:	4013      	ands	r3, r2
 80082ac:	d100      	bne.n	80082b0 <HAL_GPIO_Init+0x174>
 80082ae:	e092      	b.n	80083d6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80082b0:	4a50      	ldr	r2, [pc, #320]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	089b      	lsrs	r3, r3, #2
 80082b6:	3318      	adds	r3, #24
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	589b      	ldr	r3, [r3, r2]
 80082bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2203      	movs	r2, #3
 80082c2:	4013      	ands	r3, r2
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	220f      	movs	r2, #15
 80082c8:	409a      	lsls	r2, r3
 80082ca:	0013      	movs	r3, r2
 80082cc:	43da      	mvns	r2, r3
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	4013      	ands	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	23a0      	movs	r3, #160	@ 0xa0
 80082d8:	05db      	lsls	r3, r3, #23
 80082da:	429a      	cmp	r2, r3
 80082dc:	d013      	beq.n	8008306 <HAL_GPIO_Init+0x1ca>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a45      	ldr	r2, [pc, #276]	@ (80083f8 <HAL_GPIO_Init+0x2bc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00d      	beq.n	8008302 <HAL_GPIO_Init+0x1c6>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a44      	ldr	r2, [pc, #272]	@ (80083fc <HAL_GPIO_Init+0x2c0>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d007      	beq.n	80082fe <HAL_GPIO_Init+0x1c2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a43      	ldr	r2, [pc, #268]	@ (8008400 <HAL_GPIO_Init+0x2c4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d101      	bne.n	80082fa <HAL_GPIO_Init+0x1be>
 80082f6:	2303      	movs	r3, #3
 80082f8:	e006      	b.n	8008308 <HAL_GPIO_Init+0x1cc>
 80082fa:	2305      	movs	r3, #5
 80082fc:	e004      	b.n	8008308 <HAL_GPIO_Init+0x1cc>
 80082fe:	2302      	movs	r3, #2
 8008300:	e002      	b.n	8008308 <HAL_GPIO_Init+0x1cc>
 8008302:	2301      	movs	r3, #1
 8008304:	e000      	b.n	8008308 <HAL_GPIO_Init+0x1cc>
 8008306:	2300      	movs	r3, #0
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	2103      	movs	r1, #3
 800830c:	400a      	ands	r2, r1
 800830e:	00d2      	lsls	r2, r2, #3
 8008310:	4093      	lsls	r3, r2
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008318:	4936      	ldr	r1, [pc, #216]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	089b      	lsrs	r3, r3, #2
 800831e:	3318      	adds	r3, #24
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008326:	4b33      	ldr	r3, [pc, #204]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	43da      	mvns	r2, r3
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	4013      	ands	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	2380      	movs	r3, #128	@ 0x80
 800833c:	035b      	lsls	r3, r3, #13
 800833e:	4013      	ands	r3, r2
 8008340:	d003      	beq.n	800834a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800834a:	4b2a      	ldr	r3, [pc, #168]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008350:	4b28      	ldr	r3, [pc, #160]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	43da      	mvns	r2, r3
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	4013      	ands	r3, r2
 800835e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	2380      	movs	r3, #128	@ 0x80
 8008366:	039b      	lsls	r3, r3, #14
 8008368:	4013      	ands	r3, r2
 800836a:	d003      	beq.n	8008374 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008374:	4b1f      	ldr	r3, [pc, #124]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800837a:	4a1e      	ldr	r2, [pc, #120]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 800837c:	2384      	movs	r3, #132	@ 0x84
 800837e:	58d3      	ldr	r3, [r2, r3]
 8008380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	43da      	mvns	r2, r3
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	4013      	ands	r3, r2
 800838a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	2380      	movs	r3, #128	@ 0x80
 8008392:	029b      	lsls	r3, r3, #10
 8008394:	4013      	ands	r3, r2
 8008396:	d003      	beq.n	80083a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80083a0:	4914      	ldr	r1, [pc, #80]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 80083a2:	2284      	movs	r2, #132	@ 0x84
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80083a8:	4a12      	ldr	r2, [pc, #72]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 80083aa:	2380      	movs	r3, #128	@ 0x80
 80083ac:	58d3      	ldr	r3, [r2, r3]
 80083ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	43da      	mvns	r2, r3
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	4013      	ands	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	2380      	movs	r3, #128	@ 0x80
 80083c0:	025b      	lsls	r3, r3, #9
 80083c2:	4013      	ands	r3, r2
 80083c4:	d003      	beq.n	80083ce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80083ce:	4909      	ldr	r1, [pc, #36]	@ (80083f4 <HAL_GPIO_Init+0x2b8>)
 80083d0:	2280      	movs	r2, #128	@ 0x80
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	3301      	adds	r3, #1
 80083da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	40da      	lsrs	r2, r3
 80083e4:	1e13      	subs	r3, r2, #0
 80083e6:	d000      	beq.n	80083ea <HAL_GPIO_Init+0x2ae>
 80083e8:	e6b0      	b.n	800814c <HAL_GPIO_Init+0x10>
  }
}
 80083ea:	46c0      	nop			@ (mov r8, r8)
 80083ec:	46c0      	nop			@ (mov r8, r8)
 80083ee:	46bd      	mov	sp, r7
 80083f0:	b006      	add	sp, #24
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	40021800 	.word	0x40021800
 80083f8:	50000400 	.word	0x50000400
 80083fc:	50000800 	.word	0x50000800
 8008400:	50000c00 	.word	0x50000c00

08008404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	000a      	movs	r2, r1
 800840e:	1cbb      	adds	r3, r7, #2
 8008410:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	1cba      	adds	r2, r7, #2
 8008418:	8812      	ldrh	r2, [r2, #0]
 800841a:	4013      	ands	r3, r2
 800841c:	d004      	beq.n	8008428 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800841e:	230f      	movs	r3, #15
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	2201      	movs	r2, #1
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	e003      	b.n	8008430 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008428:	230f      	movs	r3, #15
 800842a:	18fb      	adds	r3, r7, r3
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008430:	230f      	movs	r3, #15
 8008432:	18fb      	adds	r3, r7, r3
 8008434:	781b      	ldrb	r3, [r3, #0]
}
 8008436:	0018      	movs	r0, r3
 8008438:	46bd      	mov	sp, r7
 800843a:	b004      	add	sp, #16
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	0008      	movs	r0, r1
 8008448:	0011      	movs	r1, r2
 800844a:	1cbb      	adds	r3, r7, #2
 800844c:	1c02      	adds	r2, r0, #0
 800844e:	801a      	strh	r2, [r3, #0]
 8008450:	1c7b      	adds	r3, r7, #1
 8008452:	1c0a      	adds	r2, r1, #0
 8008454:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008456:	1c7b      	adds	r3, r7, #1
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d004      	beq.n	8008468 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800845e:	1cbb      	adds	r3, r7, #2
 8008460:	881a      	ldrh	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008466:	e003      	b.n	8008470 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008468:	1cbb      	adds	r3, r7, #2
 800846a:	881a      	ldrh	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008470:	46c0      	nop			@ (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	b002      	add	sp, #8
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	0002      	movs	r2, r0
 8008480:	1dbb      	adds	r3, r7, #6
 8008482:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008484:	4b10      	ldr	r3, [pc, #64]	@ (80084c8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	1dba      	adds	r2, r7, #6
 800848a:	8812      	ldrh	r2, [r2, #0]
 800848c:	4013      	ands	r3, r2
 800848e:	d008      	beq.n	80084a2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008490:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008492:	1dba      	adds	r2, r7, #6
 8008494:	8812      	ldrh	r2, [r2, #0]
 8008496:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008498:	1dbb      	adds	r3, r7, #6
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	0018      	movs	r0, r3
 800849e:	f7fb fb17 	bl	8003ad0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80084a2:	4b09      	ldr	r3, [pc, #36]	@ (80084c8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	1dba      	adds	r2, r7, #6
 80084a8:	8812      	ldrh	r2, [r2, #0]
 80084aa:	4013      	ands	r3, r2
 80084ac:	d008      	beq.n	80084c0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80084ae:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80084b0:	1dba      	adds	r2, r7, #6
 80084b2:	8812      	ldrh	r2, [r2, #0]
 80084b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80084b6:	1dbb      	adds	r3, r7, #6
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	0018      	movs	r0, r3
 80084bc:	f7fb fade 	bl	8003a7c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80084c0:	46c0      	nop			@ (mov r8, r8)
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b002      	add	sp, #8
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	40021800 	.word	0x40021800

080084cc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e097      	b.n	800860e <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2236      	movs	r2, #54	@ 0x36
 80084e2:	5c9b      	ldrb	r3, [r3, r2]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d113      	bne.n	8008512 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2235      	movs	r2, #53	@ 0x35
 80084ee:	2100      	movs	r1, #0
 80084f0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	0018      	movs	r0, r3
 80084f6:	f000 fa8f 	bl	8008a18 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d102      	bne.n	8008508 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a44      	ldr	r2, [pc, #272]	@ (8008618 <HAL_LPTIM_Init+0x14c>)
 8008506:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	0010      	movs	r0, r2
 8008510:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2236      	movs	r2, #54	@ 0x36
 8008516:	2102      	movs	r1, #2
 8008518:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d005      	beq.n	8008536 <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800852e:	2380      	movs	r3, #128	@ 0x80
 8008530:	041b      	lsls	r3, r3, #16
 8008532:	429a      	cmp	r2, r3
 8008534:	d103      	bne.n	800853e <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	221e      	movs	r2, #30
 800853a:	4393      	bics	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	4a36      	ldr	r2, [pc, #216]	@ (800861c <HAL_LPTIM_Init+0x150>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4a35      	ldr	r2, [pc, #212]	@ (8008620 <HAL_LPTIM_Init+0x154>)
 800854c:	4013      	ands	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a34      	ldr	r2, [pc, #208]	@ (8008624 <HAL_LPTIM_Init+0x158>)
 8008554:	4013      	ands	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008560:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008566:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800856c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8008572:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d107      	bne.n	8008592 <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800858a:	4313      	orrs	r3, r2
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d005      	beq.n	80085a6 <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800859e:	2380      	movs	r3, #128	@ 0x80
 80085a0:	041b      	lsls	r3, r3, #16
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d107      	bne.n	80085b6 <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80085ae:	4313      	orrs	r3, r2
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	4a18      	ldr	r2, [pc, #96]	@ (800861c <HAL_LPTIM_Init+0x150>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00a      	beq.n	80085d6 <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80085c8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80085ce:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a11      	ldr	r2, [pc, #68]	@ (8008628 <HAL_LPTIM_Init+0x15c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d108      	bne.n	80085fa <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80085f8:	e004      	b.n	8008604 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008602:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2236      	movs	r2, #54	@ 0x36
 8008608:	2101      	movs	r1, #1
 800860a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	0018      	movs	r0, r3
 8008610:	46bd      	mov	sp, r7
 8008612:	b004      	add	sp, #16
 8008614:	bd80      	pop	{r7, pc}
 8008616:	46c0      	nop			@ (mov r8, r8)
 8008618:	080052d1 	.word	0x080052d1
 800861c:	0000ffff 	.word	0x0000ffff
 8008620:	ffff1f3f 	.word	0xffff1f3f
 8008624:	ff19f1fe 	.word	0xff19f1fe
 8008628:	40007c00 	.word	0x40007c00

0800862c <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2236      	movs	r2, #54	@ 0x36
 800863c:	2102      	movs	r1, #2
 800863e:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68da      	ldr	r2, [r3, #12]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2180      	movs	r1, #128	@ 0x80
 800864c:	0349      	lsls	r1, r1, #13
 800864e:	430a      	orrs	r2, r1
 8008650:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	691a      	ldr	r2, [r3, #16]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2101      	movs	r1, #1
 800865e:	430a      	orrs	r2, r1
 8008660:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2210      	movs	r2, #16
 8008668:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2110      	movs	r1, #16
 8008676:	0018      	movs	r0, r3
 8008678:	f000 f9fa 	bl	8008a70 <LPTIM_WaitForFlag>
 800867c:	0003      	movs	r3, r0
 800867e:	2b03      	cmp	r3, #3
 8008680:	d101      	bne.n	8008686 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e060      	b.n	8008748 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2208      	movs	r2, #8
 800868c:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2108      	movs	r1, #8
 800869a:	0018      	movs	r0, r3
 800869c:	f000 f9e8 	bl	8008a70 <LPTIM_WaitForFlag>
 80086a0:	0003      	movs	r3, r0
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d101      	bne.n	80086aa <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e04e      	b.n	8008748 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	0018      	movs	r0, r3
 80086ae:	f000 fa17 	bl	8008ae0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	0018      	movs	r0, r3
 80086b6:	f000 f9a3 	bl	8008a00 <HAL_LPTIM_GetState>
 80086ba:	0003      	movs	r3, r0
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d101      	bne.n	80086c4 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e041      	b.n	8008748 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2110      	movs	r1, #16
 80086d0:	430a      	orrs	r2, r1
 80086d2:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2108      	movs	r1, #8
 80086e0:	430a      	orrs	r2, r1
 80086e2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689a      	ldr	r2, [r3, #8]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2102      	movs	r1, #2
 80086f0:	430a      	orrs	r2, r1
 80086f2:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2101      	movs	r1, #1
 8008700:	430a      	orrs	r2, r1
 8008702:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	4a11      	ldr	r2, [pc, #68]	@ (8008750 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d007      	beq.n	800871e <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2104      	movs	r1, #4
 800871a:	430a      	orrs	r2, r1
 800871c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2101      	movs	r1, #1
 800872a:	430a      	orrs	r2, r1
 800872c:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2102      	movs	r1, #2
 800873a:	430a      	orrs	r2, r1
 800873c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2236      	movs	r2, #54	@ 0x36
 8008742:	2101      	movs	r1, #1
 8008744:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	0018      	movs	r0, r3
 800874a:	46bd      	mov	sp, r7
 800874c:	b004      	add	sp, #16
 800874e:	bd80      	pop	{r7, pc}
 8008750:	0000ffff 	.word	0x0000ffff

08008754 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2201      	movs	r2, #1
 8008764:	4013      	ands	r3, r2
 8008766:	2b01      	cmp	r3, #1
 8008768:	d10f      	bne.n	800878a <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2201      	movs	r2, #1
 8008772:	4013      	ands	r3, r2
 8008774:	2b01      	cmp	r3, #1
 8008776:	d108      	bne.n	800878a <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2201      	movs	r2, #1
 800877e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	0010      	movs	r0, r2
 8008788:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2202      	movs	r2, #2
 8008792:	4013      	ands	r3, r2
 8008794:	2b02      	cmp	r3, #2
 8008796:	d10f      	bne.n	80087b8 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	2202      	movs	r2, #2
 80087a0:	4013      	ands	r3, r2
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d108      	bne.n	80087b8 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2202      	movs	r2, #2
 80087ac:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	0010      	movs	r0, r2
 80087b6:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2204      	movs	r2, #4
 80087c0:	4013      	ands	r3, r2
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d10f      	bne.n	80087e6 <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2204      	movs	r2, #4
 80087ce:	4013      	ands	r3, r2
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d108      	bne.n	80087e6 <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2204      	movs	r2, #4
 80087da:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	0010      	movs	r0, r2
 80087e4:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2208      	movs	r2, #8
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d10f      	bne.n	8008814 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	2208      	movs	r2, #8
 80087fc:	4013      	ands	r3, r2
 80087fe:	2b08      	cmp	r3, #8
 8008800:	d108      	bne.n	8008814 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2208      	movs	r2, #8
 8008808:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	0010      	movs	r0, r2
 8008812:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2210      	movs	r2, #16
 800881c:	4013      	ands	r3, r2
 800881e:	2b10      	cmp	r3, #16
 8008820:	d10f      	bne.n	8008842 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2210      	movs	r2, #16
 800882a:	4013      	ands	r3, r2
 800882c:	2b10      	cmp	r3, #16
 800882e:	d108      	bne.n	8008842 <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2210      	movs	r2, #16
 8008836:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	0010      	movs	r0, r2
 8008840:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2220      	movs	r2, #32
 800884a:	4013      	ands	r3, r2
 800884c:	2b20      	cmp	r3, #32
 800884e:	d10f      	bne.n	8008870 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	2220      	movs	r2, #32
 8008858:	4013      	ands	r3, r2
 800885a:	2b20      	cmp	r3, #32
 800885c:	d108      	bne.n	8008870 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2220      	movs	r2, #32
 8008864:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	0010      	movs	r0, r2
 800886e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2240      	movs	r2, #64	@ 0x40
 8008878:	4013      	ands	r3, r2
 800887a:	2b40      	cmp	r3, #64	@ 0x40
 800887c:	d10f      	bne.n	800889e <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2240      	movs	r2, #64	@ 0x40
 8008886:	4013      	ands	r3, r2
 8008888:	2b40      	cmp	r3, #64	@ 0x40
 800888a:	d108      	bne.n	800889e <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2240      	movs	r2, #64	@ 0x40
 8008892:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	0010      	movs	r0, r2
 800889c:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800889e:	46c0      	nop			@ (mov r8, r8)
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b002      	add	sp, #8
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80088ae:	46c0      	nop			@ (mov r8, r8)
 80088b0:	46bd      	mov	sp, r7
 80088b2:	b002      	add	sp, #8
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80088be:	46c0      	nop			@ (mov r8, r8)
 80088c0:	46bd      	mov	sp, r7
 80088c2:	b002      	add	sp, #8
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80088ce:	46c0      	nop			@ (mov r8, r8)
 80088d0:	46bd      	mov	sp, r7
 80088d2:	b002      	add	sp, #8
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80088de:	46c0      	nop			@ (mov r8, r8)
 80088e0:	46bd      	mov	sp, r7
 80088e2:	b002      	add	sp, #8
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	46bd      	mov	sp, r7
 80088f2:	b002      	add	sp, #8
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80088fe:	46c0      	nop			@ (mov r8, r8)
 8008900:	46bd      	mov	sp, r7
 8008902:	b002      	add	sp, #8
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800890e:	46c0      	nop			@ (mov r8, r8)
 8008910:	46bd      	mov	sp, r7
 8008912:	b002      	add	sp, #8
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	607a      	str	r2, [r7, #4]
 8008922:	230b      	movs	r3, #11
 8008924:	18fb      	adds	r3, r7, r3
 8008926:	1c0a      	adds	r2, r1, #0
 8008928:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800892a:	2317      	movs	r3, #23
 800892c:	18fb      	adds	r3, r7, r3
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e05a      	b.n	80089f2 <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2236      	movs	r2, #54	@ 0x36
 8008940:	5c9b      	ldrb	r3, [r3, r2]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	d132      	bne.n	80089ae <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8008948:	230b      	movs	r3, #11
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b08      	cmp	r3, #8
 8008950:	d828      	bhi.n	80089a4 <HAL_LPTIM_RegisterCallback+0x8c>
 8008952:	009a      	lsls	r2, r3, #2
 8008954:	4b29      	ldr	r3, [pc, #164]	@ (80089fc <HAL_LPTIM_RegisterCallback+0xe4>)
 8008956:	18d3      	adds	r3, r2, r3
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008962:	e043      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800896a:	e03f      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8008972:	e03b      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 800897a:	e037      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8008982:	e033      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800898a:	e02f      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008992:	e02b      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800899a:	e027      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80089a2:	e023      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80089a4:	2317      	movs	r3, #23
 80089a6:	18fb      	adds	r3, r7, r3
 80089a8:	2201      	movs	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
        break;
 80089ac:	e01e      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2236      	movs	r2, #54	@ 0x36
 80089b2:	5c9b      	ldrb	r3, [r3, r2]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d114      	bne.n	80089e4 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 80089ba:	230b      	movs	r3, #11
 80089bc:	18fb      	adds	r3, r7, r3
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <HAL_LPTIM_RegisterCallback+0xb2>
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d004      	beq.n	80089d2 <HAL_LPTIM_RegisterCallback+0xba>
 80089c8:	e007      	b.n	80089da <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80089d0:	e00c      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80089d8:	e008      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80089da:	2317      	movs	r3, #23
 80089dc:	18fb      	adds	r3, r7, r3
 80089de:	2201      	movs	r2, #1
 80089e0:	701a      	strb	r2, [r3, #0]
        break;
 80089e2:	e003      	b.n	80089ec <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80089e4:	2317      	movs	r3, #23
 80089e6:	18fb      	adds	r3, r7, r3
 80089e8:	2201      	movs	r2, #1
 80089ea:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80089ec:	2317      	movs	r3, #23
 80089ee:	18fb      	adds	r3, r7, r3
 80089f0:	781b      	ldrb	r3, [r3, #0]
}
 80089f2:	0018      	movs	r0, r3
 80089f4:	46bd      	mov	sp, r7
 80089f6:	b006      	add	sp, #24
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	46c0      	nop			@ (mov r8, r8)
 80089fc:	0800e05c 	.word	0x0800e05c

08008a00 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2236      	movs	r2, #54	@ 0x36
 8008a0c:	5c9b      	ldrb	r3, [r3, r2]
 8008a0e:	b2db      	uxtb	r3, r3
}
 8008a10:	0018      	movs	r0, r3
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b002      	add	sp, #8
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a0c      	ldr	r2, [pc, #48]	@ (8008a54 <LPTIM_ResetCallback+0x3c>)
 8008a24:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a0b      	ldr	r2, [pc, #44]	@ (8008a58 <LPTIM_ResetCallback+0x40>)
 8008a2a:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8008a5c <LPTIM_ResetCallback+0x44>)
 8008a30:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a0a      	ldr	r2, [pc, #40]	@ (8008a60 <LPTIM_ResetCallback+0x48>)
 8008a36:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a64 <LPTIM_ResetCallback+0x4c>)
 8008a3c:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a09      	ldr	r2, [pc, #36]	@ (8008a68 <LPTIM_ResetCallback+0x50>)
 8008a42:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a09      	ldr	r2, [pc, #36]	@ (8008a6c <LPTIM_ResetCallback+0x54>)
 8008a48:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008a4a:	46c0      	nop			@ (mov r8, r8)
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	b002      	add	sp, #8
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	46c0      	nop			@ (mov r8, r8)
 8008a54:	080088a7 	.word	0x080088a7
 8008a58:	080088b7 	.word	0x080088b7
 8008a5c:	080088c7 	.word	0x080088c7
 8008a60:	080088d7 	.word	0x080088d7
 8008a64:	080088e7 	.word	0x080088e7
 8008a68:	080088f7 	.word	0x080088f7
 8008a6c:	08008907 	.word	0x08008907

08008a70 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008a7a:	230f      	movs	r3, #15
 8008a7c:	18fb      	adds	r3, r7, r3
 8008a7e:	2200      	movs	r2, #0
 8008a80:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008a82:	4b15      	ldr	r3, [pc, #84]	@ (8008ad8 <LPTIM_WaitForFlag+0x68>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4915      	ldr	r1, [pc, #84]	@ (8008adc <LPTIM_WaitForFlag+0x6c>)
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f7f7 fb3b 	bl	8000104 <__udivsi3>
 8008a8e:	0003      	movs	r3, r0
 8008a90:	001a      	movs	r2, r3
 8008a92:	0013      	movs	r3, r2
 8008a94:	015b      	lsls	r3, r3, #5
 8008a96:	1a9b      	subs	r3, r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	189b      	adds	r3, r3, r2
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d103      	bne.n	8008ab4 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8008aac:	230f      	movs	r3, #15
 8008aae:	18fb      	adds	r3, r7, r3
 8008ab0:	2203      	movs	r2, #3
 8008ab2:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4013      	ands	r3, r2
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d002      	beq.n	8008aca <LPTIM_WaitForFlag+0x5a>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1ea      	bne.n	8008aa0 <LPTIM_WaitForFlag+0x30>

  return result;
 8008aca:	230f      	movs	r3, #15
 8008acc:	18fb      	adds	r3, r7, r3
 8008ace:	781b      	ldrb	r3, [r3, #0]
}
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b004      	add	sp, #16
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	2000044c 	.word	0x2000044c
 8008adc:	00004e20 	.word	0x00004e20

08008ae0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08c      	sub	sp, #48	@ 0x30
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aec:	f3ef 8310 	mrs	r3, PRIMASK
 8008af0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008af2:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008af6:	2301      	movs	r3, #1
 8008af8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f383 8810 	msr	PRIMASK, r3
}
 8008b00:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a72      	ldr	r2, [pc, #456]	@ (8008cd0 <LPTIM_Disable+0x1f0>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d003      	beq.n	8008b14 <LPTIM_Disable+0x34>
 8008b0c:	4a71      	ldr	r2, [pc, #452]	@ (8008cd4 <LPTIM_Disable+0x1f4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d007      	beq.n	8008b22 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008b12:	e00d      	b.n	8008b30 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008b14:	4b70      	ldr	r3, [pc, #448]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b18:	23c0      	movs	r3, #192	@ 0xc0
 8008b1a:	031b      	lsls	r3, r3, #12
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008b20:	e006      	b.n	8008b30 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008b22:	4b6d      	ldr	r3, [pc, #436]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b26:	23c0      	movs	r3, #192	@ 0xc0
 8008b28:	039b      	lsls	r3, r3, #14
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008b2e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b56:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a5c      	ldr	r2, [pc, #368]	@ (8008cd0 <LPTIM_Disable+0x1f0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d003      	beq.n	8008b6a <LPTIM_Disable+0x8a>
 8008b62:	4a5c      	ldr	r2, [pc, #368]	@ (8008cd4 <LPTIM_Disable+0x1f4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d00e      	beq.n	8008b86 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008b68:	e01b      	b.n	8008ba2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b70:	2180      	movs	r1, #128	@ 0x80
 8008b72:	0609      	lsls	r1, r1, #24
 8008b74:	430a      	orrs	r2, r1
 8008b76:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008b78:	4b57      	ldr	r3, [pc, #348]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b7c:	4b56      	ldr	r3, [pc, #344]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b7e:	0052      	lsls	r2, r2, #1
 8008b80:	0852      	lsrs	r2, r2, #1
 8008b82:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008b84:	e00d      	b.n	8008ba2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008b86:	4b54      	ldr	r3, [pc, #336]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8a:	4b53      	ldr	r3, [pc, #332]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b8c:	2180      	movs	r1, #128	@ 0x80
 8008b8e:	05c9      	lsls	r1, r1, #23
 8008b90:	430a      	orrs	r2, r1
 8008b92:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008b94:	4b50      	ldr	r3, [pc, #320]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b98:	4b4f      	ldr	r3, [pc, #316]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008b9a:	4950      	ldr	r1, [pc, #320]	@ (8008cdc <LPTIM_Disable+0x1fc>)
 8008b9c:	400a      	ands	r2, r1
 8008b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008ba0:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d103      	bne.n	8008bb0 <LPTIM_Disable+0xd0>
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d100      	bne.n	8008bb0 <LPTIM_Disable+0xd0>
 8008bae:	e071      	b.n	8008c94 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a46      	ldr	r2, [pc, #280]	@ (8008cd0 <LPTIM_Disable+0x1f0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d003      	beq.n	8008bc2 <LPTIM_Disable+0xe2>
 8008bba:	4a46      	ldr	r2, [pc, #280]	@ (8008cd4 <LPTIM_Disable+0x1f4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d007      	beq.n	8008bd0 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008bc0:	e00d      	b.n	8008bde <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008bc2:	4b45      	ldr	r3, [pc, #276]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bc6:	4b44      	ldr	r3, [pc, #272]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008bc8:	4945      	ldr	r1, [pc, #276]	@ (8008ce0 <LPTIM_Disable+0x200>)
 8008bca:	400a      	ands	r2, r1
 8008bcc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008bce:	e006      	b.n	8008bde <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008bd0:	4b41      	ldr	r3, [pc, #260]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008bd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bd4:	4b40      	ldr	r3, [pc, #256]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008bd6:	4943      	ldr	r1, [pc, #268]	@ (8008ce4 <LPTIM_Disable+0x204>)
 8008bd8:	400a      	ands	r2, r1
 8008bda:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008bdc:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d01b      	beq.n	8008c1c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691a      	ldr	r2, [r3, #16]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2101      	movs	r1, #1
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69fa      	ldr	r2, [r7, #28]
 8008bfa:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2108      	movs	r1, #8
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7ff ff35 	bl	8008a70 <LPTIM_WaitForFlag>
 8008c06:	0003      	movs	r3, r0
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d103      	bne.n	8008c14 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2236      	movs	r2, #54	@ 0x36
 8008c10:	2103      	movs	r1, #3
 8008c12:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2208      	movs	r2, #8
 8008c1a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d01b      	beq.n	8008c5a <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2110      	movs	r1, #16
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f7ff ff16 	bl	8008a70 <LPTIM_WaitForFlag>
 8008c44:	0003      	movs	r3, r0
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d103      	bne.n	8008c52 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2236      	movs	r2, #54	@ 0x36
 8008c4e:	2103      	movs	r1, #3
 8008c50:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2210      	movs	r2, #16
 8008c58:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cd0 <LPTIM_Disable+0x1f0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <LPTIM_Disable+0x18c>
 8008c64:	4a1b      	ldr	r2, [pc, #108]	@ (8008cd4 <LPTIM_Disable+0x1f4>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00a      	beq.n	8008c80 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008c6a:	e013      	b.n	8008c94 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce0 <LPTIM_Disable+0x200>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	0019      	movs	r1, r3
 8008c76:	4b18      	ldr	r3, [pc, #96]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008c7e:	e009      	b.n	8008c94 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008c80:	4b15      	ldr	r3, [pc, #84]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c84:	4a17      	ldr	r2, [pc, #92]	@ (8008ce4 <LPTIM_Disable+0x204>)
 8008c86:	4013      	ands	r3, r2
 8008c88:	0019      	movs	r1, r3
 8008c8a:	4b13      	ldr	r3, [pc, #76]	@ (8008cd8 <LPTIM_Disable+0x1f8>)
 8008c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008c92:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691a      	ldr	r2, [r3, #16]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	438a      	bics	r2, r1
 8008ca2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008caa:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6a3a      	ldr	r2, [r7, #32]
 8008cb2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	625a      	str	r2, [r3, #36]	@ 0x24
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f383 8810 	msr	PRIMASK, r3
}
 8008cc6:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008cc8:	46c0      	nop			@ (mov r8, r8)
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	b00c      	add	sp, #48	@ 0x30
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40007c00 	.word	0x40007c00
 8008cd4:	40009400 	.word	0x40009400
 8008cd8:	40021000 	.word	0x40021000
 8008cdc:	bfffffff 	.word	0xbfffffff
 8008ce0:	fff3ffff 	.word	0xfff3ffff
 8008ce4:	ffcfffff 	.word	0xffcfffff

08008ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008cf0:	4b19      	ldr	r3, [pc, #100]	@ (8008d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a19      	ldr	r2, [pc, #100]	@ (8008d5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	0019      	movs	r1, r3
 8008cfa:	4b17      	ldr	r3, [pc, #92]	@ (8008d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	2380      	movs	r3, #128	@ 0x80
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d11f      	bne.n	8008d4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008d0c:	4b14      	ldr	r3, [pc, #80]	@ (8008d60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	0013      	movs	r3, r2
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	189b      	adds	r3, r3, r2
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	4912      	ldr	r1, [pc, #72]	@ (8008d64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	f7f7 f9f2 	bl	8000104 <__udivsi3>
 8008d20:	0003      	movs	r3, r0
 8008d22:	3301      	adds	r3, #1
 8008d24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d26:	e008      	b.n	8008d3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e001      	b.n	8008d3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e009      	b.n	8008d4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d3a:	4b07      	ldr	r3, [pc, #28]	@ (8008d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008d3c:	695a      	ldr	r2, [r3, #20]
 8008d3e:	2380      	movs	r3, #128	@ 0x80
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	401a      	ands	r2, r3
 8008d44:	2380      	movs	r3, #128	@ 0x80
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d0ed      	beq.n	8008d28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	0018      	movs	r0, r3
 8008d50:	46bd      	mov	sp, r7
 8008d52:	b004      	add	sp, #16
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	46c0      	nop			@ (mov r8, r8)
 8008d58:	40007000 	.word	0x40007000
 8008d5c:	fffff9ff 	.word	0xfffff9ff
 8008d60:	2000044c 	.word	0x2000044c
 8008d64:	000f4240 	.word	0x000f4240

08008d68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008d6c:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	23e0      	movs	r3, #224	@ 0xe0
 8008d72:	01db      	lsls	r3, r3, #7
 8008d74:	4013      	ands	r3, r2
}
 8008d76:	0018      	movs	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	40021000 	.word	0x40021000

08008d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b088      	sub	sp, #32
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e2fe      	b.n	8009390 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2201      	movs	r2, #1
 8008d98:	4013      	ands	r3, r2
 8008d9a:	d100      	bne.n	8008d9e <HAL_RCC_OscConfig+0x1e>
 8008d9c:	e07c      	b.n	8008e98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d9e:	4bc3      	ldr	r3, [pc, #780]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	2238      	movs	r2, #56	@ 0x38
 8008da4:	4013      	ands	r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008da8:	4bc0      	ldr	r3, [pc, #768]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	2203      	movs	r2, #3
 8008dae:	4013      	ands	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d102      	bne.n	8008dbe <HAL_RCC_OscConfig+0x3e>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d002      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d10b      	bne.n	8008ddc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dc4:	4bb9      	ldr	r3, [pc, #740]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	2380      	movs	r3, #128	@ 0x80
 8008dca:	029b      	lsls	r3, r3, #10
 8008dcc:	4013      	ands	r3, r2
 8008dce:	d062      	beq.n	8008e96 <HAL_RCC_OscConfig+0x116>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d15e      	bne.n	8008e96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e2d9      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	2380      	movs	r3, #128	@ 0x80
 8008de2:	025b      	lsls	r3, r3, #9
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d107      	bne.n	8008df8 <HAL_RCC_OscConfig+0x78>
 8008de8:	4bb0      	ldr	r3, [pc, #704]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	4baf      	ldr	r3, [pc, #700]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008dee:	2180      	movs	r1, #128	@ 0x80
 8008df0:	0249      	lsls	r1, r1, #9
 8008df2:	430a      	orrs	r2, r1
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	e020      	b.n	8008e3a <HAL_RCC_OscConfig+0xba>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	23a0      	movs	r3, #160	@ 0xa0
 8008dfe:	02db      	lsls	r3, r3, #11
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d10e      	bne.n	8008e22 <HAL_RCC_OscConfig+0xa2>
 8008e04:	4ba9      	ldr	r3, [pc, #676]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4ba8      	ldr	r3, [pc, #672]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e0a:	2180      	movs	r1, #128	@ 0x80
 8008e0c:	02c9      	lsls	r1, r1, #11
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	4ba6      	ldr	r3, [pc, #664]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4ba5      	ldr	r3, [pc, #660]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e18:	2180      	movs	r1, #128	@ 0x80
 8008e1a:	0249      	lsls	r1, r1, #9
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	e00b      	b.n	8008e3a <HAL_RCC_OscConfig+0xba>
 8008e22:	4ba2      	ldr	r3, [pc, #648]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4ba1      	ldr	r3, [pc, #644]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e28:	49a1      	ldr	r1, [pc, #644]	@ (80090b0 <HAL_RCC_OscConfig+0x330>)
 8008e2a:	400a      	ands	r2, r1
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	4b9f      	ldr	r3, [pc, #636]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4b9e      	ldr	r3, [pc, #632]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e34:	499f      	ldr	r1, [pc, #636]	@ (80090b4 <HAL_RCC_OscConfig+0x334>)
 8008e36:	400a      	ands	r2, r1
 8008e38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d014      	beq.n	8008e6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e42:	f7fd fb19 	bl	8006478 <HAL_GetTick>
 8008e46:	0003      	movs	r3, r0
 8008e48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e4a:	e008      	b.n	8008e5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e4c:	f7fd fb14 	bl	8006478 <HAL_GetTick>
 8008e50:	0002      	movs	r2, r0
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b64      	cmp	r3, #100	@ 0x64
 8008e58:	d901      	bls.n	8008e5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e298      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e5e:	4b93      	ldr	r3, [pc, #588]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	2380      	movs	r3, #128	@ 0x80
 8008e64:	029b      	lsls	r3, r3, #10
 8008e66:	4013      	ands	r3, r2
 8008e68:	d0f0      	beq.n	8008e4c <HAL_RCC_OscConfig+0xcc>
 8008e6a:	e015      	b.n	8008e98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6c:	f7fd fb04 	bl	8006478 <HAL_GetTick>
 8008e70:	0003      	movs	r3, r0
 8008e72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e74:	e008      	b.n	8008e88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e76:	f7fd faff 	bl	8006478 <HAL_GetTick>
 8008e7a:	0002      	movs	r2, r0
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b64      	cmp	r3, #100	@ 0x64
 8008e82:	d901      	bls.n	8008e88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e283      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e88:	4b88      	ldr	r3, [pc, #544]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	2380      	movs	r3, #128	@ 0x80
 8008e8e:	029b      	lsls	r3, r3, #10
 8008e90:	4013      	ands	r3, r2
 8008e92:	d1f0      	bne.n	8008e76 <HAL_RCC_OscConfig+0xf6>
 8008e94:	e000      	b.n	8008e98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e96:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	d100      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x124>
 8008ea2:	e099      	b.n	8008fd8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ea4:	4b81      	ldr	r3, [pc, #516]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	2238      	movs	r2, #56	@ 0x38
 8008eaa:	4013      	ands	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008eae:	4b7f      	ldr	r3, [pc, #508]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2203      	movs	r2, #3
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	2b10      	cmp	r3, #16
 8008ebc:	d102      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x144>
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d002      	beq.n	8008eca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d135      	bne.n	8008f36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eca:	4b78      	ldr	r3, [pc, #480]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	2380      	movs	r3, #128	@ 0x80
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	d005      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x162>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e256      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ee2:	4b72      	ldr	r3, [pc, #456]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	4a74      	ldr	r2, [pc, #464]	@ (80090b8 <HAL_RCC_OscConfig+0x338>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	0019      	movs	r1, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	021a      	lsls	r2, r3, #8
 8008ef2:	4b6e      	ldr	r3, [pc, #440]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d112      	bne.n	8008f24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008efe:	4b6b      	ldr	r3, [pc, #428]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a6e      	ldr	r2, [pc, #440]	@ (80090bc <HAL_RCC_OscConfig+0x33c>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	0019      	movs	r1, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	4b67      	ldr	r3, [pc, #412]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008f12:	4b66      	ldr	r3, [pc, #408]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	0adb      	lsrs	r3, r3, #11
 8008f18:	2207      	movs	r2, #7
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	4a68      	ldr	r2, [pc, #416]	@ (80090c0 <HAL_RCC_OscConfig+0x340>)
 8008f1e:	40da      	lsrs	r2, r3
 8008f20:	4b68      	ldr	r3, [pc, #416]	@ (80090c4 <HAL_RCC_OscConfig+0x344>)
 8008f22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008f24:	4b68      	ldr	r3, [pc, #416]	@ (80090c8 <HAL_RCC_OscConfig+0x348>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f7fd fa49 	bl	80063c0 <HAL_InitTick>
 8008f2e:	1e03      	subs	r3, r0, #0
 8008f30:	d051      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e22c      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d030      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a5e      	ldr	r2, [pc, #376]	@ (80090bc <HAL_RCC_OscConfig+0x33c>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	0019      	movs	r1, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	4b57      	ldr	r3, [pc, #348]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008f52:	4b56      	ldr	r3, [pc, #344]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	4b55      	ldr	r3, [pc, #340]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f58:	2180      	movs	r1, #128	@ 0x80
 8008f5a:	0049      	lsls	r1, r1, #1
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f60:	f7fd fa8a 	bl	8006478 <HAL_GetTick>
 8008f64:	0003      	movs	r3, r0
 8008f66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f6a:	f7fd fa85 	bl	8006478 <HAL_GetTick>
 8008f6e:	0002      	movs	r2, r0
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e209      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	2380      	movs	r3, #128	@ 0x80
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	4013      	ands	r3, r2
 8008f86:	d0f0      	beq.n	8008f6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f88:	4b48      	ldr	r3, [pc, #288]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80090b8 <HAL_RCC_OscConfig+0x338>)
 8008f8e:	4013      	ands	r3, r2
 8008f90:	0019      	movs	r1, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	021a      	lsls	r2, r3, #8
 8008f98:	4b44      	ldr	r3, [pc, #272]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	605a      	str	r2, [r3, #4]
 8008f9e:	e01b      	b.n	8008fd8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008fa0:	4b42      	ldr	r3, [pc, #264]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	4b41      	ldr	r3, [pc, #260]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008fa6:	4949      	ldr	r1, [pc, #292]	@ (80090cc <HAL_RCC_OscConfig+0x34c>)
 8008fa8:	400a      	ands	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fac:	f7fd fa64 	bl	8006478 <HAL_GetTick>
 8008fb0:	0003      	movs	r3, r0
 8008fb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fb4:	e008      	b.n	8008fc8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fb6:	f7fd fa5f 	bl	8006478 <HAL_GetTick>
 8008fba:	0002      	movs	r2, r0
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d901      	bls.n	8008fc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e1e3      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fc8:	4b38      	ldr	r3, [pc, #224]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	2380      	movs	r3, #128	@ 0x80
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	d1f0      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x236>
 8008fd4:	e000      	b.n	8008fd8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fd6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2208      	movs	r2, #8
 8008fde:	4013      	ands	r3, r2
 8008fe0:	d047      	beq.n	8009072 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008fe2:	4b32      	ldr	r3, [pc, #200]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	2238      	movs	r2, #56	@ 0x38
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b18      	cmp	r3, #24
 8008fec:	d10a      	bne.n	8009004 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008fee:	4b2f      	ldr	r3, [pc, #188]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8008ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	d03c      	beq.n	8009072 <HAL_RCC_OscConfig+0x2f2>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d138      	bne.n	8009072 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e1c5      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d019      	beq.n	8009040 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800900c:	4b27      	ldr	r3, [pc, #156]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 800900e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009010:	4b26      	ldr	r3, [pc, #152]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8009012:	2101      	movs	r1, #1
 8009014:	430a      	orrs	r2, r1
 8009016:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009018:	f7fd fa2e 	bl	8006478 <HAL_GetTick>
 800901c:	0003      	movs	r3, r0
 800901e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009020:	e008      	b.n	8009034 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009022:	f7fd fa29 	bl	8006478 <HAL_GetTick>
 8009026:	0002      	movs	r2, r0
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d901      	bls.n	8009034 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e1ad      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009034:	4b1d      	ldr	r3, [pc, #116]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8009036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009038:	2202      	movs	r2, #2
 800903a:	4013      	ands	r3, r2
 800903c:	d0f1      	beq.n	8009022 <HAL_RCC_OscConfig+0x2a2>
 800903e:	e018      	b.n	8009072 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009040:	4b1a      	ldr	r3, [pc, #104]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8009042:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009044:	4b19      	ldr	r3, [pc, #100]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8009046:	2101      	movs	r1, #1
 8009048:	438a      	bics	r2, r1
 800904a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800904c:	f7fd fa14 	bl	8006478 <HAL_GetTick>
 8009050:	0003      	movs	r3, r0
 8009052:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009054:	e008      	b.n	8009068 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009056:	f7fd fa0f 	bl	8006478 <HAL_GetTick>
 800905a:	0002      	movs	r2, r0
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d901      	bls.n	8009068 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e193      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009068:	4b10      	ldr	r3, [pc, #64]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 800906a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800906c:	2202      	movs	r2, #2
 800906e:	4013      	ands	r3, r2
 8009070:	d1f1      	bne.n	8009056 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2204      	movs	r2, #4
 8009078:	4013      	ands	r3, r2
 800907a:	d100      	bne.n	800907e <HAL_RCC_OscConfig+0x2fe>
 800907c:	e0c6      	b.n	800920c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800907e:	231f      	movs	r3, #31
 8009080:	18fb      	adds	r3, r7, r3
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009086:	4b09      	ldr	r3, [pc, #36]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	2238      	movs	r2, #56	@ 0x38
 800908c:	4013      	ands	r3, r2
 800908e:	2b20      	cmp	r3, #32
 8009090:	d11e      	bne.n	80090d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009092:	4b06      	ldr	r3, [pc, #24]	@ (80090ac <HAL_RCC_OscConfig+0x32c>)
 8009094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009096:	2202      	movs	r2, #2
 8009098:	4013      	ands	r3, r2
 800909a:	d100      	bne.n	800909e <HAL_RCC_OscConfig+0x31e>
 800909c:	e0b6      	b.n	800920c <HAL_RCC_OscConfig+0x48c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d000      	beq.n	80090a8 <HAL_RCC_OscConfig+0x328>
 80090a6:	e0b1      	b.n	800920c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e171      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
 80090ac:	40021000 	.word	0x40021000
 80090b0:	fffeffff 	.word	0xfffeffff
 80090b4:	fffbffff 	.word	0xfffbffff
 80090b8:	ffff80ff 	.word	0xffff80ff
 80090bc:	ffffc7ff 	.word	0xffffc7ff
 80090c0:	00f42400 	.word	0x00f42400
 80090c4:	2000044c 	.word	0x2000044c
 80090c8:	20000450 	.word	0x20000450
 80090cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80090d0:	4bb1      	ldr	r3, [pc, #708]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80090d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090d4:	2380      	movs	r3, #128	@ 0x80
 80090d6:	055b      	lsls	r3, r3, #21
 80090d8:	4013      	ands	r3, r2
 80090da:	d101      	bne.n	80090e0 <HAL_RCC_OscConfig+0x360>
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <HAL_RCC_OscConfig+0x362>
 80090e0:	2300      	movs	r3, #0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d011      	beq.n	800910a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80090e6:	4bac      	ldr	r3, [pc, #688]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80090e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ea:	4bab      	ldr	r3, [pc, #684]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80090ec:	2180      	movs	r1, #128	@ 0x80
 80090ee:	0549      	lsls	r1, r1, #21
 80090f0:	430a      	orrs	r2, r1
 80090f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80090f4:	4ba8      	ldr	r3, [pc, #672]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80090f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090f8:	2380      	movs	r3, #128	@ 0x80
 80090fa:	055b      	lsls	r3, r3, #21
 80090fc:	4013      	ands	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009102:	231f      	movs	r3, #31
 8009104:	18fb      	adds	r3, r7, r3
 8009106:	2201      	movs	r2, #1
 8009108:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800910a:	4ba4      	ldr	r3, [pc, #656]	@ (800939c <HAL_RCC_OscConfig+0x61c>)
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	2380      	movs	r3, #128	@ 0x80
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	4013      	ands	r3, r2
 8009114:	d11a      	bne.n	800914c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009116:	4ba1      	ldr	r3, [pc, #644]	@ (800939c <HAL_RCC_OscConfig+0x61c>)
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	4ba0      	ldr	r3, [pc, #640]	@ (800939c <HAL_RCC_OscConfig+0x61c>)
 800911c:	2180      	movs	r1, #128	@ 0x80
 800911e:	0049      	lsls	r1, r1, #1
 8009120:	430a      	orrs	r2, r1
 8009122:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009124:	f7fd f9a8 	bl	8006478 <HAL_GetTick>
 8009128:	0003      	movs	r3, r0
 800912a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800912c:	e008      	b.n	8009140 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800912e:	f7fd f9a3 	bl	8006478 <HAL_GetTick>
 8009132:	0002      	movs	r2, r0
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e127      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009140:	4b96      	ldr	r3, [pc, #600]	@ (800939c <HAL_RCC_OscConfig+0x61c>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	2380      	movs	r3, #128	@ 0x80
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	4013      	ands	r3, r2
 800914a:	d0f0      	beq.n	800912e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d106      	bne.n	8009162 <HAL_RCC_OscConfig+0x3e2>
 8009154:	4b90      	ldr	r3, [pc, #576]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009156:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009158:	4b8f      	ldr	r3, [pc, #572]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 800915a:	2101      	movs	r1, #1
 800915c:	430a      	orrs	r2, r1
 800915e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009160:	e01c      	b.n	800919c <HAL_RCC_OscConfig+0x41c>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2b05      	cmp	r3, #5
 8009168:	d10c      	bne.n	8009184 <HAL_RCC_OscConfig+0x404>
 800916a:	4b8b      	ldr	r3, [pc, #556]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 800916c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800916e:	4b8a      	ldr	r3, [pc, #552]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009170:	2104      	movs	r1, #4
 8009172:	430a      	orrs	r2, r1
 8009174:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009176:	4b88      	ldr	r3, [pc, #544]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009178:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800917a:	4b87      	ldr	r3, [pc, #540]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 800917c:	2101      	movs	r1, #1
 800917e:	430a      	orrs	r2, r1
 8009180:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009182:	e00b      	b.n	800919c <HAL_RCC_OscConfig+0x41c>
 8009184:	4b84      	ldr	r3, [pc, #528]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009186:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009188:	4b83      	ldr	r3, [pc, #524]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 800918a:	2101      	movs	r1, #1
 800918c:	438a      	bics	r2, r1
 800918e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009190:	4b81      	ldr	r3, [pc, #516]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009192:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009194:	4b80      	ldr	r3, [pc, #512]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009196:	2104      	movs	r1, #4
 8009198:	438a      	bics	r2, r1
 800919a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d014      	beq.n	80091ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a4:	f7fd f968 	bl	8006478 <HAL_GetTick>
 80091a8:	0003      	movs	r3, r0
 80091aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ac:	e009      	b.n	80091c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091ae:	f7fd f963 	bl	8006478 <HAL_GetTick>
 80091b2:	0002      	movs	r2, r0
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	4a79      	ldr	r2, [pc, #484]	@ (80093a0 <HAL_RCC_OscConfig+0x620>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e0e6      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091c2:	4b75      	ldr	r3, [pc, #468]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80091c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091c6:	2202      	movs	r2, #2
 80091c8:	4013      	ands	r3, r2
 80091ca:	d0f0      	beq.n	80091ae <HAL_RCC_OscConfig+0x42e>
 80091cc:	e013      	b.n	80091f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ce:	f7fd f953 	bl	8006478 <HAL_GetTick>
 80091d2:	0003      	movs	r3, r0
 80091d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091d6:	e009      	b.n	80091ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091d8:	f7fd f94e 	bl	8006478 <HAL_GetTick>
 80091dc:	0002      	movs	r2, r0
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	4a6f      	ldr	r2, [pc, #444]	@ (80093a0 <HAL_RCC_OscConfig+0x620>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d901      	bls.n	80091ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e0d1      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091ec:	4b6a      	ldr	r3, [pc, #424]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80091ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091f0:	2202      	movs	r2, #2
 80091f2:	4013      	ands	r3, r2
 80091f4:	d1f0      	bne.n	80091d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80091f6:	231f      	movs	r3, #31
 80091f8:	18fb      	adds	r3, r7, r3
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d105      	bne.n	800920c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009200:	4b65      	ldr	r3, [pc, #404]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009202:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009204:	4b64      	ldr	r3, [pc, #400]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009206:	4967      	ldr	r1, [pc, #412]	@ (80093a4 <HAL_RCC_OscConfig+0x624>)
 8009208:	400a      	ands	r2, r1
 800920a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d100      	bne.n	8009216 <HAL_RCC_OscConfig+0x496>
 8009214:	e0bb      	b.n	800938e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009216:	4b60      	ldr	r3, [pc, #384]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	2238      	movs	r2, #56	@ 0x38
 800921c:	4013      	ands	r3, r2
 800921e:	2b10      	cmp	r3, #16
 8009220:	d100      	bne.n	8009224 <HAL_RCC_OscConfig+0x4a4>
 8009222:	e07b      	b.n	800931c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d156      	bne.n	80092da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800922c:	4b5a      	ldr	r3, [pc, #360]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	4b59      	ldr	r3, [pc, #356]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009232:	495d      	ldr	r1, [pc, #372]	@ (80093a8 <HAL_RCC_OscConfig+0x628>)
 8009234:	400a      	ands	r2, r1
 8009236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009238:	f7fd f91e 	bl	8006478 <HAL_GetTick>
 800923c:	0003      	movs	r3, r0
 800923e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009240:	e008      	b.n	8009254 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009242:	f7fd f919 	bl	8006478 <HAL_GetTick>
 8009246:	0002      	movs	r2, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	2b02      	cmp	r3, #2
 800924e:	d901      	bls.n	8009254 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e09d      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009254:	4b50      	ldr	r3, [pc, #320]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	2380      	movs	r3, #128	@ 0x80
 800925a:	049b      	lsls	r3, r3, #18
 800925c:	4013      	ands	r3, r2
 800925e:	d1f0      	bne.n	8009242 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009260:	4b4d      	ldr	r3, [pc, #308]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	4a51      	ldr	r2, [pc, #324]	@ (80093ac <HAL_RCC_OscConfig+0x62c>)
 8009266:	4013      	ands	r3, r2
 8009268:	0019      	movs	r1, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1a      	ldr	r2, [r3, #32]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009278:	021b      	lsls	r3, r3, #8
 800927a:	431a      	orrs	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009280:	431a      	orrs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800928c:	431a      	orrs	r2, r3
 800928e:	4b42      	ldr	r3, [pc, #264]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009290:	430a      	orrs	r2, r1
 8009292:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009294:	4b40      	ldr	r3, [pc, #256]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	4b3f      	ldr	r3, [pc, #252]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 800929a:	2180      	movs	r1, #128	@ 0x80
 800929c:	0449      	lsls	r1, r1, #17
 800929e:	430a      	orrs	r2, r1
 80092a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80092a2:	4b3d      	ldr	r3, [pc, #244]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	4b3c      	ldr	r3, [pc, #240]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80092a8:	2180      	movs	r1, #128	@ 0x80
 80092aa:	0549      	lsls	r1, r1, #21
 80092ac:	430a      	orrs	r2, r1
 80092ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b0:	f7fd f8e2 	bl	8006478 <HAL_GetTick>
 80092b4:	0003      	movs	r3, r0
 80092b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092b8:	e008      	b.n	80092cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092ba:	f7fd f8dd 	bl	8006478 <HAL_GetTick>
 80092be:	0002      	movs	r2, r0
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e061      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092cc:	4b32      	ldr	r3, [pc, #200]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	2380      	movs	r3, #128	@ 0x80
 80092d2:	049b      	lsls	r3, r3, #18
 80092d4:	4013      	ands	r3, r2
 80092d6:	d0f0      	beq.n	80092ba <HAL_RCC_OscConfig+0x53a>
 80092d8:	e059      	b.n	800938e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092da:	4b2f      	ldr	r3, [pc, #188]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	4b2e      	ldr	r3, [pc, #184]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 80092e0:	4931      	ldr	r1, [pc, #196]	@ (80093a8 <HAL_RCC_OscConfig+0x628>)
 80092e2:	400a      	ands	r2, r1
 80092e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092e6:	f7fd f8c7 	bl	8006478 <HAL_GetTick>
 80092ea:	0003      	movs	r3, r0
 80092ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092ee:	e008      	b.n	8009302 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092f0:	f7fd f8c2 	bl	8006478 <HAL_GetTick>
 80092f4:	0002      	movs	r2, r0
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e046      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009302:	4b25      	ldr	r3, [pc, #148]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	2380      	movs	r3, #128	@ 0x80
 8009308:	049b      	lsls	r3, r3, #18
 800930a:	4013      	ands	r3, r2
 800930c:	d1f0      	bne.n	80092f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800930e:	4b22      	ldr	r3, [pc, #136]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	4b21      	ldr	r3, [pc, #132]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 8009314:	4926      	ldr	r1, [pc, #152]	@ (80093b0 <HAL_RCC_OscConfig+0x630>)
 8009316:	400a      	ands	r2, r1
 8009318:	60da      	str	r2, [r3, #12]
 800931a:	e038      	b.n	800938e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d101      	bne.n	8009328 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e033      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009328:	4b1b      	ldr	r3, [pc, #108]	@ (8009398 <HAL_RCC_OscConfig+0x618>)
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2203      	movs	r2, #3
 8009332:	401a      	ands	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a1b      	ldr	r3, [r3, #32]
 8009338:	429a      	cmp	r2, r3
 800933a:	d126      	bne.n	800938a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2270      	movs	r2, #112	@ 0x70
 8009340:	401a      	ands	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009346:	429a      	cmp	r2, r3
 8009348:	d11f      	bne.n	800938a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	23fe      	movs	r3, #254	@ 0xfe
 800934e:	01db      	lsls	r3, r3, #7
 8009350:	401a      	ands	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009356:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009358:	429a      	cmp	r2, r3
 800935a:	d116      	bne.n	800938a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	23f8      	movs	r3, #248	@ 0xf8
 8009360:	039b      	lsls	r3, r3, #14
 8009362:	401a      	ands	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009368:	429a      	cmp	r2, r3
 800936a:	d10e      	bne.n	800938a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	23e0      	movs	r3, #224	@ 0xe0
 8009370:	051b      	lsls	r3, r3, #20
 8009372:	401a      	ands	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009378:	429a      	cmp	r2, r3
 800937a:	d106      	bne.n	800938a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	0f5b      	lsrs	r3, r3, #29
 8009380:	075a      	lsls	r2, r3, #29
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009386:	429a      	cmp	r2, r3
 8009388:	d001      	beq.n	800938e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	b008      	add	sp, #32
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40021000 	.word	0x40021000
 800939c:	40007000 	.word	0x40007000
 80093a0:	00001388 	.word	0x00001388
 80093a4:	efffffff 	.word	0xefffffff
 80093a8:	feffffff 	.word	0xfeffffff
 80093ac:	11c1808c 	.word	0x11c1808c
 80093b0:	eefefffc 	.word	0xeefefffc

080093b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e0e9      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093c8:	4b76      	ldr	r3, [pc, #472]	@ (80095a4 <HAL_RCC_ClockConfig+0x1f0>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2207      	movs	r2, #7
 80093ce:	4013      	ands	r3, r2
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d91e      	bls.n	8009414 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093d6:	4b73      	ldr	r3, [pc, #460]	@ (80095a4 <HAL_RCC_ClockConfig+0x1f0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2207      	movs	r2, #7
 80093dc:	4393      	bics	r3, r2
 80093de:	0019      	movs	r1, r3
 80093e0:	4b70      	ldr	r3, [pc, #448]	@ (80095a4 <HAL_RCC_ClockConfig+0x1f0>)
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	430a      	orrs	r2, r1
 80093e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80093e8:	f7fd f846 	bl	8006478 <HAL_GetTick>
 80093ec:	0003      	movs	r3, r0
 80093ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80093f0:	e009      	b.n	8009406 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093f2:	f7fd f841 	bl	8006478 <HAL_GetTick>
 80093f6:	0002      	movs	r2, r0
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	4a6a      	ldr	r2, [pc, #424]	@ (80095a8 <HAL_RCC_ClockConfig+0x1f4>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d901      	bls.n	8009406 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e0ca      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009406:	4b67      	ldr	r3, [pc, #412]	@ (80095a4 <HAL_RCC_ClockConfig+0x1f0>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2207      	movs	r2, #7
 800940c:	4013      	ands	r3, r2
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	429a      	cmp	r2, r3
 8009412:	d1ee      	bne.n	80093f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2202      	movs	r2, #2
 800941a:	4013      	ands	r3, r2
 800941c:	d015      	beq.n	800944a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2204      	movs	r2, #4
 8009424:	4013      	ands	r3, r2
 8009426:	d006      	beq.n	8009436 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009428:	4b60      	ldr	r3, [pc, #384]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	4b5f      	ldr	r3, [pc, #380]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 800942e:	21e0      	movs	r1, #224	@ 0xe0
 8009430:	01c9      	lsls	r1, r1, #7
 8009432:	430a      	orrs	r2, r1
 8009434:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009436:	4b5d      	ldr	r3, [pc, #372]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	4a5d      	ldr	r2, [pc, #372]	@ (80095b0 <HAL_RCC_ClockConfig+0x1fc>)
 800943c:	4013      	ands	r3, r2
 800943e:	0019      	movs	r1, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	4b59      	ldr	r3, [pc, #356]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 8009446:	430a      	orrs	r2, r1
 8009448:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2201      	movs	r2, #1
 8009450:	4013      	ands	r3, r2
 8009452:	d057      	beq.n	8009504 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d107      	bne.n	800946c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800945c:	4b53      	ldr	r3, [pc, #332]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	2380      	movs	r3, #128	@ 0x80
 8009462:	029b      	lsls	r3, r3, #10
 8009464:	4013      	ands	r3, r2
 8009466:	d12b      	bne.n	80094c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e097      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2b02      	cmp	r3, #2
 8009472:	d107      	bne.n	8009484 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009474:	4b4d      	ldr	r3, [pc, #308]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	2380      	movs	r3, #128	@ 0x80
 800947a:	049b      	lsls	r3, r3, #18
 800947c:	4013      	ands	r3, r2
 800947e:	d11f      	bne.n	80094c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e08b      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d107      	bne.n	800949c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800948c:	4b47      	ldr	r3, [pc, #284]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	2380      	movs	r3, #128	@ 0x80
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	4013      	ands	r3, r2
 8009496:	d113      	bne.n	80094c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e07f      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d106      	bne.n	80094b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80094a4:	4b41      	ldr	r3, [pc, #260]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 80094a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094a8:	2202      	movs	r2, #2
 80094aa:	4013      	ands	r3, r2
 80094ac:	d108      	bne.n	80094c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e074      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094b2:	4b3e      	ldr	r3, [pc, #248]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 80094b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094b6:	2202      	movs	r2, #2
 80094b8:	4013      	ands	r3, r2
 80094ba:	d101      	bne.n	80094c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e06d      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094c0:	4b3a      	ldr	r3, [pc, #232]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2207      	movs	r2, #7
 80094c6:	4393      	bics	r3, r2
 80094c8:	0019      	movs	r1, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	4b37      	ldr	r3, [pc, #220]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 80094d0:	430a      	orrs	r2, r1
 80094d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d4:	f7fc ffd0 	bl	8006478 <HAL_GetTick>
 80094d8:	0003      	movs	r3, r0
 80094da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094dc:	e009      	b.n	80094f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094de:	f7fc ffcb 	bl	8006478 <HAL_GetTick>
 80094e2:	0002      	movs	r2, r0
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	4a2f      	ldr	r2, [pc, #188]	@ (80095a8 <HAL_RCC_ClockConfig+0x1f4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e054      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094f2:	4b2e      	ldr	r3, [pc, #184]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	2238      	movs	r2, #56	@ 0x38
 80094f8:	401a      	ands	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	429a      	cmp	r2, r3
 8009502:	d1ec      	bne.n	80094de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009504:	4b27      	ldr	r3, [pc, #156]	@ (80095a4 <HAL_RCC_ClockConfig+0x1f0>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2207      	movs	r2, #7
 800950a:	4013      	ands	r3, r2
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d21e      	bcs.n	8009550 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009512:	4b24      	ldr	r3, [pc, #144]	@ (80095a4 <HAL_RCC_ClockConfig+0x1f0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2207      	movs	r2, #7
 8009518:	4393      	bics	r3, r2
 800951a:	0019      	movs	r1, r3
 800951c:	4b21      	ldr	r3, [pc, #132]	@ (80095a4 <HAL_RCC_ClockConfig+0x1f0>)
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009524:	f7fc ffa8 	bl	8006478 <HAL_GetTick>
 8009528:	0003      	movs	r3, r0
 800952a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800952c:	e009      	b.n	8009542 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800952e:	f7fc ffa3 	bl	8006478 <HAL_GetTick>
 8009532:	0002      	movs	r2, r0
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	4a1b      	ldr	r2, [pc, #108]	@ (80095a8 <HAL_RCC_ClockConfig+0x1f4>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d901      	bls.n	8009542 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e02c      	b.n	800959c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009542:	4b18      	ldr	r3, [pc, #96]	@ (80095a4 <HAL_RCC_ClockConfig+0x1f0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2207      	movs	r2, #7
 8009548:	4013      	ands	r3, r2
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	429a      	cmp	r2, r3
 800954e:	d1ee      	bne.n	800952e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2204      	movs	r2, #4
 8009556:	4013      	ands	r3, r2
 8009558:	d009      	beq.n	800956e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800955a:	4b14      	ldr	r3, [pc, #80]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	4a15      	ldr	r2, [pc, #84]	@ (80095b4 <HAL_RCC_ClockConfig+0x200>)
 8009560:	4013      	ands	r3, r2
 8009562:	0019      	movs	r1, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	4b10      	ldr	r3, [pc, #64]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 800956a:	430a      	orrs	r2, r1
 800956c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800956e:	f000 f829 	bl	80095c4 <HAL_RCC_GetSysClockFreq>
 8009572:	0001      	movs	r1, r0
 8009574:	4b0d      	ldr	r3, [pc, #52]	@ (80095ac <HAL_RCC_ClockConfig+0x1f8>)
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	0a1b      	lsrs	r3, r3, #8
 800957a:	220f      	movs	r2, #15
 800957c:	401a      	ands	r2, r3
 800957e:	4b0e      	ldr	r3, [pc, #56]	@ (80095b8 <HAL_RCC_ClockConfig+0x204>)
 8009580:	0092      	lsls	r2, r2, #2
 8009582:	58d3      	ldr	r3, [r2, r3]
 8009584:	221f      	movs	r2, #31
 8009586:	4013      	ands	r3, r2
 8009588:	000a      	movs	r2, r1
 800958a:	40da      	lsrs	r2, r3
 800958c:	4b0b      	ldr	r3, [pc, #44]	@ (80095bc <HAL_RCC_ClockConfig+0x208>)
 800958e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009590:	4b0b      	ldr	r3, [pc, #44]	@ (80095c0 <HAL_RCC_ClockConfig+0x20c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	0018      	movs	r0, r3
 8009596:	f7fc ff13 	bl	80063c0 <HAL_InitTick>
 800959a:	0003      	movs	r3, r0
}
 800959c:	0018      	movs	r0, r3
 800959e:	46bd      	mov	sp, r7
 80095a0:	b004      	add	sp, #16
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	40022000 	.word	0x40022000
 80095a8:	00001388 	.word	0x00001388
 80095ac:	40021000 	.word	0x40021000
 80095b0:	fffff0ff 	.word	0xfffff0ff
 80095b4:	ffff8fff 	.word	0xffff8fff
 80095b8:	0800dfd0 	.word	0x0800dfd0
 80095bc:	2000044c 	.word	0x2000044c
 80095c0:	20000450 	.word	0x20000450

080095c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80095ca:	4b3c      	ldr	r3, [pc, #240]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	2238      	movs	r2, #56	@ 0x38
 80095d0:	4013      	ands	r3, r2
 80095d2:	d10f      	bne.n	80095f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80095d4:	4b39      	ldr	r3, [pc, #228]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	0adb      	lsrs	r3, r3, #11
 80095da:	2207      	movs	r2, #7
 80095dc:	4013      	ands	r3, r2
 80095de:	2201      	movs	r2, #1
 80095e0:	409a      	lsls	r2, r3
 80095e2:	0013      	movs	r3, r2
 80095e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	4835      	ldr	r0, [pc, #212]	@ (80096c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80095ea:	f7f6 fd8b 	bl	8000104 <__udivsi3>
 80095ee:	0003      	movs	r3, r0
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	e05d      	b.n	80096b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80095f4:	4b31      	ldr	r3, [pc, #196]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	2238      	movs	r2, #56	@ 0x38
 80095fa:	4013      	ands	r3, r2
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	d102      	bne.n	8009606 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009600:	4b30      	ldr	r3, [pc, #192]	@ (80096c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8009602:	613b      	str	r3, [r7, #16]
 8009604:	e054      	b.n	80096b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009606:	4b2d      	ldr	r3, [pc, #180]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	2238      	movs	r2, #56	@ 0x38
 800960c:	4013      	ands	r3, r2
 800960e:	2b10      	cmp	r3, #16
 8009610:	d138      	bne.n	8009684 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009612:	4b2a      	ldr	r3, [pc, #168]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	2203      	movs	r2, #3
 8009618:	4013      	ands	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800961c:	4b27      	ldr	r3, [pc, #156]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	091b      	lsrs	r3, r3, #4
 8009622:	2207      	movs	r2, #7
 8009624:	4013      	ands	r3, r2
 8009626:	3301      	adds	r3, #1
 8009628:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b03      	cmp	r3, #3
 800962e:	d10d      	bne.n	800964c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009630:	68b9      	ldr	r1, [r7, #8]
 8009632:	4824      	ldr	r0, [pc, #144]	@ (80096c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8009634:	f7f6 fd66 	bl	8000104 <__udivsi3>
 8009638:	0003      	movs	r3, r0
 800963a:	0019      	movs	r1, r3
 800963c:	4b1f      	ldr	r3, [pc, #124]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	0a1b      	lsrs	r3, r3, #8
 8009642:	227f      	movs	r2, #127	@ 0x7f
 8009644:	4013      	ands	r3, r2
 8009646:	434b      	muls	r3, r1
 8009648:	617b      	str	r3, [r7, #20]
        break;
 800964a:	e00d      	b.n	8009668 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	481c      	ldr	r0, [pc, #112]	@ (80096c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009650:	f7f6 fd58 	bl	8000104 <__udivsi3>
 8009654:	0003      	movs	r3, r0
 8009656:	0019      	movs	r1, r3
 8009658:	4b18      	ldr	r3, [pc, #96]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	0a1b      	lsrs	r3, r3, #8
 800965e:	227f      	movs	r2, #127	@ 0x7f
 8009660:	4013      	ands	r3, r2
 8009662:	434b      	muls	r3, r1
 8009664:	617b      	str	r3, [r7, #20]
        break;
 8009666:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009668:	4b14      	ldr	r3, [pc, #80]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	0f5b      	lsrs	r3, r3, #29
 800966e:	2207      	movs	r2, #7
 8009670:	4013      	ands	r3, r2
 8009672:	3301      	adds	r3, #1
 8009674:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	6978      	ldr	r0, [r7, #20]
 800967a:	f7f6 fd43 	bl	8000104 <__udivsi3>
 800967e:	0003      	movs	r3, r0
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	e015      	b.n	80096b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009684:	4b0d      	ldr	r3, [pc, #52]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	2238      	movs	r2, #56	@ 0x38
 800968a:	4013      	ands	r3, r2
 800968c:	2b20      	cmp	r3, #32
 800968e:	d103      	bne.n	8009698 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009690:	2380      	movs	r3, #128	@ 0x80
 8009692:	021b      	lsls	r3, r3, #8
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	e00b      	b.n	80096b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009698:	4b08      	ldr	r3, [pc, #32]	@ (80096bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	2238      	movs	r2, #56	@ 0x38
 800969e:	4013      	ands	r3, r2
 80096a0:	2b18      	cmp	r3, #24
 80096a2:	d103      	bne.n	80096ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80096a4:	23fa      	movs	r3, #250	@ 0xfa
 80096a6:	01db      	lsls	r3, r3, #7
 80096a8:	613b      	str	r3, [r7, #16]
 80096aa:	e001      	b.n	80096b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80096b0:	693b      	ldr	r3, [r7, #16]
}
 80096b2:	0018      	movs	r0, r3
 80096b4:	46bd      	mov	sp, r7
 80096b6:	b006      	add	sp, #24
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	46c0      	nop			@ (mov r8, r8)
 80096bc:	40021000 	.word	0x40021000
 80096c0:	00f42400 	.word	0x00f42400
 80096c4:	007a1200 	.word	0x007a1200

080096c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096cc:	4b02      	ldr	r3, [pc, #8]	@ (80096d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80096ce:	681b      	ldr	r3, [r3, #0]
}
 80096d0:	0018      	movs	r0, r3
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	46c0      	nop			@ (mov r8, r8)
 80096d8:	2000044c 	.word	0x2000044c

080096dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096dc:	b5b0      	push	{r4, r5, r7, lr}
 80096de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80096e0:	f7ff fff2 	bl	80096c8 <HAL_RCC_GetHCLKFreq>
 80096e4:	0004      	movs	r4, r0
 80096e6:	f7ff fb3f 	bl	8008d68 <LL_RCC_GetAPB1Prescaler>
 80096ea:	0003      	movs	r3, r0
 80096ec:	0b1a      	lsrs	r2, r3, #12
 80096ee:	4b05      	ldr	r3, [pc, #20]	@ (8009704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80096f0:	0092      	lsls	r2, r2, #2
 80096f2:	58d3      	ldr	r3, [r2, r3]
 80096f4:	221f      	movs	r2, #31
 80096f6:	4013      	ands	r3, r2
 80096f8:	40dc      	lsrs	r4, r3
 80096fa:	0023      	movs	r3, r4
}
 80096fc:	0018      	movs	r0, r3
 80096fe:	46bd      	mov	sp, r7
 8009700:	bdb0      	pop	{r4, r5, r7, pc}
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	0800e010 	.word	0x0800e010

08009708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009710:	2313      	movs	r3, #19
 8009712:	18fb      	adds	r3, r7, r3
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009718:	2312      	movs	r3, #18
 800971a:	18fb      	adds	r3, r7, r3
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	2380      	movs	r3, #128	@ 0x80
 8009726:	029b      	lsls	r3, r3, #10
 8009728:	4013      	ands	r3, r2
 800972a:	d100      	bne.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800972c:	e0a3      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800972e:	2011      	movs	r0, #17
 8009730:	183b      	adds	r3, r7, r0
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009736:	4ba5      	ldr	r3, [pc, #660]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800973a:	2380      	movs	r3, #128	@ 0x80
 800973c:	055b      	lsls	r3, r3, #21
 800973e:	4013      	ands	r3, r2
 8009740:	d110      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009742:	4ba2      	ldr	r3, [pc, #648]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009746:	4ba1      	ldr	r3, [pc, #644]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009748:	2180      	movs	r1, #128	@ 0x80
 800974a:	0549      	lsls	r1, r1, #21
 800974c:	430a      	orrs	r2, r1
 800974e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009750:	4b9e      	ldr	r3, [pc, #632]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009754:	2380      	movs	r3, #128	@ 0x80
 8009756:	055b      	lsls	r3, r3, #21
 8009758:	4013      	ands	r3, r2
 800975a:	60bb      	str	r3, [r7, #8]
 800975c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800975e:	183b      	adds	r3, r7, r0
 8009760:	2201      	movs	r2, #1
 8009762:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009764:	4b9a      	ldr	r3, [pc, #616]	@ (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	4b99      	ldr	r3, [pc, #612]	@ (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800976a:	2180      	movs	r1, #128	@ 0x80
 800976c:	0049      	lsls	r1, r1, #1
 800976e:	430a      	orrs	r2, r1
 8009770:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009772:	f7fc fe81 	bl	8006478 <HAL_GetTick>
 8009776:	0003      	movs	r3, r0
 8009778:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800977a:	e00b      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800977c:	f7fc fe7c 	bl	8006478 <HAL_GetTick>
 8009780:	0002      	movs	r2, r0
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d904      	bls.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800978a:	2313      	movs	r3, #19
 800978c:	18fb      	adds	r3, r7, r3
 800978e:	2203      	movs	r2, #3
 8009790:	701a      	strb	r2, [r3, #0]
        break;
 8009792:	e005      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009794:	4b8e      	ldr	r3, [pc, #568]	@ (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	2380      	movs	r3, #128	@ 0x80
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	4013      	ands	r3, r2
 800979e:	d0ed      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80097a0:	2313      	movs	r3, #19
 80097a2:	18fb      	adds	r3, r7, r3
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d154      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80097aa:	4b88      	ldr	r3, [pc, #544]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097ae:	23c0      	movs	r3, #192	@ 0xc0
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4013      	ands	r3, r2
 80097b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d019      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d014      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80097c6:	4b81      	ldr	r3, [pc, #516]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ca:	4a82      	ldr	r2, [pc, #520]	@ (80099d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80097cc:	4013      	ands	r3, r2
 80097ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097d0:	4b7e      	ldr	r3, [pc, #504]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097d4:	4b7d      	ldr	r3, [pc, #500]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097d6:	2180      	movs	r1, #128	@ 0x80
 80097d8:	0249      	lsls	r1, r1, #9
 80097da:	430a      	orrs	r2, r1
 80097dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097de:	4b7b      	ldr	r3, [pc, #492]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097e2:	4b7a      	ldr	r3, [pc, #488]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097e4:	497c      	ldr	r1, [pc, #496]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80097e6:	400a      	ands	r2, r1
 80097e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80097ea:	4b78      	ldr	r3, [pc, #480]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2201      	movs	r2, #1
 80097f4:	4013      	ands	r3, r2
 80097f6:	d016      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f8:	f7fc fe3e 	bl	8006478 <HAL_GetTick>
 80097fc:	0003      	movs	r3, r0
 80097fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009800:	e00c      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009802:	f7fc fe39 	bl	8006478 <HAL_GetTick>
 8009806:	0002      	movs	r2, r0
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	4a73      	ldr	r2, [pc, #460]	@ (80099dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d904      	bls.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009812:	2313      	movs	r3, #19
 8009814:	18fb      	adds	r3, r7, r3
 8009816:	2203      	movs	r2, #3
 8009818:	701a      	strb	r2, [r3, #0]
            break;
 800981a:	e004      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800981c:	4b6b      	ldr	r3, [pc, #428]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800981e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009820:	2202      	movs	r2, #2
 8009822:	4013      	ands	r3, r2
 8009824:	d0ed      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009826:	2313      	movs	r3, #19
 8009828:	18fb      	adds	r3, r7, r3
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009830:	4b66      	ldr	r3, [pc, #408]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009834:	4a67      	ldr	r2, [pc, #412]	@ (80099d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8009836:	4013      	ands	r3, r2
 8009838:	0019      	movs	r1, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800983e:	4b63      	ldr	r3, [pc, #396]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009840:	430a      	orrs	r2, r1
 8009842:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009844:	e00c      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009846:	2312      	movs	r3, #18
 8009848:	18fb      	adds	r3, r7, r3
 800984a:	2213      	movs	r2, #19
 800984c:	18ba      	adds	r2, r7, r2
 800984e:	7812      	ldrb	r2, [r2, #0]
 8009850:	701a      	strb	r2, [r3, #0]
 8009852:	e005      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009854:	2312      	movs	r3, #18
 8009856:	18fb      	adds	r3, r7, r3
 8009858:	2213      	movs	r2, #19
 800985a:	18ba      	adds	r2, r7, r2
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009860:	2311      	movs	r3, #17
 8009862:	18fb      	adds	r3, r7, r3
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d105      	bne.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800986a:	4b58      	ldr	r3, [pc, #352]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800986c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800986e:	4b57      	ldr	r3, [pc, #348]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009870:	495b      	ldr	r1, [pc, #364]	@ (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009872:	400a      	ands	r2, r1
 8009874:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2201      	movs	r2, #1
 800987c:	4013      	ands	r3, r2
 800987e:	d009      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009880:	4b52      	ldr	r3, [pc, #328]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009884:	2203      	movs	r2, #3
 8009886:	4393      	bics	r3, r2
 8009888:	0019      	movs	r1, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	4b4f      	ldr	r3, [pc, #316]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009890:	430a      	orrs	r2, r1
 8009892:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2210      	movs	r2, #16
 800989a:	4013      	ands	r3, r2
 800989c:	d009      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800989e:	4b4b      	ldr	r3, [pc, #300]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a2:	4a50      	ldr	r2, [pc, #320]	@ (80099e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	0019      	movs	r1, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	4b47      	ldr	r3, [pc, #284]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098ae:	430a      	orrs	r2, r1
 80098b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	2380      	movs	r3, #128	@ 0x80
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4013      	ands	r3, r2
 80098bc:	d009      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098be:	4b43      	ldr	r3, [pc, #268]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c2:	4a49      	ldr	r2, [pc, #292]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80098c4:	4013      	ands	r3, r2
 80098c6:	0019      	movs	r1, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	695a      	ldr	r2, [r3, #20]
 80098cc:	4b3f      	ldr	r3, [pc, #252]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098ce:	430a      	orrs	r2, r1
 80098d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	2380      	movs	r3, #128	@ 0x80
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	4013      	ands	r3, r2
 80098dc:	d009      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098de:	4b3b      	ldr	r3, [pc, #236]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e2:	4a42      	ldr	r2, [pc, #264]	@ (80099ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	0019      	movs	r1, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	699a      	ldr	r2, [r3, #24]
 80098ec:	4b37      	ldr	r3, [pc, #220]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098ee:	430a      	orrs	r2, r1
 80098f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2220      	movs	r2, #32
 80098f8:	4013      	ands	r3, r2
 80098fa:	d009      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098fc:	4b33      	ldr	r3, [pc, #204]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009900:	4a3b      	ldr	r2, [pc, #236]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009902:	4013      	ands	r3, r2
 8009904:	0019      	movs	r1, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	4b30      	ldr	r3, [pc, #192]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800990c:	430a      	orrs	r2, r1
 800990e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	2380      	movs	r3, #128	@ 0x80
 8009916:	01db      	lsls	r3, r3, #7
 8009918:	4013      	ands	r3, r2
 800991a:	d015      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800991c:	4b2b      	ldr	r3, [pc, #172]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800991e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	0899      	lsrs	r1, r3, #2
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	69da      	ldr	r2, [r3, #28]
 8009928:	4b28      	ldr	r3, [pc, #160]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800992a:	430a      	orrs	r2, r1
 800992c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	69da      	ldr	r2, [r3, #28]
 8009932:	2380      	movs	r3, #128	@ 0x80
 8009934:	05db      	lsls	r3, r3, #23
 8009936:	429a      	cmp	r2, r3
 8009938:	d106      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800993a:	4b24      	ldr	r3, [pc, #144]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	4b23      	ldr	r3, [pc, #140]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009940:	2180      	movs	r1, #128	@ 0x80
 8009942:	0249      	lsls	r1, r1, #9
 8009944:	430a      	orrs	r2, r1
 8009946:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	2380      	movs	r3, #128	@ 0x80
 800994e:	039b      	lsls	r3, r3, #14
 8009950:	4013      	ands	r3, r2
 8009952:	d016      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009954:	4b1d      	ldr	r3, [pc, #116]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009958:	4a26      	ldr	r2, [pc, #152]	@ (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800995a:	4013      	ands	r3, r2
 800995c:	0019      	movs	r1, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1a      	ldr	r2, [r3, #32]
 8009962:	4b1a      	ldr	r3, [pc, #104]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009964:	430a      	orrs	r2, r1
 8009966:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a1a      	ldr	r2, [r3, #32]
 800996c:	2380      	movs	r3, #128	@ 0x80
 800996e:	03db      	lsls	r3, r3, #15
 8009970:	429a      	cmp	r2, r3
 8009972:	d106      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009974:	4b15      	ldr	r3, [pc, #84]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	4b14      	ldr	r3, [pc, #80]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800997a:	2180      	movs	r1, #128	@ 0x80
 800997c:	0449      	lsls	r1, r1, #17
 800997e:	430a      	orrs	r2, r1
 8009980:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	2380      	movs	r3, #128	@ 0x80
 8009988:	011b      	lsls	r3, r3, #4
 800998a:	4013      	ands	r3, r2
 800998c:	d016      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800998e:	4b0f      	ldr	r3, [pc, #60]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009992:	4a19      	ldr	r2, [pc, #100]	@ (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009994:	4013      	ands	r3, r2
 8009996:	0019      	movs	r1, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691a      	ldr	r2, [r3, #16]
 800999c:	4b0b      	ldr	r3, [pc, #44]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800999e:	430a      	orrs	r2, r1
 80099a0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691a      	ldr	r2, [r3, #16]
 80099a6:	2380      	movs	r3, #128	@ 0x80
 80099a8:	01db      	lsls	r3, r3, #7
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d106      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80099ae:	4b07      	ldr	r3, [pc, #28]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099b4:	2180      	movs	r1, #128	@ 0x80
 80099b6:	0249      	lsls	r1, r1, #9
 80099b8:	430a      	orrs	r2, r1
 80099ba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80099bc:	2312      	movs	r3, #18
 80099be:	18fb      	adds	r3, r7, r3
 80099c0:	781b      	ldrb	r3, [r3, #0]
}
 80099c2:	0018      	movs	r0, r3
 80099c4:	46bd      	mov	sp, r7
 80099c6:	b006      	add	sp, #24
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	46c0      	nop			@ (mov r8, r8)
 80099cc:	40021000 	.word	0x40021000
 80099d0:	40007000 	.word	0x40007000
 80099d4:	fffffcff 	.word	0xfffffcff
 80099d8:	fffeffff 	.word	0xfffeffff
 80099dc:	00001388 	.word	0x00001388
 80099e0:	efffffff 	.word	0xefffffff
 80099e4:	fffff3ff 	.word	0xfffff3ff
 80099e8:	fff3ffff 	.word	0xfff3ffff
 80099ec:	ffcfffff 	.word	0xffcfffff
 80099f0:	ffffcfff 	.word	0xffffcfff
 80099f4:	ffbfffff 	.word	0xffbfffff
 80099f8:	ffff3fff 	.word	0xffff3fff

080099fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e056      	b.n	8009abc <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	223d      	movs	r2, #61	@ 0x3d
 8009a12:	5c9b      	ldrb	r3, [r3, r2]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d113      	bne.n	8009a42 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	223c      	movs	r2, #60	@ 0x3c
 8009a1e:	2100      	movs	r1, #0
 8009a20:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	0018      	movs	r0, r3
 8009a26:	f002 f8c5 	bl	800bbb4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a23      	ldr	r2, [pc, #140]	@ (8009ac4 <HAL_TIM_Base_Init+0xc8>)
 8009a36:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	0010      	movs	r0, r2
 8009a40:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	223d      	movs	r2, #61	@ 0x3d
 8009a46:	2102      	movs	r1, #2
 8009a48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	3304      	adds	r3, #4
 8009a52:	0019      	movs	r1, r3
 8009a54:	0010      	movs	r0, r2
 8009a56:	f001 fbaf 	bl	800b1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2248      	movs	r2, #72	@ 0x48
 8009a5e:	2101      	movs	r1, #1
 8009a60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	223e      	movs	r2, #62	@ 0x3e
 8009a66:	2101      	movs	r1, #1
 8009a68:	5499      	strb	r1, [r3, r2]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	223f      	movs	r2, #63	@ 0x3f
 8009a6e:	2101      	movs	r1, #1
 8009a70:	5499      	strb	r1, [r3, r2]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2240      	movs	r2, #64	@ 0x40
 8009a76:	2101      	movs	r1, #1
 8009a78:	5499      	strb	r1, [r3, r2]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2241      	movs	r2, #65	@ 0x41
 8009a7e:	2101      	movs	r1, #1
 8009a80:	5499      	strb	r1, [r3, r2]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2242      	movs	r2, #66	@ 0x42
 8009a86:	2101      	movs	r1, #1
 8009a88:	5499      	strb	r1, [r3, r2]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2243      	movs	r2, #67	@ 0x43
 8009a8e:	2101      	movs	r1, #1
 8009a90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2244      	movs	r2, #68	@ 0x44
 8009a96:	2101      	movs	r1, #1
 8009a98:	5499      	strb	r1, [r3, r2]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2245      	movs	r2, #69	@ 0x45
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	5499      	strb	r1, [r3, r2]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2246      	movs	r2, #70	@ 0x46
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	5499      	strb	r1, [r3, r2]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2247      	movs	r2, #71	@ 0x47
 8009aae:	2101      	movs	r1, #1
 8009ab0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	223d      	movs	r2, #61	@ 0x3d
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	0018      	movs	r0, r3
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b002      	add	sp, #8
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	08005429 	.word	0x08005429

08009ac8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	223d      	movs	r2, #61	@ 0x3d
 8009ad4:	5c9b      	ldrb	r3, [r3, r2]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d001      	beq.n	8009ae0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e035      	b.n	8009b4c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	223d      	movs	r2, #61	@ 0x3d
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a19      	ldr	r2, [pc, #100]	@ (8009b54 <HAL_TIM_Base_Start+0x8c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00a      	beq.n	8009b08 <HAL_TIM_Base_Start+0x40>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	2380      	movs	r3, #128	@ 0x80
 8009af8:	05db      	lsls	r3, r3, #23
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d004      	beq.n	8009b08 <HAL_TIM_Base_Start+0x40>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a15      	ldr	r2, [pc, #84]	@ (8009b58 <HAL_TIM_Base_Start+0x90>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d116      	bne.n	8009b36 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	4a13      	ldr	r2, [pc, #76]	@ (8009b5c <HAL_TIM_Base_Start+0x94>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2b06      	cmp	r3, #6
 8009b18:	d016      	beq.n	8009b48 <HAL_TIM_Base_Start+0x80>
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	2380      	movs	r3, #128	@ 0x80
 8009b1e:	025b      	lsls	r3, r3, #9
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d011      	beq.n	8009b48 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2101      	movs	r1, #1
 8009b30:	430a      	orrs	r2, r1
 8009b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b34:	e008      	b.n	8009b48 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2101      	movs	r1, #1
 8009b42:	430a      	orrs	r2, r1
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	e000      	b.n	8009b4a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b48:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b004      	add	sp, #16
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	40012c00 	.word	0x40012c00
 8009b58:	40000400 	.word	0x40000400
 8009b5c:	00010007 	.word	0x00010007

08009b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	223d      	movs	r2, #61	@ 0x3d
 8009b6c:	5c9b      	ldrb	r3, [r3, r2]
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d001      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e03d      	b.n	8009bf4 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	223d      	movs	r2, #61	@ 0x3d
 8009b7c:	2102      	movs	r1, #2
 8009b7e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a19      	ldr	r2, [pc, #100]	@ (8009bfc <HAL_TIM_Base_Start_IT+0x9c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00a      	beq.n	8009bb0 <HAL_TIM_Base_Start_IT+0x50>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	2380      	movs	r3, #128	@ 0x80
 8009ba0:	05db      	lsls	r3, r3, #23
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d004      	beq.n	8009bb0 <HAL_TIM_Base_Start_IT+0x50>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a15      	ldr	r2, [pc, #84]	@ (8009c00 <HAL_TIM_Base_Start_IT+0xa0>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d116      	bne.n	8009bde <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	4a13      	ldr	r2, [pc, #76]	@ (8009c04 <HAL_TIM_Base_Start_IT+0xa4>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b06      	cmp	r3, #6
 8009bc0:	d016      	beq.n	8009bf0 <HAL_TIM_Base_Start_IT+0x90>
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	2380      	movs	r3, #128	@ 0x80
 8009bc6:	025b      	lsls	r3, r3, #9
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d011      	beq.n	8009bf0 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bdc:	e008      	b.n	8009bf0 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2101      	movs	r1, #1
 8009bea:	430a      	orrs	r2, r1
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	e000      	b.n	8009bf2 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b004      	add	sp, #16
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	40012c00 	.word	0x40012c00
 8009c00:	40000400 	.word	0x40000400
 8009c04:	00010007 	.word	0x00010007

08009c08 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e056      	b.n	8009cc8 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	223d      	movs	r2, #61	@ 0x3d
 8009c1e:	5c9b      	ldrb	r3, [r3, r2]
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d113      	bne.n	8009c4e <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	223c      	movs	r2, #60	@ 0x3c
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	0018      	movs	r0, r3
 8009c32:	f001 ffbf 	bl	800bbb4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a23      	ldr	r2, [pc, #140]	@ (8009cd0 <HAL_TIM_OC_Init+0xc8>)
 8009c42:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	0010      	movs	r0, r2
 8009c4c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	223d      	movs	r2, #61	@ 0x3d
 8009c52:	2102      	movs	r1, #2
 8009c54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	0019      	movs	r1, r3
 8009c60:	0010      	movs	r0, r2
 8009c62:	f001 faa9 	bl	800b1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2248      	movs	r2, #72	@ 0x48
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	223e      	movs	r2, #62	@ 0x3e
 8009c72:	2101      	movs	r1, #1
 8009c74:	5499      	strb	r1, [r3, r2]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	223f      	movs	r2, #63	@ 0x3f
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	5499      	strb	r1, [r3, r2]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2240      	movs	r2, #64	@ 0x40
 8009c82:	2101      	movs	r1, #1
 8009c84:	5499      	strb	r1, [r3, r2]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2241      	movs	r2, #65	@ 0x41
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	5499      	strb	r1, [r3, r2]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2242      	movs	r2, #66	@ 0x42
 8009c92:	2101      	movs	r1, #1
 8009c94:	5499      	strb	r1, [r3, r2]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2243      	movs	r2, #67	@ 0x43
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2244      	movs	r2, #68	@ 0x44
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	5499      	strb	r1, [r3, r2]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2245      	movs	r2, #69	@ 0x45
 8009caa:	2101      	movs	r1, #1
 8009cac:	5499      	strb	r1, [r3, r2]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2246      	movs	r2, #70	@ 0x46
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	5499      	strb	r1, [r3, r2]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2247      	movs	r2, #71	@ 0x47
 8009cba:	2101      	movs	r1, #1
 8009cbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	223d      	movs	r2, #61	@ 0x3d
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	0018      	movs	r0, r3
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	b002      	add	sp, #8
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	08009cd5 	.word	0x08009cd5

08009cd4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009cdc:	46c0      	nop			@ (mov r8, r8)
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	b002      	add	sp, #8
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cee:	230f      	movs	r3, #15
 8009cf0:	18fb      	adds	r3, r7, r3
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d108      	bne.n	8009d0e <HAL_TIM_OC_Start_IT+0x2a>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	223e      	movs	r2, #62	@ 0x3e
 8009d00:	5c9b      	ldrb	r3, [r3, r2]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	3b01      	subs	r3, #1
 8009d06:	1e5a      	subs	r2, r3, #1
 8009d08:	4193      	sbcs	r3, r2
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	e037      	b.n	8009d7e <HAL_TIM_OC_Start_IT+0x9a>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b04      	cmp	r3, #4
 8009d12:	d108      	bne.n	8009d26 <HAL_TIM_OC_Start_IT+0x42>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	223f      	movs	r2, #63	@ 0x3f
 8009d18:	5c9b      	ldrb	r3, [r3, r2]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	1e5a      	subs	r2, r3, #1
 8009d20:	4193      	sbcs	r3, r2
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	e02b      	b.n	8009d7e <HAL_TIM_OC_Start_IT+0x9a>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d108      	bne.n	8009d3e <HAL_TIM_OC_Start_IT+0x5a>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2240      	movs	r2, #64	@ 0x40
 8009d30:	5c9b      	ldrb	r3, [r3, r2]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	3b01      	subs	r3, #1
 8009d36:	1e5a      	subs	r2, r3, #1
 8009d38:	4193      	sbcs	r3, r2
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	e01f      	b.n	8009d7e <HAL_TIM_OC_Start_IT+0x9a>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b0c      	cmp	r3, #12
 8009d42:	d108      	bne.n	8009d56 <HAL_TIM_OC_Start_IT+0x72>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2241      	movs	r2, #65	@ 0x41
 8009d48:	5c9b      	ldrb	r3, [r3, r2]
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	1e5a      	subs	r2, r3, #1
 8009d50:	4193      	sbcs	r3, r2
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	e013      	b.n	8009d7e <HAL_TIM_OC_Start_IT+0x9a>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b10      	cmp	r3, #16
 8009d5a:	d108      	bne.n	8009d6e <HAL_TIM_OC_Start_IT+0x8a>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2242      	movs	r2, #66	@ 0x42
 8009d60:	5c9b      	ldrb	r3, [r3, r2]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	3b01      	subs	r3, #1
 8009d66:	1e5a      	subs	r2, r3, #1
 8009d68:	4193      	sbcs	r3, r2
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	e007      	b.n	8009d7e <HAL_TIM_OC_Start_IT+0x9a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2243      	movs	r2, #67	@ 0x43
 8009d72:	5c9b      	ldrb	r3, [r3, r2]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	3b01      	subs	r3, #1
 8009d78:	1e5a      	subs	r2, r3, #1
 8009d7a:	4193      	sbcs	r3, r2
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e0c4      	b.n	8009f10 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d104      	bne.n	8009d96 <HAL_TIM_OC_Start_IT+0xb2>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	223e      	movs	r2, #62	@ 0x3e
 8009d90:	2102      	movs	r1, #2
 8009d92:	5499      	strb	r1, [r3, r2]
 8009d94:	e023      	b.n	8009dde <HAL_TIM_OC_Start_IT+0xfa>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b04      	cmp	r3, #4
 8009d9a:	d104      	bne.n	8009da6 <HAL_TIM_OC_Start_IT+0xc2>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	223f      	movs	r2, #63	@ 0x3f
 8009da0:	2102      	movs	r1, #2
 8009da2:	5499      	strb	r1, [r3, r2]
 8009da4:	e01b      	b.n	8009dde <HAL_TIM_OC_Start_IT+0xfa>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b08      	cmp	r3, #8
 8009daa:	d104      	bne.n	8009db6 <HAL_TIM_OC_Start_IT+0xd2>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2240      	movs	r2, #64	@ 0x40
 8009db0:	2102      	movs	r1, #2
 8009db2:	5499      	strb	r1, [r3, r2]
 8009db4:	e013      	b.n	8009dde <HAL_TIM_OC_Start_IT+0xfa>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b0c      	cmp	r3, #12
 8009dba:	d104      	bne.n	8009dc6 <HAL_TIM_OC_Start_IT+0xe2>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2241      	movs	r2, #65	@ 0x41
 8009dc0:	2102      	movs	r1, #2
 8009dc2:	5499      	strb	r1, [r3, r2]
 8009dc4:	e00b      	b.n	8009dde <HAL_TIM_OC_Start_IT+0xfa>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d104      	bne.n	8009dd6 <HAL_TIM_OC_Start_IT+0xf2>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2242      	movs	r2, #66	@ 0x42
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	5499      	strb	r1, [r3, r2]
 8009dd4:	e003      	b.n	8009dde <HAL_TIM_OC_Start_IT+0xfa>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2243      	movs	r2, #67	@ 0x43
 8009dda:	2102      	movs	r1, #2
 8009ddc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2b0c      	cmp	r3, #12
 8009de2:	d02a      	beq.n	8009e3a <HAL_TIM_OC_Start_IT+0x156>
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	2b0c      	cmp	r3, #12
 8009de8:	d830      	bhi.n	8009e4c <HAL_TIM_OC_Start_IT+0x168>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b08      	cmp	r3, #8
 8009dee:	d01b      	beq.n	8009e28 <HAL_TIM_OC_Start_IT+0x144>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b08      	cmp	r3, #8
 8009df4:	d82a      	bhi.n	8009e4c <HAL_TIM_OC_Start_IT+0x168>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_TIM_OC_Start_IT+0x120>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d009      	beq.n	8009e16 <HAL_TIM_OC_Start_IT+0x132>
 8009e02:	e023      	b.n	8009e4c <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68da      	ldr	r2, [r3, #12]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2102      	movs	r1, #2
 8009e10:	430a      	orrs	r2, r1
 8009e12:	60da      	str	r2, [r3, #12]
      break;
 8009e14:	e01f      	b.n	8009e56 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68da      	ldr	r2, [r3, #12]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2104      	movs	r1, #4
 8009e22:	430a      	orrs	r2, r1
 8009e24:	60da      	str	r2, [r3, #12]
      break;
 8009e26:	e016      	b.n	8009e56 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68da      	ldr	r2, [r3, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2108      	movs	r1, #8
 8009e34:	430a      	orrs	r2, r1
 8009e36:	60da      	str	r2, [r3, #12]
      break;
 8009e38:	e00d      	b.n	8009e56 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68da      	ldr	r2, [r3, #12]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2110      	movs	r1, #16
 8009e46:	430a      	orrs	r2, r1
 8009e48:	60da      	str	r2, [r3, #12]
      break;
 8009e4a:	e004      	b.n	8009e56 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009e4c:	230f      	movs	r3, #15
 8009e4e:	18fb      	adds	r3, r7, r3
 8009e50:	2201      	movs	r2, #1
 8009e52:	701a      	strb	r2, [r3, #0]
      break;
 8009e54:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009e56:	230f      	movs	r3, #15
 8009e58:	18fb      	adds	r3, r7, r3
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d154      	bne.n	8009f0a <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	2201      	movs	r2, #1
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f001 fe7f 	bl	800bb6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a29      	ldr	r2, [pc, #164]	@ (8009f18 <HAL_TIM_OC_Start_IT+0x234>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d009      	beq.n	8009e8c <HAL_TIM_OC_Start_IT+0x1a8>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a27      	ldr	r2, [pc, #156]	@ (8009f1c <HAL_TIM_OC_Start_IT+0x238>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d004      	beq.n	8009e8c <HAL_TIM_OC_Start_IT+0x1a8>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a26      	ldr	r2, [pc, #152]	@ (8009f20 <HAL_TIM_OC_Start_IT+0x23c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d101      	bne.n	8009e90 <HAL_TIM_OC_Start_IT+0x1ac>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e000      	b.n	8009e92 <HAL_TIM_OC_Start_IT+0x1ae>
 8009e90:	2300      	movs	r3, #0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d008      	beq.n	8009ea8 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2180      	movs	r1, #128	@ 0x80
 8009ea2:	0209      	lsls	r1, r1, #8
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a1a      	ldr	r2, [pc, #104]	@ (8009f18 <HAL_TIM_OC_Start_IT+0x234>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d00a      	beq.n	8009ec8 <HAL_TIM_OC_Start_IT+0x1e4>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	2380      	movs	r3, #128	@ 0x80
 8009eb8:	05db      	lsls	r3, r3, #23
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d004      	beq.n	8009ec8 <HAL_TIM_OC_Start_IT+0x1e4>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a18      	ldr	r2, [pc, #96]	@ (8009f24 <HAL_TIM_OC_Start_IT+0x240>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d116      	bne.n	8009ef6 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	4a16      	ldr	r2, [pc, #88]	@ (8009f28 <HAL_TIM_OC_Start_IT+0x244>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b06      	cmp	r3, #6
 8009ed8:	d016      	beq.n	8009f08 <HAL_TIM_OC_Start_IT+0x224>
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	2380      	movs	r3, #128	@ 0x80
 8009ede:	025b      	lsls	r3, r3, #9
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d011      	beq.n	8009f08 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2101      	movs	r1, #1
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef4:	e008      	b.n	8009f08 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2101      	movs	r1, #1
 8009f02:	430a      	orrs	r2, r1
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	e000      	b.n	8009f0a <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f08:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009f0a:	230f      	movs	r3, #15
 8009f0c:	18fb      	adds	r3, r7, r3
 8009f0e:	781b      	ldrb	r3, [r3, #0]
}
 8009f10:	0018      	movs	r0, r3
 8009f12:	46bd      	mov	sp, r7
 8009f14:	b004      	add	sp, #16
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	40012c00 	.word	0x40012c00
 8009f1c:	40014400 	.word	0x40014400
 8009f20:	40014800 	.word	0x40014800
 8009f24:	40000400 	.word	0x40000400
 8009f28:	00010007 	.word	0x00010007

08009f2c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f36:	230f      	movs	r3, #15
 8009f38:	18fb      	adds	r3, r7, r3
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b0c      	cmp	r3, #12
 8009f42:	d02a      	beq.n	8009f9a <HAL_TIM_OC_Stop_IT+0x6e>
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b0c      	cmp	r3, #12
 8009f48:	d830      	bhi.n	8009fac <HAL_TIM_OC_Stop_IT+0x80>
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b08      	cmp	r3, #8
 8009f4e:	d01b      	beq.n	8009f88 <HAL_TIM_OC_Stop_IT+0x5c>
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d82a      	bhi.n	8009fac <HAL_TIM_OC_Stop_IT+0x80>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <HAL_TIM_OC_Stop_IT+0x38>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d009      	beq.n	8009f76 <HAL_TIM_OC_Stop_IT+0x4a>
 8009f62:	e023      	b.n	8009fac <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2102      	movs	r1, #2
 8009f70:	438a      	bics	r2, r1
 8009f72:	60da      	str	r2, [r3, #12]
      break;
 8009f74:	e01f      	b.n	8009fb6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68da      	ldr	r2, [r3, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2104      	movs	r1, #4
 8009f82:	438a      	bics	r2, r1
 8009f84:	60da      	str	r2, [r3, #12]
      break;
 8009f86:	e016      	b.n	8009fb6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2108      	movs	r1, #8
 8009f94:	438a      	bics	r2, r1
 8009f96:	60da      	str	r2, [r3, #12]
      break;
 8009f98:	e00d      	b.n	8009fb6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2110      	movs	r1, #16
 8009fa6:	438a      	bics	r2, r1
 8009fa8:	60da      	str	r2, [r3, #12]
      break;
 8009faa:	e004      	b.n	8009fb6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8009fac:	230f      	movs	r3, #15
 8009fae:	18fb      	adds	r3, r7, r3
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	701a      	strb	r2, [r3, #0]
      break;
 8009fb4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009fb6:	230f      	movs	r3, #15
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d000      	beq.n	8009fc2 <HAL_TIM_OC_Stop_IT+0x96>
 8009fc0:	e06e      	b.n	800a0a0 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f001 fdce 	bl	800bb6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a36      	ldr	r2, [pc, #216]	@ (800a0b0 <HAL_TIM_OC_Stop_IT+0x184>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d009      	beq.n	8009fee <HAL_TIM_OC_Stop_IT+0xc2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a35      	ldr	r2, [pc, #212]	@ (800a0b4 <HAL_TIM_OC_Stop_IT+0x188>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d004      	beq.n	8009fee <HAL_TIM_OC_Stop_IT+0xc2>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a33      	ldr	r2, [pc, #204]	@ (800a0b8 <HAL_TIM_OC_Stop_IT+0x18c>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d101      	bne.n	8009ff2 <HAL_TIM_OC_Stop_IT+0xc6>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <HAL_TIM_OC_Stop_IT+0xc8>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d013      	beq.n	800a020 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	4a2f      	ldr	r2, [pc, #188]	@ (800a0bc <HAL_TIM_OC_Stop_IT+0x190>)
 800a000:	4013      	ands	r3, r2
 800a002:	d10d      	bne.n	800a020 <HAL_TIM_OC_Stop_IT+0xf4>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	4a2d      	ldr	r2, [pc, #180]	@ (800a0c0 <HAL_TIM_OC_Stop_IT+0x194>)
 800a00c:	4013      	ands	r3, r2
 800a00e:	d107      	bne.n	800a020 <HAL_TIM_OC_Stop_IT+0xf4>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	492a      	ldr	r1, [pc, #168]	@ (800a0c4 <HAL_TIM_OC_Stop_IT+0x198>)
 800a01c:	400a      	ands	r2, r1
 800a01e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	4a25      	ldr	r2, [pc, #148]	@ (800a0bc <HAL_TIM_OC_Stop_IT+0x190>)
 800a028:	4013      	ands	r3, r2
 800a02a:	d10d      	bne.n	800a048 <HAL_TIM_OC_Stop_IT+0x11c>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	4a23      	ldr	r2, [pc, #140]	@ (800a0c0 <HAL_TIM_OC_Stop_IT+0x194>)
 800a034:	4013      	ands	r3, r2
 800a036:	d107      	bne.n	800a048 <HAL_TIM_OC_Stop_IT+0x11c>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2101      	movs	r1, #1
 800a044:	438a      	bics	r2, r1
 800a046:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d104      	bne.n	800a058 <HAL_TIM_OC_Stop_IT+0x12c>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	223e      	movs	r2, #62	@ 0x3e
 800a052:	2101      	movs	r1, #1
 800a054:	5499      	strb	r1, [r3, r2]
 800a056:	e023      	b.n	800a0a0 <HAL_TIM_OC_Stop_IT+0x174>
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b04      	cmp	r3, #4
 800a05c:	d104      	bne.n	800a068 <HAL_TIM_OC_Stop_IT+0x13c>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	223f      	movs	r2, #63	@ 0x3f
 800a062:	2101      	movs	r1, #1
 800a064:	5499      	strb	r1, [r3, r2]
 800a066:	e01b      	b.n	800a0a0 <HAL_TIM_OC_Stop_IT+0x174>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b08      	cmp	r3, #8
 800a06c:	d104      	bne.n	800a078 <HAL_TIM_OC_Stop_IT+0x14c>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2240      	movs	r2, #64	@ 0x40
 800a072:	2101      	movs	r1, #1
 800a074:	5499      	strb	r1, [r3, r2]
 800a076:	e013      	b.n	800a0a0 <HAL_TIM_OC_Stop_IT+0x174>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b0c      	cmp	r3, #12
 800a07c:	d104      	bne.n	800a088 <HAL_TIM_OC_Stop_IT+0x15c>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2241      	movs	r2, #65	@ 0x41
 800a082:	2101      	movs	r1, #1
 800a084:	5499      	strb	r1, [r3, r2]
 800a086:	e00b      	b.n	800a0a0 <HAL_TIM_OC_Stop_IT+0x174>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b10      	cmp	r3, #16
 800a08c:	d104      	bne.n	800a098 <HAL_TIM_OC_Stop_IT+0x16c>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2242      	movs	r2, #66	@ 0x42
 800a092:	2101      	movs	r1, #1
 800a094:	5499      	strb	r1, [r3, r2]
 800a096:	e003      	b.n	800a0a0 <HAL_TIM_OC_Stop_IT+0x174>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2243      	movs	r2, #67	@ 0x43
 800a09c:	2101      	movs	r1, #1
 800a09e:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800a0a0:	230f      	movs	r3, #15
 800a0a2:	18fb      	adds	r3, r7, r3
 800a0a4:	781b      	ldrb	r3, [r3, #0]
}
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b004      	add	sp, #16
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	46c0      	nop			@ (mov r8, r8)
 800a0b0:	40012c00 	.word	0x40012c00
 800a0b4:	40014400 	.word	0x40014400
 800a0b8:	40014800 	.word	0x40014800
 800a0bc:	00001111 	.word	0x00001111
 800a0c0:	00000444 	.word	0x00000444
 800a0c4:	ffff7fff 	.word	0xffff7fff

0800a0c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e056      	b.n	800a188 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	223d      	movs	r2, #61	@ 0x3d
 800a0de:	5c9b      	ldrb	r3, [r3, r2]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d113      	bne.n	800a10e <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	223c      	movs	r2, #60	@ 0x3c
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f001 fd5f 	bl	800bbb4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a23      	ldr	r2, [pc, #140]	@ (800a190 <HAL_TIM_PWM_Init+0xc8>)
 800a102:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	0010      	movs	r0, r2
 800a10c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	223d      	movs	r2, #61	@ 0x3d
 800a112:	2102      	movs	r1, #2
 800a114:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3304      	adds	r3, #4
 800a11e:	0019      	movs	r1, r3
 800a120:	0010      	movs	r0, r2
 800a122:	f001 f849 	bl	800b1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2248      	movs	r2, #72	@ 0x48
 800a12a:	2101      	movs	r1, #1
 800a12c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	223e      	movs	r2, #62	@ 0x3e
 800a132:	2101      	movs	r1, #1
 800a134:	5499      	strb	r1, [r3, r2]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	223f      	movs	r2, #63	@ 0x3f
 800a13a:	2101      	movs	r1, #1
 800a13c:	5499      	strb	r1, [r3, r2]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2240      	movs	r2, #64	@ 0x40
 800a142:	2101      	movs	r1, #1
 800a144:	5499      	strb	r1, [r3, r2]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2241      	movs	r2, #65	@ 0x41
 800a14a:	2101      	movs	r1, #1
 800a14c:	5499      	strb	r1, [r3, r2]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2242      	movs	r2, #66	@ 0x42
 800a152:	2101      	movs	r1, #1
 800a154:	5499      	strb	r1, [r3, r2]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2243      	movs	r2, #67	@ 0x43
 800a15a:	2101      	movs	r1, #1
 800a15c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2244      	movs	r2, #68	@ 0x44
 800a162:	2101      	movs	r1, #1
 800a164:	5499      	strb	r1, [r3, r2]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2245      	movs	r2, #69	@ 0x45
 800a16a:	2101      	movs	r1, #1
 800a16c:	5499      	strb	r1, [r3, r2]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2246      	movs	r2, #70	@ 0x46
 800a172:	2101      	movs	r1, #1
 800a174:	5499      	strb	r1, [r3, r2]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2247      	movs	r2, #71	@ 0x47
 800a17a:	2101      	movs	r1, #1
 800a17c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	223d      	movs	r2, #61	@ 0x3d
 800a182:	2101      	movs	r1, #1
 800a184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	0018      	movs	r0, r3
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b002      	add	sp, #8
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	0800a195 	.word	0x0800a195

0800a194 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a19c:	46c0      	nop			@ (mov r8, r8)
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d108      	bne.n	800a1c6 <HAL_TIM_PWM_Start+0x22>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	223e      	movs	r2, #62	@ 0x3e
 800a1b8:	5c9b      	ldrb	r3, [r3, r2]
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	1e5a      	subs	r2, r3, #1
 800a1c0:	4193      	sbcs	r3, r2
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	e037      	b.n	800a236 <HAL_TIM_PWM_Start+0x92>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b04      	cmp	r3, #4
 800a1ca:	d108      	bne.n	800a1de <HAL_TIM_PWM_Start+0x3a>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	223f      	movs	r2, #63	@ 0x3f
 800a1d0:	5c9b      	ldrb	r3, [r3, r2]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	1e5a      	subs	r2, r3, #1
 800a1d8:	4193      	sbcs	r3, r2
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	e02b      	b.n	800a236 <HAL_TIM_PWM_Start+0x92>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b08      	cmp	r3, #8
 800a1e2:	d108      	bne.n	800a1f6 <HAL_TIM_PWM_Start+0x52>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2240      	movs	r2, #64	@ 0x40
 800a1e8:	5c9b      	ldrb	r3, [r3, r2]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	1e5a      	subs	r2, r3, #1
 800a1f0:	4193      	sbcs	r3, r2
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	e01f      	b.n	800a236 <HAL_TIM_PWM_Start+0x92>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b0c      	cmp	r3, #12
 800a1fa:	d108      	bne.n	800a20e <HAL_TIM_PWM_Start+0x6a>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2241      	movs	r2, #65	@ 0x41
 800a200:	5c9b      	ldrb	r3, [r3, r2]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	1e5a      	subs	r2, r3, #1
 800a208:	4193      	sbcs	r3, r2
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	e013      	b.n	800a236 <HAL_TIM_PWM_Start+0x92>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b10      	cmp	r3, #16
 800a212:	d108      	bne.n	800a226 <HAL_TIM_PWM_Start+0x82>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2242      	movs	r2, #66	@ 0x42
 800a218:	5c9b      	ldrb	r3, [r3, r2]
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	3b01      	subs	r3, #1
 800a21e:	1e5a      	subs	r2, r3, #1
 800a220:	4193      	sbcs	r3, r2
 800a222:	b2db      	uxtb	r3, r3
 800a224:	e007      	b.n	800a236 <HAL_TIM_PWM_Start+0x92>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2243      	movs	r2, #67	@ 0x43
 800a22a:	5c9b      	ldrb	r3, [r3, r2]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	3b01      	subs	r3, #1
 800a230:	1e5a      	subs	r2, r3, #1
 800a232:	4193      	sbcs	r3, r2
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e081      	b.n	800a342 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d104      	bne.n	800a24e <HAL_TIM_PWM_Start+0xaa>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	223e      	movs	r2, #62	@ 0x3e
 800a248:	2102      	movs	r1, #2
 800a24a:	5499      	strb	r1, [r3, r2]
 800a24c:	e023      	b.n	800a296 <HAL_TIM_PWM_Start+0xf2>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b04      	cmp	r3, #4
 800a252:	d104      	bne.n	800a25e <HAL_TIM_PWM_Start+0xba>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	223f      	movs	r2, #63	@ 0x3f
 800a258:	2102      	movs	r1, #2
 800a25a:	5499      	strb	r1, [r3, r2]
 800a25c:	e01b      	b.n	800a296 <HAL_TIM_PWM_Start+0xf2>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b08      	cmp	r3, #8
 800a262:	d104      	bne.n	800a26e <HAL_TIM_PWM_Start+0xca>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2240      	movs	r2, #64	@ 0x40
 800a268:	2102      	movs	r1, #2
 800a26a:	5499      	strb	r1, [r3, r2]
 800a26c:	e013      	b.n	800a296 <HAL_TIM_PWM_Start+0xf2>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b0c      	cmp	r3, #12
 800a272:	d104      	bne.n	800a27e <HAL_TIM_PWM_Start+0xda>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2241      	movs	r2, #65	@ 0x41
 800a278:	2102      	movs	r1, #2
 800a27a:	5499      	strb	r1, [r3, r2]
 800a27c:	e00b      	b.n	800a296 <HAL_TIM_PWM_Start+0xf2>
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b10      	cmp	r3, #16
 800a282:	d104      	bne.n	800a28e <HAL_TIM_PWM_Start+0xea>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2242      	movs	r2, #66	@ 0x42
 800a288:	2102      	movs	r1, #2
 800a28a:	5499      	strb	r1, [r3, r2]
 800a28c:	e003      	b.n	800a296 <HAL_TIM_PWM_Start+0xf2>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2243      	movs	r2, #67	@ 0x43
 800a292:	2102      	movs	r1, #2
 800a294:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	2201      	movs	r2, #1
 800a29e:	0018      	movs	r0, r3
 800a2a0:	f001 fc64 	bl	800bb6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a28      	ldr	r2, [pc, #160]	@ (800a34c <HAL_TIM_PWM_Start+0x1a8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d009      	beq.n	800a2c2 <HAL_TIM_PWM_Start+0x11e>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a27      	ldr	r2, [pc, #156]	@ (800a350 <HAL_TIM_PWM_Start+0x1ac>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d004      	beq.n	800a2c2 <HAL_TIM_PWM_Start+0x11e>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a25      	ldr	r2, [pc, #148]	@ (800a354 <HAL_TIM_PWM_Start+0x1b0>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d101      	bne.n	800a2c6 <HAL_TIM_PWM_Start+0x122>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <HAL_TIM_PWM_Start+0x124>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d008      	beq.n	800a2de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2180      	movs	r1, #128	@ 0x80
 800a2d8:	0209      	lsls	r1, r1, #8
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a1a      	ldr	r2, [pc, #104]	@ (800a34c <HAL_TIM_PWM_Start+0x1a8>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00a      	beq.n	800a2fe <HAL_TIM_PWM_Start+0x15a>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	2380      	movs	r3, #128	@ 0x80
 800a2ee:	05db      	lsls	r3, r3, #23
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d004      	beq.n	800a2fe <HAL_TIM_PWM_Start+0x15a>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a17      	ldr	r2, [pc, #92]	@ (800a358 <HAL_TIM_PWM_Start+0x1b4>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d116      	bne.n	800a32c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	4a15      	ldr	r2, [pc, #84]	@ (800a35c <HAL_TIM_PWM_Start+0x1b8>)
 800a306:	4013      	ands	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b06      	cmp	r3, #6
 800a30e:	d016      	beq.n	800a33e <HAL_TIM_PWM_Start+0x19a>
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	2380      	movs	r3, #128	@ 0x80
 800a314:	025b      	lsls	r3, r3, #9
 800a316:	429a      	cmp	r2, r3
 800a318:	d011      	beq.n	800a33e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2101      	movs	r1, #1
 800a326:	430a      	orrs	r2, r1
 800a328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a32a:	e008      	b.n	800a33e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2101      	movs	r1, #1
 800a338:	430a      	orrs	r2, r1
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	e000      	b.n	800a340 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a33e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	0018      	movs	r0, r3
 800a344:	46bd      	mov	sp, r7
 800a346:	b004      	add	sp, #16
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	46c0      	nop			@ (mov r8, r8)
 800a34c:	40012c00 	.word	0x40012c00
 800a350:	40014400 	.word	0x40014400
 800a354:	40014800 	.word	0x40014800
 800a358:	40000400 	.word	0x40000400
 800a35c:	00010007 	.word	0x00010007

0800a360 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e056      	b.n	800a420 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	223d      	movs	r2, #61	@ 0x3d
 800a376:	5c9b      	ldrb	r3, [r3, r2]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d113      	bne.n	800a3a6 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	223c      	movs	r2, #60	@ 0x3c
 800a382:	2100      	movs	r1, #0
 800a384:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	0018      	movs	r0, r3
 800a38a:	f001 fc13 	bl	800bbb4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a392:	2b00      	cmp	r3, #0
 800a394:	d102      	bne.n	800a39c <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a23      	ldr	r2, [pc, #140]	@ (800a428 <HAL_TIM_IC_Init+0xc8>)
 800a39a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	0010      	movs	r0, r2
 800a3a4:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	223d      	movs	r2, #61	@ 0x3d
 800a3aa:	2102      	movs	r1, #2
 800a3ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	0019      	movs	r1, r3
 800a3b8:	0010      	movs	r0, r2
 800a3ba:	f000 fefd 	bl	800b1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2248      	movs	r2, #72	@ 0x48
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	223e      	movs	r2, #62	@ 0x3e
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	5499      	strb	r1, [r3, r2]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	223f      	movs	r2, #63	@ 0x3f
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	5499      	strb	r1, [r3, r2]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2240      	movs	r2, #64	@ 0x40
 800a3da:	2101      	movs	r1, #1
 800a3dc:	5499      	strb	r1, [r3, r2]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2241      	movs	r2, #65	@ 0x41
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	5499      	strb	r1, [r3, r2]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2242      	movs	r2, #66	@ 0x42
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	5499      	strb	r1, [r3, r2]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2243      	movs	r2, #67	@ 0x43
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2244      	movs	r2, #68	@ 0x44
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	5499      	strb	r1, [r3, r2]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2245      	movs	r2, #69	@ 0x45
 800a402:	2101      	movs	r1, #1
 800a404:	5499      	strb	r1, [r3, r2]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2246      	movs	r2, #70	@ 0x46
 800a40a:	2101      	movs	r1, #1
 800a40c:	5499      	strb	r1, [r3, r2]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2247      	movs	r2, #71	@ 0x47
 800a412:	2101      	movs	r1, #1
 800a414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	223d      	movs	r2, #61	@ 0x3d
 800a41a:	2101      	movs	r1, #1
 800a41c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	0018      	movs	r0, r3
 800a422:	46bd      	mov	sp, r7
 800a424:	b002      	add	sp, #8
 800a426:	bd80      	pop	{r7, pc}
 800a428:	0800a42d 	.word	0x0800a42d

0800a42c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a434:	46c0      	nop			@ (mov r8, r8)
 800a436:	46bd      	mov	sp, r7
 800a438:	b002      	add	sp, #8
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a446:	230f      	movs	r3, #15
 800a448:	18fb      	adds	r3, r7, r3
 800a44a:	2200      	movs	r2, #0
 800a44c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d104      	bne.n	800a45e <HAL_TIM_IC_Start_IT+0x22>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	223e      	movs	r2, #62	@ 0x3e
 800a458:	5c9b      	ldrb	r3, [r3, r2]
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	e023      	b.n	800a4a6 <HAL_TIM_IC_Start_IT+0x6a>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b04      	cmp	r3, #4
 800a462:	d104      	bne.n	800a46e <HAL_TIM_IC_Start_IT+0x32>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	223f      	movs	r2, #63	@ 0x3f
 800a468:	5c9b      	ldrb	r3, [r3, r2]
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	e01b      	b.n	800a4a6 <HAL_TIM_IC_Start_IT+0x6a>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b08      	cmp	r3, #8
 800a472:	d104      	bne.n	800a47e <HAL_TIM_IC_Start_IT+0x42>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2240      	movs	r2, #64	@ 0x40
 800a478:	5c9b      	ldrb	r3, [r3, r2]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	e013      	b.n	800a4a6 <HAL_TIM_IC_Start_IT+0x6a>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b0c      	cmp	r3, #12
 800a482:	d104      	bne.n	800a48e <HAL_TIM_IC_Start_IT+0x52>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2241      	movs	r2, #65	@ 0x41
 800a488:	5c9b      	ldrb	r3, [r3, r2]
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	e00b      	b.n	800a4a6 <HAL_TIM_IC_Start_IT+0x6a>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b10      	cmp	r3, #16
 800a492:	d104      	bne.n	800a49e <HAL_TIM_IC_Start_IT+0x62>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2242      	movs	r2, #66	@ 0x42
 800a498:	5c9b      	ldrb	r3, [r3, r2]
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	e003      	b.n	800a4a6 <HAL_TIM_IC_Start_IT+0x6a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2243      	movs	r2, #67	@ 0x43
 800a4a2:	5c9b      	ldrb	r3, [r3, r2]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	220e      	movs	r2, #14
 800a4a8:	18ba      	adds	r2, r7, r2
 800a4aa:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d104      	bne.n	800a4bc <HAL_TIM_IC_Start_IT+0x80>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2244      	movs	r2, #68	@ 0x44
 800a4b6:	5c9b      	ldrb	r3, [r3, r2]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	e013      	b.n	800a4e4 <HAL_TIM_IC_Start_IT+0xa8>
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d104      	bne.n	800a4cc <HAL_TIM_IC_Start_IT+0x90>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2245      	movs	r2, #69	@ 0x45
 800a4c6:	5c9b      	ldrb	r3, [r3, r2]
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	e00b      	b.n	800a4e4 <HAL_TIM_IC_Start_IT+0xa8>
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d104      	bne.n	800a4dc <HAL_TIM_IC_Start_IT+0xa0>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2246      	movs	r2, #70	@ 0x46
 800a4d6:	5c9b      	ldrb	r3, [r3, r2]
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	e003      	b.n	800a4e4 <HAL_TIM_IC_Start_IT+0xa8>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2247      	movs	r2, #71	@ 0x47
 800a4e0:	5c9b      	ldrb	r3, [r3, r2]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	210d      	movs	r1, #13
 800a4e6:	187a      	adds	r2, r7, r1
 800a4e8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a4ea:	230e      	movs	r3, #14
 800a4ec:	18fb      	adds	r3, r7, r3
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d103      	bne.n	800a4fc <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a4f4:	187b      	adds	r3, r7, r1
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d001      	beq.n	800a500 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e0c3      	b.n	800a688 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d104      	bne.n	800a510 <HAL_TIM_IC_Start_IT+0xd4>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	223e      	movs	r2, #62	@ 0x3e
 800a50a:	2102      	movs	r1, #2
 800a50c:	5499      	strb	r1, [r3, r2]
 800a50e:	e023      	b.n	800a558 <HAL_TIM_IC_Start_IT+0x11c>
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2b04      	cmp	r3, #4
 800a514:	d104      	bne.n	800a520 <HAL_TIM_IC_Start_IT+0xe4>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	223f      	movs	r2, #63	@ 0x3f
 800a51a:	2102      	movs	r1, #2
 800a51c:	5499      	strb	r1, [r3, r2]
 800a51e:	e01b      	b.n	800a558 <HAL_TIM_IC_Start_IT+0x11c>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	2b08      	cmp	r3, #8
 800a524:	d104      	bne.n	800a530 <HAL_TIM_IC_Start_IT+0xf4>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2240      	movs	r2, #64	@ 0x40
 800a52a:	2102      	movs	r1, #2
 800a52c:	5499      	strb	r1, [r3, r2]
 800a52e:	e013      	b.n	800a558 <HAL_TIM_IC_Start_IT+0x11c>
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b0c      	cmp	r3, #12
 800a534:	d104      	bne.n	800a540 <HAL_TIM_IC_Start_IT+0x104>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2241      	movs	r2, #65	@ 0x41
 800a53a:	2102      	movs	r1, #2
 800a53c:	5499      	strb	r1, [r3, r2]
 800a53e:	e00b      	b.n	800a558 <HAL_TIM_IC_Start_IT+0x11c>
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2b10      	cmp	r3, #16
 800a544:	d104      	bne.n	800a550 <HAL_TIM_IC_Start_IT+0x114>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2242      	movs	r2, #66	@ 0x42
 800a54a:	2102      	movs	r1, #2
 800a54c:	5499      	strb	r1, [r3, r2]
 800a54e:	e003      	b.n	800a558 <HAL_TIM_IC_Start_IT+0x11c>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2243      	movs	r2, #67	@ 0x43
 800a554:	2102      	movs	r1, #2
 800a556:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d104      	bne.n	800a568 <HAL_TIM_IC_Start_IT+0x12c>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2244      	movs	r2, #68	@ 0x44
 800a562:	2102      	movs	r1, #2
 800a564:	5499      	strb	r1, [r3, r2]
 800a566:	e013      	b.n	800a590 <HAL_TIM_IC_Start_IT+0x154>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d104      	bne.n	800a578 <HAL_TIM_IC_Start_IT+0x13c>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2245      	movs	r2, #69	@ 0x45
 800a572:	2102      	movs	r1, #2
 800a574:	5499      	strb	r1, [r3, r2]
 800a576:	e00b      	b.n	800a590 <HAL_TIM_IC_Start_IT+0x154>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b08      	cmp	r3, #8
 800a57c:	d104      	bne.n	800a588 <HAL_TIM_IC_Start_IT+0x14c>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2246      	movs	r2, #70	@ 0x46
 800a582:	2102      	movs	r1, #2
 800a584:	5499      	strb	r1, [r3, r2]
 800a586:	e003      	b.n	800a590 <HAL_TIM_IC_Start_IT+0x154>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2247      	movs	r2, #71	@ 0x47
 800a58c:	2102      	movs	r1, #2
 800a58e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2b0c      	cmp	r3, #12
 800a594:	d02a      	beq.n	800a5ec <HAL_TIM_IC_Start_IT+0x1b0>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b0c      	cmp	r3, #12
 800a59a:	d830      	bhi.n	800a5fe <HAL_TIM_IC_Start_IT+0x1c2>
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2b08      	cmp	r3, #8
 800a5a0:	d01b      	beq.n	800a5da <HAL_TIM_IC_Start_IT+0x19e>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d82a      	bhi.n	800a5fe <HAL_TIM_IC_Start_IT+0x1c2>
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_TIM_IC_Start_IT+0x17a>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	d009      	beq.n	800a5c8 <HAL_TIM_IC_Start_IT+0x18c>
 800a5b4:	e023      	b.n	800a5fe <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68da      	ldr	r2, [r3, #12]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2102      	movs	r1, #2
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	60da      	str	r2, [r3, #12]
      break;
 800a5c6:	e01f      	b.n	800a608 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2104      	movs	r1, #4
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	60da      	str	r2, [r3, #12]
      break;
 800a5d8:	e016      	b.n	800a608 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2108      	movs	r1, #8
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	60da      	str	r2, [r3, #12]
      break;
 800a5ea:	e00d      	b.n	800a608 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2110      	movs	r1, #16
 800a5f8:	430a      	orrs	r2, r1
 800a5fa:	60da      	str	r2, [r3, #12]
      break;
 800a5fc:	e004      	b.n	800a608 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800a5fe:	230f      	movs	r3, #15
 800a600:	18fb      	adds	r3, r7, r3
 800a602:	2201      	movs	r2, #1
 800a604:	701a      	strb	r2, [r3, #0]
      break;
 800a606:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a608:	230f      	movs	r3, #15
 800a60a:	18fb      	adds	r3, r7, r3
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d137      	bne.n	800a682 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	2201      	movs	r2, #1
 800a61a:	0018      	movs	r0, r3
 800a61c:	f001 faa6 	bl	800bb6c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a1a      	ldr	r2, [pc, #104]	@ (800a690 <HAL_TIM_IC_Start_IT+0x254>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d00a      	beq.n	800a640 <HAL_TIM_IC_Start_IT+0x204>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	2380      	movs	r3, #128	@ 0x80
 800a630:	05db      	lsls	r3, r3, #23
 800a632:	429a      	cmp	r2, r3
 800a634:	d004      	beq.n	800a640 <HAL_TIM_IC_Start_IT+0x204>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a16      	ldr	r2, [pc, #88]	@ (800a694 <HAL_TIM_IC_Start_IT+0x258>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d116      	bne.n	800a66e <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	4a14      	ldr	r2, [pc, #80]	@ (800a698 <HAL_TIM_IC_Start_IT+0x25c>)
 800a648:	4013      	ands	r3, r2
 800a64a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2b06      	cmp	r3, #6
 800a650:	d016      	beq.n	800a680 <HAL_TIM_IC_Start_IT+0x244>
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	2380      	movs	r3, #128	@ 0x80
 800a656:	025b      	lsls	r3, r3, #9
 800a658:	429a      	cmp	r2, r3
 800a65a:	d011      	beq.n	800a680 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2101      	movs	r1, #1
 800a668:	430a      	orrs	r2, r1
 800a66a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66c:	e008      	b.n	800a680 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2101      	movs	r1, #1
 800a67a:	430a      	orrs	r2, r1
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	e000      	b.n	800a682 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a680:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a682:	230f      	movs	r3, #15
 800a684:	18fb      	adds	r3, r7, r3
 800a686:	781b      	ldrb	r3, [r3, #0]
}
 800a688:	0018      	movs	r0, r3
 800a68a:	46bd      	mov	sp, r7
 800a68c:	b004      	add	sp, #16
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	40012c00 	.word	0x40012c00
 800a694:	40000400 	.word	0x40000400
 800a698:	00010007 	.word	0x00010007

0800a69c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	d027      	beq.n	800a70c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2202      	movs	r2, #2
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	d023      	beq.n	800a70c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2203      	movs	r2, #3
 800a6ca:	4252      	negs	r2, r2
 800a6cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	2203      	movs	r2, #3
 800a6dc:	4013      	ands	r3, r2
 800a6de:	d006      	beq.n	800a6ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2294      	movs	r2, #148	@ 0x94
 800a6e4:	589b      	ldr	r3, [r3, r2]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	0010      	movs	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	e00b      	b.n	800a706 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	229c      	movs	r2, #156	@ 0x9c
 800a6f2:	589b      	ldr	r3, [r3, r2]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	0010      	movs	r0, r2
 800a6f8:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	22a0      	movs	r2, #160	@ 0xa0
 800a6fe:	589b      	ldr	r3, [r3, r2]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	0010      	movs	r0, r2
 800a704:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2204      	movs	r2, #4
 800a710:	4013      	ands	r3, r2
 800a712:	d028      	beq.n	800a766 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2204      	movs	r2, #4
 800a718:	4013      	ands	r3, r2
 800a71a:	d024      	beq.n	800a766 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2205      	movs	r2, #5
 800a722:	4252      	negs	r2, r2
 800a724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2202      	movs	r2, #2
 800a72a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	23c0      	movs	r3, #192	@ 0xc0
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4013      	ands	r3, r2
 800a738:	d006      	beq.n	800a748 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2294      	movs	r2, #148	@ 0x94
 800a73e:	589b      	ldr	r3, [r3, r2]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	0010      	movs	r0, r2
 800a744:	4798      	blx	r3
 800a746:	e00b      	b.n	800a760 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	229c      	movs	r2, #156	@ 0x9c
 800a74c:	589b      	ldr	r3, [r3, r2]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	0010      	movs	r0, r2
 800a752:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	22a0      	movs	r2, #160	@ 0xa0
 800a758:	589b      	ldr	r3, [r3, r2]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	0010      	movs	r0, r2
 800a75e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2208      	movs	r2, #8
 800a76a:	4013      	ands	r3, r2
 800a76c:	d027      	beq.n	800a7be <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2208      	movs	r2, #8
 800a772:	4013      	ands	r3, r2
 800a774:	d023      	beq.n	800a7be <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2209      	movs	r2, #9
 800a77c:	4252      	negs	r2, r2
 800a77e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2204      	movs	r2, #4
 800a784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	2203      	movs	r2, #3
 800a78e:	4013      	ands	r3, r2
 800a790:	d006      	beq.n	800a7a0 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2294      	movs	r2, #148	@ 0x94
 800a796:	589b      	ldr	r3, [r3, r2]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	0010      	movs	r0, r2
 800a79c:	4798      	blx	r3
 800a79e:	e00b      	b.n	800a7b8 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	229c      	movs	r2, #156	@ 0x9c
 800a7a4:	589b      	ldr	r3, [r3, r2]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	0010      	movs	r0, r2
 800a7aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	22a0      	movs	r2, #160	@ 0xa0
 800a7b0:	589b      	ldr	r3, [r3, r2]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	0010      	movs	r0, r2
 800a7b6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2210      	movs	r2, #16
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	d028      	beq.n	800a818 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2210      	movs	r2, #16
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	d024      	beq.n	800a818 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2211      	movs	r2, #17
 800a7d4:	4252      	negs	r2, r2
 800a7d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2208      	movs	r2, #8
 800a7dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	69da      	ldr	r2, [r3, #28]
 800a7e4:	23c0      	movs	r3, #192	@ 0xc0
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	d006      	beq.n	800a7fa <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2294      	movs	r2, #148	@ 0x94
 800a7f0:	589b      	ldr	r3, [r3, r2]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	0010      	movs	r0, r2
 800a7f6:	4798      	blx	r3
 800a7f8:	e00b      	b.n	800a812 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	229c      	movs	r2, #156	@ 0x9c
 800a7fe:	589b      	ldr	r3, [r3, r2]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	0010      	movs	r0, r2
 800a804:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	22a0      	movs	r2, #160	@ 0xa0
 800a80a:	589b      	ldr	r3, [r3, r2]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	0010      	movs	r0, r2
 800a810:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	2201      	movs	r2, #1
 800a81c:	4013      	ands	r3, r2
 800a81e:	d00e      	beq.n	800a83e <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2201      	movs	r2, #1
 800a824:	4013      	ands	r3, r2
 800a826:	d00a      	beq.n	800a83e <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2202      	movs	r2, #2
 800a82e:	4252      	negs	r2, r2
 800a830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2284      	movs	r2, #132	@ 0x84
 800a836:	589b      	ldr	r3, [r3, r2]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	0010      	movs	r0, r2
 800a83c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2280      	movs	r2, #128	@ 0x80
 800a842:	4013      	ands	r3, r2
 800a844:	d104      	bne.n	800a850 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	2380      	movs	r3, #128	@ 0x80
 800a84a:	019b      	lsls	r3, r3, #6
 800a84c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a84e:	d00d      	beq.n	800a86c <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2280      	movs	r2, #128	@ 0x80
 800a854:	4013      	ands	r3, r2
 800a856:	d009      	beq.n	800a86c <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a22      	ldr	r2, [pc, #136]	@ (800a8e8 <HAL_TIM_IRQHandler+0x24c>)
 800a85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	22b4      	movs	r2, #180	@ 0xb4
 800a864:	589b      	ldr	r3, [r3, r2]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	0010      	movs	r0, r2
 800a86a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	2380      	movs	r3, #128	@ 0x80
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	4013      	ands	r3, r2
 800a874:	d00d      	beq.n	800a892 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2280      	movs	r2, #128	@ 0x80
 800a87a:	4013      	ands	r3, r2
 800a87c:	d009      	beq.n	800a892 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a1a      	ldr	r2, [pc, #104]	@ (800a8ec <HAL_TIM_IRQHandler+0x250>)
 800a884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	22b8      	movs	r2, #184	@ 0xb8
 800a88a:	589b      	ldr	r3, [r3, r2]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	0010      	movs	r0, r2
 800a890:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2240      	movs	r2, #64	@ 0x40
 800a896:	4013      	ands	r3, r2
 800a898:	d00e      	beq.n	800a8b8 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2240      	movs	r2, #64	@ 0x40
 800a89e:	4013      	ands	r3, r2
 800a8a0:	d00a      	beq.n	800a8b8 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2241      	movs	r2, #65	@ 0x41
 800a8a8:	4252      	negs	r2, r2
 800a8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	228c      	movs	r2, #140	@ 0x8c
 800a8b0:	589b      	ldr	r3, [r3, r2]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	0010      	movs	r0, r2
 800a8b6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2220      	movs	r2, #32
 800a8bc:	4013      	ands	r3, r2
 800a8be:	d00e      	beq.n	800a8de <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	d00a      	beq.n	800a8de <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2221      	movs	r2, #33	@ 0x21
 800a8ce:	4252      	negs	r2, r2
 800a8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	22ac      	movs	r2, #172	@ 0xac
 800a8d6:	589b      	ldr	r3, [r3, r2]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	0010      	movs	r0, r2
 800a8dc:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8de:	46c0      	nop			@ (mov r8, r8)
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	b004      	add	sp, #16
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	46c0      	nop			@ (mov r8, r8)
 800a8e8:	ffffdf7f 	.word	0xffffdf7f
 800a8ec:	fffffeff 	.word	0xfffffeff

0800a8f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8fc:	2317      	movs	r3, #23
 800a8fe:	18fb      	adds	r3, r7, r3
 800a900:	2200      	movs	r2, #0
 800a902:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	223c      	movs	r2, #60	@ 0x3c
 800a908:	5c9b      	ldrb	r3, [r3, r2]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <HAL_TIM_OC_ConfigChannel+0x22>
 800a90e:	2302      	movs	r3, #2
 800a910:	e048      	b.n	800a9a4 <HAL_TIM_OC_ConfigChannel+0xb4>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	223c      	movs	r2, #60	@ 0x3c
 800a916:	2101      	movs	r1, #1
 800a918:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b14      	cmp	r3, #20
 800a91e:	d835      	bhi.n	800a98c <HAL_TIM_OC_ConfigChannel+0x9c>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	009a      	lsls	r2, r3, #2
 800a924:	4b21      	ldr	r3, [pc, #132]	@ (800a9ac <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a926:	18d3      	adds	r3, r2, r3
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	0011      	movs	r1, r2
 800a934:	0018      	movs	r0, r3
 800a936:	f000 fcc3 	bl	800b2c0 <TIM_OC1_SetConfig>
      break;
 800a93a:	e02c      	b.n	800a996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	0011      	movs	r1, r2
 800a944:	0018      	movs	r0, r3
 800a946:	f000 fd3b 	bl	800b3c0 <TIM_OC2_SetConfig>
      break;
 800a94a:	e024      	b.n	800a996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	0011      	movs	r1, r2
 800a954:	0018      	movs	r0, r3
 800a956:	f000 fdb1 	bl	800b4bc <TIM_OC3_SetConfig>
      break;
 800a95a:	e01c      	b.n	800a996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	0011      	movs	r1, r2
 800a964:	0018      	movs	r0, r3
 800a966:	f000 fe2b 	bl	800b5c0 <TIM_OC4_SetConfig>
      break;
 800a96a:	e014      	b.n	800a996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	0011      	movs	r1, r2
 800a974:	0018      	movs	r0, r3
 800a976:	f000 fe87 	bl	800b688 <TIM_OC5_SetConfig>
      break;
 800a97a:	e00c      	b.n	800a996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	0011      	movs	r1, r2
 800a984:	0018      	movs	r0, r3
 800a986:	f000 fed9 	bl	800b73c <TIM_OC6_SetConfig>
      break;
 800a98a:	e004      	b.n	800a996 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a98c:	2317      	movs	r3, #23
 800a98e:	18fb      	adds	r3, r7, r3
 800a990:	2201      	movs	r2, #1
 800a992:	701a      	strb	r2, [r3, #0]
      break;
 800a994:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	223c      	movs	r2, #60	@ 0x3c
 800a99a:	2100      	movs	r1, #0
 800a99c:	5499      	strb	r1, [r3, r2]

  return status;
 800a99e:	2317      	movs	r3, #23
 800a9a0:	18fb      	adds	r3, r7, r3
 800a9a2:	781b      	ldrb	r3, [r3, #0]
}
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	b006      	add	sp, #24
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	0800e080 	.word	0x0800e080

0800a9b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9bc:	2317      	movs	r3, #23
 800a9be:	18fb      	adds	r3, r7, r3
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	223c      	movs	r2, #60	@ 0x3c
 800a9c8:	5c9b      	ldrb	r3, [r3, r2]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d101      	bne.n	800a9d2 <HAL_TIM_IC_ConfigChannel+0x22>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e08c      	b.n	800aaec <HAL_TIM_IC_ConfigChannel+0x13c>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	223c      	movs	r2, #60	@ 0x3c
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d11b      	bne.n	800aa18 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a9f0:	f000 ff02 	bl	800b7f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699a      	ldr	r2, [r3, #24]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	210c      	movs	r1, #12
 800aa00:	438a      	bics	r2, r1
 800aa02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6999      	ldr	r1, [r3, #24]
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	689a      	ldr	r2, [r3, #8]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	619a      	str	r2, [r3, #24]
 800aa16:	e062      	b.n	800aade <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d11c      	bne.n	800aa58 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800aa2e:	f000 ff67 	bl	800b900 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	699a      	ldr	r2, [r3, #24]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	492d      	ldr	r1, [pc, #180]	@ (800aaf4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800aa3e:	400a      	ands	r2, r1
 800aa40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6999      	ldr	r1, [r3, #24]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	021a      	lsls	r2, r3, #8
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	619a      	str	r2, [r3, #24]
 800aa56:	e042      	b.n	800aade <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b08      	cmp	r3, #8
 800aa5c:	d11b      	bne.n	800aa96 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800aa6e:	f000 ffbb 	bl	800b9e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	210c      	movs	r1, #12
 800aa7e:	438a      	bics	r2, r1
 800aa80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	69d9      	ldr	r1, [r3, #28]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	61da      	str	r2, [r3, #28]
 800aa94:	e023      	b.n	800aade <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b0c      	cmp	r3, #12
 800aa9a:	d11c      	bne.n	800aad6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800aaac:	f000 ffdc 	bl	800ba68 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	69da      	ldr	r2, [r3, #28]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	490e      	ldr	r1, [pc, #56]	@ (800aaf4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800aabc:	400a      	ands	r2, r1
 800aabe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	69d9      	ldr	r1, [r3, #28]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	021a      	lsls	r2, r3, #8
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	61da      	str	r2, [r3, #28]
 800aad4:	e003      	b.n	800aade <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800aad6:	2317      	movs	r3, #23
 800aad8:	18fb      	adds	r3, r7, r3
 800aada:	2201      	movs	r2, #1
 800aadc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	223c      	movs	r2, #60	@ 0x3c
 800aae2:	2100      	movs	r1, #0
 800aae4:	5499      	strb	r1, [r3, r2]

  return status;
 800aae6:	2317      	movs	r3, #23
 800aae8:	18fb      	adds	r3, r7, r3
 800aaea:	781b      	ldrb	r3, [r3, #0]
}
 800aaec:	0018      	movs	r0, r3
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	b006      	add	sp, #24
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	fffff3ff 	.word	0xfffff3ff

0800aaf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab04:	2317      	movs	r3, #23
 800ab06:	18fb      	adds	r3, r7, r3
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	223c      	movs	r2, #60	@ 0x3c
 800ab10:	5c9b      	ldrb	r3, [r3, r2]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <HAL_TIM_PWM_ConfigChannel+0x22>
 800ab16:	2302      	movs	r3, #2
 800ab18:	e0e5      	b.n	800ace6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	223c      	movs	r2, #60	@ 0x3c
 800ab1e:	2101      	movs	r1, #1
 800ab20:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2b14      	cmp	r3, #20
 800ab26:	d900      	bls.n	800ab2a <HAL_TIM_PWM_ConfigChannel+0x32>
 800ab28:	e0d1      	b.n	800acce <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	009a      	lsls	r2, r3, #2
 800ab2e:	4b70      	ldr	r3, [pc, #448]	@ (800acf0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800ab30:	18d3      	adds	r3, r2, r3
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	0011      	movs	r1, r2
 800ab3e:	0018      	movs	r0, r3
 800ab40:	f000 fbbe 	bl	800b2c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2108      	movs	r1, #8
 800ab50:	430a      	orrs	r2, r1
 800ab52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	699a      	ldr	r2, [r3, #24]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2104      	movs	r1, #4
 800ab60:	438a      	bics	r2, r1
 800ab62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6999      	ldr	r1, [r3, #24]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	691a      	ldr	r2, [r3, #16]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	619a      	str	r2, [r3, #24]
      break;
 800ab76:	e0af      	b.n	800acd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	0011      	movs	r1, r2
 800ab80:	0018      	movs	r0, r3
 800ab82:	f000 fc1d 	bl	800b3c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	699a      	ldr	r2, [r3, #24]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2180      	movs	r1, #128	@ 0x80
 800ab92:	0109      	lsls	r1, r1, #4
 800ab94:	430a      	orrs	r2, r1
 800ab96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4954      	ldr	r1, [pc, #336]	@ (800acf4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aba4:	400a      	ands	r2, r1
 800aba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6999      	ldr	r1, [r3, #24]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	021a      	lsls	r2, r3, #8
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	619a      	str	r2, [r3, #24]
      break;
 800abbc:	e08c      	b.n	800acd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	0011      	movs	r1, r2
 800abc6:	0018      	movs	r0, r3
 800abc8:	f000 fc78 	bl	800b4bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	69da      	ldr	r2, [r3, #28]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2108      	movs	r1, #8
 800abd8:	430a      	orrs	r2, r1
 800abda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	69da      	ldr	r2, [r3, #28]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2104      	movs	r1, #4
 800abe8:	438a      	bics	r2, r1
 800abea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	69d9      	ldr	r1, [r3, #28]
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	691a      	ldr	r2, [r3, #16]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	61da      	str	r2, [r3, #28]
      break;
 800abfe:	e06b      	b.n	800acd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	0011      	movs	r1, r2
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f000 fcd9 	bl	800b5c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	69da      	ldr	r2, [r3, #28]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2180      	movs	r1, #128	@ 0x80
 800ac1a:	0109      	lsls	r1, r1, #4
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	69da      	ldr	r2, [r3, #28]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4932      	ldr	r1, [pc, #200]	@ (800acf4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800ac2c:	400a      	ands	r2, r1
 800ac2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69d9      	ldr	r1, [r3, #28]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	021a      	lsls	r2, r3, #8
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	430a      	orrs	r2, r1
 800ac42:	61da      	str	r2, [r3, #28]
      break;
 800ac44:	e048      	b.n	800acd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	0011      	movs	r1, r2
 800ac4e:	0018      	movs	r0, r3
 800ac50:	f000 fd1a 	bl	800b688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2108      	movs	r1, #8
 800ac60:	430a      	orrs	r2, r1
 800ac62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2104      	movs	r1, #4
 800ac70:	438a      	bics	r2, r1
 800ac72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	691a      	ldr	r2, [r3, #16]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ac86:	e027      	b.n	800acd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	0011      	movs	r1, r2
 800ac90:	0018      	movs	r0, r3
 800ac92:	f000 fd53 	bl	800b73c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2180      	movs	r1, #128	@ 0x80
 800aca2:	0109      	lsls	r1, r1, #4
 800aca4:	430a      	orrs	r2, r1
 800aca6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4910      	ldr	r1, [pc, #64]	@ (800acf4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800acb4:	400a      	ands	r2, r1
 800acb6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	021a      	lsls	r2, r3, #8
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800accc:	e004      	b.n	800acd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800acce:	2317      	movs	r3, #23
 800acd0:	18fb      	adds	r3, r7, r3
 800acd2:	2201      	movs	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
      break;
 800acd6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	223c      	movs	r2, #60	@ 0x3c
 800acdc:	2100      	movs	r1, #0
 800acde:	5499      	strb	r1, [r3, r2]

  return status;
 800ace0:	2317      	movs	r3, #23
 800ace2:	18fb      	adds	r3, r7, r3
 800ace4:	781b      	ldrb	r3, [r3, #0]
}
 800ace6:	0018      	movs	r0, r3
 800ace8:	46bd      	mov	sp, r7
 800acea:	b006      	add	sp, #24
 800acec:	bd80      	pop	{r7, pc}
 800acee:	46c0      	nop			@ (mov r8, r8)
 800acf0:	0800e0d4 	.word	0x0800e0d4
 800acf4:	fffffbff 	.word	0xfffffbff

0800acf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad02:	230f      	movs	r3, #15
 800ad04:	18fb      	adds	r3, r7, r3
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	223c      	movs	r2, #60	@ 0x3c
 800ad0e:	5c9b      	ldrb	r3, [r3, r2]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <HAL_TIM_ConfigClockSource+0x20>
 800ad14:	2302      	movs	r3, #2
 800ad16:	e0bc      	b.n	800ae92 <HAL_TIM_ConfigClockSource+0x19a>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	223c      	movs	r2, #60	@ 0x3c
 800ad1c:	2101      	movs	r1, #1
 800ad1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	223d      	movs	r2, #61	@ 0x3d
 800ad24:	2102      	movs	r1, #2
 800ad26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	4a5a      	ldr	r2, [pc, #360]	@ (800ae9c <HAL_TIM_ConfigClockSource+0x1a4>)
 800ad34:	4013      	ands	r3, r2
 800ad36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	4a59      	ldr	r2, [pc, #356]	@ (800aea0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2280      	movs	r2, #128	@ 0x80
 800ad4e:	0192      	lsls	r2, r2, #6
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d040      	beq.n	800add6 <HAL_TIM_ConfigClockSource+0xde>
 800ad54:	2280      	movs	r2, #128	@ 0x80
 800ad56:	0192      	lsls	r2, r2, #6
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d900      	bls.n	800ad5e <HAL_TIM_ConfigClockSource+0x66>
 800ad5c:	e088      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
 800ad5e:	2280      	movs	r2, #128	@ 0x80
 800ad60:	0152      	lsls	r2, r2, #5
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d100      	bne.n	800ad68 <HAL_TIM_ConfigClockSource+0x70>
 800ad66:	e088      	b.n	800ae7a <HAL_TIM_ConfigClockSource+0x182>
 800ad68:	2280      	movs	r2, #128	@ 0x80
 800ad6a:	0152      	lsls	r2, r2, #5
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d900      	bls.n	800ad72 <HAL_TIM_ConfigClockSource+0x7a>
 800ad70:	e07e      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
 800ad72:	2b70      	cmp	r3, #112	@ 0x70
 800ad74:	d018      	beq.n	800ada8 <HAL_TIM_ConfigClockSource+0xb0>
 800ad76:	d900      	bls.n	800ad7a <HAL_TIM_ConfigClockSource+0x82>
 800ad78:	e07a      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
 800ad7a:	2b60      	cmp	r3, #96	@ 0x60
 800ad7c:	d04f      	beq.n	800ae1e <HAL_TIM_ConfigClockSource+0x126>
 800ad7e:	d900      	bls.n	800ad82 <HAL_TIM_ConfigClockSource+0x8a>
 800ad80:	e076      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
 800ad82:	2b50      	cmp	r3, #80	@ 0x50
 800ad84:	d03b      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x106>
 800ad86:	d900      	bls.n	800ad8a <HAL_TIM_ConfigClockSource+0x92>
 800ad88:	e072      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
 800ad8a:	2b40      	cmp	r3, #64	@ 0x40
 800ad8c:	d057      	beq.n	800ae3e <HAL_TIM_ConfigClockSource+0x146>
 800ad8e:	d900      	bls.n	800ad92 <HAL_TIM_ConfigClockSource+0x9a>
 800ad90:	e06e      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
 800ad92:	2b30      	cmp	r3, #48	@ 0x30
 800ad94:	d063      	beq.n	800ae5e <HAL_TIM_ConfigClockSource+0x166>
 800ad96:	d86b      	bhi.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
 800ad98:	2b20      	cmp	r3, #32
 800ad9a:	d060      	beq.n	800ae5e <HAL_TIM_ConfigClockSource+0x166>
 800ad9c:	d868      	bhi.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d05d      	beq.n	800ae5e <HAL_TIM_ConfigClockSource+0x166>
 800ada2:	2b10      	cmp	r3, #16
 800ada4:	d05b      	beq.n	800ae5e <HAL_TIM_ConfigClockSource+0x166>
 800ada6:	e063      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800adb8:	f000 feb8 	bl	800bb2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2277      	movs	r2, #119	@ 0x77
 800adc8:	4313      	orrs	r3, r2
 800adca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	609a      	str	r2, [r3, #8]
      break;
 800add4:	e052      	b.n	800ae7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ade6:	f000 fea1 	bl	800bb2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2180      	movs	r1, #128	@ 0x80
 800adf6:	01c9      	lsls	r1, r1, #7
 800adf8:	430a      	orrs	r2, r1
 800adfa:	609a      	str	r2, [r3, #8]
      break;
 800adfc:	e03e      	b.n	800ae7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae0a:	001a      	movs	r2, r3
 800ae0c:	f000 fd4a 	bl	800b8a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2150      	movs	r1, #80	@ 0x50
 800ae16:	0018      	movs	r0, r3
 800ae18:	f000 fe6c 	bl	800baf4 <TIM_ITRx_SetConfig>
      break;
 800ae1c:	e02e      	b.n	800ae7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae2a:	001a      	movs	r2, r3
 800ae2c:	f000 fdaa 	bl	800b984 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2160      	movs	r1, #96	@ 0x60
 800ae36:	0018      	movs	r0, r3
 800ae38:	f000 fe5c 	bl	800baf4 <TIM_ITRx_SetConfig>
      break;
 800ae3c:	e01e      	b.n	800ae7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae4a:	001a      	movs	r2, r3
 800ae4c:	f000 fd2a 	bl	800b8a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2140      	movs	r1, #64	@ 0x40
 800ae56:	0018      	movs	r0, r3
 800ae58:	f000 fe4c 	bl	800baf4 <TIM_ITRx_SetConfig>
      break;
 800ae5c:	e00e      	b.n	800ae7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	0019      	movs	r1, r3
 800ae68:	0010      	movs	r0, r2
 800ae6a:	f000 fe43 	bl	800baf4 <TIM_ITRx_SetConfig>
      break;
 800ae6e:	e005      	b.n	800ae7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800ae70:	230f      	movs	r3, #15
 800ae72:	18fb      	adds	r3, r7, r3
 800ae74:	2201      	movs	r2, #1
 800ae76:	701a      	strb	r2, [r3, #0]
      break;
 800ae78:	e000      	b.n	800ae7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800ae7a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	223d      	movs	r2, #61	@ 0x3d
 800ae80:	2101      	movs	r1, #1
 800ae82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	223c      	movs	r2, #60	@ 0x3c
 800ae88:	2100      	movs	r1, #0
 800ae8a:	5499      	strb	r1, [r3, r2]

  return status;
 800ae8c:	230f      	movs	r3, #15
 800ae8e:	18fb      	adds	r3, r7, r3
 800ae90:	781b      	ldrb	r3, [r3, #0]
}
 800ae92:	0018      	movs	r0, r3
 800ae94:	46bd      	mov	sp, r7
 800ae96:	b004      	add	sp, #16
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	46c0      	nop			@ (mov r8, r8)
 800ae9c:	ffceff88 	.word	0xffceff88
 800aea0:	ffff00ff 	.word	0xffff00ff

0800aea4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b0c      	cmp	r3, #12
 800aeb6:	d01e      	beq.n	800aef6 <HAL_TIM_ReadCapturedValue+0x52>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2b0c      	cmp	r3, #12
 800aebc:	d820      	bhi.n	800af00 <HAL_TIM_ReadCapturedValue+0x5c>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b08      	cmp	r3, #8
 800aec2:	d013      	beq.n	800aeec <HAL_TIM_ReadCapturedValue+0x48>
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d81a      	bhi.n	800af00 <HAL_TIM_ReadCapturedValue+0x5c>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d003      	beq.n	800aed8 <HAL_TIM_ReadCapturedValue+0x34>
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d005      	beq.n	800aee2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800aed6:	e013      	b.n	800af00 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aede:	60fb      	str	r3, [r7, #12]
      break;
 800aee0:	e00f      	b.n	800af02 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee8:	60fb      	str	r3, [r7, #12]
      break;
 800aeea:	e00a      	b.n	800af02 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef2:	60fb      	str	r3, [r7, #12]
      break;
 800aef4:	e005      	b.n	800af02 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefc:	60fb      	str	r3, [r7, #12]
      break;
 800aefe:	e000      	b.n	800af02 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800af00:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800af02:	68fb      	ldr	r3, [r7, #12]
}
 800af04:	0018      	movs	r0, r3
 800af06:	46bd      	mov	sp, r7
 800af08:	b004      	add	sp, #16
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800af14:	46c0      	nop			@ (mov r8, r8)
 800af16:	46bd      	mov	sp, r7
 800af18:	b002      	add	sp, #8
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800af24:	46c0      	nop			@ (mov r8, r8)
 800af26:	46bd      	mov	sp, r7
 800af28:	b002      	add	sp, #8
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af34:	46c0      	nop			@ (mov r8, r8)
 800af36:	46bd      	mov	sp, r7
 800af38:	b002      	add	sp, #8
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af44:	46c0      	nop			@ (mov r8, r8)
 800af46:	46bd      	mov	sp, r7
 800af48:	b002      	add	sp, #8
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800af54:	46c0      	nop			@ (mov r8, r8)
 800af56:	46bd      	mov	sp, r7
 800af58:	b002      	add	sp, #8
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af64:	46c0      	nop			@ (mov r8, r8)
 800af66:	46bd      	mov	sp, r7
 800af68:	b002      	add	sp, #8
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800af74:	46c0      	nop			@ (mov r8, r8)
 800af76:	46bd      	mov	sp, r7
 800af78:	b002      	add	sp, #8
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af84:	46c0      	nop			@ (mov r8, r8)
 800af86:	46bd      	mov	sp, r7
 800af88:	b002      	add	sp, #8
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800af94:	46c0      	nop			@ (mov r8, r8)
 800af96:	46bd      	mov	sp, r7
 800af98:	b002      	add	sp, #8
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800afa4:	46c0      	nop			@ (mov r8, r8)
 800afa6:	46bd      	mov	sp, r7
 800afa8:	b002      	add	sp, #8
 800afaa:	bd80      	pop	{r7, pc}

0800afac <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	607a      	str	r2, [r7, #4]
 800afb6:	230b      	movs	r3, #11
 800afb8:	18fb      	adds	r3, r7, r3
 800afba:	1c0a      	adds	r2, r1, #0
 800afbc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afbe:	2317      	movs	r3, #23
 800afc0:	18fb      	adds	r3, r7, r3
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e0ea      	b.n	800b1a6 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	223d      	movs	r2, #61	@ 0x3d
 800afd4:	5c9b      	ldrb	r3, [r3, r2]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d000      	beq.n	800afde <HAL_TIM_RegisterCallback+0x32>
 800afdc:	e08e      	b.n	800b0fc <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800afde:	230b      	movs	r3, #11
 800afe0:	18fb      	adds	r3, r7, r3
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b1b      	cmp	r3, #27
 800afe6:	d900      	bls.n	800afea <HAL_TIM_RegisterCallback+0x3e>
 800afe8:	e083      	b.n	800b0f2 <HAL_TIM_RegisterCallback+0x146>
 800afea:	009a      	lsls	r2, r3, #2
 800afec:	4b70      	ldr	r3, [pc, #448]	@ (800b1b0 <HAL_TIM_RegisterCallback+0x204>)
 800afee:	18d3      	adds	r3, r2, r3
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800affa:	e0d1      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b002:	e0cd      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b00a:	e0c9      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b012:	e0c5      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b01a:	e0c1      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b022:	e0bd      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b02a:	e0b9      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b032:	e0b5      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b03a:	e0b1      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b042:	e0ad      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b04a:	e0a9      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b052:	e0a5      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b05a:	e0a1      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2180      	movs	r1, #128	@ 0x80
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	505a      	str	r2, [r3, r1]
        break;
 800b064:	e09c      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2184      	movs	r1, #132	@ 0x84
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	505a      	str	r2, [r3, r1]
        break;
 800b06e:	e097      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2188      	movs	r1, #136	@ 0x88
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	505a      	str	r2, [r3, r1]
        break;
 800b078:	e092      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	218c      	movs	r1, #140	@ 0x8c
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	505a      	str	r2, [r3, r1]
        break;
 800b082:	e08d      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2190      	movs	r1, #144	@ 0x90
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	505a      	str	r2, [r3, r1]
        break;
 800b08c:	e088      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2194      	movs	r1, #148	@ 0x94
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	505a      	str	r2, [r3, r1]
        break;
 800b096:	e083      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2198      	movs	r1, #152	@ 0x98
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	505a      	str	r2, [r3, r1]
        break;
 800b0a0:	e07e      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	219c      	movs	r1, #156	@ 0x9c
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	505a      	str	r2, [r3, r1]
        break;
 800b0aa:	e079      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	21a0      	movs	r1, #160	@ 0xa0
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	505a      	str	r2, [r3, r1]
        break;
 800b0b4:	e074      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	21a4      	movs	r1, #164	@ 0xa4
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	505a      	str	r2, [r3, r1]
        break;
 800b0be:	e06f      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	21a8      	movs	r1, #168	@ 0xa8
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	505a      	str	r2, [r3, r1]
        break;
 800b0c8:	e06a      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	21ac      	movs	r1, #172	@ 0xac
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	505a      	str	r2, [r3, r1]
        break;
 800b0d2:	e065      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	21b0      	movs	r1, #176	@ 0xb0
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	505a      	str	r2, [r3, r1]
        break;
 800b0dc:	e060      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	21b4      	movs	r1, #180	@ 0xb4
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	505a      	str	r2, [r3, r1]
        break;
 800b0e6:	e05b      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	21b8      	movs	r1, #184	@ 0xb8
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	505a      	str	r2, [r3, r1]
        break;
 800b0f0:	e056      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b0f2:	2317      	movs	r3, #23
 800b0f4:	18fb      	adds	r3, r7, r3
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	701a      	strb	r2, [r3, #0]
        break;
 800b0fa:	e051      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	223d      	movs	r2, #61	@ 0x3d
 800b100:	5c9b      	ldrb	r3, [r3, r2]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b00      	cmp	r3, #0
 800b106:	d147      	bne.n	800b198 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800b108:	230b      	movs	r3, #11
 800b10a:	18fb      	adds	r3, r7, r3
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b0d      	cmp	r3, #13
 800b110:	d83d      	bhi.n	800b18e <HAL_TIM_RegisterCallback+0x1e2>
 800b112:	009a      	lsls	r2, r3, #2
 800b114:	4b27      	ldr	r3, [pc, #156]	@ (800b1b4 <HAL_TIM_RegisterCallback+0x208>)
 800b116:	18d3      	adds	r3, r2, r3
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b122:	e03d      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b12a:	e039      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b132:	e035      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b13a:	e031      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b142:	e02d      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b14a:	e029      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b152:	e025      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b15a:	e021      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b162:	e01d      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b16a:	e019      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b172:	e015      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b17a:	e011      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b182:	e00d      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2180      	movs	r1, #128	@ 0x80
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	505a      	str	r2, [r3, r1]
        break;
 800b18c:	e008      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b18e:	2317      	movs	r3, #23
 800b190:	18fb      	adds	r3, r7, r3
 800b192:	2201      	movs	r2, #1
 800b194:	701a      	strb	r2, [r3, #0]
        break;
 800b196:	e003      	b.n	800b1a0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b198:	2317      	movs	r3, #23
 800b19a:	18fb      	adds	r3, r7, r3
 800b19c:	2201      	movs	r2, #1
 800b19e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b1a0:	2317      	movs	r3, #23
 800b1a2:	18fb      	adds	r3, r7, r3
 800b1a4:	781b      	ldrb	r3, [r3, #0]
}
 800b1a6:	0018      	movs	r0, r3
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	b006      	add	sp, #24
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	46c0      	nop			@ (mov r8, r8)
 800b1b0:	0800e128 	.word	0x0800e128
 800b1b4:	0800e198 	.word	0x0800e198

0800b1b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a37      	ldr	r2, [pc, #220]	@ (800b2a8 <TIM_Base_SetConfig+0xf0>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d008      	beq.n	800b1e2 <TIM_Base_SetConfig+0x2a>
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	2380      	movs	r3, #128	@ 0x80
 800b1d4:	05db      	lsls	r3, r3, #23
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d003      	beq.n	800b1e2 <TIM_Base_SetConfig+0x2a>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a33      	ldr	r2, [pc, #204]	@ (800b2ac <TIM_Base_SetConfig+0xf4>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d108      	bne.n	800b1f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2270      	movs	r2, #112	@ 0x70
 800b1e6:	4393      	bics	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a2c      	ldr	r2, [pc, #176]	@ (800b2a8 <TIM_Base_SetConfig+0xf0>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d014      	beq.n	800b226 <TIM_Base_SetConfig+0x6e>
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	2380      	movs	r3, #128	@ 0x80
 800b200:	05db      	lsls	r3, r3, #23
 800b202:	429a      	cmp	r2, r3
 800b204:	d00f      	beq.n	800b226 <TIM_Base_SetConfig+0x6e>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a28      	ldr	r2, [pc, #160]	@ (800b2ac <TIM_Base_SetConfig+0xf4>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d00b      	beq.n	800b226 <TIM_Base_SetConfig+0x6e>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a27      	ldr	r2, [pc, #156]	@ (800b2b0 <TIM_Base_SetConfig+0xf8>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d007      	beq.n	800b226 <TIM_Base_SetConfig+0x6e>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a26      	ldr	r2, [pc, #152]	@ (800b2b4 <TIM_Base_SetConfig+0xfc>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d003      	beq.n	800b226 <TIM_Base_SetConfig+0x6e>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a25      	ldr	r2, [pc, #148]	@ (800b2b8 <TIM_Base_SetConfig+0x100>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d108      	bne.n	800b238 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4a24      	ldr	r2, [pc, #144]	@ (800b2bc <TIM_Base_SetConfig+0x104>)
 800b22a:	4013      	ands	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	4313      	orrs	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2280      	movs	r2, #128	@ 0x80
 800b23c:	4393      	bics	r3, r2
 800b23e:	001a      	movs	r2, r3
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	4313      	orrs	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	689a      	ldr	r2, [r3, #8]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a11      	ldr	r2, [pc, #68]	@ (800b2a8 <TIM_Base_SetConfig+0xf0>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d007      	beq.n	800b276 <TIM_Base_SetConfig+0xbe>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a12      	ldr	r2, [pc, #72]	@ (800b2b4 <TIM_Base_SetConfig+0xfc>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d003      	beq.n	800b276 <TIM_Base_SetConfig+0xbe>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a11      	ldr	r2, [pc, #68]	@ (800b2b8 <TIM_Base_SetConfig+0x100>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d103      	bne.n	800b27e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	691a      	ldr	r2, [r3, #16]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	2201      	movs	r2, #1
 800b28a:	4013      	ands	r3, r2
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d106      	bne.n	800b29e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	2201      	movs	r2, #1
 800b296:	4393      	bics	r3, r2
 800b298:	001a      	movs	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	611a      	str	r2, [r3, #16]
  }
}
 800b29e:	46c0      	nop			@ (mov r8, r8)
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	b004      	add	sp, #16
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	46c0      	nop			@ (mov r8, r8)
 800b2a8:	40012c00 	.word	0x40012c00
 800b2ac:	40000400 	.word	0x40000400
 800b2b0:	40002000 	.word	0x40002000
 800b2b4:	40014400 	.word	0x40014400
 800b2b8:	40014800 	.word	0x40014800
 800b2bc:	fffffcff 	.word	0xfffffcff

0800b2c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	4393      	bics	r3, r2
 800b2d8:	001a      	movs	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	4a2e      	ldr	r2, [pc, #184]	@ (800b3a8 <TIM_OC1_SetConfig+0xe8>)
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2203      	movs	r2, #3
 800b2f6:	4393      	bics	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	4313      	orrs	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2202      	movs	r2, #2
 800b308:	4393      	bics	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	4313      	orrs	r3, r2
 800b314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a24      	ldr	r2, [pc, #144]	@ (800b3ac <TIM_OC1_SetConfig+0xec>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d007      	beq.n	800b32e <TIM_OC1_SetConfig+0x6e>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a23      	ldr	r2, [pc, #140]	@ (800b3b0 <TIM_OC1_SetConfig+0xf0>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d003      	beq.n	800b32e <TIM_OC1_SetConfig+0x6e>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a22      	ldr	r2, [pc, #136]	@ (800b3b4 <TIM_OC1_SetConfig+0xf4>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d10c      	bne.n	800b348 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2208      	movs	r2, #8
 800b332:	4393      	bics	r3, r2
 800b334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2204      	movs	r2, #4
 800b344:	4393      	bics	r3, r2
 800b346:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a18      	ldr	r2, [pc, #96]	@ (800b3ac <TIM_OC1_SetConfig+0xec>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d007      	beq.n	800b360 <TIM_OC1_SetConfig+0xa0>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a17      	ldr	r2, [pc, #92]	@ (800b3b0 <TIM_OC1_SetConfig+0xf0>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d003      	beq.n	800b360 <TIM_OC1_SetConfig+0xa0>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a16      	ldr	r2, [pc, #88]	@ (800b3b4 <TIM_OC1_SetConfig+0xf4>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d111      	bne.n	800b384 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	4a15      	ldr	r2, [pc, #84]	@ (800b3b8 <TIM_OC1_SetConfig+0xf8>)
 800b364:	4013      	ands	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	4a14      	ldr	r2, [pc, #80]	@ (800b3bc <TIM_OC1_SetConfig+0xfc>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	4313      	orrs	r3, r2
 800b378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	4313      	orrs	r3, r2
 800b382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	621a      	str	r2, [r3, #32]
}
 800b39e:	46c0      	nop			@ (mov r8, r8)
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	b006      	add	sp, #24
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	46c0      	nop			@ (mov r8, r8)
 800b3a8:	fffeff8f 	.word	0xfffeff8f
 800b3ac:	40012c00 	.word	0x40012c00
 800b3b0:	40014400 	.word	0x40014400
 800b3b4:	40014800 	.word	0x40014800
 800b3b8:	fffffeff 	.word	0xfffffeff
 800b3bc:	fffffdff 	.word	0xfffffdff

0800b3c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	2210      	movs	r2, #16
 800b3d6:	4393      	bics	r3, r2
 800b3d8:	001a      	movs	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4a2c      	ldr	r2, [pc, #176]	@ (800b4a0 <TIM_OC2_SetConfig+0xe0>)
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	4a2b      	ldr	r2, [pc, #172]	@ (800b4a4 <TIM_OC2_SetConfig+0xe4>)
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	021b      	lsls	r3, r3, #8
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4313      	orrs	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2220      	movs	r2, #32
 800b40a:	4393      	bics	r3, r2
 800b40c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	011b      	lsls	r3, r3, #4
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	4313      	orrs	r3, r2
 800b418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a22      	ldr	r2, [pc, #136]	@ (800b4a8 <TIM_OC2_SetConfig+0xe8>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d10d      	bne.n	800b43e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2280      	movs	r2, #128	@ 0x80
 800b426:	4393      	bics	r3, r2
 800b428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	011b      	lsls	r3, r3, #4
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	4313      	orrs	r3, r2
 800b434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2240      	movs	r2, #64	@ 0x40
 800b43a:	4393      	bics	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a19      	ldr	r2, [pc, #100]	@ (800b4a8 <TIM_OC2_SetConfig+0xe8>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d007      	beq.n	800b456 <TIM_OC2_SetConfig+0x96>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a18      	ldr	r2, [pc, #96]	@ (800b4ac <TIM_OC2_SetConfig+0xec>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d003      	beq.n	800b456 <TIM_OC2_SetConfig+0x96>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a17      	ldr	r2, [pc, #92]	@ (800b4b0 <TIM_OC2_SetConfig+0xf0>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d113      	bne.n	800b47e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	4a16      	ldr	r2, [pc, #88]	@ (800b4b4 <TIM_OC2_SetConfig+0xf4>)
 800b45a:	4013      	ands	r3, r2
 800b45c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	4a15      	ldr	r2, [pc, #84]	@ (800b4b8 <TIM_OC2_SetConfig+0xf8>)
 800b462:	4013      	ands	r3, r2
 800b464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	4313      	orrs	r3, r2
 800b470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	621a      	str	r2, [r3, #32]
}
 800b498:	46c0      	nop			@ (mov r8, r8)
 800b49a:	46bd      	mov	sp, r7
 800b49c:	b006      	add	sp, #24
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	feff8fff 	.word	0xfeff8fff
 800b4a4:	fffffcff 	.word	0xfffffcff
 800b4a8:	40012c00 	.word	0x40012c00
 800b4ac:	40014400 	.word	0x40014400
 800b4b0:	40014800 	.word	0x40014800
 800b4b4:	fffffbff 	.word	0xfffffbff
 800b4b8:	fffff7ff 	.word	0xfffff7ff

0800b4bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a1b      	ldr	r3, [r3, #32]
 800b4ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6a1b      	ldr	r3, [r3, #32]
 800b4d0:	4a31      	ldr	r2, [pc, #196]	@ (800b598 <TIM_OC3_SetConfig+0xdc>)
 800b4d2:	401a      	ands	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	69db      	ldr	r3, [r3, #28]
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4a2d      	ldr	r2, [pc, #180]	@ (800b59c <TIM_OC3_SetConfig+0xe0>)
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2203      	movs	r2, #3
 800b4f0:	4393      	bics	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	4a27      	ldr	r2, [pc, #156]	@ (800b5a0 <TIM_OC3_SetConfig+0xe4>)
 800b502:	4013      	ands	r3, r2
 800b504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	021b      	lsls	r3, r3, #8
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	4313      	orrs	r3, r2
 800b510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a23      	ldr	r2, [pc, #140]	@ (800b5a4 <TIM_OC3_SetConfig+0xe8>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d10d      	bne.n	800b536 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	4a22      	ldr	r2, [pc, #136]	@ (800b5a8 <TIM_OC3_SetConfig+0xec>)
 800b51e:	4013      	ands	r3, r2
 800b520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	4a1e      	ldr	r2, [pc, #120]	@ (800b5ac <TIM_OC3_SetConfig+0xf0>)
 800b532:	4013      	ands	r3, r2
 800b534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a1a      	ldr	r2, [pc, #104]	@ (800b5a4 <TIM_OC3_SetConfig+0xe8>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d007      	beq.n	800b54e <TIM_OC3_SetConfig+0x92>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a1b      	ldr	r2, [pc, #108]	@ (800b5b0 <TIM_OC3_SetConfig+0xf4>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d003      	beq.n	800b54e <TIM_OC3_SetConfig+0x92>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a1a      	ldr	r2, [pc, #104]	@ (800b5b4 <TIM_OC3_SetConfig+0xf8>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d113      	bne.n	800b576 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	4a19      	ldr	r2, [pc, #100]	@ (800b5b8 <TIM_OC3_SetConfig+0xfc>)
 800b552:	4013      	ands	r3, r2
 800b554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	4a18      	ldr	r2, [pc, #96]	@ (800b5bc <TIM_OC3_SetConfig+0x100>)
 800b55a:	4013      	ands	r3, r2
 800b55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	4313      	orrs	r3, r2
 800b568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	4313      	orrs	r3, r2
 800b574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	621a      	str	r2, [r3, #32]
}
 800b590:	46c0      	nop			@ (mov r8, r8)
 800b592:	46bd      	mov	sp, r7
 800b594:	b006      	add	sp, #24
 800b596:	bd80      	pop	{r7, pc}
 800b598:	fffffeff 	.word	0xfffffeff
 800b59c:	fffeff8f 	.word	0xfffeff8f
 800b5a0:	fffffdff 	.word	0xfffffdff
 800b5a4:	40012c00 	.word	0x40012c00
 800b5a8:	fffff7ff 	.word	0xfffff7ff
 800b5ac:	fffffbff 	.word	0xfffffbff
 800b5b0:	40014400 	.word	0x40014400
 800b5b4:	40014800 	.word	0x40014800
 800b5b8:	ffffefff 	.word	0xffffefff
 800b5bc:	ffffdfff 	.word	0xffffdfff

0800b5c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	4a24      	ldr	r2, [pc, #144]	@ (800b668 <TIM_OC4_SetConfig+0xa8>)
 800b5d6:	401a      	ands	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	4a20      	ldr	r2, [pc, #128]	@ (800b66c <TIM_OC4_SetConfig+0xac>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4a1f      	ldr	r2, [pc, #124]	@ (800b670 <TIM_OC4_SetConfig+0xb0>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	4a1b      	ldr	r2, [pc, #108]	@ (800b674 <TIM_OC4_SetConfig+0xb4>)
 800b608:	4013      	ands	r3, r2
 800b60a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	031b      	lsls	r3, r3, #12
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	4313      	orrs	r3, r2
 800b616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a17      	ldr	r2, [pc, #92]	@ (800b678 <TIM_OC4_SetConfig+0xb8>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d007      	beq.n	800b630 <TIM_OC4_SetConfig+0x70>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a16      	ldr	r2, [pc, #88]	@ (800b67c <TIM_OC4_SetConfig+0xbc>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d003      	beq.n	800b630 <TIM_OC4_SetConfig+0x70>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a15      	ldr	r2, [pc, #84]	@ (800b680 <TIM_OC4_SetConfig+0xc0>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d109      	bne.n	800b644 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	4a14      	ldr	r2, [pc, #80]	@ (800b684 <TIM_OC4_SetConfig+0xc4>)
 800b634:	4013      	ands	r3, r2
 800b636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	695b      	ldr	r3, [r3, #20]
 800b63c:	019b      	lsls	r3, r3, #6
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	4313      	orrs	r3, r2
 800b642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	621a      	str	r2, [r3, #32]
}
 800b65e:	46c0      	nop			@ (mov r8, r8)
 800b660:	46bd      	mov	sp, r7
 800b662:	b006      	add	sp, #24
 800b664:	bd80      	pop	{r7, pc}
 800b666:	46c0      	nop			@ (mov r8, r8)
 800b668:	ffffefff 	.word	0xffffefff
 800b66c:	feff8fff 	.word	0xfeff8fff
 800b670:	fffffcff 	.word	0xfffffcff
 800b674:	ffffdfff 	.word	0xffffdfff
 800b678:	40012c00 	.word	0x40012c00
 800b67c:	40014400 	.word	0x40014400
 800b680:	40014800 	.word	0x40014800
 800b684:	ffffbfff 	.word	0xffffbfff

0800b688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	4a21      	ldr	r2, [pc, #132]	@ (800b724 <TIM_OC5_SetConfig+0x9c>)
 800b69e:	401a      	ands	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4a1d      	ldr	r2, [pc, #116]	@ (800b728 <TIM_OC5_SetConfig+0xa0>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	4a19      	ldr	r2, [pc, #100]	@ (800b72c <TIM_OC5_SetConfig+0xa4>)
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	041b      	lsls	r3, r3, #16
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a15      	ldr	r2, [pc, #84]	@ (800b730 <TIM_OC5_SetConfig+0xa8>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d007      	beq.n	800b6ee <TIM_OC5_SetConfig+0x66>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a14      	ldr	r2, [pc, #80]	@ (800b734 <TIM_OC5_SetConfig+0xac>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d003      	beq.n	800b6ee <TIM_OC5_SetConfig+0x66>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a13      	ldr	r2, [pc, #76]	@ (800b738 <TIM_OC5_SetConfig+0xb0>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d109      	bne.n	800b702 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	4a0c      	ldr	r2, [pc, #48]	@ (800b724 <TIM_OC5_SetConfig+0x9c>)
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	021b      	lsls	r3, r3, #8
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	621a      	str	r2, [r3, #32]
}
 800b71c:	46c0      	nop			@ (mov r8, r8)
 800b71e:	46bd      	mov	sp, r7
 800b720:	b006      	add	sp, #24
 800b722:	bd80      	pop	{r7, pc}
 800b724:	fffeffff 	.word	0xfffeffff
 800b728:	fffeff8f 	.word	0xfffeff8f
 800b72c:	fffdffff 	.word	0xfffdffff
 800b730:	40012c00 	.word	0x40012c00
 800b734:	40014400 	.word	0x40014400
 800b738:	40014800 	.word	0x40014800

0800b73c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	4a22      	ldr	r2, [pc, #136]	@ (800b7dc <TIM_OC6_SetConfig+0xa0>)
 800b752:	401a      	ands	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4a1e      	ldr	r2, [pc, #120]	@ (800b7e0 <TIM_OC6_SetConfig+0xa4>)
 800b768:	4013      	ands	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	021b      	lsls	r3, r3, #8
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	4313      	orrs	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	4a1a      	ldr	r2, [pc, #104]	@ (800b7e4 <TIM_OC6_SetConfig+0xa8>)
 800b77c:	4013      	ands	r3, r2
 800b77e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	051b      	lsls	r3, r3, #20
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	4313      	orrs	r3, r2
 800b78a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a16      	ldr	r2, [pc, #88]	@ (800b7e8 <TIM_OC6_SetConfig+0xac>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d007      	beq.n	800b7a4 <TIM_OC6_SetConfig+0x68>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a15      	ldr	r2, [pc, #84]	@ (800b7ec <TIM_OC6_SetConfig+0xb0>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d003      	beq.n	800b7a4 <TIM_OC6_SetConfig+0x68>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a14      	ldr	r2, [pc, #80]	@ (800b7f0 <TIM_OC6_SetConfig+0xb4>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d109      	bne.n	800b7b8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	4a13      	ldr	r2, [pc, #76]	@ (800b7f4 <TIM_OC6_SetConfig+0xb8>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	029b      	lsls	r3, r3, #10
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	621a      	str	r2, [r3, #32]
}
 800b7d2:	46c0      	nop			@ (mov r8, r8)
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	b006      	add	sp, #24
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	46c0      	nop			@ (mov r8, r8)
 800b7dc:	ffefffff 	.word	0xffefffff
 800b7e0:	feff8fff 	.word	0xfeff8fff
 800b7e4:	ffdfffff 	.word	0xffdfffff
 800b7e8:	40012c00 	.word	0x40012c00
 800b7ec:	40014400 	.word	0x40014400
 800b7f0:	40014800 	.word	0x40014800
 800b7f4:	fffbffff 	.word	0xfffbffff

0800b7f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6a1b      	ldr	r3, [r3, #32]
 800b810:	2201      	movs	r2, #1
 800b812:	4393      	bics	r3, r2
 800b814:	001a      	movs	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4a1e      	ldr	r2, [pc, #120]	@ (800b89c <TIM_TI1_SetConfig+0xa4>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d008      	beq.n	800b83a <TIM_TI1_SetConfig+0x42>
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	2380      	movs	r3, #128	@ 0x80
 800b82c:	05db      	lsls	r3, r3, #23
 800b82e:	429a      	cmp	r2, r3
 800b830:	d003      	beq.n	800b83a <TIM_TI1_SetConfig+0x42>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	4a1a      	ldr	r2, [pc, #104]	@ (800b8a0 <TIM_TI1_SetConfig+0xa8>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d101      	bne.n	800b83e <TIM_TI1_SetConfig+0x46>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e000      	b.n	800b840 <TIM_TI1_SetConfig+0x48>
 800b83e:	2300      	movs	r3, #0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d008      	beq.n	800b856 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	2203      	movs	r2, #3
 800b848:	4393      	bics	r3, r2
 800b84a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4313      	orrs	r3, r2
 800b852:	617b      	str	r3, [r7, #20]
 800b854:	e003      	b.n	800b85e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2201      	movs	r2, #1
 800b85a:	4313      	orrs	r3, r2
 800b85c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	22f0      	movs	r2, #240	@ 0xf0
 800b862:	4393      	bics	r3, r2
 800b864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	011b      	lsls	r3, r3, #4
 800b86a:	22ff      	movs	r2, #255	@ 0xff
 800b86c:	4013      	ands	r3, r2
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	4313      	orrs	r3, r2
 800b872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	220a      	movs	r2, #10
 800b878:	4393      	bics	r3, r2
 800b87a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	220a      	movs	r2, #10
 800b880:	4013      	ands	r3, r2
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	4313      	orrs	r3, r2
 800b886:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	621a      	str	r2, [r3, #32]
}
 800b894:	46c0      	nop			@ (mov r8, r8)
 800b896:	46bd      	mov	sp, r7
 800b898:	b006      	add	sp, #24
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	40012c00 	.word	0x40012c00
 800b8a0:	40000400 	.word	0x40000400

0800b8a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	4393      	bics	r3, r2
 800b8be:	001a      	movs	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	22f0      	movs	r2, #240	@ 0xf0
 800b8ce:	4393      	bics	r3, r2
 800b8d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	011b      	lsls	r3, r3, #4
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	220a      	movs	r2, #10
 800b8e0:	4393      	bics	r3, r2
 800b8e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8e4:	697a      	ldr	r2, [r7, #20]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	621a      	str	r2, [r3, #32]
}
 800b8f8:	46c0      	nop			@ (mov r8, r8)
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	b006      	add	sp, #24
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6a1b      	ldr	r3, [r3, #32]
 800b918:	2210      	movs	r2, #16
 800b91a:	4393      	bics	r3, r2
 800b91c:	001a      	movs	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	4a14      	ldr	r2, [pc, #80]	@ (800b97c <TIM_TI2_SetConfig+0x7c>)
 800b92c:	4013      	ands	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	021b      	lsls	r3, r3, #8
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	4313      	orrs	r3, r2
 800b938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	4a10      	ldr	r2, [pc, #64]	@ (800b980 <TIM_TI2_SetConfig+0x80>)
 800b93e:	4013      	ands	r3, r2
 800b940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	031b      	lsls	r3, r3, #12
 800b946:	041b      	lsls	r3, r3, #16
 800b948:	0c1b      	lsrs	r3, r3, #16
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	22a0      	movs	r2, #160	@ 0xa0
 800b954:	4393      	bics	r3, r2
 800b956:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	011b      	lsls	r3, r3, #4
 800b95c:	22a0      	movs	r2, #160	@ 0xa0
 800b95e:	4013      	ands	r3, r2
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	4313      	orrs	r3, r2
 800b964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	621a      	str	r2, [r3, #32]
}
 800b972:	46c0      	nop			@ (mov r8, r8)
 800b974:	46bd      	mov	sp, r7
 800b976:	b006      	add	sp, #24
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	46c0      	nop			@ (mov r8, r8)
 800b97c:	fffffcff 	.word	0xfffffcff
 800b980:	ffff0fff 	.word	0xffff0fff

0800b984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6a1b      	ldr	r3, [r3, #32]
 800b994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	2210      	movs	r2, #16
 800b99c:	4393      	bics	r3, r2
 800b99e:	001a      	movs	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	4a0d      	ldr	r2, [pc, #52]	@ (800b9e4 <TIM_TI2_ConfigInputStage+0x60>)
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	031b      	lsls	r3, r3, #12
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	22a0      	movs	r2, #160	@ 0xa0
 800b9c0:	4393      	bics	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	011b      	lsls	r3, r3, #4
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	621a      	str	r2, [r3, #32]
}
 800b9da:	46c0      	nop			@ (mov r8, r8)
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	b006      	add	sp, #24
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	46c0      	nop			@ (mov r8, r8)
 800b9e4:	ffff0fff 	.word	0xffff0fff

0800b9e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	4a17      	ldr	r2, [pc, #92]	@ (800ba60 <TIM_TI3_SetConfig+0x78>)
 800ba02:	401a      	ands	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	69db      	ldr	r3, [r3, #28]
 800ba0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	2203      	movs	r2, #3
 800ba12:	4393      	bics	r3, r2
 800ba14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	22f0      	movs	r2, #240	@ 0xf0
 800ba22:	4393      	bics	r3, r2
 800ba24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	011b      	lsls	r3, r3, #4
 800ba2a:	22ff      	movs	r2, #255	@ 0xff
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	4a0b      	ldr	r2, [pc, #44]	@ (800ba64 <TIM_TI3_SetConfig+0x7c>)
 800ba38:	4013      	ands	r3, r2
 800ba3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	021a      	lsls	r2, r3, #8
 800ba40:	23a0      	movs	r3, #160	@ 0xa0
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	4013      	ands	r3, r2
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	621a      	str	r2, [r3, #32]
}
 800ba58:	46c0      	nop			@ (mov r8, r8)
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	b006      	add	sp, #24
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	fffffeff 	.word	0xfffffeff
 800ba64:	fffff5ff 	.word	0xfffff5ff

0800ba68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6a1b      	ldr	r3, [r3, #32]
 800ba80:	4a18      	ldr	r2, [pc, #96]	@ (800bae4 <TIM_TI4_SetConfig+0x7c>)
 800ba82:	401a      	ands	r2, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	69db      	ldr	r3, [r3, #28]
 800ba8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	4a15      	ldr	r2, [pc, #84]	@ (800bae8 <TIM_TI4_SetConfig+0x80>)
 800ba92:	4013      	ands	r3, r2
 800ba94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	4a12      	ldr	r2, [pc, #72]	@ (800baec <TIM_TI4_SetConfig+0x84>)
 800baa4:	4013      	ands	r3, r2
 800baa6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	031b      	lsls	r3, r3, #12
 800baac:	041b      	lsls	r3, r3, #16
 800baae:	0c1b      	lsrs	r3, r3, #16
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	4a0d      	ldr	r2, [pc, #52]	@ (800baf0 <TIM_TI4_SetConfig+0x88>)
 800baba:	4013      	ands	r3, r2
 800babc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	031a      	lsls	r2, r3, #12
 800bac2:	23a0      	movs	r3, #160	@ 0xa0
 800bac4:	021b      	lsls	r3, r3, #8
 800bac6:	4013      	ands	r3, r2
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	4313      	orrs	r3, r2
 800bacc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	621a      	str	r2, [r3, #32]
}
 800bada:	46c0      	nop			@ (mov r8, r8)
 800badc:	46bd      	mov	sp, r7
 800bade:	b006      	add	sp, #24
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	46c0      	nop			@ (mov r8, r8)
 800bae4:	ffffefff 	.word	0xffffefff
 800bae8:	fffffcff 	.word	0xfffffcff
 800baec:	ffff0fff 	.word	0xffff0fff
 800baf0:	ffff5fff 	.word	0xffff5fff

0800baf4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4a08      	ldr	r2, [pc, #32]	@ (800bb28 <TIM_ITRx_SetConfig+0x34>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	2207      	movs	r2, #7
 800bb14:	4313      	orrs	r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	609a      	str	r2, [r3, #8]
}
 800bb1e:	46c0      	nop			@ (mov r8, r8)
 800bb20:	46bd      	mov	sp, r7
 800bb22:	b004      	add	sp, #16
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	46c0      	nop			@ (mov r8, r8)
 800bb28:	ffcfff8f 	.word	0xffcfff8f

0800bb2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	4a09      	ldr	r2, [pc, #36]	@ (800bb68 <TIM_ETR_SetConfig+0x3c>)
 800bb44:	4013      	ands	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	021a      	lsls	r2, r3, #8
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	697a      	ldr	r2, [r7, #20]
 800bb5e:	609a      	str	r2, [r3, #8]
}
 800bb60:	46c0      	nop			@ (mov r8, r8)
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b006      	add	sp, #24
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	ffff00ff 	.word	0xffff00ff

0800bb6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	221f      	movs	r2, #31
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	2201      	movs	r2, #1
 800bb80:	409a      	lsls	r2, r3
 800bb82:	0013      	movs	r3, r2
 800bb84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	43d2      	mvns	r2, r2
 800bb8e:	401a      	ands	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6a1a      	ldr	r2, [r3, #32]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	211f      	movs	r1, #31
 800bb9c:	400b      	ands	r3, r1
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	4099      	lsls	r1, r3
 800bba2:	000b      	movs	r3, r1
 800bba4:	431a      	orrs	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	621a      	str	r2, [r3, #32]
}
 800bbaa:	46c0      	nop			@ (mov r8, r8)
 800bbac:	46bd      	mov	sp, r7
 800bbae:	b006      	add	sp, #24
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2184      	movs	r1, #132	@ 0x84
 800bbc0:	4a1c      	ldr	r2, [pc, #112]	@ (800bc34 <TIM_ResetCallback+0x80>)
 800bbc2:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2188      	movs	r1, #136	@ 0x88
 800bbc8:	4a1b      	ldr	r2, [pc, #108]	@ (800bc38 <TIM_ResetCallback+0x84>)
 800bbca:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	218c      	movs	r1, #140	@ 0x8c
 800bbd0:	4a1a      	ldr	r2, [pc, #104]	@ (800bc3c <TIM_ResetCallback+0x88>)
 800bbd2:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2190      	movs	r1, #144	@ 0x90
 800bbd8:	4a19      	ldr	r2, [pc, #100]	@ (800bc40 <TIM_ResetCallback+0x8c>)
 800bbda:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2194      	movs	r1, #148	@ 0x94
 800bbe0:	4a18      	ldr	r2, [pc, #96]	@ (800bc44 <TIM_ResetCallback+0x90>)
 800bbe2:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2198      	movs	r1, #152	@ 0x98
 800bbe8:	4a17      	ldr	r2, [pc, #92]	@ (800bc48 <TIM_ResetCallback+0x94>)
 800bbea:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	219c      	movs	r1, #156	@ 0x9c
 800bbf0:	4a16      	ldr	r2, [pc, #88]	@ (800bc4c <TIM_ResetCallback+0x98>)
 800bbf2:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	21a0      	movs	r1, #160	@ 0xa0
 800bbf8:	4a15      	ldr	r2, [pc, #84]	@ (800bc50 <TIM_ResetCallback+0x9c>)
 800bbfa:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	21a4      	movs	r1, #164	@ 0xa4
 800bc00:	4a14      	ldr	r2, [pc, #80]	@ (800bc54 <TIM_ResetCallback+0xa0>)
 800bc02:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	21a8      	movs	r1, #168	@ 0xa8
 800bc08:	4a13      	ldr	r2, [pc, #76]	@ (800bc58 <TIM_ResetCallback+0xa4>)
 800bc0a:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	21ac      	movs	r1, #172	@ 0xac
 800bc10:	4a12      	ldr	r2, [pc, #72]	@ (800bc5c <TIM_ResetCallback+0xa8>)
 800bc12:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	21b0      	movs	r1, #176	@ 0xb0
 800bc18:	4a11      	ldr	r2, [pc, #68]	@ (800bc60 <TIM_ResetCallback+0xac>)
 800bc1a:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	21b4      	movs	r1, #180	@ 0xb4
 800bc20:	4a10      	ldr	r2, [pc, #64]	@ (800bc64 <TIM_ResetCallback+0xb0>)
 800bc22:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	21b8      	movs	r1, #184	@ 0xb8
 800bc28:	4a0f      	ldr	r2, [pc, #60]	@ (800bc68 <TIM_ResetCallback+0xb4>)
 800bc2a:	505a      	str	r2, [r3, r1]
}
 800bc2c:	46c0      	nop			@ (mov r8, r8)
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	b002      	add	sp, #8
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	0800af0d 	.word	0x0800af0d
 800bc38:	0800af1d 	.word	0x0800af1d
 800bc3c:	0800af7d 	.word	0x0800af7d
 800bc40:	0800af8d 	.word	0x0800af8d
 800bc44:	0800af3d 	.word	0x0800af3d
 800bc48:	0800af4d 	.word	0x0800af4d
 800bc4c:	0800af2d 	.word	0x0800af2d
 800bc50:	0800af5d 	.word	0x0800af5d
 800bc54:	0800af6d 	.word	0x0800af6d
 800bc58:	0800af9d 	.word	0x0800af9d
 800bc5c:	0800be75 	.word	0x0800be75
 800bc60:	0800be85 	.word	0x0800be85
 800bc64:	0800be95 	.word	0x0800be95
 800bc68:	0800bea5 	.word	0x0800bea5

0800bc6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	223c      	movs	r2, #60	@ 0x3c
 800bc7a:	5c9b      	ldrb	r3, [r3, r2]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d101      	bne.n	800bc84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc80:	2302      	movs	r3, #2
 800bc82:	e050      	b.n	800bd26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	223c      	movs	r2, #60	@ 0x3c
 800bc88:	2101      	movs	r1, #1
 800bc8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	223d      	movs	r2, #61	@ 0x3d
 800bc90:	2102      	movs	r1, #2
 800bc92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a21      	ldr	r2, [pc, #132]	@ (800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d108      	bne.n	800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4a20      	ldr	r2, [pc, #128]	@ (800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2270      	movs	r2, #112	@ 0x70
 800bcc4:	4393      	bics	r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a14      	ldr	r2, [pc, #80]	@ (800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d00a      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	2380      	movs	r3, #128	@ 0x80
 800bcea:	05db      	lsls	r3, r3, #23
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d004      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a10      	ldr	r2, [pc, #64]	@ (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d10c      	bne.n	800bd14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	2280      	movs	r2, #128	@ 0x80
 800bcfe:	4393      	bics	r3, r2
 800bd00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	223d      	movs	r2, #61	@ 0x3d
 800bd18:	2101      	movs	r1, #1
 800bd1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	223c      	movs	r2, #60	@ 0x3c
 800bd20:	2100      	movs	r1, #0
 800bd22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	0018      	movs	r0, r3
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	b004      	add	sp, #16
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	40012c00 	.word	0x40012c00
 800bd34:	ff0fffff 	.word	0xff0fffff
 800bd38:	40000400 	.word	0x40000400

0800bd3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	223c      	movs	r2, #60	@ 0x3c
 800bd4e:	5c9b      	ldrb	r3, [r3, r2]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d101      	bne.n	800bd58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd54:	2302      	movs	r3, #2
 800bd56:	e06f      	b.n	800be38 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	223c      	movs	r2, #60	@ 0x3c
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	22ff      	movs	r2, #255	@ 0xff
 800bd64:	4393      	bics	r3, r2
 800bd66:	001a      	movs	r2, r3
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4a33      	ldr	r2, [pc, #204]	@ (800be40 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800bd74:	401a      	ands	r2, r3
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4a30      	ldr	r2, [pc, #192]	@ (800be44 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800bd82:	401a      	ands	r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4a2e      	ldr	r2, [pc, #184]	@ (800be48 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800bd90:	401a      	ands	r2, r3
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4a2b      	ldr	r2, [pc, #172]	@ (800be4c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800bd9e:	401a      	ands	r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	4a29      	ldr	r2, [pc, #164]	@ (800be50 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800bdac:	401a      	ands	r2, r3
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	4a26      	ldr	r2, [pc, #152]	@ (800be54 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800bdba:	401a      	ands	r2, r3
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4a24      	ldr	r2, [pc, #144]	@ (800be58 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bdc8:	401a      	ands	r2, r3
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	041b      	lsls	r3, r3, #16
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4a21      	ldr	r2, [pc, #132]	@ (800be5c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bdd8:	401a      	ands	r2, r3
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a1e      	ldr	r2, [pc, #120]	@ (800be60 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d11c      	bne.n	800be26 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4a1d      	ldr	r2, [pc, #116]	@ (800be64 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800bdf0:	401a      	ands	r2, r3
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf6:	051b      	lsls	r3, r3, #20
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4a1a      	ldr	r2, [pc, #104]	@ (800be68 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800be00:	401a      	ands	r2, r3
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	6a1b      	ldr	r3, [r3, #32]
 800be06:	4313      	orrs	r3, r2
 800be08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	4a17      	ldr	r2, [pc, #92]	@ (800be6c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800be0e:	401a      	ands	r2, r3
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be14:	4313      	orrs	r3, r2
 800be16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	4a15      	ldr	r2, [pc, #84]	@ (800be70 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800be1c:	401a      	ands	r2, r3
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be22:	4313      	orrs	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	223c      	movs	r2, #60	@ 0x3c
 800be32:	2100      	movs	r1, #0
 800be34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	0018      	movs	r0, r3
 800be3a:	46bd      	mov	sp, r7
 800be3c:	b004      	add	sp, #16
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	fffffcff 	.word	0xfffffcff
 800be44:	fffffbff 	.word	0xfffffbff
 800be48:	fffff7ff 	.word	0xfffff7ff
 800be4c:	ffffefff 	.word	0xffffefff
 800be50:	ffffdfff 	.word	0xffffdfff
 800be54:	ffffbfff 	.word	0xffffbfff
 800be58:	fff0ffff 	.word	0xfff0ffff
 800be5c:	efffffff 	.word	0xefffffff
 800be60:	40012c00 	.word	0x40012c00
 800be64:	ff0fffff 	.word	0xff0fffff
 800be68:	feffffff 	.word	0xfeffffff
 800be6c:	fdffffff 	.word	0xfdffffff
 800be70:	dfffffff 	.word	0xdfffffff

0800be74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be7c:	46c0      	nop			@ (mov r8, r8)
 800be7e:	46bd      	mov	sp, r7
 800be80:	b002      	add	sp, #8
 800be82:	bd80      	pop	{r7, pc}

0800be84 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800be8c:	46c0      	nop			@ (mov r8, r8)
 800be8e:	46bd      	mov	sp, r7
 800be90:	b002      	add	sp, #8
 800be92:	bd80      	pop	{r7, pc}

0800be94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be9c:	46c0      	nop			@ (mov r8, r8)
 800be9e:	46bd      	mov	sp, r7
 800bea0:	b002      	add	sp, #8
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800beac:	46c0      	nop			@ (mov r8, r8)
 800beae:	46bd      	mov	sp, r7
 800beb0:	b002      	add	sp, #8
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e055      	b.n	800bf72 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2288      	movs	r2, #136	@ 0x88
 800beca:	589b      	ldr	r3, [r3, r2]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d116      	bne.n	800befe <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2284      	movs	r2, #132	@ 0x84
 800bed4:	2100      	movs	r1, #0
 800bed6:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	0018      	movs	r0, r3
 800bedc:	f000 fce0 	bl	800c8a0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	22c4      	movs	r2, #196	@ 0xc4
 800bee4:	589b      	ldr	r3, [r3, r2]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d103      	bne.n	800bef2 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	21c4      	movs	r1, #196	@ 0xc4
 800beee:	4a23      	ldr	r2, [pc, #140]	@ (800bf7c <HAL_UART_Init+0xc8>)
 800bef0:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	22c4      	movs	r2, #196	@ 0xc4
 800bef6:	589b      	ldr	r3, [r3, r2]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	0010      	movs	r0, r2
 800befc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2288      	movs	r2, #136	@ 0x88
 800bf02:	2124      	movs	r1, #36	@ 0x24
 800bf04:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2101      	movs	r1, #1
 800bf12:	438a      	bics	r2, r1
 800bf14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	0018      	movs	r0, r3
 800bf22:	f000 ff85 	bl	800ce30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	0018      	movs	r0, r3
 800bf2a:	f000 fd09 	bl	800c940 <UART_SetConfig>
 800bf2e:	0003      	movs	r3, r0
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d101      	bne.n	800bf38 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e01c      	b.n	800bf72 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	490f      	ldr	r1, [pc, #60]	@ (800bf80 <HAL_UART_Init+0xcc>)
 800bf44:	400a      	ands	r2, r1
 800bf46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689a      	ldr	r2, [r3, #8]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	212a      	movs	r1, #42	@ 0x2a
 800bf54:	438a      	bics	r2, r1
 800bf56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2101      	movs	r1, #1
 800bf64:	430a      	orrs	r2, r1
 800bf66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	f001 f814 	bl	800cf98 <UART_CheckIdleState>
 800bf70:	0003      	movs	r3, r0
}
 800bf72:	0018      	movs	r0, r3
 800bf74:	46bd      	mov	sp, r7
 800bf76:	b002      	add	sp, #8
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	46c0      	nop			@ (mov r8, r8)
 800bf7c:	080056d1 	.word	0x080056d1
 800bf80:	ffffb7ff 	.word	0xffffb7ff

0800bf84 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	607a      	str	r2, [r7, #4]
 800bf8e:	230b      	movs	r3, #11
 800bf90:	18fb      	adds	r3, r7, r3
 800bf92:	1c0a      	adds	r2, r1, #0
 800bf94:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf96:	2317      	movs	r3, #23
 800bf98:	18fb      	adds	r3, r7, r3
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d109      	bne.n	800bfb8 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2290      	movs	r2, #144	@ 0x90
 800bfa8:	589b      	ldr	r3, [r3, r2]
 800bfaa:	2240      	movs	r2, #64	@ 0x40
 800bfac:	431a      	orrs	r2, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2190      	movs	r1, #144	@ 0x90
 800bfb2:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e08f      	b.n	800c0d8 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2288      	movs	r2, #136	@ 0x88
 800bfbc:	589b      	ldr	r3, [r3, r2]
 800bfbe:	2b20      	cmp	r3, #32
 800bfc0:	d157      	bne.n	800c072 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800bfc2:	230b      	movs	r3, #11
 800bfc4:	18fb      	adds	r3, r7, r3
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	2b0c      	cmp	r3, #12
 800bfca:	d845      	bhi.n	800c058 <HAL_UART_RegisterCallback+0xd4>
 800bfcc:	009a      	lsls	r2, r3, #2
 800bfce:	4b44      	ldr	r3, [pc, #272]	@ (800c0e0 <HAL_UART_RegisterCallback+0x15c>)
 800bfd0:	18d3      	adds	r3, r2, r3
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2194      	movs	r1, #148	@ 0x94
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	505a      	str	r2, [r3, r1]
        break;
 800bfde:	e078      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2198      	movs	r1, #152	@ 0x98
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	505a      	str	r2, [r3, r1]
        break;
 800bfe8:	e073      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	219c      	movs	r1, #156	@ 0x9c
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	505a      	str	r2, [r3, r1]
        break;
 800bff2:	e06e      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	21a0      	movs	r1, #160	@ 0xa0
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	505a      	str	r2, [r3, r1]
        break;
 800bffc:	e069      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	21a4      	movs	r1, #164	@ 0xa4
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	505a      	str	r2, [r3, r1]
        break;
 800c006:	e064      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	21a8      	movs	r1, #168	@ 0xa8
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	505a      	str	r2, [r3, r1]
        break;
 800c010:	e05f      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	21ac      	movs	r1, #172	@ 0xac
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	505a      	str	r2, [r3, r1]
        break;
 800c01a:	e05a      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	21b0      	movs	r1, #176	@ 0xb0
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	505a      	str	r2, [r3, r1]
        break;
 800c024:	e055      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	21b4      	movs	r1, #180	@ 0xb4
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	505a      	str	r2, [r3, r1]
        break;
 800c02e:	e050      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	21b8      	movs	r1, #184	@ 0xb8
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	505a      	str	r2, [r3, r1]
        break;
 800c038:	e04b      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	21bc      	movs	r1, #188	@ 0xbc
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	505a      	str	r2, [r3, r1]
        break;
 800c042:	e046      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	21c4      	movs	r1, #196	@ 0xc4
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	505a      	str	r2, [r3, r1]
        break;
 800c04c:	e041      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	21c8      	movs	r1, #200	@ 0xc8
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	505a      	str	r2, [r3, r1]
        break;
 800c056:	e03c      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2290      	movs	r2, #144	@ 0x90
 800c05c:	589b      	ldr	r3, [r3, r2]
 800c05e:	2240      	movs	r2, #64	@ 0x40
 800c060:	431a      	orrs	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2190      	movs	r1, #144	@ 0x90
 800c066:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800c068:	2317      	movs	r3, #23
 800c06a:	18fb      	adds	r3, r7, r3
 800c06c:	2201      	movs	r2, #1
 800c06e:	701a      	strb	r2, [r3, #0]
        break;
 800c070:	e02f      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2288      	movs	r2, #136	@ 0x88
 800c076:	589b      	ldr	r3, [r3, r2]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d11e      	bne.n	800c0ba <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800c07c:	230b      	movs	r3, #11
 800c07e:	18fb      	adds	r3, r7, r3
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b0b      	cmp	r3, #11
 800c084:	d002      	beq.n	800c08c <HAL_UART_RegisterCallback+0x108>
 800c086:	2b0c      	cmp	r3, #12
 800c088:	d005      	beq.n	800c096 <HAL_UART_RegisterCallback+0x112>
 800c08a:	e009      	b.n	800c0a0 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	21c4      	movs	r1, #196	@ 0xc4
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	505a      	str	r2, [r3, r1]
        break;
 800c094:	e01d      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	21c8      	movs	r1, #200	@ 0xc8
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	505a      	str	r2, [r3, r1]
        break;
 800c09e:	e018      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2290      	movs	r2, #144	@ 0x90
 800c0a4:	589b      	ldr	r3, [r3, r2]
 800c0a6:	2240      	movs	r2, #64	@ 0x40
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2190      	movs	r1, #144	@ 0x90
 800c0ae:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800c0b0:	2317      	movs	r3, #23
 800c0b2:	18fb      	adds	r3, r7, r3
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	701a      	strb	r2, [r3, #0]
        break;
 800c0b8:	e00b      	b.n	800c0d2 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2290      	movs	r2, #144	@ 0x90
 800c0be:	589b      	ldr	r3, [r3, r2]
 800c0c0:	2240      	movs	r2, #64	@ 0x40
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2190      	movs	r1, #144	@ 0x90
 800c0c8:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800c0ca:	2317      	movs	r3, #23
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c0d2:	2317      	movs	r3, #23
 800c0d4:	18fb      	adds	r3, r7, r3
 800c0d6:	781b      	ldrb	r3, [r3, #0]
}
 800c0d8:	0018      	movs	r0, r3
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	b006      	add	sp, #24
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	0800e1e8 	.word	0x0800e1e8

0800c0e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	1dbb      	adds	r3, r7, #6
 800c0f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	228c      	movs	r2, #140	@ 0x8c
 800c0f6:	589b      	ldr	r3, [r3, r2]
 800c0f8:	2b20      	cmp	r3, #32
 800c0fa:	d14a      	bne.n	800c192 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <HAL_UART_Receive_DMA+0x26>
 800c102:	1dbb      	adds	r3, r7, #6
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e042      	b.n	800c194 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	689a      	ldr	r2, [r3, #8]
 800c112:	2380      	movs	r3, #128	@ 0x80
 800c114:	015b      	lsls	r3, r3, #5
 800c116:	429a      	cmp	r2, r3
 800c118:	d109      	bne.n	800c12e <HAL_UART_Receive_DMA+0x4a>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d105      	bne.n	800c12e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	2201      	movs	r2, #1
 800c126:	4013      	ands	r3, r2
 800c128:	d001      	beq.n	800c12e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e032      	b.n	800c194 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a18      	ldr	r2, [pc, #96]	@ (800c19c <HAL_UART_Receive_DMA+0xb8>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d020      	beq.n	800c180 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	2380      	movs	r3, #128	@ 0x80
 800c146:	041b      	lsls	r3, r3, #16
 800c148:	4013      	ands	r3, r2
 800c14a:	d019      	beq.n	800c180 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c14c:	f3ef 8310 	mrs	r3, PRIMASK
 800c150:	613b      	str	r3, [r7, #16]
  return(result);
 800c152:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c154:	61fb      	str	r3, [r7, #28]
 800c156:	2301      	movs	r3, #1
 800c158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f383 8810 	msr	PRIMASK, r3
}
 800c160:	46c0      	nop			@ (mov r8, r8)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2180      	movs	r1, #128	@ 0x80
 800c16e:	04c9      	lsls	r1, r1, #19
 800c170:	430a      	orrs	r2, r1
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	f383 8810 	msr	PRIMASK, r3
}
 800c17e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c180:	1dbb      	adds	r3, r7, #6
 800c182:	881a      	ldrh	r2, [r3, #0]
 800c184:	68b9      	ldr	r1, [r7, #8]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	0018      	movs	r0, r3
 800c18a:	f001 f81f 	bl	800d1cc <UART_Start_Receive_DMA>
 800c18e:	0003      	movs	r3, r0
 800c190:	e000      	b.n	800c194 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c192:	2302      	movs	r3, #2
  }
}
 800c194:	0018      	movs	r0, r3
 800c196:	46bd      	mov	sp, r7
 800c198:	b008      	add	sp, #32
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	40008000 	.word	0x40008000

0800c1a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1a0:	b5b0      	push	{r4, r5, r7, lr}
 800c1a2:	b0aa      	sub	sp, #168	@ 0xa8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	22a4      	movs	r2, #164	@ 0xa4
 800c1b0:	18b9      	adds	r1, r7, r2
 800c1b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	20a0      	movs	r0, #160	@ 0xa0
 800c1bc:	1839      	adds	r1, r7, r0
 800c1be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	249c      	movs	r4, #156	@ 0x9c
 800c1c8:	1939      	adds	r1, r7, r4
 800c1ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c1cc:	0011      	movs	r1, r2
 800c1ce:	18bb      	adds	r3, r7, r2
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4aa5      	ldr	r2, [pc, #660]	@ (800c468 <HAL_UART_IRQHandler+0x2c8>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	2298      	movs	r2, #152	@ 0x98
 800c1d8:	18bd      	adds	r5, r7, r2
 800c1da:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800c1dc:	18bb      	adds	r3, r7, r2
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d11a      	bne.n	800c21a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1e4:	187b      	adds	r3, r7, r1
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	d015      	beq.n	800c21a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1ee:	183b      	adds	r3, r7, r0
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	d105      	bne.n	800c204 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1f8:	193b      	adds	r3, r7, r4
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	2380      	movs	r3, #128	@ 0x80
 800c1fe:	055b      	lsls	r3, r3, #21
 800c200:	4013      	ands	r3, r2
 800c202:	d00a      	beq.n	800c21a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d100      	bne.n	800c20e <HAL_UART_IRQHandler+0x6e>
 800c20c:	e2ea      	b.n	800c7e4 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	0010      	movs	r0, r2
 800c216:	4798      	blx	r3
      }
      return;
 800c218:	e2e4      	b.n	800c7e4 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c21a:	2398      	movs	r3, #152	@ 0x98
 800c21c:	18fb      	adds	r3, r7, r3
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d100      	bne.n	800c226 <HAL_UART_IRQHandler+0x86>
 800c224:	e128      	b.n	800c478 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c226:	239c      	movs	r3, #156	@ 0x9c
 800c228:	18fb      	adds	r3, r7, r3
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a8f      	ldr	r2, [pc, #572]	@ (800c46c <HAL_UART_IRQHandler+0x2cc>)
 800c22e:	4013      	ands	r3, r2
 800c230:	d106      	bne.n	800c240 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c232:	23a0      	movs	r3, #160	@ 0xa0
 800c234:	18fb      	adds	r3, r7, r3
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a8d      	ldr	r2, [pc, #564]	@ (800c470 <HAL_UART_IRQHandler+0x2d0>)
 800c23a:	4013      	ands	r3, r2
 800c23c:	d100      	bne.n	800c240 <HAL_UART_IRQHandler+0xa0>
 800c23e:	e11b      	b.n	800c478 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c240:	23a4      	movs	r3, #164	@ 0xa4
 800c242:	18fb      	adds	r3, r7, r3
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2201      	movs	r2, #1
 800c248:	4013      	ands	r3, r2
 800c24a:	d012      	beq.n	800c272 <HAL_UART_IRQHandler+0xd2>
 800c24c:	23a0      	movs	r3, #160	@ 0xa0
 800c24e:	18fb      	adds	r3, r7, r3
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	2380      	movs	r3, #128	@ 0x80
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	4013      	ands	r3, r2
 800c258:	d00b      	beq.n	800c272 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2201      	movs	r2, #1
 800c260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2290      	movs	r2, #144	@ 0x90
 800c266:	589b      	ldr	r3, [r3, r2]
 800c268:	2201      	movs	r2, #1
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2190      	movs	r1, #144	@ 0x90
 800c270:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c272:	23a4      	movs	r3, #164	@ 0xa4
 800c274:	18fb      	adds	r3, r7, r3
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2202      	movs	r2, #2
 800c27a:	4013      	ands	r3, r2
 800c27c:	d011      	beq.n	800c2a2 <HAL_UART_IRQHandler+0x102>
 800c27e:	239c      	movs	r3, #156	@ 0x9c
 800c280:	18fb      	adds	r3, r7, r3
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2201      	movs	r2, #1
 800c286:	4013      	ands	r3, r2
 800c288:	d00b      	beq.n	800c2a2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2202      	movs	r2, #2
 800c290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2290      	movs	r2, #144	@ 0x90
 800c296:	589b      	ldr	r3, [r3, r2]
 800c298:	2204      	movs	r2, #4
 800c29a:	431a      	orrs	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2190      	movs	r1, #144	@ 0x90
 800c2a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2a2:	23a4      	movs	r3, #164	@ 0xa4
 800c2a4:	18fb      	adds	r3, r7, r3
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2204      	movs	r2, #4
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	d011      	beq.n	800c2d2 <HAL_UART_IRQHandler+0x132>
 800c2ae:	239c      	movs	r3, #156	@ 0x9c
 800c2b0:	18fb      	adds	r3, r7, r3
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	d00b      	beq.n	800c2d2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2204      	movs	r2, #4
 800c2c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2290      	movs	r2, #144	@ 0x90
 800c2c6:	589b      	ldr	r3, [r3, r2]
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	431a      	orrs	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2190      	movs	r1, #144	@ 0x90
 800c2d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c2d2:	23a4      	movs	r3, #164	@ 0xa4
 800c2d4:	18fb      	adds	r3, r7, r3
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2208      	movs	r2, #8
 800c2da:	4013      	ands	r3, r2
 800c2dc:	d017      	beq.n	800c30e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2de:	23a0      	movs	r3, #160	@ 0xa0
 800c2e0:	18fb      	adds	r3, r7, r3
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	d105      	bne.n	800c2f6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c2ea:	239c      	movs	r3, #156	@ 0x9c
 800c2ec:	18fb      	adds	r3, r7, r3
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a5e      	ldr	r2, [pc, #376]	@ (800c46c <HAL_UART_IRQHandler+0x2cc>)
 800c2f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2f4:	d00b      	beq.n	800c30e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2290      	movs	r2, #144	@ 0x90
 800c302:	589b      	ldr	r3, [r3, r2]
 800c304:	2208      	movs	r2, #8
 800c306:	431a      	orrs	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2190      	movs	r1, #144	@ 0x90
 800c30c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c30e:	23a4      	movs	r3, #164	@ 0xa4
 800c310:	18fb      	adds	r3, r7, r3
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	2380      	movs	r3, #128	@ 0x80
 800c316:	011b      	lsls	r3, r3, #4
 800c318:	4013      	ands	r3, r2
 800c31a:	d013      	beq.n	800c344 <HAL_UART_IRQHandler+0x1a4>
 800c31c:	23a0      	movs	r3, #160	@ 0xa0
 800c31e:	18fb      	adds	r3, r7, r3
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	2380      	movs	r3, #128	@ 0x80
 800c324:	04db      	lsls	r3, r3, #19
 800c326:	4013      	ands	r3, r2
 800c328:	d00c      	beq.n	800c344 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2280      	movs	r2, #128	@ 0x80
 800c330:	0112      	lsls	r2, r2, #4
 800c332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2290      	movs	r2, #144	@ 0x90
 800c338:	589b      	ldr	r3, [r3, r2]
 800c33a:	2220      	movs	r2, #32
 800c33c:	431a      	orrs	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2190      	movs	r1, #144	@ 0x90
 800c342:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2290      	movs	r2, #144	@ 0x90
 800c348:	589b      	ldr	r3, [r3, r2]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d100      	bne.n	800c350 <HAL_UART_IRQHandler+0x1b0>
 800c34e:	e24b      	b.n	800c7e8 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c350:	23a4      	movs	r3, #164	@ 0xa4
 800c352:	18fb      	adds	r3, r7, r3
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2220      	movs	r2, #32
 800c358:	4013      	ands	r3, r2
 800c35a:	d015      	beq.n	800c388 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c35c:	23a0      	movs	r3, #160	@ 0xa0
 800c35e:	18fb      	adds	r3, r7, r3
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2220      	movs	r2, #32
 800c364:	4013      	ands	r3, r2
 800c366:	d106      	bne.n	800c376 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c368:	239c      	movs	r3, #156	@ 0x9c
 800c36a:	18fb      	adds	r3, r7, r3
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	2380      	movs	r3, #128	@ 0x80
 800c370:	055b      	lsls	r3, r3, #21
 800c372:	4013      	ands	r3, r2
 800c374:	d008      	beq.n	800c388 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d004      	beq.n	800c388 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	0010      	movs	r0, r2
 800c386:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2290      	movs	r2, #144	@ 0x90
 800c38c:	589b      	ldr	r3, [r3, r2]
 800c38e:	2194      	movs	r1, #148	@ 0x94
 800c390:	187a      	adds	r2, r7, r1
 800c392:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	2240      	movs	r2, #64	@ 0x40
 800c39c:	4013      	ands	r3, r2
 800c39e:	2b40      	cmp	r3, #64	@ 0x40
 800c3a0:	d004      	beq.n	800c3ac <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c3a2:	187b      	adds	r3, r7, r1
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2228      	movs	r2, #40	@ 0x28
 800c3a8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3aa:	d050      	beq.n	800c44e <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	0018      	movs	r0, r3
 800c3b0:	f000 fff2 	bl	800d398 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	2240      	movs	r2, #64	@ 0x40
 800c3bc:	4013      	ands	r3, r2
 800c3be:	2b40      	cmp	r3, #64	@ 0x40
 800c3c0:	d13e      	bne.n	800c440 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800c3c6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800c3c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ca:	2090      	movs	r0, #144	@ 0x90
 800c3cc:	183a      	adds	r2, r7, r0
 800c3ce:	6013      	str	r3, [r2, #0]
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3d6:	f383 8810 	msr	PRIMASK, r3
}
 800c3da:	46c0      	nop			@ (mov r8, r8)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	689a      	ldr	r2, [r3, #8]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2140      	movs	r1, #64	@ 0x40
 800c3e8:	438a      	bics	r2, r1
 800c3ea:	609a      	str	r2, [r3, #8]
 800c3ec:	183b      	adds	r3, r7, r0
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3f4:	f383 8810 	msr	PRIMASK, r3
}
 800c3f8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2280      	movs	r2, #128	@ 0x80
 800c3fe:	589b      	ldr	r3, [r3, r2]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d016      	beq.n	800c432 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2280      	movs	r2, #128	@ 0x80
 800c408:	589b      	ldr	r3, [r3, r2]
 800c40a:	4a1a      	ldr	r2, [pc, #104]	@ (800c474 <HAL_UART_IRQHandler+0x2d4>)
 800c40c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2280      	movs	r2, #128	@ 0x80
 800c412:	589b      	ldr	r3, [r3, r2]
 800c414:	0018      	movs	r0, r3
 800c416:	f7fb fce5 	bl	8007de4 <HAL_DMA_Abort_IT>
 800c41a:	1e03      	subs	r3, r0, #0
 800c41c:	d022      	beq.n	800c464 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2280      	movs	r2, #128	@ 0x80
 800c422:	589b      	ldr	r3, [r3, r2]
 800c424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	2180      	movs	r1, #128	@ 0x80
 800c42a:	5852      	ldr	r2, [r2, r1]
 800c42c:	0010      	movs	r0, r2
 800c42e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c430:	e018      	b.n	800c464 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	22a4      	movs	r2, #164	@ 0xa4
 800c436:	589b      	ldr	r3, [r3, r2]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	0010      	movs	r0, r2
 800c43c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c43e:	e011      	b.n	800c464 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	22a4      	movs	r2, #164	@ 0xa4
 800c444:	589b      	ldr	r3, [r3, r2]
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	0010      	movs	r0, r2
 800c44a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c44c:	e00a      	b.n	800c464 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	22a4      	movs	r2, #164	@ 0xa4
 800c452:	589b      	ldr	r3, [r3, r2]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	0010      	movs	r0, r2
 800c458:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2290      	movs	r2, #144	@ 0x90
 800c45e:	2100      	movs	r1, #0
 800c460:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c462:	e1c1      	b.n	800c7e8 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c464:	46c0      	nop			@ (mov r8, r8)
    return;
 800c466:	e1bf      	b.n	800c7e8 <HAL_UART_IRQHandler+0x648>
 800c468:	0000080f 	.word	0x0000080f
 800c46c:	10000001 	.word	0x10000001
 800c470:	04000120 	.word	0x04000120
 800c474:	0800d66b 	.word	0x0800d66b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d000      	beq.n	800c482 <HAL_UART_IRQHandler+0x2e2>
 800c480:	e140      	b.n	800c704 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c482:	23a4      	movs	r3, #164	@ 0xa4
 800c484:	18fb      	adds	r3, r7, r3
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2210      	movs	r2, #16
 800c48a:	4013      	ands	r3, r2
 800c48c:	d100      	bne.n	800c490 <HAL_UART_IRQHandler+0x2f0>
 800c48e:	e139      	b.n	800c704 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c490:	23a0      	movs	r3, #160	@ 0xa0
 800c492:	18fb      	adds	r3, r7, r3
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2210      	movs	r2, #16
 800c498:	4013      	ands	r3, r2
 800c49a:	d100      	bne.n	800c49e <HAL_UART_IRQHandler+0x2fe>
 800c49c:	e132      	b.n	800c704 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2210      	movs	r2, #16
 800c4a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	2240      	movs	r2, #64	@ 0x40
 800c4ae:	4013      	ands	r3, r2
 800c4b0:	2b40      	cmp	r3, #64	@ 0x40
 800c4b2:	d000      	beq.n	800c4b6 <HAL_UART_IRQHandler+0x316>
 800c4b4:	e0a5      	b.n	800c602 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2280      	movs	r2, #128	@ 0x80
 800c4ba:	589b      	ldr	r3, [r3, r2]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	685a      	ldr	r2, [r3, #4]
 800c4c0:	217e      	movs	r1, #126	@ 0x7e
 800c4c2:	187b      	adds	r3, r7, r1
 800c4c4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c4c6:	187b      	adds	r3, r7, r1
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d100      	bne.n	800c4d0 <HAL_UART_IRQHandler+0x330>
 800c4ce:	e18d      	b.n	800c7ec <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	225c      	movs	r2, #92	@ 0x5c
 800c4d4:	5a9b      	ldrh	r3, [r3, r2]
 800c4d6:	187a      	adds	r2, r7, r1
 800c4d8:	8812      	ldrh	r2, [r2, #0]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d300      	bcc.n	800c4e0 <HAL_UART_IRQHandler+0x340>
 800c4de:	e185      	b.n	800c7ec <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	187a      	adds	r2, r7, r1
 800c4e4:	215e      	movs	r1, #94	@ 0x5e
 800c4e6:	8812      	ldrh	r2, [r2, #0]
 800c4e8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2280      	movs	r2, #128	@ 0x80
 800c4ee:	589b      	ldr	r3, [r3, r2]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2220      	movs	r2, #32
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	d170      	bne.n	800c5dc <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4fa:	f3ef 8310 	mrs	r3, PRIMASK
 800c4fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c502:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c504:	2301      	movs	r3, #1
 800c506:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c50a:	f383 8810 	msr	PRIMASK, r3
}
 800c50e:	46c0      	nop			@ (mov r8, r8)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	49b8      	ldr	r1, [pc, #736]	@ (800c7fc <HAL_UART_IRQHandler+0x65c>)
 800c51c:	400a      	ands	r2, r1
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c522:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c526:	f383 8810 	msr	PRIMASK, r3
}
 800c52a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c52c:	f3ef 8310 	mrs	r3, PRIMASK
 800c530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800c532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c534:	677b      	str	r3, [r7, #116]	@ 0x74
 800c536:	2301      	movs	r3, #1
 800c538:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c53a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c53c:	f383 8810 	msr	PRIMASK, r3
}
 800c540:	46c0      	nop			@ (mov r8, r8)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	689a      	ldr	r2, [r3, #8]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2101      	movs	r1, #1
 800c54e:	438a      	bics	r2, r1
 800c550:	609a      	str	r2, [r3, #8]
 800c552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c554:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c558:	f383 8810 	msr	PRIMASK, r3
}
 800c55c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c55e:	f3ef 8310 	mrs	r3, PRIMASK
 800c562:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c566:	673b      	str	r3, [r7, #112]	@ 0x70
 800c568:	2301      	movs	r3, #1
 800c56a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c56c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c56e:	f383 8810 	msr	PRIMASK, r3
}
 800c572:	46c0      	nop			@ (mov r8, r8)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689a      	ldr	r2, [r3, #8]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2140      	movs	r1, #64	@ 0x40
 800c580:	438a      	bics	r2, r1
 800c582:	609a      	str	r2, [r3, #8]
 800c584:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c586:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c58a:	f383 8810 	msr	PRIMASK, r3
}
 800c58e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	228c      	movs	r2, #140	@ 0x8c
 800c594:	2120      	movs	r1, #32
 800c596:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c59e:	f3ef 8310 	mrs	r3, PRIMASK
 800c5a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c5a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5ae:	f383 8810 	msr	PRIMASK, r3
}
 800c5b2:	46c0      	nop			@ (mov r8, r8)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2110      	movs	r1, #16
 800c5c0:	438a      	bics	r2, r1
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5ca:	f383 8810 	msr	PRIMASK, r3
}
 800c5ce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2280      	movs	r2, #128	@ 0x80
 800c5d4:	589b      	ldr	r3, [r3, r2]
 800c5d6:	0018      	movs	r0, r3
 800c5d8:	f7fb fba2 	bl	8007d20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	22c0      	movs	r2, #192	@ 0xc0
 800c5e6:	589b      	ldr	r3, [r3, r2]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	215c      	movs	r1, #92	@ 0x5c
 800c5ec:	5a51      	ldrh	r1, [r2, r1]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	205e      	movs	r0, #94	@ 0x5e
 800c5f2:	5a12      	ldrh	r2, [r2, r0]
 800c5f4:	b292      	uxth	r2, r2
 800c5f6:	1a8a      	subs	r2, r1, r2
 800c5f8:	b291      	uxth	r1, r2
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	0010      	movs	r0, r2
 800c5fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c600:	e0f4      	b.n	800c7ec <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	225c      	movs	r2, #92	@ 0x5c
 800c606:	5a99      	ldrh	r1, [r3, r2]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	225e      	movs	r2, #94	@ 0x5e
 800c60c:	5a9b      	ldrh	r3, [r3, r2]
 800c60e:	b29a      	uxth	r2, r3
 800c610:	208e      	movs	r0, #142	@ 0x8e
 800c612:	183b      	adds	r3, r7, r0
 800c614:	1a8a      	subs	r2, r1, r2
 800c616:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	225e      	movs	r2, #94	@ 0x5e
 800c61c:	5a9b      	ldrh	r3, [r3, r2]
 800c61e:	b29b      	uxth	r3, r3
 800c620:	2b00      	cmp	r3, #0
 800c622:	d100      	bne.n	800c626 <HAL_UART_IRQHandler+0x486>
 800c624:	e0e4      	b.n	800c7f0 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800c626:	183b      	adds	r3, r7, r0
 800c628:	881b      	ldrh	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d100      	bne.n	800c630 <HAL_UART_IRQHandler+0x490>
 800c62e:	e0df      	b.n	800c7f0 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c630:	f3ef 8310 	mrs	r3, PRIMASK
 800c634:	60fb      	str	r3, [r7, #12]
  return(result);
 800c636:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c638:	2488      	movs	r4, #136	@ 0x88
 800c63a:	193a      	adds	r2, r7, r4
 800c63c:	6013      	str	r3, [r2, #0]
 800c63e:	2301      	movs	r3, #1
 800c640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	f383 8810 	msr	PRIMASK, r3
}
 800c648:	46c0      	nop			@ (mov r8, r8)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	496a      	ldr	r1, [pc, #424]	@ (800c800 <HAL_UART_IRQHandler+0x660>)
 800c656:	400a      	ands	r2, r1
 800c658:	601a      	str	r2, [r3, #0]
 800c65a:	193b      	adds	r3, r7, r4
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f383 8810 	msr	PRIMASK, r3
}
 800c666:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c668:	f3ef 8310 	mrs	r3, PRIMASK
 800c66c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c66e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c670:	2484      	movs	r4, #132	@ 0x84
 800c672:	193a      	adds	r2, r7, r4
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	2301      	movs	r3, #1
 800c678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	f383 8810 	msr	PRIMASK, r3
}
 800c680:	46c0      	nop			@ (mov r8, r8)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	495d      	ldr	r1, [pc, #372]	@ (800c804 <HAL_UART_IRQHandler+0x664>)
 800c68e:	400a      	ands	r2, r1
 800c690:	609a      	str	r2, [r3, #8]
 800c692:	193b      	adds	r3, r7, r4
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	f383 8810 	msr	PRIMASK, r3
}
 800c69e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	228c      	movs	r2, #140	@ 0x8c
 800c6a4:	2120      	movs	r1, #32
 800c6a6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6b4:	f3ef 8310 	mrs	r3, PRIMASK
 800c6b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6bc:	2480      	movs	r4, #128	@ 0x80
 800c6be:	193a      	adds	r2, r7, r4
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c8:	f383 8810 	msr	PRIMASK, r3
}
 800c6cc:	46c0      	nop			@ (mov r8, r8)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2110      	movs	r1, #16
 800c6da:	438a      	bics	r2, r1
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	193b      	adds	r3, r7, r4
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e6:	f383 8810 	msr	PRIMASK, r3
}
 800c6ea:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	22c0      	movs	r2, #192	@ 0xc0
 800c6f6:	589b      	ldr	r3, [r3, r2]
 800c6f8:	183a      	adds	r2, r7, r0
 800c6fa:	8811      	ldrh	r1, [r2, #0]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	0010      	movs	r0, r2
 800c700:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c702:	e075      	b.n	800c7f0 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c704:	23a4      	movs	r3, #164	@ 0xa4
 800c706:	18fb      	adds	r3, r7, r3
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	2380      	movs	r3, #128	@ 0x80
 800c70c:	035b      	lsls	r3, r3, #13
 800c70e:	4013      	ands	r3, r2
 800c710:	d012      	beq.n	800c738 <HAL_UART_IRQHandler+0x598>
 800c712:	239c      	movs	r3, #156	@ 0x9c
 800c714:	18fb      	adds	r3, r7, r3
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	2380      	movs	r3, #128	@ 0x80
 800c71a:	03db      	lsls	r3, r3, #15
 800c71c:	4013      	ands	r3, r2
 800c71e:	d00b      	beq.n	800c738 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2280      	movs	r2, #128	@ 0x80
 800c726:	0352      	lsls	r2, r2, #13
 800c728:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	22b4      	movs	r2, #180	@ 0xb4
 800c72e:	589b      	ldr	r3, [r3, r2]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	0010      	movs	r0, r2
 800c734:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c736:	e05e      	b.n	800c7f6 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c738:	23a4      	movs	r3, #164	@ 0xa4
 800c73a:	18fb      	adds	r3, r7, r3
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2280      	movs	r2, #128	@ 0x80
 800c740:	4013      	ands	r3, r2
 800c742:	d016      	beq.n	800c772 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c744:	23a0      	movs	r3, #160	@ 0xa0
 800c746:	18fb      	adds	r3, r7, r3
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2280      	movs	r2, #128	@ 0x80
 800c74c:	4013      	ands	r3, r2
 800c74e:	d106      	bne.n	800c75e <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c750:	239c      	movs	r3, #156	@ 0x9c
 800c752:	18fb      	adds	r3, r7, r3
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	2380      	movs	r3, #128	@ 0x80
 800c758:	041b      	lsls	r3, r3, #16
 800c75a:	4013      	ands	r3, r2
 800c75c:	d009      	beq.n	800c772 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c762:	2b00      	cmp	r3, #0
 800c764:	d046      	beq.n	800c7f4 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	0010      	movs	r0, r2
 800c76e:	4798      	blx	r3
    }
    return;
 800c770:	e040      	b.n	800c7f4 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c772:	23a4      	movs	r3, #164	@ 0xa4
 800c774:	18fb      	adds	r3, r7, r3
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2240      	movs	r2, #64	@ 0x40
 800c77a:	4013      	ands	r3, r2
 800c77c:	d00a      	beq.n	800c794 <HAL_UART_IRQHandler+0x5f4>
 800c77e:	23a0      	movs	r3, #160	@ 0xa0
 800c780:	18fb      	adds	r3, r7, r3
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2240      	movs	r2, #64	@ 0x40
 800c786:	4013      	ands	r3, r2
 800c788:	d004      	beq.n	800c794 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	0018      	movs	r0, r3
 800c78e:	f000 ff85 	bl	800d69c <UART_EndTransmit_IT>
    return;
 800c792:	e030      	b.n	800c7f6 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c794:	23a4      	movs	r3, #164	@ 0xa4
 800c796:	18fb      	adds	r3, r7, r3
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	2380      	movs	r3, #128	@ 0x80
 800c79c:	041b      	lsls	r3, r3, #16
 800c79e:	4013      	ands	r3, r2
 800c7a0:	d00d      	beq.n	800c7be <HAL_UART_IRQHandler+0x61e>
 800c7a2:	23a0      	movs	r3, #160	@ 0xa0
 800c7a4:	18fb      	adds	r3, r7, r3
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	2380      	movs	r3, #128	@ 0x80
 800c7aa:	05db      	lsls	r3, r3, #23
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	d006      	beq.n	800c7be <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	22bc      	movs	r2, #188	@ 0xbc
 800c7b4:	589b      	ldr	r3, [r3, r2]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	0010      	movs	r0, r2
 800c7ba:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7bc:	e01b      	b.n	800c7f6 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7be:	23a4      	movs	r3, #164	@ 0xa4
 800c7c0:	18fb      	adds	r3, r7, r3
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	2380      	movs	r3, #128	@ 0x80
 800c7c6:	045b      	lsls	r3, r3, #17
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	d014      	beq.n	800c7f6 <HAL_UART_IRQHandler+0x656>
 800c7cc:	23a0      	movs	r3, #160	@ 0xa0
 800c7ce:	18fb      	adds	r3, r7, r3
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	da0f      	bge.n	800c7f6 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	22b8      	movs	r2, #184	@ 0xb8
 800c7da:	589b      	ldr	r3, [r3, r2]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	0010      	movs	r0, r2
 800c7e0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7e2:	e008      	b.n	800c7f6 <HAL_UART_IRQHandler+0x656>
      return;
 800c7e4:	46c0      	nop			@ (mov r8, r8)
 800c7e6:	e006      	b.n	800c7f6 <HAL_UART_IRQHandler+0x656>
    return;
 800c7e8:	46c0      	nop			@ (mov r8, r8)
 800c7ea:	e004      	b.n	800c7f6 <HAL_UART_IRQHandler+0x656>
      return;
 800c7ec:	46c0      	nop			@ (mov r8, r8)
 800c7ee:	e002      	b.n	800c7f6 <HAL_UART_IRQHandler+0x656>
      return;
 800c7f0:	46c0      	nop			@ (mov r8, r8)
 800c7f2:	e000      	b.n	800c7f6 <HAL_UART_IRQHandler+0x656>
    return;
 800c7f4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	b02a      	add	sp, #168	@ 0xa8
 800c7fa:	bdb0      	pop	{r4, r5, r7, pc}
 800c7fc:	fffffeff 	.word	0xfffffeff
 800c800:	fffffedf 	.word	0xfffffedf
 800c804:	effffffe 	.word	0xeffffffe

0800c808 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c810:	46c0      	nop			@ (mov r8, r8)
 800c812:	46bd      	mov	sp, r7
 800c814:	b002      	add	sp, #8
 800c816:	bd80      	pop	{r7, pc}

0800c818 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c820:	46c0      	nop			@ (mov r8, r8)
 800c822:	46bd      	mov	sp, r7
 800c824:	b002      	add	sp, #8
 800c826:	bd80      	pop	{r7, pc}

0800c828 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c830:	46c0      	nop			@ (mov r8, r8)
 800c832:	46bd      	mov	sp, r7
 800c834:	b002      	add	sp, #8
 800c836:	bd80      	pop	{r7, pc}

0800c838 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c840:	46c0      	nop			@ (mov r8, r8)
 800c842:	46bd      	mov	sp, r7
 800c844:	b002      	add	sp, #8
 800c846:	bd80      	pop	{r7, pc}

0800c848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c850:	46c0      	nop			@ (mov r8, r8)
 800c852:	46bd      	mov	sp, r7
 800c854:	b002      	add	sp, #8
 800c856:	bd80      	pop	{r7, pc}

0800c858 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c860:	46c0      	nop			@ (mov r8, r8)
 800c862:	46bd      	mov	sp, r7
 800c864:	b002      	add	sp, #8
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c870:	46c0      	nop			@ (mov r8, r8)
 800c872:	46bd      	mov	sp, r7
 800c874:	b002      	add	sp, #8
 800c876:	bd80      	pop	{r7, pc}

0800c878 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c880:	46c0      	nop			@ (mov r8, r8)
 800c882:	46bd      	mov	sp, r7
 800c884:	b002      	add	sp, #8
 800c886:	bd80      	pop	{r7, pc}

0800c888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	000a      	movs	r2, r1
 800c892:	1cbb      	adds	r3, r7, #2
 800c894:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c896:	46c0      	nop			@ (mov r8, r8)
 800c898:	46bd      	mov	sp, r7
 800c89a:	b002      	add	sp, #8
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2194      	movs	r1, #148	@ 0x94
 800c8ac:	4a18      	ldr	r2, [pc, #96]	@ (800c910 <UART_InitCallbacksToDefault+0x70>)
 800c8ae:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2198      	movs	r1, #152	@ 0x98
 800c8b4:	4a17      	ldr	r2, [pc, #92]	@ (800c914 <UART_InitCallbacksToDefault+0x74>)
 800c8b6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	219c      	movs	r1, #156	@ 0x9c
 800c8bc:	4a16      	ldr	r2, [pc, #88]	@ (800c918 <UART_InitCallbacksToDefault+0x78>)
 800c8be:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	21a0      	movs	r1, #160	@ 0xa0
 800c8c4:	4a15      	ldr	r2, [pc, #84]	@ (800c91c <UART_InitCallbacksToDefault+0x7c>)
 800c8c6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	21a4      	movs	r1, #164	@ 0xa4
 800c8cc:	4a14      	ldr	r2, [pc, #80]	@ (800c920 <UART_InitCallbacksToDefault+0x80>)
 800c8ce:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	21a8      	movs	r1, #168	@ 0xa8
 800c8d4:	4a13      	ldr	r2, [pc, #76]	@ (800c924 <UART_InitCallbacksToDefault+0x84>)
 800c8d6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	21ac      	movs	r1, #172	@ 0xac
 800c8dc:	4a12      	ldr	r2, [pc, #72]	@ (800c928 <UART_InitCallbacksToDefault+0x88>)
 800c8de:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	21b0      	movs	r1, #176	@ 0xb0
 800c8e4:	4a11      	ldr	r2, [pc, #68]	@ (800c92c <UART_InitCallbacksToDefault+0x8c>)
 800c8e6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	21b4      	movs	r1, #180	@ 0xb4
 800c8ec:	4a10      	ldr	r2, [pc, #64]	@ (800c930 <UART_InitCallbacksToDefault+0x90>)
 800c8ee:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	21b8      	movs	r1, #184	@ 0xb8
 800c8f4:	4a0f      	ldr	r2, [pc, #60]	@ (800c934 <UART_InitCallbacksToDefault+0x94>)
 800c8f6:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	21bc      	movs	r1, #188	@ 0xbc
 800c8fc:	4a0e      	ldr	r2, [pc, #56]	@ (800c938 <UART_InitCallbacksToDefault+0x98>)
 800c8fe:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	21c0      	movs	r1, #192	@ 0xc0
 800c904:	4a0d      	ldr	r2, [pc, #52]	@ (800c93c <UART_InitCallbacksToDefault+0x9c>)
 800c906:	505a      	str	r2, [r3, r1]

}
 800c908:	46c0      	nop			@ (mov r8, r8)
 800c90a:	46bd      	mov	sp, r7
 800c90c:	b002      	add	sp, #8
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	0800c819 	.word	0x0800c819
 800c914:	0800c809 	.word	0x0800c809
 800c918:	0800c839 	.word	0x0800c839
 800c91c:	0800c829 	.word	0x0800c829
 800c920:	0800c849 	.word	0x0800c849
 800c924:	0800c859 	.word	0x0800c859
 800c928:	0800c869 	.word	0x0800c869
 800c92c:	0800c879 	.word	0x0800c879
 800c930:	0800d6f9 	.word	0x0800d6f9
 800c934:	0800d709 	.word	0x0800d709
 800c938:	0800d719 	.word	0x0800d719
 800c93c:	0800c889 	.word	0x0800c889

0800c940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c940:	b5b0      	push	{r4, r5, r7, lr}
 800c942:	b090      	sub	sp, #64	@ 0x40
 800c944:	af00      	add	r7, sp, #0
 800c946:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c948:	231a      	movs	r3, #26
 800c94a:	2220      	movs	r2, #32
 800c94c:	189b      	adds	r3, r3, r2
 800c94e:	19db      	adds	r3, r3, r7
 800c950:	2200      	movs	r2, #0
 800c952:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c956:	689a      	ldr	r2, [r3, #8]
 800c958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	431a      	orrs	r2, r3
 800c95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	431a      	orrs	r2, r3
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	4313      	orrs	r3, r2
 800c96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4ac4      	ldr	r2, [pc, #784]	@ (800cc84 <UART_SetConfig+0x344>)
 800c974:	4013      	ands	r3, r2
 800c976:	0019      	movs	r1, r3
 800c978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97e:	430b      	orrs	r3, r1
 800c980:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	4abf      	ldr	r2, [pc, #764]	@ (800cc88 <UART_SetConfig+0x348>)
 800c98a:	4013      	ands	r3, r2
 800c98c:	0018      	movs	r0, r3
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	68d9      	ldr	r1, [r3, #12]
 800c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	0003      	movs	r3, r0
 800c998:	430b      	orrs	r3, r1
 800c99a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4ab9      	ldr	r2, [pc, #740]	@ (800cc8c <UART_SetConfig+0x34c>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d004      	beq.n	800c9b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ae:	6a1b      	ldr	r3, [r3, #32]
 800c9b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	4ab4      	ldr	r2, [pc, #720]	@ (800cc90 <UART_SetConfig+0x350>)
 800c9be:	4013      	ands	r3, r2
 800c9c0:	0019      	movs	r1, r3
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c8:	430b      	orrs	r3, r1
 800c9ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d2:	220f      	movs	r2, #15
 800c9d4:	4393      	bics	r3, r2
 800c9d6:	0018      	movs	r0, r3
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	0003      	movs	r3, r0
 800c9e2:	430b      	orrs	r3, r1
 800c9e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4aaa      	ldr	r2, [pc, #680]	@ (800cc94 <UART_SetConfig+0x354>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d131      	bne.n	800ca54 <UART_SetConfig+0x114>
 800c9f0:	4ba9      	ldr	r3, [pc, #676]	@ (800cc98 <UART_SetConfig+0x358>)
 800c9f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9f4:	2203      	movs	r2, #3
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	2b03      	cmp	r3, #3
 800c9fa:	d01d      	beq.n	800ca38 <UART_SetConfig+0xf8>
 800c9fc:	d823      	bhi.n	800ca46 <UART_SetConfig+0x106>
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d00c      	beq.n	800ca1c <UART_SetConfig+0xdc>
 800ca02:	d820      	bhi.n	800ca46 <UART_SetConfig+0x106>
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <UART_SetConfig+0xce>
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d00e      	beq.n	800ca2a <UART_SetConfig+0xea>
 800ca0c:	e01b      	b.n	800ca46 <UART_SetConfig+0x106>
 800ca0e:	231b      	movs	r3, #27
 800ca10:	2220      	movs	r2, #32
 800ca12:	189b      	adds	r3, r3, r2
 800ca14:	19db      	adds	r3, r3, r7
 800ca16:	2200      	movs	r2, #0
 800ca18:	701a      	strb	r2, [r3, #0]
 800ca1a:	e071      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800ca1c:	231b      	movs	r3, #27
 800ca1e:	2220      	movs	r2, #32
 800ca20:	189b      	adds	r3, r3, r2
 800ca22:	19db      	adds	r3, r3, r7
 800ca24:	2202      	movs	r2, #2
 800ca26:	701a      	strb	r2, [r3, #0]
 800ca28:	e06a      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800ca2a:	231b      	movs	r3, #27
 800ca2c:	2220      	movs	r2, #32
 800ca2e:	189b      	adds	r3, r3, r2
 800ca30:	19db      	adds	r3, r3, r7
 800ca32:	2204      	movs	r2, #4
 800ca34:	701a      	strb	r2, [r3, #0]
 800ca36:	e063      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800ca38:	231b      	movs	r3, #27
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	189b      	adds	r3, r3, r2
 800ca3e:	19db      	adds	r3, r3, r7
 800ca40:	2208      	movs	r2, #8
 800ca42:	701a      	strb	r2, [r3, #0]
 800ca44:	e05c      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800ca46:	231b      	movs	r3, #27
 800ca48:	2220      	movs	r2, #32
 800ca4a:	189b      	adds	r3, r3, r2
 800ca4c:	19db      	adds	r3, r3, r7
 800ca4e:	2210      	movs	r2, #16
 800ca50:	701a      	strb	r2, [r3, #0]
 800ca52:	e055      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800ca54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a90      	ldr	r2, [pc, #576]	@ (800cc9c <UART_SetConfig+0x35c>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d106      	bne.n	800ca6c <UART_SetConfig+0x12c>
 800ca5e:	231b      	movs	r3, #27
 800ca60:	2220      	movs	r2, #32
 800ca62:	189b      	adds	r3, r3, r2
 800ca64:	19db      	adds	r3, r3, r7
 800ca66:	2200      	movs	r2, #0
 800ca68:	701a      	strb	r2, [r3, #0]
 800ca6a:	e049      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a86      	ldr	r2, [pc, #536]	@ (800cc8c <UART_SetConfig+0x34c>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d13e      	bne.n	800caf4 <UART_SetConfig+0x1b4>
 800ca76:	4b88      	ldr	r3, [pc, #544]	@ (800cc98 <UART_SetConfig+0x358>)
 800ca78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca7a:	23c0      	movs	r3, #192	@ 0xc0
 800ca7c:	011b      	lsls	r3, r3, #4
 800ca7e:	4013      	ands	r3, r2
 800ca80:	22c0      	movs	r2, #192	@ 0xc0
 800ca82:	0112      	lsls	r2, r2, #4
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d027      	beq.n	800cad8 <UART_SetConfig+0x198>
 800ca88:	22c0      	movs	r2, #192	@ 0xc0
 800ca8a:	0112      	lsls	r2, r2, #4
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d82a      	bhi.n	800cae6 <UART_SetConfig+0x1a6>
 800ca90:	2280      	movs	r2, #128	@ 0x80
 800ca92:	0112      	lsls	r2, r2, #4
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d011      	beq.n	800cabc <UART_SetConfig+0x17c>
 800ca98:	2280      	movs	r2, #128	@ 0x80
 800ca9a:	0112      	lsls	r2, r2, #4
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d822      	bhi.n	800cae6 <UART_SetConfig+0x1a6>
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d004      	beq.n	800caae <UART_SetConfig+0x16e>
 800caa4:	2280      	movs	r2, #128	@ 0x80
 800caa6:	00d2      	lsls	r2, r2, #3
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d00e      	beq.n	800caca <UART_SetConfig+0x18a>
 800caac:	e01b      	b.n	800cae6 <UART_SetConfig+0x1a6>
 800caae:	231b      	movs	r3, #27
 800cab0:	2220      	movs	r2, #32
 800cab2:	189b      	adds	r3, r3, r2
 800cab4:	19db      	adds	r3, r3, r7
 800cab6:	2200      	movs	r2, #0
 800cab8:	701a      	strb	r2, [r3, #0]
 800caba:	e021      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800cabc:	231b      	movs	r3, #27
 800cabe:	2220      	movs	r2, #32
 800cac0:	189b      	adds	r3, r3, r2
 800cac2:	19db      	adds	r3, r3, r7
 800cac4:	2202      	movs	r2, #2
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	e01a      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800caca:	231b      	movs	r3, #27
 800cacc:	2220      	movs	r2, #32
 800cace:	189b      	adds	r3, r3, r2
 800cad0:	19db      	adds	r3, r3, r7
 800cad2:	2204      	movs	r2, #4
 800cad4:	701a      	strb	r2, [r3, #0]
 800cad6:	e013      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800cad8:	231b      	movs	r3, #27
 800cada:	2220      	movs	r2, #32
 800cadc:	189b      	adds	r3, r3, r2
 800cade:	19db      	adds	r3, r3, r7
 800cae0:	2208      	movs	r2, #8
 800cae2:	701a      	strb	r2, [r3, #0]
 800cae4:	e00c      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800cae6:	231b      	movs	r3, #27
 800cae8:	2220      	movs	r2, #32
 800caea:	189b      	adds	r3, r3, r2
 800caec:	19db      	adds	r3, r3, r7
 800caee:	2210      	movs	r2, #16
 800caf0:	701a      	strb	r2, [r3, #0]
 800caf2:	e005      	b.n	800cb00 <UART_SetConfig+0x1c0>
 800caf4:	231b      	movs	r3, #27
 800caf6:	2220      	movs	r2, #32
 800caf8:	189b      	adds	r3, r3, r2
 800cafa:	19db      	adds	r3, r3, r7
 800cafc:	2210      	movs	r2, #16
 800cafe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a61      	ldr	r2, [pc, #388]	@ (800cc8c <UART_SetConfig+0x34c>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d000      	beq.n	800cb0c <UART_SetConfig+0x1cc>
 800cb0a:	e092      	b.n	800cc32 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb0c:	231b      	movs	r3, #27
 800cb0e:	2220      	movs	r2, #32
 800cb10:	189b      	adds	r3, r3, r2
 800cb12:	19db      	adds	r3, r3, r7
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	2b08      	cmp	r3, #8
 800cb18:	d015      	beq.n	800cb46 <UART_SetConfig+0x206>
 800cb1a:	dc18      	bgt.n	800cb4e <UART_SetConfig+0x20e>
 800cb1c:	2b04      	cmp	r3, #4
 800cb1e:	d00d      	beq.n	800cb3c <UART_SetConfig+0x1fc>
 800cb20:	dc15      	bgt.n	800cb4e <UART_SetConfig+0x20e>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <UART_SetConfig+0x1ec>
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d005      	beq.n	800cb36 <UART_SetConfig+0x1f6>
 800cb2a:	e010      	b.n	800cb4e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb2c:	f7fc fdd6 	bl	80096dc <HAL_RCC_GetPCLK1Freq>
 800cb30:	0003      	movs	r3, r0
 800cb32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb34:	e014      	b.n	800cb60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb36:	4b5a      	ldr	r3, [pc, #360]	@ (800cca0 <UART_SetConfig+0x360>)
 800cb38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb3a:	e011      	b.n	800cb60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb3c:	f7fc fd42 	bl	80095c4 <HAL_RCC_GetSysClockFreq>
 800cb40:	0003      	movs	r3, r0
 800cb42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb44:	e00c      	b.n	800cb60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb46:	2380      	movs	r3, #128	@ 0x80
 800cb48:	021b      	lsls	r3, r3, #8
 800cb4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb4c:	e008      	b.n	800cb60 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cb52:	231a      	movs	r3, #26
 800cb54:	2220      	movs	r2, #32
 800cb56:	189b      	adds	r3, r3, r2
 800cb58:	19db      	adds	r3, r3, r7
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	701a      	strb	r2, [r3, #0]
        break;
 800cb5e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d100      	bne.n	800cb68 <UART_SetConfig+0x228>
 800cb66:	e147      	b.n	800cdf8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb6c:	4b4d      	ldr	r3, [pc, #308]	@ (800cca4 <UART_SetConfig+0x364>)
 800cb6e:	0052      	lsls	r2, r2, #1
 800cb70:	5ad3      	ldrh	r3, [r2, r3]
 800cb72:	0019      	movs	r1, r3
 800cb74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cb76:	f7f3 fac5 	bl	8000104 <__udivsi3>
 800cb7a:	0003      	movs	r3, r0
 800cb7c:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	0013      	movs	r3, r2
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	189b      	adds	r3, r3, r2
 800cb88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d305      	bcc.n	800cb9a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d906      	bls.n	800cba8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800cb9a:	231a      	movs	r3, #26
 800cb9c:	2220      	movs	r2, #32
 800cb9e:	189b      	adds	r3, r3, r2
 800cba0:	19db      	adds	r3, r3, r7
 800cba2:	2201      	movs	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	e127      	b.n	800cdf8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbaa:	61bb      	str	r3, [r7, #24]
 800cbac:	2300      	movs	r3, #0
 800cbae:	61fb      	str	r3, [r7, #28]
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbb4:	4b3b      	ldr	r3, [pc, #236]	@ (800cca4 <UART_SetConfig+0x364>)
 800cbb6:	0052      	lsls	r2, r2, #1
 800cbb8:	5ad3      	ldrh	r3, [r2, r3]
 800cbba:	613b      	str	r3, [r7, #16]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	617b      	str	r3, [r7, #20]
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	69b8      	ldr	r0, [r7, #24]
 800cbc6:	69f9      	ldr	r1, [r7, #28]
 800cbc8:	f7f3 fb28 	bl	800021c <__aeabi_uldivmod>
 800cbcc:	0002      	movs	r2, r0
 800cbce:	000b      	movs	r3, r1
 800cbd0:	0e11      	lsrs	r1, r2, #24
 800cbd2:	021d      	lsls	r5, r3, #8
 800cbd4:	430d      	orrs	r5, r1
 800cbd6:	0214      	lsls	r4, r2, #8
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	085b      	lsrs	r3, r3, #1
 800cbde:	60bb      	str	r3, [r7, #8]
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	68b8      	ldr	r0, [r7, #8]
 800cbe6:	68f9      	ldr	r1, [r7, #12]
 800cbe8:	1900      	adds	r0, r0, r4
 800cbea:	4169      	adcs	r1, r5
 800cbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	607b      	str	r3, [r7, #4]
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f7f3 fb0f 	bl	800021c <__aeabi_uldivmod>
 800cbfe:	0002      	movs	r2, r0
 800cc00:	000b      	movs	r3, r1
 800cc02:	0013      	movs	r3, r2
 800cc04:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc08:	23c0      	movs	r3, #192	@ 0xc0
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d309      	bcc.n	800cc24 <UART_SetConfig+0x2e4>
 800cc10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc12:	2380      	movs	r3, #128	@ 0x80
 800cc14:	035b      	lsls	r3, r3, #13
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d204      	bcs.n	800cc24 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc20:	60da      	str	r2, [r3, #12]
 800cc22:	e0e9      	b.n	800cdf8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800cc24:	231a      	movs	r3, #26
 800cc26:	2220      	movs	r2, #32
 800cc28:	189b      	adds	r3, r3, r2
 800cc2a:	19db      	adds	r3, r3, r7
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	e0e2      	b.n	800cdf8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc34:	69da      	ldr	r2, [r3, #28]
 800cc36:	2380      	movs	r3, #128	@ 0x80
 800cc38:	021b      	lsls	r3, r3, #8
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d000      	beq.n	800cc40 <UART_SetConfig+0x300>
 800cc3e:	e083      	b.n	800cd48 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800cc40:	231b      	movs	r3, #27
 800cc42:	2220      	movs	r2, #32
 800cc44:	189b      	adds	r3, r3, r2
 800cc46:	19db      	adds	r3, r3, r7
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b08      	cmp	r3, #8
 800cc4c:	d015      	beq.n	800cc7a <UART_SetConfig+0x33a>
 800cc4e:	dc2b      	bgt.n	800cca8 <UART_SetConfig+0x368>
 800cc50:	2b04      	cmp	r3, #4
 800cc52:	d00d      	beq.n	800cc70 <UART_SetConfig+0x330>
 800cc54:	dc28      	bgt.n	800cca8 <UART_SetConfig+0x368>
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d002      	beq.n	800cc60 <UART_SetConfig+0x320>
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d005      	beq.n	800cc6a <UART_SetConfig+0x32a>
 800cc5e:	e023      	b.n	800cca8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc60:	f7fc fd3c 	bl	80096dc <HAL_RCC_GetPCLK1Freq>
 800cc64:	0003      	movs	r3, r0
 800cc66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc68:	e027      	b.n	800ccba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cca0 <UART_SetConfig+0x360>)
 800cc6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc6e:	e024      	b.n	800ccba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc70:	f7fc fca8 	bl	80095c4 <HAL_RCC_GetSysClockFreq>
 800cc74:	0003      	movs	r3, r0
 800cc76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc78:	e01f      	b.n	800ccba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc7a:	2380      	movs	r3, #128	@ 0x80
 800cc7c:	021b      	lsls	r3, r3, #8
 800cc7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc80:	e01b      	b.n	800ccba <UART_SetConfig+0x37a>
 800cc82:	46c0      	nop			@ (mov r8, r8)
 800cc84:	cfff69f3 	.word	0xcfff69f3
 800cc88:	ffffcfff 	.word	0xffffcfff
 800cc8c:	40008000 	.word	0x40008000
 800cc90:	11fff4ff 	.word	0x11fff4ff
 800cc94:	40013800 	.word	0x40013800
 800cc98:	40021000 	.word	0x40021000
 800cc9c:	40004400 	.word	0x40004400
 800cca0:	00f42400 	.word	0x00f42400
 800cca4:	0800e1d0 	.word	0x0800e1d0
      default:
        pclk = 0U;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800ccac:	231a      	movs	r3, #26
 800ccae:	2220      	movs	r2, #32
 800ccb0:	189b      	adds	r3, r3, r2
 800ccb2:	19db      	adds	r3, r3, r7
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	701a      	strb	r2, [r3, #0]
        break;
 800ccb8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d100      	bne.n	800ccc2 <UART_SetConfig+0x382>
 800ccc0:	e09a      	b.n	800cdf8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccc6:	4b58      	ldr	r3, [pc, #352]	@ (800ce28 <UART_SetConfig+0x4e8>)
 800ccc8:	0052      	lsls	r2, r2, #1
 800ccca:	5ad3      	ldrh	r3, [r2, r3]
 800cccc:	0019      	movs	r1, r3
 800ccce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ccd0:	f7f3 fa18 	bl	8000104 <__udivsi3>
 800ccd4:	0003      	movs	r3, r0
 800ccd6:	005a      	lsls	r2, r3, #1
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	085b      	lsrs	r3, r3, #1
 800ccde:	18d2      	adds	r2, r2, r3
 800cce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	0019      	movs	r1, r3
 800cce6:	0010      	movs	r0, r2
 800cce8:	f7f3 fa0c 	bl	8000104 <__udivsi3>
 800ccec:	0003      	movs	r3, r0
 800ccee:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf2:	2b0f      	cmp	r3, #15
 800ccf4:	d921      	bls.n	800cd3a <UART_SetConfig+0x3fa>
 800ccf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccf8:	2380      	movs	r3, #128	@ 0x80
 800ccfa:	025b      	lsls	r3, r3, #9
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d21c      	bcs.n	800cd3a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	200e      	movs	r0, #14
 800cd06:	2420      	movs	r4, #32
 800cd08:	1903      	adds	r3, r0, r4
 800cd0a:	19db      	adds	r3, r3, r7
 800cd0c:	210f      	movs	r1, #15
 800cd0e:	438a      	bics	r2, r1
 800cd10:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd14:	085b      	lsrs	r3, r3, #1
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	2207      	movs	r2, #7
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	b299      	uxth	r1, r3
 800cd1e:	1903      	adds	r3, r0, r4
 800cd20:	19db      	adds	r3, r3, r7
 800cd22:	1902      	adds	r2, r0, r4
 800cd24:	19d2      	adds	r2, r2, r7
 800cd26:	8812      	ldrh	r2, [r2, #0]
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800cd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	1902      	adds	r2, r0, r4
 800cd32:	19d2      	adds	r2, r2, r7
 800cd34:	8812      	ldrh	r2, [r2, #0]
 800cd36:	60da      	str	r2, [r3, #12]
 800cd38:	e05e      	b.n	800cdf8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cd3a:	231a      	movs	r3, #26
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	189b      	adds	r3, r3, r2
 800cd40:	19db      	adds	r3, r3, r7
 800cd42:	2201      	movs	r2, #1
 800cd44:	701a      	strb	r2, [r3, #0]
 800cd46:	e057      	b.n	800cdf8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd48:	231b      	movs	r3, #27
 800cd4a:	2220      	movs	r2, #32
 800cd4c:	189b      	adds	r3, r3, r2
 800cd4e:	19db      	adds	r3, r3, r7
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b08      	cmp	r3, #8
 800cd54:	d015      	beq.n	800cd82 <UART_SetConfig+0x442>
 800cd56:	dc18      	bgt.n	800cd8a <UART_SetConfig+0x44a>
 800cd58:	2b04      	cmp	r3, #4
 800cd5a:	d00d      	beq.n	800cd78 <UART_SetConfig+0x438>
 800cd5c:	dc15      	bgt.n	800cd8a <UART_SetConfig+0x44a>
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <UART_SetConfig+0x428>
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d005      	beq.n	800cd72 <UART_SetConfig+0x432>
 800cd66:	e010      	b.n	800cd8a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd68:	f7fc fcb8 	bl	80096dc <HAL_RCC_GetPCLK1Freq>
 800cd6c:	0003      	movs	r3, r0
 800cd6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd70:	e014      	b.n	800cd9c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd72:	4b2e      	ldr	r3, [pc, #184]	@ (800ce2c <UART_SetConfig+0x4ec>)
 800cd74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd76:	e011      	b.n	800cd9c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd78:	f7fc fc24 	bl	80095c4 <HAL_RCC_GetSysClockFreq>
 800cd7c:	0003      	movs	r3, r0
 800cd7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd80:	e00c      	b.n	800cd9c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd82:	2380      	movs	r3, #128	@ 0x80
 800cd84:	021b      	lsls	r3, r3, #8
 800cd86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd88:	e008      	b.n	800cd9c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cd8e:	231a      	movs	r3, #26
 800cd90:	2220      	movs	r2, #32
 800cd92:	189b      	adds	r3, r3, r2
 800cd94:	19db      	adds	r3, r3, r7
 800cd96:	2201      	movs	r2, #1
 800cd98:	701a      	strb	r2, [r3, #0]
        break;
 800cd9a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800cd9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d02a      	beq.n	800cdf8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cda6:	4b20      	ldr	r3, [pc, #128]	@ (800ce28 <UART_SetConfig+0x4e8>)
 800cda8:	0052      	lsls	r2, r2, #1
 800cdaa:	5ad3      	ldrh	r3, [r2, r3]
 800cdac:	0019      	movs	r1, r3
 800cdae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cdb0:	f7f3 f9a8 	bl	8000104 <__udivsi3>
 800cdb4:	0003      	movs	r3, r0
 800cdb6:	001a      	movs	r2, r3
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	085b      	lsrs	r3, r3, #1
 800cdbe:	18d2      	adds	r2, r2, r3
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	0019      	movs	r1, r3
 800cdc6:	0010      	movs	r0, r2
 800cdc8:	f7f3 f99c 	bl	8000104 <__udivsi3>
 800cdcc:	0003      	movs	r3, r0
 800cdce:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd2:	2b0f      	cmp	r3, #15
 800cdd4:	d90a      	bls.n	800cdec <UART_SetConfig+0x4ac>
 800cdd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdd8:	2380      	movs	r3, #128	@ 0x80
 800cdda:	025b      	lsls	r3, r3, #9
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d205      	bcs.n	800cdec <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	60da      	str	r2, [r3, #12]
 800cdea:	e005      	b.n	800cdf8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cdec:	231a      	movs	r3, #26
 800cdee:	2220      	movs	r2, #32
 800cdf0:	189b      	adds	r3, r3, r2
 800cdf2:	19db      	adds	r3, r3, r7
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfa:	226a      	movs	r2, #106	@ 0x6a
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce02:	2268      	movs	r2, #104	@ 0x68
 800ce04:	2101      	movs	r1, #1
 800ce06:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce10:	2200      	movs	r2, #0
 800ce12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ce14:	231a      	movs	r3, #26
 800ce16:	2220      	movs	r2, #32
 800ce18:	189b      	adds	r3, r3, r2
 800ce1a:	19db      	adds	r3, r3, r7
 800ce1c:	781b      	ldrb	r3, [r3, #0]
}
 800ce1e:	0018      	movs	r0, r3
 800ce20:	46bd      	mov	sp, r7
 800ce22:	b010      	add	sp, #64	@ 0x40
 800ce24:	bdb0      	pop	{r4, r5, r7, pc}
 800ce26:	46c0      	nop			@ (mov r8, r8)
 800ce28:	0800e1d0 	.word	0x0800e1d0
 800ce2c:	00f42400 	.word	0x00f42400

0800ce30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce3c:	2208      	movs	r2, #8
 800ce3e:	4013      	ands	r3, r2
 800ce40:	d00b      	beq.n	800ce5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	4a4a      	ldr	r2, [pc, #296]	@ (800cf74 <UART_AdvFeatureConfig+0x144>)
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	0019      	movs	r1, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	430a      	orrs	r2, r1
 800ce58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce5e:	2201      	movs	r2, #1
 800ce60:	4013      	ands	r3, r2
 800ce62:	d00b      	beq.n	800ce7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	4a43      	ldr	r2, [pc, #268]	@ (800cf78 <UART_AdvFeatureConfig+0x148>)
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	0019      	movs	r1, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	430a      	orrs	r2, r1
 800ce7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce80:	2202      	movs	r2, #2
 800ce82:	4013      	ands	r3, r2
 800ce84:	d00b      	beq.n	800ce9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	4a3b      	ldr	r2, [pc, #236]	@ (800cf7c <UART_AdvFeatureConfig+0x14c>)
 800ce8e:	4013      	ands	r3, r2
 800ce90:	0019      	movs	r1, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cea2:	2204      	movs	r2, #4
 800cea4:	4013      	ands	r3, r2
 800cea6:	d00b      	beq.n	800cec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	4a34      	ldr	r2, [pc, #208]	@ (800cf80 <UART_AdvFeatureConfig+0x150>)
 800ceb0:	4013      	ands	r3, r2
 800ceb2:	0019      	movs	r1, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	430a      	orrs	r2, r1
 800cebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec4:	2210      	movs	r2, #16
 800cec6:	4013      	ands	r3, r2
 800cec8:	d00b      	beq.n	800cee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	4a2c      	ldr	r2, [pc, #176]	@ (800cf84 <UART_AdvFeatureConfig+0x154>)
 800ced2:	4013      	ands	r3, r2
 800ced4:	0019      	movs	r1, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	430a      	orrs	r2, r1
 800cee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cee6:	2220      	movs	r2, #32
 800cee8:	4013      	ands	r3, r2
 800ceea:	d00b      	beq.n	800cf04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	4a25      	ldr	r2, [pc, #148]	@ (800cf88 <UART_AdvFeatureConfig+0x158>)
 800cef4:	4013      	ands	r3, r2
 800cef6:	0019      	movs	r1, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	430a      	orrs	r2, r1
 800cf02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf08:	2240      	movs	r2, #64	@ 0x40
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	d01d      	beq.n	800cf4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	4a1d      	ldr	r2, [pc, #116]	@ (800cf8c <UART_AdvFeatureConfig+0x15c>)
 800cf16:	4013      	ands	r3, r2
 800cf18:	0019      	movs	r1, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	430a      	orrs	r2, r1
 800cf24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf2a:	2380      	movs	r3, #128	@ 0x80
 800cf2c:	035b      	lsls	r3, r3, #13
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d10b      	bne.n	800cf4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	4a15      	ldr	r2, [pc, #84]	@ (800cf90 <UART_AdvFeatureConfig+0x160>)
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	0019      	movs	r1, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	430a      	orrs	r2, r1
 800cf48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf4e:	2280      	movs	r2, #128	@ 0x80
 800cf50:	4013      	ands	r3, r2
 800cf52:	d00b      	beq.n	800cf6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	4a0e      	ldr	r2, [pc, #56]	@ (800cf94 <UART_AdvFeatureConfig+0x164>)
 800cf5c:	4013      	ands	r3, r2
 800cf5e:	0019      	movs	r1, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	605a      	str	r2, [r3, #4]
  }
}
 800cf6c:	46c0      	nop			@ (mov r8, r8)
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	b002      	add	sp, #8
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	ffff7fff 	.word	0xffff7fff
 800cf78:	fffdffff 	.word	0xfffdffff
 800cf7c:	fffeffff 	.word	0xfffeffff
 800cf80:	fffbffff 	.word	0xfffbffff
 800cf84:	ffffefff 	.word	0xffffefff
 800cf88:	ffffdfff 	.word	0xffffdfff
 800cf8c:	ffefffff 	.word	0xffefffff
 800cf90:	ff9fffff 	.word	0xff9fffff
 800cf94:	fff7ffff 	.word	0xfff7ffff

0800cf98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b092      	sub	sp, #72	@ 0x48
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2290      	movs	r2, #144	@ 0x90
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfa8:	f7f9 fa66 	bl	8006478 <HAL_GetTick>
 800cfac:	0003      	movs	r3, r0
 800cfae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2208      	movs	r2, #8
 800cfb8:	4013      	ands	r3, r2
 800cfba:	2b08      	cmp	r3, #8
 800cfbc:	d12d      	bne.n	800d01a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfc0:	2280      	movs	r2, #128	@ 0x80
 800cfc2:	0391      	lsls	r1, r2, #14
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	4a47      	ldr	r2, [pc, #284]	@ (800d0e4 <UART_CheckIdleState+0x14c>)
 800cfc8:	9200      	str	r2, [sp, #0]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f000 f88e 	bl	800d0ec <UART_WaitOnFlagUntilTimeout>
 800cfd0:	1e03      	subs	r3, r0, #0
 800cfd2:	d022      	beq.n	800d01a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfd4:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cfdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cfde:	2301      	movs	r3, #1
 800cfe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe4:	f383 8810 	msr	PRIMASK, r3
}
 800cfe8:	46c0      	nop			@ (mov r8, r8)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2180      	movs	r1, #128	@ 0x80
 800cff6:	438a      	bics	r2, r1
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d000:	f383 8810 	msr	PRIMASK, r3
}
 800d004:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2288      	movs	r2, #136	@ 0x88
 800d00a:	2120      	movs	r1, #32
 800d00c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2284      	movs	r2, #132	@ 0x84
 800d012:	2100      	movs	r1, #0
 800d014:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d016:	2303      	movs	r3, #3
 800d018:	e060      	b.n	800d0dc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2204      	movs	r2, #4
 800d022:	4013      	ands	r3, r2
 800d024:	2b04      	cmp	r3, #4
 800d026:	d146      	bne.n	800d0b6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d02a:	2280      	movs	r2, #128	@ 0x80
 800d02c:	03d1      	lsls	r1, r2, #15
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	4a2c      	ldr	r2, [pc, #176]	@ (800d0e4 <UART_CheckIdleState+0x14c>)
 800d032:	9200      	str	r2, [sp, #0]
 800d034:	2200      	movs	r2, #0
 800d036:	f000 f859 	bl	800d0ec <UART_WaitOnFlagUntilTimeout>
 800d03a:	1e03      	subs	r3, r0, #0
 800d03c:	d03b      	beq.n	800d0b6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d03e:	f3ef 8310 	mrs	r3, PRIMASK
 800d042:	60fb      	str	r3, [r7, #12]
  return(result);
 800d044:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d046:	637b      	str	r3, [r7, #52]	@ 0x34
 800d048:	2301      	movs	r3, #1
 800d04a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	f383 8810 	msr	PRIMASK, r3
}
 800d052:	46c0      	nop			@ (mov r8, r8)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4922      	ldr	r1, [pc, #136]	@ (800d0e8 <UART_CheckIdleState+0x150>)
 800d060:	400a      	ands	r2, r1
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f383 8810 	msr	PRIMASK, r3
}
 800d06e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d070:	f3ef 8310 	mrs	r3, PRIMASK
 800d074:	61bb      	str	r3, [r7, #24]
  return(result);
 800d076:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d078:	633b      	str	r3, [r7, #48]	@ 0x30
 800d07a:	2301      	movs	r3, #1
 800d07c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	f383 8810 	msr	PRIMASK, r3
}
 800d084:	46c0      	nop			@ (mov r8, r8)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2101      	movs	r1, #1
 800d092:	438a      	bics	r2, r1
 800d094:	609a      	str	r2, [r3, #8]
 800d096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d098:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	f383 8810 	msr	PRIMASK, r3
}
 800d0a0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	228c      	movs	r2, #140	@ 0x8c
 800d0a6:	2120      	movs	r1, #32
 800d0a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2284      	movs	r2, #132	@ 0x84
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0b2:	2303      	movs	r3, #3
 800d0b4:	e012      	b.n	800d0dc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2288      	movs	r2, #136	@ 0x88
 800d0ba:	2120      	movs	r1, #32
 800d0bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	228c      	movs	r2, #140	@ 0x8c
 800d0c2:	2120      	movs	r1, #32
 800d0c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2284      	movs	r2, #132	@ 0x84
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	0018      	movs	r0, r3
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	b010      	add	sp, #64	@ 0x40
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	01ffffff 	.word	0x01ffffff
 800d0e8:	fffffedf 	.word	0xfffffedf

0800d0ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	1dfb      	adds	r3, r7, #7
 800d0fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0fc:	e051      	b.n	800d1a2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	3301      	adds	r3, #1
 800d102:	d04e      	beq.n	800d1a2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d104:	f7f9 f9b8 	bl	8006478 <HAL_GetTick>
 800d108:	0002      	movs	r2, r0
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	1ad3      	subs	r3, r2, r3
 800d10e:	69ba      	ldr	r2, [r7, #24]
 800d110:	429a      	cmp	r2, r3
 800d112:	d302      	bcc.n	800d11a <UART_WaitOnFlagUntilTimeout+0x2e>
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e051      	b.n	800d1c2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2204      	movs	r2, #4
 800d126:	4013      	ands	r3, r2
 800d128:	d03b      	beq.n	800d1a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	2b80      	cmp	r3, #128	@ 0x80
 800d12e:	d038      	beq.n	800d1a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2b40      	cmp	r3, #64	@ 0x40
 800d134:	d035      	beq.n	800d1a2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	69db      	ldr	r3, [r3, #28]
 800d13c:	2208      	movs	r2, #8
 800d13e:	4013      	ands	r3, r2
 800d140:	2b08      	cmp	r3, #8
 800d142:	d111      	bne.n	800d168 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2208      	movs	r2, #8
 800d14a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	0018      	movs	r0, r3
 800d150:	f000 f922 	bl	800d398 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2290      	movs	r2, #144	@ 0x90
 800d158:	2108      	movs	r1, #8
 800d15a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2284      	movs	r2, #132	@ 0x84
 800d160:	2100      	movs	r1, #0
 800d162:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	e02c      	b.n	800d1c2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	69da      	ldr	r2, [r3, #28]
 800d16e:	2380      	movs	r3, #128	@ 0x80
 800d170:	011b      	lsls	r3, r3, #4
 800d172:	401a      	ands	r2, r3
 800d174:	2380      	movs	r3, #128	@ 0x80
 800d176:	011b      	lsls	r3, r3, #4
 800d178:	429a      	cmp	r2, r3
 800d17a:	d112      	bne.n	800d1a2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2280      	movs	r2, #128	@ 0x80
 800d182:	0112      	lsls	r2, r2, #4
 800d184:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	0018      	movs	r0, r3
 800d18a:	f000 f905 	bl	800d398 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2290      	movs	r2, #144	@ 0x90
 800d192:	2120      	movs	r1, #32
 800d194:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2284      	movs	r2, #132	@ 0x84
 800d19a:	2100      	movs	r1, #0
 800d19c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e00f      	b.n	800d1c2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	69db      	ldr	r3, [r3, #28]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	1ad3      	subs	r3, r2, r3
 800d1b0:	425a      	negs	r2, r3
 800d1b2:	4153      	adcs	r3, r2
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	001a      	movs	r2, r3
 800d1b8:	1dfb      	adds	r3, r7, #7
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d09e      	beq.n	800d0fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	0018      	movs	r0, r3
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	b004      	add	sp, #16
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b090      	sub	sp, #64	@ 0x40
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	1dbb      	adds	r3, r7, #6
 800d1d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	1dba      	adds	r2, r7, #6
 800d1e4:	215c      	movs	r1, #92	@ 0x5c
 800d1e6:	8812      	ldrh	r2, [r2, #0]
 800d1e8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2290      	movs	r2, #144	@ 0x90
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	228c      	movs	r2, #140	@ 0x8c
 800d1f6:	2122      	movs	r1, #34	@ 0x22
 800d1f8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2280      	movs	r2, #128	@ 0x80
 800d1fe:	589b      	ldr	r3, [r3, r2]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d02d      	beq.n	800d260 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2280      	movs	r2, #128	@ 0x80
 800d208:	589b      	ldr	r3, [r3, r2]
 800d20a:	4a40      	ldr	r2, [pc, #256]	@ (800d30c <UART_Start_Receive_DMA+0x140>)
 800d20c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2280      	movs	r2, #128	@ 0x80
 800d212:	589b      	ldr	r3, [r3, r2]
 800d214:	4a3e      	ldr	r2, [pc, #248]	@ (800d310 <UART_Start_Receive_DMA+0x144>)
 800d216:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2280      	movs	r2, #128	@ 0x80
 800d21c:	589b      	ldr	r3, [r3, r2]
 800d21e:	4a3d      	ldr	r2, [pc, #244]	@ (800d314 <UART_Start_Receive_DMA+0x148>)
 800d220:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2280      	movs	r2, #128	@ 0x80
 800d226:	589b      	ldr	r3, [r3, r2]
 800d228:	2200      	movs	r2, #0
 800d22a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2280      	movs	r2, #128	@ 0x80
 800d230:	5898      	ldr	r0, [r3, r2]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3324      	adds	r3, #36	@ 0x24
 800d238:	0019      	movs	r1, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d23e:	001a      	movs	r2, r3
 800d240:	1dbb      	adds	r3, r7, #6
 800d242:	881b      	ldrh	r3, [r3, #0]
 800d244:	f7fa fce6 	bl	8007c14 <HAL_DMA_Start_IT>
 800d248:	1e03      	subs	r3, r0, #0
 800d24a:	d009      	beq.n	800d260 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2290      	movs	r2, #144	@ 0x90
 800d250:	2110      	movs	r1, #16
 800d252:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	228c      	movs	r2, #140	@ 0x8c
 800d258:	2120      	movs	r1, #32
 800d25a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e050      	b.n	800d302 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d019      	beq.n	800d29c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d268:	f3ef 8310 	mrs	r3, PRIMASK
 800d26c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800d26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d272:	2301      	movs	r3, #1
 800d274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d278:	f383 8810 	msr	PRIMASK, r3
}
 800d27c:	46c0      	nop			@ (mov r8, r8)
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2180      	movs	r1, #128	@ 0x80
 800d28a:	0049      	lsls	r1, r1, #1
 800d28c:	430a      	orrs	r2, r1
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d292:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d296:	f383 8810 	msr	PRIMASK, r3
}
 800d29a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d29c:	f3ef 8310 	mrs	r3, PRIMASK
 800d2a0:	613b      	str	r3, [r7, #16]
  return(result);
 800d2a2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	f383 8810 	msr	PRIMASK, r3
}
 800d2b0:	46c0      	nop			@ (mov r8, r8)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	689a      	ldr	r2, [r3, #8]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2101      	movs	r1, #1
 800d2be:	430a      	orrs	r2, r1
 800d2c0:	609a      	str	r2, [r3, #8]
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	f383 8810 	msr	PRIMASK, r3
}
 800d2cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d2d2:	61fb      	str	r3, [r7, #28]
  return(result);
 800d2d4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2d8:	2301      	movs	r3, #1
 800d2da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	f383 8810 	msr	PRIMASK, r3
}
 800d2e2:	46c0      	nop			@ (mov r8, r8)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	689a      	ldr	r2, [r3, #8]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2140      	movs	r1, #64	@ 0x40
 800d2f0:	430a      	orrs	r2, r1
 800d2f2:	609a      	str	r2, [r3, #8]
 800d2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fa:	f383 8810 	msr	PRIMASK, r3
}
 800d2fe:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	0018      	movs	r0, r3
 800d304:	46bd      	mov	sp, r7
 800d306:	b010      	add	sp, #64	@ 0x40
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	46c0      	nop			@ (mov r8, r8)
 800d30c:	0800d465 	.word	0x0800d465
 800d310:	0800d599 	.word	0x0800d599
 800d314:	0800d5e1 	.word	0x0800d5e1

0800d318 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b08a      	sub	sp, #40	@ 0x28
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d320:	f3ef 8310 	mrs	r3, PRIMASK
 800d324:	60bb      	str	r3, [r7, #8]
  return(result);
 800d326:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d328:	627b      	str	r3, [r7, #36]	@ 0x24
 800d32a:	2301      	movs	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f383 8810 	msr	PRIMASK, r3
}
 800d334:	46c0      	nop			@ (mov r8, r8)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	21c0      	movs	r1, #192	@ 0xc0
 800d342:	438a      	bics	r2, r1
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	f383 8810 	msr	PRIMASK, r3
}
 800d350:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d352:	f3ef 8310 	mrs	r3, PRIMASK
 800d356:	617b      	str	r3, [r7, #20]
  return(result);
 800d358:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d35a:	623b      	str	r3, [r7, #32]
 800d35c:	2301      	movs	r3, #1
 800d35e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	f383 8810 	msr	PRIMASK, r3
}
 800d366:	46c0      	nop			@ (mov r8, r8)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	689a      	ldr	r2, [r3, #8]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4908      	ldr	r1, [pc, #32]	@ (800d394 <UART_EndTxTransfer+0x7c>)
 800d374:	400a      	ands	r2, r1
 800d376:	609a      	str	r2, [r3, #8]
 800d378:	6a3b      	ldr	r3, [r7, #32]
 800d37a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	f383 8810 	msr	PRIMASK, r3
}
 800d382:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2288      	movs	r2, #136	@ 0x88
 800d388:	2120      	movs	r1, #32
 800d38a:	5099      	str	r1, [r3, r2]
}
 800d38c:	46c0      	nop			@ (mov r8, r8)
 800d38e:	46bd      	mov	sp, r7
 800d390:	b00a      	add	sp, #40	@ 0x28
 800d392:	bd80      	pop	{r7, pc}
 800d394:	ff7fffff 	.word	0xff7fffff

0800d398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b08e      	sub	sp, #56	@ 0x38
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d3a4:	617b      	str	r3, [r7, #20]
  return(result);
 800d3a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	f383 8810 	msr	PRIMASK, r3
}
 800d3b4:	46c0      	nop			@ (mov r8, r8)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4926      	ldr	r1, [pc, #152]	@ (800d45c <UART_EndRxTransfer+0xc4>)
 800d3c2:	400a      	ands	r2, r1
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	f383 8810 	msr	PRIMASK, r3
}
 800d3d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d3d6:	623b      	str	r3, [r7, #32]
  return(result);
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3da:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3dc:	2301      	movs	r3, #1
 800d3de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e2:	f383 8810 	msr	PRIMASK, r3
}
 800d3e6:	46c0      	nop			@ (mov r8, r8)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	689a      	ldr	r2, [r3, #8]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	491b      	ldr	r1, [pc, #108]	@ (800d460 <UART_EndRxTransfer+0xc8>)
 800d3f4:	400a      	ands	r2, r1
 800d3f6:	609a      	str	r2, [r3, #8]
 800d3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fe:	f383 8810 	msr	PRIMASK, r3
}
 800d402:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d118      	bne.n	800d43e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d40c:	f3ef 8310 	mrs	r3, PRIMASK
 800d410:	60bb      	str	r3, [r7, #8]
  return(result);
 800d412:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d416:	2301      	movs	r3, #1
 800d418:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f383 8810 	msr	PRIMASK, r3
}
 800d420:	46c0      	nop			@ (mov r8, r8)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2110      	movs	r1, #16
 800d42e:	438a      	bics	r2, r1
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	f383 8810 	msr	PRIMASK, r3
}
 800d43c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	228c      	movs	r2, #140	@ 0x8c
 800d442:	2120      	movs	r1, #32
 800d444:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d452:	46c0      	nop			@ (mov r8, r8)
 800d454:	46bd      	mov	sp, r7
 800d456:	b00e      	add	sp, #56	@ 0x38
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	46c0      	nop			@ (mov r8, r8)
 800d45c:	fffffedf 	.word	0xfffffedf
 800d460:	effffffe 	.word	0xeffffffe

0800d464 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b094      	sub	sp, #80	@ 0x50
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d470:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2220      	movs	r2, #32
 800d47a:	4013      	ands	r3, r2
 800d47c:	d16f      	bne.n	800d55e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800d47e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d480:	225e      	movs	r2, #94	@ 0x5e
 800d482:	2100      	movs	r1, #0
 800d484:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d486:	f3ef 8310 	mrs	r3, PRIMASK
 800d48a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d48c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d48e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d490:	2301      	movs	r3, #1
 800d492:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	f383 8810 	msr	PRIMASK, r3
}
 800d49a:	46c0      	nop			@ (mov r8, r8)
 800d49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681a      	ldr	r2, [r3, #0]
 800d4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	493b      	ldr	r1, [pc, #236]	@ (800d594 <UART_DMAReceiveCplt+0x130>)
 800d4a8:	400a      	ands	r2, r1
 800d4aa:	601a      	str	r2, [r3, #0]
 800d4ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
 800d4b2:	f383 8810 	msr	PRIMASK, r3
}
 800d4b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4b8:	f3ef 8310 	mrs	r3, PRIMASK
 800d4bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c8:	f383 8810 	msr	PRIMASK, r3
}
 800d4cc:	46c0      	nop			@ (mov r8, r8)
 800d4ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	689a      	ldr	r2, [r3, #8]
 800d4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2101      	movs	r1, #1
 800d4da:	438a      	bics	r2, r1
 800d4dc:	609a      	str	r2, [r3, #8]
 800d4de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e4:	f383 8810 	msr	PRIMASK, r3
}
 800d4e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4fa:	f383 8810 	msr	PRIMASK, r3
}
 800d4fe:	46c0      	nop			@ (mov r8, r8)
 800d500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	689a      	ldr	r2, [r3, #8]
 800d506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2140      	movs	r1, #64	@ 0x40
 800d50c:	438a      	bics	r2, r1
 800d50e:	609a      	str	r2, [r3, #8]
 800d510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d512:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d516:	f383 8810 	msr	PRIMASK, r3
}
 800d51a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d51c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d51e:	228c      	movs	r2, #140	@ 0x8c
 800d520:	2120      	movs	r1, #32
 800d522:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d118      	bne.n	800d55e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d52c:	f3ef 8310 	mrs	r3, PRIMASK
 800d530:	60fb      	str	r3, [r7, #12]
  return(result);
 800d532:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d536:	2301      	movs	r3, #1
 800d538:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	f383 8810 	msr	PRIMASK, r3
}
 800d540:	46c0      	nop			@ (mov r8, r8)
 800d542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2110      	movs	r1, #16
 800d54e:	438a      	bics	r2, r1
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d554:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f383 8810 	msr	PRIMASK, r3
}
 800d55c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d55e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d560:	2200      	movs	r2, #0
 800d562:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d109      	bne.n	800d580 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d56c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d56e:	22c0      	movs	r2, #192	@ 0xc0
 800d570:	589b      	ldr	r3, [r3, r2]
 800d572:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d574:	215c      	movs	r1, #92	@ 0x5c
 800d576:	5a51      	ldrh	r1, [r2, r1]
 800d578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d57a:	0010      	movs	r0, r2
 800d57c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d57e:	e005      	b.n	800d58c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800d580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d582:	22a0      	movs	r2, #160	@ 0xa0
 800d584:	589b      	ldr	r3, [r3, r2]
 800d586:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d588:	0010      	movs	r0, r2
 800d58a:	4798      	blx	r3
}
 800d58c:	46c0      	nop			@ (mov r8, r8)
 800d58e:	46bd      	mov	sp, r7
 800d590:	b014      	add	sp, #80	@ 0x50
 800d592:	bd80      	pop	{r7, pc}
 800d594:	fffffeff 	.word	0xfffffeff

0800d598 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d10b      	bne.n	800d5cc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	22c0      	movs	r2, #192	@ 0xc0
 800d5b8:	589b      	ldr	r3, [r3, r2]
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	215c      	movs	r1, #92	@ 0x5c
 800d5be:	5a52      	ldrh	r2, [r2, r1]
 800d5c0:	0852      	lsrs	r2, r2, #1
 800d5c2:	b291      	uxth	r1, r2
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	0010      	movs	r0, r2
 800d5c8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5ca:	e005      	b.n	800d5d8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	229c      	movs	r2, #156	@ 0x9c
 800d5d0:	589b      	ldr	r3, [r3, r2]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	0010      	movs	r0, r2
 800d5d6:	4798      	blx	r3
}
 800d5d8:	46c0      	nop			@ (mov r8, r8)
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	b004      	add	sp, #16
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2288      	movs	r2, #136	@ 0x88
 800d5f2:	589b      	ldr	r3, [r3, r2]
 800d5f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	228c      	movs	r2, #140	@ 0x8c
 800d5fa:	589b      	ldr	r3, [r3, r2]
 800d5fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	2280      	movs	r2, #128	@ 0x80
 800d606:	4013      	ands	r3, r2
 800d608:	2b80      	cmp	r3, #128	@ 0x80
 800d60a:	d10a      	bne.n	800d622 <UART_DMAError+0x42>
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	2b21      	cmp	r3, #33	@ 0x21
 800d610:	d107      	bne.n	800d622 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	2256      	movs	r2, #86	@ 0x56
 800d616:	2100      	movs	r1, #0
 800d618:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	0018      	movs	r0, r3
 800d61e:	f7ff fe7b 	bl	800d318 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	2240      	movs	r2, #64	@ 0x40
 800d62a:	4013      	ands	r3, r2
 800d62c:	2b40      	cmp	r3, #64	@ 0x40
 800d62e:	d10a      	bne.n	800d646 <UART_DMAError+0x66>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2b22      	cmp	r3, #34	@ 0x22
 800d634:	d107      	bne.n	800d646 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	225e      	movs	r2, #94	@ 0x5e
 800d63a:	2100      	movs	r1, #0
 800d63c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	0018      	movs	r0, r3
 800d642:	f7ff fea9 	bl	800d398 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	2290      	movs	r2, #144	@ 0x90
 800d64a:	589b      	ldr	r3, [r3, r2]
 800d64c:	2210      	movs	r2, #16
 800d64e:	431a      	orrs	r2, r3
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	2190      	movs	r1, #144	@ 0x90
 800d654:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	22a4      	movs	r2, #164	@ 0xa4
 800d65a:	589b      	ldr	r3, [r3, r2]
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	0010      	movs	r0, r2
 800d660:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d662:	46c0      	nop			@ (mov r8, r8)
 800d664:	46bd      	mov	sp, r7
 800d666:	b006      	add	sp, #24
 800d668:	bd80      	pop	{r7, pc}

0800d66a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b084      	sub	sp, #16
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	225e      	movs	r2, #94	@ 0x5e
 800d67c:	2100      	movs	r1, #0
 800d67e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2256      	movs	r2, #86	@ 0x56
 800d684:	2100      	movs	r1, #0
 800d686:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	22a4      	movs	r2, #164	@ 0xa4
 800d68c:	589b      	ldr	r3, [r3, r2]
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	0010      	movs	r0, r2
 800d692:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d694:	46c0      	nop			@ (mov r8, r8)
 800d696:	46bd      	mov	sp, r7
 800d698:	b004      	add	sp, #16
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6a4:	f3ef 8310 	mrs	r3, PRIMASK
 800d6a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6aa:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6ac:	617b      	str	r3, [r7, #20]
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f383 8810 	msr	PRIMASK, r3
}
 800d6b8:	46c0      	nop			@ (mov r8, r8)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2140      	movs	r1, #64	@ 0x40
 800d6c6:	438a      	bics	r2, r1
 800d6c8:	601a      	str	r2, [r3, #0]
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	f383 8810 	msr	PRIMASK, r3
}
 800d6d4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2288      	movs	r2, #136	@ 0x88
 800d6da:	2120      	movs	r1, #32
 800d6dc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2298      	movs	r2, #152	@ 0x98
 800d6e8:	589b      	ldr	r3, [r3, r2]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	0010      	movs	r0, r2
 800d6ee:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6f0:	46c0      	nop			@ (mov r8, r8)
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	b006      	add	sp, #24
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d700:	46c0      	nop			@ (mov r8, r8)
 800d702:	46bd      	mov	sp, r7
 800d704:	b002      	add	sp, #8
 800d706:	bd80      	pop	{r7, pc}

0800d708 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d710:	46c0      	nop			@ (mov r8, r8)
 800d712:	46bd      	mov	sp, r7
 800d714:	b002      	add	sp, #8
 800d716:	bd80      	pop	{r7, pc}

0800d718 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d720:	46c0      	nop			@ (mov r8, r8)
 800d722:	46bd      	mov	sp, r7
 800d724:	b002      	add	sp, #8
 800d726:	bd80      	pop	{r7, pc}

0800d728 <memset>:
 800d728:	0003      	movs	r3, r0
 800d72a:	1882      	adds	r2, r0, r2
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d100      	bne.n	800d732 <memset+0xa>
 800d730:	4770      	bx	lr
 800d732:	7019      	strb	r1, [r3, #0]
 800d734:	3301      	adds	r3, #1
 800d736:	e7f9      	b.n	800d72c <memset+0x4>

0800d738 <__libc_init_array>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	2600      	movs	r6, #0
 800d73c:	4c0c      	ldr	r4, [pc, #48]	@ (800d770 <__libc_init_array+0x38>)
 800d73e:	4d0d      	ldr	r5, [pc, #52]	@ (800d774 <__libc_init_array+0x3c>)
 800d740:	1b64      	subs	r4, r4, r5
 800d742:	10a4      	asrs	r4, r4, #2
 800d744:	42a6      	cmp	r6, r4
 800d746:	d109      	bne.n	800d75c <__libc_init_array+0x24>
 800d748:	2600      	movs	r6, #0
 800d74a:	f000 f823 	bl	800d794 <_init>
 800d74e:	4c0a      	ldr	r4, [pc, #40]	@ (800d778 <__libc_init_array+0x40>)
 800d750:	4d0a      	ldr	r5, [pc, #40]	@ (800d77c <__libc_init_array+0x44>)
 800d752:	1b64      	subs	r4, r4, r5
 800d754:	10a4      	asrs	r4, r4, #2
 800d756:	42a6      	cmp	r6, r4
 800d758:	d105      	bne.n	800d766 <__libc_init_array+0x2e>
 800d75a:	bd70      	pop	{r4, r5, r6, pc}
 800d75c:	00b3      	lsls	r3, r6, #2
 800d75e:	58eb      	ldr	r3, [r5, r3]
 800d760:	4798      	blx	r3
 800d762:	3601      	adds	r6, #1
 800d764:	e7ee      	b.n	800d744 <__libc_init_array+0xc>
 800d766:	00b3      	lsls	r3, r6, #2
 800d768:	58eb      	ldr	r3, [r5, r3]
 800d76a:	4798      	blx	r3
 800d76c:	3601      	adds	r6, #1
 800d76e:	e7f2      	b.n	800d756 <__libc_init_array+0x1e>
 800d770:	0800e224 	.word	0x0800e224
 800d774:	0800e224 	.word	0x0800e224
 800d778:	0800e228 	.word	0x0800e228
 800d77c:	0800e224 	.word	0x0800e224

0800d780 <memcpy>:
 800d780:	2300      	movs	r3, #0
 800d782:	b510      	push	{r4, lr}
 800d784:	429a      	cmp	r2, r3
 800d786:	d100      	bne.n	800d78a <memcpy+0xa>
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	5ccc      	ldrb	r4, [r1, r3]
 800d78c:	54c4      	strb	r4, [r0, r3]
 800d78e:	3301      	adds	r3, #1
 800d790:	e7f8      	b.n	800d784 <memcpy+0x4>
	...

0800d794 <_init>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	46c0      	nop			@ (mov r8, r8)
 800d798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79a:	bc08      	pop	{r3}
 800d79c:	469e      	mov	lr, r3
 800d79e:	4770      	bx	lr

0800d7a0 <_fini>:
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a2:	46c0      	nop			@ (mov r8, r8)
 800d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a6:	bc08      	pop	{r3}
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	4770      	bx	lr
